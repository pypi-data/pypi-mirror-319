# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from ...payment_method_types.types.payment_method_type import PaymentMethodType
import typing
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class PaymentMethodCustomizationRequest(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.entity_types import PaymentMethodCustomizationRequest

    PaymentMethodCustomizationRequest(
        type="bankAccount",
        disabled=True,
    )
    """

    type: PaymentMethodType
    schema_id: typing.Optional[str] = pydantic.Field(alias="schemaId", default=None)
    """
    If type is custom, this is the ID of the schema to use for this payment method.
    """

    disabled: bool = pydantic.Field()
    """
    If true, this method will will not be available to the entity.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
