# coding: utf-8

"""
    Selling Partner API for Catalog Items

    The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.catalogItemsV0.models.creator_type import CreatorType
from py_sp_api.generated.catalogItemsV0.models.decimal_with_units import DecimalWithUnits
from py_sp_api.generated.catalogItemsV0.models.dimension_type import DimensionType
from py_sp_api.generated.catalogItemsV0.models.image import Image
from py_sp_api.generated.catalogItemsV0.models.language_type import LanguageType
from py_sp_api.generated.catalogItemsV0.models.price import Price
from typing import Optional, Set
from typing_extensions import Self

class AttributeSetListType(BaseModel):
    """
    The attributes of the item.
    """ # noqa: E501
    actor: Optional[List[StrictStr]] = Field(default=None, description="The actor attributes of the item.", alias="Actor")
    artist: Optional[List[StrictStr]] = Field(default=None, description="The artist attributes of the item.", alias="Artist")
    aspect_ratio: Optional[StrictStr] = Field(default=None, description="The aspect ratio attribute of the item.", alias="AspectRatio")
    audience_rating: Optional[StrictStr] = Field(default=None, description="The audience rating attribute of the item.", alias="AudienceRating")
    author: Optional[List[StrictStr]] = Field(default=None, description="The author attributes of the item.", alias="Author")
    back_finding: Optional[StrictStr] = Field(default=None, description="The back finding attribute of the item.", alias="BackFinding")
    band_material_type: Optional[StrictStr] = Field(default=None, description="The band material type attribute of the item.", alias="BandMaterialType")
    binding: Optional[StrictStr] = Field(default=None, description="The binding attribute of the item.", alias="Binding")
    bluray_region: Optional[StrictStr] = Field(default=None, description="The Bluray region attribute of the item.", alias="BlurayRegion")
    brand: Optional[StrictStr] = Field(default=None, description="The brand attribute of the item.", alias="Brand")
    cero_age_rating: Optional[StrictStr] = Field(default=None, description="The CERO age rating attribute of the item.", alias="CeroAgeRating")
    chain_type: Optional[StrictStr] = Field(default=None, description="The chain type attribute of the item.", alias="ChainType")
    clasp_type: Optional[StrictStr] = Field(default=None, description="The clasp type attribute of the item.", alias="ClaspType")
    color: Optional[StrictStr] = Field(default=None, description="The color attribute of the item.", alias="Color")
    cpu_manufacturer: Optional[StrictStr] = Field(default=None, description="The CPU manufacturer attribute of the item.", alias="CpuManufacturer")
    cpu_speed: Optional[DecimalWithUnits] = Field(default=None, alias="CpuSpeed")
    cpu_type: Optional[StrictStr] = Field(default=None, description="The CPU type attribute of the item.", alias="CpuType")
    creator: Optional[List[CreatorType]] = Field(default=None, description="The creator attributes of the item.", alias="Creator")
    department: Optional[StrictStr] = Field(default=None, description="The department attribute of the item.", alias="Department")
    director: Optional[List[StrictStr]] = Field(default=None, description="The director attributes of the item.", alias="Director")
    display_size: Optional[DecimalWithUnits] = Field(default=None, alias="DisplaySize")
    edition: Optional[StrictStr] = Field(default=None, description="The edition attribute of the item.", alias="Edition")
    episode_sequence: Optional[StrictStr] = Field(default=None, description="The episode sequence attribute of the item.", alias="EpisodeSequence")
    esrb_age_rating: Optional[StrictStr] = Field(default=None, description="The ESRB age rating attribute of the item.", alias="EsrbAgeRating")
    feature: Optional[List[StrictStr]] = Field(default=None, description="The feature attributes of the item", alias="Feature")
    flavor: Optional[StrictStr] = Field(default=None, description="The flavor attribute of the item.", alias="Flavor")
    format: Optional[List[StrictStr]] = Field(default=None, description="The format attributes of the item.", alias="Format")
    gem_type: Optional[List[StrictStr]] = Field(default=None, description="The gem type attributes of the item.", alias="GemType")
    genre: Optional[StrictStr] = Field(default=None, description="The genre attribute of the item.", alias="Genre")
    golf_club_flex: Optional[StrictStr] = Field(default=None, description="The golf club flex attribute of the item.", alias="GolfClubFlex")
    golf_club_loft: Optional[DecimalWithUnits] = Field(default=None, alias="GolfClubLoft")
    hand_orientation: Optional[StrictStr] = Field(default=None, description="The hand orientation attribute of the item.", alias="HandOrientation")
    hard_disk_interface: Optional[StrictStr] = Field(default=None, description="The hard disk interface attribute of the item.", alias="HardDiskInterface")
    hard_disk_size: Optional[DecimalWithUnits] = Field(default=None, alias="HardDiskSize")
    hardware_platform: Optional[StrictStr] = Field(default=None, description="The hardware platform attribute of the item.", alias="HardwarePlatform")
    hazardous_material_type: Optional[StrictStr] = Field(default=None, description="The hazardous material type attribute of the item.", alias="HazardousMaterialType")
    item_dimensions: Optional[DimensionType] = Field(default=None, alias="ItemDimensions")
    is_adult_product: Optional[StrictBool] = Field(default=None, description="The adult product attribute of the item.", alias="IsAdultProduct")
    is_autographed: Optional[StrictBool] = Field(default=None, description="The autographed attribute of the item.", alias="IsAutographed")
    is_eligible_for_trade_in: Optional[StrictBool] = Field(default=None, description="The is eligible for trade in attribute of the item.", alias="IsEligibleForTradeIn")
    is_memorabilia: Optional[StrictBool] = Field(default=None, description="The is memorabilia attribute of the item.", alias="IsMemorabilia")
    issues_per_year: Optional[StrictStr] = Field(default=None, description="The issues per year attribute of the item.", alias="IssuesPerYear")
    item_part_number: Optional[StrictStr] = Field(default=None, description="The item part number attribute of the item.", alias="ItemPartNumber")
    label: Optional[StrictStr] = Field(default=None, description="The label attribute of the item.", alias="Label")
    languages: Optional[List[LanguageType]] = Field(default=None, description="The languages attribute of the item.", alias="Languages")
    legal_disclaimer: Optional[StrictStr] = Field(default=None, description="The legal disclaimer attribute of the item.", alias="LegalDisclaimer")
    list_price: Optional[Price] = Field(default=None, alias="ListPrice")
    manufacturer: Optional[StrictStr] = Field(default=None, description="The manufacturer attribute of the item.", alias="Manufacturer")
    manufacturer_maximum_age: Optional[DecimalWithUnits] = Field(default=None, alias="ManufacturerMaximumAge")
    manufacturer_minimum_age: Optional[DecimalWithUnits] = Field(default=None, alias="ManufacturerMinimumAge")
    manufacturer_parts_warranty_description: Optional[StrictStr] = Field(default=None, description="The manufacturer parts warranty description attribute of the item.", alias="ManufacturerPartsWarrantyDescription")
    material_type: Optional[List[StrictStr]] = Field(default=None, description="The material type attributes of the item.", alias="MaterialType")
    maximum_resolution: Optional[DecimalWithUnits] = Field(default=None, alias="MaximumResolution")
    media_type: Optional[List[StrictStr]] = Field(default=None, description="The media type attributes of the item.", alias="MediaType")
    metal_stamp: Optional[StrictStr] = Field(default=None, description="The metal stamp attribute of the item.", alias="MetalStamp")
    metal_type: Optional[StrictStr] = Field(default=None, description="The metal type attribute of the item.", alias="MetalType")
    model: Optional[StrictStr] = Field(default=None, description="The model attribute of the item.", alias="Model")
    number_of_discs: Optional[StrictInt] = Field(default=None, description="The number of discs attribute of the item.", alias="NumberOfDiscs")
    number_of_issues: Optional[StrictInt] = Field(default=None, description="The number of issues attribute of the item.", alias="NumberOfIssues")
    number_of_items: Optional[StrictInt] = Field(default=None, description="The number of items attribute of the item.", alias="NumberOfItems")
    number_of_pages: Optional[StrictInt] = Field(default=None, description="The number of pages attribute of the item.", alias="NumberOfPages")
    number_of_tracks: Optional[StrictInt] = Field(default=None, description="The number of tracks attribute of the item.", alias="NumberOfTracks")
    operating_system: Optional[List[StrictStr]] = Field(default=None, description="The operating system attributes of the item.", alias="OperatingSystem")
    optical_zoom: Optional[DecimalWithUnits] = Field(default=None, alias="OpticalZoom")
    package_dimensions: Optional[DimensionType] = Field(default=None, alias="PackageDimensions")
    package_quantity: Optional[StrictInt] = Field(default=None, description="The package quantity attribute of the item.", alias="PackageQuantity")
    part_number: Optional[StrictStr] = Field(default=None, description="The part number attribute of the item.", alias="PartNumber")
    pegi_rating: Optional[StrictStr] = Field(default=None, description="The PEGI rating attribute of the item.", alias="PegiRating")
    platform: Optional[List[StrictStr]] = Field(default=None, description="The platform attributes of the item.", alias="Platform")
    processor_count: Optional[StrictInt] = Field(default=None, description="The processor count attribute of the item.", alias="ProcessorCount")
    product_group: Optional[StrictStr] = Field(default=None, description="The product group attribute of the item.", alias="ProductGroup")
    product_type_name: Optional[StrictStr] = Field(default=None, description="The product type name attribute of the item.", alias="ProductTypeName")
    product_type_subcategory: Optional[StrictStr] = Field(default=None, description="The product type subcategory attribute of the item.", alias="ProductTypeSubcategory")
    publication_date: Optional[StrictStr] = Field(default=None, description="The publication date attribute of the item.", alias="PublicationDate")
    publisher: Optional[StrictStr] = Field(default=None, description="The publisher attribute of the item.", alias="Publisher")
    region_code: Optional[StrictStr] = Field(default=None, description="The region code attribute of the item.", alias="RegionCode")
    release_date: Optional[StrictStr] = Field(default=None, description="The release date attribute of the item.", alias="ReleaseDate")
    ring_size: Optional[StrictStr] = Field(default=None, description="The ring size attribute of the item.", alias="RingSize")
    running_time: Optional[DecimalWithUnits] = Field(default=None, alias="RunningTime")
    shaft_material: Optional[StrictStr] = Field(default=None, description="The shaft material attribute of the item.", alias="ShaftMaterial")
    scent: Optional[StrictStr] = Field(default=None, description="The scent attribute of the item.", alias="Scent")
    season_sequence: Optional[StrictStr] = Field(default=None, description="The season sequence attribute of the item.", alias="SeasonSequence")
    seikodo_product_code: Optional[StrictStr] = Field(default=None, description="The Seikodo product code attribute of the item.", alias="SeikodoProductCode")
    size: Optional[StrictStr] = Field(default=None, description="The size attribute of the item.", alias="Size")
    size_per_pearl: Optional[StrictStr] = Field(default=None, description="The size per pearl attribute of the item.", alias="SizePerPearl")
    small_image: Optional[Image] = Field(default=None, alias="SmallImage")
    studio: Optional[StrictStr] = Field(default=None, description="The studio attribute of the item.", alias="Studio")
    subscription_length: Optional[DecimalWithUnits] = Field(default=None, alias="SubscriptionLength")
    system_memory_size: Optional[DecimalWithUnits] = Field(default=None, alias="SystemMemorySize")
    system_memory_type: Optional[StrictStr] = Field(default=None, description="The system memory type attribute of the item.", alias="SystemMemoryType")
    theatrical_release_date: Optional[StrictStr] = Field(default=None, description="The theatrical release date attribute of the item.", alias="TheatricalReleaseDate")
    title: Optional[StrictStr] = Field(default=None, description="The title attribute of the item.", alias="Title")
    total_diamond_weight: Optional[DecimalWithUnits] = Field(default=None, alias="TotalDiamondWeight")
    total_gem_weight: Optional[DecimalWithUnits] = Field(default=None, alias="TotalGemWeight")
    warranty: Optional[StrictStr] = Field(default=None, description="The warranty attribute of the item.", alias="Warranty")
    weee_tax_value: Optional[Price] = Field(default=None, alias="WeeeTaxValue")
    __properties: ClassVar[List[str]] = ["Actor", "Artist", "AspectRatio", "AudienceRating", "Author", "BackFinding", "BandMaterialType", "Binding", "BlurayRegion", "Brand", "CeroAgeRating", "ChainType", "ClaspType", "Color", "CpuManufacturer", "CpuSpeed", "CpuType", "Creator", "Department", "Director", "DisplaySize", "Edition", "EpisodeSequence", "EsrbAgeRating", "Feature", "Flavor", "Format", "GemType", "Genre", "GolfClubFlex", "GolfClubLoft", "HandOrientation", "HardDiskInterface", "HardDiskSize", "HardwarePlatform", "HazardousMaterialType", "ItemDimensions", "IsAdultProduct", "IsAutographed", "IsEligibleForTradeIn", "IsMemorabilia", "IssuesPerYear", "ItemPartNumber", "Label", "Languages", "LegalDisclaimer", "ListPrice", "Manufacturer", "ManufacturerMaximumAge", "ManufacturerMinimumAge", "ManufacturerPartsWarrantyDescription", "MaterialType", "MaximumResolution", "MediaType", "MetalStamp", "MetalType", "Model", "NumberOfDiscs", "NumberOfIssues", "NumberOfItems", "NumberOfPages", "NumberOfTracks", "OperatingSystem", "OpticalZoom", "PackageDimensions", "PackageQuantity", "PartNumber", "PegiRating", "Platform", "ProcessorCount", "ProductGroup", "ProductTypeName", "ProductTypeSubcategory", "PublicationDate", "Publisher", "RegionCode", "ReleaseDate", "RingSize", "RunningTime", "ShaftMaterial", "Scent", "SeasonSequence", "SeikodoProductCode", "Size", "SizePerPearl", "SmallImage", "Studio", "SubscriptionLength", "SystemMemorySize", "SystemMemoryType", "TheatricalReleaseDate", "Title", "TotalDiamondWeight", "TotalGemWeight", "Warranty", "WeeeTaxValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttributeSetListType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cpu_speed
        if self.cpu_speed:
            _dict['CpuSpeed'] = self.cpu_speed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in creator (list)
        _items = []
        if self.creator:
            for _item_creator in self.creator:
                if _item_creator:
                    _items.append(_item_creator.to_dict())
            _dict['Creator'] = _items
        # override the default output from pydantic by calling `to_dict()` of display_size
        if self.display_size:
            _dict['DisplaySize'] = self.display_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of golf_club_loft
        if self.golf_club_loft:
            _dict['GolfClubLoft'] = self.golf_club_loft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hard_disk_size
        if self.hard_disk_size:
            _dict['HardDiskSize'] = self.hard_disk_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of item_dimensions
        if self.item_dimensions:
            _dict['ItemDimensions'] = self.item_dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in languages (list)
        _items = []
        if self.languages:
            for _item_languages in self.languages:
                if _item_languages:
                    _items.append(_item_languages.to_dict())
            _dict['Languages'] = _items
        # override the default output from pydantic by calling `to_dict()` of list_price
        if self.list_price:
            _dict['ListPrice'] = self.list_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manufacturer_maximum_age
        if self.manufacturer_maximum_age:
            _dict['ManufacturerMaximumAge'] = self.manufacturer_maximum_age.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manufacturer_minimum_age
        if self.manufacturer_minimum_age:
            _dict['ManufacturerMinimumAge'] = self.manufacturer_minimum_age.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maximum_resolution
        if self.maximum_resolution:
            _dict['MaximumResolution'] = self.maximum_resolution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of optical_zoom
        if self.optical_zoom:
            _dict['OpticalZoom'] = self.optical_zoom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of package_dimensions
        if self.package_dimensions:
            _dict['PackageDimensions'] = self.package_dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of running_time
        if self.running_time:
            _dict['RunningTime'] = self.running_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of small_image
        if self.small_image:
            _dict['SmallImage'] = self.small_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription_length
        if self.subscription_length:
            _dict['SubscriptionLength'] = self.subscription_length.to_dict()
        # override the default output from pydantic by calling `to_dict()` of system_memory_size
        if self.system_memory_size:
            _dict['SystemMemorySize'] = self.system_memory_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_diamond_weight
        if self.total_diamond_weight:
            _dict['TotalDiamondWeight'] = self.total_diamond_weight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_gem_weight
        if self.total_gem_weight:
            _dict['TotalGemWeight'] = self.total_gem_weight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weee_tax_value
        if self.weee_tax_value:
            _dict['WeeeTaxValue'] = self.weee_tax_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttributeSetListType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Actor": obj.get("Actor"),
            "Artist": obj.get("Artist"),
            "AspectRatio": obj.get("AspectRatio"),
            "AudienceRating": obj.get("AudienceRating"),
            "Author": obj.get("Author"),
            "BackFinding": obj.get("BackFinding"),
            "BandMaterialType": obj.get("BandMaterialType"),
            "Binding": obj.get("Binding"),
            "BlurayRegion": obj.get("BlurayRegion"),
            "Brand": obj.get("Brand"),
            "CeroAgeRating": obj.get("CeroAgeRating"),
            "ChainType": obj.get("ChainType"),
            "ClaspType": obj.get("ClaspType"),
            "Color": obj.get("Color"),
            "CpuManufacturer": obj.get("CpuManufacturer"),
            "CpuSpeed": DecimalWithUnits.from_dict(obj["CpuSpeed"]) if obj.get("CpuSpeed") is not None else None,
            "CpuType": obj.get("CpuType"),
            "Creator": [CreatorType.from_dict(_item) for _item in obj["Creator"]] if obj.get("Creator") is not None else None,
            "Department": obj.get("Department"),
            "Director": obj.get("Director"),
            "DisplaySize": DecimalWithUnits.from_dict(obj["DisplaySize"]) if obj.get("DisplaySize") is not None else None,
            "Edition": obj.get("Edition"),
            "EpisodeSequence": obj.get("EpisodeSequence"),
            "EsrbAgeRating": obj.get("EsrbAgeRating"),
            "Feature": obj.get("Feature"),
            "Flavor": obj.get("Flavor"),
            "Format": obj.get("Format"),
            "GemType": obj.get("GemType"),
            "Genre": obj.get("Genre"),
            "GolfClubFlex": obj.get("GolfClubFlex"),
            "GolfClubLoft": DecimalWithUnits.from_dict(obj["GolfClubLoft"]) if obj.get("GolfClubLoft") is not None else None,
            "HandOrientation": obj.get("HandOrientation"),
            "HardDiskInterface": obj.get("HardDiskInterface"),
            "HardDiskSize": DecimalWithUnits.from_dict(obj["HardDiskSize"]) if obj.get("HardDiskSize") is not None else None,
            "HardwarePlatform": obj.get("HardwarePlatform"),
            "HazardousMaterialType": obj.get("HazardousMaterialType"),
            "ItemDimensions": DimensionType.from_dict(obj["ItemDimensions"]) if obj.get("ItemDimensions") is not None else None,
            "IsAdultProduct": obj.get("IsAdultProduct"),
            "IsAutographed": obj.get("IsAutographed"),
            "IsEligibleForTradeIn": obj.get("IsEligibleForTradeIn"),
            "IsMemorabilia": obj.get("IsMemorabilia"),
            "IssuesPerYear": obj.get("IssuesPerYear"),
            "ItemPartNumber": obj.get("ItemPartNumber"),
            "Label": obj.get("Label"),
            "Languages": [LanguageType.from_dict(_item) for _item in obj["Languages"]] if obj.get("Languages") is not None else None,
            "LegalDisclaimer": obj.get("LegalDisclaimer"),
            "ListPrice": Price.from_dict(obj["ListPrice"]) if obj.get("ListPrice") is not None else None,
            "Manufacturer": obj.get("Manufacturer"),
            "ManufacturerMaximumAge": DecimalWithUnits.from_dict(obj["ManufacturerMaximumAge"]) if obj.get("ManufacturerMaximumAge") is not None else None,
            "ManufacturerMinimumAge": DecimalWithUnits.from_dict(obj["ManufacturerMinimumAge"]) if obj.get("ManufacturerMinimumAge") is not None else None,
            "ManufacturerPartsWarrantyDescription": obj.get("ManufacturerPartsWarrantyDescription"),
            "MaterialType": obj.get("MaterialType"),
            "MaximumResolution": DecimalWithUnits.from_dict(obj["MaximumResolution"]) if obj.get("MaximumResolution") is not None else None,
            "MediaType": obj.get("MediaType"),
            "MetalStamp": obj.get("MetalStamp"),
            "MetalType": obj.get("MetalType"),
            "Model": obj.get("Model"),
            "NumberOfDiscs": obj.get("NumberOfDiscs"),
            "NumberOfIssues": obj.get("NumberOfIssues"),
            "NumberOfItems": obj.get("NumberOfItems"),
            "NumberOfPages": obj.get("NumberOfPages"),
            "NumberOfTracks": obj.get("NumberOfTracks"),
            "OperatingSystem": obj.get("OperatingSystem"),
            "OpticalZoom": DecimalWithUnits.from_dict(obj["OpticalZoom"]) if obj.get("OpticalZoom") is not None else None,
            "PackageDimensions": DimensionType.from_dict(obj["PackageDimensions"]) if obj.get("PackageDimensions") is not None else None,
            "PackageQuantity": obj.get("PackageQuantity"),
            "PartNumber": obj.get("PartNumber"),
            "PegiRating": obj.get("PegiRating"),
            "Platform": obj.get("Platform"),
            "ProcessorCount": obj.get("ProcessorCount"),
            "ProductGroup": obj.get("ProductGroup"),
            "ProductTypeName": obj.get("ProductTypeName"),
            "ProductTypeSubcategory": obj.get("ProductTypeSubcategory"),
            "PublicationDate": obj.get("PublicationDate"),
            "Publisher": obj.get("Publisher"),
            "RegionCode": obj.get("RegionCode"),
            "ReleaseDate": obj.get("ReleaseDate"),
            "RingSize": obj.get("RingSize"),
            "RunningTime": DecimalWithUnits.from_dict(obj["RunningTime"]) if obj.get("RunningTime") is not None else None,
            "ShaftMaterial": obj.get("ShaftMaterial"),
            "Scent": obj.get("Scent"),
            "SeasonSequence": obj.get("SeasonSequence"),
            "SeikodoProductCode": obj.get("SeikodoProductCode"),
            "Size": obj.get("Size"),
            "SizePerPearl": obj.get("SizePerPearl"),
            "SmallImage": Image.from_dict(obj["SmallImage"]) if obj.get("SmallImage") is not None else None,
            "Studio": obj.get("Studio"),
            "SubscriptionLength": DecimalWithUnits.from_dict(obj["SubscriptionLength"]) if obj.get("SubscriptionLength") is not None else None,
            "SystemMemorySize": DecimalWithUnits.from_dict(obj["SystemMemorySize"]) if obj.get("SystemMemorySize") is not None else None,
            "SystemMemoryType": obj.get("SystemMemoryType"),
            "TheatricalReleaseDate": obj.get("TheatricalReleaseDate"),
            "Title": obj.get("Title"),
            "TotalDiamondWeight": DecimalWithUnits.from_dict(obj["TotalDiamondWeight"]) if obj.get("TotalDiamondWeight") is not None else None,
            "TotalGemWeight": DecimalWithUnits.from_dict(obj["TotalGemWeight"]) if obj.get("TotalGemWeight") is not None else None,
            "Warranty": obj.get("Warranty"),
            "WeeeTaxValue": Price.from_dict(obj["WeeeTaxValue"]) if obj.get("WeeeTaxValue") is not None else None
        })
        return _obj


