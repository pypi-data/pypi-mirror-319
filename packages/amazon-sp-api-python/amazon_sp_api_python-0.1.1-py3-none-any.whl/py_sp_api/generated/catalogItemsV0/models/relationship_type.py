# coding: utf-8

"""
    Selling Partner API for Catalog Items

    The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.catalogItemsV0.models.decimal_with_units import DecimalWithUnits
from py_sp_api.generated.catalogItemsV0.models.dimension_type import DimensionType
from py_sp_api.generated.catalogItemsV0.models.identifier_type import IdentifierType
from typing import Optional, Set
from typing_extensions import Self

class RelationshipType(BaseModel):
    """
    Specific variations of the item.
    """ # noqa: E501
    identifiers: Optional[IdentifierType] = Field(default=None, alias="Identifiers")
    color: Optional[StrictStr] = Field(default=None, description="The color variation of the item.", alias="Color")
    edition: Optional[StrictStr] = Field(default=None, description="The edition variation of the item.", alias="Edition")
    flavor: Optional[StrictStr] = Field(default=None, description="The flavor variation of the item.", alias="Flavor")
    gem_type: Optional[List[StrictStr]] = Field(default=None, description="The gem type variations of the item.", alias="GemType")
    golf_club_flex: Optional[StrictStr] = Field(default=None, description="The golf club flex variation of an item.", alias="GolfClubFlex")
    hand_orientation: Optional[StrictStr] = Field(default=None, description="The hand orientation variation of an item.", alias="HandOrientation")
    hardware_platform: Optional[StrictStr] = Field(default=None, description="The hardware platform variation of an item.", alias="HardwarePlatform")
    material_type: Optional[List[StrictStr]] = Field(default=None, description="The material type variations of an item.", alias="MaterialType")
    metal_type: Optional[StrictStr] = Field(default=None, description="The metal type variation of an item.", alias="MetalType")
    model: Optional[StrictStr] = Field(default=None, description="The model variation of an item.", alias="Model")
    operating_system: Optional[List[StrictStr]] = Field(default=None, description="The operating system variations of an item.", alias="OperatingSystem")
    product_type_subcategory: Optional[StrictStr] = Field(default=None, description="The product type subcategory variation of an item.", alias="ProductTypeSubcategory")
    ring_size: Optional[StrictStr] = Field(default=None, description="The ring size variation of an item.", alias="RingSize")
    shaft_material: Optional[StrictStr] = Field(default=None, description="The shaft material variation of an item.", alias="ShaftMaterial")
    scent: Optional[StrictStr] = Field(default=None, description="The scent variation of an item.", alias="Scent")
    size: Optional[StrictStr] = Field(default=None, description="The size variation of an item.", alias="Size")
    size_per_pearl: Optional[StrictStr] = Field(default=None, description="The size per pearl variation of an item.", alias="SizePerPearl")
    golf_club_loft: Optional[DecimalWithUnits] = Field(default=None, alias="GolfClubLoft")
    total_diamond_weight: Optional[DecimalWithUnits] = Field(default=None, alias="TotalDiamondWeight")
    total_gem_weight: Optional[DecimalWithUnits] = Field(default=None, alias="TotalGemWeight")
    package_quantity: Optional[StrictInt] = Field(default=None, description="The package quantity variation of an item.", alias="PackageQuantity")
    item_dimensions: Optional[DimensionType] = Field(default=None, alias="ItemDimensions")
    __properties: ClassVar[List[str]] = ["Identifiers", "Color", "Edition", "Flavor", "GemType", "GolfClubFlex", "HandOrientation", "HardwarePlatform", "MaterialType", "MetalType", "Model", "OperatingSystem", "ProductTypeSubcategory", "RingSize", "ShaftMaterial", "Scent", "Size", "SizePerPearl", "GolfClubLoft", "TotalDiamondWeight", "TotalGemWeight", "PackageQuantity", "ItemDimensions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RelationshipType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of identifiers
        if self.identifiers:
            _dict['Identifiers'] = self.identifiers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of golf_club_loft
        if self.golf_club_loft:
            _dict['GolfClubLoft'] = self.golf_club_loft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_diamond_weight
        if self.total_diamond_weight:
            _dict['TotalDiamondWeight'] = self.total_diamond_weight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_gem_weight
        if self.total_gem_weight:
            _dict['TotalGemWeight'] = self.total_gem_weight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of item_dimensions
        if self.item_dimensions:
            _dict['ItemDimensions'] = self.item_dimensions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RelationshipType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Identifiers": IdentifierType.from_dict(obj["Identifiers"]) if obj.get("Identifiers") is not None else None,
            "Color": obj.get("Color"),
            "Edition": obj.get("Edition"),
            "Flavor": obj.get("Flavor"),
            "GemType": obj.get("GemType"),
            "GolfClubFlex": obj.get("GolfClubFlex"),
            "HandOrientation": obj.get("HandOrientation"),
            "HardwarePlatform": obj.get("HardwarePlatform"),
            "MaterialType": obj.get("MaterialType"),
            "MetalType": obj.get("MetalType"),
            "Model": obj.get("Model"),
            "OperatingSystem": obj.get("OperatingSystem"),
            "ProductTypeSubcategory": obj.get("ProductTypeSubcategory"),
            "RingSize": obj.get("RingSize"),
            "ShaftMaterial": obj.get("ShaftMaterial"),
            "Scent": obj.get("Scent"),
            "Size": obj.get("Size"),
            "SizePerPearl": obj.get("SizePerPearl"),
            "GolfClubLoft": DecimalWithUnits.from_dict(obj["GolfClubLoft"]) if obj.get("GolfClubLoft") is not None else None,
            "TotalDiamondWeight": DecimalWithUnits.from_dict(obj["TotalDiamondWeight"]) if obj.get("TotalDiamondWeight") is not None else None,
            "TotalGemWeight": DecimalWithUnits.from_dict(obj["TotalGemWeight"]) if obj.get("TotalGemWeight") is not None else None,
            "PackageQuantity": obj.get("PackageQuantity"),
            "ItemDimensions": DimensionType.from_dict(obj["ItemDimensions"]) if obj.get("ItemDimensions") is not None else None
        })
        return _obj


