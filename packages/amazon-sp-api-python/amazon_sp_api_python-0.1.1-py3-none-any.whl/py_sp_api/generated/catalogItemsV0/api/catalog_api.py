# coding: utf-8

"""
    Selling Partner API for Catalog Items

    The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from py_sp_api.generated.catalogItemsV0.models.get_catalog_item_response import GetCatalogItemResponse
from py_sp_api.generated.catalogItemsV0.models.list_catalog_categories_response import ListCatalogCategoriesResponse
from py_sp_api.generated.catalogItemsV0.models.list_catalog_items_response import ListCatalogItemsResponse

from py_sp_api.generated.catalogItemsV0.api_client import ApiClient, RequestSerialized
from py_sp_api.generated.catalogItemsV0.api_response import ApiResponse
from py_sp_api.generated.catalogItemsV0.rest import RESTResponseType


class CatalogApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_catalog_item(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for the item.")],
        asin: Annotated[StrictStr, Field(description="The Amazon Standard Identification Number (ASIN) of the item.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetCatalogItemResponse:
        """get_catalog_item

        Effective September 30, 2022, the `getCatalogItem` operation will no longer be available in the Selling Partner API for Catalog Items v0. This operation is available in the latest version of the [Selling Partner API for Catalog Items v2022-04-01](doc:catalog-items-api-v2022-04-01-reference). Integrations that rely on this operation should migrate to the latest version to avoid service disruption.  _Note:_ The [`listCatalogCategories`](#get-catalogv0categories) operation is not being deprecated and you can continue to make calls to it.

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for the item. (required)
        :type marketplace_id: str
        :param asin: The Amazon Standard Identification Number (ASIN) of the item. (required)
        :type asin: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_catalog_item_serialize(
            marketplace_id=marketplace_id,
            asin=asin,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCatalogItemResponse",
            '400': "GetCatalogItemResponse",
            '401': "GetCatalogItemResponse",
            '403': "GetCatalogItemResponse",
            '404': "GetCatalogItemResponse",
            '429': "GetCatalogItemResponse",
            '500': "GetCatalogItemResponse",
            '503': "GetCatalogItemResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_catalog_item_with_http_info(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for the item.")],
        asin: Annotated[StrictStr, Field(description="The Amazon Standard Identification Number (ASIN) of the item.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetCatalogItemResponse]:
        """get_catalog_item

        Effective September 30, 2022, the `getCatalogItem` operation will no longer be available in the Selling Partner API for Catalog Items v0. This operation is available in the latest version of the [Selling Partner API for Catalog Items v2022-04-01](doc:catalog-items-api-v2022-04-01-reference). Integrations that rely on this operation should migrate to the latest version to avoid service disruption.  _Note:_ The [`listCatalogCategories`](#get-catalogv0categories) operation is not being deprecated and you can continue to make calls to it.

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for the item. (required)
        :type marketplace_id: str
        :param asin: The Amazon Standard Identification Number (ASIN) of the item. (required)
        :type asin: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_catalog_item_serialize(
            marketplace_id=marketplace_id,
            asin=asin,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCatalogItemResponse",
            '400': "GetCatalogItemResponse",
            '401': "GetCatalogItemResponse",
            '403': "GetCatalogItemResponse",
            '404': "GetCatalogItemResponse",
            '429': "GetCatalogItemResponse",
            '500': "GetCatalogItemResponse",
            '503': "GetCatalogItemResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_catalog_item_without_preload_content(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for the item.")],
        asin: Annotated[StrictStr, Field(description="The Amazon Standard Identification Number (ASIN) of the item.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_catalog_item

        Effective September 30, 2022, the `getCatalogItem` operation will no longer be available in the Selling Partner API for Catalog Items v0. This operation is available in the latest version of the [Selling Partner API for Catalog Items v2022-04-01](doc:catalog-items-api-v2022-04-01-reference). Integrations that rely on this operation should migrate to the latest version to avoid service disruption.  _Note:_ The [`listCatalogCategories`](#get-catalogv0categories) operation is not being deprecated and you can continue to make calls to it.

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for the item. (required)
        :type marketplace_id: str
        :param asin: The Amazon Standard Identification Number (ASIN) of the item. (required)
        :type asin: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_catalog_item_serialize(
            marketplace_id=marketplace_id,
            asin=asin,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCatalogItemResponse",
            '400': "GetCatalogItemResponse",
            '401': "GetCatalogItemResponse",
            '403': "GetCatalogItemResponse",
            '404': "GetCatalogItemResponse",
            '429': "GetCatalogItemResponse",
            '500': "GetCatalogItemResponse",
            '503': "GetCatalogItemResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_catalog_item_serialize(
        self,
        marketplace_id,
        asin,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if asin is not None:
            _path_params['asin'] = asin
        # process the query parameters
        if marketplace_id is not None:
            
            _query_params.append(('MarketplaceId', marketplace_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/v0/items/{asin}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_catalog_categories(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for the item.")],
        asin: Annotated[Optional[StrictStr], Field(description="The Amazon Standard Identification Number (ASIN) of the item.")] = None,
        seller_sku: Annotated[Optional[StrictStr], Field(description="Used to identify items in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListCatalogCategoriesResponse:
        """list_catalog_categories

        Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for the item. (required)
        :type marketplace_id: str
        :param asin: The Amazon Standard Identification Number (ASIN) of the item.
        :type asin: str
        :param seller_sku: Used to identify items in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.
        :type seller_sku: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_catalog_categories_serialize(
            marketplace_id=marketplace_id,
            asin=asin,
            seller_sku=seller_sku,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListCatalogCategoriesResponse",
            '400': "ListCatalogCategoriesResponse",
            '401': "ListCatalogCategoriesResponse",
            '403': "ListCatalogCategoriesResponse",
            '404': "ListCatalogCategoriesResponse",
            '429': "ListCatalogCategoriesResponse",
            '500': "ListCatalogCategoriesResponse",
            '503': "ListCatalogCategoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_catalog_categories_with_http_info(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for the item.")],
        asin: Annotated[Optional[StrictStr], Field(description="The Amazon Standard Identification Number (ASIN) of the item.")] = None,
        seller_sku: Annotated[Optional[StrictStr], Field(description="Used to identify items in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListCatalogCategoriesResponse]:
        """list_catalog_categories

        Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for the item. (required)
        :type marketplace_id: str
        :param asin: The Amazon Standard Identification Number (ASIN) of the item.
        :type asin: str
        :param seller_sku: Used to identify items in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.
        :type seller_sku: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_catalog_categories_serialize(
            marketplace_id=marketplace_id,
            asin=asin,
            seller_sku=seller_sku,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListCatalogCategoriesResponse",
            '400': "ListCatalogCategoriesResponse",
            '401': "ListCatalogCategoriesResponse",
            '403': "ListCatalogCategoriesResponse",
            '404': "ListCatalogCategoriesResponse",
            '429': "ListCatalogCategoriesResponse",
            '500': "ListCatalogCategoriesResponse",
            '503': "ListCatalogCategoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_catalog_categories_without_preload_content(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for the item.")],
        asin: Annotated[Optional[StrictStr], Field(description="The Amazon Standard Identification Number (ASIN) of the item.")] = None,
        seller_sku: Annotated[Optional[StrictStr], Field(description="Used to identify items in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_catalog_categories

        Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for the item. (required)
        :type marketplace_id: str
        :param asin: The Amazon Standard Identification Number (ASIN) of the item.
        :type asin: str
        :param seller_sku: Used to identify items in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.
        :type seller_sku: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_catalog_categories_serialize(
            marketplace_id=marketplace_id,
            asin=asin,
            seller_sku=seller_sku,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListCatalogCategoriesResponse",
            '400': "ListCatalogCategoriesResponse",
            '401': "ListCatalogCategoriesResponse",
            '403': "ListCatalogCategoriesResponse",
            '404': "ListCatalogCategoriesResponse",
            '429': "ListCatalogCategoriesResponse",
            '500': "ListCatalogCategoriesResponse",
            '503': "ListCatalogCategoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_catalog_categories_serialize(
        self,
        marketplace_id,
        asin,
        seller_sku,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if marketplace_id is not None:
            
            _query_params.append(('MarketplaceId', marketplace_id))
            
        if asin is not None:
            
            _query_params.append(('ASIN', asin))
            
        if seller_sku is not None:
            
            _query_params.append(('SellerSKU', seller_sku))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/v0/categories',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_catalog_items(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for which items are returned.")],
        query: Annotated[Optional[StrictStr], Field(description="Keyword(s) to use to search for items in the catalog. Example: 'harry potter books'.")] = None,
        query_context_id: Annotated[Optional[StrictStr], Field(description="An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items.")] = None,
        seller_sku: Annotated[Optional[StrictStr], Field(description="Used to identify an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.")] = None,
        upc: Annotated[Optional[StrictStr], Field(description="A 12-digit bar code used for retail packaging.")] = None,
        ean: Annotated[Optional[StrictStr], Field(description="A European article number that uniquely identifies the catalog item, manufacturer, and its attributes.")] = None,
        isbn: Annotated[Optional[StrictStr], Field(description="The unique commercial book identifier used to identify books internationally.")] = None,
        jan: Annotated[Optional[StrictStr], Field(description="A Japanese article number that uniquely identifies the product, manufacturer, and its attributes.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListCatalogItemsResponse:
        """list_catalog_items

        Effective September 30, 2022, the `listCatalogItems` operation will no longer be available in the Selling Partner API for Catalog Items v0. As an alternative, `searchCatalogItems` is available in the latest version of the [Selling Partner API for Catalog Items v2022-04-01](doc:catalog-items-api-v2022-04-01-reference). Integrations that rely on the `listCatalogItems` operation should migrate to the `searchCatalogItems`operation to avoid service disruption.  _Note:_ The [`listCatalogCategories`](#get-catalogv0categories) operation is not being deprecated and you can continue to make calls to it.

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for which items are returned. (required)
        :type marketplace_id: str
        :param query: Keyword(s) to use to search for items in the catalog. Example: 'harry potter books'.
        :type query: str
        :param query_context_id: An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items.
        :type query_context_id: str
        :param seller_sku: Used to identify an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.
        :type seller_sku: str
        :param upc: A 12-digit bar code used for retail packaging.
        :type upc: str
        :param ean: A European article number that uniquely identifies the catalog item, manufacturer, and its attributes.
        :type ean: str
        :param isbn: The unique commercial book identifier used to identify books internationally.
        :type isbn: str
        :param jan: A Japanese article number that uniquely identifies the product, manufacturer, and its attributes.
        :type jan: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_catalog_items_serialize(
            marketplace_id=marketplace_id,
            query=query,
            query_context_id=query_context_id,
            seller_sku=seller_sku,
            upc=upc,
            ean=ean,
            isbn=isbn,
            jan=jan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListCatalogItemsResponse",
            '400': "ListCatalogItemsResponse",
            '401': "ListCatalogItemsResponse",
            '403': "ListCatalogItemsResponse",
            '404': "ListCatalogItemsResponse",
            '429': "ListCatalogItemsResponse",
            '500': "ListCatalogItemsResponse",
            '503': "ListCatalogItemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_catalog_items_with_http_info(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for which items are returned.")],
        query: Annotated[Optional[StrictStr], Field(description="Keyword(s) to use to search for items in the catalog. Example: 'harry potter books'.")] = None,
        query_context_id: Annotated[Optional[StrictStr], Field(description="An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items.")] = None,
        seller_sku: Annotated[Optional[StrictStr], Field(description="Used to identify an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.")] = None,
        upc: Annotated[Optional[StrictStr], Field(description="A 12-digit bar code used for retail packaging.")] = None,
        ean: Annotated[Optional[StrictStr], Field(description="A European article number that uniquely identifies the catalog item, manufacturer, and its attributes.")] = None,
        isbn: Annotated[Optional[StrictStr], Field(description="The unique commercial book identifier used to identify books internationally.")] = None,
        jan: Annotated[Optional[StrictStr], Field(description="A Japanese article number that uniquely identifies the product, manufacturer, and its attributes.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListCatalogItemsResponse]:
        """list_catalog_items

        Effective September 30, 2022, the `listCatalogItems` operation will no longer be available in the Selling Partner API for Catalog Items v0. As an alternative, `searchCatalogItems` is available in the latest version of the [Selling Partner API for Catalog Items v2022-04-01](doc:catalog-items-api-v2022-04-01-reference). Integrations that rely on the `listCatalogItems` operation should migrate to the `searchCatalogItems`operation to avoid service disruption.  _Note:_ The [`listCatalogCategories`](#get-catalogv0categories) operation is not being deprecated and you can continue to make calls to it.

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for which items are returned. (required)
        :type marketplace_id: str
        :param query: Keyword(s) to use to search for items in the catalog. Example: 'harry potter books'.
        :type query: str
        :param query_context_id: An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items.
        :type query_context_id: str
        :param seller_sku: Used to identify an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.
        :type seller_sku: str
        :param upc: A 12-digit bar code used for retail packaging.
        :type upc: str
        :param ean: A European article number that uniquely identifies the catalog item, manufacturer, and its attributes.
        :type ean: str
        :param isbn: The unique commercial book identifier used to identify books internationally.
        :type isbn: str
        :param jan: A Japanese article number that uniquely identifies the product, manufacturer, and its attributes.
        :type jan: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_catalog_items_serialize(
            marketplace_id=marketplace_id,
            query=query,
            query_context_id=query_context_id,
            seller_sku=seller_sku,
            upc=upc,
            ean=ean,
            isbn=isbn,
            jan=jan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListCatalogItemsResponse",
            '400': "ListCatalogItemsResponse",
            '401': "ListCatalogItemsResponse",
            '403': "ListCatalogItemsResponse",
            '404': "ListCatalogItemsResponse",
            '429': "ListCatalogItemsResponse",
            '500': "ListCatalogItemsResponse",
            '503': "ListCatalogItemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_catalog_items_without_preload_content(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for which items are returned.")],
        query: Annotated[Optional[StrictStr], Field(description="Keyword(s) to use to search for items in the catalog. Example: 'harry potter books'.")] = None,
        query_context_id: Annotated[Optional[StrictStr], Field(description="An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items.")] = None,
        seller_sku: Annotated[Optional[StrictStr], Field(description="Used to identify an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.")] = None,
        upc: Annotated[Optional[StrictStr], Field(description="A 12-digit bar code used for retail packaging.")] = None,
        ean: Annotated[Optional[StrictStr], Field(description="A European article number that uniquely identifies the catalog item, manufacturer, and its attributes.")] = None,
        isbn: Annotated[Optional[StrictStr], Field(description="The unique commercial book identifier used to identify books internationally.")] = None,
        jan: Annotated[Optional[StrictStr], Field(description="A Japanese article number that uniquely identifies the product, manufacturer, and its attributes.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_catalog_items

        Effective September 30, 2022, the `listCatalogItems` operation will no longer be available in the Selling Partner API for Catalog Items v0. As an alternative, `searchCatalogItems` is available in the latest version of the [Selling Partner API for Catalog Items v2022-04-01](doc:catalog-items-api-v2022-04-01-reference). Integrations that rely on the `listCatalogItems` operation should migrate to the `searchCatalogItems`operation to avoid service disruption.  _Note:_ The [`listCatalogCategories`](#get-catalogv0categories) operation is not being deprecated and you can continue to make calls to it.

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for which items are returned. (required)
        :type marketplace_id: str
        :param query: Keyword(s) to use to search for items in the catalog. Example: 'harry potter books'.
        :type query: str
        :param query_context_id: An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items.
        :type query_context_id: str
        :param seller_sku: Used to identify an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.
        :type seller_sku: str
        :param upc: A 12-digit bar code used for retail packaging.
        :type upc: str
        :param ean: A European article number that uniquely identifies the catalog item, manufacturer, and its attributes.
        :type ean: str
        :param isbn: The unique commercial book identifier used to identify books internationally.
        :type isbn: str
        :param jan: A Japanese article number that uniquely identifies the product, manufacturer, and its attributes.
        :type jan: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_catalog_items_serialize(
            marketplace_id=marketplace_id,
            query=query,
            query_context_id=query_context_id,
            seller_sku=seller_sku,
            upc=upc,
            ean=ean,
            isbn=isbn,
            jan=jan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListCatalogItemsResponse",
            '400': "ListCatalogItemsResponse",
            '401': "ListCatalogItemsResponse",
            '403': "ListCatalogItemsResponse",
            '404': "ListCatalogItemsResponse",
            '429': "ListCatalogItemsResponse",
            '500': "ListCatalogItemsResponse",
            '503': "ListCatalogItemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_catalog_items_serialize(
        self,
        marketplace_id,
        query,
        query_context_id,
        seller_sku,
        upc,
        ean,
        isbn,
        jan,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if marketplace_id is not None:
            
            _query_params.append(('MarketplaceId', marketplace_id))
            
        if query is not None:
            
            _query_params.append(('Query', query))
            
        if query_context_id is not None:
            
            _query_params.append(('QueryContextId', query_context_id))
            
        if seller_sku is not None:
            
            _query_params.append(('SellerSKU', seller_sku))
            
        if upc is not None:
            
            _query_params.append(('UPC', upc))
            
        if ean is not None:
            
            _query_params.append(('EAN', ean))
            
        if isbn is not None:
            
            _query_params.append(('ISBN', isbn))
            
        if jan is not None:
            
            _query_params.append(('JAN', jan))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/v0/items',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


