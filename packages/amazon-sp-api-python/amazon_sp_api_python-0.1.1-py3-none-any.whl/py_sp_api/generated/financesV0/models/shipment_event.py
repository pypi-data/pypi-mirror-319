# coding: utf-8

"""
    Selling Partner API for Finances

    The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.financesV0.models.charge_component import ChargeComponent
from py_sp_api.generated.financesV0.models.direct_payment import DirectPayment
from py_sp_api.generated.financesV0.models.fee_component import FeeComponent
from py_sp_api.generated.financesV0.models.shipment_item import ShipmentItem
from typing import Optional, Set
from typing_extensions import Self

class ShipmentEvent(BaseModel):
    """
    A shipment, refund, guarantee claim, or chargeback.
    """ # noqa: E501
    amazon_order_id: Optional[StrictStr] = Field(default=None, description="An Amazon-defined identifier for an order.", alias="AmazonOrderId")
    seller_order_id: Optional[StrictStr] = Field(default=None, description="A seller-defined identifier for an order.", alias="SellerOrderId")
    marketplace_name: Optional[StrictStr] = Field(default=None, description="The name of the marketplace where the event occurred.", alias="MarketplaceName")
    store_name: Optional[StrictStr] = Field(default=None, description="The name of the store where the event occurred.", alias="StoreName")
    order_charge_list: Optional[List[ChargeComponent]] = Field(default=None, description="A list of charge information on the seller's account.", alias="OrderChargeList")
    order_charge_adjustment_list: Optional[List[ChargeComponent]] = Field(default=None, description="A list of charge information on the seller's account.", alias="OrderChargeAdjustmentList")
    shipment_fee_list: Optional[List[FeeComponent]] = Field(default=None, description="A list of fee component information.", alias="ShipmentFeeList")
    shipment_fee_adjustment_list: Optional[List[FeeComponent]] = Field(default=None, description="A list of fee component information.", alias="ShipmentFeeAdjustmentList")
    order_fee_list: Optional[List[FeeComponent]] = Field(default=None, description="A list of fee component information.", alias="OrderFeeList")
    order_fee_adjustment_list: Optional[List[FeeComponent]] = Field(default=None, description="A list of fee component information.", alias="OrderFeeAdjustmentList")
    direct_payment_list: Optional[List[DirectPayment]] = Field(default=None, description="A list of direct payment information.", alias="DirectPaymentList")
    posted_date: Optional[datetime] = Field(default=None, description="Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).", alias="PostedDate")
    shipment_item_list: Optional[List[ShipmentItem]] = Field(default=None, description="A list of shipment items.", alias="ShipmentItemList")
    shipment_item_adjustment_list: Optional[List[ShipmentItem]] = Field(default=None, description="A list of shipment items.", alias="ShipmentItemAdjustmentList")
    __properties: ClassVar[List[str]] = ["AmazonOrderId", "SellerOrderId", "MarketplaceName", "StoreName", "OrderChargeList", "OrderChargeAdjustmentList", "ShipmentFeeList", "ShipmentFeeAdjustmentList", "OrderFeeList", "OrderFeeAdjustmentList", "DirectPaymentList", "PostedDate", "ShipmentItemList", "ShipmentItemAdjustmentList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShipmentEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in order_charge_list (list)
        _items = []
        if self.order_charge_list:
            for _item_order_charge_list in self.order_charge_list:
                if _item_order_charge_list:
                    _items.append(_item_order_charge_list.to_dict())
            _dict['OrderChargeList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_charge_adjustment_list (list)
        _items = []
        if self.order_charge_adjustment_list:
            for _item_order_charge_adjustment_list in self.order_charge_adjustment_list:
                if _item_order_charge_adjustment_list:
                    _items.append(_item_order_charge_adjustment_list.to_dict())
            _dict['OrderChargeAdjustmentList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_fee_list (list)
        _items = []
        if self.shipment_fee_list:
            for _item_shipment_fee_list in self.shipment_fee_list:
                if _item_shipment_fee_list:
                    _items.append(_item_shipment_fee_list.to_dict())
            _dict['ShipmentFeeList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_fee_adjustment_list (list)
        _items = []
        if self.shipment_fee_adjustment_list:
            for _item_shipment_fee_adjustment_list in self.shipment_fee_adjustment_list:
                if _item_shipment_fee_adjustment_list:
                    _items.append(_item_shipment_fee_adjustment_list.to_dict())
            _dict['ShipmentFeeAdjustmentList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_fee_list (list)
        _items = []
        if self.order_fee_list:
            for _item_order_fee_list in self.order_fee_list:
                if _item_order_fee_list:
                    _items.append(_item_order_fee_list.to_dict())
            _dict['OrderFeeList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_fee_adjustment_list (list)
        _items = []
        if self.order_fee_adjustment_list:
            for _item_order_fee_adjustment_list in self.order_fee_adjustment_list:
                if _item_order_fee_adjustment_list:
                    _items.append(_item_order_fee_adjustment_list.to_dict())
            _dict['OrderFeeAdjustmentList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in direct_payment_list (list)
        _items = []
        if self.direct_payment_list:
            for _item_direct_payment_list in self.direct_payment_list:
                if _item_direct_payment_list:
                    _items.append(_item_direct_payment_list.to_dict())
            _dict['DirectPaymentList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_item_list (list)
        _items = []
        if self.shipment_item_list:
            for _item_shipment_item_list in self.shipment_item_list:
                if _item_shipment_item_list:
                    _items.append(_item_shipment_item_list.to_dict())
            _dict['ShipmentItemList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_item_adjustment_list (list)
        _items = []
        if self.shipment_item_adjustment_list:
            for _item_shipment_item_adjustment_list in self.shipment_item_adjustment_list:
                if _item_shipment_item_adjustment_list:
                    _items.append(_item_shipment_item_adjustment_list.to_dict())
            _dict['ShipmentItemAdjustmentList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShipmentEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AmazonOrderId": obj.get("AmazonOrderId"),
            "SellerOrderId": obj.get("SellerOrderId"),
            "MarketplaceName": obj.get("MarketplaceName"),
            "StoreName": obj.get("StoreName"),
            "OrderChargeList": [ChargeComponent.from_dict(_item) for _item in obj["OrderChargeList"]] if obj.get("OrderChargeList") is not None else None,
            "OrderChargeAdjustmentList": [ChargeComponent.from_dict(_item) for _item in obj["OrderChargeAdjustmentList"]] if obj.get("OrderChargeAdjustmentList") is not None else None,
            "ShipmentFeeList": [FeeComponent.from_dict(_item) for _item in obj["ShipmentFeeList"]] if obj.get("ShipmentFeeList") is not None else None,
            "ShipmentFeeAdjustmentList": [FeeComponent.from_dict(_item) for _item in obj["ShipmentFeeAdjustmentList"]] if obj.get("ShipmentFeeAdjustmentList") is not None else None,
            "OrderFeeList": [FeeComponent.from_dict(_item) for _item in obj["OrderFeeList"]] if obj.get("OrderFeeList") is not None else None,
            "OrderFeeAdjustmentList": [FeeComponent.from_dict(_item) for _item in obj["OrderFeeAdjustmentList"]] if obj.get("OrderFeeAdjustmentList") is not None else None,
            "DirectPaymentList": [DirectPayment.from_dict(_item) for _item in obj["DirectPaymentList"]] if obj.get("DirectPaymentList") is not None else None,
            "PostedDate": obj.get("PostedDate"),
            "ShipmentItemList": [ShipmentItem.from_dict(_item) for _item in obj["ShipmentItemList"]] if obj.get("ShipmentItemList") is not None else None,
            "ShipmentItemAdjustmentList": [ShipmentItem.from_dict(_item) for _item in obj["ShipmentItemAdjustmentList"]] if obj.get("ShipmentItemAdjustmentList") is not None else None
        })
        return _obj


