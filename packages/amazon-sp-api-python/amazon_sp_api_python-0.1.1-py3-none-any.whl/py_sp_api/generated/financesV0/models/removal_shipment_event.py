# coding: utf-8

"""
    Selling Partner API for Finances

    The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.financesV0.models.removal_shipment_item import RemovalShipmentItem
from typing import Optional, Set
from typing_extensions import Self

class RemovalShipmentEvent(BaseModel):
    """
    A removal shipment event for a removal order.
    """ # noqa: E501
    posted_date: Optional[datetime] = Field(default=None, description="Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).", alias="PostedDate")
    merchant_order_id: Optional[StrictStr] = Field(default=None, description="The merchant removal orderId.", alias="MerchantOrderId")
    order_id: Optional[StrictStr] = Field(default=None, description="The identifier for the removal shipment order.", alias="OrderId")
    transaction_type: Optional[StrictStr] = Field(default=None, description="The type of removal order.  Possible values:  * WHOLESALE_LIQUIDATION", alias="TransactionType")
    store_name: Optional[StrictStr] = Field(default=None, description="The name of the store where the event occurred.", alias="StoreName")
    removal_shipment_item_list: Optional[List[RemovalShipmentItem]] = Field(default=None, description="A list of information about removal shipment items.", alias="RemovalShipmentItemList")
    __properties: ClassVar[List[str]] = ["PostedDate", "MerchantOrderId", "OrderId", "TransactionType", "StoreName", "RemovalShipmentItemList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RemovalShipmentEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in removal_shipment_item_list (list)
        _items = []
        if self.removal_shipment_item_list:
            for _item_removal_shipment_item_list in self.removal_shipment_item_list:
                if _item_removal_shipment_item_list:
                    _items.append(_item_removal_shipment_item_list.to_dict())
            _dict['RemovalShipmentItemList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RemovalShipmentEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "PostedDate": obj.get("PostedDate"),
            "MerchantOrderId": obj.get("MerchantOrderId"),
            "OrderId": obj.get("OrderId"),
            "TransactionType": obj.get("TransactionType"),
            "StoreName": obj.get("StoreName"),
            "RemovalShipmentItemList": [RemovalShipmentItem.from_dict(_item) for _item in obj["RemovalShipmentItemList"]] if obj.get("RemovalShipmentItemList") is not None else None
        })
        return _obj


