# coding: utf-8

"""
    Selling Partner API for Finances

    The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.financesV0.models.currency import Currency
from typing import Optional, Set
from typing_extensions import Self

class FinancialEventGroup(BaseModel):
    """
    Information related to a financial event group.
    """ # noqa: E501
    financial_event_group_id: Optional[StrictStr] = Field(default=None, description="A unique identifier for the financial event group.", alias="FinancialEventGroupId")
    processing_status: Optional[StrictStr] = Field(default=None, description="The processing status of the financial event group indicates whether the balance of the financial event group is settled.  Possible values:  * Open  * Closed", alias="ProcessingStatus")
    fund_transfer_status: Optional[StrictStr] = Field(default=None, description="The status of the fund transfer.", alias="FundTransferStatus")
    original_total: Optional[Currency] = Field(default=None, alias="OriginalTotal")
    converted_total: Optional[Currency] = Field(default=None, alias="ConvertedTotal")
    fund_transfer_date: Optional[datetime] = Field(default=None, description="Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).", alias="FundTransferDate")
    trace_id: Optional[StrictStr] = Field(default=None, description="The trace identifier used by sellers to look up transactions externally.", alias="TraceId")
    account_tail: Optional[StrictStr] = Field(default=None, description="The account tail of the payment instrument.", alias="AccountTail")
    beginning_balance: Optional[Currency] = Field(default=None, alias="BeginningBalance")
    financial_event_group_start: Optional[datetime] = Field(default=None, description="Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).", alias="FinancialEventGroupStart")
    financial_event_group_end: Optional[datetime] = Field(default=None, description="Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).", alias="FinancialEventGroupEnd")
    __properties: ClassVar[List[str]] = ["FinancialEventGroupId", "ProcessingStatus", "FundTransferStatus", "OriginalTotal", "ConvertedTotal", "FundTransferDate", "TraceId", "AccountTail", "BeginningBalance", "FinancialEventGroupStart", "FinancialEventGroupEnd"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FinancialEventGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of original_total
        if self.original_total:
            _dict['OriginalTotal'] = self.original_total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of converted_total
        if self.converted_total:
            _dict['ConvertedTotal'] = self.converted_total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of beginning_balance
        if self.beginning_balance:
            _dict['BeginningBalance'] = self.beginning_balance.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FinancialEventGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FinancialEventGroupId": obj.get("FinancialEventGroupId"),
            "ProcessingStatus": obj.get("ProcessingStatus"),
            "FundTransferStatus": obj.get("FundTransferStatus"),
            "OriginalTotal": Currency.from_dict(obj["OriginalTotal"]) if obj.get("OriginalTotal") is not None else None,
            "ConvertedTotal": Currency.from_dict(obj["ConvertedTotal"]) if obj.get("ConvertedTotal") is not None else None,
            "FundTransferDate": obj.get("FundTransferDate"),
            "TraceId": obj.get("TraceId"),
            "AccountTail": obj.get("AccountTail"),
            "BeginningBalance": Currency.from_dict(obj["BeginningBalance"]) if obj.get("BeginningBalance") is not None else None,
            "FinancialEventGroupStart": obj.get("FinancialEventGroupStart"),
            "FinancialEventGroupEnd": obj.get("FinancialEventGroupEnd")
        })
        return _obj


