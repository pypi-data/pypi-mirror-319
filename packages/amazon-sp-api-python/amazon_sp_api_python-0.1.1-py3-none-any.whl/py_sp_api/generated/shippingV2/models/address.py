# coding: utf-8

"""
    Amazon Shipping API

    The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.

    The version of the OpenAPI document: v2
    Contact: swa-api-core@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.shippingV2.models.geocode import Geocode
from typing import Optional, Set
from typing_extensions import Self

class Address(BaseModel):
    """
    The address.
    """ # noqa: E501
    name: Annotated[str, Field(min_length=1, strict=True, max_length=50)] = Field(description="The name of the person, business or institution at the address.")
    address_line1: Annotated[str, Field(min_length=1, strict=True, max_length=60)] = Field(description="The first line of the address.", alias="addressLine1")
    address_line2: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=60)]] = Field(default=None, description="Additional address information, if required.", alias="addressLine2")
    address_line3: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=60)]] = Field(default=None, description="Additional address information, if required.", alias="addressLine3")
    company_name: Optional[StrictStr] = Field(default=None, description="The name of the business or institution associated with the address.", alias="companyName")
    state_or_region: StrictStr = Field(description="The state, county or region where the person, business or institution is located.", alias="stateOrRegion")
    city: StrictStr = Field(description="The city or town where the person, business or institution is located.")
    country_code: StrictStr = Field(description="The two digit country code. Follows ISO 3166-1 alpha-2 format.", alias="countryCode")
    postal_code: StrictStr = Field(description="The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.", alias="postalCode")
    email: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="The email address of the contact associated with the address.")
    phone_number: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=20)]] = Field(default=None, description="The phone number of the person, business or institution located at that address, including the country calling code.", alias="phoneNumber")
    geocode: Optional[Geocode] = None
    __properties: ClassVar[List[str]] = ["name", "addressLine1", "addressLine2", "addressLine3", "companyName", "stateOrRegion", "city", "countryCode", "postalCode", "email", "phoneNumber", "geocode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of geocode
        if self.geocode:
            _dict['geocode'] = self.geocode.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Address from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "addressLine1": obj.get("addressLine1"),
            "addressLine2": obj.get("addressLine2"),
            "addressLine3": obj.get("addressLine3"),
            "companyName": obj.get("companyName"),
            "stateOrRegion": obj.get("stateOrRegion"),
            "city": obj.get("city"),
            "countryCode": obj.get("countryCode"),
            "postalCode": obj.get("postalCode"),
            "email": obj.get("email"),
            "phoneNumber": obj.get("phoneNumber"),
            "geocode": Geocode.from_dict(obj["geocode"]) if obj.get("geocode") is not None else None
        })
        return _obj


