# coding: utf-8

"""
    The Selling Partner API for Sellers

    The Selling Partner API for Sellers lets you retrieve information on behalf of sellers about their seller account, such as the marketplaces they participate in. Along with listing the marketplaces that a seller can sell in, the API also provides additional information about the marketplace such as the default language and the default currency. The API also provides seller-specific information such as whether the seller has suspended listings in that marketplace.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Marketplace(BaseModel):
    """
    Detailed information about an Amazon market where a seller can list items for sale and customers can view and purchase items.
    """ # noqa: E501
    id: StrictStr = Field(description="The encrypted marketplace value.")
    name: StrictStr = Field(description="Marketplace name.")
    country_code: Annotated[str, Field(strict=True)] = Field(description="The ISO 3166-1 alpha-2 format country code of the marketplace.", alias="countryCode")
    default_currency_code: StrictStr = Field(description="The ISO 4217 format currency code of the marketplace.", alias="defaultCurrencyCode")
    default_language_code: StrictStr = Field(description="The ISO 639-1 format language code of the marketplace.", alias="defaultLanguageCode")
    domain_name: StrictStr = Field(description="The domain name of the marketplace.", alias="domainName")
    __properties: ClassVar[List[str]] = ["id", "name", "countryCode", "defaultCurrencyCode", "defaultLanguageCode", "domainName"]

    @field_validator('country_code')
    def country_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^([A-Z]{2})$", value):
            raise ValueError(r"must validate the regular expression /^([A-Z]{2})$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Marketplace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Marketplace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "countryCode": obj.get("countryCode"),
            "defaultCurrencyCode": obj.get("defaultCurrencyCode"),
            "defaultLanguageCode": obj.get("defaultLanguageCode"),
            "domainName": obj.get("domainName")
        })
        return _obj


