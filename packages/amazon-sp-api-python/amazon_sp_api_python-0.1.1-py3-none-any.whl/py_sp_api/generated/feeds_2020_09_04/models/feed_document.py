# coding: utf-8

"""
    Selling Partner API for Feeds

    Effective **June 27, 2024**, the Selling Partner API for Feeds v2020-09-04 will no longer be available and all calls to it will fail. Integrations that rely on the Feeds API must migrate to [Feeds v2021-06-30](https://developer-docs.amazon.com/sp-api/docs/feeds-api-v2021-06-30-reference) to avoid service disruption.

    The version of the OpenAPI document: 2020-09-04
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.feeds_2020_09_04.models.feed_document_encryption_details import FeedDocumentEncryptionDetails
from typing import Optional, Set
from typing_extensions import Self

class FeedDocument(BaseModel):
    """
    FeedDocument
    """ # noqa: E501
    feed_document_id: StrictStr = Field(description="The identifier for the feed document. This identifier is unique only in combination with a seller ID.", alias="feedDocumentId")
    url: StrictStr = Field(description="A presigned URL for the feed document. If `compressionAlgorithm` is not returned, you can download the feed directly from this URL. This URL expires after 5 minutes.")
    encryption_details: FeedDocumentEncryptionDetails = Field(alias="encryptionDetails")
    compression_algorithm: Optional[StrictStr] = Field(default=None, description="If the feed document contents have been compressed, the compression algorithm used is returned in this property and you must decompress the feed when you download. Otherwise, you can download the feed directly. Refer to [Step 6. Download and decrypt the feed processing report](doc:feeds-api-v2020-09-04-use-case-guide#step-6-download-and-decrypt-the-feed-processing-report) in the use case guide, where sample code is provided.", alias="compressionAlgorithm")
    __properties: ClassVar[List[str]] = ["feedDocumentId", "url", "encryptionDetails", "compressionAlgorithm"]

    @field_validator('compression_algorithm')
    def compression_algorithm_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GZIP']):
            raise ValueError("must be one of enum values ('GZIP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeedDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption_details
        if self.encryption_details:
            _dict['encryptionDetails'] = self.encryption_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeedDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "feedDocumentId": obj.get("feedDocumentId"),
            "url": obj.get("url"),
            "encryptionDetails": FeedDocumentEncryptionDetails.from_dict(obj["encryptionDetails"]) if obj.get("encryptionDetails") is not None else None,
            "compressionAlgorithm": obj.get("compressionAlgorithm")
        })
        return _obj


