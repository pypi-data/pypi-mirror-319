# coding: utf-8

"""
    Selling Partner API for Fulfillment Inbound

    The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.fulfillmentInboundV0.models.asin_inbound_guidance import ASINInboundGuidance
from py_sp_api.generated.fulfillmentInboundV0.models.invalid_asin import InvalidASIN
from py_sp_api.generated.fulfillmentInboundV0.models.invalid_sku import InvalidSKU
from py_sp_api.generated.fulfillmentInboundV0.models.sku_inbound_guidance import SKUInboundGuidance
from typing import Optional, Set
from typing_extensions import Self

class GetInboundGuidanceResult(BaseModel):
    """
    Result for the get inbound guidance operation
    """ # noqa: E501
    sku_inbound_guidance_list: Optional[List[SKUInboundGuidance]] = Field(default=None, description="A list of SKU inbound guidance information.", alias="SKUInboundGuidanceList")
    invalid_sku_list: Optional[List[InvalidSKU]] = Field(default=None, description="A list of invalid SKU values and the reason they are invalid.", alias="InvalidSKUList")
    asin_inbound_guidance_list: Optional[List[ASINInboundGuidance]] = Field(default=None, description="A list of ASINs and their associated inbound guidance.", alias="ASINInboundGuidanceList")
    invalid_asin_list: Optional[List[InvalidASIN]] = Field(default=None, description="A list of invalid ASIN values and the reasons they are invalid.", alias="InvalidASINList")
    __properties: ClassVar[List[str]] = ["SKUInboundGuidanceList", "InvalidSKUList", "ASINInboundGuidanceList", "InvalidASINList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetInboundGuidanceResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sku_inbound_guidance_list (list)
        _items = []
        if self.sku_inbound_guidance_list:
            for _item_sku_inbound_guidance_list in self.sku_inbound_guidance_list:
                if _item_sku_inbound_guidance_list:
                    _items.append(_item_sku_inbound_guidance_list.to_dict())
            _dict['SKUInboundGuidanceList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in invalid_sku_list (list)
        _items = []
        if self.invalid_sku_list:
            for _item_invalid_sku_list in self.invalid_sku_list:
                if _item_invalid_sku_list:
                    _items.append(_item_invalid_sku_list.to_dict())
            _dict['InvalidSKUList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in asin_inbound_guidance_list (list)
        _items = []
        if self.asin_inbound_guidance_list:
            for _item_asin_inbound_guidance_list in self.asin_inbound_guidance_list:
                if _item_asin_inbound_guidance_list:
                    _items.append(_item_asin_inbound_guidance_list.to_dict())
            _dict['ASINInboundGuidanceList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in invalid_asin_list (list)
        _items = []
        if self.invalid_asin_list:
            for _item_invalid_asin_list in self.invalid_asin_list:
                if _item_invalid_asin_list:
                    _items.append(_item_invalid_asin_list.to_dict())
            _dict['InvalidASINList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetInboundGuidanceResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "SKUInboundGuidanceList": [SKUInboundGuidance.from_dict(_item) for _item in obj["SKUInboundGuidanceList"]] if obj.get("SKUInboundGuidanceList") is not None else None,
            "InvalidSKUList": [InvalidSKU.from_dict(_item) for _item in obj["InvalidSKUList"]] if obj.get("InvalidSKUList") is not None else None,
            "ASINInboundGuidanceList": [ASINInboundGuidance.from_dict(_item) for _item in obj["ASINInboundGuidanceList"]] if obj.get("ASINInboundGuidanceList") is not None else None,
            "InvalidASINList": [InvalidASIN.from_dict(_item) for _item in obj["InvalidASINList"]] if obj.get("InvalidASINList") is not None else None
        })
        return _obj


