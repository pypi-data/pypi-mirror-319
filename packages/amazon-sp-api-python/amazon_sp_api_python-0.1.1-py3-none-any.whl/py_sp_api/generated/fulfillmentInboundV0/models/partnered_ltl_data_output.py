# coding: utf-8

"""
    Selling Partner API for Fulfillment Inbound

    The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.fulfillmentInboundV0.models.amount import Amount
from py_sp_api.generated.fulfillmentInboundV0.models.contact import Contact
from py_sp_api.generated.fulfillmentInboundV0.models.pallet import Pallet
from py_sp_api.generated.fulfillmentInboundV0.models.partnered_estimate import PartneredEstimate
from py_sp_api.generated.fulfillmentInboundV0.models.seller_freight_class import SellerFreightClass
from py_sp_api.generated.fulfillmentInboundV0.models.weight import Weight
from typing import Optional, Set
from typing_extensions import Self

class PartneredLtlDataOutput(BaseModel):
    """
    Information returned by Amazon about a Less Than Truckload/Full Truckload (LTL/FTL) shipment by an Amazon-partnered carrier.
    """ # noqa: E501
    contact: Contact = Field(alias="Contact")
    box_count: StrictInt = Field(description="Contains an unsigned integer", alias="BoxCount")
    seller_freight_class: Optional[SellerFreightClass] = Field(default=None, alias="SellerFreightClass")
    freight_ready_date: date = Field(description="Type containing date in string format", alias="FreightReadyDate")
    pallet_list: List[Pallet] = Field(description="A list of pallet information.", alias="PalletList")
    total_weight: Weight = Field(alias="TotalWeight")
    seller_declared_value: Optional[Amount] = Field(default=None, alias="SellerDeclaredValue")
    amazon_calculated_value: Optional[Amount] = Field(default=None, alias="AmazonCalculatedValue")
    preview_pickup_date: date = Field(description="Type containing date in string format", alias="PreviewPickupDate")
    preview_delivery_date: date = Field(description="Type containing date in string format", alias="PreviewDeliveryDate")
    preview_freight_class: SellerFreightClass = Field(alias="PreviewFreightClass")
    amazon_reference_id: StrictStr = Field(description="A unique identifier created by Amazon that identifies this Amazon-partnered, Less Than Truckload/Full Truckload (LTL/FTL) shipment.", alias="AmazonReferenceId")
    is_bill_of_lading_available: StrictBool = Field(description="Indicates whether the bill of lading for the shipment is available.", alias="IsBillOfLadingAvailable")
    partnered_estimate: Optional[PartneredEstimate] = Field(default=None, alias="PartneredEstimate")
    carrier_name: StrictStr = Field(description="The carrier for the inbound shipment.", alias="CarrierName")
    __properties: ClassVar[List[str]] = ["Contact", "BoxCount", "SellerFreightClass", "FreightReadyDate", "PalletList", "TotalWeight", "SellerDeclaredValue", "AmazonCalculatedValue", "PreviewPickupDate", "PreviewDeliveryDate", "PreviewFreightClass", "AmazonReferenceId", "IsBillOfLadingAvailable", "PartneredEstimate", "CarrierName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PartneredLtlDataOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['Contact'] = self.contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in pallet_list (list)
        _items = []
        if self.pallet_list:
            for _item_pallet_list in self.pallet_list:
                if _item_pallet_list:
                    _items.append(_item_pallet_list.to_dict())
            _dict['PalletList'] = _items
        # override the default output from pydantic by calling `to_dict()` of total_weight
        if self.total_weight:
            _dict['TotalWeight'] = self.total_weight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seller_declared_value
        if self.seller_declared_value:
            _dict['SellerDeclaredValue'] = self.seller_declared_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amazon_calculated_value
        if self.amazon_calculated_value:
            _dict['AmazonCalculatedValue'] = self.amazon_calculated_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of partnered_estimate
        if self.partnered_estimate:
            _dict['PartneredEstimate'] = self.partnered_estimate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PartneredLtlDataOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Contact": Contact.from_dict(obj["Contact"]) if obj.get("Contact") is not None else None,
            "BoxCount": obj.get("BoxCount"),
            "SellerFreightClass": obj.get("SellerFreightClass"),
            "FreightReadyDate": obj.get("FreightReadyDate"),
            "PalletList": [Pallet.from_dict(_item) for _item in obj["PalletList"]] if obj.get("PalletList") is not None else None,
            "TotalWeight": Weight.from_dict(obj["TotalWeight"]) if obj.get("TotalWeight") is not None else None,
            "SellerDeclaredValue": Amount.from_dict(obj["SellerDeclaredValue"]) if obj.get("SellerDeclaredValue") is not None else None,
            "AmazonCalculatedValue": Amount.from_dict(obj["AmazonCalculatedValue"]) if obj.get("AmazonCalculatedValue") is not None else None,
            "PreviewPickupDate": obj.get("PreviewPickupDate"),
            "PreviewDeliveryDate": obj.get("PreviewDeliveryDate"),
            "PreviewFreightClass": obj.get("PreviewFreightClass"),
            "AmazonReferenceId": obj.get("AmazonReferenceId"),
            "IsBillOfLadingAvailable": obj.get("IsBillOfLadingAvailable"),
            "PartneredEstimate": PartneredEstimate.from_dict(obj["PartneredEstimate"]) if obj.get("PartneredEstimate") is not None else None,
            "CarrierName": obj.get("CarrierName")
        })
        return _obj


