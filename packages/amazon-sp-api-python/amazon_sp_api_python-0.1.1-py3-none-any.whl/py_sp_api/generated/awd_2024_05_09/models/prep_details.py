# coding: utf-8

"""
    The Selling Partner API for Amazon Warehousing and Distribution

    The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 

    The version of the OpenAPI document: 2024-05-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.awd_2024_05_09.models.label_owner import LabelOwner
from py_sp_api.generated.awd_2024_05_09.models.prep_instruction import PrepInstruction
from py_sp_api.generated.awd_2024_05_09.models.prep_owner import PrepOwner
from typing import Optional, Set
from typing_extensions import Self

class PrepDetails(BaseModel):
    """
    The preparation details for a product. This contains the prep category, prep owner, and label owner. Prep instructions are generated based on the specified category.
    """ # noqa: E501
    label_owner: Optional[LabelOwner] = Field(default=None, alias="labelOwner")
    prep_category: Optional[StrictStr] = Field(default=None, description="The preparation category for shipping an item to Amazon's fulfillment network.", alias="prepCategory")
    prep_instructions: Optional[List[PrepInstruction]] = Field(default=None, description="Information that pertains to the preparation of inbound products. This is generated based on the specified category.", alias="prepInstructions")
    prep_owner: Optional[PrepOwner] = Field(default=None, alias="prepOwner")
    __properties: ClassVar[List[str]] = ["labelOwner", "prepCategory", "prepInstructions", "prepOwner"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrepDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in prep_instructions (list)
        _items = []
        if self.prep_instructions:
            for _item_prep_instructions in self.prep_instructions:
                if _item_prep_instructions:
                    _items.append(_item_prep_instructions.to_dict())
            _dict['prepInstructions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrepDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "labelOwner": obj.get("labelOwner"),
            "prepCategory": obj.get("prepCategory"),
            "prepInstructions": [PrepInstruction.from_dict(_item) for _item in obj["prepInstructions"]] if obj.get("prepInstructions") is not None else None,
            "prepOwner": obj.get("prepOwner")
        })
        return _obj


