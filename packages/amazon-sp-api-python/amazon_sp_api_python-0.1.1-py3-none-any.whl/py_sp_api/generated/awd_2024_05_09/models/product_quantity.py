# coding: utf-8

"""
    The Selling Partner API for Amazon Warehousing and Distribution

    The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 

    The version of the OpenAPI document: 2024-05-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.awd_2024_05_09.models.prep_details import PrepDetails
from py_sp_api.generated.awd_2024_05_09.models.product_attribute import ProductAttribute
from typing import Optional, Set
from typing_extensions import Self

class ProductQuantity(BaseModel):
    """
    Represents a product with the SKU details and the corresponding quantity.
    """ # noqa: E501
    attributes: Optional[List[ProductAttribute]] = Field(default=None, description="Attributes for this instance of the product. For example, already-prepped, or other attributes that distinguish the product beyond the SKU.")
    quantity: StrictInt = Field(description="Product quantity.")
    sku: StrictStr = Field(description="The seller or merchant SKU.")
    expiration: Optional[datetime] = Field(default=None, description="The expiration date for the SKU. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.")
    prep_details: Optional[PrepDetails] = Field(default=None, alias="prepDetails")
    __properties: ClassVar[List[str]] = ["attributes", "quantity", "sku", "expiration", "prepDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductQuantity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of prep_details
        if self.prep_details:
            _dict['prepDetails'] = self.prep_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductQuantity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": [ProductAttribute.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "quantity": obj.get("quantity"),
            "sku": obj.get("sku"),
            "expiration": obj.get("expiration"),
            "prepDetails": PrepDetails.from_dict(obj["prepDetails"]) if obj.get("prepDetails") is not None else None
        })
        return _obj


