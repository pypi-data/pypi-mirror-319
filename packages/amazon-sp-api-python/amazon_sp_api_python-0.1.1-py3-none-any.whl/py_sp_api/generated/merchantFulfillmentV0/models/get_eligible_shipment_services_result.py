# coding: utf-8

"""
    Selling Partner API for Merchant Fulfillment

    With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.merchantFulfillmentV0.models.rejected_shipping_service import RejectedShippingService
from py_sp_api.generated.merchantFulfillmentV0.models.shipping_service import ShippingService
from py_sp_api.generated.merchantFulfillmentV0.models.temporarily_unavailable_carrier import TemporarilyUnavailableCarrier
from py_sp_api.generated.merchantFulfillmentV0.models.terms_and_conditions_not_accepted_carrier import TermsAndConditionsNotAcceptedCarrier
from typing import Optional, Set
from typing_extensions import Self

class GetEligibleShipmentServicesResult(BaseModel):
    """
    The payload for the `getEligibleShipmentServices` operation.
    """ # noqa: E501
    shipping_service_list: List[ShippingService] = Field(description="A list of shipping services offers.", alias="ShippingServiceList")
    rejected_shipping_service_list: Optional[List[RejectedShippingService]] = Field(default=None, description="List of services that are for some reason unavailable for this request", alias="RejectedShippingServiceList")
    temporarily_unavailable_carrier_list: Optional[List[TemporarilyUnavailableCarrier]] = Field(default=None, description="A list of temporarily unavailable carriers.", alias="TemporarilyUnavailableCarrierList")
    terms_and_conditions_not_accepted_carrier_list: Optional[List[TermsAndConditionsNotAcceptedCarrier]] = Field(default=None, description="List of carriers whose terms and conditions were not accepted by the seller.", alias="TermsAndConditionsNotAcceptedCarrierList")
    __properties: ClassVar[List[str]] = ["ShippingServiceList", "RejectedShippingServiceList", "TemporarilyUnavailableCarrierList", "TermsAndConditionsNotAcceptedCarrierList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetEligibleShipmentServicesResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in shipping_service_list (list)
        _items = []
        if self.shipping_service_list:
            for _item_shipping_service_list in self.shipping_service_list:
                if _item_shipping_service_list:
                    _items.append(_item_shipping_service_list.to_dict())
            _dict['ShippingServiceList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rejected_shipping_service_list (list)
        _items = []
        if self.rejected_shipping_service_list:
            for _item_rejected_shipping_service_list in self.rejected_shipping_service_list:
                if _item_rejected_shipping_service_list:
                    _items.append(_item_rejected_shipping_service_list.to_dict())
            _dict['RejectedShippingServiceList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in temporarily_unavailable_carrier_list (list)
        _items = []
        if self.temporarily_unavailable_carrier_list:
            for _item_temporarily_unavailable_carrier_list in self.temporarily_unavailable_carrier_list:
                if _item_temporarily_unavailable_carrier_list:
                    _items.append(_item_temporarily_unavailable_carrier_list.to_dict())
            _dict['TemporarilyUnavailableCarrierList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in terms_and_conditions_not_accepted_carrier_list (list)
        _items = []
        if self.terms_and_conditions_not_accepted_carrier_list:
            for _item_terms_and_conditions_not_accepted_carrier_list in self.terms_and_conditions_not_accepted_carrier_list:
                if _item_terms_and_conditions_not_accepted_carrier_list:
                    _items.append(_item_terms_and_conditions_not_accepted_carrier_list.to_dict())
            _dict['TermsAndConditionsNotAcceptedCarrierList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetEligibleShipmentServicesResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ShippingServiceList": [ShippingService.from_dict(_item) for _item in obj["ShippingServiceList"]] if obj.get("ShippingServiceList") is not None else None,
            "RejectedShippingServiceList": [RejectedShippingService.from_dict(_item) for _item in obj["RejectedShippingServiceList"]] if obj.get("RejectedShippingServiceList") is not None else None,
            "TemporarilyUnavailableCarrierList": [TemporarilyUnavailableCarrier.from_dict(_item) for _item in obj["TemporarilyUnavailableCarrierList"]] if obj.get("TemporarilyUnavailableCarrierList") is not None else None,
            "TermsAndConditionsNotAcceptedCarrierList": [TermsAndConditionsNotAcceptedCarrier.from_dict(_item) for _item in obj["TermsAndConditionsNotAcceptedCarrierList"]] if obj.get("TermsAndConditionsNotAcceptedCarrierList") is not None else None
        })
        return _obj


