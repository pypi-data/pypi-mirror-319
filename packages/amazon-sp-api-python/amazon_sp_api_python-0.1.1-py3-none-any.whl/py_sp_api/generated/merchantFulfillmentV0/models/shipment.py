# coding: utf-8

"""
    Selling Partner API for Merchant Fulfillment

    With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.merchantFulfillmentV0.models.address import Address
from py_sp_api.generated.merchantFulfillmentV0.models.currency_amount import CurrencyAmount
from py_sp_api.generated.merchantFulfillmentV0.models.item import Item
from py_sp_api.generated.merchantFulfillmentV0.models.label import Label
from py_sp_api.generated.merchantFulfillmentV0.models.package_dimensions import PackageDimensions
from py_sp_api.generated.merchantFulfillmentV0.models.shipment_status import ShipmentStatus
from py_sp_api.generated.merchantFulfillmentV0.models.shipping_service import ShippingService
from py_sp_api.generated.merchantFulfillmentV0.models.weight import Weight
from typing import Optional, Set
from typing_extensions import Self

class Shipment(BaseModel):
    """
    The details of a shipment. Includes the shipment status.
    """ # noqa: E501
    shipment_id: StrictStr = Field(description="An Amazon-defined shipment identifier.", alias="ShipmentId")
    amazon_order_id: StrictStr = Field(description="An Amazon-defined order identifier, in 3-7-7 format.", alias="AmazonOrderId")
    seller_order_id: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="A seller-defined order identifier.", alias="SellerOrderId")
    item_list: List[Item] = Field(description="The list of items you want to include in a shipment.", alias="ItemList")
    ship_from_address: Address = Field(alias="ShipFromAddress")
    ship_to_address: Address = Field(alias="ShipToAddress")
    package_dimensions: PackageDimensions = Field(alias="PackageDimensions")
    weight: Weight = Field(alias="Weight")
    insurance: CurrencyAmount = Field(alias="Insurance")
    shipping_service: ShippingService = Field(alias="ShippingService")
    label: Label = Field(alias="Label")
    status: ShipmentStatus = Field(alias="Status")
    tracking_id: Optional[StrictStr] = Field(default=None, description="The shipment tracking identifier provided by the carrier.", alias="TrackingId")
    created_date: datetime = Field(description="Date-time formatted timestamp.", alias="CreatedDate")
    last_updated_date: Optional[datetime] = Field(default=None, description="Date-time formatted timestamp.", alias="LastUpdatedDate")
    __properties: ClassVar[List[str]] = ["ShipmentId", "AmazonOrderId", "SellerOrderId", "ItemList", "ShipFromAddress", "ShipToAddress", "PackageDimensions", "Weight", "Insurance", "ShippingService", "Label", "Status", "TrackingId", "CreatedDate", "LastUpdatedDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Shipment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in item_list (list)
        _items = []
        if self.item_list:
            for _item_item_list in self.item_list:
                if _item_item_list:
                    _items.append(_item_item_list.to_dict())
            _dict['ItemList'] = _items
        # override the default output from pydantic by calling `to_dict()` of ship_from_address
        if self.ship_from_address:
            _dict['ShipFromAddress'] = self.ship_from_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_address
        if self.ship_to_address:
            _dict['ShipToAddress'] = self.ship_to_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of package_dimensions
        if self.package_dimensions:
            _dict['PackageDimensions'] = self.package_dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weight
        if self.weight:
            _dict['Weight'] = self.weight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insurance
        if self.insurance:
            _dict['Insurance'] = self.insurance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_service
        if self.shipping_service:
            _dict['ShippingService'] = self.shipping_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of label
        if self.label:
            _dict['Label'] = self.label.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Shipment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ShipmentId": obj.get("ShipmentId"),
            "AmazonOrderId": obj.get("AmazonOrderId"),
            "SellerOrderId": obj.get("SellerOrderId"),
            "ItemList": [Item.from_dict(_item) for _item in obj["ItemList"]] if obj.get("ItemList") is not None else None,
            "ShipFromAddress": Address.from_dict(obj["ShipFromAddress"]) if obj.get("ShipFromAddress") is not None else None,
            "ShipToAddress": Address.from_dict(obj["ShipToAddress"]) if obj.get("ShipToAddress") is not None else None,
            "PackageDimensions": PackageDimensions.from_dict(obj["PackageDimensions"]) if obj.get("PackageDimensions") is not None else None,
            "Weight": Weight.from_dict(obj["Weight"]) if obj.get("Weight") is not None else None,
            "Insurance": CurrencyAmount.from_dict(obj["Insurance"]) if obj.get("Insurance") is not None else None,
            "ShippingService": ShippingService.from_dict(obj["ShippingService"]) if obj.get("ShippingService") is not None else None,
            "Label": Label.from_dict(obj["Label"]) if obj.get("Label") is not None else None,
            "Status": obj.get("Status"),
            "TrackingId": obj.get("TrackingId"),
            "CreatedDate": obj.get("CreatedDate"),
            "LastUpdatedDate": obj.get("LastUpdatedDate")
        })
        return _obj


