# coding: utf-8

"""
    Selling Partner API for Services

    With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ServiceUploadDocument(BaseModel):
    """
    Input for to be uploaded document.
    """ # noqa: E501
    content_type: StrictStr = Field(description="The content type of the to-be-uploaded file", alias="contentType")
    content_length: Union[Annotated[float, Field(le=5.24288E+6, strict=True, ge=1)], Annotated[int, Field(le=5242880, strict=True, ge=1)]] = Field(description="The content length of the to-be-uploaded file", alias="contentLength")
    content_md5: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="An MD5 hash of the content to be submitted to the upload destination. This value is used to determine if the data has been corrupted or tampered with during transit.", alias="contentMD5")
    __properties: ClassVar[List[str]] = ["contentType", "contentLength", "contentMD5"]

    @field_validator('content_type')
    def content_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['TIFF', 'JPG', 'PNG', 'JPEG', 'GIF', 'PDF']):
            raise ValueError("must be one of enum values ('TIFF', 'JPG', 'PNG', 'JPEG', 'GIF', 'PDF')")
        return value

    @field_validator('content_md5')
    def content_md5_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Za-z0-9\\+\/]{22}={2}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z0-9\\+\/]{22}={2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceUploadDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceUploadDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentType": obj.get("contentType"),
            "contentLength": obj.get("contentLength"),
            "contentMD5": obj.get("contentMD5")
        })
        return _obj


