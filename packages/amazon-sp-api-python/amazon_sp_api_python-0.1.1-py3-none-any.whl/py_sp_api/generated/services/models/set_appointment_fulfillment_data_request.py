# coding: utf-8

"""
    Selling Partner API for Services

    With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.services.models.appointment_resource import AppointmentResource
from py_sp_api.generated.services.models.fulfillment_document import FulfillmentDocument
from py_sp_api.generated.services.models.fulfillment_time import FulfillmentTime
from typing import Optional, Set
from typing_extensions import Self

class SetAppointmentFulfillmentDataRequest(BaseModel):
    """
    Input for set appointment fulfillment data operation.
    """ # noqa: E501
    fulfillment_time: Optional[FulfillmentTime] = Field(default=None, alias="fulfillmentTime")
    appointment_resources: Optional[List[AppointmentResource]] = Field(default=None, description="List of resources that performs or performed job appointment fulfillment.", alias="appointmentResources")
    fulfillment_documents: Optional[List[FulfillmentDocument]] = Field(default=None, description="List of documents captured during service appointment fulfillment.", alias="fulfillmentDocuments")
    __properties: ClassVar[List[str]] = ["fulfillmentTime", "appointmentResources", "fulfillmentDocuments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SetAppointmentFulfillmentDataRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fulfillment_time
        if self.fulfillment_time:
            _dict['fulfillmentTime'] = self.fulfillment_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in appointment_resources (list)
        _items = []
        if self.appointment_resources:
            for _item_appointment_resources in self.appointment_resources:
                if _item_appointment_resources:
                    _items.append(_item_appointment_resources.to_dict())
            _dict['appointmentResources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fulfillment_documents (list)
        _items = []
        if self.fulfillment_documents:
            for _item_fulfillment_documents in self.fulfillment_documents:
                if _item_fulfillment_documents:
                    _items.append(_item_fulfillment_documents.to_dict())
            _dict['fulfillmentDocuments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SetAppointmentFulfillmentDataRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fulfillmentTime": FulfillmentTime.from_dict(obj["fulfillmentTime"]) if obj.get("fulfillmentTime") is not None else None,
            "appointmentResources": [AppointmentResource.from_dict(_item) for _item in obj["appointmentResources"]] if obj.get("appointmentResources") is not None else None,
            "fulfillmentDocuments": [FulfillmentDocument.from_dict(_item) for _item in obj["fulfillmentDocuments"]] if obj.get("fulfillmentDocuments") is not None else None
        })
        return _obj


