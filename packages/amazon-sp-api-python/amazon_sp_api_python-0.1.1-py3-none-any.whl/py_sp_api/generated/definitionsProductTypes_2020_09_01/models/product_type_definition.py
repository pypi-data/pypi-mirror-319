# coding: utf-8

"""
    Selling Partner API for Product Type Definitions

    The Selling Partner API for Product Type Definitions provides programmatic access to attribute and data requirements for product types in the Amazon catalog. Use this API to return the JSON Schema for a product type that you can then use with other Selling Partner APIs, such as the Selling Partner API for Listings Items, the Selling Partner API for Catalog Items, and the Selling Partner API for Feeds (for JSON-based listing feeds).  For more information, see the [Product Type Definitions API Use Case Guide](doc:product-type-api-use-case-guide).

    The version of the OpenAPI document: 2020-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.definitionsProductTypes_2020_09_01.models.product_type_version import ProductTypeVersion
from py_sp_api.generated.definitionsProductTypes_2020_09_01.models.property_group import PropertyGroup
from py_sp_api.generated.definitionsProductTypes_2020_09_01.models.schema_link import SchemaLink
from typing import Optional, Set
from typing_extensions import Self

class ProductTypeDefinition(BaseModel):
    """
    A product type definition represents the attributes and data requirements for a product type in the Amazon catalog. Product type definitions are used interchangeably between the Selling Partner API for Listings Items, Selling Partner API for Catalog Items, and JSON-based listings feeds in the Selling Partner API for Feeds.
    """ # noqa: E501
    meta_schema: Optional[SchemaLink] = Field(default=None, alias="metaSchema")
    var_schema: SchemaLink = Field(alias="schema")
    requirements: StrictStr = Field(description="Name of the requirements set represented in this product type definition.")
    requirements_enforced: StrictStr = Field(description="Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all of the required attributes being present (such as for partial updates).", alias="requirementsEnforced")
    property_groups: Dict[str, PropertyGroup] = Field(description="Mapping of property group names to property groups. Property groups represent logical groupings of schema properties that can be used for display or informational purposes.", alias="propertyGroups")
    locale: StrictStr = Field(description="Locale of the display elements contained in the product type definition.")
    marketplace_ids: List[StrictStr] = Field(description="Amazon marketplace identifiers for which the product type definition is applicable.", alias="marketplaceIds")
    product_type: StrictStr = Field(description="The name of the Amazon product type that this product type definition applies to.", alias="productType")
    display_name: StrictStr = Field(description="Human-readable and localized description of the Amazon product type.", alias="displayName")
    product_type_version: ProductTypeVersion = Field(alias="productTypeVersion")
    __properties: ClassVar[List[str]] = ["metaSchema", "schema", "requirements", "requirementsEnforced", "propertyGroups", "locale", "marketplaceIds", "productType", "displayName", "productTypeVersion"]

    @field_validator('requirements')
    def requirements_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['LISTING', 'LISTING_PRODUCT_ONLY', 'LISTING_OFFER_ONLY']):
            raise ValueError("must be one of enum values ('LISTING', 'LISTING_PRODUCT_ONLY', 'LISTING_OFFER_ONLY')")
        return value

    @field_validator('requirements_enforced')
    def requirements_enforced_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ENFORCED', 'NOT_ENFORCED']):
            raise ValueError("must be one of enum values ('ENFORCED', 'NOT_ENFORCED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductTypeDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of meta_schema
        if self.meta_schema:
            _dict['metaSchema'] = self.meta_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in property_groups (dict)
        _field_dict = {}
        if self.property_groups:
            for _key_property_groups in self.property_groups:
                if self.property_groups[_key_property_groups]:
                    _field_dict[_key_property_groups] = self.property_groups[_key_property_groups].to_dict()
            _dict['propertyGroups'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of product_type_version
        if self.product_type_version:
            _dict['productTypeVersion'] = self.product_type_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductTypeDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "metaSchema": SchemaLink.from_dict(obj["metaSchema"]) if obj.get("metaSchema") is not None else None,
            "schema": SchemaLink.from_dict(obj["schema"]) if obj.get("schema") is not None else None,
            "requirements": obj.get("requirements"),
            "requirementsEnforced": obj.get("requirementsEnforced"),
            "propertyGroups": dict(
                (_k, PropertyGroup.from_dict(_v))
                for _k, _v in obj["propertyGroups"].items()
            )
            if obj.get("propertyGroups") is not None
            else None,
            "locale": obj.get("locale"),
            "marketplaceIds": obj.get("marketplaceIds"),
            "productType": obj.get("productType"),
            "displayName": obj.get("displayName"),
            "productTypeVersion": ProductTypeVersion.from_dict(obj["productTypeVersion"]) if obj.get("productTypeVersion") is not None else None
        })
        return _obj


