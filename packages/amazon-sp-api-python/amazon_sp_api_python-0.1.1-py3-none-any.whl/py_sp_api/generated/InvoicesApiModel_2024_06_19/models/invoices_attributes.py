# coding: utf-8

"""
    The Selling Partner API for Invoices.

    Use the Selling Partner API for Invoices to retrieve and manage invoice-related operations, which can help selling partners manage their bookkeeping processes.

    The version of the OpenAPI document: 2024-06-19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.InvoicesApiModel_2024_06_19.models.attribute_option import AttributeOption
from typing import Optional, Set
from typing_extensions import Self

class InvoicesAttributes(BaseModel):
    """
    An object that contains the invoice attributes definition.
    """ # noqa: E501
    invoice_status_options: Optional[List[AttributeOption]] = Field(default=None, description="A list of all the options that are available for the invoice status attribute.", alias="invoiceStatusOptions")
    invoice_type_options: Optional[List[AttributeOption]] = Field(default=None, description="A list of all the options that are available for the invoice type attribute.", alias="invoiceTypeOptions")
    transaction_identifier_name_options: Optional[List[AttributeOption]] = Field(default=None, description="A list of all the options that are available for the transaction identifier name attribute.", alias="transactionIdentifierNameOptions")
    transaction_type_options: Optional[List[AttributeOption]] = Field(default=None, description="A list of all the options that are available for the transaction type attribute.", alias="transactionTypeOptions")
    __properties: ClassVar[List[str]] = ["invoiceStatusOptions", "invoiceTypeOptions", "transactionIdentifierNameOptions", "transactionTypeOptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoicesAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in invoice_status_options (list)
        _items = []
        if self.invoice_status_options:
            for _item_invoice_status_options in self.invoice_status_options:
                if _item_invoice_status_options:
                    _items.append(_item_invoice_status_options.to_dict())
            _dict['invoiceStatusOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in invoice_type_options (list)
        _items = []
        if self.invoice_type_options:
            for _item_invoice_type_options in self.invoice_type_options:
                if _item_invoice_type_options:
                    _items.append(_item_invoice_type_options.to_dict())
            _dict['invoiceTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transaction_identifier_name_options (list)
        _items = []
        if self.transaction_identifier_name_options:
            for _item_transaction_identifier_name_options in self.transaction_identifier_name_options:
                if _item_transaction_identifier_name_options:
                    _items.append(_item_transaction_identifier_name_options.to_dict())
            _dict['transactionIdentifierNameOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transaction_type_options (list)
        _items = []
        if self.transaction_type_options:
            for _item_transaction_type_options in self.transaction_type_options:
                if _item_transaction_type_options:
                    _items.append(_item_transaction_type_options.to_dict())
            _dict['transactionTypeOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoicesAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "invoiceStatusOptions": [AttributeOption.from_dict(_item) for _item in obj["invoiceStatusOptions"]] if obj.get("invoiceStatusOptions") is not None else None,
            "invoiceTypeOptions": [AttributeOption.from_dict(_item) for _item in obj["invoiceTypeOptions"]] if obj.get("invoiceTypeOptions") is not None else None,
            "transactionIdentifierNameOptions": [AttributeOption.from_dict(_item) for _item in obj["transactionIdentifierNameOptions"]] if obj.get("transactionIdentifierNameOptions") is not None else None,
            "transactionTypeOptions": [AttributeOption.from_dict(_item) for _item in obj["transactionTypeOptions"]] if obj.get("transactionTypeOptions") is not None else None
        })
        return _obj


