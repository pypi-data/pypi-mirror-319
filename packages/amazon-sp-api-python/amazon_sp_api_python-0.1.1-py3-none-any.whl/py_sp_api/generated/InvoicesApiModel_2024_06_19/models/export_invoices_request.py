# coding: utf-8

"""
    The Selling Partner API for Invoices.

    Use the Selling Partner API for Invoices to retrieve and manage invoice-related operations, which can help selling partners manage their bookkeeping processes.

    The version of the OpenAPI document: 2024-06-19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.InvoicesApiModel_2024_06_19.models.file_format import FileFormat
from py_sp_api.generated.InvoicesApiModel_2024_06_19.models.transaction_identifier import TransactionIdentifier
from typing import Optional, Set
from typing_extensions import Self

class ExportInvoicesRequest(BaseModel):
    """
    The information required to create the export request.
    """ # noqa: E501
    date_end: Optional[date] = Field(default=None, description="The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the time of the request.", alias="dateEnd")
    date_start: Optional[date] = Field(default=None, description="The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request.", alias="dateStart")
    external_invoice_id: Optional[StrictStr] = Field(default=None, description="The external ID of the invoices you want included in the response.", alias="externalInvoiceId")
    file_format: Optional[FileFormat] = Field(default=None, alias="fileFormat")
    invoice_type: Optional[StrictStr] = Field(default=None, description="The marketplace-specific classification of the invoice type. Use the `getInvoicesAttributes` operation to check `invoiceType` options.", alias="invoiceType")
    marketplace_id: StrictStr = Field(description="The ID of the marketplace from which you want the invoices.", alias="marketplaceId")
    series: Optional[StrictStr] = Field(default=None, description="The series number of the invoices you want included in the response.")
    statuses: Optional[Annotated[List[StrictStr], Field(min_length=1)]] = Field(default=None, description="A list of statuses that you can use to filter invoices. Use the `getInvoicesAttributes` operation to check invoice status options.  Min count: 1")
    transaction_identifier: Optional[TransactionIdentifier] = Field(default=None, alias="transactionIdentifier")
    transaction_type: Optional[StrictStr] = Field(default=None, description="The marketplace-specific classification of the transaction type for which the invoice was created. Use the `getInvoicesAttributes` operation to check `transactionType` options", alias="transactionType")
    __properties: ClassVar[List[str]] = ["dateEnd", "dateStart", "externalInvoiceId", "fileFormat", "invoiceType", "marketplaceId", "series", "statuses", "transactionIdentifier", "transactionType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportInvoicesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of transaction_identifier
        if self.transaction_identifier:
            _dict['transactionIdentifier'] = self.transaction_identifier.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportInvoicesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dateEnd": obj.get("dateEnd"),
            "dateStart": obj.get("dateStart"),
            "externalInvoiceId": obj.get("externalInvoiceId"),
            "fileFormat": obj.get("fileFormat"),
            "invoiceType": obj.get("invoiceType"),
            "marketplaceId": obj.get("marketplaceId"),
            "series": obj.get("series"),
            "statuses": obj.get("statuses"),
            "transactionIdentifier": TransactionIdentifier.from_dict(obj["transactionIdentifier"]) if obj.get("transactionIdentifier") is not None else None,
            "transactionType": obj.get("transactionType")
        })
        return _obj


