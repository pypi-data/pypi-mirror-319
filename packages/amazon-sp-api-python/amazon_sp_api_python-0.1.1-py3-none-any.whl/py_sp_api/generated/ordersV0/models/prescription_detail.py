# coding: utf-8

"""
    Orders v0

    Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PrescriptionDetail(BaseModel):
    """
    Information about the prescription that is used to verify a regulated product. This must be provided once per order and reflect the sellerâ€™s own records. Only approved orders can have prescriptions.
    """ # noqa: E501
    prescription_id: StrictStr = Field(description="The identifier for the prescription used to verify the regulated product.", alias="prescriptionId")
    expiration_date: datetime = Field(description="The expiration date of the prescription used to verify the regulated product, in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format.", alias="expirationDate")
    written_quantity: Annotated[int, Field(strict=True, ge=1)] = Field(description="The number of units in each fill as provided in the prescription.", alias="writtenQuantity")
    total_refills_authorized: Annotated[int, Field(strict=True, ge=0)] = Field(description="The total number of refills written in the original prescription used to verify the regulated product. If a prescription originally had no refills, this value must be 0.", alias="totalRefillsAuthorized")
    refills_remaining: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of refills remaining for the prescription used to verify the regulated product. If a prescription originally had 10 total refills, this value must be `10` for the first order, `9` for the second order, and `0` for the eleventh order. If a prescription originally had no refills, this value must be 0.", alias="refillsRemaining")
    clinic_id: StrictStr = Field(description="The identifier for the clinic which provided the prescription used to verify the regulated product.", alias="clinicId")
    usage_instructions: StrictStr = Field(description="The instructions for the prescription as provided by the approver of the regulated product.", alias="usageInstructions")
    __properties: ClassVar[List[str]] = ["prescriptionId", "expirationDate", "writtenQuantity", "totalRefillsAuthorized", "refillsRemaining", "clinicId", "usageInstructions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrescriptionDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrescriptionDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "prescriptionId": obj.get("prescriptionId"),
            "expirationDate": obj.get("expirationDate"),
            "writtenQuantity": obj.get("writtenQuantity"),
            "totalRefillsAuthorized": obj.get("totalRefillsAuthorized"),
            "refillsRemaining": obj.get("refillsRemaining"),
            "clinicId": obj.get("clinicId"),
            "usageInstructions": obj.get("usageInstructions")
        })
        return _obj


