# coding: utf-8

"""
    Orders v0

    Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.ordersV0.models.rejection_reason import RejectionReason
from py_sp_api.generated.ordersV0.models.valid_verification_detail import ValidVerificationDetail
from py_sp_api.generated.ordersV0.models.verification_status import VerificationStatus
from typing import Optional, Set
from typing_extensions import Self

class RegulatedOrderVerificationStatus(BaseModel):
    """
    The verification status of the order, along with associated approval or rejection metadata.
    """ # noqa: E501
    status: VerificationStatus = Field(alias="Status")
    requires_merchant_action: StrictBool = Field(description="When true, the regulated information provided in the order requires a review by the merchant.", alias="RequiresMerchantAction")
    valid_rejection_reasons: List[RejectionReason] = Field(description="A list of valid rejection reasons that may be used to reject the order's regulated information.", alias="ValidRejectionReasons")
    rejection_reason: Optional[RejectionReason] = Field(default=None, alias="RejectionReason")
    review_date: Optional[StrictStr] = Field(default=None, description="The date the order was reviewed. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format.", alias="ReviewDate")
    external_reviewer_id: Optional[StrictStr] = Field(default=None, description="The identifier for the order's regulated information reviewer.", alias="ExternalReviewerId")
    valid_verification_details: Optional[List[ValidVerificationDetail]] = Field(default=None, description="A list of valid verification details that may be provided and the criteria required for when the verification detail can be provided.", alias="ValidVerificationDetails")
    __properties: ClassVar[List[str]] = ["Status", "RequiresMerchantAction", "ValidRejectionReasons", "RejectionReason", "ReviewDate", "ExternalReviewerId", "ValidVerificationDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RegulatedOrderVerificationStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in valid_rejection_reasons (list)
        _items = []
        if self.valid_rejection_reasons:
            for _item_valid_rejection_reasons in self.valid_rejection_reasons:
                if _item_valid_rejection_reasons:
                    _items.append(_item_valid_rejection_reasons.to_dict())
            _dict['ValidRejectionReasons'] = _items
        # override the default output from pydantic by calling `to_dict()` of rejection_reason
        if self.rejection_reason:
            _dict['RejectionReason'] = self.rejection_reason.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in valid_verification_details (list)
        _items = []
        if self.valid_verification_details:
            for _item_valid_verification_details in self.valid_verification_details:
                if _item_valid_verification_details:
                    _items.append(_item_valid_verification_details.to_dict())
            _dict['ValidVerificationDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RegulatedOrderVerificationStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Status": obj.get("Status"),
            "RequiresMerchantAction": obj.get("RequiresMerchantAction"),
            "ValidRejectionReasons": [RejectionReason.from_dict(_item) for _item in obj["ValidRejectionReasons"]] if obj.get("ValidRejectionReasons") is not None else None,
            "RejectionReason": RejectionReason.from_dict(obj["RejectionReason"]) if obj.get("RejectionReason") is not None else None,
            "ReviewDate": obj.get("ReviewDate"),
            "ExternalReviewerId": obj.get("ExternalReviewerId"),
            "ValidVerificationDetails": [ValidVerificationDetail.from_dict(_item) for _item in obj["ValidVerificationDetails"]] if obj.get("ValidVerificationDetails") is not None else None
        })
        return _obj


