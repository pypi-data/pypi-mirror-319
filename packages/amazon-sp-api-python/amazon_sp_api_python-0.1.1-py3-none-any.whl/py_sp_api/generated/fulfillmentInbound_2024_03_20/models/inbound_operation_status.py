# coding: utf-8

"""
    Fulfillment Inbound v2024-03-20

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.operation_problem import OperationProblem
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.operation_status import OperationStatus
from typing import Optional, Set
from typing_extensions import Self

class InboundOperationStatus(BaseModel):
    """
    GetInboundOperationStatus response.
    """ # noqa: E501
    operation: Annotated[str, Field(min_length=1, strict=True, max_length=1024)] = Field(description="The name of the operation in the asynchronous API call.")
    operation_id: Annotated[str, Field(min_length=36, strict=True, max_length=38)] = Field(description="The operation ID returned by the asynchronous API call.", alias="operationId")
    operation_problems: List[OperationProblem] = Field(description="The problems in the processing of the asynchronous operation.", alias="operationProblems")
    operation_status: OperationStatus = Field(alias="operationStatus")
    __properties: ClassVar[List[str]] = ["operation", "operationId", "operationProblems", "operationStatus"]

    @field_validator('operation_id')
    def operation_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9-]*$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9-]*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InboundOperationStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in operation_problems (list)
        _items = []
        if self.operation_problems:
            for _item_operation_problems in self.operation_problems:
                if _item_operation_problems:
                    _items.append(_item_operation_problems.to_dict())
            _dict['operationProblems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InboundOperationStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "operation": obj.get("operation"),
            "operationId": obj.get("operationId"),
            "operationProblems": [OperationProblem.from_dict(_item) for _item in obj["operationProblems"]] if obj.get("operationProblems") is not None else None,
            "operationStatus": obj.get("operationStatus")
        })
        return _obj


