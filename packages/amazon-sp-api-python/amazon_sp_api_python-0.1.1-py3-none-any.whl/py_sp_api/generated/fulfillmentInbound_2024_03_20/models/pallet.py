# coding: utf-8

"""
    Fulfillment Inbound v2024-03-20

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.dimensions import Dimensions
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.stackability import Stackability
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.weight import Weight
from typing import Optional, Set
from typing_extensions import Self

class Pallet(BaseModel):
    """
    Contains information about a pallet that is used in the inbound plan. The pallet is a container that holds multiple items or boxes.
    """ # noqa: E501
    dimensions: Optional[Dimensions] = None
    package_id: Annotated[str, Field(min_length=38, strict=True, max_length=38)] = Field(description="Primary key to uniquely identify a Package (Box or Pallet).", alias="packageId")
    quantity: Optional[Annotated[int, Field(le=10000, strict=True, ge=1)]] = Field(default=None, description="The number of containers where all other properties like weight or dimensions are identical.")
    stackability: Optional[Stackability] = None
    weight: Optional[Weight] = None
    __properties: ClassVar[List[str]] = ["dimensions", "packageId", "quantity", "stackability", "weight"]

    @field_validator('package_id')
    def package_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9-]*$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9-]*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Pallet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dimensions
        if self.dimensions:
            _dict['dimensions'] = self.dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weight
        if self.weight:
            _dict['weight'] = self.weight.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Pallet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dimensions": Dimensions.from_dict(obj["dimensions"]) if obj.get("dimensions") is not None else None,
            "packageId": obj.get("packageId"),
            "quantity": obj.get("quantity"),
            "stackability": obj.get("stackability"),
            "weight": Weight.from_dict(obj["weight"]) if obj.get("weight") is not None else None
        })
        return _obj


