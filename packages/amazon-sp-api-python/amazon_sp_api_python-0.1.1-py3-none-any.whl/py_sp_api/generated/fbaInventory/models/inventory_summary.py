# coding: utf-8

"""
    Selling Partner API for FBA Inventory

    The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.fbaInventory.models.inventory_details import InventoryDetails
from typing import Optional, Set
from typing_extensions import Self

class InventorySummary(BaseModel):
    """
    Inventory summary for a specific item.
    """ # noqa: E501
    asin: Optional[StrictStr] = Field(default=None, description="The Amazon Standard Identification Number (ASIN) of an item.")
    fn_sku: Optional[StrictStr] = Field(default=None, description="Amazon's fulfillment network SKU identifier.", alias="fnSku")
    seller_sku: Optional[StrictStr] = Field(default=None, description="The seller SKU of the item.", alias="sellerSku")
    condition: Optional[StrictStr] = Field(default=None, description="The condition of the item as described by the seller (for example, New Item).")
    inventory_details: Optional[InventoryDetails] = Field(default=None, alias="inventoryDetails")
    last_updated_time: Optional[datetime] = Field(default=None, description="The date and time that any quantity was last updated.", alias="lastUpdatedTime")
    product_name: Optional[StrictStr] = Field(default=None, description="The localized language product title of the item within the specific marketplace.", alias="productName")
    total_quantity: Optional[StrictInt] = Field(default=None, description="The total number of units in an inbound shipment or in Amazon fulfillment centers.", alias="totalQuantity")
    stores: Optional[List[StrictStr]] = Field(default=None, description="A list of seller-enrolled stores that apply to this seller SKU.")
    __properties: ClassVar[List[str]] = ["asin", "fnSku", "sellerSku", "condition", "inventoryDetails", "lastUpdatedTime", "productName", "totalQuantity", "stores"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InventorySummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of inventory_details
        if self.inventory_details:
            _dict['inventoryDetails'] = self.inventory_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InventorySummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asin": obj.get("asin"),
            "fnSku": obj.get("fnSku"),
            "sellerSku": obj.get("sellerSku"),
            "condition": obj.get("condition"),
            "inventoryDetails": InventoryDetails.from_dict(obj["inventoryDetails"]) if obj.get("inventoryDetails") is not None else None,
            "lastUpdatedTime": obj.get("lastUpdatedTime"),
            "productName": obj.get("productName"),
            "totalQuantity": obj.get("totalQuantity"),
            "stores": obj.get("stores")
        })
        return _obj


