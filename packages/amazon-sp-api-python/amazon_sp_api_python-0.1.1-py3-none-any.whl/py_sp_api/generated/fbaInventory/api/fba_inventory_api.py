# coding: utf-8

"""
    Selling Partner API for FBA Inventory

    The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.fbaInventory.models.add_inventory_request import AddInventoryRequest
from py_sp_api.generated.fbaInventory.models.add_inventory_response import AddInventoryResponse
from py_sp_api.generated.fbaInventory.models.create_inventory_item_request import CreateInventoryItemRequest
from py_sp_api.generated.fbaInventory.models.create_inventory_item_response import CreateInventoryItemResponse
from py_sp_api.generated.fbaInventory.models.delete_inventory_item_response import DeleteInventoryItemResponse
from py_sp_api.generated.fbaInventory.models.get_inventory_summaries_response import GetInventorySummariesResponse

from py_sp_api.generated.fbaInventory.api_client import ApiClient, RequestSerialized
from py_sp_api.generated.fbaInventory.api_response import ApiResponse
from py_sp_api.generated.fbaInventory.rest import RESTResponseType


class FbaInventoryApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def add_inventory(
        self,
        x_amzn_idempotency_token: Annotated[StrictStr, Field(description="A unique token/requestId provided with each call to ensure idempotency.")],
        add_inventory_request_body: Annotated[AddInventoryRequest, Field(description="List of items to add to Sandbox inventory.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AddInventoryResponse:
        """add_inventory

        Requests that Amazon add items to the Sandbox Inventory with desired amount of quantity in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.

        :param x_amzn_idempotency_token: A unique token/requestId provided with each call to ensure idempotency. (required)
        :type x_amzn_idempotency_token: str
        :param add_inventory_request_body: List of items to add to Sandbox inventory. (required)
        :type add_inventory_request_body: AddInventoryRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_inventory_serialize(
            x_amzn_idempotency_token=x_amzn_idempotency_token,
            add_inventory_request_body=add_inventory_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AddInventoryResponse",
            '400': "AddInventoryResponse",
            '403': "AddInventoryResponse",
            '404': "AddInventoryResponse",
            '429': "AddInventoryResponse",
            '500': "AddInventoryResponse",
            '503': "AddInventoryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_inventory_with_http_info(
        self,
        x_amzn_idempotency_token: Annotated[StrictStr, Field(description="A unique token/requestId provided with each call to ensure idempotency.")],
        add_inventory_request_body: Annotated[AddInventoryRequest, Field(description="List of items to add to Sandbox inventory.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AddInventoryResponse]:
        """add_inventory

        Requests that Amazon add items to the Sandbox Inventory with desired amount of quantity in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.

        :param x_amzn_idempotency_token: A unique token/requestId provided with each call to ensure idempotency. (required)
        :type x_amzn_idempotency_token: str
        :param add_inventory_request_body: List of items to add to Sandbox inventory. (required)
        :type add_inventory_request_body: AddInventoryRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_inventory_serialize(
            x_amzn_idempotency_token=x_amzn_idempotency_token,
            add_inventory_request_body=add_inventory_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AddInventoryResponse",
            '400': "AddInventoryResponse",
            '403': "AddInventoryResponse",
            '404': "AddInventoryResponse",
            '429': "AddInventoryResponse",
            '500': "AddInventoryResponse",
            '503': "AddInventoryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_inventory_without_preload_content(
        self,
        x_amzn_idempotency_token: Annotated[StrictStr, Field(description="A unique token/requestId provided with each call to ensure idempotency.")],
        add_inventory_request_body: Annotated[AddInventoryRequest, Field(description="List of items to add to Sandbox inventory.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """add_inventory

        Requests that Amazon add items to the Sandbox Inventory with desired amount of quantity in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.

        :param x_amzn_idempotency_token: A unique token/requestId provided with each call to ensure idempotency. (required)
        :type x_amzn_idempotency_token: str
        :param add_inventory_request_body: List of items to add to Sandbox inventory. (required)
        :type add_inventory_request_body: AddInventoryRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_inventory_serialize(
            x_amzn_idempotency_token=x_amzn_idempotency_token,
            add_inventory_request_body=add_inventory_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AddInventoryResponse",
            '400': "AddInventoryResponse",
            '403': "AddInventoryResponse",
            '404': "AddInventoryResponse",
            '429': "AddInventoryResponse",
            '500': "AddInventoryResponse",
            '503': "AddInventoryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_inventory_serialize(
        self,
        x_amzn_idempotency_token,
        add_inventory_request_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amzn_idempotency_token is not None:
            _header_params['x-amzn-idempotency-token'] = x_amzn_idempotency_token
        # process the form parameters
        # process the body parameter
        if add_inventory_request_body is not None:
            _body_params = add_inventory_request_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/fba/inventory/v1/items/inventory',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_inventory_item(
        self,
        create_inventory_item_request_body: Annotated[CreateInventoryItemRequest, Field(description="CreateInventoryItem Request Body Parameter.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateInventoryItemResponse:
        """create_inventory_item

        Requests that Amazon create product-details in the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.

        :param create_inventory_item_request_body: CreateInventoryItem Request Body Parameter. (required)
        :type create_inventory_item_request_body: CreateInventoryItemRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_inventory_item_serialize(
            create_inventory_item_request_body=create_inventory_item_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateInventoryItemResponse",
            '400': "CreateInventoryItemResponse",
            '403': "CreateInventoryItemResponse",
            '404': "CreateInventoryItemResponse",
            '429': "CreateInventoryItemResponse",
            '500': "CreateInventoryItemResponse",
            '503': "CreateInventoryItemResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_inventory_item_with_http_info(
        self,
        create_inventory_item_request_body: Annotated[CreateInventoryItemRequest, Field(description="CreateInventoryItem Request Body Parameter.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateInventoryItemResponse]:
        """create_inventory_item

        Requests that Amazon create product-details in the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.

        :param create_inventory_item_request_body: CreateInventoryItem Request Body Parameter. (required)
        :type create_inventory_item_request_body: CreateInventoryItemRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_inventory_item_serialize(
            create_inventory_item_request_body=create_inventory_item_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateInventoryItemResponse",
            '400': "CreateInventoryItemResponse",
            '403': "CreateInventoryItemResponse",
            '404': "CreateInventoryItemResponse",
            '429': "CreateInventoryItemResponse",
            '500': "CreateInventoryItemResponse",
            '503': "CreateInventoryItemResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_inventory_item_without_preload_content(
        self,
        create_inventory_item_request_body: Annotated[CreateInventoryItemRequest, Field(description="CreateInventoryItem Request Body Parameter.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_inventory_item

        Requests that Amazon create product-details in the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.

        :param create_inventory_item_request_body: CreateInventoryItem Request Body Parameter. (required)
        :type create_inventory_item_request_body: CreateInventoryItemRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_inventory_item_serialize(
            create_inventory_item_request_body=create_inventory_item_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateInventoryItemResponse",
            '400': "CreateInventoryItemResponse",
            '403': "CreateInventoryItemResponse",
            '404': "CreateInventoryItemResponse",
            '429': "CreateInventoryItemResponse",
            '500': "CreateInventoryItemResponse",
            '503': "CreateInventoryItemResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_inventory_item_serialize(
        self,
        create_inventory_item_request_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_inventory_item_request_body is not None:
            _body_params = create_inventory_item_request_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/fba/inventory/v1/items',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_inventory_item(
        self,
        seller_sku: Annotated[StrictStr, Field(description="A single seller SKU used for querying the specified seller SKU inventory summaries.")],
        marketplace_id: Annotated[StrictStr, Field(description="The marketplace ID for the marketplace for which the sellerSku is to be deleted.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteInventoryItemResponse:
        """delete_inventory_item

        Requests that Amazon Deletes an item from the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.

        :param seller_sku: A single seller SKU used for querying the specified seller SKU inventory summaries. (required)
        :type seller_sku: str
        :param marketplace_id: The marketplace ID for the marketplace for which the sellerSku is to be deleted. (required)
        :type marketplace_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_inventory_item_serialize(
            seller_sku=seller_sku,
            marketplace_id=marketplace_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteInventoryItemResponse",
            '400': "DeleteInventoryItemResponse",
            '403': "DeleteInventoryItemResponse",
            '404': "DeleteInventoryItemResponse",
            '429': "DeleteInventoryItemResponse",
            '500': "DeleteInventoryItemResponse",
            '503': "DeleteInventoryItemResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_inventory_item_with_http_info(
        self,
        seller_sku: Annotated[StrictStr, Field(description="A single seller SKU used for querying the specified seller SKU inventory summaries.")],
        marketplace_id: Annotated[StrictStr, Field(description="The marketplace ID for the marketplace for which the sellerSku is to be deleted.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteInventoryItemResponse]:
        """delete_inventory_item

        Requests that Amazon Deletes an item from the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.

        :param seller_sku: A single seller SKU used for querying the specified seller SKU inventory summaries. (required)
        :type seller_sku: str
        :param marketplace_id: The marketplace ID for the marketplace for which the sellerSku is to be deleted. (required)
        :type marketplace_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_inventory_item_serialize(
            seller_sku=seller_sku,
            marketplace_id=marketplace_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteInventoryItemResponse",
            '400': "DeleteInventoryItemResponse",
            '403': "DeleteInventoryItemResponse",
            '404': "DeleteInventoryItemResponse",
            '429': "DeleteInventoryItemResponse",
            '500': "DeleteInventoryItemResponse",
            '503': "DeleteInventoryItemResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_inventory_item_without_preload_content(
        self,
        seller_sku: Annotated[StrictStr, Field(description="A single seller SKU used for querying the specified seller SKU inventory summaries.")],
        marketplace_id: Annotated[StrictStr, Field(description="The marketplace ID for the marketplace for which the sellerSku is to be deleted.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_inventory_item

        Requests that Amazon Deletes an item from the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.

        :param seller_sku: A single seller SKU used for querying the specified seller SKU inventory summaries. (required)
        :type seller_sku: str
        :param marketplace_id: The marketplace ID for the marketplace for which the sellerSku is to be deleted. (required)
        :type marketplace_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_inventory_item_serialize(
            seller_sku=seller_sku,
            marketplace_id=marketplace_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteInventoryItemResponse",
            '400': "DeleteInventoryItemResponse",
            '403': "DeleteInventoryItemResponse",
            '404': "DeleteInventoryItemResponse",
            '429': "DeleteInventoryItemResponse",
            '500': "DeleteInventoryItemResponse",
            '503': "DeleteInventoryItemResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_inventory_item_serialize(
        self,
        seller_sku,
        marketplace_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if seller_sku is not None:
            _path_params['sellerSku'] = seller_sku
        # process the query parameters
        if marketplace_id is not None:
            
            _query_params.append(('marketplaceId', marketplace_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/fba/inventory/v1/items/{sellerSku}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_inventory_summaries(
        self,
        granularity_type: Annotated[StrictStr, Field(description="The granularity type for the inventory aggregation level.")],
        granularity_id: Annotated[StrictStr, Field(description="The granularity ID for the inventory aggregation level.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="The marketplace ID for the marketplace for which to return inventory summaries.")],
        details: Annotated[Optional[StrictBool], Field(description="true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value).")] = None,
        start_date_time: Annotated[Optional[datetime], Field(description="A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected.")] = None,
        seller_skus: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=50)]], Field(description="A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs.")] = None,
        seller_sku: Annotated[Optional[StrictStr], Field(description="A single seller SKU used for querying the specified seller SKU inventory summaries.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="String token returned in the response of your previous request. The string token will expire 30 seconds after being created.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetInventorySummariesResponse:
        """get_inventory_summaries

        Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime, sellerSkus and sellerSku parameters:  - All inventory summaries with available details are returned when the startDateTime, sellerSkus and sellerSku parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus and sellerSku parameters are ignored. Important: To avoid errors, use both startDateTime and nextToken to get the next page of inventory summaries that have changed after the date and time specified. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus. The sellerSku parameter is ignored. - When the sellerSku parameter is provided, the operation returns inventory summaries for only the specified sellerSku.  Note: The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  Usage Plan:  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).

        :param granularity_type: The granularity type for the inventory aggregation level. (required)
        :type granularity_type: str
        :param granularity_id: The granularity ID for the inventory aggregation level. (required)
        :type granularity_id: str
        :param marketplace_ids: The marketplace ID for the marketplace for which to return inventory summaries. (required)
        :type marketplace_ids: List[str]
        :param details: true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value).
        :type details: bool
        :param start_date_time: A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected.
        :type start_date_time: datetime
        :param seller_skus: A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs.
        :type seller_skus: List[str]
        :param seller_sku: A single seller SKU used for querying the specified seller SKU inventory summaries.
        :type seller_sku: str
        :param next_token: String token returned in the response of your previous request. The string token will expire 30 seconds after being created.
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_inventory_summaries_serialize(
            granularity_type=granularity_type,
            granularity_id=granularity_id,
            marketplace_ids=marketplace_ids,
            details=details,
            start_date_time=start_date_time,
            seller_skus=seller_skus,
            seller_sku=seller_sku,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetInventorySummariesResponse",
            '400': "GetInventorySummariesResponse",
            '403': "GetInventorySummariesResponse",
            '404': "GetInventorySummariesResponse",
            '429': "GetInventorySummariesResponse",
            '500': "GetInventorySummariesResponse",
            '503': "GetInventorySummariesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_inventory_summaries_with_http_info(
        self,
        granularity_type: Annotated[StrictStr, Field(description="The granularity type for the inventory aggregation level.")],
        granularity_id: Annotated[StrictStr, Field(description="The granularity ID for the inventory aggregation level.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="The marketplace ID for the marketplace for which to return inventory summaries.")],
        details: Annotated[Optional[StrictBool], Field(description="true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value).")] = None,
        start_date_time: Annotated[Optional[datetime], Field(description="A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected.")] = None,
        seller_skus: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=50)]], Field(description="A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs.")] = None,
        seller_sku: Annotated[Optional[StrictStr], Field(description="A single seller SKU used for querying the specified seller SKU inventory summaries.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="String token returned in the response of your previous request. The string token will expire 30 seconds after being created.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetInventorySummariesResponse]:
        """get_inventory_summaries

        Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime, sellerSkus and sellerSku parameters:  - All inventory summaries with available details are returned when the startDateTime, sellerSkus and sellerSku parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus and sellerSku parameters are ignored. Important: To avoid errors, use both startDateTime and nextToken to get the next page of inventory summaries that have changed after the date and time specified. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus. The sellerSku parameter is ignored. - When the sellerSku parameter is provided, the operation returns inventory summaries for only the specified sellerSku.  Note: The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  Usage Plan:  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).

        :param granularity_type: The granularity type for the inventory aggregation level. (required)
        :type granularity_type: str
        :param granularity_id: The granularity ID for the inventory aggregation level. (required)
        :type granularity_id: str
        :param marketplace_ids: The marketplace ID for the marketplace for which to return inventory summaries. (required)
        :type marketplace_ids: List[str]
        :param details: true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value).
        :type details: bool
        :param start_date_time: A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected.
        :type start_date_time: datetime
        :param seller_skus: A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs.
        :type seller_skus: List[str]
        :param seller_sku: A single seller SKU used for querying the specified seller SKU inventory summaries.
        :type seller_sku: str
        :param next_token: String token returned in the response of your previous request. The string token will expire 30 seconds after being created.
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_inventory_summaries_serialize(
            granularity_type=granularity_type,
            granularity_id=granularity_id,
            marketplace_ids=marketplace_ids,
            details=details,
            start_date_time=start_date_time,
            seller_skus=seller_skus,
            seller_sku=seller_sku,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetInventorySummariesResponse",
            '400': "GetInventorySummariesResponse",
            '403': "GetInventorySummariesResponse",
            '404': "GetInventorySummariesResponse",
            '429': "GetInventorySummariesResponse",
            '500': "GetInventorySummariesResponse",
            '503': "GetInventorySummariesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_inventory_summaries_without_preload_content(
        self,
        granularity_type: Annotated[StrictStr, Field(description="The granularity type for the inventory aggregation level.")],
        granularity_id: Annotated[StrictStr, Field(description="The granularity ID for the inventory aggregation level.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="The marketplace ID for the marketplace for which to return inventory summaries.")],
        details: Annotated[Optional[StrictBool], Field(description="true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value).")] = None,
        start_date_time: Annotated[Optional[datetime], Field(description="A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected.")] = None,
        seller_skus: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=50)]], Field(description="A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs.")] = None,
        seller_sku: Annotated[Optional[StrictStr], Field(description="A single seller SKU used for querying the specified seller SKU inventory summaries.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="String token returned in the response of your previous request. The string token will expire 30 seconds after being created.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_inventory_summaries

        Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime, sellerSkus and sellerSku parameters:  - All inventory summaries with available details are returned when the startDateTime, sellerSkus and sellerSku parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus and sellerSku parameters are ignored. Important: To avoid errors, use both startDateTime and nextToken to get the next page of inventory summaries that have changed after the date and time specified. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus. The sellerSku parameter is ignored. - When the sellerSku parameter is provided, the operation returns inventory summaries for only the specified sellerSku.  Note: The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  Usage Plan:  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).

        :param granularity_type: The granularity type for the inventory aggregation level. (required)
        :type granularity_type: str
        :param granularity_id: The granularity ID for the inventory aggregation level. (required)
        :type granularity_id: str
        :param marketplace_ids: The marketplace ID for the marketplace for which to return inventory summaries. (required)
        :type marketplace_ids: List[str]
        :param details: true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value).
        :type details: bool
        :param start_date_time: A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected.
        :type start_date_time: datetime
        :param seller_skus: A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs.
        :type seller_skus: List[str]
        :param seller_sku: A single seller SKU used for querying the specified seller SKU inventory summaries.
        :type seller_sku: str
        :param next_token: String token returned in the response of your previous request. The string token will expire 30 seconds after being created.
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_inventory_summaries_serialize(
            granularity_type=granularity_type,
            granularity_id=granularity_id,
            marketplace_ids=marketplace_ids,
            details=details,
            start_date_time=start_date_time,
            seller_skus=seller_skus,
            seller_sku=seller_sku,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetInventorySummariesResponse",
            '400': "GetInventorySummariesResponse",
            '403': "GetInventorySummariesResponse",
            '404': "GetInventorySummariesResponse",
            '429': "GetInventorySummariesResponse",
            '500': "GetInventorySummariesResponse",
            '503': "GetInventorySummariesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_inventory_summaries_serialize(
        self,
        granularity_type,
        granularity_id,
        marketplace_ids,
        details,
        start_date_time,
        seller_skus,
        seller_sku,
        next_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
            'sellerSkus': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if details is not None:
            
            _query_params.append(('details', details))
            
        if granularity_type is not None:
            
            _query_params.append(('granularityType', granularity_type))
            
        if granularity_id is not None:
            
            _query_params.append(('granularityId', granularity_id))
            
        if start_date_time is not None:
            if isinstance(start_date_time, datetime):
                _query_params.append(
                    (
                        'startDateTime',
                        start_date_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startDateTime', start_date_time))
            
        if seller_skus is not None:
            
            _query_params.append(('sellerSkus', seller_skus))
            
        if seller_sku is not None:
            
            _query_params.append(('sellerSku', seller_sku))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/fba/inventory/v1/summaries',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


