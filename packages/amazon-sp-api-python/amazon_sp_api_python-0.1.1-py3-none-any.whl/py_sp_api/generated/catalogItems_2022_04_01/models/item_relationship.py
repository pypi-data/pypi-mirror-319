# coding: utf-8

"""
    Catalog Items v2022-04-01

    The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2022-04-01-use-case-guide).

    The version of the OpenAPI document: 2022-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.catalogItems_2022_04_01.models.item_variation_theme import ItemVariationTheme
from typing import Optional, Set
from typing_extensions import Self

class ItemRelationship(BaseModel):
    """
    Relationship details for an Amazon catalog item.
    """ # noqa: E501
    child_asins: Optional[List[StrictStr]] = Field(default=None, description="Identifiers (ASINs) of the related items that are children of this item.", alias="childAsins")
    parent_asins: Optional[List[StrictStr]] = Field(default=None, description="Identifiers (ASINs) of the related items that are parents of this item.", alias="parentAsins")
    variation_theme: Optional[ItemVariationTheme] = Field(default=None, alias="variationTheme")
    type: StrictStr = Field(description="Type of relationship.")
    __properties: ClassVar[List[str]] = ["childAsins", "parentAsins", "variationTheme", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['VARIATION', 'PACKAGE_HIERARCHY']):
            raise ValueError("must be one of enum values ('VARIATION', 'PACKAGE_HIERARCHY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemRelationship from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of variation_theme
        if self.variation_theme:
            _dict['variationTheme'] = self.variation_theme.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemRelationship from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "childAsins": obj.get("childAsins"),
            "parentAsins": obj.get("parentAsins"),
            "variationTheme": ItemVariationTheme.from_dict(obj["variationTheme"]) if obj.get("variationTheme") is not None else None,
            "type": obj.get("type")
        })
        return _obj


