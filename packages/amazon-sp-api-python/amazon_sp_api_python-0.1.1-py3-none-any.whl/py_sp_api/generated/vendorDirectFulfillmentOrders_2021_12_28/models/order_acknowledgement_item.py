# coding: utf-8

"""
    Selling Partner API for Direct Fulfillment Orders

    The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.

    The version of the OpenAPI document: 2021-12-28
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from py_sp_api.generated.vendorDirectFulfillmentOrders_2021_12_28.models.acknowledgement_status import AcknowledgementStatus
from py_sp_api.generated.vendorDirectFulfillmentOrders_2021_12_28.models.order_item_acknowledgement import OrderItemAcknowledgement
from py_sp_api.generated.vendorDirectFulfillmentOrders_2021_12_28.models.party_identification import PartyIdentification
from typing import Optional, Set
from typing_extensions import Self

class OrderAcknowledgementItem(BaseModel):
    """
    Details of an individual order being acknowledged.
    """ # noqa: E501
    purchase_order_number: StrictStr = Field(description="The purchase order number for this order. Formatting Notes: alpha-numeric code.", alias="purchaseOrderNumber")
    vendor_order_number: StrictStr = Field(description="The vendor's order number for this order.", alias="vendorOrderNumber")
    acknowledgement_date: datetime = Field(description="The date and time when the order is acknowledged, in ISO-8601 date/time format. For example: 2018-07-16T23:00:00Z / 2018-07-16T23:00:00-05:00 / 2018-07-16T23:00:00-08:00.", alias="acknowledgementDate")
    acknowledgement_status: AcknowledgementStatus = Field(alias="acknowledgementStatus")
    selling_party: PartyIdentification = Field(alias="sellingParty")
    ship_from_party: PartyIdentification = Field(alias="shipFromParty")
    item_acknowledgements: List[OrderItemAcknowledgement] = Field(description="Item details including acknowledged quantity.", alias="itemAcknowledgements")
    __properties: ClassVar[List[str]] = ["purchaseOrderNumber", "vendorOrderNumber", "acknowledgementDate", "acknowledgementStatus", "sellingParty", "shipFromParty", "itemAcknowledgements"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderAcknowledgementItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of acknowledgement_status
        if self.acknowledgement_status:
            _dict['acknowledgementStatus'] = self.acknowledgement_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selling_party
        if self.selling_party:
            _dict['sellingParty'] = self.selling_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_from_party
        if self.ship_from_party:
            _dict['shipFromParty'] = self.ship_from_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in item_acknowledgements (list)
        _items = []
        if self.item_acknowledgements:
            for _item_item_acknowledgements in self.item_acknowledgements:
                if _item_item_acknowledgements:
                    _items.append(_item_item_acknowledgements.to_dict())
            _dict['itemAcknowledgements'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderAcknowledgementItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "purchaseOrderNumber": obj.get("purchaseOrderNumber"),
            "vendorOrderNumber": obj.get("vendorOrderNumber"),
            "acknowledgementDate": obj.get("acknowledgementDate"),
            "acknowledgementStatus": AcknowledgementStatus.from_dict(obj["acknowledgementStatus"]) if obj.get("acknowledgementStatus") is not None else None,
            "sellingParty": PartyIdentification.from_dict(obj["sellingParty"]) if obj.get("sellingParty") is not None else None,
            "shipFromParty": PartyIdentification.from_dict(obj["shipFromParty"]) if obj.get("shipFromParty") is not None else None,
            "itemAcknowledgements": [OrderItemAcknowledgement.from_dict(_item) for _item in obj["itemAcknowledgements"]] if obj.get("itemAcknowledgements") is not None else None
        })
        return _obj


