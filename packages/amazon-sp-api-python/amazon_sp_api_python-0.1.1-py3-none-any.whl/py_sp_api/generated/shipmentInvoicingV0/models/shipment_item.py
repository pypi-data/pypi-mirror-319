# coding: utf-8

"""
    Selling Partner API for Shipment Invoicing

    The Selling Partner API for Shipment Invoicing helps you programmatically retrieve shipment invoice information in the Brazil marketplace for a selling partnerâ€™s Fulfillment by Amazon (FBA) orders.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from py_sp_api.generated.shipmentInvoicingV0.models.money import Money
from typing import Optional, Set
from typing_extensions import Self

class ShipmentItem(BaseModel):
    """
    The shipment item information required by a seller to issue a shipment invoice.
    """ # noqa: E501
    asin: Optional[StrictStr] = Field(default=None, description="The Amazon Standard Identification Number (ASIN) of the item.", alias="ASIN")
    seller_sku: Optional[StrictStr] = Field(default=None, description="The seller SKU of the item.", alias="SellerSKU")
    order_item_id: Optional[StrictStr] = Field(default=None, description="The Amazon-defined identifier for the order item.", alias="OrderItemId")
    title: Optional[StrictStr] = Field(default=None, description="The name of the item.", alias="Title")
    quantity_ordered: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of items ordered.", alias="QuantityOrdered")
    item_price: Optional[Money] = Field(default=None, alias="ItemPrice")
    shipping_price: Optional[Money] = Field(default=None, alias="ShippingPrice")
    gift_wrap_price: Optional[Money] = Field(default=None, alias="GiftWrapPrice")
    shipping_discount: Optional[Money] = Field(default=None, alias="ShippingDiscount")
    promotion_discount: Optional[Money] = Field(default=None, alias="PromotionDiscount")
    serial_numbers: Optional[List[StrictStr]] = Field(default=None, description="The list of serial numbers.", alias="SerialNumbers")
    __properties: ClassVar[List[str]] = ["ASIN", "SellerSKU", "OrderItemId", "Title", "QuantityOrdered", "ItemPrice", "ShippingPrice", "GiftWrapPrice", "ShippingDiscount", "PromotionDiscount", "SerialNumbers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShipmentItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of item_price
        if self.item_price:
            _dict['ItemPrice'] = self.item_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_price
        if self.shipping_price:
            _dict['ShippingPrice'] = self.shipping_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gift_wrap_price
        if self.gift_wrap_price:
            _dict['GiftWrapPrice'] = self.gift_wrap_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_discount
        if self.shipping_discount:
            _dict['ShippingDiscount'] = self.shipping_discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promotion_discount
        if self.promotion_discount:
            _dict['PromotionDiscount'] = self.promotion_discount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShipmentItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ASIN": obj.get("ASIN"),
            "SellerSKU": obj.get("SellerSKU"),
            "OrderItemId": obj.get("OrderItemId"),
            "Title": obj.get("Title"),
            "QuantityOrdered": obj.get("QuantityOrdered"),
            "ItemPrice": Money.from_dict(obj["ItemPrice"]) if obj.get("ItemPrice") is not None else None,
            "ShippingPrice": Money.from_dict(obj["ShippingPrice"]) if obj.get("ShippingPrice") is not None else None,
            "GiftWrapPrice": Money.from_dict(obj["GiftWrapPrice"]) if obj.get("GiftWrapPrice") is not None else None,
            "ShippingDiscount": Money.from_dict(obj["ShippingDiscount"]) if obj.get("ShippingDiscount") is not None else None,
            "PromotionDiscount": Money.from_dict(obj["PromotionDiscount"]) if obj.get("PromotionDiscount") is not None else None,
            "SerialNumbers": obj.get("SerialNumbers")
        })
        return _obj


