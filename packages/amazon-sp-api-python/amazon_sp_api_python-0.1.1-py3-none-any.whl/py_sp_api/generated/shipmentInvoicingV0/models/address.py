# coding: utf-8

"""
    Selling Partner API for Shipment Invoicing

    The Selling Partner API for Shipment Invoicing helps you programmatically retrieve shipment invoice information in the Brazil marketplace for a selling partnerâ€™s Fulfillment by Amazon (FBA) orders.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.shipmentInvoicingV0.models.address_type_enum import AddressTypeEnum
from typing import Optional, Set
from typing_extensions import Self

class Address(BaseModel):
    """
    The shipping address details of the shipment.
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name.", alias="Name")
    address_line1: Optional[StrictStr] = Field(default=None, description="The street address.", alias="AddressLine1")
    address_line2: Optional[StrictStr] = Field(default=None, description="Additional street address information, if required.", alias="AddressLine2")
    address_line3: Optional[StrictStr] = Field(default=None, description="Additional street address information, if required.", alias="AddressLine3")
    city: Optional[StrictStr] = Field(default=None, description="The city.", alias="City")
    county: Optional[StrictStr] = Field(default=None, description="The county.", alias="County")
    district: Optional[StrictStr] = Field(default=None, description="The district.", alias="District")
    state_or_region: Optional[StrictStr] = Field(default=None, description="The state or region.", alias="StateOrRegion")
    postal_code: Optional[StrictStr] = Field(default=None, description="The postal code.", alias="PostalCode")
    country_code: Optional[StrictStr] = Field(default=None, description="The country code.", alias="CountryCode")
    phone: Optional[StrictStr] = Field(default=None, description="The phone number.", alias="Phone")
    address_type: Optional[AddressTypeEnum] = Field(default=None, alias="AddressType")
    __properties: ClassVar[List[str]] = ["Name", "AddressLine1", "AddressLine2", "AddressLine3", "City", "County", "District", "StateOrRegion", "PostalCode", "CountryCode", "Phone", "AddressType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Address from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Name": obj.get("Name"),
            "AddressLine1": obj.get("AddressLine1"),
            "AddressLine2": obj.get("AddressLine2"),
            "AddressLine3": obj.get("AddressLine3"),
            "City": obj.get("City"),
            "County": obj.get("County"),
            "District": obj.get("District"),
            "StateOrRegion": obj.get("StateOrRegion"),
            "PostalCode": obj.get("PostalCode"),
            "CountryCode": obj.get("CountryCode"),
            "Phone": obj.get("Phone"),
            "AddressType": obj.get("AddressType")
        })
        return _obj


