# coding: utf-8

"""
    Selling Partner API for Listings Items

    The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).

    The version of the OpenAPI document: 2021-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.listingsItems_2021_08_01.models.fulfillment_availability import FulfillmentAvailability
from py_sp_api.generated.listingsItems_2021_08_01.models.issue import Issue
from py_sp_api.generated.listingsItems_2021_08_01.models.item_offer_by_marketplace import ItemOfferByMarketplace
from py_sp_api.generated.listingsItems_2021_08_01.models.item_procurement import ItemProcurement
from py_sp_api.generated.listingsItems_2021_08_01.models.item_product_type_by_marketplace import ItemProductTypeByMarketplace
from py_sp_api.generated.listingsItems_2021_08_01.models.item_relationships_by_marketplace import ItemRelationshipsByMarketplace
from py_sp_api.generated.listingsItems_2021_08_01.models.item_summary_by_marketplace import ItemSummaryByMarketplace
from typing import Optional, Set
from typing_extensions import Self

class Item(BaseModel):
    """
    A listings item.
    """ # noqa: E501
    sku: StrictStr = Field(description="A selling partner provided identifier for an Amazon listing.")
    summaries: Optional[List[ItemSummaryByMarketplace]] = Field(default=None, description="Summary details of a listings item.")
    attributes: Optional[Dict[str, Any]] = Field(default=None, description="A JSON object containing structured listings item attribute data keyed by attribute name.")
    issues: Optional[List[Issue]] = Field(default=None, description="The issues associated with the listings item.")
    offers: Optional[List[ItemOfferByMarketplace]] = Field(default=None, description="Offer details for the listings item.")
    fulfillment_availability: Optional[List[FulfillmentAvailability]] = Field(default=None, description="The fulfillment availability for the listings item.", alias="fulfillmentAvailability")
    procurement: Optional[List[ItemProcurement]] = Field(default=None, description="The vendor procurement information for the listings item.")
    relationships: Optional[List[ItemRelationshipsByMarketplace]] = Field(default=None, description="Relationships for a listing item, by marketplace (for example, variations).")
    product_types: Optional[List[ItemProductTypeByMarketplace]] = Field(default=None, description="Product types for a listing item, by marketplace.", alias="productTypes")
    __properties: ClassVar[List[str]] = ["sku", "summaries", "attributes", "issues", "offers", "fulfillmentAvailability", "procurement", "relationships", "productTypes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Item from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in summaries (list)
        _items = []
        if self.summaries:
            for _item_summaries in self.summaries:
                if _item_summaries:
                    _items.append(_item_summaries.to_dict())
            _dict['summaries'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in issues (list)
        _items = []
        if self.issues:
            for _item_issues in self.issues:
                if _item_issues:
                    _items.append(_item_issues.to_dict())
            _dict['issues'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in offers (list)
        _items = []
        if self.offers:
            for _item_offers in self.offers:
                if _item_offers:
                    _items.append(_item_offers.to_dict())
            _dict['offers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fulfillment_availability (list)
        _items = []
        if self.fulfillment_availability:
            for _item_fulfillment_availability in self.fulfillment_availability:
                if _item_fulfillment_availability:
                    _items.append(_item_fulfillment_availability.to_dict())
            _dict['fulfillmentAvailability'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in procurement (list)
        _items = []
        if self.procurement:
            for _item_procurement in self.procurement:
                if _item_procurement:
                    _items.append(_item_procurement.to_dict())
            _dict['procurement'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in relationships (list)
        _items = []
        if self.relationships:
            for _item_relationships in self.relationships:
                if _item_relationships:
                    _items.append(_item_relationships.to_dict())
            _dict['relationships'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in product_types (list)
        _items = []
        if self.product_types:
            for _item_product_types in self.product_types:
                if _item_product_types:
                    _items.append(_item_product_types.to_dict())
            _dict['productTypes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Item from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sku": obj.get("sku"),
            "summaries": [ItemSummaryByMarketplace.from_dict(_item) for _item in obj["summaries"]] if obj.get("summaries") is not None else None,
            "attributes": obj.get("attributes"),
            "issues": [Issue.from_dict(_item) for _item in obj["issues"]] if obj.get("issues") is not None else None,
            "offers": [ItemOfferByMarketplace.from_dict(_item) for _item in obj["offers"]] if obj.get("offers") is not None else None,
            "fulfillmentAvailability": [FulfillmentAvailability.from_dict(_item) for _item in obj["fulfillmentAvailability"]] if obj.get("fulfillmentAvailability") is not None else None,
            "procurement": [ItemProcurement.from_dict(_item) for _item in obj["procurement"]] if obj.get("procurement") is not None else None,
            "relationships": [ItemRelationshipsByMarketplace.from_dict(_item) for _item in obj["relationships"]] if obj.get("relationships") is not None else None,
            "productTypes": [ItemProductTypeByMarketplace.from_dict(_item) for _item in obj["productTypes"]] if obj.get("productTypes") is not None else None
        })
        return _obj


