# coding: utf-8

"""
    Selling Partner API for Listings Items

    The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).

    The version of the OpenAPI document: 2021-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.listingsItems_2021_08_01.models.item import Item
from py_sp_api.generated.listingsItems_2021_08_01.models.item_search_results import ItemSearchResults
from py_sp_api.generated.listingsItems_2021_08_01.models.listings_item_patch_request import ListingsItemPatchRequest
from py_sp_api.generated.listingsItems_2021_08_01.models.listings_item_put_request import ListingsItemPutRequest
from py_sp_api.generated.listingsItems_2021_08_01.models.listings_item_submission_response import ListingsItemSubmissionResponse

from py_sp_api.generated.listingsItems_2021_08_01.api_client import ApiClient, RequestSerialized
from py_sp_api.generated.listingsItems_2021_08_01.api_response import ApiResponse
from py_sp_api.generated.listingsItems_2021_08_01.rest import RESTResponseType


class ListingsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_listings_item(
        self,
        seller_id: Annotated[StrictStr, Field(description="A selling partner identifier, such as a merchant account or vendor code.")],
        sku: Annotated[StrictStr, Field(description="A selling partner provided identifier for an Amazon listing.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        issue_locale: Annotated[Optional[StrictStr], Field(description="A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListingsItemSubmissionResponse:
        """delete_listings_item

        Delete a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param seller_id: A selling partner identifier, such as a merchant account or vendor code. (required)
        :type seller_id: str
        :param sku: A selling partner provided identifier for an Amazon listing. (required)
        :type sku: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param issue_locale: A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.
        :type issue_locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_listings_item_serialize(
            seller_id=seller_id,
            sku=sku,
            marketplace_ids=marketplace_ids,
            issue_locale=issue_locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingsItemSubmissionResponse",
            '400': "ErrorList",
            '403': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_listings_item_with_http_info(
        self,
        seller_id: Annotated[StrictStr, Field(description="A selling partner identifier, such as a merchant account or vendor code.")],
        sku: Annotated[StrictStr, Field(description="A selling partner provided identifier for an Amazon listing.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        issue_locale: Annotated[Optional[StrictStr], Field(description="A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListingsItemSubmissionResponse]:
        """delete_listings_item

        Delete a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param seller_id: A selling partner identifier, such as a merchant account or vendor code. (required)
        :type seller_id: str
        :param sku: A selling partner provided identifier for an Amazon listing. (required)
        :type sku: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param issue_locale: A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.
        :type issue_locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_listings_item_serialize(
            seller_id=seller_id,
            sku=sku,
            marketplace_ids=marketplace_ids,
            issue_locale=issue_locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingsItemSubmissionResponse",
            '400': "ErrorList",
            '403': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_listings_item_without_preload_content(
        self,
        seller_id: Annotated[StrictStr, Field(description="A selling partner identifier, such as a merchant account or vendor code.")],
        sku: Annotated[StrictStr, Field(description="A selling partner provided identifier for an Amazon listing.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        issue_locale: Annotated[Optional[StrictStr], Field(description="A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_listings_item

        Delete a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param seller_id: A selling partner identifier, such as a merchant account or vendor code. (required)
        :type seller_id: str
        :param sku: A selling partner provided identifier for an Amazon listing. (required)
        :type sku: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param issue_locale: A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.
        :type issue_locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_listings_item_serialize(
            seller_id=seller_id,
            sku=sku,
            marketplace_ids=marketplace_ids,
            issue_locale=issue_locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingsItemSubmissionResponse",
            '400': "ErrorList",
            '403': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_listings_item_serialize(
        self,
        seller_id,
        sku,
        marketplace_ids,
        issue_locale,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if seller_id is not None:
            _path_params['sellerId'] = seller_id
        if sku is not None:
            _path_params['sku'] = sku
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        if issue_locale is not None:
            
            _query_params.append(('issueLocale', issue_locale))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/listings/2021-08-01/items/{sellerId}/{sku}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_listings_item(
        self,
        seller_id: Annotated[StrictStr, Field(description="A selling partner identifier, such as a merchant account or vendor code.")],
        sku: Annotated[StrictStr, Field(description="A selling partner provided identifier for an Amazon listing.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        issue_locale: Annotated[Optional[StrictStr], Field(description="A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.")] = None,
        included_data: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of data sets to include in the response. Default: `summaries`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Item:
        """get_listings_item

        Returns details about a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param seller_id: A selling partner identifier, such as a merchant account or vendor code. (required)
        :type seller_id: str
        :param sku: A selling partner provided identifier for an Amazon listing. (required)
        :type sku: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param issue_locale: A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.
        :type issue_locale: str
        :param included_data: A comma-delimited list of data sets to include in the response. Default: `summaries`.
        :type included_data: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_item_serialize(
            seller_id=seller_id,
            sku=sku,
            marketplace_ids=marketplace_ids,
            issue_locale=issue_locale,
            included_data=included_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Item",
            '400': "ErrorList",
            '403': "ErrorList",
            '404': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_listings_item_with_http_info(
        self,
        seller_id: Annotated[StrictStr, Field(description="A selling partner identifier, such as a merchant account or vendor code.")],
        sku: Annotated[StrictStr, Field(description="A selling partner provided identifier for an Amazon listing.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        issue_locale: Annotated[Optional[StrictStr], Field(description="A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.")] = None,
        included_data: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of data sets to include in the response. Default: `summaries`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Item]:
        """get_listings_item

        Returns details about a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param seller_id: A selling partner identifier, such as a merchant account or vendor code. (required)
        :type seller_id: str
        :param sku: A selling partner provided identifier for an Amazon listing. (required)
        :type sku: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param issue_locale: A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.
        :type issue_locale: str
        :param included_data: A comma-delimited list of data sets to include in the response. Default: `summaries`.
        :type included_data: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_item_serialize(
            seller_id=seller_id,
            sku=sku,
            marketplace_ids=marketplace_ids,
            issue_locale=issue_locale,
            included_data=included_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Item",
            '400': "ErrorList",
            '403': "ErrorList",
            '404': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_listings_item_without_preload_content(
        self,
        seller_id: Annotated[StrictStr, Field(description="A selling partner identifier, such as a merchant account or vendor code.")],
        sku: Annotated[StrictStr, Field(description="A selling partner provided identifier for an Amazon listing.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        issue_locale: Annotated[Optional[StrictStr], Field(description="A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.")] = None,
        included_data: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of data sets to include in the response. Default: `summaries`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_listings_item

        Returns details about a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param seller_id: A selling partner identifier, such as a merchant account or vendor code. (required)
        :type seller_id: str
        :param sku: A selling partner provided identifier for an Amazon listing. (required)
        :type sku: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param issue_locale: A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.
        :type issue_locale: str
        :param included_data: A comma-delimited list of data sets to include in the response. Default: `summaries`.
        :type included_data: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_item_serialize(
            seller_id=seller_id,
            sku=sku,
            marketplace_ids=marketplace_ids,
            issue_locale=issue_locale,
            included_data=included_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Item",
            '400': "ErrorList",
            '403': "ErrorList",
            '404': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_listings_item_serialize(
        self,
        seller_id,
        sku,
        marketplace_ids,
        issue_locale,
        included_data,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
            'includedData': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if seller_id is not None:
            _path_params['sellerId'] = seller_id
        if sku is not None:
            _path_params['sku'] = sku
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        if issue_locale is not None:
            
            _query_params.append(('issueLocale', issue_locale))
            
        if included_data is not None:
            
            _query_params.append(('includedData', included_data))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/listings/2021-08-01/items/{sellerId}/{sku}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def patch_listings_item(
        self,
        seller_id: Annotated[StrictStr, Field(description="A selling partner identifier, such as a merchant account or vendor code.")],
        sku: Annotated[StrictStr, Field(description="A selling partner provided identifier for an Amazon listing.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        body: Annotated[ListingsItemPatchRequest, Field(description="The request body schema for the `patchListingsItem` operation.")],
        included_data: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of data sets to include in the response. Default: `issues`.")] = None,
        mode: Annotated[Optional[StrictStr], Field(description="The mode of operation for the request.")] = None,
        issue_locale: Annotated[Optional[StrictStr], Field(description="A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListingsItemSubmissionResponse:
        """patch_listings_item

        Partially update (patch) a listings item for a selling partner. Only top-level listings item attributes can be patched. Patching nested attributes is not supported.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput can receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.

        :param seller_id: A selling partner identifier, such as a merchant account or vendor code. (required)
        :type seller_id: str
        :param sku: A selling partner provided identifier for an Amazon listing. (required)
        :type sku: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param body: The request body schema for the `patchListingsItem` operation. (required)
        :type body: ListingsItemPatchRequest
        :param included_data: A comma-delimited list of data sets to include in the response. Default: `issues`.
        :type included_data: List[str]
        :param mode: The mode of operation for the request.
        :type mode: str
        :param issue_locale: A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.
        :type issue_locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_listings_item_serialize(
            seller_id=seller_id,
            sku=sku,
            marketplace_ids=marketplace_ids,
            body=body,
            included_data=included_data,
            mode=mode,
            issue_locale=issue_locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingsItemSubmissionResponse",
            '400': "ErrorList",
            '403': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def patch_listings_item_with_http_info(
        self,
        seller_id: Annotated[StrictStr, Field(description="A selling partner identifier, such as a merchant account or vendor code.")],
        sku: Annotated[StrictStr, Field(description="A selling partner provided identifier for an Amazon listing.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        body: Annotated[ListingsItemPatchRequest, Field(description="The request body schema for the `patchListingsItem` operation.")],
        included_data: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of data sets to include in the response. Default: `issues`.")] = None,
        mode: Annotated[Optional[StrictStr], Field(description="The mode of operation for the request.")] = None,
        issue_locale: Annotated[Optional[StrictStr], Field(description="A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListingsItemSubmissionResponse]:
        """patch_listings_item

        Partially update (patch) a listings item for a selling partner. Only top-level listings item attributes can be patched. Patching nested attributes is not supported.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput can receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.

        :param seller_id: A selling partner identifier, such as a merchant account or vendor code. (required)
        :type seller_id: str
        :param sku: A selling partner provided identifier for an Amazon listing. (required)
        :type sku: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param body: The request body schema for the `patchListingsItem` operation. (required)
        :type body: ListingsItemPatchRequest
        :param included_data: A comma-delimited list of data sets to include in the response. Default: `issues`.
        :type included_data: List[str]
        :param mode: The mode of operation for the request.
        :type mode: str
        :param issue_locale: A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.
        :type issue_locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_listings_item_serialize(
            seller_id=seller_id,
            sku=sku,
            marketplace_ids=marketplace_ids,
            body=body,
            included_data=included_data,
            mode=mode,
            issue_locale=issue_locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingsItemSubmissionResponse",
            '400': "ErrorList",
            '403': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def patch_listings_item_without_preload_content(
        self,
        seller_id: Annotated[StrictStr, Field(description="A selling partner identifier, such as a merchant account or vendor code.")],
        sku: Annotated[StrictStr, Field(description="A selling partner provided identifier for an Amazon listing.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        body: Annotated[ListingsItemPatchRequest, Field(description="The request body schema for the `patchListingsItem` operation.")],
        included_data: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of data sets to include in the response. Default: `issues`.")] = None,
        mode: Annotated[Optional[StrictStr], Field(description="The mode of operation for the request.")] = None,
        issue_locale: Annotated[Optional[StrictStr], Field(description="A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """patch_listings_item

        Partially update (patch) a listings item for a selling partner. Only top-level listings item attributes can be patched. Patching nested attributes is not supported.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput can receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.

        :param seller_id: A selling partner identifier, such as a merchant account or vendor code. (required)
        :type seller_id: str
        :param sku: A selling partner provided identifier for an Amazon listing. (required)
        :type sku: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param body: The request body schema for the `patchListingsItem` operation. (required)
        :type body: ListingsItemPatchRequest
        :param included_data: A comma-delimited list of data sets to include in the response. Default: `issues`.
        :type included_data: List[str]
        :param mode: The mode of operation for the request.
        :type mode: str
        :param issue_locale: A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.
        :type issue_locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_listings_item_serialize(
            seller_id=seller_id,
            sku=sku,
            marketplace_ids=marketplace_ids,
            body=body,
            included_data=included_data,
            mode=mode,
            issue_locale=issue_locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingsItemSubmissionResponse",
            '400': "ErrorList",
            '403': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _patch_listings_item_serialize(
        self,
        seller_id,
        sku,
        marketplace_ids,
        body,
        included_data,
        mode,
        issue_locale,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
            'includedData': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if seller_id is not None:
            _path_params['sellerId'] = seller_id
        if sku is not None:
            _path_params['sku'] = sku
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        if included_data is not None:
            
            _query_params.append(('includedData', included_data))
            
        if mode is not None:
            
            _query_params.append(('mode', mode))
            
        if issue_locale is not None:
            
            _query_params.append(('issueLocale', issue_locale))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/listings/2021-08-01/items/{sellerId}/{sku}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_listings_item(
        self,
        seller_id: Annotated[StrictStr, Field(description="A selling partner identifier, such as a merchant account or vendor code.")],
        sku: Annotated[StrictStr, Field(description="A selling partner provided identifier for an Amazon listing.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        body: Annotated[ListingsItemPutRequest, Field(description="The request body schema for the `putListingsItem` operation.")],
        included_data: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of data sets to include in the response. Default: `issues`.")] = None,
        mode: Annotated[Optional[StrictStr], Field(description="The mode of operation for the request.")] = None,
        issue_locale: Annotated[Optional[StrictStr], Field(description="A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListingsItemSubmissionResponse:
        """put_listings_item

        Creates or fully updates an existing listings item for a selling partner.  **Note:** This operation has a throttling rate of one request per second when `mode` is `VALIDATION_PREVIEW`.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param seller_id: A selling partner identifier, such as a merchant account or vendor code. (required)
        :type seller_id: str
        :param sku: A selling partner provided identifier for an Amazon listing. (required)
        :type sku: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param body: The request body schema for the `putListingsItem` operation. (required)
        :type body: ListingsItemPutRequest
        :param included_data: A comma-delimited list of data sets to include in the response. Default: `issues`.
        :type included_data: List[str]
        :param mode: The mode of operation for the request.
        :type mode: str
        :param issue_locale: A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.
        :type issue_locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_listings_item_serialize(
            seller_id=seller_id,
            sku=sku,
            marketplace_ids=marketplace_ids,
            body=body,
            included_data=included_data,
            mode=mode,
            issue_locale=issue_locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingsItemSubmissionResponse",
            '400': "ErrorList",
            '403': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_listings_item_with_http_info(
        self,
        seller_id: Annotated[StrictStr, Field(description="A selling partner identifier, such as a merchant account or vendor code.")],
        sku: Annotated[StrictStr, Field(description="A selling partner provided identifier for an Amazon listing.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        body: Annotated[ListingsItemPutRequest, Field(description="The request body schema for the `putListingsItem` operation.")],
        included_data: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of data sets to include in the response. Default: `issues`.")] = None,
        mode: Annotated[Optional[StrictStr], Field(description="The mode of operation for the request.")] = None,
        issue_locale: Annotated[Optional[StrictStr], Field(description="A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListingsItemSubmissionResponse]:
        """put_listings_item

        Creates or fully updates an existing listings item for a selling partner.  **Note:** This operation has a throttling rate of one request per second when `mode` is `VALIDATION_PREVIEW`.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param seller_id: A selling partner identifier, such as a merchant account or vendor code. (required)
        :type seller_id: str
        :param sku: A selling partner provided identifier for an Amazon listing. (required)
        :type sku: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param body: The request body schema for the `putListingsItem` operation. (required)
        :type body: ListingsItemPutRequest
        :param included_data: A comma-delimited list of data sets to include in the response. Default: `issues`.
        :type included_data: List[str]
        :param mode: The mode of operation for the request.
        :type mode: str
        :param issue_locale: A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.
        :type issue_locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_listings_item_serialize(
            seller_id=seller_id,
            sku=sku,
            marketplace_ids=marketplace_ids,
            body=body,
            included_data=included_data,
            mode=mode,
            issue_locale=issue_locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingsItemSubmissionResponse",
            '400': "ErrorList",
            '403': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_listings_item_without_preload_content(
        self,
        seller_id: Annotated[StrictStr, Field(description="A selling partner identifier, such as a merchant account or vendor code.")],
        sku: Annotated[StrictStr, Field(description="A selling partner provided identifier for an Amazon listing.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        body: Annotated[ListingsItemPutRequest, Field(description="The request body schema for the `putListingsItem` operation.")],
        included_data: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of data sets to include in the response. Default: `issues`.")] = None,
        mode: Annotated[Optional[StrictStr], Field(description="The mode of operation for the request.")] = None,
        issue_locale: Annotated[Optional[StrictStr], Field(description="A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """put_listings_item

        Creates or fully updates an existing listings item for a selling partner.  **Note:** This operation has a throttling rate of one request per second when `mode` is `VALIDATION_PREVIEW`.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param seller_id: A selling partner identifier, such as a merchant account or vendor code. (required)
        :type seller_id: str
        :param sku: A selling partner provided identifier for an Amazon listing. (required)
        :type sku: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param body: The request body schema for the `putListingsItem` operation. (required)
        :type body: ListingsItemPutRequest
        :param included_data: A comma-delimited list of data sets to include in the response. Default: `issues`.
        :type included_data: List[str]
        :param mode: The mode of operation for the request.
        :type mode: str
        :param issue_locale: A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.
        :type issue_locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_listings_item_serialize(
            seller_id=seller_id,
            sku=sku,
            marketplace_ids=marketplace_ids,
            body=body,
            included_data=included_data,
            mode=mode,
            issue_locale=issue_locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingsItemSubmissionResponse",
            '400': "ErrorList",
            '403': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_listings_item_serialize(
        self,
        seller_id,
        sku,
        marketplace_ids,
        body,
        included_data,
        mode,
        issue_locale,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
            'includedData': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if seller_id is not None:
            _path_params['sellerId'] = seller_id
        if sku is not None:
            _path_params['sku'] = sku
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        if included_data is not None:
            
            _query_params.append(('includedData', included_data))
            
        if mode is not None:
            
            _query_params.append(('mode', mode))
            
        if issue_locale is not None:
            
            _query_params.append(('issueLocale', issue_locale))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/listings/2021-08-01/items/{sellerId}/{sku}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_listings_items(
        self,
        seller_id: Annotated[StrictStr, Field(description="A selling partner identifier, such as a merchant account or vendor code.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        issue_locale: Annotated[Optional[StrictStr], Field(description="A locale that is used to localize issues. When not provided, the default language code of the first marketplace is used. Examples: \"en_US\", \"fr_CA\", \"fr_FR\". When a localization is not available in the specified locale, localized messages default to \"en_US\".")] = None,
        included_data: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of datasets that you want to include in the response. Default: `summaries`.")] = None,
        identifiers: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="A comma-delimited list of product identifiers that you can use to search for listings items.   **Note**:  1. This is required when you specify `identifiersType`. 2. You cannot use 'identifiers' if you specify `variationParentSku` or `packageHierarchySku`.")] = None,
        identifiers_type: Annotated[Optional[StrictStr], Field(description="A type of product identifiers that you can use to search for listings items.   **Note**:  This is required when `identifiers` is provided.")] = None,
        variation_parent_sku: Annotated[Optional[StrictStr], Field(description="Filters results to include listing items that are variation children of the specified SKU.   **Note**: You cannot use `variationParentSku` if you include `identifiers` or `packageHierarchySku` in your request.")] = None,
        package_hierarchy_sku: Annotated[Optional[StrictStr], Field(description="Filter results to include listing items that contain or are contained by the specified SKU.   **Note**: You cannot use `packageHierarchySku` if you include `identifiers` or `variationParentSku` in your request.")] = None,
        created_after: Annotated[Optional[datetime], Field(description="A date-time that is used to filter listing items. The response includes listings items that were created at or after this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.")] = None,
        created_before: Annotated[Optional[datetime], Field(description="A date-time that is used to filter listing items. The response includes listings items that were created at or before this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.")] = None,
        last_updated_after: Annotated[Optional[datetime], Field(description="A date-time that is used to filter listing items. The response includes listings items that were last updated at or after this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.")] = None,
        last_updated_before: Annotated[Optional[datetime], Field(description="A date-time that is used to filter listing items. The response includes listings items that were last updated at or before this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.")] = None,
        with_issue_severity: Annotated[Optional[List[StrictStr]], Field(description="Filter results to include only listing items that have issues that match one or more of the specified severity levels.")] = None,
        with_status: Annotated[Optional[List[StrictStr]], Field(description="Filter results to include only listing items that have the specified status.")] = None,
        without_status: Annotated[Optional[List[StrictStr]], Field(description="Filter results to include only listing items that don't contain the specified statuses.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="An attribute by which to sort the returned listing items.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order in which to sort the result items.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=20, strict=True)]], Field(description="The number of results that you want to include on each page.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="A token that you can use to fetch a specific page when there are multiple pages of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ItemSearchResults:
        """search_listings_items

        Search for and return a list of selling partner listings items and their respective details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that are applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param seller_id: A selling partner identifier, such as a merchant account or vendor code. (required)
        :type seller_id: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param issue_locale: A locale that is used to localize issues. When not provided, the default language code of the first marketplace is used. Examples: \"en_US\", \"fr_CA\", \"fr_FR\". When a localization is not available in the specified locale, localized messages default to \"en_US\".
        :type issue_locale: str
        :param included_data: A comma-delimited list of datasets that you want to include in the response. Default: `summaries`.
        :type included_data: List[str]
        :param identifiers: A comma-delimited list of product identifiers that you can use to search for listings items.   **Note**:  1. This is required when you specify `identifiersType`. 2. You cannot use 'identifiers' if you specify `variationParentSku` or `packageHierarchySku`.
        :type identifiers: List[str]
        :param identifiers_type: A type of product identifiers that you can use to search for listings items.   **Note**:  This is required when `identifiers` is provided.
        :type identifiers_type: str
        :param variation_parent_sku: Filters results to include listing items that are variation children of the specified SKU.   **Note**: You cannot use `variationParentSku` if you include `identifiers` or `packageHierarchySku` in your request.
        :type variation_parent_sku: str
        :param package_hierarchy_sku: Filter results to include listing items that contain or are contained by the specified SKU.   **Note**: You cannot use `packageHierarchySku` if you include `identifiers` or `variationParentSku` in your request.
        :type package_hierarchy_sku: str
        :param created_after: A date-time that is used to filter listing items. The response includes listings items that were created at or after this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
        :type created_after: datetime
        :param created_before: A date-time that is used to filter listing items. The response includes listings items that were created at or before this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
        :type created_before: datetime
        :param last_updated_after: A date-time that is used to filter listing items. The response includes listings items that were last updated at or after this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
        :type last_updated_after: datetime
        :param last_updated_before: A date-time that is used to filter listing items. The response includes listings items that were last updated at or before this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
        :type last_updated_before: datetime
        :param with_issue_severity: Filter results to include only listing items that have issues that match one or more of the specified severity levels.
        :type with_issue_severity: List[str]
        :param with_status: Filter results to include only listing items that have the specified status.
        :type with_status: List[str]
        :param without_status: Filter results to include only listing items that don't contain the specified statuses.
        :type without_status: List[str]
        :param sort_by: An attribute by which to sort the returned listing items.
        :type sort_by: str
        :param sort_order: The order in which to sort the result items.
        :type sort_order: str
        :param page_size: The number of results that you want to include on each page.
        :type page_size: int
        :param page_token: A token that you can use to fetch a specific page when there are multiple pages of results.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_listings_items_serialize(
            seller_id=seller_id,
            marketplace_ids=marketplace_ids,
            issue_locale=issue_locale,
            included_data=included_data,
            identifiers=identifiers,
            identifiers_type=identifiers_type,
            variation_parent_sku=variation_parent_sku,
            package_hierarchy_sku=package_hierarchy_sku,
            created_after=created_after,
            created_before=created_before,
            last_updated_after=last_updated_after,
            last_updated_before=last_updated_before,
            with_issue_severity=with_issue_severity,
            with_status=with_status,
            without_status=without_status,
            sort_by=sort_by,
            sort_order=sort_order,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemSearchResults",
            '400': "ErrorList",
            '403': "ErrorList",
            '404': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_listings_items_with_http_info(
        self,
        seller_id: Annotated[StrictStr, Field(description="A selling partner identifier, such as a merchant account or vendor code.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        issue_locale: Annotated[Optional[StrictStr], Field(description="A locale that is used to localize issues. When not provided, the default language code of the first marketplace is used. Examples: \"en_US\", \"fr_CA\", \"fr_FR\". When a localization is not available in the specified locale, localized messages default to \"en_US\".")] = None,
        included_data: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of datasets that you want to include in the response. Default: `summaries`.")] = None,
        identifiers: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="A comma-delimited list of product identifiers that you can use to search for listings items.   **Note**:  1. This is required when you specify `identifiersType`. 2. You cannot use 'identifiers' if you specify `variationParentSku` or `packageHierarchySku`.")] = None,
        identifiers_type: Annotated[Optional[StrictStr], Field(description="A type of product identifiers that you can use to search for listings items.   **Note**:  This is required when `identifiers` is provided.")] = None,
        variation_parent_sku: Annotated[Optional[StrictStr], Field(description="Filters results to include listing items that are variation children of the specified SKU.   **Note**: You cannot use `variationParentSku` if you include `identifiers` or `packageHierarchySku` in your request.")] = None,
        package_hierarchy_sku: Annotated[Optional[StrictStr], Field(description="Filter results to include listing items that contain or are contained by the specified SKU.   **Note**: You cannot use `packageHierarchySku` if you include `identifiers` or `variationParentSku` in your request.")] = None,
        created_after: Annotated[Optional[datetime], Field(description="A date-time that is used to filter listing items. The response includes listings items that were created at or after this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.")] = None,
        created_before: Annotated[Optional[datetime], Field(description="A date-time that is used to filter listing items. The response includes listings items that were created at or before this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.")] = None,
        last_updated_after: Annotated[Optional[datetime], Field(description="A date-time that is used to filter listing items. The response includes listings items that were last updated at or after this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.")] = None,
        last_updated_before: Annotated[Optional[datetime], Field(description="A date-time that is used to filter listing items. The response includes listings items that were last updated at or before this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.")] = None,
        with_issue_severity: Annotated[Optional[List[StrictStr]], Field(description="Filter results to include only listing items that have issues that match one or more of the specified severity levels.")] = None,
        with_status: Annotated[Optional[List[StrictStr]], Field(description="Filter results to include only listing items that have the specified status.")] = None,
        without_status: Annotated[Optional[List[StrictStr]], Field(description="Filter results to include only listing items that don't contain the specified statuses.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="An attribute by which to sort the returned listing items.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order in which to sort the result items.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=20, strict=True)]], Field(description="The number of results that you want to include on each page.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="A token that you can use to fetch a specific page when there are multiple pages of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ItemSearchResults]:
        """search_listings_items

        Search for and return a list of selling partner listings items and their respective details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that are applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param seller_id: A selling partner identifier, such as a merchant account or vendor code. (required)
        :type seller_id: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param issue_locale: A locale that is used to localize issues. When not provided, the default language code of the first marketplace is used. Examples: \"en_US\", \"fr_CA\", \"fr_FR\". When a localization is not available in the specified locale, localized messages default to \"en_US\".
        :type issue_locale: str
        :param included_data: A comma-delimited list of datasets that you want to include in the response. Default: `summaries`.
        :type included_data: List[str]
        :param identifiers: A comma-delimited list of product identifiers that you can use to search for listings items.   **Note**:  1. This is required when you specify `identifiersType`. 2. You cannot use 'identifiers' if you specify `variationParentSku` or `packageHierarchySku`.
        :type identifiers: List[str]
        :param identifiers_type: A type of product identifiers that you can use to search for listings items.   **Note**:  This is required when `identifiers` is provided.
        :type identifiers_type: str
        :param variation_parent_sku: Filters results to include listing items that are variation children of the specified SKU.   **Note**: You cannot use `variationParentSku` if you include `identifiers` or `packageHierarchySku` in your request.
        :type variation_parent_sku: str
        :param package_hierarchy_sku: Filter results to include listing items that contain or are contained by the specified SKU.   **Note**: You cannot use `packageHierarchySku` if you include `identifiers` or `variationParentSku` in your request.
        :type package_hierarchy_sku: str
        :param created_after: A date-time that is used to filter listing items. The response includes listings items that were created at or after this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
        :type created_after: datetime
        :param created_before: A date-time that is used to filter listing items. The response includes listings items that were created at or before this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
        :type created_before: datetime
        :param last_updated_after: A date-time that is used to filter listing items. The response includes listings items that were last updated at or after this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
        :type last_updated_after: datetime
        :param last_updated_before: A date-time that is used to filter listing items. The response includes listings items that were last updated at or before this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
        :type last_updated_before: datetime
        :param with_issue_severity: Filter results to include only listing items that have issues that match one or more of the specified severity levels.
        :type with_issue_severity: List[str]
        :param with_status: Filter results to include only listing items that have the specified status.
        :type with_status: List[str]
        :param without_status: Filter results to include only listing items that don't contain the specified statuses.
        :type without_status: List[str]
        :param sort_by: An attribute by which to sort the returned listing items.
        :type sort_by: str
        :param sort_order: The order in which to sort the result items.
        :type sort_order: str
        :param page_size: The number of results that you want to include on each page.
        :type page_size: int
        :param page_token: A token that you can use to fetch a specific page when there are multiple pages of results.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_listings_items_serialize(
            seller_id=seller_id,
            marketplace_ids=marketplace_ids,
            issue_locale=issue_locale,
            included_data=included_data,
            identifiers=identifiers,
            identifiers_type=identifiers_type,
            variation_parent_sku=variation_parent_sku,
            package_hierarchy_sku=package_hierarchy_sku,
            created_after=created_after,
            created_before=created_before,
            last_updated_after=last_updated_after,
            last_updated_before=last_updated_before,
            with_issue_severity=with_issue_severity,
            with_status=with_status,
            without_status=without_status,
            sort_by=sort_by,
            sort_order=sort_order,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemSearchResults",
            '400': "ErrorList",
            '403': "ErrorList",
            '404': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_listings_items_without_preload_content(
        self,
        seller_id: Annotated[StrictStr, Field(description="A selling partner identifier, such as a merchant account or vendor code.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        issue_locale: Annotated[Optional[StrictStr], Field(description="A locale that is used to localize issues. When not provided, the default language code of the first marketplace is used. Examples: \"en_US\", \"fr_CA\", \"fr_FR\". When a localization is not available in the specified locale, localized messages default to \"en_US\".")] = None,
        included_data: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of datasets that you want to include in the response. Default: `summaries`.")] = None,
        identifiers: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="A comma-delimited list of product identifiers that you can use to search for listings items.   **Note**:  1. This is required when you specify `identifiersType`. 2. You cannot use 'identifiers' if you specify `variationParentSku` or `packageHierarchySku`.")] = None,
        identifiers_type: Annotated[Optional[StrictStr], Field(description="A type of product identifiers that you can use to search for listings items.   **Note**:  This is required when `identifiers` is provided.")] = None,
        variation_parent_sku: Annotated[Optional[StrictStr], Field(description="Filters results to include listing items that are variation children of the specified SKU.   **Note**: You cannot use `variationParentSku` if you include `identifiers` or `packageHierarchySku` in your request.")] = None,
        package_hierarchy_sku: Annotated[Optional[StrictStr], Field(description="Filter results to include listing items that contain or are contained by the specified SKU.   **Note**: You cannot use `packageHierarchySku` if you include `identifiers` or `variationParentSku` in your request.")] = None,
        created_after: Annotated[Optional[datetime], Field(description="A date-time that is used to filter listing items. The response includes listings items that were created at or after this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.")] = None,
        created_before: Annotated[Optional[datetime], Field(description="A date-time that is used to filter listing items. The response includes listings items that were created at or before this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.")] = None,
        last_updated_after: Annotated[Optional[datetime], Field(description="A date-time that is used to filter listing items. The response includes listings items that were last updated at or after this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.")] = None,
        last_updated_before: Annotated[Optional[datetime], Field(description="A date-time that is used to filter listing items. The response includes listings items that were last updated at or before this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.")] = None,
        with_issue_severity: Annotated[Optional[List[StrictStr]], Field(description="Filter results to include only listing items that have issues that match one or more of the specified severity levels.")] = None,
        with_status: Annotated[Optional[List[StrictStr]], Field(description="Filter results to include only listing items that have the specified status.")] = None,
        without_status: Annotated[Optional[List[StrictStr]], Field(description="Filter results to include only listing items that don't contain the specified statuses.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="An attribute by which to sort the returned listing items.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order in which to sort the result items.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=20, strict=True)]], Field(description="The number of results that you want to include on each page.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="A token that you can use to fetch a specific page when there are multiple pages of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """search_listings_items

        Search for and return a list of selling partner listings items and their respective details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that are applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param seller_id: A selling partner identifier, such as a merchant account or vendor code. (required)
        :type seller_id: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param issue_locale: A locale that is used to localize issues. When not provided, the default language code of the first marketplace is used. Examples: \"en_US\", \"fr_CA\", \"fr_FR\". When a localization is not available in the specified locale, localized messages default to \"en_US\".
        :type issue_locale: str
        :param included_data: A comma-delimited list of datasets that you want to include in the response. Default: `summaries`.
        :type included_data: List[str]
        :param identifiers: A comma-delimited list of product identifiers that you can use to search for listings items.   **Note**:  1. This is required when you specify `identifiersType`. 2. You cannot use 'identifiers' if you specify `variationParentSku` or `packageHierarchySku`.
        :type identifiers: List[str]
        :param identifiers_type: A type of product identifiers that you can use to search for listings items.   **Note**:  This is required when `identifiers` is provided.
        :type identifiers_type: str
        :param variation_parent_sku: Filters results to include listing items that are variation children of the specified SKU.   **Note**: You cannot use `variationParentSku` if you include `identifiers` or `packageHierarchySku` in your request.
        :type variation_parent_sku: str
        :param package_hierarchy_sku: Filter results to include listing items that contain or are contained by the specified SKU.   **Note**: You cannot use `packageHierarchySku` if you include `identifiers` or `variationParentSku` in your request.
        :type package_hierarchy_sku: str
        :param created_after: A date-time that is used to filter listing items. The response includes listings items that were created at or after this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
        :type created_after: datetime
        :param created_before: A date-time that is used to filter listing items. The response includes listings items that were created at or before this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
        :type created_before: datetime
        :param last_updated_after: A date-time that is used to filter listing items. The response includes listings items that were last updated at or after this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
        :type last_updated_after: datetime
        :param last_updated_before: A date-time that is used to filter listing items. The response includes listings items that were last updated at or before this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
        :type last_updated_before: datetime
        :param with_issue_severity: Filter results to include only listing items that have issues that match one or more of the specified severity levels.
        :type with_issue_severity: List[str]
        :param with_status: Filter results to include only listing items that have the specified status.
        :type with_status: List[str]
        :param without_status: Filter results to include only listing items that don't contain the specified statuses.
        :type without_status: List[str]
        :param sort_by: An attribute by which to sort the returned listing items.
        :type sort_by: str
        :param sort_order: The order in which to sort the result items.
        :type sort_order: str
        :param page_size: The number of results that you want to include on each page.
        :type page_size: int
        :param page_token: A token that you can use to fetch a specific page when there are multiple pages of results.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_listings_items_serialize(
            seller_id=seller_id,
            marketplace_ids=marketplace_ids,
            issue_locale=issue_locale,
            included_data=included_data,
            identifiers=identifiers,
            identifiers_type=identifiers_type,
            variation_parent_sku=variation_parent_sku,
            package_hierarchy_sku=package_hierarchy_sku,
            created_after=created_after,
            created_before=created_before,
            last_updated_after=last_updated_after,
            last_updated_before=last_updated_before,
            with_issue_severity=with_issue_severity,
            with_status=with_status,
            without_status=without_status,
            sort_by=sort_by,
            sort_order=sort_order,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemSearchResults",
            '400': "ErrorList",
            '403': "ErrorList",
            '404': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_listings_items_serialize(
        self,
        seller_id,
        marketplace_ids,
        issue_locale,
        included_data,
        identifiers,
        identifiers_type,
        variation_parent_sku,
        package_hierarchy_sku,
        created_after,
        created_before,
        last_updated_after,
        last_updated_before,
        with_issue_severity,
        with_status,
        without_status,
        sort_by,
        sort_order,
        page_size,
        page_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
            'includedData': 'csv',
            'identifiers': 'csv',
            'withIssueSeverity': 'csv',
            'withStatus': 'csv',
            'withoutStatus': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if seller_id is not None:
            _path_params['sellerId'] = seller_id
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        if issue_locale is not None:
            
            _query_params.append(('issueLocale', issue_locale))
            
        if included_data is not None:
            
            _query_params.append(('includedData', included_data))
            
        if identifiers is not None:
            
            _query_params.append(('identifiers', identifiers))
            
        if identifiers_type is not None:
            
            _query_params.append(('identifiersType', identifiers_type))
            
        if variation_parent_sku is not None:
            
            _query_params.append(('variationParentSku', variation_parent_sku))
            
        if package_hierarchy_sku is not None:
            
            _query_params.append(('packageHierarchySku', package_hierarchy_sku))
            
        if created_after is not None:
            if isinstance(created_after, datetime):
                _query_params.append(
                    (
                        'createdAfter',
                        created_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdAfter', created_after))
            
        if created_before is not None:
            if isinstance(created_before, datetime):
                _query_params.append(
                    (
                        'createdBefore',
                        created_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdBefore', created_before))
            
        if last_updated_after is not None:
            if isinstance(last_updated_after, datetime):
                _query_params.append(
                    (
                        'lastUpdatedAfter',
                        last_updated_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('lastUpdatedAfter', last_updated_after))
            
        if last_updated_before is not None:
            if isinstance(last_updated_before, datetime):
                _query_params.append(
                    (
                        'lastUpdatedBefore',
                        last_updated_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('lastUpdatedBefore', last_updated_before))
            
        if with_issue_severity is not None:
            
            _query_params.append(('withIssueSeverity', with_issue_severity))
            
        if with_status is not None:
            
            _query_params.append(('withStatus', with_status))
            
        if without_status is not None:
            
            _query_params.append(('withoutStatus', without_status))
            
        if sort_by is not None:
            
            _query_params.append(('sortBy', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sortOrder', sort_order))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_token is not None:
            
            _query_params.append(('pageToken', page_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/listings/2021-08-01/items/{sellerId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


