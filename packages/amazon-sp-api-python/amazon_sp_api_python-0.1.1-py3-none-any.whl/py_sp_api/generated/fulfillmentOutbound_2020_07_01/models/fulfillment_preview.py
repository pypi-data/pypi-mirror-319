# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.feature_settings import FeatureSettings
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.fee import Fee
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.fulfillment_preview_shipment import FulfillmentPreviewShipment
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.scheduled_delivery_info import ScheduledDeliveryInfo
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.shipping_speed_category import ShippingSpeedCategory
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.unfulfillable_preview_item import UnfulfillablePreviewItem
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.weight import Weight
from typing import Optional, Set
from typing_extensions import Self

class FulfillmentPreview(BaseModel):
    """
    Information about a fulfillment order preview, including delivery and fee information based on shipping method.
    """ # noqa: E501
    shipping_speed_category: ShippingSpeedCategory = Field(alias="shippingSpeedCategory")
    scheduled_delivery_info: Optional[ScheduledDeliveryInfo] = Field(default=None, alias="scheduledDeliveryInfo")
    is_fulfillable: StrictBool = Field(description="When true, this fulfillment order preview is fulfillable.", alias="isFulfillable")
    is_cod_capable: StrictBool = Field(description="When true, this fulfillment order preview is for COD (Cash On Delivery).", alias="isCODCapable")
    estimated_shipping_weight: Optional[Weight] = Field(default=None, alias="estimatedShippingWeight")
    estimated_fees: Optional[List[Fee]] = Field(default=None, description="An array of fee type and cost pairs.", alias="estimatedFees")
    fulfillment_preview_shipments: Optional[List[FulfillmentPreviewShipment]] = Field(default=None, description="An array of fulfillment preview shipment information.", alias="fulfillmentPreviewShipments")
    unfulfillable_preview_items: Optional[List[UnfulfillablePreviewItem]] = Field(default=None, description="An array of unfulfillable preview item information.", alias="unfulfillablePreviewItems")
    order_unfulfillable_reasons: Optional[List[StrictStr]] = Field(default=None, description="String list", alias="orderUnfulfillableReasons")
    marketplace_id: StrictStr = Field(description="The marketplace the fulfillment order is placed against.", alias="marketplaceId")
    feature_constraints: Optional[List[FeatureSettings]] = Field(default=None, description="A list of features and their fulfillment policies to apply to the order.", alias="featureConstraints")
    __properties: ClassVar[List[str]] = ["shippingSpeedCategory", "scheduledDeliveryInfo", "isFulfillable", "isCODCapable", "estimatedShippingWeight", "estimatedFees", "fulfillmentPreviewShipments", "unfulfillablePreviewItems", "orderUnfulfillableReasons", "marketplaceId", "featureConstraints"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FulfillmentPreview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of scheduled_delivery_info
        if self.scheduled_delivery_info:
            _dict['scheduledDeliveryInfo'] = self.scheduled_delivery_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of estimated_shipping_weight
        if self.estimated_shipping_weight:
            _dict['estimatedShippingWeight'] = self.estimated_shipping_weight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in estimated_fees (list)
        _items = []
        if self.estimated_fees:
            for _item_estimated_fees in self.estimated_fees:
                if _item_estimated_fees:
                    _items.append(_item_estimated_fees.to_dict())
            _dict['estimatedFees'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fulfillment_preview_shipments (list)
        _items = []
        if self.fulfillment_preview_shipments:
            for _item_fulfillment_preview_shipments in self.fulfillment_preview_shipments:
                if _item_fulfillment_preview_shipments:
                    _items.append(_item_fulfillment_preview_shipments.to_dict())
            _dict['fulfillmentPreviewShipments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in unfulfillable_preview_items (list)
        _items = []
        if self.unfulfillable_preview_items:
            for _item_unfulfillable_preview_items in self.unfulfillable_preview_items:
                if _item_unfulfillable_preview_items:
                    _items.append(_item_unfulfillable_preview_items.to_dict())
            _dict['unfulfillablePreviewItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in feature_constraints (list)
        _items = []
        if self.feature_constraints:
            for _item_feature_constraints in self.feature_constraints:
                if _item_feature_constraints:
                    _items.append(_item_feature_constraints.to_dict())
            _dict['featureConstraints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FulfillmentPreview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "shippingSpeedCategory": obj.get("shippingSpeedCategory"),
            "scheduledDeliveryInfo": ScheduledDeliveryInfo.from_dict(obj["scheduledDeliveryInfo"]) if obj.get("scheduledDeliveryInfo") is not None else None,
            "isFulfillable": obj.get("isFulfillable"),
            "isCODCapable": obj.get("isCODCapable"),
            "estimatedShippingWeight": Weight.from_dict(obj["estimatedShippingWeight"]) if obj.get("estimatedShippingWeight") is not None else None,
            "estimatedFees": [Fee.from_dict(_item) for _item in obj["estimatedFees"]] if obj.get("estimatedFees") is not None else None,
            "fulfillmentPreviewShipments": [FulfillmentPreviewShipment.from_dict(_item) for _item in obj["fulfillmentPreviewShipments"]] if obj.get("fulfillmentPreviewShipments") is not None else None,
            "unfulfillablePreviewItems": [UnfulfillablePreviewItem.from_dict(_item) for _item in obj["unfulfillablePreviewItems"]] if obj.get("unfulfillablePreviewItems") is not None else None,
            "orderUnfulfillableReasons": obj.get("orderUnfulfillableReasons"),
            "marketplaceId": obj.get("marketplaceId"),
            "featureConstraints": [FeatureSettings.from_dict(_item) for _item in obj["featureConstraints"]] if obj.get("featureConstraints") is not None else None
        })
        return _obj


