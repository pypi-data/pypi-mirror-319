# coding: utf-8

"""
    Feeds v2021-06-30

    The Selling Partner API for Feeds lets you upload data to Amazon on behalf of a selling partner.

    The version of the OpenAPI document: 2021-06-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateFeedSpecification(BaseModel):
    """
    Information required to create the feed.
    """ # noqa: E501
    feed_type: StrictStr = Field(description="The feed type.", alias="feedType")
    marketplace_ids: Annotated[List[StrictStr], Field(min_length=1, max_length=25)] = Field(description="A list of identifiers for marketplaces that you want the feed to be applied to.", alias="marketplaceIds")
    input_feed_document_id: StrictStr = Field(description="The document identifier returned by the createFeedDocument operation. Upload the feed document contents before calling the createFeed operation.", alias="inputFeedDocumentId")
    feed_options: Optional[Dict[str, StrictStr]] = Field(default=None, description="Additional options to control the feed. These vary by feed type.", alias="feedOptions")
    __properties: ClassVar[List[str]] = ["feedType", "marketplaceIds", "inputFeedDocumentId", "feedOptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateFeedSpecification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateFeedSpecification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "feedType": obj.get("feedType"),
            "marketplaceIds": obj.get("marketplaceIds"),
            "inputFeedDocumentId": obj.get("inputFeedDocumentId"),
            "feedOptions": obj.get("feedOptions")
        })
        return _obj


