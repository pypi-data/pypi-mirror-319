# coding: utf-8

"""
    Selling Partner API for Retail Procurement Orders

    The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ImportDetails(BaseModel):
    """
    Import details for an import order.
    """ # noqa: E501
    method_of_payment: Optional[StrictStr] = Field(default=None, description="If the recipient requests, contains the shipment method of payment. This is for import PO's only.", alias="methodOfPayment")
    international_commercial_terms: Optional[StrictStr] = Field(default=None, description="Incoterms (International Commercial Terms) are used to divide transaction costs and responsibilities between buyer and seller and reflect state-of-the-art transportation practices. This is for import purchase orders only. ", alias="internationalCommercialTerms")
    port_of_delivery: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="The port where goods on an import purchase order must be delivered by the vendor. This should only be specified when the internationalCommercialTerms is FOB.", alias="portOfDelivery")
    import_containers: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="Types and numbers of container(s) for import purchase orders. Can be a comma-separated list if the shipment has multiple containers. HC signifies a high-capacity container. Free-text field, limited to 64 characters. The format will be a comma-delimited list containing values of the type: $NUMBER_OF_CONTAINERS_OF_THIS_TYPE-$CONTAINER_TYPE. The list of values for the container type is: 40'(40-foot container), 40'HC (40-foot high-capacity container), 45', 45'HC, 30', 30'HC, 20', 20'HC.", alias="importContainers")
    shipping_instructions: Optional[StrictStr] = Field(default=None, description="Special instructions regarding the shipment. This field is for import purchase orders.", alias="shippingInstructions")
    __properties: ClassVar[List[str]] = ["methodOfPayment", "internationalCommercialTerms", "portOfDelivery", "importContainers", "shippingInstructions"]

    @field_validator('method_of_payment')
    def method_of_payment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PaidByBuyer', 'CollectOnDelivery', 'DefinedByBuyerAndSeller', 'FOBPortOfCall', 'PrepaidBySeller', 'PaidBySeller']):
            raise ValueError("must be one of enum values ('PaidByBuyer', 'CollectOnDelivery', 'DefinedByBuyerAndSeller', 'FOBPortOfCall', 'PrepaidBySeller', 'PaidBySeller')")
        return value

    @field_validator('international_commercial_terms')
    def international_commercial_terms_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ExWorks', 'FreeCarrier', 'FreeOnBoard', 'FreeAlongSideShip', 'CarriagePaidTo', 'CostAndFreight', 'CarriageAndInsurancePaidTo', 'CostInsuranceAndFreight', 'DeliveredAtTerminal', 'DeliveredAtPlace', 'DeliverDutyPaid']):
            raise ValueError("must be one of enum values ('ExWorks', 'FreeCarrier', 'FreeOnBoard', 'FreeAlongSideShip', 'CarriagePaidTo', 'CostAndFreight', 'CarriageAndInsurancePaidTo', 'CostInsuranceAndFreight', 'DeliveredAtTerminal', 'DeliveredAtPlace', 'DeliverDutyPaid')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImportDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImportDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "methodOfPayment": obj.get("methodOfPayment"),
            "internationalCommercialTerms": obj.get("internationalCommercialTerms"),
            "portOfDelivery": obj.get("portOfDelivery"),
            "importContainers": obj.get("importContainers"),
            "shippingInstructions": obj.get("shippingInstructions")
        })
        return _obj


