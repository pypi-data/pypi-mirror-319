# coding: utf-8

"""
    Selling Partner API for Direct Fulfillment Orders

    The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.vendorDirectFulfillmentOrdersV1.models.address import Address
from py_sp_api.generated.vendorDirectFulfillmentOrdersV1.models.order_details_tax_total import OrderDetailsTaxTotal
from py_sp_api.generated.vendorDirectFulfillmentOrdersV1.models.order_item import OrderItem
from py_sp_api.generated.vendorDirectFulfillmentOrdersV1.models.party_identification import PartyIdentification
from py_sp_api.generated.vendorDirectFulfillmentOrdersV1.models.shipment_details import ShipmentDetails
from typing import Optional, Set
from typing_extensions import Self

class OrderDetails(BaseModel):
    """
    Details of an order.
    """ # noqa: E501
    customer_order_number: StrictStr = Field(description="The customer order number.", alias="customerOrderNumber")
    order_date: datetime = Field(description="The date the order was placed. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00. If no time zone is specified, UTC should be assumed.", alias="orderDate")
    order_status: Optional[StrictStr] = Field(default=None, description="Current status of the order.", alias="orderStatus")
    shipment_details: ShipmentDetails = Field(alias="shipmentDetails")
    tax_total: Optional[OrderDetailsTaxTotal] = Field(default=None, alias="taxTotal")
    selling_party: PartyIdentification = Field(alias="sellingParty")
    ship_from_party: PartyIdentification = Field(alias="shipFromParty")
    ship_to_party: Address = Field(alias="shipToParty")
    bill_to_party: PartyIdentification = Field(alias="billToParty")
    items: List[OrderItem] = Field(description="A list of items in this purchase order.")
    __properties: ClassVar[List[str]] = ["customerOrderNumber", "orderDate", "orderStatus", "shipmentDetails", "taxTotal", "sellingParty", "shipFromParty", "shipToParty", "billToParty", "items"]

    @field_validator('order_status')
    def order_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NEW', 'SHIPPED', 'ACCEPTED', 'CANCELLED']):
            raise ValueError("must be one of enum values ('NEW', 'SHIPPED', 'ACCEPTED', 'CANCELLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of shipment_details
        if self.shipment_details:
            _dict['shipmentDetails'] = self.shipment_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_total
        if self.tax_total:
            _dict['taxTotal'] = self.tax_total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selling_party
        if self.selling_party:
            _dict['sellingParty'] = self.selling_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_from_party
        if self.ship_from_party:
            _dict['shipFromParty'] = self.ship_from_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_party
        if self.ship_to_party:
            _dict['shipToParty'] = self.ship_to_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bill_to_party
        if self.bill_to_party:
            _dict['billToParty'] = self.bill_to_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customerOrderNumber": obj.get("customerOrderNumber"),
            "orderDate": obj.get("orderDate"),
            "orderStatus": obj.get("orderStatus"),
            "shipmentDetails": ShipmentDetails.from_dict(obj["shipmentDetails"]) if obj.get("shipmentDetails") is not None else None,
            "taxTotal": OrderDetailsTaxTotal.from_dict(obj["taxTotal"]) if obj.get("taxTotal") is not None else None,
            "sellingParty": PartyIdentification.from_dict(obj["sellingParty"]) if obj.get("sellingParty") is not None else None,
            "shipFromParty": PartyIdentification.from_dict(obj["shipFromParty"]) if obj.get("shipFromParty") is not None else None,
            "shipToParty": Address.from_dict(obj["shipToParty"]) if obj.get("shipToParty") is not None else None,
            "billToParty": PartyIdentification.from_dict(obj["billToParty"]) if obj.get("billToParty") is not None else None,
            "items": [OrderItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None
        })
        return _obj


