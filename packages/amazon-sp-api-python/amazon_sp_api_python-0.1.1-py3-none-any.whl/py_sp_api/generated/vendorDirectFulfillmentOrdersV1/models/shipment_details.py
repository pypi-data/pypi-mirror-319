# coding: utf-8

"""
    Selling Partner API for Direct Fulfillment Orders

    The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.vendorDirectFulfillmentOrdersV1.models.shipment_dates import ShipmentDates
from typing import Optional, Set
from typing_extensions import Self

class ShipmentDetails(BaseModel):
    """
    Shipment details required for the shipment.
    """ # noqa: E501
    is_priority_shipment: StrictBool = Field(description="When true, this is a priority shipment.", alias="isPriorityShipment")
    is_scheduled_delivery_shipment: Optional[StrictBool] = Field(default=None, description="When true, this order is part of a scheduled delivery program.", alias="isScheduledDeliveryShipment")
    is_pslip_required: StrictBool = Field(description="When true, a packing slip is required to be sent to the customer.", alias="isPslipRequired")
    is_gift: Optional[StrictBool] = Field(default=None, description="When true, the order contain a gift. Include the gift message and gift wrap information.", alias="isGift")
    ship_method: StrictStr = Field(description="Ship method to be used for shipping the order. Amazon defines ship method codes indicating the shipping carrier and shipment service level. To see the full list of ship methods in use, including both the code and the friendly name, search the 'Help' section on Vendor Central for 'ship methods'.", alias="shipMethod")
    shipment_dates: ShipmentDates = Field(alias="shipmentDates")
    message_to_customer: StrictStr = Field(description="Message to customer for order status.", alias="messageToCustomer")
    __properties: ClassVar[List[str]] = ["isPriorityShipment", "isScheduledDeliveryShipment", "isPslipRequired", "isGift", "shipMethod", "shipmentDates", "messageToCustomer"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShipmentDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of shipment_dates
        if self.shipment_dates:
            _dict['shipmentDates'] = self.shipment_dates.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShipmentDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isPriorityShipment": obj.get("isPriorityShipment"),
            "isScheduledDeliveryShipment": obj.get("isScheduledDeliveryShipment"),
            "isPslipRequired": obj.get("isPslipRequired"),
            "isGift": obj.get("isGift"),
            "shipMethod": obj.get("shipMethod"),
            "shipmentDates": ShipmentDates.from_dict(obj["shipmentDates"]) if obj.get("shipmentDates") is not None else None,
            "messageToCustomer": obj.get("messageToCustomer")
        })
        return _obj


