# coding: utf-8

"""
    Selling Partner API for Product Fees

    The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.productFeesV0.models.fees_estimate import FeesEstimate
from py_sp_api.generated.productFeesV0.models.fees_estimate_error import FeesEstimateError
from py_sp_api.generated.productFeesV0.models.fees_estimate_identifier import FeesEstimateIdentifier
from typing import Optional, Set
from typing_extensions import Self

class FeesEstimateResult(BaseModel):
    """
    An item identifier and the estimated fees for the item.
    """ # noqa: E501
    status: Optional[StrictStr] = Field(default=None, description="The status of the fee request. Possible values: Success, ClientError, ServiceError.", alias="Status")
    fees_estimate_identifier: Optional[FeesEstimateIdentifier] = Field(default=None, alias="FeesEstimateIdentifier")
    fees_estimate: Optional[FeesEstimate] = Field(default=None, alias="FeesEstimate")
    error: Optional[FeesEstimateError] = Field(default=None, alias="Error")
    __properties: ClassVar[List[str]] = ["Status", "FeesEstimateIdentifier", "FeesEstimate", "Error"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeesEstimateResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fees_estimate_identifier
        if self.fees_estimate_identifier:
            _dict['FeesEstimateIdentifier'] = self.fees_estimate_identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fees_estimate
        if self.fees_estimate:
            _dict['FeesEstimate'] = self.fees_estimate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['Error'] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeesEstimateResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Status": obj.get("Status"),
            "FeesEstimateIdentifier": FeesEstimateIdentifier.from_dict(obj["FeesEstimateIdentifier"]) if obj.get("FeesEstimateIdentifier") is not None else None,
            "FeesEstimate": FeesEstimate.from_dict(obj["FeesEstimate"]) if obj.get("FeesEstimate") is not None else None,
            "Error": FeesEstimateError.from_dict(obj["Error"]) if obj.get("Error") is not None else None
        })
        return _obj


