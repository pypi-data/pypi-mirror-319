# coding: utf-8

"""
    Selling Partner API for Replenishment

    The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.

    The version of the OpenAPI document: 2022-11-07
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from py_sp_api.generated.replenishment_2022_11_07.models.time_interval import TimeInterval
from typing import Optional, Set
from typing_extensions import Self

class GetSellingPartnerMetricsResponseMetric(BaseModel):
    """
    An object which contains metric data for a selling partner.
    """ # noqa: E501
    not_delivered_due_to_oos: Optional[Union[Annotated[float, Field(le=1E+2, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]] = Field(default=None, description="The percentage of items that were not shipped out of the total shipped units over a period of time due to being out of stock. Applicable to PERFORMANCE timePeriodType.", alias="notDeliveredDueToOOS")
    total_subscriptions_revenue: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The revenue generated from subscriptions over a period of time. Applicable for both the PERFORMANCE and FORECAST timePeriodType.", alias="totalSubscriptionsRevenue")
    shipped_subscription_units: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The number of units shipped to the subscribers over a period of time. Applicable for both the PERFORMANCE and FORECAST timePeriodType.", alias="shippedSubscriptionUnits")
    active_subscriptions: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The number of active subscriptions present at the end of the period. Applicable to PERFORMANCE timePeriodType.", alias="activeSubscriptions")
    subscriber_average_revenue: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The average revenue per subscriber of the program over a period of past 12 months for sellers and 6 months for vendors. Applicable to PERFORMANCE timePeriodType.", alias="subscriberAverageRevenue")
    non_subscriber_average_revenue: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The average revenue per non-subscriber of the program over a period of past 12 months for sellers and 6 months for vendors. Applicable to PERFORMANCE timePeriodType.", alias="nonSubscriberAverageRevenue")
    lost_revenue_due_to_oos: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The revenue that would have been generated had there not been out of stock. Applicable to PERFORMANCE timePeriodType.", alias="lostRevenueDueToOOS")
    subscriber_average_reorders: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The average reorders per subscriber of the program over a period of 12 months. Applicable to PERFORMANCE timePeriodType.", alias="subscriberAverageReorders")
    non_subscriber_average_reorders: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The average reorders per non-subscriber of the program over a period of past 12 months. Applicable to PERFORMANCE timePeriodType.", alias="nonSubscriberAverageReorders")
    coupons_revenue_penetration: Optional[Union[Annotated[float, Field(le=1E+2, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]] = Field(default=None, description="The percentage of revenue from ASINs with coupons out of total revenue from all ASINs. Applicable to PERFORMANCE timePeriodType.", alias="couponsRevenuePenetration")
    revenue_from_subscriptions_with_multiple_deliveries: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The subscription revenue generated from subscriptions with over two deliveries over the past 12 months. Applicable to PERFORMANCE timePeriodType.", alias="revenueFromSubscriptionsWithMultipleDeliveries")
    revenue_from_active_subscriptions_with_single_delivery: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The subscription revenue generated from active subscriptions with one delivery over the past 12 months. Applicable to PERFORMANCE timePeriodType.", alias="revenueFromActiveSubscriptionsWithSingleDelivery")
    revenue_from_cancelled_subscriptions_after_single_delivery: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The subscription revenue generated from subscriptions which are cancelled after one delivery over the past 12 months. Applicable to PERFORMANCE timePeriodType.", alias="revenueFromCancelledSubscriptionsAfterSingleDelivery")
    subscriber_retention_for30_days: Optional[Union[Annotated[float, Field(le=1E+2, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]] = Field(default=None, description="The percentage of subscriptions retained after 30 days of subscription creation. Applicable to PERFORMANCE timePeriodType.", alias="subscriberRetentionFor30Days")
    subscriber_retention_for90_days: Optional[Union[Annotated[float, Field(le=1E+2, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]] = Field(default=None, description="The percentage of subscriptions retained after 90 days of subscription creation. Applicable to PERFORMANCE timePeriodType.", alias="subscriberRetentionFor90Days")
    revenue_penetration_for0_percent_seller_funding: Optional[Union[Annotated[float, Field(le=1E+2, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]] = Field(default=None, description="The percentage of subscription revenue generated by offers with 0% seller-funded discount over the last 12 months. Applicable to PERFORMANCE timePeriodType.", alias="revenuePenetrationFor0PercentSellerFunding")
    revenue_penetration_for5_percent_seller_funding: Optional[Union[Annotated[float, Field(le=1E+2, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]] = Field(default=None, description="[Applicable only for Sellers] The percentage of subscription revenue generated by offers with 5% seller-funded discount over the last 12 months. Applicable to PERFORMANCE timePeriodType.", alias="revenuePenetrationFor5PercentSellerFunding")
    revenue_penetration_for10_percent_seller_funding: Optional[Union[Annotated[float, Field(le=1E+2, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]] = Field(default=None, description="[Applicable only for Sellers] The percentage of subscription revenue generated by offers with 10% seller-funded discount over the last 12 months. Applicable to PERFORMANCE timePeriodType.", alias="revenuePenetrationFor10PercentSellerFunding")
    revenue_penetration_for5_plus_percent_seller_funding: Optional[Union[Annotated[float, Field(le=1E+2, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]] = Field(default=None, description="[Applicable only for vendors] The percentage of subscription revenue generated by offers with 5% or above seller-funded discount over the last 12 months. Applicable to PERFORMANCE timePeriodType.", alias="revenuePenetrationFor5PlusPercentSellerFunding")
    share_of_coupon_subscriptions: Optional[Union[Annotated[float, Field(le=1E+2, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]] = Field(default=None, description="The percentage of new subscriptions acquired through coupons. Applicable to PERFORMANCE timePeriodType.", alias="shareOfCouponSubscriptions")
    time_interval: Optional[TimeInterval] = Field(default=None, alias="timeInterval")
    currency_code: Optional[StrictStr] = Field(default=None, description="The currency code in ISO 4217 format.", alias="currencyCode")
    __properties: ClassVar[List[str]] = ["notDeliveredDueToOOS", "totalSubscriptionsRevenue", "shippedSubscriptionUnits", "activeSubscriptions", "subscriberAverageRevenue", "nonSubscriberAverageRevenue", "lostRevenueDueToOOS", "subscriberAverageReorders", "nonSubscriberAverageReorders", "couponsRevenuePenetration", "revenueFromSubscriptionsWithMultipleDeliveries", "revenueFromActiveSubscriptionsWithSingleDelivery", "revenueFromCancelledSubscriptionsAfterSingleDelivery", "subscriberRetentionFor30Days", "subscriberRetentionFor90Days", "revenuePenetrationFor0PercentSellerFunding", "revenuePenetrationFor5PercentSellerFunding", "revenuePenetrationFor10PercentSellerFunding", "revenuePenetrationFor5PlusPercentSellerFunding", "shareOfCouponSubscriptions", "timeInterval", "currencyCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetSellingPartnerMetricsResponseMetric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of time_interval
        if self.time_interval:
            _dict['timeInterval'] = self.time_interval.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetSellingPartnerMetricsResponseMetric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "notDeliveredDueToOOS": obj.get("notDeliveredDueToOOS"),
            "totalSubscriptionsRevenue": obj.get("totalSubscriptionsRevenue"),
            "shippedSubscriptionUnits": obj.get("shippedSubscriptionUnits"),
            "activeSubscriptions": obj.get("activeSubscriptions"),
            "subscriberAverageRevenue": obj.get("subscriberAverageRevenue"),
            "nonSubscriberAverageRevenue": obj.get("nonSubscriberAverageRevenue"),
            "lostRevenueDueToOOS": obj.get("lostRevenueDueToOOS"),
            "subscriberAverageReorders": obj.get("subscriberAverageReorders"),
            "nonSubscriberAverageReorders": obj.get("nonSubscriberAverageReorders"),
            "couponsRevenuePenetration": obj.get("couponsRevenuePenetration"),
            "revenueFromSubscriptionsWithMultipleDeliveries": obj.get("revenueFromSubscriptionsWithMultipleDeliveries"),
            "revenueFromActiveSubscriptionsWithSingleDelivery": obj.get("revenueFromActiveSubscriptionsWithSingleDelivery"),
            "revenueFromCancelledSubscriptionsAfterSingleDelivery": obj.get("revenueFromCancelledSubscriptionsAfterSingleDelivery"),
            "subscriberRetentionFor30Days": obj.get("subscriberRetentionFor30Days"),
            "subscriberRetentionFor90Days": obj.get("subscriberRetentionFor90Days"),
            "revenuePenetrationFor0PercentSellerFunding": obj.get("revenuePenetrationFor0PercentSellerFunding"),
            "revenuePenetrationFor5PercentSellerFunding": obj.get("revenuePenetrationFor5PercentSellerFunding"),
            "revenuePenetrationFor10PercentSellerFunding": obj.get("revenuePenetrationFor10PercentSellerFunding"),
            "revenuePenetrationFor5PlusPercentSellerFunding": obj.get("revenuePenetrationFor5PlusPercentSellerFunding"),
            "shareOfCouponSubscriptions": obj.get("shareOfCouponSubscriptions"),
            "timeInterval": TimeInterval.from_dict(obj["timeInterval"]) if obj.get("timeInterval") is not None else None,
            "currencyCode": obj.get("currencyCode")
        })
        return _obj


