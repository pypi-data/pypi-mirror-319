# coding: utf-8

"""
    Selling Partner API for Replenishment

    The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.

    The version of the OpenAPI document: 2022-11-07
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.replenishment_2022_11_07.models.eligibility_status import EligibilityStatus
from py_sp_api.generated.replenishment_2022_11_07.models.offer_program_configuration import OfferProgramConfiguration
from py_sp_api.generated.replenishment_2022_11_07.models.program_type import ProgramType
from typing import Optional, Set
from typing_extensions import Self

class ListOffersResponseOffer(BaseModel):
    """
    An object which contains details about an offer.
    """ # noqa: E501
    sku: Optional[StrictStr] = Field(default=None, description="The SKU. This property is only supported for sellers and not for vendors.")
    asin: Optional[StrictStr] = Field(default=None, description="The Amazon Standard Identification Number (ASIN).")
    marketplace_id: Optional[StrictStr] = Field(default=None, description="The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.", alias="marketplaceId")
    eligibility: Optional[EligibilityStatus] = None
    offer_program_configuration: Optional[OfferProgramConfiguration] = Field(default=None, alias="offerProgramConfiguration")
    program_type: Optional[ProgramType] = Field(default=None, alias="programType")
    vendor_codes: Optional[List[StrictStr]] = Field(default=None, description="A list of vendor codes associated with the offer.", alias="vendorCodes")
    __properties: ClassVar[List[str]] = ["sku", "asin", "marketplaceId", "eligibility", "offerProgramConfiguration", "programType", "vendorCodes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListOffersResponseOffer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of offer_program_configuration
        if self.offer_program_configuration:
            _dict['offerProgramConfiguration'] = self.offer_program_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListOffersResponseOffer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sku": obj.get("sku"),
            "asin": obj.get("asin"),
            "marketplaceId": obj.get("marketplaceId"),
            "eligibility": obj.get("eligibility"),
            "offerProgramConfiguration": OfferProgramConfiguration.from_dict(obj["offerProgramConfiguration"]) if obj.get("offerProgramConfiguration") is not None else None,
            "programType": obj.get("programType"),
            "vendorCodes": obj.get("vendorCodes")
        })
        return _obj


