# coding: utf-8

"""
    Selling Partner API for Replenishment

    The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.

    The version of the OpenAPI document: 2022-11-07
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.replenishment_2022_11_07.models.aggregation_frequency import AggregationFrequency
from py_sp_api.generated.replenishment_2022_11_07.models.program_type import ProgramType
from py_sp_api.generated.replenishment_2022_11_07.models.time_interval import TimeInterval
from py_sp_api.generated.replenishment_2022_11_07.models.time_period_type import TimePeriodType
from typing import Optional, Set
from typing_extensions import Self

class ListOfferMetricsRequestFilters(BaseModel):
    """
    Use these parameters to filter results. Any result must match all provided parameters. For any parameter that is an array, the result must match at least one element in the provided array.
    """ # noqa: E501
    aggregation_frequency: Optional[AggregationFrequency] = Field(default=None, alias="aggregationFrequency")
    time_interval: TimeInterval = Field(alias="timeInterval")
    time_period_type: TimePeriodType = Field(alias="timePeriodType")
    marketplace_id: StrictStr = Field(description="The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.", alias="marketplaceId")
    program_types: Annotated[List[ProgramType], Field(min_length=1)] = Field(description="A list of replenishment program types.", alias="programTypes")
    asins: Optional[Annotated[List[StrictStr], Field(min_length=1, max_length=20)]] = Field(default=None, description="A list of Amazon Standard Identification Numbers (ASINs).")
    __properties: ClassVar[List[str]] = ["aggregationFrequency", "timeInterval", "timePeriodType", "marketplaceId", "programTypes", "asins"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListOfferMetricsRequestFilters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of time_interval
        if self.time_interval:
            _dict['timeInterval'] = self.time_interval.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListOfferMetricsRequestFilters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregationFrequency": obj.get("aggregationFrequency"),
            "timeInterval": TimeInterval.from_dict(obj["timeInterval"]) if obj.get("timeInterval") is not None else None,
            "timePeriodType": obj.get("timePeriodType"),
            "marketplaceId": obj.get("marketplaceId"),
            "programTypes": obj.get("programTypes"),
            "asins": obj.get("asins")
        })
        return _obj


