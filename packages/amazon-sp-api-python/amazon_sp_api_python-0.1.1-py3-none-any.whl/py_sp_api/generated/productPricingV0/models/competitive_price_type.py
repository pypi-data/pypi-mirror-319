# coding: utf-8

"""
    Selling Partner API for Pricing

    The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.productPricingV0.models.offer_customer_type import OfferCustomerType
from py_sp_api.generated.productPricingV0.models.price_type import PriceType
from py_sp_api.generated.productPricingV0.models.quantity_discount_type import QuantityDiscountType
from typing import Optional, Set
from typing_extensions import Self

class CompetitivePriceType(BaseModel):
    """
    CompetitivePriceType
    """ # noqa: E501
    competitive_price_id: StrictStr = Field(description="The pricing model for each price that is returned.  Possible values:  * 1 - New Buy Box Price. * 2 - Used Buy Box Price.", alias="CompetitivePriceId")
    price: PriceType = Field(alias="Price")
    condition: Optional[StrictStr] = Field(default=None, description="Indicates the condition of the item whose pricing information is returned. Possible values are: New, Used, Collectible, Refurbished, or Club.")
    subcondition: Optional[StrictStr] = Field(default=None, description="Indicates the subcondition of the item whose pricing information is returned. Possible values are: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.")
    offer_type: Optional[OfferCustomerType] = Field(default=None, alias="offerType")
    quantity_tier: Optional[StrictInt] = Field(default=None, description="Indicates at what quantity this price becomes active.", alias="quantityTier")
    quantity_discount_type: Optional[QuantityDiscountType] = Field(default=None, alias="quantityDiscountType")
    seller_id: Optional[StrictStr] = Field(default=None, description="The seller identifier for the offer.", alias="sellerId")
    belongs_to_requester: Optional[StrictBool] = Field(default=None, description=" Indicates whether or not the pricing information is for an offer listing that belongs to the requester. The requester is the seller associated with the SellerId that was submitted with the request. Possible values are: true and false.", alias="belongsToRequester")
    __properties: ClassVar[List[str]] = ["CompetitivePriceId", "Price", "condition", "subcondition", "offerType", "quantityTier", "quantityDiscountType", "sellerId", "belongsToRequester"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompetitivePriceType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['Price'] = self.price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompetitivePriceType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CompetitivePriceId": obj.get("CompetitivePriceId"),
            "Price": PriceType.from_dict(obj["Price"]) if obj.get("Price") is not None else None,
            "condition": obj.get("condition"),
            "subcondition": obj.get("subcondition"),
            "offerType": obj.get("offerType"),
            "quantityTier": obj.get("quantityTier"),
            "quantityDiscountType": obj.get("quantityDiscountType"),
            "sellerId": obj.get("sellerId"),
            "belongsToRequester": obj.get("belongsToRequester")
        })
        return _obj


