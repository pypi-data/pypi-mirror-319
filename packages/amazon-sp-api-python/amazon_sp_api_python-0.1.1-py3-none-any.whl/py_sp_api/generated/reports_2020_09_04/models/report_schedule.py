# coding: utf-8

"""
    Selling Partner API for Reports

    Effective **June 27, 2024**, the Selling Partner API for Reports v2020-09-04 will no longer be available and all calls to it will fail. Integrations that rely on the Reports API must migrate to [Reports v2021-06-30](https://developer-docs.amazon.com/sp-api/docs/reports-api-v2021-06-30-reference) to avoid service disruption.

    The version of the OpenAPI document: 2020-09-04
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ReportSchedule(BaseModel):
    """
    Detailed information about a report schedule.
    """ # noqa: E501
    report_schedule_id: StrictStr = Field(description="The identifier for the report schedule. This identifier is unique only in combination with a seller ID.", alias="reportScheduleId")
    report_type: StrictStr = Field(description="The report type.", alias="reportType")
    marketplace_ids: Optional[List[StrictStr]] = Field(default=None, description="A list of marketplace identifiers. The report document's contents will contain data for all of the specified marketplaces, unless the report type indicates otherwise.", alias="marketplaceIds")
    report_options: Optional[Dict[str, StrictStr]] = Field(default=None, description="Additional information passed to reports. This varies by report type.", alias="reportOptions")
    period: StrictStr = Field(description="An ISO 8601 period value that indicates how often a report should be created.")
    next_report_creation_time: Optional[datetime] = Field(default=None, description="The date and time when the schedule will create its next report, in ISO 8601 date time format.", alias="nextReportCreationTime")
    __properties: ClassVar[List[str]] = ["reportScheduleId", "reportType", "marketplaceIds", "reportOptions", "period", "nextReportCreationTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "reportScheduleId": obj.get("reportScheduleId"),
            "reportType": obj.get("reportType"),
            "marketplaceIds": obj.get("marketplaceIds"),
            "reportOptions": obj.get("reportOptions"),
            "period": obj.get("period"),
            "nextReportCreationTime": obj.get("nextReportCreationTime")
        })
        return _obj


