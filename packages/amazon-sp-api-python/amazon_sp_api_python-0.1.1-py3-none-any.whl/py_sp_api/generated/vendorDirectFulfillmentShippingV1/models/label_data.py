# coding: utf-8

"""
    Selling Partner API for Direct Fulfillment Shipping

    The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor's shipping data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LabelData(BaseModel):
    """
    Details of the shipment label.
    """ # noqa: E501
    package_identifier: Optional[StrictStr] = Field(default=None, description="Identifier for the package. The first package will be 001, the second 002, and so on. This number is used as a reference to refer to this package from the pallet level.", alias="packageIdentifier")
    tracking_number: Optional[StrictStr] = Field(default=None, description="Package tracking identifier from the shipping carrier.", alias="trackingNumber")
    ship_method: Optional[StrictStr] = Field(default=None, description="Ship method to be used for shipping the order. Amazon defines Ship Method Codes indicating shipping carrier and shipment service level. Ship Method Codes are case and format sensitive. The same ship method code should returned on the shipment confirmation. Note that the Ship Method Codes are vendor specific and will be provided to each vendor during the implementation.", alias="shipMethod")
    ship_method_name: Optional[StrictStr] = Field(default=None, description="Shipping method name for internal reference.", alias="shipMethodName")
    content: StrictStr = Field(description="This field will contain the Base64encoded string of the shipment label content.")
    __properties: ClassVar[List[str]] = ["packageIdentifier", "trackingNumber", "shipMethod", "shipMethodName", "content"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LabelData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LabelData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "packageIdentifier": obj.get("packageIdentifier"),
            "trackingNumber": obj.get("trackingNumber"),
            "shipMethod": obj.get("shipMethod"),
            "shipMethodName": obj.get("shipMethodName"),
            "content": obj.get("content")
        })
        return _obj


