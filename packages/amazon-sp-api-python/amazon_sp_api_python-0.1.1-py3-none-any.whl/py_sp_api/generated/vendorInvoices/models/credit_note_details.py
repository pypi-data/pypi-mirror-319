# coding: utf-8

"""
    Vendor Invoices v1

    The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreditNoteDetails(BaseModel):
    """
    References required in order to process a credit note. This information is required only if InvoiceType is CreditNote.
    """ # noqa: E501
    reference_invoice_number: Optional[StrictStr] = Field(default=None, description="Original Invoice Number when sending a credit note relating to an existing invoice. One Invoice only to be processed per Credit Note. This is mandatory for AP Credit Notes.", alias="referenceInvoiceNumber")
    debit_note_number: Optional[StrictStr] = Field(default=None, description="Debit Note Number as generated by Amazon. Recommended for Returns and COOP Credit Notes.", alias="debitNoteNumber")
    returns_reference_number: Optional[StrictStr] = Field(default=None, description="Identifies the Returns Notice Number. Mandatory for all Returns Credit Notes.", alias="returnsReferenceNumber")
    goods_return_date: Optional[datetime] = Field(default=None, description="Defines a date and time according to ISO8601.", alias="goodsReturnDate")
    rma_id: Optional[StrictStr] = Field(default=None, description="Identifies the Returned Merchandise Authorization ID, if generated.", alias="rmaId")
    coop_reference_number: Optional[StrictStr] = Field(default=None, description="Identifies the COOP reference used for COOP agreement. Failure to provide the COOP reference number or the Debit Note number may lead to a rejection of the Credit Note.", alias="coopReferenceNumber")
    consignors_reference_number: Optional[StrictStr] = Field(default=None, description="Identifies the consignor reference number (VRET number), if generated by Amazon.", alias="consignorsReferenceNumber")
    __properties: ClassVar[List[str]] = ["referenceInvoiceNumber", "debitNoteNumber", "returnsReferenceNumber", "goodsReturnDate", "rmaId", "coopReferenceNumber", "consignorsReferenceNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreditNoteDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreditNoteDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "referenceInvoiceNumber": obj.get("referenceInvoiceNumber"),
            "debitNoteNumber": obj.get("debitNoteNumber"),
            "returnsReferenceNumber": obj.get("returnsReferenceNumber"),
            "goodsReturnDate": obj.get("goodsReturnDate"),
            "rmaId": obj.get("rmaId"),
            "coopReferenceNumber": obj.get("coopReferenceNumber"),
            "consignorsReferenceNumber": obj.get("consignorsReferenceNumber")
        })
        return _obj


