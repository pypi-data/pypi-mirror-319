# coding: utf-8

"""
    Selling Partner API for Retail Procurement Shipments

    The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.vendorShipments.models.carrier_details import CarrierDetails
from typing import Optional, Set
from typing_extensions import Self

class TransportationDetails(BaseModel):
    """
    Transportation details for this shipment.
    """ # noqa: E501
    ship_mode: Optional[StrictStr] = Field(default=None, description="The type of shipment.", alias="shipMode")
    transportation_mode: Optional[StrictStr] = Field(default=None, description="The mode of transportation for this shipment.", alias="transportationMode")
    shipped_date: Optional[datetime] = Field(default=None, description="Date when shipment is performed by the Vendor to Buyer", alias="shippedDate")
    estimated_delivery_date: Optional[datetime] = Field(default=None, description="Estimated Date on which shipment will be delivered from Vendor to Buyer", alias="estimatedDeliveryDate")
    shipment_delivery_date: Optional[datetime] = Field(default=None, description="Date on which shipment will be delivered from Vendor to Buyer", alias="shipmentDeliveryDate")
    carrier_details: Optional[CarrierDetails] = Field(default=None, alias="carrierDetails")
    bill_of_lading_number: Optional[StrictStr] = Field(default=None, description="The Bill of Lading (BOL) number is a unique number assigned to each shipment of goods by the vendor or shipper during the creation of the Bill of Lading. This number must be unique for every shipment and cannot be a date/time or single character. The BOL numer is mandatory in Shipment Confirmation message for FTL and LTL shipments, and must match the paper BOL provided with the shipment. Instead of BOL, an alternative reference number (like Delivery Note Number) for the shipment can also be sent in this field.", alias="billOfLadingNumber")
    __properties: ClassVar[List[str]] = ["shipMode", "transportationMode", "shippedDate", "estimatedDeliveryDate", "shipmentDeliveryDate", "carrierDetails", "billOfLadingNumber"]

    @field_validator('ship_mode')
    def ship_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TruckLoad', 'LessThanTruckLoad', 'SmallParcel']):
            raise ValueError("must be one of enum values ('TruckLoad', 'LessThanTruckLoad', 'SmallParcel')")
        return value

    @field_validator('transportation_mode')
    def transportation_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Road', 'Air', 'Ocean']):
            raise ValueError("must be one of enum values ('Road', 'Air', 'Ocean')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportationDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of carrier_details
        if self.carrier_details:
            _dict['carrierDetails'] = self.carrier_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportationDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "shipMode": obj.get("shipMode"),
            "transportationMode": obj.get("transportationMode"),
            "shippedDate": obj.get("shippedDate"),
            "estimatedDeliveryDate": obj.get("estimatedDeliveryDate"),
            "shipmentDeliveryDate": obj.get("shipmentDeliveryDate"),
            "carrierDetails": CarrierDetails.from_dict(obj["carrierDetails"]) if obj.get("carrierDetails") is not None else None,
            "billOfLadingNumber": obj.get("billOfLadingNumber")
        })
        return _obj


