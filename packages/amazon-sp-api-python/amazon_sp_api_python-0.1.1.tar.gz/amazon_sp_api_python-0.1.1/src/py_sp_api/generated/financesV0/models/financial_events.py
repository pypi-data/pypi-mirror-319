# coding: utf-8

"""
    Selling Partner API for Finances

    The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.financesV0.models.adhoc_disbursement_event import AdhocDisbursementEvent
from py_sp_api.generated.financesV0.models.adjustment_event import AdjustmentEvent
from py_sp_api.generated.financesV0.models.affordability_expense_event import AffordabilityExpenseEvent
from py_sp_api.generated.financesV0.models.capacity_reservation_billing_event import CapacityReservationBillingEvent
from py_sp_api.generated.financesV0.models.charge_refund_event import ChargeRefundEvent
from py_sp_api.generated.financesV0.models.coupon_payment_event import CouponPaymentEvent
from py_sp_api.generated.financesV0.models.debt_recovery_event import DebtRecoveryEvent
from py_sp_api.generated.financesV0.models.failed_adhoc_disbursement_event import FailedAdhocDisbursementEvent
from py_sp_api.generated.financesV0.models.fba_liquidation_event import FBALiquidationEvent
from py_sp_api.generated.financesV0.models.imaging_services_fee_event import ImagingServicesFeeEvent
from py_sp_api.generated.financesV0.models.loan_servicing_event import LoanServicingEvent
from py_sp_api.generated.financesV0.models.network_commingling_transaction_event import NetworkComminglingTransactionEvent
from py_sp_api.generated.financesV0.models.pay_with_amazon_event import PayWithAmazonEvent
from py_sp_api.generated.financesV0.models.product_ads_payment_event import ProductAdsPaymentEvent
from py_sp_api.generated.financesV0.models.removal_shipment_adjustment_event import RemovalShipmentAdjustmentEvent
from py_sp_api.generated.financesV0.models.removal_shipment_event import RemovalShipmentEvent
from py_sp_api.generated.financesV0.models.rental_transaction_event import RentalTransactionEvent
from py_sp_api.generated.financesV0.models.retrocharge_event import RetrochargeEvent
from py_sp_api.generated.financesV0.models.safet_reimbursement_event import SAFETReimbursementEvent
from py_sp_api.generated.financesV0.models.seller_deal_payment_event import SellerDealPaymentEvent
from py_sp_api.generated.financesV0.models.seller_review_enrollment_payment_event import SellerReviewEnrollmentPaymentEvent
from py_sp_api.generated.financesV0.models.service_fee_event import ServiceFeeEvent
from py_sp_api.generated.financesV0.models.shipment_event import ShipmentEvent
from py_sp_api.generated.financesV0.models.solution_provider_credit_event import SolutionProviderCreditEvent
from py_sp_api.generated.financesV0.models.tax_withholding_event import TaxWithholdingEvent
from py_sp_api.generated.financesV0.models.tds_reimbursement_event import TDSReimbursementEvent
from py_sp_api.generated.financesV0.models.trial_shipment_event import TrialShipmentEvent
from py_sp_api.generated.financesV0.models.value_added_service_charge_event import ValueAddedServiceChargeEvent
from typing import Optional, Set
from typing_extensions import Self

class FinancialEvents(BaseModel):
    """
    Contains all information related to a financial event.
    """ # noqa: E501
    shipment_event_list: Optional[List[ShipmentEvent]] = Field(default=None, description="A list of shipment event information.", alias="ShipmentEventList")
    shipment_settle_event_list: Optional[List[ShipmentEvent]] = Field(default=None, description="A list of `ShipmentEvent` items.", alias="ShipmentSettleEventList")
    refund_event_list: Optional[List[ShipmentEvent]] = Field(default=None, description="A list of shipment event information.", alias="RefundEventList")
    guarantee_claim_event_list: Optional[List[ShipmentEvent]] = Field(default=None, description="A list of shipment event information.", alias="GuaranteeClaimEventList")
    chargeback_event_list: Optional[List[ShipmentEvent]] = Field(default=None, description="A list of shipment event information.", alias="ChargebackEventList")
    pay_with_amazon_event_list: Optional[List[PayWithAmazonEvent]] = Field(default=None, description="A list of events related to the seller's Pay with Amazon account.", alias="PayWithAmazonEventList")
    service_provider_credit_event_list: Optional[List[SolutionProviderCreditEvent]] = Field(default=None, description="A list of information about solution provider credits.", alias="ServiceProviderCreditEventList")
    retrocharge_event_list: Optional[List[RetrochargeEvent]] = Field(default=None, description="A list of information about Retrocharge or RetrochargeReversal events.", alias="RetrochargeEventList")
    rental_transaction_event_list: Optional[List[RentalTransactionEvent]] = Field(default=None, description="A list of rental transaction event information.", alias="RentalTransactionEventList")
    product_ads_payment_event_list: Optional[List[ProductAdsPaymentEvent]] = Field(default=None, description="A list of sponsored products payment events.", alias="ProductAdsPaymentEventList")
    service_fee_event_list: Optional[List[ServiceFeeEvent]] = Field(default=None, description="A list of information about service fee events.", alias="ServiceFeeEventList")
    seller_deal_payment_event_list: Optional[List[SellerDealPaymentEvent]] = Field(default=None, description="A list of payment events for deal-related fees.", alias="SellerDealPaymentEventList")
    debt_recovery_event_list: Optional[List[DebtRecoveryEvent]] = Field(default=None, description="A list of debt recovery event information.", alias="DebtRecoveryEventList")
    loan_servicing_event_list: Optional[List[LoanServicingEvent]] = Field(default=None, description="A list of loan servicing events.", alias="LoanServicingEventList")
    adjustment_event_list: Optional[List[AdjustmentEvent]] = Field(default=None, description="A list of adjustment event information for the seller's account.", alias="AdjustmentEventList")
    safet_reimbursement_event_list: Optional[List[SAFETReimbursementEvent]] = Field(default=None, description="A list of SAFETReimbursementEvents.", alias="SAFETReimbursementEventList")
    seller_review_enrollment_payment_event_list: Optional[List[SellerReviewEnrollmentPaymentEvent]] = Field(default=None, description="A list of information about fee events for the Early Reviewer Program.", alias="SellerReviewEnrollmentPaymentEventList")
    fba_liquidation_event_list: Optional[List[FBALiquidationEvent]] = Field(default=None, description="A list of FBA inventory liquidation payment events.", alias="FBALiquidationEventList")
    coupon_payment_event_list: Optional[List[CouponPaymentEvent]] = Field(default=None, description="A list of coupon payment event information.", alias="CouponPaymentEventList")
    imaging_services_fee_event_list: Optional[List[ImagingServicesFeeEvent]] = Field(default=None, description="A list of fee events related to Amazon Imaging services.", alias="ImagingServicesFeeEventList")
    network_commingling_transaction_event_list: Optional[List[NetworkComminglingTransactionEvent]] = Field(default=None, description="A list of network commingling transaction events.", alias="NetworkComminglingTransactionEventList")
    affordability_expense_event_list: Optional[List[AffordabilityExpenseEvent]] = Field(default=None, description="A list of expense information related to an affordability promotion.", alias="AffordabilityExpenseEventList")
    affordability_expense_reversal_event_list: Optional[List[AffordabilityExpenseEvent]] = Field(default=None, description="A list of expense information related to an affordability promotion.", alias="AffordabilityExpenseReversalEventList")
    removal_shipment_event_list: Optional[List[RemovalShipmentEvent]] = Field(default=None, description="A list of removal shipment event information.", alias="RemovalShipmentEventList")
    removal_shipment_adjustment_event_list: Optional[List[RemovalShipmentAdjustmentEvent]] = Field(default=None, description="A comma-delimited list of Removal shipmentAdjustment details for FBA inventory.", alias="RemovalShipmentAdjustmentEventList")
    trial_shipment_event_list: Optional[List[TrialShipmentEvent]] = Field(default=None, description="A list of information about trial shipment financial events.", alias="TrialShipmentEventList")
    tds_reimbursement_event_list: Optional[List[TDSReimbursementEvent]] = Field(default=None, description="A list of `TDSReimbursementEvent` items.", alias="TDSReimbursementEventList")
    adhoc_disbursement_event_list: Optional[List[AdhocDisbursementEvent]] = Field(default=None, description="A list of `AdhocDisbursement` events.", alias="AdhocDisbursementEventList")
    tax_withholding_event_list: Optional[List[TaxWithholdingEvent]] = Field(default=None, description="A list of `TaxWithholding` events.", alias="TaxWithholdingEventList")
    charge_refund_event_list: Optional[List[ChargeRefundEvent]] = Field(default=None, description="A list of charge refund events.", alias="ChargeRefundEventList")
    failed_adhoc_disbursement_event_list: Optional[List[FailedAdhocDisbursementEvent]] = Field(default=None, description="A list of `FailedAdhocDisbursementEvent`s.", alias="FailedAdhocDisbursementEventList")
    value_added_service_charge_event_list: Optional[List[ValueAddedServiceChargeEvent]] = Field(default=None, description="A list of `ValueAddedServiceCharge` events.", alias="ValueAddedServiceChargeEventList")
    capacity_reservation_billing_event_list: Optional[List[CapacityReservationBillingEvent]] = Field(default=None, description="A list of `CapacityReservationBillingEvent` events.", alias="CapacityReservationBillingEventList")
    __properties: ClassVar[List[str]] = ["ShipmentEventList", "ShipmentSettleEventList", "RefundEventList", "GuaranteeClaimEventList", "ChargebackEventList", "PayWithAmazonEventList", "ServiceProviderCreditEventList", "RetrochargeEventList", "RentalTransactionEventList", "ProductAdsPaymentEventList", "ServiceFeeEventList", "SellerDealPaymentEventList", "DebtRecoveryEventList", "LoanServicingEventList", "AdjustmentEventList", "SAFETReimbursementEventList", "SellerReviewEnrollmentPaymentEventList", "FBALiquidationEventList", "CouponPaymentEventList", "ImagingServicesFeeEventList", "NetworkComminglingTransactionEventList", "AffordabilityExpenseEventList", "AffordabilityExpenseReversalEventList", "RemovalShipmentEventList", "RemovalShipmentAdjustmentEventList", "TrialShipmentEventList", "TDSReimbursementEventList", "AdhocDisbursementEventList", "TaxWithholdingEventList", "ChargeRefundEventList", "FailedAdhocDisbursementEventList", "ValueAddedServiceChargeEventList", "CapacityReservationBillingEventList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FinancialEvents from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_event_list (list)
        _items = []
        if self.shipment_event_list:
            for _item_shipment_event_list in self.shipment_event_list:
                if _item_shipment_event_list:
                    _items.append(_item_shipment_event_list.to_dict())
            _dict['ShipmentEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_settle_event_list (list)
        _items = []
        if self.shipment_settle_event_list:
            for _item_shipment_settle_event_list in self.shipment_settle_event_list:
                if _item_shipment_settle_event_list:
                    _items.append(_item_shipment_settle_event_list.to_dict())
            _dict['ShipmentSettleEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in refund_event_list (list)
        _items = []
        if self.refund_event_list:
            for _item_refund_event_list in self.refund_event_list:
                if _item_refund_event_list:
                    _items.append(_item_refund_event_list.to_dict())
            _dict['RefundEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in guarantee_claim_event_list (list)
        _items = []
        if self.guarantee_claim_event_list:
            for _item_guarantee_claim_event_list in self.guarantee_claim_event_list:
                if _item_guarantee_claim_event_list:
                    _items.append(_item_guarantee_claim_event_list.to_dict())
            _dict['GuaranteeClaimEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in chargeback_event_list (list)
        _items = []
        if self.chargeback_event_list:
            for _item_chargeback_event_list in self.chargeback_event_list:
                if _item_chargeback_event_list:
                    _items.append(_item_chargeback_event_list.to_dict())
            _dict['ChargebackEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pay_with_amazon_event_list (list)
        _items = []
        if self.pay_with_amazon_event_list:
            for _item_pay_with_amazon_event_list in self.pay_with_amazon_event_list:
                if _item_pay_with_amazon_event_list:
                    _items.append(_item_pay_with_amazon_event_list.to_dict())
            _dict['PayWithAmazonEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_provider_credit_event_list (list)
        _items = []
        if self.service_provider_credit_event_list:
            for _item_service_provider_credit_event_list in self.service_provider_credit_event_list:
                if _item_service_provider_credit_event_list:
                    _items.append(_item_service_provider_credit_event_list.to_dict())
            _dict['ServiceProviderCreditEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in retrocharge_event_list (list)
        _items = []
        if self.retrocharge_event_list:
            for _item_retrocharge_event_list in self.retrocharge_event_list:
                if _item_retrocharge_event_list:
                    _items.append(_item_retrocharge_event_list.to_dict())
            _dict['RetrochargeEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rental_transaction_event_list (list)
        _items = []
        if self.rental_transaction_event_list:
            for _item_rental_transaction_event_list in self.rental_transaction_event_list:
                if _item_rental_transaction_event_list:
                    _items.append(_item_rental_transaction_event_list.to_dict())
            _dict['RentalTransactionEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in product_ads_payment_event_list (list)
        _items = []
        if self.product_ads_payment_event_list:
            for _item_product_ads_payment_event_list in self.product_ads_payment_event_list:
                if _item_product_ads_payment_event_list:
                    _items.append(_item_product_ads_payment_event_list.to_dict())
            _dict['ProductAdsPaymentEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_fee_event_list (list)
        _items = []
        if self.service_fee_event_list:
            for _item_service_fee_event_list in self.service_fee_event_list:
                if _item_service_fee_event_list:
                    _items.append(_item_service_fee_event_list.to_dict())
            _dict['ServiceFeeEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in seller_deal_payment_event_list (list)
        _items = []
        if self.seller_deal_payment_event_list:
            for _item_seller_deal_payment_event_list in self.seller_deal_payment_event_list:
                if _item_seller_deal_payment_event_list:
                    _items.append(_item_seller_deal_payment_event_list.to_dict())
            _dict['SellerDealPaymentEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in debt_recovery_event_list (list)
        _items = []
        if self.debt_recovery_event_list:
            for _item_debt_recovery_event_list in self.debt_recovery_event_list:
                if _item_debt_recovery_event_list:
                    _items.append(_item_debt_recovery_event_list.to_dict())
            _dict['DebtRecoveryEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in loan_servicing_event_list (list)
        _items = []
        if self.loan_servicing_event_list:
            for _item_loan_servicing_event_list in self.loan_servicing_event_list:
                if _item_loan_servicing_event_list:
                    _items.append(_item_loan_servicing_event_list.to_dict())
            _dict['LoanServicingEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in adjustment_event_list (list)
        _items = []
        if self.adjustment_event_list:
            for _item_adjustment_event_list in self.adjustment_event_list:
                if _item_adjustment_event_list:
                    _items.append(_item_adjustment_event_list.to_dict())
            _dict['AdjustmentEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in safet_reimbursement_event_list (list)
        _items = []
        if self.safet_reimbursement_event_list:
            for _item_safet_reimbursement_event_list in self.safet_reimbursement_event_list:
                if _item_safet_reimbursement_event_list:
                    _items.append(_item_safet_reimbursement_event_list.to_dict())
            _dict['SAFETReimbursementEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in seller_review_enrollment_payment_event_list (list)
        _items = []
        if self.seller_review_enrollment_payment_event_list:
            for _item_seller_review_enrollment_payment_event_list in self.seller_review_enrollment_payment_event_list:
                if _item_seller_review_enrollment_payment_event_list:
                    _items.append(_item_seller_review_enrollment_payment_event_list.to_dict())
            _dict['SellerReviewEnrollmentPaymentEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fba_liquidation_event_list (list)
        _items = []
        if self.fba_liquidation_event_list:
            for _item_fba_liquidation_event_list in self.fba_liquidation_event_list:
                if _item_fba_liquidation_event_list:
                    _items.append(_item_fba_liquidation_event_list.to_dict())
            _dict['FBALiquidationEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in coupon_payment_event_list (list)
        _items = []
        if self.coupon_payment_event_list:
            for _item_coupon_payment_event_list in self.coupon_payment_event_list:
                if _item_coupon_payment_event_list:
                    _items.append(_item_coupon_payment_event_list.to_dict())
            _dict['CouponPaymentEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in imaging_services_fee_event_list (list)
        _items = []
        if self.imaging_services_fee_event_list:
            for _item_imaging_services_fee_event_list in self.imaging_services_fee_event_list:
                if _item_imaging_services_fee_event_list:
                    _items.append(_item_imaging_services_fee_event_list.to_dict())
            _dict['ImagingServicesFeeEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in network_commingling_transaction_event_list (list)
        _items = []
        if self.network_commingling_transaction_event_list:
            for _item_network_commingling_transaction_event_list in self.network_commingling_transaction_event_list:
                if _item_network_commingling_transaction_event_list:
                    _items.append(_item_network_commingling_transaction_event_list.to_dict())
            _dict['NetworkComminglingTransactionEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in affordability_expense_event_list (list)
        _items = []
        if self.affordability_expense_event_list:
            for _item_affordability_expense_event_list in self.affordability_expense_event_list:
                if _item_affordability_expense_event_list:
                    _items.append(_item_affordability_expense_event_list.to_dict())
            _dict['AffordabilityExpenseEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in affordability_expense_reversal_event_list (list)
        _items = []
        if self.affordability_expense_reversal_event_list:
            for _item_affordability_expense_reversal_event_list in self.affordability_expense_reversal_event_list:
                if _item_affordability_expense_reversal_event_list:
                    _items.append(_item_affordability_expense_reversal_event_list.to_dict())
            _dict['AffordabilityExpenseReversalEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in removal_shipment_event_list (list)
        _items = []
        if self.removal_shipment_event_list:
            for _item_removal_shipment_event_list in self.removal_shipment_event_list:
                if _item_removal_shipment_event_list:
                    _items.append(_item_removal_shipment_event_list.to_dict())
            _dict['RemovalShipmentEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in removal_shipment_adjustment_event_list (list)
        _items = []
        if self.removal_shipment_adjustment_event_list:
            for _item_removal_shipment_adjustment_event_list in self.removal_shipment_adjustment_event_list:
                if _item_removal_shipment_adjustment_event_list:
                    _items.append(_item_removal_shipment_adjustment_event_list.to_dict())
            _dict['RemovalShipmentAdjustmentEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trial_shipment_event_list (list)
        _items = []
        if self.trial_shipment_event_list:
            for _item_trial_shipment_event_list in self.trial_shipment_event_list:
                if _item_trial_shipment_event_list:
                    _items.append(_item_trial_shipment_event_list.to_dict())
            _dict['TrialShipmentEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tds_reimbursement_event_list (list)
        _items = []
        if self.tds_reimbursement_event_list:
            for _item_tds_reimbursement_event_list in self.tds_reimbursement_event_list:
                if _item_tds_reimbursement_event_list:
                    _items.append(_item_tds_reimbursement_event_list.to_dict())
            _dict['TDSReimbursementEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in adhoc_disbursement_event_list (list)
        _items = []
        if self.adhoc_disbursement_event_list:
            for _item_adhoc_disbursement_event_list in self.adhoc_disbursement_event_list:
                if _item_adhoc_disbursement_event_list:
                    _items.append(_item_adhoc_disbursement_event_list.to_dict())
            _dict['AdhocDisbursementEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tax_withholding_event_list (list)
        _items = []
        if self.tax_withholding_event_list:
            for _item_tax_withholding_event_list in self.tax_withholding_event_list:
                if _item_tax_withholding_event_list:
                    _items.append(_item_tax_withholding_event_list.to_dict())
            _dict['TaxWithholdingEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in charge_refund_event_list (list)
        _items = []
        if self.charge_refund_event_list:
            for _item_charge_refund_event_list in self.charge_refund_event_list:
                if _item_charge_refund_event_list:
                    _items.append(_item_charge_refund_event_list.to_dict())
            _dict['ChargeRefundEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in failed_adhoc_disbursement_event_list (list)
        _items = []
        if self.failed_adhoc_disbursement_event_list:
            for _item_failed_adhoc_disbursement_event_list in self.failed_adhoc_disbursement_event_list:
                if _item_failed_adhoc_disbursement_event_list:
                    _items.append(_item_failed_adhoc_disbursement_event_list.to_dict())
            _dict['FailedAdhocDisbursementEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in value_added_service_charge_event_list (list)
        _items = []
        if self.value_added_service_charge_event_list:
            for _item_value_added_service_charge_event_list in self.value_added_service_charge_event_list:
                if _item_value_added_service_charge_event_list:
                    _items.append(_item_value_added_service_charge_event_list.to_dict())
            _dict['ValueAddedServiceChargeEventList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in capacity_reservation_billing_event_list (list)
        _items = []
        if self.capacity_reservation_billing_event_list:
            for _item_capacity_reservation_billing_event_list in self.capacity_reservation_billing_event_list:
                if _item_capacity_reservation_billing_event_list:
                    _items.append(_item_capacity_reservation_billing_event_list.to_dict())
            _dict['CapacityReservationBillingEventList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FinancialEvents from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ShipmentEventList": [ShipmentEvent.from_dict(_item) for _item in obj["ShipmentEventList"]] if obj.get("ShipmentEventList") is not None else None,
            "ShipmentSettleEventList": [ShipmentEvent.from_dict(_item) for _item in obj["ShipmentSettleEventList"]] if obj.get("ShipmentSettleEventList") is not None else None,
            "RefundEventList": [ShipmentEvent.from_dict(_item) for _item in obj["RefundEventList"]] if obj.get("RefundEventList") is not None else None,
            "GuaranteeClaimEventList": [ShipmentEvent.from_dict(_item) for _item in obj["GuaranteeClaimEventList"]] if obj.get("GuaranteeClaimEventList") is not None else None,
            "ChargebackEventList": [ShipmentEvent.from_dict(_item) for _item in obj["ChargebackEventList"]] if obj.get("ChargebackEventList") is not None else None,
            "PayWithAmazonEventList": [PayWithAmazonEvent.from_dict(_item) for _item in obj["PayWithAmazonEventList"]] if obj.get("PayWithAmazonEventList") is not None else None,
            "ServiceProviderCreditEventList": [SolutionProviderCreditEvent.from_dict(_item) for _item in obj["ServiceProviderCreditEventList"]] if obj.get("ServiceProviderCreditEventList") is not None else None,
            "RetrochargeEventList": [RetrochargeEvent.from_dict(_item) for _item in obj["RetrochargeEventList"]] if obj.get("RetrochargeEventList") is not None else None,
            "RentalTransactionEventList": [RentalTransactionEvent.from_dict(_item) for _item in obj["RentalTransactionEventList"]] if obj.get("RentalTransactionEventList") is not None else None,
            "ProductAdsPaymentEventList": [ProductAdsPaymentEvent.from_dict(_item) for _item in obj["ProductAdsPaymentEventList"]] if obj.get("ProductAdsPaymentEventList") is not None else None,
            "ServiceFeeEventList": [ServiceFeeEvent.from_dict(_item) for _item in obj["ServiceFeeEventList"]] if obj.get("ServiceFeeEventList") is not None else None,
            "SellerDealPaymentEventList": [SellerDealPaymentEvent.from_dict(_item) for _item in obj["SellerDealPaymentEventList"]] if obj.get("SellerDealPaymentEventList") is not None else None,
            "DebtRecoveryEventList": [DebtRecoveryEvent.from_dict(_item) for _item in obj["DebtRecoveryEventList"]] if obj.get("DebtRecoveryEventList") is not None else None,
            "LoanServicingEventList": [LoanServicingEvent.from_dict(_item) for _item in obj["LoanServicingEventList"]] if obj.get("LoanServicingEventList") is not None else None,
            "AdjustmentEventList": [AdjustmentEvent.from_dict(_item) for _item in obj["AdjustmentEventList"]] if obj.get("AdjustmentEventList") is not None else None,
            "SAFETReimbursementEventList": [SAFETReimbursementEvent.from_dict(_item) for _item in obj["SAFETReimbursementEventList"]] if obj.get("SAFETReimbursementEventList") is not None else None,
            "SellerReviewEnrollmentPaymentEventList": [SellerReviewEnrollmentPaymentEvent.from_dict(_item) for _item in obj["SellerReviewEnrollmentPaymentEventList"]] if obj.get("SellerReviewEnrollmentPaymentEventList") is not None else None,
            "FBALiquidationEventList": [FBALiquidationEvent.from_dict(_item) for _item in obj["FBALiquidationEventList"]] if obj.get("FBALiquidationEventList") is not None else None,
            "CouponPaymentEventList": [CouponPaymentEvent.from_dict(_item) for _item in obj["CouponPaymentEventList"]] if obj.get("CouponPaymentEventList") is not None else None,
            "ImagingServicesFeeEventList": [ImagingServicesFeeEvent.from_dict(_item) for _item in obj["ImagingServicesFeeEventList"]] if obj.get("ImagingServicesFeeEventList") is not None else None,
            "NetworkComminglingTransactionEventList": [NetworkComminglingTransactionEvent.from_dict(_item) for _item in obj["NetworkComminglingTransactionEventList"]] if obj.get("NetworkComminglingTransactionEventList") is not None else None,
            "AffordabilityExpenseEventList": [AffordabilityExpenseEvent.from_dict(_item) for _item in obj["AffordabilityExpenseEventList"]] if obj.get("AffordabilityExpenseEventList") is not None else None,
            "AffordabilityExpenseReversalEventList": [AffordabilityExpenseEvent.from_dict(_item) for _item in obj["AffordabilityExpenseReversalEventList"]] if obj.get("AffordabilityExpenseReversalEventList") is not None else None,
            "RemovalShipmentEventList": [RemovalShipmentEvent.from_dict(_item) for _item in obj["RemovalShipmentEventList"]] if obj.get("RemovalShipmentEventList") is not None else None,
            "RemovalShipmentAdjustmentEventList": [RemovalShipmentAdjustmentEvent.from_dict(_item) for _item in obj["RemovalShipmentAdjustmentEventList"]] if obj.get("RemovalShipmentAdjustmentEventList") is not None else None,
            "TrialShipmentEventList": [TrialShipmentEvent.from_dict(_item) for _item in obj["TrialShipmentEventList"]] if obj.get("TrialShipmentEventList") is not None else None,
            "TDSReimbursementEventList": [TDSReimbursementEvent.from_dict(_item) for _item in obj["TDSReimbursementEventList"]] if obj.get("TDSReimbursementEventList") is not None else None,
            "AdhocDisbursementEventList": [AdhocDisbursementEvent.from_dict(_item) for _item in obj["AdhocDisbursementEventList"]] if obj.get("AdhocDisbursementEventList") is not None else None,
            "TaxWithholdingEventList": [TaxWithholdingEvent.from_dict(_item) for _item in obj["TaxWithholdingEventList"]] if obj.get("TaxWithholdingEventList") is not None else None,
            "ChargeRefundEventList": [ChargeRefundEvent.from_dict(_item) for _item in obj["ChargeRefundEventList"]] if obj.get("ChargeRefundEventList") is not None else None,
            "FailedAdhocDisbursementEventList": [FailedAdhocDisbursementEvent.from_dict(_item) for _item in obj["FailedAdhocDisbursementEventList"]] if obj.get("FailedAdhocDisbursementEventList") is not None else None,
            "ValueAddedServiceChargeEventList": [ValueAddedServiceChargeEvent.from_dict(_item) for _item in obj["ValueAddedServiceChargeEventList"]] if obj.get("ValueAddedServiceChargeEventList") is not None else None,
            "CapacityReservationBillingEventList": [CapacityReservationBillingEvent.from_dict(_item) for _item in obj["CapacityReservationBillingEventList"]] if obj.get("CapacityReservationBillingEventList") is not None else None
        })
        return _obj


