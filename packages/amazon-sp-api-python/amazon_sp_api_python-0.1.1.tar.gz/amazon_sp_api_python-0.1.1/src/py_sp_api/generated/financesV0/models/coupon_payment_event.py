# coding: utf-8

"""
    Selling Partner API for Finances

    The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.financesV0.models.charge_component import ChargeComponent
from py_sp_api.generated.financesV0.models.currency import Currency
from py_sp_api.generated.financesV0.models.fee_component import FeeComponent
from typing import Optional, Set
from typing_extensions import Self

class CouponPaymentEvent(BaseModel):
    """
    An event related to coupon payments.
    """ # noqa: E501
    posted_date: Optional[datetime] = Field(default=None, description="Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).", alias="PostedDate")
    coupon_id: Optional[StrictStr] = Field(default=None, description="A coupon identifier.", alias="CouponId")
    seller_coupon_description: Optional[StrictStr] = Field(default=None, description="The description provided by the seller when they created the coupon.", alias="SellerCouponDescription")
    clip_or_redemption_count: Optional[StrictInt] = Field(default=None, description="The number of coupon clips or redemptions.", alias="ClipOrRedemptionCount")
    payment_event_id: Optional[StrictStr] = Field(default=None, description="A payment event identifier.", alias="PaymentEventId")
    fee_component: Optional[FeeComponent] = Field(default=None, alias="FeeComponent")
    charge_component: Optional[ChargeComponent] = Field(default=None, alias="ChargeComponent")
    total_amount: Optional[Currency] = Field(default=None, alias="TotalAmount")
    __properties: ClassVar[List[str]] = ["PostedDate", "CouponId", "SellerCouponDescription", "ClipOrRedemptionCount", "PaymentEventId", "FeeComponent", "ChargeComponent", "TotalAmount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CouponPaymentEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fee_component
        if self.fee_component:
            _dict['FeeComponent'] = self.fee_component.to_dict()
        # override the default output from pydantic by calling `to_dict()` of charge_component
        if self.charge_component:
            _dict['ChargeComponent'] = self.charge_component.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_amount
        if self.total_amount:
            _dict['TotalAmount'] = self.total_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CouponPaymentEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "PostedDate": obj.get("PostedDate"),
            "CouponId": obj.get("CouponId"),
            "SellerCouponDescription": obj.get("SellerCouponDescription"),
            "ClipOrRedemptionCount": obj.get("ClipOrRedemptionCount"),
            "PaymentEventId": obj.get("PaymentEventId"),
            "FeeComponent": FeeComponent.from_dict(obj["FeeComponent"]) if obj.get("FeeComponent") is not None else None,
            "ChargeComponent": ChargeComponent.from_dict(obj["ChargeComponent"]) if obj.get("ChargeComponent") is not None else None,
            "TotalAmount": Currency.from_dict(obj["TotalAmount"]) if obj.get("TotalAmount") is not None else None
        })
        return _obj


