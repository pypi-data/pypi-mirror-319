# coding: utf-8

"""
    Selling Partner API for Finances

    The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.financesV0.models.currency import Currency
from typing import Optional, Set
from typing_extensions import Self

class AffordabilityExpenseEvent(BaseModel):
    """
    An expense related to an affordability promotion.
    """ # noqa: E501
    amazon_order_id: Optional[StrictStr] = Field(default=None, description="An Amazon-defined identifier for an order.", alias="AmazonOrderId")
    posted_date: Optional[datetime] = Field(default=None, description="Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).", alias="PostedDate")
    marketplace_id: Optional[StrictStr] = Field(default=None, description="An encrypted, Amazon-defined marketplace identifier.", alias="MarketplaceId")
    transaction_type: Optional[StrictStr] = Field(default=None, description="Indicates the type of transaction.   Possible values:  * Charge - For an affordability promotion expense.  * Refund - For an affordability promotion expense reversal.", alias="TransactionType")
    base_expense: Optional[Currency] = Field(default=None, alias="BaseExpense")
    tax_type_cgst: Currency = Field(alias="TaxTypeCGST")
    tax_type_sgst: Currency = Field(alias="TaxTypeSGST")
    tax_type_igst: Currency = Field(alias="TaxTypeIGST")
    total_expense: Optional[Currency] = Field(default=None, alias="TotalExpense")
    __properties: ClassVar[List[str]] = ["AmazonOrderId", "PostedDate", "MarketplaceId", "TransactionType", "BaseExpense", "TaxTypeCGST", "TaxTypeSGST", "TaxTypeIGST", "TotalExpense"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AffordabilityExpenseEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of base_expense
        if self.base_expense:
            _dict['BaseExpense'] = self.base_expense.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_type_cgst
        if self.tax_type_cgst:
            _dict['TaxTypeCGST'] = self.tax_type_cgst.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_type_sgst
        if self.tax_type_sgst:
            _dict['TaxTypeSGST'] = self.tax_type_sgst.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_type_igst
        if self.tax_type_igst:
            _dict['TaxTypeIGST'] = self.tax_type_igst.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_expense
        if self.total_expense:
            _dict['TotalExpense'] = self.total_expense.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AffordabilityExpenseEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AmazonOrderId": obj.get("AmazonOrderId"),
            "PostedDate": obj.get("PostedDate"),
            "MarketplaceId": obj.get("MarketplaceId"),
            "TransactionType": obj.get("TransactionType"),
            "BaseExpense": Currency.from_dict(obj["BaseExpense"]) if obj.get("BaseExpense") is not None else None,
            "TaxTypeCGST": Currency.from_dict(obj["TaxTypeCGST"]) if obj.get("TaxTypeCGST") is not None else None,
            "TaxTypeSGST": Currency.from_dict(obj["TaxTypeSGST"]) if obj.get("TaxTypeSGST") is not None else None,
            "TaxTypeIGST": Currency.from_dict(obj["TaxTypeIGST"]) if obj.get("TaxTypeIGST") is not None else None,
            "TotalExpense": Currency.from_dict(obj["TotalExpense"]) if obj.get("TotalExpense") is not None else None
        })
        return _obj


