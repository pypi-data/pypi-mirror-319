# coding: utf-8

"""
    Selling Partner API for Finances

    The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.financesV0.models.charge_component import ChargeComponent
from py_sp_api.generated.financesV0.models.currency import Currency
from py_sp_api.generated.financesV0.models.fee_component import FeeComponent
from py_sp_api.generated.financesV0.models.tax_withheld_component import TaxWithheldComponent
from typing import Optional, Set
from typing_extensions import Self

class RentalTransactionEvent(BaseModel):
    """
    An event related to a rental transaction.
    """ # noqa: E501
    amazon_order_id: Optional[StrictStr] = Field(default=None, description="An Amazon-defined identifier for an order.", alias="AmazonOrderId")
    rental_event_type: Optional[StrictStr] = Field(default=None, description="The type of rental event.  Possible values:  * RentalCustomerPayment-Buyout - Transaction type that represents when the customer wants to buy out a rented item.  * RentalCustomerPayment-Extension - Transaction type that represents when the customer wants to extend the rental period.  * RentalCustomerRefund-Buyout - Transaction type that represents when the customer requests a refund for the buyout of the rented item.  * RentalCustomerRefund-Extension - Transaction type that represents when the customer requests a refund over the extension on the rented item.  * RentalHandlingFee - Transaction type that represents the fee that Amazon charges sellers who rent through Amazon.  * RentalChargeFailureReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a failed charge.  * RentalLostItemReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a lost item.", alias="RentalEventType")
    extension_length: Optional[StrictInt] = Field(default=None, description="The number of days that the buyer extended an already rented item. This value is only returned for RentalCustomerPayment-Extension and RentalCustomerRefund-Extension events.", alias="ExtensionLength")
    posted_date: Optional[datetime] = Field(default=None, description="Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).", alias="PostedDate")
    rental_charge_list: Optional[List[ChargeComponent]] = Field(default=None, description="A list of charge information on the seller's account.", alias="RentalChargeList")
    rental_fee_list: Optional[List[FeeComponent]] = Field(default=None, description="A list of fee component information.", alias="RentalFeeList")
    marketplace_name: Optional[StrictStr] = Field(default=None, description="The name of the marketplace.", alias="MarketplaceName")
    rental_initial_value: Optional[Currency] = Field(default=None, alias="RentalInitialValue")
    rental_reimbursement: Optional[Currency] = Field(default=None, alias="RentalReimbursement")
    rental_tax_withheld_list: Optional[List[TaxWithheldComponent]] = Field(default=None, description="A list of information about taxes withheld.", alias="RentalTaxWithheldList")
    __properties: ClassVar[List[str]] = ["AmazonOrderId", "RentalEventType", "ExtensionLength", "PostedDate", "RentalChargeList", "RentalFeeList", "MarketplaceName", "RentalInitialValue", "RentalReimbursement", "RentalTaxWithheldList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RentalTransactionEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in rental_charge_list (list)
        _items = []
        if self.rental_charge_list:
            for _item_rental_charge_list in self.rental_charge_list:
                if _item_rental_charge_list:
                    _items.append(_item_rental_charge_list.to_dict())
            _dict['RentalChargeList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rental_fee_list (list)
        _items = []
        if self.rental_fee_list:
            for _item_rental_fee_list in self.rental_fee_list:
                if _item_rental_fee_list:
                    _items.append(_item_rental_fee_list.to_dict())
            _dict['RentalFeeList'] = _items
        # override the default output from pydantic by calling `to_dict()` of rental_initial_value
        if self.rental_initial_value:
            _dict['RentalInitialValue'] = self.rental_initial_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rental_reimbursement
        if self.rental_reimbursement:
            _dict['RentalReimbursement'] = self.rental_reimbursement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rental_tax_withheld_list (list)
        _items = []
        if self.rental_tax_withheld_list:
            for _item_rental_tax_withheld_list in self.rental_tax_withheld_list:
                if _item_rental_tax_withheld_list:
                    _items.append(_item_rental_tax_withheld_list.to_dict())
            _dict['RentalTaxWithheldList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RentalTransactionEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AmazonOrderId": obj.get("AmazonOrderId"),
            "RentalEventType": obj.get("RentalEventType"),
            "ExtensionLength": obj.get("ExtensionLength"),
            "PostedDate": obj.get("PostedDate"),
            "RentalChargeList": [ChargeComponent.from_dict(_item) for _item in obj["RentalChargeList"]] if obj.get("RentalChargeList") is not None else None,
            "RentalFeeList": [FeeComponent.from_dict(_item) for _item in obj["RentalFeeList"]] if obj.get("RentalFeeList") is not None else None,
            "MarketplaceName": obj.get("MarketplaceName"),
            "RentalInitialValue": Currency.from_dict(obj["RentalInitialValue"]) if obj.get("RentalInitialValue") is not None else None,
            "RentalReimbursement": Currency.from_dict(obj["RentalReimbursement"]) if obj.get("RentalReimbursement") is not None else None,
            "RentalTaxWithheldList": [TaxWithheldComponent.from_dict(_item) for _item in obj["RentalTaxWithheldList"]] if obj.get("RentalTaxWithheldList") is not None else None
        })
        return _obj


