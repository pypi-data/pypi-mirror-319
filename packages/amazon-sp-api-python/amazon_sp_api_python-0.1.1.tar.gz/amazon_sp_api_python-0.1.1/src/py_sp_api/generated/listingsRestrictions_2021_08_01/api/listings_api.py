# coding: utf-8

"""
    Selling Partner API for Listings Restrictions

    The Selling Partner API for Listings Restrictions provides programmatic access to restrictions on Amazon catalog listings.  For more information, see the [Listings Restrictions API Use Case Guide](doc:listings-restrictions-api-v2021-08-01-use-case-guide).

    The version of the OpenAPI document: 2021-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.listingsRestrictions_2021_08_01.models.restriction_list import RestrictionList

from py_sp_api.generated.listingsRestrictions_2021_08_01.api_client import ApiClient, RequestSerialized
from py_sp_api.generated.listingsRestrictions_2021_08_01.api_response import ApiResponse
from py_sp_api.generated.listingsRestrictions_2021_08_01.rest import RESTResponseType


class ListingsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_listings_restrictions(
        self,
        asin: Annotated[StrictStr, Field(description="The Amazon Standard Identification Number (ASIN) of the item.")],
        seller_id: Annotated[StrictStr, Field(description="A selling partner identifier, such as a merchant account.")],
        marketplace_ids: Annotated[List[StrictStr], Field(description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        condition_type: Annotated[Optional[StrictStr], Field(description="The condition used to filter restrictions.")] = None,
        reason_locale: Annotated[Optional[StrictStr], Field(description="A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: \"en_US\", \"fr_CA\", \"fr_FR\". Localized messages default to \"en_US\" when a localization is not available in the specified locale.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RestrictionList:
        """get_listings_restrictions

        Returns listing restrictions for an item in the Amazon Catalog.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param asin: The Amazon Standard Identification Number (ASIN) of the item. (required)
        :type asin: str
        :param seller_id: A selling partner identifier, such as a merchant account. (required)
        :type seller_id: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param condition_type: The condition used to filter restrictions.
        :type condition_type: str
        :param reason_locale: A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: \"en_US\", \"fr_CA\", \"fr_FR\". Localized messages default to \"en_US\" when a localization is not available in the specified locale.
        :type reason_locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_restrictions_serialize(
            asin=asin,
            seller_id=seller_id,
            marketplace_ids=marketplace_ids,
            condition_type=condition_type,
            reason_locale=reason_locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestrictionList",
            '400': "List[Error]",
            '403': "List[Error]",
            '404': "List[Error]",
            '413': "List[Error]",
            '415': "List[Error]",
            '429': "List[Error]",
            '500': "List[Error]",
            '503': "List[Error]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_listings_restrictions_with_http_info(
        self,
        asin: Annotated[StrictStr, Field(description="The Amazon Standard Identification Number (ASIN) of the item.")],
        seller_id: Annotated[StrictStr, Field(description="A selling partner identifier, such as a merchant account.")],
        marketplace_ids: Annotated[List[StrictStr], Field(description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        condition_type: Annotated[Optional[StrictStr], Field(description="The condition used to filter restrictions.")] = None,
        reason_locale: Annotated[Optional[StrictStr], Field(description="A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: \"en_US\", \"fr_CA\", \"fr_FR\". Localized messages default to \"en_US\" when a localization is not available in the specified locale.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RestrictionList]:
        """get_listings_restrictions

        Returns listing restrictions for an item in the Amazon Catalog.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param asin: The Amazon Standard Identification Number (ASIN) of the item. (required)
        :type asin: str
        :param seller_id: A selling partner identifier, such as a merchant account. (required)
        :type seller_id: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param condition_type: The condition used to filter restrictions.
        :type condition_type: str
        :param reason_locale: A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: \"en_US\", \"fr_CA\", \"fr_FR\". Localized messages default to \"en_US\" when a localization is not available in the specified locale.
        :type reason_locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_restrictions_serialize(
            asin=asin,
            seller_id=seller_id,
            marketplace_ids=marketplace_ids,
            condition_type=condition_type,
            reason_locale=reason_locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestrictionList",
            '400': "List[Error]",
            '403': "List[Error]",
            '404': "List[Error]",
            '413': "List[Error]",
            '415': "List[Error]",
            '429': "List[Error]",
            '500': "List[Error]",
            '503': "List[Error]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_listings_restrictions_without_preload_content(
        self,
        asin: Annotated[StrictStr, Field(description="The Amazon Standard Identification Number (ASIN) of the item.")],
        seller_id: Annotated[StrictStr, Field(description="A selling partner identifier, such as a merchant account.")],
        marketplace_ids: Annotated[List[StrictStr], Field(description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        condition_type: Annotated[Optional[StrictStr], Field(description="The condition used to filter restrictions.")] = None,
        reason_locale: Annotated[Optional[StrictStr], Field(description="A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: \"en_US\", \"fr_CA\", \"fr_FR\". Localized messages default to \"en_US\" when a localization is not available in the specified locale.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_listings_restrictions

        Returns listing restrictions for an item in the Amazon Catalog.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param asin: The Amazon Standard Identification Number (ASIN) of the item. (required)
        :type asin: str
        :param seller_id: A selling partner identifier, such as a merchant account. (required)
        :type seller_id: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param condition_type: The condition used to filter restrictions.
        :type condition_type: str
        :param reason_locale: A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: \"en_US\", \"fr_CA\", \"fr_FR\". Localized messages default to \"en_US\" when a localization is not available in the specified locale.
        :type reason_locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_restrictions_serialize(
            asin=asin,
            seller_id=seller_id,
            marketplace_ids=marketplace_ids,
            condition_type=condition_type,
            reason_locale=reason_locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestrictionList",
            '400': "List[Error]",
            '403': "List[Error]",
            '404': "List[Error]",
            '413': "List[Error]",
            '415': "List[Error]",
            '429': "List[Error]",
            '500': "List[Error]",
            '503': "List[Error]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_listings_restrictions_serialize(
        self,
        asin,
        seller_id,
        marketplace_ids,
        condition_type,
        reason_locale,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if asin is not None:
            
            _query_params.append(('asin', asin))
            
        if condition_type is not None:
            
            _query_params.append(('conditionType', condition_type))
            
        if seller_id is not None:
            
            _query_params.append(('sellerId', seller_id))
            
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        if reason_locale is not None:
            
            _query_params.append(('reasonLocale', reason_locale))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/listings/2021-08-01/restrictions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


