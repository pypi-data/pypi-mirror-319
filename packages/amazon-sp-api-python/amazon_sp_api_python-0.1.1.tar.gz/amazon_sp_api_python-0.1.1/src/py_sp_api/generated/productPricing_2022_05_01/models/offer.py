# coding: utf-8

"""
    Selling Partner API for Pricing

    The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).

    The version of the OpenAPI document: 2022-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.productPricing_2022_05_01.models.condition import Condition
from py_sp_api.generated.productPricing_2022_05_01.models.fulfillment_type import FulfillmentType
from py_sp_api.generated.productPricing_2022_05_01.models.money_type import MoneyType
from py_sp_api.generated.productPricing_2022_05_01.models.points import Points
from py_sp_api.generated.productPricing_2022_05_01.models.prime_details import PrimeDetails
from py_sp_api.generated.productPricing_2022_05_01.models.shipping_option import ShippingOption
from typing import Optional, Set
from typing_extensions import Self

class Offer(BaseModel):
    """
    The offer data of a product.
    """ # noqa: E501
    seller_id: StrictStr = Field(description="The seller identifier for the offer.", alias="sellerId")
    condition: Condition
    sub_condition: Optional[StrictStr] = Field(default=None, description="The item subcondition of the offer.", alias="subCondition")
    fulfillment_type: FulfillmentType = Field(alias="fulfillmentType")
    listing_price: MoneyType = Field(alias="listingPrice")
    shipping_options: Optional[List[ShippingOption]] = Field(default=None, description="A list of shipping options associated with this offer", alias="shippingOptions")
    points: Optional[Points] = None
    prime_details: Optional[PrimeDetails] = Field(default=None, alias="primeDetails")
    __properties: ClassVar[List[str]] = ["sellerId", "condition", "subCondition", "fulfillmentType", "listingPrice", "shippingOptions", "points", "primeDetails"]

    @field_validator('sub_condition')
    def sub_condition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['New', 'Mint', 'VeryGood', 'Good', 'Acceptable', 'Poor', 'Club', 'OEM', 'Warranty', 'RefurbishedWarranty', 'Refurbished', 'OpenBox', 'Other']):
            raise ValueError("must be one of enum values ('New', 'Mint', 'VeryGood', 'Good', 'Acceptable', 'Poor', 'Club', 'OEM', 'Warranty', 'RefurbishedWarranty', 'Refurbished', 'OpenBox', 'Other')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Offer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of listing_price
        if self.listing_price:
            _dict['listingPrice'] = self.listing_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipping_options (list)
        _items = []
        if self.shipping_options:
            for _item_shipping_options in self.shipping_options:
                if _item_shipping_options:
                    _items.append(_item_shipping_options.to_dict())
            _dict['shippingOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of points
        if self.points:
            _dict['points'] = self.points.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prime_details
        if self.prime_details:
            _dict['primeDetails'] = self.prime_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Offer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sellerId": obj.get("sellerId"),
            "condition": obj.get("condition"),
            "subCondition": obj.get("subCondition"),
            "fulfillmentType": obj.get("fulfillmentType"),
            "listingPrice": MoneyType.from_dict(obj["listingPrice"]) if obj.get("listingPrice") is not None else None,
            "shippingOptions": [ShippingOption.from_dict(_item) for _item in obj["shippingOptions"]] if obj.get("shippingOptions") is not None else None,
            "points": Points.from_dict(obj["points"]) if obj.get("points") is not None else None,
            "primeDetails": PrimeDetails.from_dict(obj["primeDetails"]) if obj.get("primeDetails") is not None else None
        })
        return _obj


