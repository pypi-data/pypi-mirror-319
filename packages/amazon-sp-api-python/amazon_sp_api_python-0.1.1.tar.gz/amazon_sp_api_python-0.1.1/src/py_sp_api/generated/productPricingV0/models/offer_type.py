# coding: utf-8

"""
    Selling Partner API for Pricing

    The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.productPricingV0.models.money_type import MoneyType
from py_sp_api.generated.productPricingV0.models.offer_customer_type import OfferCustomerType
from py_sp_api.generated.productPricingV0.models.price_type import PriceType
from py_sp_api.generated.productPricingV0.models.quantity_discount_price_type import QuantityDiscountPriceType
from typing import Optional, Set
from typing_extensions import Self

class OfferType(BaseModel):
    """
    OfferType
    """ # noqa: E501
    offer_type: Optional[OfferCustomerType] = Field(default=None, alias="offerType")
    buying_price: PriceType = Field(alias="BuyingPrice")
    regular_price: MoneyType = Field(alias="RegularPrice")
    business_price: Optional[MoneyType] = Field(default=None, alias="businessPrice")
    quantity_discount_prices: Optional[List[QuantityDiscountPriceType]] = Field(default=None, alias="quantityDiscountPrices")
    fulfillment_channel: StrictStr = Field(description="The fulfillment channel for the offer listing. Possible values:  * Amazon - Fulfilled by Amazon. * Merchant - Fulfilled by the seller.", alias="FulfillmentChannel")
    item_condition: StrictStr = Field(description="The item condition for the offer listing. Possible values: New, Used, Collectible, Refurbished, or Club.", alias="ItemCondition")
    item_sub_condition: StrictStr = Field(description="The item subcondition for the offer listing. Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.", alias="ItemSubCondition")
    seller_sku: StrictStr = Field(description="The seller stock keeping unit (SKU) of the item.", alias="SellerSKU")
    __properties: ClassVar[List[str]] = ["offerType", "BuyingPrice", "RegularPrice", "businessPrice", "quantityDiscountPrices", "FulfillmentChannel", "ItemCondition", "ItemSubCondition", "SellerSKU"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OfferType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of buying_price
        if self.buying_price:
            _dict['BuyingPrice'] = self.buying_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of regular_price
        if self.regular_price:
            _dict['RegularPrice'] = self.regular_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of business_price
        if self.business_price:
            _dict['businessPrice'] = self.business_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in quantity_discount_prices (list)
        _items = []
        if self.quantity_discount_prices:
            for _item_quantity_discount_prices in self.quantity_discount_prices:
                if _item_quantity_discount_prices:
                    _items.append(_item_quantity_discount_prices.to_dict())
            _dict['quantityDiscountPrices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OfferType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "offerType": obj.get("offerType"),
            "BuyingPrice": PriceType.from_dict(obj["BuyingPrice"]) if obj.get("BuyingPrice") is not None else None,
            "RegularPrice": MoneyType.from_dict(obj["RegularPrice"]) if obj.get("RegularPrice") is not None else None,
            "businessPrice": MoneyType.from_dict(obj["businessPrice"]) if obj.get("businessPrice") is not None else None,
            "quantityDiscountPrices": [QuantityDiscountPriceType.from_dict(_item) for _item in obj["quantityDiscountPrices"]] if obj.get("quantityDiscountPrices") is not None else None,
            "FulfillmentChannel": obj.get("FulfillmentChannel"),
            "ItemCondition": obj.get("ItemCondition"),
            "ItemSubCondition": obj.get("ItemSubCondition"),
            "SellerSKU": obj.get("SellerSKU")
        })
        return _obj


