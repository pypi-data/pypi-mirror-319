# coding: utf-8

"""
    Selling Partner API for Pricing

    The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.productPricingV0.models.get_item_offers_batch_request import GetItemOffersBatchRequest
from py_sp_api.generated.productPricingV0.models.get_item_offers_batch_response import GetItemOffersBatchResponse
from py_sp_api.generated.productPricingV0.models.get_listing_offers_batch_request import GetListingOffersBatchRequest
from py_sp_api.generated.productPricingV0.models.get_listing_offers_batch_response import GetListingOffersBatchResponse
from py_sp_api.generated.productPricingV0.models.get_offers_response import GetOffersResponse
from py_sp_api.generated.productPricingV0.models.get_pricing_response import GetPricingResponse

from py_sp_api.generated.productPricingV0.api_client import ApiClient, RequestSerialized
from py_sp_api.generated.productPricingV0.api_response import ApiResponse
from py_sp_api.generated.productPricingV0.rest import RESTResponseType


class ProductPricingApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_competitive_pricing(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for which prices are returned.")],
        item_type: Annotated[StrictStr, Field(description="Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.")],
        asins: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.")] = None,
        skus: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="A list of up to twenty seller SKU values used to identify items in the given marketplace.")] = None,
        customer_type: Annotated[Optional[StrictStr], Field(description="Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetPricingResponse:
        """get_competitive_pricing

        Returns competitive pricing information for a seller's offer listings based on seller SKU or ASIN.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for which prices are returned. (required)
        :type marketplace_id: str
        :param item_type: Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku. (required)
        :type item_type: str
        :param asins: A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
        :type asins: List[str]
        :param skus: A list of up to twenty seller SKU values used to identify items in the given marketplace.
        :type skus: List[str]
        :param customer_type: Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer.
        :type customer_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_competitive_pricing_serialize(
            marketplace_id=marketplace_id,
            item_type=item_type,
            asins=asins,
            skus=skus,
            customer_type=customer_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPricingResponse",
            '400': "GetPricingResponse",
            '401': "GetPricingResponse",
            '403': "GetPricingResponse",
            '404': "GetPricingResponse",
            '429': "GetPricingResponse",
            '500': "GetPricingResponse",
            '503': "GetPricingResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_competitive_pricing_with_http_info(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for which prices are returned.")],
        item_type: Annotated[StrictStr, Field(description="Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.")],
        asins: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.")] = None,
        skus: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="A list of up to twenty seller SKU values used to identify items in the given marketplace.")] = None,
        customer_type: Annotated[Optional[StrictStr], Field(description="Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetPricingResponse]:
        """get_competitive_pricing

        Returns competitive pricing information for a seller's offer listings based on seller SKU or ASIN.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for which prices are returned. (required)
        :type marketplace_id: str
        :param item_type: Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku. (required)
        :type item_type: str
        :param asins: A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
        :type asins: List[str]
        :param skus: A list of up to twenty seller SKU values used to identify items in the given marketplace.
        :type skus: List[str]
        :param customer_type: Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer.
        :type customer_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_competitive_pricing_serialize(
            marketplace_id=marketplace_id,
            item_type=item_type,
            asins=asins,
            skus=skus,
            customer_type=customer_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPricingResponse",
            '400': "GetPricingResponse",
            '401': "GetPricingResponse",
            '403': "GetPricingResponse",
            '404': "GetPricingResponse",
            '429': "GetPricingResponse",
            '500': "GetPricingResponse",
            '503': "GetPricingResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_competitive_pricing_without_preload_content(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for which prices are returned.")],
        item_type: Annotated[StrictStr, Field(description="Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.")],
        asins: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.")] = None,
        skus: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="A list of up to twenty seller SKU values used to identify items in the given marketplace.")] = None,
        customer_type: Annotated[Optional[StrictStr], Field(description="Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_competitive_pricing

        Returns competitive pricing information for a seller's offer listings based on seller SKU or ASIN.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for which prices are returned. (required)
        :type marketplace_id: str
        :param item_type: Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku. (required)
        :type item_type: str
        :param asins: A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
        :type asins: List[str]
        :param skus: A list of up to twenty seller SKU values used to identify items in the given marketplace.
        :type skus: List[str]
        :param customer_type: Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer.
        :type customer_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_competitive_pricing_serialize(
            marketplace_id=marketplace_id,
            item_type=item_type,
            asins=asins,
            skus=skus,
            customer_type=customer_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPricingResponse",
            '400': "GetPricingResponse",
            '401': "GetPricingResponse",
            '403': "GetPricingResponse",
            '404': "GetPricingResponse",
            '429': "GetPricingResponse",
            '500': "GetPricingResponse",
            '503': "GetPricingResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_competitive_pricing_serialize(
        self,
        marketplace_id,
        item_type,
        asins,
        skus,
        customer_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'Asins': 'csv',
            'Skus': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if marketplace_id is not None:
            
            _query_params.append(('MarketplaceId', marketplace_id))
            
        if asins is not None:
            
            _query_params.append(('Asins', asins))
            
        if skus is not None:
            
            _query_params.append(('Skus', skus))
            
        if item_type is not None:
            
            _query_params.append(('ItemType', item_type))
            
        if customer_type is not None:
            
            _query_params.append(('CustomerType', customer_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/products/pricing/v0/competitivePrice',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_item_offers(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for which prices are returned.")],
        item_condition: Annotated[StrictStr, Field(description="Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.")],
        asin: Annotated[StrictStr, Field(description="The Amazon Standard Identification Number (ASIN) of the item.")],
        customer_type: Annotated[Optional[StrictStr], Field(description="Indicates whether to request Consumer or Business offers. Default is Consumer.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetOffersResponse:
        """get_item_offers

        Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for which prices are returned. (required)
        :type marketplace_id: str
        :param item_condition: Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (required)
        :type item_condition: str
        :param asin: The Amazon Standard Identification Number (ASIN) of the item. (required)
        :type asin: str
        :param customer_type: Indicates whether to request Consumer or Business offers. Default is Consumer.
        :type customer_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_item_offers_serialize(
            marketplace_id=marketplace_id,
            item_condition=item_condition,
            asin=asin,
            customer_type=customer_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetOffersResponse",
            '400': "GetOffersResponse",
            '401': "GetOffersResponse",
            '403': "GetOffersResponse",
            '404': "GetOffersResponse",
            '429': "GetOffersResponse",
            '500': "GetOffersResponse",
            '503': "GetOffersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_item_offers_with_http_info(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for which prices are returned.")],
        item_condition: Annotated[StrictStr, Field(description="Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.")],
        asin: Annotated[StrictStr, Field(description="The Amazon Standard Identification Number (ASIN) of the item.")],
        customer_type: Annotated[Optional[StrictStr], Field(description="Indicates whether to request Consumer or Business offers. Default is Consumer.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetOffersResponse]:
        """get_item_offers

        Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for which prices are returned. (required)
        :type marketplace_id: str
        :param item_condition: Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (required)
        :type item_condition: str
        :param asin: The Amazon Standard Identification Number (ASIN) of the item. (required)
        :type asin: str
        :param customer_type: Indicates whether to request Consumer or Business offers. Default is Consumer.
        :type customer_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_item_offers_serialize(
            marketplace_id=marketplace_id,
            item_condition=item_condition,
            asin=asin,
            customer_type=customer_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetOffersResponse",
            '400': "GetOffersResponse",
            '401': "GetOffersResponse",
            '403': "GetOffersResponse",
            '404': "GetOffersResponse",
            '429': "GetOffersResponse",
            '500': "GetOffersResponse",
            '503': "GetOffersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_item_offers_without_preload_content(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for which prices are returned.")],
        item_condition: Annotated[StrictStr, Field(description="Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.")],
        asin: Annotated[StrictStr, Field(description="The Amazon Standard Identification Number (ASIN) of the item.")],
        customer_type: Annotated[Optional[StrictStr], Field(description="Indicates whether to request Consumer or Business offers. Default is Consumer.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_item_offers

        Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for which prices are returned. (required)
        :type marketplace_id: str
        :param item_condition: Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (required)
        :type item_condition: str
        :param asin: The Amazon Standard Identification Number (ASIN) of the item. (required)
        :type asin: str
        :param customer_type: Indicates whether to request Consumer or Business offers. Default is Consumer.
        :type customer_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_item_offers_serialize(
            marketplace_id=marketplace_id,
            item_condition=item_condition,
            asin=asin,
            customer_type=customer_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetOffersResponse",
            '400': "GetOffersResponse",
            '401': "GetOffersResponse",
            '403': "GetOffersResponse",
            '404': "GetOffersResponse",
            '429': "GetOffersResponse",
            '500': "GetOffersResponse",
            '503': "GetOffersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_item_offers_serialize(
        self,
        marketplace_id,
        item_condition,
        asin,
        customer_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if asin is not None:
            _path_params['Asin'] = asin
        # process the query parameters
        if marketplace_id is not None:
            
            _query_params.append(('MarketplaceId', marketplace_id))
            
        if item_condition is not None:
            
            _query_params.append(('ItemCondition', item_condition))
            
        if customer_type is not None:
            
            _query_params.append(('CustomerType', customer_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/products/pricing/v0/items/{Asin}/offers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_item_offers_batch(
        self,
        get_item_offers_batch_request_body: GetItemOffersBatchRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetItemOffersBatchResponse:
        """get_item_offers_batch

        Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param get_item_offers_batch_request_body: (required)
        :type get_item_offers_batch_request_body: GetItemOffersBatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_item_offers_batch_serialize(
            get_item_offers_batch_request_body=get_item_offers_batch_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetItemOffersBatchResponse",
            '400': "Errors",
            '401': "Errors",
            '403': "Errors",
            '404': "Errors",
            '429': "Errors",
            '500': "Errors",
            '503': "Errors",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_item_offers_batch_with_http_info(
        self,
        get_item_offers_batch_request_body: GetItemOffersBatchRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetItemOffersBatchResponse]:
        """get_item_offers_batch

        Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param get_item_offers_batch_request_body: (required)
        :type get_item_offers_batch_request_body: GetItemOffersBatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_item_offers_batch_serialize(
            get_item_offers_batch_request_body=get_item_offers_batch_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetItemOffersBatchResponse",
            '400': "Errors",
            '401': "Errors",
            '403': "Errors",
            '404': "Errors",
            '429': "Errors",
            '500': "Errors",
            '503': "Errors",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_item_offers_batch_without_preload_content(
        self,
        get_item_offers_batch_request_body: GetItemOffersBatchRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_item_offers_batch

        Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param get_item_offers_batch_request_body: (required)
        :type get_item_offers_batch_request_body: GetItemOffersBatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_item_offers_batch_serialize(
            get_item_offers_batch_request_body=get_item_offers_batch_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetItemOffersBatchResponse",
            '400': "Errors",
            '401': "Errors",
            '403': "Errors",
            '404': "Errors",
            '429': "Errors",
            '500': "Errors",
            '503': "Errors",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_item_offers_batch_serialize(
        self,
        get_item_offers_batch_request_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if get_item_offers_batch_request_body is not None:
            _body_params = get_item_offers_batch_request_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/batches/products/pricing/v0/itemOffers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_listing_offers(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for which prices are returned.")],
        item_condition: Annotated[StrictStr, Field(description="Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.")],
        seller_sku: Annotated[StrictStr, Field(description="Identifies an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.")],
        customer_type: Annotated[Optional[StrictStr], Field(description="Indicates whether to request Consumer or Business offers. Default is Consumer.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetOffersResponse:
        """get_listing_offers

        Returns the lowest priced offers for a single SKU listing.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for which prices are returned. (required)
        :type marketplace_id: str
        :param item_condition: Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (required)
        :type item_condition: str
        :param seller_sku: Identifies an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit. (required)
        :type seller_sku: str
        :param customer_type: Indicates whether to request Consumer or Business offers. Default is Consumer.
        :type customer_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listing_offers_serialize(
            marketplace_id=marketplace_id,
            item_condition=item_condition,
            seller_sku=seller_sku,
            customer_type=customer_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetOffersResponse",
            '400': "GetOffersResponse",
            '401': "GetOffersResponse",
            '403': "GetOffersResponse",
            '404': "GetOffersResponse",
            '429': "GetOffersResponse",
            '500': "GetOffersResponse",
            '503': "GetOffersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_listing_offers_with_http_info(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for which prices are returned.")],
        item_condition: Annotated[StrictStr, Field(description="Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.")],
        seller_sku: Annotated[StrictStr, Field(description="Identifies an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.")],
        customer_type: Annotated[Optional[StrictStr], Field(description="Indicates whether to request Consumer or Business offers. Default is Consumer.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetOffersResponse]:
        """get_listing_offers

        Returns the lowest priced offers for a single SKU listing.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for which prices are returned. (required)
        :type marketplace_id: str
        :param item_condition: Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (required)
        :type item_condition: str
        :param seller_sku: Identifies an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit. (required)
        :type seller_sku: str
        :param customer_type: Indicates whether to request Consumer or Business offers. Default is Consumer.
        :type customer_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listing_offers_serialize(
            marketplace_id=marketplace_id,
            item_condition=item_condition,
            seller_sku=seller_sku,
            customer_type=customer_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetOffersResponse",
            '400': "GetOffersResponse",
            '401': "GetOffersResponse",
            '403': "GetOffersResponse",
            '404': "GetOffersResponse",
            '429': "GetOffersResponse",
            '500': "GetOffersResponse",
            '503': "GetOffersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_listing_offers_without_preload_content(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for which prices are returned.")],
        item_condition: Annotated[StrictStr, Field(description="Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.")],
        seller_sku: Annotated[StrictStr, Field(description="Identifies an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.")],
        customer_type: Annotated[Optional[StrictStr], Field(description="Indicates whether to request Consumer or Business offers. Default is Consumer.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_listing_offers

        Returns the lowest priced offers for a single SKU listing.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for which prices are returned. (required)
        :type marketplace_id: str
        :param item_condition: Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (required)
        :type item_condition: str
        :param seller_sku: Identifies an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit. (required)
        :type seller_sku: str
        :param customer_type: Indicates whether to request Consumer or Business offers. Default is Consumer.
        :type customer_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listing_offers_serialize(
            marketplace_id=marketplace_id,
            item_condition=item_condition,
            seller_sku=seller_sku,
            customer_type=customer_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetOffersResponse",
            '400': "GetOffersResponse",
            '401': "GetOffersResponse",
            '403': "GetOffersResponse",
            '404': "GetOffersResponse",
            '429': "GetOffersResponse",
            '500': "GetOffersResponse",
            '503': "GetOffersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_listing_offers_serialize(
        self,
        marketplace_id,
        item_condition,
        seller_sku,
        customer_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if seller_sku is not None:
            _path_params['SellerSKU'] = seller_sku
        # process the query parameters
        if marketplace_id is not None:
            
            _query_params.append(('MarketplaceId', marketplace_id))
            
        if item_condition is not None:
            
            _query_params.append(('ItemCondition', item_condition))
            
        if customer_type is not None:
            
            _query_params.append(('CustomerType', customer_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/products/pricing/v0/listings/{SellerSKU}/offers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_listing_offers_batch(
        self,
        get_listing_offers_batch_request_body: GetListingOffersBatchRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetListingOffersBatchResponse:
        """get_listing_offers_batch

        Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param get_listing_offers_batch_request_body: (required)
        :type get_listing_offers_batch_request_body: GetListingOffersBatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listing_offers_batch_serialize(
            get_listing_offers_batch_request_body=get_listing_offers_batch_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetListingOffersBatchResponse",
            '400': "Errors",
            '401': "Errors",
            '403': "Errors",
            '404': "Errors",
            '429': "Errors",
            '500': "Errors",
            '503': "Errors",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_listing_offers_batch_with_http_info(
        self,
        get_listing_offers_batch_request_body: GetListingOffersBatchRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetListingOffersBatchResponse]:
        """get_listing_offers_batch

        Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param get_listing_offers_batch_request_body: (required)
        :type get_listing_offers_batch_request_body: GetListingOffersBatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listing_offers_batch_serialize(
            get_listing_offers_batch_request_body=get_listing_offers_batch_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetListingOffersBatchResponse",
            '400': "Errors",
            '401': "Errors",
            '403': "Errors",
            '404': "Errors",
            '429': "Errors",
            '500': "Errors",
            '503': "Errors",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_listing_offers_batch_without_preload_content(
        self,
        get_listing_offers_batch_request_body: GetListingOffersBatchRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_listing_offers_batch

        Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param get_listing_offers_batch_request_body: (required)
        :type get_listing_offers_batch_request_body: GetListingOffersBatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listing_offers_batch_serialize(
            get_listing_offers_batch_request_body=get_listing_offers_batch_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetListingOffersBatchResponse",
            '400': "Errors",
            '401': "Errors",
            '403': "Errors",
            '404': "Errors",
            '429': "Errors",
            '500': "Errors",
            '503': "Errors",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_listing_offers_batch_serialize(
        self,
        get_listing_offers_batch_request_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if get_listing_offers_batch_request_body is not None:
            _body_params = get_listing_offers_batch_request_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/batches/products/pricing/v0/listingOffers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_pricing(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for which prices are returned.")],
        item_type: Annotated[StrictStr, Field(description="Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.")],
        asins: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.")] = None,
        skus: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="A list of up to twenty seller SKU values used to identify items in the given marketplace.")] = None,
        item_condition: Annotated[Optional[StrictStr], Field(description="Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.")] = None,
        offer_type: Annotated[Optional[StrictStr], Field(description="Indicates whether to request pricing information for the seller's B2C or B2B offers. Default is B2C.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetPricingResponse:
        """get_pricing

        Returns pricing information for a seller's offer listings based on seller SKU or ASIN.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for which prices are returned. (required)
        :type marketplace_id: str
        :param item_type: Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. (required)
        :type item_type: str
        :param asins: A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
        :type asins: List[str]
        :param skus: A list of up to twenty seller SKU values used to identify items in the given marketplace.
        :type skus: List[str]
        :param item_condition: Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
        :type item_condition: str
        :param offer_type: Indicates whether to request pricing information for the seller's B2C or B2B offers. Default is B2C.
        :type offer_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pricing_serialize(
            marketplace_id=marketplace_id,
            item_type=item_type,
            asins=asins,
            skus=skus,
            item_condition=item_condition,
            offer_type=offer_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPricingResponse",
            '400': "GetPricingResponse",
            '401': "GetPricingResponse",
            '403': "GetPricingResponse",
            '404': "GetPricingResponse",
            '429': "GetPricingResponse",
            '500': "GetPricingResponse",
            '503': "GetPricingResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_pricing_with_http_info(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for which prices are returned.")],
        item_type: Annotated[StrictStr, Field(description="Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.")],
        asins: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.")] = None,
        skus: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="A list of up to twenty seller SKU values used to identify items in the given marketplace.")] = None,
        item_condition: Annotated[Optional[StrictStr], Field(description="Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.")] = None,
        offer_type: Annotated[Optional[StrictStr], Field(description="Indicates whether to request pricing information for the seller's B2C or B2B offers. Default is B2C.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetPricingResponse]:
        """get_pricing

        Returns pricing information for a seller's offer listings based on seller SKU or ASIN.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for which prices are returned. (required)
        :type marketplace_id: str
        :param item_type: Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. (required)
        :type item_type: str
        :param asins: A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
        :type asins: List[str]
        :param skus: A list of up to twenty seller SKU values used to identify items in the given marketplace.
        :type skus: List[str]
        :param item_condition: Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
        :type item_condition: str
        :param offer_type: Indicates whether to request pricing information for the seller's B2C or B2B offers. Default is B2C.
        :type offer_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pricing_serialize(
            marketplace_id=marketplace_id,
            item_type=item_type,
            asins=asins,
            skus=skus,
            item_condition=item_condition,
            offer_type=offer_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPricingResponse",
            '400': "GetPricingResponse",
            '401': "GetPricingResponse",
            '403': "GetPricingResponse",
            '404': "GetPricingResponse",
            '429': "GetPricingResponse",
            '500': "GetPricingResponse",
            '503': "GetPricingResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_pricing_without_preload_content(
        self,
        marketplace_id: Annotated[StrictStr, Field(description="A marketplace identifier. Specifies the marketplace for which prices are returned.")],
        item_type: Annotated[StrictStr, Field(description="Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.")],
        asins: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.")] = None,
        skus: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="A list of up to twenty seller SKU values used to identify items in the given marketplace.")] = None,
        item_condition: Annotated[Optional[StrictStr], Field(description="Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.")] = None,
        offer_type: Annotated[Optional[StrictStr], Field(description="Indicates whether to request pricing information for the seller's B2C or B2B offers. Default is B2C.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_pricing

        Returns pricing information for a seller's offer listings based on seller SKU or ASIN.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param marketplace_id: A marketplace identifier. Specifies the marketplace for which prices are returned. (required)
        :type marketplace_id: str
        :param item_type: Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. (required)
        :type item_type: str
        :param asins: A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
        :type asins: List[str]
        :param skus: A list of up to twenty seller SKU values used to identify items in the given marketplace.
        :type skus: List[str]
        :param item_condition: Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
        :type item_condition: str
        :param offer_type: Indicates whether to request pricing information for the seller's B2C or B2B offers. Default is B2C.
        :type offer_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pricing_serialize(
            marketplace_id=marketplace_id,
            item_type=item_type,
            asins=asins,
            skus=skus,
            item_condition=item_condition,
            offer_type=offer_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPricingResponse",
            '400': "GetPricingResponse",
            '401': "GetPricingResponse",
            '403': "GetPricingResponse",
            '404': "GetPricingResponse",
            '429': "GetPricingResponse",
            '500': "GetPricingResponse",
            '503': "GetPricingResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_pricing_serialize(
        self,
        marketplace_id,
        item_type,
        asins,
        skus,
        item_condition,
        offer_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'Asins': 'csv',
            'Skus': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if marketplace_id is not None:
            
            _query_params.append(('MarketplaceId', marketplace_id))
            
        if asins is not None:
            
            _query_params.append(('Asins', asins))
            
        if skus is not None:
            
            _query_params.append(('Skus', skus))
            
        if item_type is not None:
            
            _query_params.append(('ItemType', item_type))
            
        if item_condition is not None:
            
            _query_params.append(('ItemCondition', item_condition))
            
        if offer_type is not None:
            
            _query_params.append(('OfferType', offer_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/products/pricing/v0/price',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


