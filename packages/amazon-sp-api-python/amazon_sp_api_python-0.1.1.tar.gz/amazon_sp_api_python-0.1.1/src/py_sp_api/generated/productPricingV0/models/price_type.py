# coding: utf-8

"""
    Selling Partner API for Pricing

    The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.productPricingV0.models.money_type import MoneyType
from py_sp_api.generated.productPricingV0.models.points import Points
from typing import Optional, Set
from typing_extensions import Self

class PriceType(BaseModel):
    """
    PriceType
    """ # noqa: E501
    landed_price: Optional[MoneyType] = Field(default=None, alias="LandedPrice")
    listing_price: MoneyType = Field(alias="ListingPrice")
    shipping: Optional[MoneyType] = Field(default=None, alias="Shipping")
    points: Optional[Points] = Field(default=None, alias="Points")
    __properties: ClassVar[List[str]] = ["LandedPrice", "ListingPrice", "Shipping", "Points"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PriceType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of landed_price
        if self.landed_price:
            _dict['LandedPrice'] = self.landed_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of listing_price
        if self.listing_price:
            _dict['ListingPrice'] = self.listing_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping
        if self.shipping:
            _dict['Shipping'] = self.shipping.to_dict()
        # override the default output from pydantic by calling `to_dict()` of points
        if self.points:
            _dict['Points'] = self.points.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PriceType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "LandedPrice": MoneyType.from_dict(obj["LandedPrice"]) if obj.get("LandedPrice") is not None else None,
            "ListingPrice": MoneyType.from_dict(obj["ListingPrice"]) if obj.get("ListingPrice") is not None else None,
            "Shipping": MoneyType.from_dict(obj["Shipping"]) if obj.get("Shipping") is not None else None,
            "Points": Points.from_dict(obj["Points"]) if obj.get("Points") is not None else None
        })
        return _obj


