# coding: utf-8

"""
    Selling Partner API for Messaging

    With the Messaging API you can build applications that send messages to buyers. You can get a list of message types that are available for an order that you specify, then call an operation that sends a message to the buyer for that order. The Messaging API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import List
from typing_extensions import Annotated
from py_sp_api.generated.messaging.models.create_amazon_motors_request import CreateAmazonMotorsRequest
from py_sp_api.generated.messaging.models.create_amazon_motors_response import CreateAmazonMotorsResponse
from py_sp_api.generated.messaging.models.create_confirm_customization_details_request import CreateConfirmCustomizationDetailsRequest
from py_sp_api.generated.messaging.models.create_confirm_customization_details_response import CreateConfirmCustomizationDetailsResponse
from py_sp_api.generated.messaging.models.create_confirm_delivery_details_request import CreateConfirmDeliveryDetailsRequest
from py_sp_api.generated.messaging.models.create_confirm_delivery_details_response import CreateConfirmDeliveryDetailsResponse
from py_sp_api.generated.messaging.models.create_confirm_order_details_request import CreateConfirmOrderDetailsRequest
from py_sp_api.generated.messaging.models.create_confirm_order_details_response import CreateConfirmOrderDetailsResponse
from py_sp_api.generated.messaging.models.create_confirm_service_details_request import CreateConfirmServiceDetailsRequest
from py_sp_api.generated.messaging.models.create_confirm_service_details_response import CreateConfirmServiceDetailsResponse
from py_sp_api.generated.messaging.models.create_digital_access_key_request import CreateDigitalAccessKeyRequest
from py_sp_api.generated.messaging.models.create_digital_access_key_response import CreateDigitalAccessKeyResponse
from py_sp_api.generated.messaging.models.create_legal_disclosure_request import CreateLegalDisclosureRequest
from py_sp_api.generated.messaging.models.create_legal_disclosure_response import CreateLegalDisclosureResponse
from py_sp_api.generated.messaging.models.create_negative_feedback_removal_response import CreateNegativeFeedbackRemovalResponse
from py_sp_api.generated.messaging.models.create_unexpected_problem_request import CreateUnexpectedProblemRequest
from py_sp_api.generated.messaging.models.create_unexpected_problem_response import CreateUnexpectedProblemResponse
from py_sp_api.generated.messaging.models.create_warranty_request import CreateWarrantyRequest
from py_sp_api.generated.messaging.models.create_warranty_response import CreateWarrantyResponse
from py_sp_api.generated.messaging.models.get_attributes_response import GetAttributesResponse
from py_sp_api.generated.messaging.models.get_messaging_actions_for_order_response import GetMessagingActionsForOrderResponse
from py_sp_api.generated.messaging.models.invoice_request import InvoiceRequest
from py_sp_api.generated.messaging.models.invoice_response import InvoiceResponse

from py_sp_api.generated.messaging.api_client import ApiClient, RequestSerialized
from py_sp_api.generated.messaging.api_response import ApiResponse
from py_sp_api.generated.messaging.rest import RESTResponseType


class MessagingApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def confirm_customization_details(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateConfirmCustomizationDetailsRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateConfirmCustomizationDetailsResponse:
        """confirm_customization_details

        Sends a message asking a buyer to provide or verify customization details such as name spelling, images, initials, etc.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateConfirmCustomizationDetailsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._confirm_customization_details_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateConfirmCustomizationDetailsResponse",
            '400': "CreateConfirmCustomizationDetailsResponse",
            '403': "CreateConfirmCustomizationDetailsResponse",
            '404': "CreateConfirmCustomizationDetailsResponse",
            '413': "CreateConfirmCustomizationDetailsResponse",
            '415': "CreateConfirmCustomizationDetailsResponse",
            '429': "CreateConfirmCustomizationDetailsResponse",
            '500': "CreateConfirmCustomizationDetailsResponse",
            '503': "CreateConfirmCustomizationDetailsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def confirm_customization_details_with_http_info(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateConfirmCustomizationDetailsRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateConfirmCustomizationDetailsResponse]:
        """confirm_customization_details

        Sends a message asking a buyer to provide or verify customization details such as name spelling, images, initials, etc.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateConfirmCustomizationDetailsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._confirm_customization_details_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateConfirmCustomizationDetailsResponse",
            '400': "CreateConfirmCustomizationDetailsResponse",
            '403': "CreateConfirmCustomizationDetailsResponse",
            '404': "CreateConfirmCustomizationDetailsResponse",
            '413': "CreateConfirmCustomizationDetailsResponse",
            '415': "CreateConfirmCustomizationDetailsResponse",
            '429': "CreateConfirmCustomizationDetailsResponse",
            '500': "CreateConfirmCustomizationDetailsResponse",
            '503': "CreateConfirmCustomizationDetailsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def confirm_customization_details_without_preload_content(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateConfirmCustomizationDetailsRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """confirm_customization_details

        Sends a message asking a buyer to provide or verify customization details such as name spelling, images, initials, etc.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateConfirmCustomizationDetailsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._confirm_customization_details_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateConfirmCustomizationDetailsResponse",
            '400': "CreateConfirmCustomizationDetailsResponse",
            '403': "CreateConfirmCustomizationDetailsResponse",
            '404': "CreateConfirmCustomizationDetailsResponse",
            '413': "CreateConfirmCustomizationDetailsResponse",
            '415': "CreateConfirmCustomizationDetailsResponse",
            '429': "CreateConfirmCustomizationDetailsResponse",
            '500': "CreateConfirmCustomizationDetailsResponse",
            '503': "CreateConfirmCustomizationDetailsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _confirm_customization_details_serialize(
        self,
        amazon_order_id,
        marketplace_ids,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if amazon_order_id is not None:
            _path_params['amazonOrderId'] = amazon_order_id
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/messaging/v1/orders/{amazonOrderId}/messages/confirmCustomizationDetails',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_amazon_motors(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateAmazonMotorsRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateAmazonMotorsResponse:
        """create_amazon_motors

        Sends a message to a buyer to provide details about an Amazon Motors order. This message can only be sent by Amazon Motors sellers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateAmazonMotorsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_amazon_motors_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateAmazonMotorsResponse",
            '400': "CreateAmazonMotorsResponse",
            '403': "CreateAmazonMotorsResponse",
            '404': "CreateAmazonMotorsResponse",
            '413': "CreateAmazonMotorsResponse",
            '415': "CreateAmazonMotorsResponse",
            '429': "CreateAmazonMotorsResponse",
            '500': "CreateAmazonMotorsResponse",
            '503': "CreateAmazonMotorsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_amazon_motors_with_http_info(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateAmazonMotorsRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateAmazonMotorsResponse]:
        """create_amazon_motors

        Sends a message to a buyer to provide details about an Amazon Motors order. This message can only be sent by Amazon Motors sellers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateAmazonMotorsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_amazon_motors_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateAmazonMotorsResponse",
            '400': "CreateAmazonMotorsResponse",
            '403': "CreateAmazonMotorsResponse",
            '404': "CreateAmazonMotorsResponse",
            '413': "CreateAmazonMotorsResponse",
            '415': "CreateAmazonMotorsResponse",
            '429': "CreateAmazonMotorsResponse",
            '500': "CreateAmazonMotorsResponse",
            '503': "CreateAmazonMotorsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_amazon_motors_without_preload_content(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateAmazonMotorsRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_amazon_motors

        Sends a message to a buyer to provide details about an Amazon Motors order. This message can only be sent by Amazon Motors sellers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateAmazonMotorsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_amazon_motors_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateAmazonMotorsResponse",
            '400': "CreateAmazonMotorsResponse",
            '403': "CreateAmazonMotorsResponse",
            '404': "CreateAmazonMotorsResponse",
            '413': "CreateAmazonMotorsResponse",
            '415': "CreateAmazonMotorsResponse",
            '429': "CreateAmazonMotorsResponse",
            '500': "CreateAmazonMotorsResponse",
            '503': "CreateAmazonMotorsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_amazon_motors_serialize(
        self,
        amazon_order_id,
        marketplace_ids,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if amazon_order_id is not None:
            _path_params['amazonOrderId'] = amazon_order_id
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/messaging/v1/orders/{amazonOrderId}/messages/amazonMotors',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_confirm_delivery_details(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateConfirmDeliveryDetailsRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateConfirmDeliveryDetailsResponse:
        """create_confirm_delivery_details

        Sends a message to a buyer to arrange a delivery or to confirm contact information for making a delivery.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateConfirmDeliveryDetailsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_confirm_delivery_details_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateConfirmDeliveryDetailsResponse",
            '400': "CreateConfirmDeliveryDetailsResponse",
            '403': "CreateConfirmDeliveryDetailsResponse",
            '404': "CreateConfirmDeliveryDetailsResponse",
            '413': "CreateConfirmDeliveryDetailsResponse",
            '415': "CreateConfirmDeliveryDetailsResponse",
            '429': "CreateConfirmDeliveryDetailsResponse",
            '500': "CreateConfirmDeliveryDetailsResponse",
            '503': "CreateConfirmDeliveryDetailsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_confirm_delivery_details_with_http_info(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateConfirmDeliveryDetailsRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateConfirmDeliveryDetailsResponse]:
        """create_confirm_delivery_details

        Sends a message to a buyer to arrange a delivery or to confirm contact information for making a delivery.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateConfirmDeliveryDetailsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_confirm_delivery_details_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateConfirmDeliveryDetailsResponse",
            '400': "CreateConfirmDeliveryDetailsResponse",
            '403': "CreateConfirmDeliveryDetailsResponse",
            '404': "CreateConfirmDeliveryDetailsResponse",
            '413': "CreateConfirmDeliveryDetailsResponse",
            '415': "CreateConfirmDeliveryDetailsResponse",
            '429': "CreateConfirmDeliveryDetailsResponse",
            '500': "CreateConfirmDeliveryDetailsResponse",
            '503': "CreateConfirmDeliveryDetailsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_confirm_delivery_details_without_preload_content(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateConfirmDeliveryDetailsRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_confirm_delivery_details

        Sends a message to a buyer to arrange a delivery or to confirm contact information for making a delivery.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateConfirmDeliveryDetailsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_confirm_delivery_details_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateConfirmDeliveryDetailsResponse",
            '400': "CreateConfirmDeliveryDetailsResponse",
            '403': "CreateConfirmDeliveryDetailsResponse",
            '404': "CreateConfirmDeliveryDetailsResponse",
            '413': "CreateConfirmDeliveryDetailsResponse",
            '415': "CreateConfirmDeliveryDetailsResponse",
            '429': "CreateConfirmDeliveryDetailsResponse",
            '500': "CreateConfirmDeliveryDetailsResponse",
            '503': "CreateConfirmDeliveryDetailsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_confirm_delivery_details_serialize(
        self,
        amazon_order_id,
        marketplace_ids,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if amazon_order_id is not None:
            _path_params['amazonOrderId'] = amazon_order_id
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/messaging/v1/orders/{amazonOrderId}/messages/confirmDeliveryDetails',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_confirm_order_details(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateConfirmOrderDetailsRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateConfirmOrderDetailsResponse:
        """create_confirm_order_details

        Sends a message to ask a buyer an order-related question prior to shipping their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateConfirmOrderDetailsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_confirm_order_details_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateConfirmOrderDetailsResponse",
            '400': "CreateConfirmOrderDetailsResponse",
            '403': "CreateConfirmOrderDetailsResponse",
            '404': "CreateConfirmOrderDetailsResponse",
            '413': "CreateConfirmOrderDetailsResponse",
            '415': "CreateConfirmOrderDetailsResponse",
            '429': "CreateConfirmOrderDetailsResponse",
            '500': "CreateConfirmOrderDetailsResponse",
            '503': "CreateConfirmOrderDetailsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_confirm_order_details_with_http_info(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateConfirmOrderDetailsRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateConfirmOrderDetailsResponse]:
        """create_confirm_order_details

        Sends a message to ask a buyer an order-related question prior to shipping their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateConfirmOrderDetailsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_confirm_order_details_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateConfirmOrderDetailsResponse",
            '400': "CreateConfirmOrderDetailsResponse",
            '403': "CreateConfirmOrderDetailsResponse",
            '404': "CreateConfirmOrderDetailsResponse",
            '413': "CreateConfirmOrderDetailsResponse",
            '415': "CreateConfirmOrderDetailsResponse",
            '429': "CreateConfirmOrderDetailsResponse",
            '500': "CreateConfirmOrderDetailsResponse",
            '503': "CreateConfirmOrderDetailsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_confirm_order_details_without_preload_content(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateConfirmOrderDetailsRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_confirm_order_details

        Sends a message to ask a buyer an order-related question prior to shipping their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateConfirmOrderDetailsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_confirm_order_details_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateConfirmOrderDetailsResponse",
            '400': "CreateConfirmOrderDetailsResponse",
            '403': "CreateConfirmOrderDetailsResponse",
            '404': "CreateConfirmOrderDetailsResponse",
            '413': "CreateConfirmOrderDetailsResponse",
            '415': "CreateConfirmOrderDetailsResponse",
            '429': "CreateConfirmOrderDetailsResponse",
            '500': "CreateConfirmOrderDetailsResponse",
            '503': "CreateConfirmOrderDetailsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_confirm_order_details_serialize(
        self,
        amazon_order_id,
        marketplace_ids,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if amazon_order_id is not None:
            _path_params['amazonOrderId'] = amazon_order_id
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/messaging/v1/orders/{amazonOrderId}/messages/confirmOrderDetails',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_confirm_service_details(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateConfirmServiceDetailsRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateConfirmServiceDetailsResponse:
        """create_confirm_service_details

        Sends a message to contact a Home Service customer to arrange a service call or to gather information prior to a service call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateConfirmServiceDetailsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_confirm_service_details_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateConfirmServiceDetailsResponse",
            '400': "CreateConfirmServiceDetailsResponse",
            '403': "CreateConfirmServiceDetailsResponse",
            '404': "CreateConfirmServiceDetailsResponse",
            '413': "CreateConfirmServiceDetailsResponse",
            '415': "CreateConfirmServiceDetailsResponse",
            '429': "CreateConfirmServiceDetailsResponse",
            '500': "CreateConfirmServiceDetailsResponse",
            '503': "CreateConfirmServiceDetailsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_confirm_service_details_with_http_info(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateConfirmServiceDetailsRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateConfirmServiceDetailsResponse]:
        """create_confirm_service_details

        Sends a message to contact a Home Service customer to arrange a service call or to gather information prior to a service call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateConfirmServiceDetailsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_confirm_service_details_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateConfirmServiceDetailsResponse",
            '400': "CreateConfirmServiceDetailsResponse",
            '403': "CreateConfirmServiceDetailsResponse",
            '404': "CreateConfirmServiceDetailsResponse",
            '413': "CreateConfirmServiceDetailsResponse",
            '415': "CreateConfirmServiceDetailsResponse",
            '429': "CreateConfirmServiceDetailsResponse",
            '500': "CreateConfirmServiceDetailsResponse",
            '503': "CreateConfirmServiceDetailsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_confirm_service_details_without_preload_content(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateConfirmServiceDetailsRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_confirm_service_details

        Sends a message to contact a Home Service customer to arrange a service call or to gather information prior to a service call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateConfirmServiceDetailsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_confirm_service_details_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateConfirmServiceDetailsResponse",
            '400': "CreateConfirmServiceDetailsResponse",
            '403': "CreateConfirmServiceDetailsResponse",
            '404': "CreateConfirmServiceDetailsResponse",
            '413': "CreateConfirmServiceDetailsResponse",
            '415': "CreateConfirmServiceDetailsResponse",
            '429': "CreateConfirmServiceDetailsResponse",
            '500': "CreateConfirmServiceDetailsResponse",
            '503': "CreateConfirmServiceDetailsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_confirm_service_details_serialize(
        self,
        amazon_order_id,
        marketplace_ids,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if amazon_order_id is not None:
            _path_params['amazonOrderId'] = amazon_order_id
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_digital_access_key(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateDigitalAccessKeyRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateDigitalAccessKeyResponse:
        """create_digital_access_key

        Sends a buyer a message to share a digital access key that is required to utilize digital content in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateDigitalAccessKeyRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_digital_access_key_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateDigitalAccessKeyResponse",
            '400': "CreateDigitalAccessKeyResponse",
            '403': "CreateDigitalAccessKeyResponse",
            '404': "CreateDigitalAccessKeyResponse",
            '413': "CreateDigitalAccessKeyResponse",
            '415': "CreateDigitalAccessKeyResponse",
            '429': "CreateDigitalAccessKeyResponse",
            '500': "CreateDigitalAccessKeyResponse",
            '503': "CreateDigitalAccessKeyResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_digital_access_key_with_http_info(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateDigitalAccessKeyRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateDigitalAccessKeyResponse]:
        """create_digital_access_key

        Sends a buyer a message to share a digital access key that is required to utilize digital content in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateDigitalAccessKeyRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_digital_access_key_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateDigitalAccessKeyResponse",
            '400': "CreateDigitalAccessKeyResponse",
            '403': "CreateDigitalAccessKeyResponse",
            '404': "CreateDigitalAccessKeyResponse",
            '413': "CreateDigitalAccessKeyResponse",
            '415': "CreateDigitalAccessKeyResponse",
            '429': "CreateDigitalAccessKeyResponse",
            '500': "CreateDigitalAccessKeyResponse",
            '503': "CreateDigitalAccessKeyResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_digital_access_key_without_preload_content(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateDigitalAccessKeyRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_digital_access_key

        Sends a buyer a message to share a digital access key that is required to utilize digital content in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateDigitalAccessKeyRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_digital_access_key_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateDigitalAccessKeyResponse",
            '400': "CreateDigitalAccessKeyResponse",
            '403': "CreateDigitalAccessKeyResponse",
            '404': "CreateDigitalAccessKeyResponse",
            '413': "CreateDigitalAccessKeyResponse",
            '415': "CreateDigitalAccessKeyResponse",
            '429': "CreateDigitalAccessKeyResponse",
            '500': "CreateDigitalAccessKeyResponse",
            '503': "CreateDigitalAccessKeyResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_digital_access_key_serialize(
        self,
        amazon_order_id,
        marketplace_ids,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if amazon_order_id is not None:
            _path_params['amazonOrderId'] = amazon_order_id
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/messaging/v1/orders/{amazonOrderId}/messages/digitalAccessKey',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_legal_disclosure(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateLegalDisclosureRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateLegalDisclosureResponse:
        """create_legal_disclosure

        Sends a critical message that contains documents that a seller is legally obligated to provide to the buyer. This message should only be used to deliver documents that are required by law.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateLegalDisclosureRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_legal_disclosure_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateLegalDisclosureResponse",
            '400': "CreateLegalDisclosureResponse",
            '403': "CreateLegalDisclosureResponse",
            '404': "CreateLegalDisclosureResponse",
            '413': "CreateLegalDisclosureResponse",
            '415': "CreateLegalDisclosureResponse",
            '429': "CreateLegalDisclosureResponse",
            '500': "CreateLegalDisclosureResponse",
            '503': "CreateLegalDisclosureResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_legal_disclosure_with_http_info(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateLegalDisclosureRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateLegalDisclosureResponse]:
        """create_legal_disclosure

        Sends a critical message that contains documents that a seller is legally obligated to provide to the buyer. This message should only be used to deliver documents that are required by law.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateLegalDisclosureRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_legal_disclosure_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateLegalDisclosureResponse",
            '400': "CreateLegalDisclosureResponse",
            '403': "CreateLegalDisclosureResponse",
            '404': "CreateLegalDisclosureResponse",
            '413': "CreateLegalDisclosureResponse",
            '415': "CreateLegalDisclosureResponse",
            '429': "CreateLegalDisclosureResponse",
            '500': "CreateLegalDisclosureResponse",
            '503': "CreateLegalDisclosureResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_legal_disclosure_without_preload_content(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateLegalDisclosureRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_legal_disclosure

        Sends a critical message that contains documents that a seller is legally obligated to provide to the buyer. This message should only be used to deliver documents that are required by law.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateLegalDisclosureRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_legal_disclosure_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateLegalDisclosureResponse",
            '400': "CreateLegalDisclosureResponse",
            '403': "CreateLegalDisclosureResponse",
            '404': "CreateLegalDisclosureResponse",
            '413': "CreateLegalDisclosureResponse",
            '415': "CreateLegalDisclosureResponse",
            '429': "CreateLegalDisclosureResponse",
            '500': "CreateLegalDisclosureResponse",
            '503': "CreateLegalDisclosureResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_legal_disclosure_serialize(
        self,
        amazon_order_id,
        marketplace_ids,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if amazon_order_id is not None:
            _path_params['amazonOrderId'] = amazon_order_id
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/messaging/v1/orders/{amazonOrderId}/messages/legalDisclosure',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_negative_feedback_removal(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateNegativeFeedbackRemovalResponse:
        """create_negative_feedback_removal

        Sends a non-critical message that asks a buyer to remove their negative feedback. This message should only be sent after the seller has resolved the buyer's problem.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_negative_feedback_removal_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateNegativeFeedbackRemovalResponse",
            '400': "CreateNegativeFeedbackRemovalResponse",
            '403': "CreateNegativeFeedbackRemovalResponse",
            '404': "CreateNegativeFeedbackRemovalResponse",
            '413': "CreateNegativeFeedbackRemovalResponse",
            '415': "CreateNegativeFeedbackRemovalResponse",
            '429': "CreateNegativeFeedbackRemovalResponse",
            '500': "CreateNegativeFeedbackRemovalResponse",
            '503': "CreateNegativeFeedbackRemovalResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_negative_feedback_removal_with_http_info(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateNegativeFeedbackRemovalResponse]:
        """create_negative_feedback_removal

        Sends a non-critical message that asks a buyer to remove their negative feedback. This message should only be sent after the seller has resolved the buyer's problem.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_negative_feedback_removal_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateNegativeFeedbackRemovalResponse",
            '400': "CreateNegativeFeedbackRemovalResponse",
            '403': "CreateNegativeFeedbackRemovalResponse",
            '404': "CreateNegativeFeedbackRemovalResponse",
            '413': "CreateNegativeFeedbackRemovalResponse",
            '415': "CreateNegativeFeedbackRemovalResponse",
            '429': "CreateNegativeFeedbackRemovalResponse",
            '500': "CreateNegativeFeedbackRemovalResponse",
            '503': "CreateNegativeFeedbackRemovalResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_negative_feedback_removal_without_preload_content(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_negative_feedback_removal

        Sends a non-critical message that asks a buyer to remove their negative feedback. This message should only be sent after the seller has resolved the buyer's problem.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_negative_feedback_removal_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateNegativeFeedbackRemovalResponse",
            '400': "CreateNegativeFeedbackRemovalResponse",
            '403': "CreateNegativeFeedbackRemovalResponse",
            '404': "CreateNegativeFeedbackRemovalResponse",
            '413': "CreateNegativeFeedbackRemovalResponse",
            '415': "CreateNegativeFeedbackRemovalResponse",
            '429': "CreateNegativeFeedbackRemovalResponse",
            '500': "CreateNegativeFeedbackRemovalResponse",
            '503': "CreateNegativeFeedbackRemovalResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_negative_feedback_removal_serialize(
        self,
        amazon_order_id,
        marketplace_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if amazon_order_id is not None:
            _path_params['amazonOrderId'] = amazon_order_id
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/messaging/v1/orders/{amazonOrderId}/messages/negativeFeedbackRemoval',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_unexpected_problem(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateUnexpectedProblemRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateUnexpectedProblemResponse:
        """create_unexpected_problem

        Sends a critical message to a buyer that an unexpected problem was encountered affecting the completion of the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateUnexpectedProblemRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_unexpected_problem_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateUnexpectedProblemResponse",
            '400': "CreateUnexpectedProblemResponse",
            '403': "CreateUnexpectedProblemResponse",
            '404': "CreateUnexpectedProblemResponse",
            '413': "CreateUnexpectedProblemResponse",
            '415': "CreateUnexpectedProblemResponse",
            '429': "CreateUnexpectedProblemResponse",
            '500': "CreateUnexpectedProblemResponse",
            '503': "CreateUnexpectedProblemResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_unexpected_problem_with_http_info(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateUnexpectedProblemRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateUnexpectedProblemResponse]:
        """create_unexpected_problem

        Sends a critical message to a buyer that an unexpected problem was encountered affecting the completion of the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateUnexpectedProblemRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_unexpected_problem_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateUnexpectedProblemResponse",
            '400': "CreateUnexpectedProblemResponse",
            '403': "CreateUnexpectedProblemResponse",
            '404': "CreateUnexpectedProblemResponse",
            '413': "CreateUnexpectedProblemResponse",
            '415': "CreateUnexpectedProblemResponse",
            '429': "CreateUnexpectedProblemResponse",
            '500': "CreateUnexpectedProblemResponse",
            '503': "CreateUnexpectedProblemResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_unexpected_problem_without_preload_content(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateUnexpectedProblemRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_unexpected_problem

        Sends a critical message to a buyer that an unexpected problem was encountered affecting the completion of the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateUnexpectedProblemRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_unexpected_problem_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateUnexpectedProblemResponse",
            '400': "CreateUnexpectedProblemResponse",
            '403': "CreateUnexpectedProblemResponse",
            '404': "CreateUnexpectedProblemResponse",
            '413': "CreateUnexpectedProblemResponse",
            '415': "CreateUnexpectedProblemResponse",
            '429': "CreateUnexpectedProblemResponse",
            '500': "CreateUnexpectedProblemResponse",
            '503': "CreateUnexpectedProblemResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_unexpected_problem_serialize(
        self,
        amazon_order_id,
        marketplace_ids,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if amazon_order_id is not None:
            _path_params['amazonOrderId'] = amazon_order_id
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/messaging/v1/orders/{amazonOrderId}/messages/unexpectedProblem',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_warranty(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateWarrantyRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateWarrantyResponse:
        """create_warranty

        Sends a message to a buyer to provide details about warranty information on a purchase in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateWarrantyRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_warranty_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateWarrantyResponse",
            '400': "CreateWarrantyResponse",
            '403': "CreateWarrantyResponse",
            '404': "CreateWarrantyResponse",
            '413': "CreateWarrantyResponse",
            '415': "CreateWarrantyResponse",
            '429': "CreateWarrantyResponse",
            '500': "CreateWarrantyResponse",
            '503': "CreateWarrantyResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_warranty_with_http_info(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateWarrantyRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateWarrantyResponse]:
        """create_warranty

        Sends a message to a buyer to provide details about warranty information on a purchase in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateWarrantyRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_warranty_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateWarrantyResponse",
            '400': "CreateWarrantyResponse",
            '403': "CreateWarrantyResponse",
            '404': "CreateWarrantyResponse",
            '413': "CreateWarrantyResponse",
            '415': "CreateWarrantyResponse",
            '429': "CreateWarrantyResponse",
            '500': "CreateWarrantyResponse",
            '503': "CreateWarrantyResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_warranty_without_preload_content(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[CreateWarrantyRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_warranty

        Sends a message to a buyer to provide details about warranty information on a purchase in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: CreateWarrantyRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_warranty_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateWarrantyResponse",
            '400': "CreateWarrantyResponse",
            '403': "CreateWarrantyResponse",
            '404': "CreateWarrantyResponse",
            '413': "CreateWarrantyResponse",
            '415': "CreateWarrantyResponse",
            '429': "CreateWarrantyResponse",
            '500': "CreateWarrantyResponse",
            '503': "CreateWarrantyResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_warranty_serialize(
        self,
        amazon_order_id,
        marketplace_ids,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if amazon_order_id is not None:
            _path_params['amazonOrderId'] = amazon_order_id
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/messaging/v1/orders/{amazonOrderId}/messages/warranty',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_attributes(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetAttributesResponse:
        """get_attributes

        Returns a response containing attributes related to an order. This includes buyer preferences.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_attributes_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAttributesResponse",
            '400': "GetAttributesResponse",
            '403': "GetAttributesResponse",
            '404': "GetAttributesResponse",
            '413': "GetAttributesResponse",
            '415': "GetAttributesResponse",
            '429': "GetAttributesResponse",
            '500': "GetAttributesResponse",
            '503': "GetAttributesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_attributes_with_http_info(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetAttributesResponse]:
        """get_attributes

        Returns a response containing attributes related to an order. This includes buyer preferences.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_attributes_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAttributesResponse",
            '400': "GetAttributesResponse",
            '403': "GetAttributesResponse",
            '404': "GetAttributesResponse",
            '413': "GetAttributesResponse",
            '415': "GetAttributesResponse",
            '429': "GetAttributesResponse",
            '500': "GetAttributesResponse",
            '503': "GetAttributesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_attributes_without_preload_content(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_attributes

        Returns a response containing attributes related to an order. This includes buyer preferences.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_attributes_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAttributesResponse",
            '400': "GetAttributesResponse",
            '403': "GetAttributesResponse",
            '404': "GetAttributesResponse",
            '413': "GetAttributesResponse",
            '415': "GetAttributesResponse",
            '429': "GetAttributesResponse",
            '500': "GetAttributesResponse",
            '503': "GetAttributesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_attributes_serialize(
        self,
        amazon_order_id,
        marketplace_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if amazon_order_id is not None:
            _path_params['amazonOrderId'] = amazon_order_id
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/messaging/v1/orders/{amazonOrderId}/attributes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_messaging_actions_for_order(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This specifies the order for which you want a list of available message types.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetMessagingActionsForOrderResponse:
        """get_messaging_actions_for_order

        Returns a list of message types that are available for an order that you specify. A message type is represented by an actions object, which contains a path and query parameter(s). You can use the path and parameter(s) to call an operation that sends a message.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This specifies the order for which you want a list of available message types. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_messaging_actions_for_order_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetMessagingActionsForOrderResponse",
            '400': "GetMessagingActionsForOrderResponse",
            '403': "GetMessagingActionsForOrderResponse",
            '404': "GetMessagingActionsForOrderResponse",
            '413': "GetMessagingActionsForOrderResponse",
            '415': "GetMessagingActionsForOrderResponse",
            '429': "GetMessagingActionsForOrderResponse",
            '500': "GetMessagingActionsForOrderResponse",
            '503': "GetMessagingActionsForOrderResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_messaging_actions_for_order_with_http_info(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This specifies the order for which you want a list of available message types.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetMessagingActionsForOrderResponse]:
        """get_messaging_actions_for_order

        Returns a list of message types that are available for an order that you specify. A message type is represented by an actions object, which contains a path and query parameter(s). You can use the path and parameter(s) to call an operation that sends a message.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This specifies the order for which you want a list of available message types. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_messaging_actions_for_order_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetMessagingActionsForOrderResponse",
            '400': "GetMessagingActionsForOrderResponse",
            '403': "GetMessagingActionsForOrderResponse",
            '404': "GetMessagingActionsForOrderResponse",
            '413': "GetMessagingActionsForOrderResponse",
            '415': "GetMessagingActionsForOrderResponse",
            '429': "GetMessagingActionsForOrderResponse",
            '500': "GetMessagingActionsForOrderResponse",
            '503': "GetMessagingActionsForOrderResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_messaging_actions_for_order_without_preload_content(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This specifies the order for which you want a list of available message types.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_messaging_actions_for_order

        Returns a list of message types that are available for an order that you specify. A message type is represented by an actions object, which contains a path and query parameter(s). You can use the path and parameter(s) to call an operation that sends a message.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This specifies the order for which you want a list of available message types. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_messaging_actions_for_order_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetMessagingActionsForOrderResponse",
            '400': "GetMessagingActionsForOrderResponse",
            '403': "GetMessagingActionsForOrderResponse",
            '404': "GetMessagingActionsForOrderResponse",
            '413': "GetMessagingActionsForOrderResponse",
            '415': "GetMessagingActionsForOrderResponse",
            '429': "GetMessagingActionsForOrderResponse",
            '500': "GetMessagingActionsForOrderResponse",
            '503': "GetMessagingActionsForOrderResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_messaging_actions_for_order_serialize(
        self,
        amazon_order_id,
        marketplace_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if amazon_order_id is not None:
            _path_params['amazonOrderId'] = amazon_order_id
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/messaging/v1/orders/{amazonOrderId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def send_invoice(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[InvoiceRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> InvoiceResponse:
        """send_invoice

        Sends a message providing the buyer an invoice

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: InvoiceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_invoice_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "InvoiceResponse",
            '400': "InvoiceResponse",
            '403': "InvoiceResponse",
            '404': "InvoiceResponse",
            '413': "InvoiceResponse",
            '415': "InvoiceResponse",
            '429': "InvoiceResponse",
            '500': "InvoiceResponse",
            '503': "InvoiceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def send_invoice_with_http_info(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[InvoiceRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[InvoiceResponse]:
        """send_invoice

        Sends a message providing the buyer an invoice

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: InvoiceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_invoice_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "InvoiceResponse",
            '400': "InvoiceResponse",
            '403': "InvoiceResponse",
            '404': "InvoiceResponse",
            '413': "InvoiceResponse",
            '415': "InvoiceResponse",
            '429': "InvoiceResponse",
            '500': "InvoiceResponse",
            '503': "InvoiceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def send_invoice_without_preload_content(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This identifies the order for which a message is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.")],
        body: Annotated[InvoiceRequest, Field(description="This contains the message body for a message.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """send_invoice

        Sends a message providing the buyer an invoice

        :param amazon_order_id: An Amazon order identifier. This identifies the order for which a message is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace. (required)
        :type marketplace_ids: List[str]
        :param body: This contains the message body for a message. (required)
        :type body: InvoiceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_invoice_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "InvoiceResponse",
            '400': "InvoiceResponse",
            '403': "InvoiceResponse",
            '404': "InvoiceResponse",
            '413': "InvoiceResponse",
            '415': "InvoiceResponse",
            '429': "InvoiceResponse",
            '500': "InvoiceResponse",
            '503': "InvoiceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _send_invoice_serialize(
        self,
        amazon_order_id,
        marketplace_ids,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if amazon_order_id is not None:
            _path_params['amazonOrderId'] = amazon_order_id
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/messaging/v1/orders/{amazonOrderId}/messages/invoice',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


