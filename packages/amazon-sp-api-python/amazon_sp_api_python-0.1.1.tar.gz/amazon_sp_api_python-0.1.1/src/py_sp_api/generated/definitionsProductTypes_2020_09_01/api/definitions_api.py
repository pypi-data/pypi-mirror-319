# coding: utf-8

"""
    Selling Partner API for Product Type Definitions

    The Selling Partner API for Product Type Definitions provides programmatic access to attribute and data requirements for product types in the Amazon catalog. Use this API to return the JSON Schema for a product type that you can then use with other Selling Partner APIs, such as the Selling Partner API for Listings Items, the Selling Partner API for Catalog Items, and the Selling Partner API for Feeds (for JSON-based listing feeds).  For more information, see the [Product Type Definitions API Use Case Guide](doc:product-type-api-use-case-guide).

    The version of the OpenAPI document: 2020-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.definitionsProductTypes_2020_09_01.models.product_type_definition import ProductTypeDefinition
from py_sp_api.generated.definitionsProductTypes_2020_09_01.models.product_type_list import ProductTypeList

from py_sp_api.generated.definitionsProductTypes_2020_09_01.api_client import ApiClient, RequestSerialized
from py_sp_api.generated.definitionsProductTypes_2020_09_01.api_response import ApiResponse
from py_sp_api.generated.definitionsProductTypes_2020_09_01.rest import RESTResponseType


class DefinitionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_definitions_product_type(
        self,
        product_type: Annotated[StrictStr, Field(description="The Amazon product type name.")],
        marketplace_ids: Annotated[List[StrictStr], Field(description="A comma-delimited list of Amazon marketplace identifiers for the request. Note: This parameter is limited to one marketplaceId at this time.")],
        seller_id: Annotated[Optional[StrictStr], Field(description="A selling partner identifier. When provided, seller-specific requirements and values are populated within the product type definition schema, such as brand names associated with the selling partner.")] = None,
        product_type_version: Annotated[Optional[StrictStr], Field(description="The version of the Amazon product type to retrieve. Defaults to \"LATEST\",. Prerelease versions of product type definitions may be retrieved with \"RELEASE_CANDIDATE\". If no prerelease version is currently available, the \"LATEST\" live version will be provided.")] = None,
        requirements: Annotated[Optional[StrictStr], Field(description="The name of the requirements set to retrieve requirements for.")] = None,
        requirements_enforced: Annotated[Optional[StrictStr], Field(description="Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all the required attributes being present (such as for partial updates).")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="Locale for retrieving display labels and other presentation details. Defaults to the default language of the first marketplace in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductTypeDefinition:
        """get_definitions_product_type

        Retrieve an Amazon product type definition.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 5 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param product_type: The Amazon product type name. (required)
        :type product_type: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. Note: This parameter is limited to one marketplaceId at this time. (required)
        :type marketplace_ids: List[str]
        :param seller_id: A selling partner identifier. When provided, seller-specific requirements and values are populated within the product type definition schema, such as brand names associated with the selling partner.
        :type seller_id: str
        :param product_type_version: The version of the Amazon product type to retrieve. Defaults to \"LATEST\",. Prerelease versions of product type definitions may be retrieved with \"RELEASE_CANDIDATE\". If no prerelease version is currently available, the \"LATEST\" live version will be provided.
        :type product_type_version: str
        :param requirements: The name of the requirements set to retrieve requirements for.
        :type requirements: str
        :param requirements_enforced: Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all the required attributes being present (such as for partial updates).
        :type requirements_enforced: str
        :param locale: Locale for retrieving display labels and other presentation details. Defaults to the default language of the first marketplace in the request.
        :type locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_definitions_product_type_serialize(
            product_type=product_type,
            marketplace_ids=marketplace_ids,
            seller_id=seller_id,
            product_type_version=product_type_version,
            requirements=requirements,
            requirements_enforced=requirements_enforced,
            locale=locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductTypeDefinition",
            '400': "ErrorList",
            '403': "ErrorList",
            '404': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_definitions_product_type_with_http_info(
        self,
        product_type: Annotated[StrictStr, Field(description="The Amazon product type name.")],
        marketplace_ids: Annotated[List[StrictStr], Field(description="A comma-delimited list of Amazon marketplace identifiers for the request. Note: This parameter is limited to one marketplaceId at this time.")],
        seller_id: Annotated[Optional[StrictStr], Field(description="A selling partner identifier. When provided, seller-specific requirements and values are populated within the product type definition schema, such as brand names associated with the selling partner.")] = None,
        product_type_version: Annotated[Optional[StrictStr], Field(description="The version of the Amazon product type to retrieve. Defaults to \"LATEST\",. Prerelease versions of product type definitions may be retrieved with \"RELEASE_CANDIDATE\". If no prerelease version is currently available, the \"LATEST\" live version will be provided.")] = None,
        requirements: Annotated[Optional[StrictStr], Field(description="The name of the requirements set to retrieve requirements for.")] = None,
        requirements_enforced: Annotated[Optional[StrictStr], Field(description="Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all the required attributes being present (such as for partial updates).")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="Locale for retrieving display labels and other presentation details. Defaults to the default language of the first marketplace in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductTypeDefinition]:
        """get_definitions_product_type

        Retrieve an Amazon product type definition.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 5 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param product_type: The Amazon product type name. (required)
        :type product_type: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. Note: This parameter is limited to one marketplaceId at this time. (required)
        :type marketplace_ids: List[str]
        :param seller_id: A selling partner identifier. When provided, seller-specific requirements and values are populated within the product type definition schema, such as brand names associated with the selling partner.
        :type seller_id: str
        :param product_type_version: The version of the Amazon product type to retrieve. Defaults to \"LATEST\",. Prerelease versions of product type definitions may be retrieved with \"RELEASE_CANDIDATE\". If no prerelease version is currently available, the \"LATEST\" live version will be provided.
        :type product_type_version: str
        :param requirements: The name of the requirements set to retrieve requirements for.
        :type requirements: str
        :param requirements_enforced: Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all the required attributes being present (such as for partial updates).
        :type requirements_enforced: str
        :param locale: Locale for retrieving display labels and other presentation details. Defaults to the default language of the first marketplace in the request.
        :type locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_definitions_product_type_serialize(
            product_type=product_type,
            marketplace_ids=marketplace_ids,
            seller_id=seller_id,
            product_type_version=product_type_version,
            requirements=requirements,
            requirements_enforced=requirements_enforced,
            locale=locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductTypeDefinition",
            '400': "ErrorList",
            '403': "ErrorList",
            '404': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_definitions_product_type_without_preload_content(
        self,
        product_type: Annotated[StrictStr, Field(description="The Amazon product type name.")],
        marketplace_ids: Annotated[List[StrictStr], Field(description="A comma-delimited list of Amazon marketplace identifiers for the request. Note: This parameter is limited to one marketplaceId at this time.")],
        seller_id: Annotated[Optional[StrictStr], Field(description="A selling partner identifier. When provided, seller-specific requirements and values are populated within the product type definition schema, such as brand names associated with the selling partner.")] = None,
        product_type_version: Annotated[Optional[StrictStr], Field(description="The version of the Amazon product type to retrieve. Defaults to \"LATEST\",. Prerelease versions of product type definitions may be retrieved with \"RELEASE_CANDIDATE\". If no prerelease version is currently available, the \"LATEST\" live version will be provided.")] = None,
        requirements: Annotated[Optional[StrictStr], Field(description="The name of the requirements set to retrieve requirements for.")] = None,
        requirements_enforced: Annotated[Optional[StrictStr], Field(description="Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all the required attributes being present (such as for partial updates).")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="Locale for retrieving display labels and other presentation details. Defaults to the default language of the first marketplace in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_definitions_product_type

        Retrieve an Amazon product type definition.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 5 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param product_type: The Amazon product type name. (required)
        :type product_type: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. Note: This parameter is limited to one marketplaceId at this time. (required)
        :type marketplace_ids: List[str]
        :param seller_id: A selling partner identifier. When provided, seller-specific requirements and values are populated within the product type definition schema, such as brand names associated with the selling partner.
        :type seller_id: str
        :param product_type_version: The version of the Amazon product type to retrieve. Defaults to \"LATEST\",. Prerelease versions of product type definitions may be retrieved with \"RELEASE_CANDIDATE\". If no prerelease version is currently available, the \"LATEST\" live version will be provided.
        :type product_type_version: str
        :param requirements: The name of the requirements set to retrieve requirements for.
        :type requirements: str
        :param requirements_enforced: Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all the required attributes being present (such as for partial updates).
        :type requirements_enforced: str
        :param locale: Locale for retrieving display labels and other presentation details. Defaults to the default language of the first marketplace in the request.
        :type locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_definitions_product_type_serialize(
            product_type=product_type,
            marketplace_ids=marketplace_ids,
            seller_id=seller_id,
            product_type_version=product_type_version,
            requirements=requirements,
            requirements_enforced=requirements_enforced,
            locale=locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductTypeDefinition",
            '400': "ErrorList",
            '403': "ErrorList",
            '404': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_definitions_product_type_serialize(
        self,
        product_type,
        marketplace_ids,
        seller_id,
        product_type_version,
        requirements,
        requirements_enforced,
        locale,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if product_type is not None:
            _path_params['productType'] = product_type
        # process the query parameters
        if seller_id is not None:
            
            _query_params.append(('sellerId', seller_id))
            
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        if product_type_version is not None:
            
            _query_params.append(('productTypeVersion', product_type_version))
            
        if requirements is not None:
            
            _query_params.append(('requirements', requirements))
            
        if requirements_enforced is not None:
            
            _query_params.append(('requirementsEnforced', requirements_enforced))
            
        if locale is not None:
            
            _query_params.append(('locale', locale))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/definitions/2020-09-01/productTypes/{productType}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_definitions_product_types(
        self,
        marketplace_ids: Annotated[List[StrictStr], Field(description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        keywords: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of keywords to search product types. **Note:** Cannot be used with `itemName`.")] = None,
        item_name: Annotated[Optional[StrictStr], Field(description="The title of the ASIN to get the product type recommendation. **Note:** Cannot be used with `keywords`.")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale for the display names in the response. Defaults to the primary locale of the marketplace.")] = None,
        search_locale: Annotated[Optional[StrictStr], Field(description="The locale used for the `keywords` and `itemName` parameters. Defaults to the primary locale of the marketplace.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductTypeList:
        """search_definitions_product_types

        Search for and return a list of Amazon product types that have definitions available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 5 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param keywords: A comma-delimited list of keywords to search product types. **Note:** Cannot be used with `itemName`.
        :type keywords: List[str]
        :param item_name: The title of the ASIN to get the product type recommendation. **Note:** Cannot be used with `keywords`.
        :type item_name: str
        :param locale: The locale for the display names in the response. Defaults to the primary locale of the marketplace.
        :type locale: str
        :param search_locale: The locale used for the `keywords` and `itemName` parameters. Defaults to the primary locale of the marketplace.
        :type search_locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_definitions_product_types_serialize(
            marketplace_ids=marketplace_ids,
            keywords=keywords,
            item_name=item_name,
            locale=locale,
            search_locale=search_locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductTypeList",
            '400': "ErrorList",
            '403': "ErrorList",
            '404': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_definitions_product_types_with_http_info(
        self,
        marketplace_ids: Annotated[List[StrictStr], Field(description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        keywords: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of keywords to search product types. **Note:** Cannot be used with `itemName`.")] = None,
        item_name: Annotated[Optional[StrictStr], Field(description="The title of the ASIN to get the product type recommendation. **Note:** Cannot be used with `keywords`.")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale for the display names in the response. Defaults to the primary locale of the marketplace.")] = None,
        search_locale: Annotated[Optional[StrictStr], Field(description="The locale used for the `keywords` and `itemName` parameters. Defaults to the primary locale of the marketplace.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductTypeList]:
        """search_definitions_product_types

        Search for and return a list of Amazon product types that have definitions available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 5 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param keywords: A comma-delimited list of keywords to search product types. **Note:** Cannot be used with `itemName`.
        :type keywords: List[str]
        :param item_name: The title of the ASIN to get the product type recommendation. **Note:** Cannot be used with `keywords`.
        :type item_name: str
        :param locale: The locale for the display names in the response. Defaults to the primary locale of the marketplace.
        :type locale: str
        :param search_locale: The locale used for the `keywords` and `itemName` parameters. Defaults to the primary locale of the marketplace.
        :type search_locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_definitions_product_types_serialize(
            marketplace_ids=marketplace_ids,
            keywords=keywords,
            item_name=item_name,
            locale=locale,
            search_locale=search_locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductTypeList",
            '400': "ErrorList",
            '403': "ErrorList",
            '404': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_definitions_product_types_without_preload_content(
        self,
        marketplace_ids: Annotated[List[StrictStr], Field(description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        keywords: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of keywords to search product types. **Note:** Cannot be used with `itemName`.")] = None,
        item_name: Annotated[Optional[StrictStr], Field(description="The title of the ASIN to get the product type recommendation. **Note:** Cannot be used with `keywords`.")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale for the display names in the response. Defaults to the primary locale of the marketplace.")] = None,
        search_locale: Annotated[Optional[StrictStr], Field(description="The locale used for the `keywords` and `itemName` parameters. Defaults to the primary locale of the marketplace.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """search_definitions_product_types

        Search for and return a list of Amazon product types that have definitions available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 5 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param keywords: A comma-delimited list of keywords to search product types. **Note:** Cannot be used with `itemName`.
        :type keywords: List[str]
        :param item_name: The title of the ASIN to get the product type recommendation. **Note:** Cannot be used with `keywords`.
        :type item_name: str
        :param locale: The locale for the display names in the response. Defaults to the primary locale of the marketplace.
        :type locale: str
        :param search_locale: The locale used for the `keywords` and `itemName` parameters. Defaults to the primary locale of the marketplace.
        :type search_locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_definitions_product_types_serialize(
            marketplace_ids=marketplace_ids,
            keywords=keywords,
            item_name=item_name,
            locale=locale,
            search_locale=search_locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductTypeList",
            '400': "ErrorList",
            '403': "ErrorList",
            '404': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_definitions_product_types_serialize(
        self,
        marketplace_ids,
        keywords,
        item_name,
        locale,
        search_locale,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
            'keywords': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if keywords is not None:
            
            _query_params.append(('keywords', keywords))
            
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        if item_name is not None:
            
            _query_params.append(('itemName', item_name))
            
        if locale is not None:
            
            _query_params.append(('locale', locale))
            
        if search_locale is not None:
            
            _query_params.append(('searchLocale', search_locale))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/definitions/2020-09-01/productTypes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


