# coding: utf-8

"""
    The Selling Partner API for Sellers

    The Selling Partner API for Sellers lets you retrieve information on behalf of sellers about their seller account, such as the marketplaces they participate in. Along with listing the marketplaces that a seller can sell in, the API also provides additional information about the marketplace such as the default language and the default currency. The API also provides seller-specific information such as whether the seller has suspended listings in that marketplace.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.sellers.models.address import Address
from typing import Optional, Set
from typing_extensions import Self

class Business(BaseModel):
    """
    Information about the Seller's business. These fields may be omitted if the Seller is registered as an individual.
    """ # noqa: E501
    name: StrictStr = Field(description="The registered business name.")
    registered_business_address: Address = Field(alias="registeredBusinessAddress")
    company_registration_number: Optional[StrictStr] = Field(default=None, description="The seller's company registration number, if applicable. This field will be absent for individual sellers and sole proprietorships.", alias="companyRegistrationNumber")
    company_tax_identification_number: Optional[StrictStr] = Field(default=None, description="The seller's company tax identification number, if applicable. This field will be present for certain business types only, such as sole proprietorships.", alias="companyTaxIdentificationNumber")
    non_latin_name: Optional[StrictStr] = Field(default=None, description="The non-Latin script version of the registered business name, if applicable.", alias="nonLatinName")
    __properties: ClassVar[List[str]] = ["name", "registeredBusinessAddress", "companyRegistrationNumber", "companyTaxIdentificationNumber", "nonLatinName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Business from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of registered_business_address
        if self.registered_business_address:
            _dict['registeredBusinessAddress'] = self.registered_business_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Business from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "registeredBusinessAddress": Address.from_dict(obj["registeredBusinessAddress"]) if obj.get("registeredBusinessAddress") is not None else None,
            "companyRegistrationNumber": obj.get("companyRegistrationNumber"),
            "companyTaxIdentificationNumber": obj.get("companyTaxIdentificationNumber"),
            "nonLatinName": obj.get("nonLatinName")
        })
        return _obj


