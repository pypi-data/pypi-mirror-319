# coding: utf-8

"""
    Selling Partner API for Fulfillment Inbound

    The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.fulfillmentInboundV0.models.inbound_shipment_plan import InboundShipmentPlan
from typing import Optional, Set
from typing_extensions import Self

class CreateInboundShipmentPlanResult(BaseModel):
    """
    Result for the create inbound shipment operation
    """ # noqa: E501
    inbound_shipment_plans: Optional[List[InboundShipmentPlan]] = Field(default=None, description="A list of inbound shipment plan information", alias="InboundShipmentPlans")
    __properties: ClassVar[List[str]] = ["InboundShipmentPlans"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateInboundShipmentPlanResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in inbound_shipment_plans (list)
        _items = []
        if self.inbound_shipment_plans:
            for _item_inbound_shipment_plans in self.inbound_shipment_plans:
                if _item_inbound_shipment_plans:
                    _items.append(_item_inbound_shipment_plans.to_dict())
            _dict['InboundShipmentPlans'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateInboundShipmentPlanResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "InboundShipmentPlans": [InboundShipmentPlan.from_dict(_item) for _item in obj["InboundShipmentPlans"]] if obj.get("InboundShipmentPlans") is not None else None
        })
        return _obj


