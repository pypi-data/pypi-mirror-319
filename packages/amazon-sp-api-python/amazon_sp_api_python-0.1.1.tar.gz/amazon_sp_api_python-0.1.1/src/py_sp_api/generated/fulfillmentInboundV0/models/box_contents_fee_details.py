# coding: utf-8

"""
    Selling Partner API for Fulfillment Inbound

    The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.fulfillmentInboundV0.models.amount import Amount
from typing import Optional, Set
from typing_extensions import Self

class BoxContentsFeeDetails(BaseModel):
    """
    The manual processing fee per unit and total fee for a shipment.
    """ # noqa: E501
    total_units: Optional[StrictInt] = Field(default=None, description="The item quantity.", alias="TotalUnits")
    fee_per_unit: Optional[Amount] = Field(default=None, alias="FeePerUnit")
    total_fee: Optional[Amount] = Field(default=None, alias="TotalFee")
    __properties: ClassVar[List[str]] = ["TotalUnits", "FeePerUnit", "TotalFee"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BoxContentsFeeDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fee_per_unit
        if self.fee_per_unit:
            _dict['FeePerUnit'] = self.fee_per_unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_fee
        if self.total_fee:
            _dict['TotalFee'] = self.total_fee.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BoxContentsFeeDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "TotalUnits": obj.get("TotalUnits"),
            "FeePerUnit": Amount.from_dict(obj["FeePerUnit"]) if obj.get("FeePerUnit") is not None else None,
            "TotalFee": Amount.from_dict(obj["TotalFee"]) if obj.get("TotalFee") is not None else None
        })
        return _obj


