# coding: utf-8

"""
    Selling Partner API for Fulfillment Inbound

    The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetPreorderInfoResult(BaseModel):
    """
    Result for the get preorder info operation
    """ # noqa: E501
    shipment_contains_preorderable_items: Optional[StrictBool] = Field(default=None, description="Indicates whether the shipment contains items that have been enabled for pre-order. For more information about enabling items for pre-order, see the Seller Central Help.", alias="ShipmentContainsPreorderableItems")
    shipment_confirmed_for_preorder: Optional[StrictBool] = Field(default=None, description="Indicates whether this shipment has been confirmed for pre-order.", alias="ShipmentConfirmedForPreorder")
    need_by_date: Optional[date] = Field(default=None, description="Type containing date in string format", alias="NeedByDate")
    confirmed_fulfillable_date: Optional[date] = Field(default=None, description="Type containing date in string format", alias="ConfirmedFulfillableDate")
    __properties: ClassVar[List[str]] = ["ShipmentContainsPreorderableItems", "ShipmentConfirmedForPreorder", "NeedByDate", "ConfirmedFulfillableDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetPreorderInfoResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetPreorderInfoResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ShipmentContainsPreorderableItems": obj.get("ShipmentContainsPreorderableItems"),
            "ShipmentConfirmedForPreorder": obj.get("ShipmentConfirmedForPreorder"),
            "NeedByDate": obj.get("NeedByDate"),
            "ConfirmedFulfillableDate": obj.get("ConfirmedFulfillableDate")
        })
        return _obj


