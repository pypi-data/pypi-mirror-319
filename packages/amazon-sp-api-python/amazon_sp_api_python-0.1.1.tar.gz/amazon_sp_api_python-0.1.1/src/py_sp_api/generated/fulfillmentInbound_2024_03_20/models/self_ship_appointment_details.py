# coding: utf-8

"""
    Fulfillment Inbound v2024-03-20

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.appointment_slot_time import AppointmentSlotTime
from typing import Optional, Set
from typing_extensions import Self

class SelfShipAppointmentDetails(BaseModel):
    """
    Appointment details for carrier pickup or fulfillment center appointments.
    """ # noqa: E501
    appointment_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Identifier for appointment.", alias="appointmentId")
    appointment_slot_time: Optional[AppointmentSlotTime] = Field(default=None, alias="appointmentSlotTime")
    appointment_status: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=1024)]] = Field(default=None, description="Status of the appointment.", alias="appointmentStatus")
    __properties: ClassVar[List[str]] = ["appointmentId", "appointmentSlotTime", "appointmentStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SelfShipAppointmentDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of appointment_slot_time
        if self.appointment_slot_time:
            _dict['appointmentSlotTime'] = self.appointment_slot_time.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SelfShipAppointmentDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appointmentId": obj.get("appointmentId"),
            "appointmentSlotTime": AppointmentSlotTime.from_dict(obj["appointmentSlotTime"]) if obj.get("appointmentSlotTime") is not None else None,
            "appointmentStatus": obj.get("appointmentStatus")
        })
        return _obj


