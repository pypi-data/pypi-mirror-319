# coding: utf-8

"""
    Fulfillment Inbound v2024-03-20

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.incentive import Incentive
from typing import Optional, Set
from typing_extensions import Self

class PlacementOption(BaseModel):
    """
    Contains information pertaining to the placement of the contents of an inbound plan and the related costs.
    """ # noqa: E501
    discounts: List[Incentive] = Field(description="Discount for the offered option.")
    expiration: Optional[datetime] = Field(default=None, description="The expiration date of the placement option. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format with pattern `yyyy-MM-ddTHH:mm:ss.sssZ`.")
    fees: List[Incentive] = Field(description="The fee for the offered option.")
    placement_option_id: Annotated[str, Field(min_length=38, strict=True, max_length=38)] = Field(description="The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.", alias="placementOptionId")
    shipment_ids: List[Annotated[str, Field(min_length=38, strict=True, max_length=38)]] = Field(description="Shipment ids.", alias="shipmentIds")
    status: Annotated[str, Field(min_length=1, strict=True, max_length=1024)] = Field(description="The status of a placement option. Possible values: `OFFERED`, `ACCEPTED`, `EXPIRED`.")
    __properties: ClassVar[List[str]] = ["discounts", "expiration", "fees", "placementOptionId", "shipmentIds", "status"]

    @field_validator('placement_option_id')
    def placement_option_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9-]*$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9-]*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlacementOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in discounts (list)
        _items = []
        if self.discounts:
            for _item_discounts in self.discounts:
                if _item_discounts:
                    _items.append(_item_discounts.to_dict())
            _dict['discounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fees (list)
        _items = []
        if self.fees:
            for _item_fees in self.fees:
                if _item_fees:
                    _items.append(_item_fees.to_dict())
            _dict['fees'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlacementOption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "discounts": [Incentive.from_dict(_item) for _item in obj["discounts"]] if obj.get("discounts") is not None else None,
            "expiration": obj.get("expiration"),
            "fees": [Incentive.from_dict(_item) for _item in obj["fees"]] if obj.get("fees") is not None else None,
            "placementOptionId": obj.get("placementOptionId"),
            "shipmentIds": obj.get("shipmentIds"),
            "status": obj.get("status")
        })
        return _obj


