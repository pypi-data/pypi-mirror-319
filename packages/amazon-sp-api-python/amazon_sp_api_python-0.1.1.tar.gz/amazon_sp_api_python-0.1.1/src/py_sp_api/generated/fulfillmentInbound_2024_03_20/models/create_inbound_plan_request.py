# coding: utf-8

"""
    Fulfillment Inbound v2024-03-20

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.address_input import AddressInput
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.item_input import ItemInput
from typing import Optional, Set
from typing_extensions import Self

class CreateInboundPlanRequest(BaseModel):
    """
    The `createInboundPlan` request.
    """ # noqa: E501
    destination_marketplaces: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=20)]], Field(min_length=1, max_length=1)] = Field(description="Marketplaces where the items need to be shipped to. Currently only one marketplace can be selected in this request.", alias="destinationMarketplaces")
    items: Annotated[List[ItemInput], Field(min_length=1, max_length=2000)] = Field(description="Items included in this plan.")
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=40)]] = Field(default=None, description="Name for the Inbound Plan. If one isn't provided, a default name will be provided.")
    source_address: AddressInput = Field(alias="sourceAddress")
    __properties: ClassVar[List[str]] = ["destinationMarketplaces", "items", "name", "sourceAddress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateInboundPlanRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of source_address
        if self.source_address:
            _dict['sourceAddress'] = self.source_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateInboundPlanRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "destinationMarketplaces": obj.get("destinationMarketplaces"),
            "items": [ItemInput.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "name": obj.get("name"),
            "sourceAddress": AddressInput.from_dict(obj["sourceAddress"]) if obj.get("sourceAddress") is not None else None
        })
        return _obj


