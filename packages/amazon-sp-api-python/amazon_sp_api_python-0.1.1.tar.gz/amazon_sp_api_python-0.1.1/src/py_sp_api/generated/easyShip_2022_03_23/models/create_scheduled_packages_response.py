# coding: utf-8

"""
    Selling Partner API for Easy Ship

    The Selling Partner API for Easy Ship helps you build applications that help sellers manage and ship Amazon Easy Ship orders.  Your Easy Ship applications can:  * Get available time slots for packages to be scheduled for delivery.  * Schedule, reschedule, and cancel Easy Ship orders.  * Print labels, invoices, and warranties.  See the [Marketplace Support Table](doc:easyship-api-v2022-03-23-use-case-guide#marketplace-support-table) for the differences in Easy Ship operations by marketplace.

    The version of the OpenAPI document: 2022-03-23
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.easyShip_2022_03_23.models.package import Package
from py_sp_api.generated.easyShip_2022_03_23.models.rejected_order import RejectedOrder
from typing import Optional, Set
from typing_extensions import Self

class CreateScheduledPackagesResponse(BaseModel):
    """
    The response schema for the bulk scheduling API. It returns by the bulk scheduling API containing an array of the scheduled packtages, an optional list of orders we couldn't schedule with the reason, and a pre-signed URL for a ZIP file containing the associated shipping labels plus the documents enabled for your marketplace.
    """ # noqa: E501
    scheduled_packages: Optional[Annotated[List[Package], Field(max_length=100)]] = Field(default=None, description="A list of packages. Refer to the `Package` object.", alias="scheduledPackages")
    rejected_orders: Optional[List[RejectedOrder]] = Field(default=None, description="A list of orders we couldn't scheduled on your behalf. Each element contains the reason and details on the error.", alias="rejectedOrders")
    printable_documents_url: Optional[StrictStr] = Field(default=None, description="A pre-signed URL for the zip document containing the shipping labels and the documents enabled for your marketplace.", alias="printableDocumentsUrl")
    __properties: ClassVar[List[str]] = ["scheduledPackages", "rejectedOrders", "printableDocumentsUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateScheduledPackagesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in scheduled_packages (list)
        _items = []
        if self.scheduled_packages:
            for _item_scheduled_packages in self.scheduled_packages:
                if _item_scheduled_packages:
                    _items.append(_item_scheduled_packages.to_dict())
            _dict['scheduledPackages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rejected_orders (list)
        _items = []
        if self.rejected_orders:
            for _item_rejected_orders in self.rejected_orders:
                if _item_rejected_orders:
                    _items.append(_item_rejected_orders.to_dict())
            _dict['rejectedOrders'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateScheduledPackagesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "scheduledPackages": [Package.from_dict(_item) for _item in obj["scheduledPackages"]] if obj.get("scheduledPackages") is not None else None,
            "rejectedOrders": [RejectedOrder.from_dict(_item) for _item in obj["rejectedOrders"]] if obj.get("rejectedOrders") is not None else None,
            "printableDocumentsUrl": obj.get("printableDocumentsUrl")
        })
        return _obj


