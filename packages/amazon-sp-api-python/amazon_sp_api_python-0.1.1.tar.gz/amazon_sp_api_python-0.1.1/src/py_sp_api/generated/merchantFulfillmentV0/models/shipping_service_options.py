# coding: utf-8

"""
    Selling Partner API for Merchant Fulfillment

    With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.merchantFulfillmentV0.models.carrier_will_pick_up_option import CarrierWillPickUpOption
from py_sp_api.generated.merchantFulfillmentV0.models.currency_amount import CurrencyAmount
from py_sp_api.generated.merchantFulfillmentV0.models.delivery_experience_type import DeliveryExperienceType
from py_sp_api.generated.merchantFulfillmentV0.models.label_format import LabelFormat
from typing import Optional, Set
from typing_extensions import Self

class ShippingServiceOptions(BaseModel):
    """
    Extra services provided by a carrier.
    """ # noqa: E501
    delivery_experience: DeliveryExperienceType = Field(alias="DeliveryExperience")
    declared_value: Optional[CurrencyAmount] = Field(default=None, alias="DeclaredValue")
    carrier_will_pick_up: StrictBool = Field(description="When true, the carrier will pick up the package. Note: Scheduled carrier pickup is available only using Dynamex (US), DPD (UK), and Royal Mail (UK).", alias="CarrierWillPickUp")
    carrier_will_pick_up_option: Optional[CarrierWillPickUpOption] = Field(default=None, alias="CarrierWillPickUpOption")
    label_format: Optional[LabelFormat] = Field(default=None, alias="LabelFormat")
    __properties: ClassVar[List[str]] = ["DeliveryExperience", "DeclaredValue", "CarrierWillPickUp", "CarrierWillPickUpOption", "LabelFormat"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShippingServiceOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of declared_value
        if self.declared_value:
            _dict['DeclaredValue'] = self.declared_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShippingServiceOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DeliveryExperience": obj.get("DeliveryExperience"),
            "DeclaredValue": CurrencyAmount.from_dict(obj["DeclaredValue"]) if obj.get("DeclaredValue") is not None else None,
            "CarrierWillPickUp": obj.get("CarrierWillPickUp"),
            "CarrierWillPickUpOption": obj.get("CarrierWillPickUpOption"),
            "LabelFormat": obj.get("LabelFormat")
        })
        return _obj


