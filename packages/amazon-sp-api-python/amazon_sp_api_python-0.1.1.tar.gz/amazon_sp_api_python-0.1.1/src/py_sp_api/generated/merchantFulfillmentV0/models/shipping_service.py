# coding: utf-8

"""
    Selling Partner API for Merchant Fulfillment

    With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.merchantFulfillmentV0.models.available_shipping_service_options import AvailableShippingServiceOptions
from py_sp_api.generated.merchantFulfillmentV0.models.benefits import Benefits
from py_sp_api.generated.merchantFulfillmentV0.models.currency_amount import CurrencyAmount
from py_sp_api.generated.merchantFulfillmentV0.models.label_format import LabelFormat
from py_sp_api.generated.merchantFulfillmentV0.models.label_format_option import LabelFormatOption
from py_sp_api.generated.merchantFulfillmentV0.models.shipping_service_options import ShippingServiceOptions
from typing import Optional, Set
from typing_extensions import Self

class ShippingService(BaseModel):
    """
    A shipping service offer made by a carrier.
    """ # noqa: E501
    shipping_service_name: StrictStr = Field(description="A plain text representation of a carrier's shipping service. For example, \"UPS Ground\" or \"FedEx Standard Overnight\". ", alias="ShippingServiceName")
    carrier_name: StrictStr = Field(description="The name of the carrier.", alias="CarrierName")
    shipping_service_id: StrictStr = Field(description="An Amazon-defined shipping service identifier.", alias="ShippingServiceId")
    shipping_service_offer_id: StrictStr = Field(description="An Amazon-defined shipping service offer identifier.", alias="ShippingServiceOfferId")
    ship_date: datetime = Field(description="Date-time formatted timestamp.", alias="ShipDate")
    earliest_estimated_delivery_date: Optional[datetime] = Field(default=None, description="Date-time formatted timestamp.", alias="EarliestEstimatedDeliveryDate")
    latest_estimated_delivery_date: Optional[datetime] = Field(default=None, description="Date-time formatted timestamp.", alias="LatestEstimatedDeliveryDate")
    rate: CurrencyAmount = Field(alias="Rate")
    shipping_service_options: ShippingServiceOptions = Field(alias="ShippingServiceOptions")
    available_shipping_service_options: Optional[AvailableShippingServiceOptions] = Field(default=None, alias="AvailableShippingServiceOptions")
    available_label_formats: Optional[List[LabelFormat]] = Field(default=None, description="List of label formats.", alias="AvailableLabelFormats")
    available_format_options_for_label: Optional[List[LabelFormatOption]] = Field(default=None, description="The available label formats.", alias="AvailableFormatOptionsForLabel")
    requires_additional_seller_inputs: StrictBool = Field(description="When true, additional seller inputs are required.", alias="RequiresAdditionalSellerInputs")
    benefits: Optional[Benefits] = Field(default=None, alias="Benefits")
    __properties: ClassVar[List[str]] = ["ShippingServiceName", "CarrierName", "ShippingServiceId", "ShippingServiceOfferId", "ShipDate", "EarliestEstimatedDeliveryDate", "LatestEstimatedDeliveryDate", "Rate", "ShippingServiceOptions", "AvailableShippingServiceOptions", "AvailableLabelFormats", "AvailableFormatOptionsForLabel", "RequiresAdditionalSellerInputs", "Benefits"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShippingService from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rate
        if self.rate:
            _dict['Rate'] = self.rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_service_options
        if self.shipping_service_options:
            _dict['ShippingServiceOptions'] = self.shipping_service_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of available_shipping_service_options
        if self.available_shipping_service_options:
            _dict['AvailableShippingServiceOptions'] = self.available_shipping_service_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in available_format_options_for_label (list)
        _items = []
        if self.available_format_options_for_label:
            for _item_available_format_options_for_label in self.available_format_options_for_label:
                if _item_available_format_options_for_label:
                    _items.append(_item_available_format_options_for_label.to_dict())
            _dict['AvailableFormatOptionsForLabel'] = _items
        # override the default output from pydantic by calling `to_dict()` of benefits
        if self.benefits:
            _dict['Benefits'] = self.benefits.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShippingService from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ShippingServiceName": obj.get("ShippingServiceName"),
            "CarrierName": obj.get("CarrierName"),
            "ShippingServiceId": obj.get("ShippingServiceId"),
            "ShippingServiceOfferId": obj.get("ShippingServiceOfferId"),
            "ShipDate": obj.get("ShipDate"),
            "EarliestEstimatedDeliveryDate": obj.get("EarliestEstimatedDeliveryDate"),
            "LatestEstimatedDeliveryDate": obj.get("LatestEstimatedDeliveryDate"),
            "Rate": CurrencyAmount.from_dict(obj["Rate"]) if obj.get("Rate") is not None else None,
            "ShippingServiceOptions": ShippingServiceOptions.from_dict(obj["ShippingServiceOptions"]) if obj.get("ShippingServiceOptions") is not None else None,
            "AvailableShippingServiceOptions": AvailableShippingServiceOptions.from_dict(obj["AvailableShippingServiceOptions"]) if obj.get("AvailableShippingServiceOptions") is not None else None,
            "AvailableLabelFormats": obj.get("AvailableLabelFormats"),
            "AvailableFormatOptionsForLabel": [LabelFormatOption.from_dict(_item) for _item in obj["AvailableFormatOptionsForLabel"]] if obj.get("AvailableFormatOptionsForLabel") is not None else None,
            "RequiresAdditionalSellerInputs": obj.get("RequiresAdditionalSellerInputs"),
            "Benefits": Benefits.from_dict(obj["Benefits"]) if obj.get("Benefits") is not None else None
        })
        return _obj


