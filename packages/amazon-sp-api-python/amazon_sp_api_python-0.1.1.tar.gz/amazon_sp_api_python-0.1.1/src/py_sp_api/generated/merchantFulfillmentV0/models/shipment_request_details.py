# coding: utf-8

"""
    Selling Partner API for Merchant Fulfillment

    With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.merchantFulfillmentV0.models.address import Address
from py_sp_api.generated.merchantFulfillmentV0.models.item import Item
from py_sp_api.generated.merchantFulfillmentV0.models.label_customization import LabelCustomization
from py_sp_api.generated.merchantFulfillmentV0.models.package_dimensions import PackageDimensions
from py_sp_api.generated.merchantFulfillmentV0.models.shipping_service_options import ShippingServiceOptions
from py_sp_api.generated.merchantFulfillmentV0.models.weight import Weight
from typing import Optional, Set
from typing_extensions import Self

class ShipmentRequestDetails(BaseModel):
    """
    Shipment information required for requesting shipping service offers or for creating a shipment.
    """ # noqa: E501
    amazon_order_id: StrictStr = Field(description="An Amazon-defined order identifier, in 3-7-7 format.", alias="AmazonOrderId")
    seller_order_id: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="A seller-defined order identifier.", alias="SellerOrderId")
    item_list: List[Item] = Field(description="The list of items you want to include in a shipment.", alias="ItemList")
    ship_from_address: Address = Field(alias="ShipFromAddress")
    package_dimensions: PackageDimensions = Field(alias="PackageDimensions")
    weight: Weight = Field(alias="Weight")
    must_arrive_by_date: Optional[datetime] = Field(default=None, description="Date-time formatted timestamp.", alias="MustArriveByDate")
    ship_date: Optional[datetime] = Field(default=None, description="Date-time formatted timestamp.", alias="ShipDate")
    shipping_service_options: ShippingServiceOptions = Field(alias="ShippingServiceOptions")
    label_customization: Optional[LabelCustomization] = Field(default=None, alias="LabelCustomization")
    __properties: ClassVar[List[str]] = ["AmazonOrderId", "SellerOrderId", "ItemList", "ShipFromAddress", "PackageDimensions", "Weight", "MustArriveByDate", "ShipDate", "ShippingServiceOptions", "LabelCustomization"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShipmentRequestDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in item_list (list)
        _items = []
        if self.item_list:
            for _item_item_list in self.item_list:
                if _item_item_list:
                    _items.append(_item_item_list.to_dict())
            _dict['ItemList'] = _items
        # override the default output from pydantic by calling `to_dict()` of ship_from_address
        if self.ship_from_address:
            _dict['ShipFromAddress'] = self.ship_from_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of package_dimensions
        if self.package_dimensions:
            _dict['PackageDimensions'] = self.package_dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weight
        if self.weight:
            _dict['Weight'] = self.weight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_service_options
        if self.shipping_service_options:
            _dict['ShippingServiceOptions'] = self.shipping_service_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of label_customization
        if self.label_customization:
            _dict['LabelCustomization'] = self.label_customization.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShipmentRequestDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AmazonOrderId": obj.get("AmazonOrderId"),
            "SellerOrderId": obj.get("SellerOrderId"),
            "ItemList": [Item.from_dict(_item) for _item in obj["ItemList"]] if obj.get("ItemList") is not None else None,
            "ShipFromAddress": Address.from_dict(obj["ShipFromAddress"]) if obj.get("ShipFromAddress") is not None else None,
            "PackageDimensions": PackageDimensions.from_dict(obj["PackageDimensions"]) if obj.get("PackageDimensions") is not None else None,
            "Weight": Weight.from_dict(obj["Weight"]) if obj.get("Weight") is not None else None,
            "MustArriveByDate": obj.get("MustArriveByDate"),
            "ShipDate": obj.get("ShipDate"),
            "ShippingServiceOptions": ShippingServiceOptions.from_dict(obj["ShippingServiceOptions"]) if obj.get("ShippingServiceOptions") is not None else None,
            "LabelCustomization": LabelCustomization.from_dict(obj["LabelCustomization"]) if obj.get("LabelCustomization") is not None else None
        })
        return _obj


