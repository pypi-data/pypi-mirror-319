# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.fulfillment_return_item_status import FulfillmentReturnItemStatus
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.return_item_disposition import ReturnItemDisposition
from typing import Optional, Set
from typing_extensions import Self

class ReturnItem(BaseModel):
    """
    An item that Amazon accepted for return.
    """ # noqa: E501
    seller_return_item_id: StrictStr = Field(description="An identifier assigned by the seller to the return item.", alias="sellerReturnItemId")
    seller_fulfillment_order_item_id: StrictStr = Field(description="The identifier assigned to the item by the seller when the fulfillment order was created.", alias="sellerFulfillmentOrderItemId")
    amazon_shipment_id: StrictStr = Field(description="The identifier for the shipment that is associated with the return item.", alias="amazonShipmentId")
    seller_return_reason_code: StrictStr = Field(description="The return reason code assigned to the return item by the seller.", alias="sellerReturnReasonCode")
    return_comment: Optional[StrictStr] = Field(default=None, description="An optional comment about the return item.", alias="returnComment")
    amazon_return_reason_code: Optional[StrictStr] = Field(default=None, description="The return reason code that the Amazon fulfillment center assigned to the return item.", alias="amazonReturnReasonCode")
    status: FulfillmentReturnItemStatus
    status_changed_date: datetime = Field(description="Date timestamp", alias="statusChangedDate")
    return_authorization_id: Optional[StrictStr] = Field(default=None, description="Identifies the return authorization used to return this item. Refer to `ReturnAuthorization`.", alias="returnAuthorizationId")
    return_received_condition: Optional[ReturnItemDisposition] = Field(default=None, alias="returnReceivedCondition")
    fulfillment_center_id: Optional[StrictStr] = Field(default=None, description="The identifier for the Amazon fulfillment center that processed the return item.", alias="fulfillmentCenterId")
    __properties: ClassVar[List[str]] = ["sellerReturnItemId", "sellerFulfillmentOrderItemId", "amazonShipmentId", "sellerReturnReasonCode", "returnComment", "amazonReturnReasonCode", "status", "statusChangedDate", "returnAuthorizationId", "returnReceivedCondition", "fulfillmentCenterId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReturnItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReturnItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sellerReturnItemId": obj.get("sellerReturnItemId"),
            "sellerFulfillmentOrderItemId": obj.get("sellerFulfillmentOrderItemId"),
            "amazonShipmentId": obj.get("amazonShipmentId"),
            "sellerReturnReasonCode": obj.get("sellerReturnReasonCode"),
            "returnComment": obj.get("returnComment"),
            "amazonReturnReasonCode": obj.get("amazonReturnReasonCode"),
            "status": obj.get("status"),
            "statusChangedDate": obj.get("statusChangedDate"),
            "returnAuthorizationId": obj.get("returnAuthorizationId"),
            "returnReceivedCondition": obj.get("returnReceivedCondition"),
            "fulfillmentCenterId": obj.get("fulfillmentCenterId")
        })
        return _obj


