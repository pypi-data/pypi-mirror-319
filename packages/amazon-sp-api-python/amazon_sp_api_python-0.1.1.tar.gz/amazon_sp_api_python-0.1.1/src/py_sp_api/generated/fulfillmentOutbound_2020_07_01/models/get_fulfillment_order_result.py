# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.fulfillment_order import FulfillmentOrder
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.fulfillment_order_item import FulfillmentOrderItem
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.fulfillment_shipment import FulfillmentShipment
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.payment_information import PaymentInformation
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.return_authorization import ReturnAuthorization
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.return_item import ReturnItem
from typing import Optional, Set
from typing_extensions import Self

class GetFulfillmentOrderResult(BaseModel):
    """
    The request for the getFulfillmentOrder operation.
    """ # noqa: E501
    fulfillment_order: FulfillmentOrder = Field(alias="fulfillmentOrder")
    fulfillment_order_items: List[FulfillmentOrderItem] = Field(description="An array of fulfillment order item information.", alias="fulfillmentOrderItems")
    fulfillment_shipments: Optional[List[FulfillmentShipment]] = Field(default=None, description="An array of fulfillment shipment information.", alias="fulfillmentShipments")
    return_items: List[ReturnItem] = Field(description="An array of items that Amazon accepted for return. Returns empty if no items were accepted for return.", alias="returnItems")
    return_authorizations: List[ReturnAuthorization] = Field(description="An array of return authorization information.", alias="returnAuthorizations")
    payment_information: Optional[List[PaymentInformation]] = Field(default=None, description="An array of various payment attributes related to this fulfillment order.", alias="paymentInformation")
    __properties: ClassVar[List[str]] = ["fulfillmentOrder", "fulfillmentOrderItems", "fulfillmentShipments", "returnItems", "returnAuthorizations", "paymentInformation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetFulfillmentOrderResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fulfillment_order
        if self.fulfillment_order:
            _dict['fulfillmentOrder'] = self.fulfillment_order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fulfillment_order_items (list)
        _items = []
        if self.fulfillment_order_items:
            for _item_fulfillment_order_items in self.fulfillment_order_items:
                if _item_fulfillment_order_items:
                    _items.append(_item_fulfillment_order_items.to_dict())
            _dict['fulfillmentOrderItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fulfillment_shipments (list)
        _items = []
        if self.fulfillment_shipments:
            for _item_fulfillment_shipments in self.fulfillment_shipments:
                if _item_fulfillment_shipments:
                    _items.append(_item_fulfillment_shipments.to_dict())
            _dict['fulfillmentShipments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in return_items (list)
        _items = []
        if self.return_items:
            for _item_return_items in self.return_items:
                if _item_return_items:
                    _items.append(_item_return_items.to_dict())
            _dict['returnItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in return_authorizations (list)
        _items = []
        if self.return_authorizations:
            for _item_return_authorizations in self.return_authorizations:
                if _item_return_authorizations:
                    _items.append(_item_return_authorizations.to_dict())
            _dict['returnAuthorizations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payment_information (list)
        _items = []
        if self.payment_information:
            for _item_payment_information in self.payment_information:
                if _item_payment_information:
                    _items.append(_item_payment_information.to_dict())
            _dict['paymentInformation'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetFulfillmentOrderResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fulfillmentOrder": FulfillmentOrder.from_dict(obj["fulfillmentOrder"]) if obj.get("fulfillmentOrder") is not None else None,
            "fulfillmentOrderItems": [FulfillmentOrderItem.from_dict(_item) for _item in obj["fulfillmentOrderItems"]] if obj.get("fulfillmentOrderItems") is not None else None,
            "fulfillmentShipments": [FulfillmentShipment.from_dict(_item) for _item in obj["fulfillmentShipments"]] if obj.get("fulfillmentShipments") is not None else None,
            "returnItems": [ReturnItem.from_dict(_item) for _item in obj["returnItems"]] if obj.get("returnItems") is not None else None,
            "returnAuthorizations": [ReturnAuthorization.from_dict(_item) for _item in obj["returnAuthorizations"]] if obj.get("returnAuthorizations") is not None else None,
            "paymentInformation": [PaymentInformation.from_dict(_item) for _item in obj["paymentInformation"]] if obj.get("paymentInformation") is not None else None
        })
        return _obj


