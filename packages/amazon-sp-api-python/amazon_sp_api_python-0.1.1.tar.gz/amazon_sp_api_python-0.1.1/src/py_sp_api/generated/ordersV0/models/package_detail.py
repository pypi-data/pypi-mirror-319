# coding: utf-8

"""
    Orders v0

    Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.ordersV0.models.confirm_shipment_order_item import ConfirmShipmentOrderItem
from typing import Optional, Set
from typing_extensions import Self

class PackageDetail(BaseModel):
    """
    Properties of packages
    """ # noqa: E501
    package_reference_id: StrictStr = Field(description="A seller-supplied identifier that uniquely identifies a package within the scope of an order. Only positive numeric values are supported.", alias="packageReferenceId")
    carrier_code: StrictStr = Field(description="Identifies the carrier that will deliver the package. This field is required for all marketplaces. For more information, refer to the [`CarrierCode` announcement](https://developer-docs.amazon.com/sp-api/changelog/carriercode-value-required-in-shipment-confirmations-for-br-mx-ca-sg-au-in-jp-marketplaces).", alias="carrierCode")
    carrier_name: Optional[StrictStr] = Field(default=None, description="Carrier Name that will deliver the package. Required when `carrierCode` is \"Others\" ", alias="carrierName")
    shipping_method: Optional[StrictStr] = Field(default=None, description="Ship method to be used for shipping the order.", alias="shippingMethod")
    tracking_number: StrictStr = Field(description="The tracking number used to obtain tracking and delivery information.", alias="trackingNumber")
    ship_date: datetime = Field(description="The shipping date for the package. Must be in <a href='https://developer-docs.amazon.com/sp-api/docs/iso-8601'>ISO 8601</a> date/time format.", alias="shipDate")
    ship_from_supply_source_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the supply source.", alias="shipFromSupplySourceId")
    order_items: List[ConfirmShipmentOrderItem] = Field(description="A list of order items.", alias="orderItems")
    __properties: ClassVar[List[str]] = ["packageReferenceId", "carrierCode", "carrierName", "shippingMethod", "trackingNumber", "shipDate", "shipFromSupplySourceId", "orderItems"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PackageDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in order_items (list)
        _items = []
        if self.order_items:
            for _item_order_items in self.order_items:
                if _item_order_items:
                    _items.append(_item_order_items.to_dict())
            _dict['orderItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PackageDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "packageReferenceId": obj.get("packageReferenceId"),
            "carrierCode": obj.get("carrierCode"),
            "carrierName": obj.get("carrierName"),
            "shippingMethod": obj.get("shippingMethod"),
            "trackingNumber": obj.get("trackingNumber"),
            "shipDate": obj.get("shipDate"),
            "shipFromSupplySourceId": obj.get("shipFromSupplySourceId"),
            "orderItems": [ConfirmShipmentOrderItem.from_dict(_item) for _item in obj["orderItems"]] if obj.get("orderItems") is not None else None
        })
        return _obj


