# coding: utf-8

"""
    Amazon Shipping API

    The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.

    The version of the OpenAPI document: v2
    Contact: swa-api-core@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.shippingV2.models.charge_component import ChargeComponent
from py_sp_api.generated.shippingV2.models.currency import Currency
from py_sp_api.generated.shippingV2.models.dimensions import Dimensions
from py_sp_api.generated.shippingV2.models.item import Item
from py_sp_api.generated.shippingV2.models.weight import Weight
from typing import Optional, Set
from typing_extensions import Self

class Package(BaseModel):
    """
    A package to be shipped through a shipping service offering.
    """ # noqa: E501
    dimensions: Dimensions
    weight: Weight
    insured_value: Currency = Field(alias="insuredValue")
    is_hazmat: Optional[StrictBool] = Field(default=None, description="When true, the package contains hazardous materials. Defaults to false.", alias="isHazmat")
    seller_display_name: Optional[StrictStr] = Field(default=None, description="The seller name displayed on the label.", alias="sellerDisplayName")
    charges: Optional[List[ChargeComponent]] = Field(default=None, description="A list of charges based on the shipping service charges applied on a package.")
    package_client_reference_id: StrictStr = Field(description="A client provided unique identifier for a package being shipped. This value should be saved by the client to pass as a parameter to the getShipmentDocuments operation.", alias="packageClientReferenceId")
    items: List[Item] = Field(description="A list of items.")
    __properties: ClassVar[List[str]] = ["dimensions", "weight", "insuredValue", "isHazmat", "sellerDisplayName", "charges", "packageClientReferenceId", "items"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Package from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dimensions
        if self.dimensions:
            _dict['dimensions'] = self.dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weight
        if self.weight:
            _dict['weight'] = self.weight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insured_value
        if self.insured_value:
            _dict['insuredValue'] = self.insured_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in charges (list)
        _items = []
        if self.charges:
            for _item_charges in self.charges:
                if _item_charges:
                    _items.append(_item_charges.to_dict())
            _dict['charges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Package from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dimensions": Dimensions.from_dict(obj["dimensions"]) if obj.get("dimensions") is not None else None,
            "weight": Weight.from_dict(obj["weight"]) if obj.get("weight") is not None else None,
            "insuredValue": Currency.from_dict(obj["insuredValue"]) if obj.get("insuredValue") is not None else None,
            "isHazmat": obj.get("isHazmat"),
            "sellerDisplayName": obj.get("sellerDisplayName"),
            "charges": [ChargeComponent.from_dict(_item) for _item in obj["charges"]] if obj.get("charges") is not None else None,
            "packageClientReferenceId": obj.get("packageClientReferenceId"),
            "items": [Item.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None
        })
        return _obj


