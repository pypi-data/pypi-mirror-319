# coding: utf-8

"""
    Amazon Shipping API

    The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.

    The version of the OpenAPI document: v2
    Contact: swa-api-core@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.shippingV2.models.document_format import DocumentFormat
from py_sp_api.generated.shippingV2.models.document_size import DocumentSize
from py_sp_api.generated.shippingV2.models.document_type import DocumentType
from typing import Optional, Set
from typing_extensions import Self

class RequestedDocumentSpecification(BaseModel):
    """
    The document specifications requested. For calls to the purchaseShipment operation, the shipment purchase fails if the specified document specifications are not among those returned in the response to the getRates operation.
    """ # noqa: E501
    format: DocumentFormat
    size: DocumentSize
    dpi: Optional[StrictInt] = Field(default=None, description="The dots per inch (DPI) value used in printing. This value represents a measure of the resolution of the document.")
    page_layout: Optional[StrictStr] = Field(default=None, description="Indicates the position of the label on the paper. Should be the same value as returned in getRates response.", alias="pageLayout")
    need_file_joining: StrictBool = Field(description="When true, files should be stitched together. Otherwise, files should be returned separately. Defaults to false.", alias="needFileJoining")
    requested_document_types: List[DocumentType] = Field(description="A list of the document types requested.", alias="requestedDocumentTypes")
    __properties: ClassVar[List[str]] = ["format", "size", "dpi", "pageLayout", "needFileJoining", "requestedDocumentTypes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequestedDocumentSpecification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of size
        if self.size:
            _dict['size'] = self.size.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequestedDocumentSpecification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "format": obj.get("format"),
            "size": DocumentSize.from_dict(obj["size"]) if obj.get("size") is not None else None,
            "dpi": obj.get("dpi"),
            "pageLayout": obj.get("pageLayout"),
            "needFileJoining": obj.get("needFileJoining"),
            "requestedDocumentTypes": obj.get("requestedDocumentTypes")
        })
        return _obj


