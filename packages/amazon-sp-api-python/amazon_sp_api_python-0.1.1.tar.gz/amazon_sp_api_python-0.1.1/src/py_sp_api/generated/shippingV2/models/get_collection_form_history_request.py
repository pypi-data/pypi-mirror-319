# coding: utf-8

"""
    Amazon Shipping API

    The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.

    The version of the OpenAPI document: v2
    Contact: swa-api-core@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.shippingV2.models.address import Address
from py_sp_api.generated.shippingV2.models.client_reference_detail import ClientReferenceDetail
from py_sp_api.generated.shippingV2.models.date_range import DateRange
from typing import Optional, Set
from typing_extensions import Self

class GetCollectionFormHistoryRequest(BaseModel):
    """
    The request schema to get query collections form history API .
    """ # noqa: E501
    client_reference_details: Optional[List[ClientReferenceDetail]] = Field(default=None, description="Object to pass additional information about the MCI Integrator shipperType: List of ClientReferenceDetail", alias="clientReferenceDetails")
    max_results: Optional[StrictInt] = Field(default=None, description="max Number of Results for query .", alias="maxResults")
    carrier_id: Optional[StrictStr] = Field(default=None, description="The carrier identifier for the offering, provided by the carrier.", alias="carrierId")
    ship_from_address: Optional[Address] = Field(default=None, alias="shipFromAddress")
    date_range: Optional[DateRange] = Field(default=None, alias="dateRange")
    __properties: ClassVar[List[str]] = ["clientReferenceDetails", "maxResults", "carrierId", "shipFromAddress", "dateRange"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetCollectionFormHistoryRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in client_reference_details (list)
        _items = []
        if self.client_reference_details:
            for _item_client_reference_details in self.client_reference_details:
                if _item_client_reference_details:
                    _items.append(_item_client_reference_details.to_dict())
            _dict['clientReferenceDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of ship_from_address
        if self.ship_from_address:
            _dict['shipFromAddress'] = self.ship_from_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_range
        if self.date_range:
            _dict['dateRange'] = self.date_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetCollectionFormHistoryRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientReferenceDetails": [ClientReferenceDetail.from_dict(_item) for _item in obj["clientReferenceDetails"]] if obj.get("clientReferenceDetails") is not None else None,
            "maxResults": obj.get("maxResults"),
            "carrierId": obj.get("carrierId"),
            "shipFromAddress": Address.from_dict(obj["shipFromAddress"]) if obj.get("shipFromAddress") is not None else None,
            "dateRange": DateRange.from_dict(obj["dateRange"]) if obj.get("dateRange") is not None else None
        })
        return _obj


