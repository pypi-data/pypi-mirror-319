# coding: utf-8

"""
    Selling Partner API for Direct Fulfillment Shipping

    Use the Selling Partner API for Direct Fulfillment Shipping to access a direct fulfillment vendor's shipping data.

    The version of the OpenAPI document: 2021-12-28
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from py_sp_api.generated.vendorDirectFulfillmentShipping_2021_12_28.models.label_data import LabelData
from py_sp_api.generated.vendorDirectFulfillmentShipping_2021_12_28.models.party_identification import PartyIdentification
from typing import Optional, Set
from typing_extensions import Self

class ShippingLabel(BaseModel):
    """
    Shipping label information for an order, including the purchase order number, selling party, ship from party, label format, and package details.
    """ # noqa: E501
    purchase_order_number: Annotated[str, Field(strict=True)] = Field(description="This field will contain the Purchase Order Number for this order.", alias="purchaseOrderNumber")
    selling_party: PartyIdentification = Field(alias="sellingParty")
    ship_from_party: PartyIdentification = Field(alias="shipFromParty")
    label_format: StrictStr = Field(description="Format of the label.", alias="labelFormat")
    label_data: List[LabelData] = Field(description="Provides the details of the packages in this shipment.", alias="labelData")
    __properties: ClassVar[List[str]] = ["purchaseOrderNumber", "sellingParty", "shipFromParty", "labelFormat", "labelData"]

    @field_validator('purchase_order_number')
    def purchase_order_number_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    @field_validator('label_format')
    def label_format_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PNG', 'ZPL']):
            raise ValueError("must be one of enum values ('PNG', 'ZPL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShippingLabel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of selling_party
        if self.selling_party:
            _dict['sellingParty'] = self.selling_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_from_party
        if self.ship_from_party:
            _dict['shipFromParty'] = self.ship_from_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in label_data (list)
        _items = []
        if self.label_data:
            for _item_label_data in self.label_data:
                if _item_label_data:
                    _items.append(_item_label_data.to_dict())
            _dict['labelData'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShippingLabel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "purchaseOrderNumber": obj.get("purchaseOrderNumber"),
            "sellingParty": PartyIdentification.from_dict(obj["sellingParty"]) if obj.get("sellingParty") is not None else None,
            "shipFromParty": PartyIdentification.from_dict(obj["shipFromParty"]) if obj.get("shipFromParty") is not None else None,
            "labelFormat": obj.get("labelFormat"),
            "labelData": [LabelData.from_dict(_item) for _item in obj["labelData"]] if obj.get("labelData") is not None else None
        })
        return _obj


