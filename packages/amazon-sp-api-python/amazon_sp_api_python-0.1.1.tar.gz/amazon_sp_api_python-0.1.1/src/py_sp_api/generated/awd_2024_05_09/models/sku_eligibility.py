# coding: utf-8

"""
    The Selling Partner API for Amazon Warehousing and Distribution

    The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 

    The version of the OpenAPI document: 2024-05-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.awd_2024_05_09.models.distribution_package_quantity import DistributionPackageQuantity
from py_sp_api.generated.awd_2024_05_09.models.inbound_eligibility_status import InboundEligibilityStatus
from py_sp_api.generated.awd_2024_05_09.models.sku_ineligibility_reason import SkuIneligibilityReason
from typing import Optional, Set
from typing_extensions import Self

class SkuEligibility(BaseModel):
    """
    Represents eligibility of one SKU.
    """ # noqa: E501
    ineligibility_reasons: Optional[List[SkuIneligibilityReason]] = Field(default=None, description="If not eligible, these are list of error codes and descriptions.", alias="ineligibilityReasons")
    package_quantity: DistributionPackageQuantity = Field(alias="packageQuantity")
    status: InboundEligibilityStatus
    __properties: ClassVar[List[str]] = ["ineligibilityReasons", "packageQuantity", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SkuEligibility from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ineligibility_reasons (list)
        _items = []
        if self.ineligibility_reasons:
            for _item_ineligibility_reasons in self.ineligibility_reasons:
                if _item_ineligibility_reasons:
                    _items.append(_item_ineligibility_reasons.to_dict())
            _dict['ineligibilityReasons'] = _items
        # override the default output from pydantic by calling `to_dict()` of package_quantity
        if self.package_quantity:
            _dict['packageQuantity'] = self.package_quantity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SkuEligibility from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ineligibilityReasons": [SkuIneligibilityReason.from_dict(_item) for _item in obj["ineligibilityReasons"]] if obj.get("ineligibilityReasons") is not None else None,
            "packageQuantity": DistributionPackageQuantity.from_dict(obj["packageQuantity"]) if obj.get("packageQuantity") is not None else None,
            "status": obj.get("status")
        })
        return _obj


