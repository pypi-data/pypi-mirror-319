# coding: utf-8

"""
    The Selling Partner API for Invoices.

    Use the Selling Partner API for Invoices to retrieve and manage invoice-related operations, which can help selling partners manage their bookkeeping processes.

    The version of the OpenAPI document: 2024-06-19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.InvoicesApiModel_2024_06_19.models.transaction_identifier import TransactionIdentifier
from typing import Optional, Set
from typing_extensions import Self

class Invoice(BaseModel):
    """
    Provides detailed information about an invoice.
    """ # noqa: E501
    var_date: Optional[datetime] = Field(default=None, description="The date and time the invoice is issued. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.", alias="date")
    error_code: Optional[StrictStr] = Field(default=None, description="If the invoice is in an error state, this attribute displays the error code.", alias="errorCode")
    external_invoice_id: Optional[StrictStr] = Field(default=None, description="The invoice identifier that is used by an external party. This is typically the government agency that authorized the invoice.", alias="externalInvoiceId")
    gov_response: Optional[StrictStr] = Field(default=None, description="The response message from the government authority when there is an error during invoice issuance.", alias="govResponse")
    id: Optional[StrictStr] = Field(default=None, description="The invoice identifier.")
    invoice_type: Optional[StrictStr] = Field(default=None, description="The classification of the invoice type. This varies across marketplaces. Use the `getInvoicesAttributes` operation to check `invoiceType` options.", alias="invoiceType")
    series: Optional[StrictStr] = Field(default=None, description="Use this identifier in conjunction with `externalInvoiceId` to identify invoices from the same seller.")
    status: Optional[StrictStr] = Field(default=None, description="The invoice status classification. Use the `getInvoicesAttributes` operation to check invoice status options.")
    transaction_ids: Optional[List[TransactionIdentifier]] = Field(default=None, description="List with identifiers for the transactions associated to the invoice.", alias="transactionIds")
    transaction_type: Optional[StrictStr] = Field(default=None, description="Classification of the transaction that originated this invoice. Use the `getInvoicesAttributes` operation to check `transactionType` options.", alias="transactionType")
    __properties: ClassVar[List[str]] = ["date", "errorCode", "externalInvoiceId", "govResponse", "id", "invoiceType", "series", "status", "transactionIds", "transactionType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Invoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in transaction_ids (list)
        _items = []
        if self.transaction_ids:
            for _item_transaction_ids in self.transaction_ids:
                if _item_transaction_ids:
                    _items.append(_item_transaction_ids.to_dict())
            _dict['transactionIds'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Invoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "errorCode": obj.get("errorCode"),
            "externalInvoiceId": obj.get("externalInvoiceId"),
            "govResponse": obj.get("govResponse"),
            "id": obj.get("id"),
            "invoiceType": obj.get("invoiceType"),
            "series": obj.get("series"),
            "status": obj.get("status"),
            "transactionIds": [TransactionIdentifier.from_dict(_item) for _item in obj["transactionIds"]] if obj.get("transactionIds") is not None else None,
            "transactionType": obj.get("transactionType")
        })
        return _obj


