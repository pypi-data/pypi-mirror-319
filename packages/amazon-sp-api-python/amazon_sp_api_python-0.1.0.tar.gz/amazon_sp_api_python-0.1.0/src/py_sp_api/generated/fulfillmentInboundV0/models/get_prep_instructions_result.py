# coding: utf-8

"""
    Selling Partner API for Fulfillment Inbound

    The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.fulfillmentInboundV0.models.asin_prep_instructions import ASINPrepInstructions
from py_sp_api.generated.fulfillmentInboundV0.models.invalid_asin import InvalidASIN
from py_sp_api.generated.fulfillmentInboundV0.models.invalid_sku import InvalidSKU
from py_sp_api.generated.fulfillmentInboundV0.models.sku_prep_instructions import SKUPrepInstructions
from typing import Optional, Set
from typing_extensions import Self

class GetPrepInstructionsResult(BaseModel):
    """
    Result for the get prep instructions operation
    """ # noqa: E501
    sku_prep_instructions_list: Optional[List[SKUPrepInstructions]] = Field(default=None, description="A list of SKU labeling requirements and item preparation instructions.", alias="SKUPrepInstructionsList")
    invalid_sku_list: Optional[List[InvalidSKU]] = Field(default=None, description="A list of invalid SKU values and the reason they are invalid.", alias="InvalidSKUList")
    asin_prep_instructions_list: Optional[List[ASINPrepInstructions]] = Field(default=None, description="A list of item preparation instructions.", alias="ASINPrepInstructionsList")
    invalid_asin_list: Optional[List[InvalidASIN]] = Field(default=None, description="A list of invalid ASIN values and the reasons they are invalid.", alias="InvalidASINList")
    __properties: ClassVar[List[str]] = ["SKUPrepInstructionsList", "InvalidSKUList", "ASINPrepInstructionsList", "InvalidASINList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetPrepInstructionsResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sku_prep_instructions_list (list)
        _items = []
        if self.sku_prep_instructions_list:
            for _item_sku_prep_instructions_list in self.sku_prep_instructions_list:
                if _item_sku_prep_instructions_list:
                    _items.append(_item_sku_prep_instructions_list.to_dict())
            _dict['SKUPrepInstructionsList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in invalid_sku_list (list)
        _items = []
        if self.invalid_sku_list:
            for _item_invalid_sku_list in self.invalid_sku_list:
                if _item_invalid_sku_list:
                    _items.append(_item_invalid_sku_list.to_dict())
            _dict['InvalidSKUList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in asin_prep_instructions_list (list)
        _items = []
        if self.asin_prep_instructions_list:
            for _item_asin_prep_instructions_list in self.asin_prep_instructions_list:
                if _item_asin_prep_instructions_list:
                    _items.append(_item_asin_prep_instructions_list.to_dict())
            _dict['ASINPrepInstructionsList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in invalid_asin_list (list)
        _items = []
        if self.invalid_asin_list:
            for _item_invalid_asin_list in self.invalid_asin_list:
                if _item_invalid_asin_list:
                    _items.append(_item_invalid_asin_list.to_dict())
            _dict['InvalidASINList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetPrepInstructionsResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "SKUPrepInstructionsList": [SKUPrepInstructions.from_dict(_item) for _item in obj["SKUPrepInstructionsList"]] if obj.get("SKUPrepInstructionsList") is not None else None,
            "InvalidSKUList": [InvalidSKU.from_dict(_item) for _item in obj["InvalidSKUList"]] if obj.get("InvalidSKUList") is not None else None,
            "ASINPrepInstructionsList": [ASINPrepInstructions.from_dict(_item) for _item in obj["ASINPrepInstructionsList"]] if obj.get("ASINPrepInstructionsList") is not None else None,
            "InvalidASINList": [InvalidASIN.from_dict(_item) for _item in obj["InvalidASINList"]] if obj.get("InvalidASINList") is not None else None
        })
        return _obj


