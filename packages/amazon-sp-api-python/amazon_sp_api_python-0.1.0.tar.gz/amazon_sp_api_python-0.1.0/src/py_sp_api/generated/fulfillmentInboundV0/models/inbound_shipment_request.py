# coding: utf-8

"""
    Selling Partner API for Fulfillment Inbound

    The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from py_sp_api.generated.fulfillmentInboundV0.models.inbound_shipment_header import InboundShipmentHeader
from py_sp_api.generated.fulfillmentInboundV0.models.inbound_shipment_item import InboundShipmentItem
from typing import Optional, Set
from typing_extensions import Self

class InboundShipmentRequest(BaseModel):
    """
    The request schema for an inbound shipment.
    """ # noqa: E501
    inbound_shipment_header: InboundShipmentHeader = Field(alias="InboundShipmentHeader")
    inbound_shipment_items: List[InboundShipmentItem] = Field(description="A list of inbound shipment item information.", alias="InboundShipmentItems")
    marketplace_id: StrictStr = Field(description="A marketplace identifier. Specifies the marketplace where the product would be stored.", alias="MarketplaceId")
    __properties: ClassVar[List[str]] = ["InboundShipmentHeader", "InboundShipmentItems", "MarketplaceId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InboundShipmentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of inbound_shipment_header
        if self.inbound_shipment_header:
            _dict['InboundShipmentHeader'] = self.inbound_shipment_header.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in inbound_shipment_items (list)
        _items = []
        if self.inbound_shipment_items:
            for _item_inbound_shipment_items in self.inbound_shipment_items:
                if _item_inbound_shipment_items:
                    _items.append(_item_inbound_shipment_items.to_dict())
            _dict['InboundShipmentItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InboundShipmentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "InboundShipmentHeader": InboundShipmentHeader.from_dict(obj["InboundShipmentHeader"]) if obj.get("InboundShipmentHeader") is not None else None,
            "InboundShipmentItems": [InboundShipmentItem.from_dict(_item) for _item in obj["InboundShipmentItems"]] if obj.get("InboundShipmentItems") is not None else None,
            "MarketplaceId": obj.get("MarketplaceId")
        })
        return _obj


