# coding: utf-8

"""
    Selling Partner API for Pricing

    The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.productPricingV0.models.detailed_shipping_time_type import DetailedShippingTimeType
from py_sp_api.generated.productPricingV0.models.money_type import MoneyType
from py_sp_api.generated.productPricingV0.models.offer_customer_type import OfferCustomerType
from py_sp_api.generated.productPricingV0.models.points import Points
from py_sp_api.generated.productPricingV0.models.prime_information_type import PrimeInformationType
from py_sp_api.generated.productPricingV0.models.quantity_discount_price_type import QuantityDiscountPriceType
from py_sp_api.generated.productPricingV0.models.seller_feedback_type import SellerFeedbackType
from py_sp_api.generated.productPricingV0.models.ships_from_type import ShipsFromType
from typing import Optional, Set
from typing_extensions import Self

class OfferDetail(BaseModel):
    """
    OfferDetail
    """ # noqa: E501
    my_offer: Optional[StrictBool] = Field(default=None, description="When true, this is the seller's offer.", alias="MyOffer")
    offer_type: Optional[OfferCustomerType] = Field(default=None, alias="offerType")
    sub_condition: StrictStr = Field(description="The subcondition of the item. Subcondition values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.", alias="SubCondition")
    seller_id: Optional[StrictStr] = Field(default=None, description="The seller identifier for the offer.", alias="SellerId")
    condition_notes: Optional[StrictStr] = Field(default=None, description="Information about the condition of the item.", alias="ConditionNotes")
    seller_feedback_rating: Optional[SellerFeedbackType] = Field(default=None, alias="SellerFeedbackRating")
    shipping_time: DetailedShippingTimeType = Field(alias="ShippingTime")
    listing_price: MoneyType = Field(alias="ListingPrice")
    quantity_discount_prices: Optional[List[QuantityDiscountPriceType]] = Field(default=None, alias="quantityDiscountPrices")
    points: Optional[Points] = Field(default=None, alias="Points")
    shipping: MoneyType = Field(alias="Shipping")
    ships_from: Optional[ShipsFromType] = Field(default=None, alias="ShipsFrom")
    is_fulfilled_by_amazon: StrictBool = Field(description="When true, the offer is fulfilled by Amazon.", alias="IsFulfilledByAmazon")
    prime_information: Optional[PrimeInformationType] = Field(default=None, alias="PrimeInformation")
    is_buy_box_winner: Optional[StrictBool] = Field(default=None, description="When true, the offer is currently in the Buy Box. There can be up to two Buy Box winners at any time per ASIN, one that is eligible for Prime and one that is not eligible for Prime.", alias="IsBuyBoxWinner")
    is_featured_merchant: Optional[StrictBool] = Field(default=None, description="When true, the seller of the item is eligible to win the Buy Box.", alias="IsFeaturedMerchant")
    __properties: ClassVar[List[str]] = ["MyOffer", "offerType", "SubCondition", "SellerId", "ConditionNotes", "SellerFeedbackRating", "ShippingTime", "ListingPrice", "quantityDiscountPrices", "Points", "Shipping", "ShipsFrom", "IsFulfilledByAmazon", "PrimeInformation", "IsBuyBoxWinner", "IsFeaturedMerchant"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OfferDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of seller_feedback_rating
        if self.seller_feedback_rating:
            _dict['SellerFeedbackRating'] = self.seller_feedback_rating.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_time
        if self.shipping_time:
            _dict['ShippingTime'] = self.shipping_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of listing_price
        if self.listing_price:
            _dict['ListingPrice'] = self.listing_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in quantity_discount_prices (list)
        _items = []
        if self.quantity_discount_prices:
            for _item_quantity_discount_prices in self.quantity_discount_prices:
                if _item_quantity_discount_prices:
                    _items.append(_item_quantity_discount_prices.to_dict())
            _dict['quantityDiscountPrices'] = _items
        # override the default output from pydantic by calling `to_dict()` of points
        if self.points:
            _dict['Points'] = self.points.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping
        if self.shipping:
            _dict['Shipping'] = self.shipping.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ships_from
        if self.ships_from:
            _dict['ShipsFrom'] = self.ships_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prime_information
        if self.prime_information:
            _dict['PrimeInformation'] = self.prime_information.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OfferDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "MyOffer": obj.get("MyOffer"),
            "offerType": obj.get("offerType"),
            "SubCondition": obj.get("SubCondition"),
            "SellerId": obj.get("SellerId"),
            "ConditionNotes": obj.get("ConditionNotes"),
            "SellerFeedbackRating": SellerFeedbackType.from_dict(obj["SellerFeedbackRating"]) if obj.get("SellerFeedbackRating") is not None else None,
            "ShippingTime": DetailedShippingTimeType.from_dict(obj["ShippingTime"]) if obj.get("ShippingTime") is not None else None,
            "ListingPrice": MoneyType.from_dict(obj["ListingPrice"]) if obj.get("ListingPrice") is not None else None,
            "quantityDiscountPrices": [QuantityDiscountPriceType.from_dict(_item) for _item in obj["quantityDiscountPrices"]] if obj.get("quantityDiscountPrices") is not None else None,
            "Points": Points.from_dict(obj["Points"]) if obj.get("Points") is not None else None,
            "Shipping": MoneyType.from_dict(obj["Shipping"]) if obj.get("Shipping") is not None else None,
            "ShipsFrom": ShipsFromType.from_dict(obj["ShipsFrom"]) if obj.get("ShipsFrom") is not None else None,
            "IsFulfilledByAmazon": obj.get("IsFulfilledByAmazon"),
            "PrimeInformation": PrimeInformationType.from_dict(obj["PrimeInformation"]) if obj.get("PrimeInformation") is not None else None,
            "IsBuyBoxWinner": obj.get("IsBuyBoxWinner"),
            "IsFeaturedMerchant": obj.get("IsFeaturedMerchant")
        })
        return _obj


