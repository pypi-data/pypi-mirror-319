# coding: utf-8

"""
    The Selling Partner API for Amazon Warehousing and Distribution

    The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 

    The version of the OpenAPI document: 2024-05-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.awd_2024_05_09.models.distribution_package_quantity import DistributionPackageQuantity
from py_sp_api.generated.awd_2024_05_09.models.order_attribute import OrderAttribute
from py_sp_api.generated.awd_2024_05_09.models.outbound_execution_error import OutboundExecutionError
from py_sp_api.generated.awd_2024_05_09.models.outbound_shipment import OutboundShipment
from py_sp_api.generated.awd_2024_05_09.models.outbound_status import OutboundStatus
from py_sp_api.generated.awd_2024_05_09.models.product_quantity import ProductQuantity
from typing import Optional, Set
from typing_extensions import Self

class OutboundOrder(BaseModel):
    """
    Represents an AWD outbound order.
    """ # noqa: E501
    confirmed_on: Optional[datetime] = Field(default=None, description="Date on which this outbound order was confirmed.", alias="confirmedOn")
    created_at: Optional[datetime] = Field(default=None, description="Date on which this outbound order was created.", alias="createdAt")
    eligible_packages_to_outbound: Optional[List[DistributionPackageQuantity]] = Field(default=None, description="List of packages that are eligible for outbound.", alias="eligiblePackagesToOutbound")
    eligible_products_to_outbound: Optional[List[ProductQuantity]] = Field(default=None, description="List of product units that are eligible for outbound.", alias="eligibleProductsToOutbound")
    execution_errors: Optional[List[OutboundExecutionError]] = Field(default=None, description="Execution errors associated with the outbound order. This field will be populated if the order failed validation.", alias="executionErrors")
    order_id: StrictStr = Field(description="Order ID for the outbound order.", alias="orderId")
    order_preferences: Optional[List[OrderAttribute]] = Field(default=None, description="Order preferences for this outbound order.", alias="orderPreferences")
    order_status: OutboundStatus = Field(alias="orderStatus")
    outbound_shipments: List[OutboundShipment] = Field(description="List of outbound shipments that are part of this order.", alias="outboundShipments")
    packages_to_outbound: Optional[List[DistributionPackageQuantity]] = Field(default=None, description="List of packages to be outbound.", alias="packagesToOutbound")
    products_to_outbound: Optional[List[ProductQuantity]] = Field(default=None, description="List of product units to be outbound.", alias="productsToOutbound")
    shipped_outbound_packages: Optional[List[DistributionPackageQuantity]] = Field(default=None, description="Outbound packages that are shipped after the execution has completed post confirmation.", alias="shippedOutboundPackages")
    shipped_outbound_products: Optional[List[ProductQuantity]] = Field(default=None, description="Outbound product units that are shipped after the execution has completed post confirmation.", alias="shippedOutboundProducts")
    updated_at: Optional[datetime] = Field(default=None, description="Date on which this outbound order was last updated.", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["confirmedOn", "createdAt", "eligiblePackagesToOutbound", "eligibleProductsToOutbound", "executionErrors", "orderId", "orderPreferences", "orderStatus", "outboundShipments", "packagesToOutbound", "productsToOutbound", "shippedOutboundPackages", "shippedOutboundProducts", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OutboundOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in eligible_packages_to_outbound (list)
        _items = []
        if self.eligible_packages_to_outbound:
            for _item_eligible_packages_to_outbound in self.eligible_packages_to_outbound:
                if _item_eligible_packages_to_outbound:
                    _items.append(_item_eligible_packages_to_outbound.to_dict())
            _dict['eligiblePackagesToOutbound'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in eligible_products_to_outbound (list)
        _items = []
        if self.eligible_products_to_outbound:
            for _item_eligible_products_to_outbound in self.eligible_products_to_outbound:
                if _item_eligible_products_to_outbound:
                    _items.append(_item_eligible_products_to_outbound.to_dict())
            _dict['eligibleProductsToOutbound'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in execution_errors (list)
        _items = []
        if self.execution_errors:
            for _item_execution_errors in self.execution_errors:
                if _item_execution_errors:
                    _items.append(_item_execution_errors.to_dict())
            _dict['executionErrors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_preferences (list)
        _items = []
        if self.order_preferences:
            for _item_order_preferences in self.order_preferences:
                if _item_order_preferences:
                    _items.append(_item_order_preferences.to_dict())
            _dict['orderPreferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in outbound_shipments (list)
        _items = []
        if self.outbound_shipments:
            for _item_outbound_shipments in self.outbound_shipments:
                if _item_outbound_shipments:
                    _items.append(_item_outbound_shipments.to_dict())
            _dict['outboundShipments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in packages_to_outbound (list)
        _items = []
        if self.packages_to_outbound:
            for _item_packages_to_outbound in self.packages_to_outbound:
                if _item_packages_to_outbound:
                    _items.append(_item_packages_to_outbound.to_dict())
            _dict['packagesToOutbound'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in products_to_outbound (list)
        _items = []
        if self.products_to_outbound:
            for _item_products_to_outbound in self.products_to_outbound:
                if _item_products_to_outbound:
                    _items.append(_item_products_to_outbound.to_dict())
            _dict['productsToOutbound'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipped_outbound_packages (list)
        _items = []
        if self.shipped_outbound_packages:
            for _item_shipped_outbound_packages in self.shipped_outbound_packages:
                if _item_shipped_outbound_packages:
                    _items.append(_item_shipped_outbound_packages.to_dict())
            _dict['shippedOutboundPackages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipped_outbound_products (list)
        _items = []
        if self.shipped_outbound_products:
            for _item_shipped_outbound_products in self.shipped_outbound_products:
                if _item_shipped_outbound_products:
                    _items.append(_item_shipped_outbound_products.to_dict())
            _dict['shippedOutboundProducts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OutboundOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confirmedOn": obj.get("confirmedOn"),
            "createdAt": obj.get("createdAt"),
            "eligiblePackagesToOutbound": [DistributionPackageQuantity.from_dict(_item) for _item in obj["eligiblePackagesToOutbound"]] if obj.get("eligiblePackagesToOutbound") is not None else None,
            "eligibleProductsToOutbound": [ProductQuantity.from_dict(_item) for _item in obj["eligibleProductsToOutbound"]] if obj.get("eligibleProductsToOutbound") is not None else None,
            "executionErrors": [OutboundExecutionError.from_dict(_item) for _item in obj["executionErrors"]] if obj.get("executionErrors") is not None else None,
            "orderId": obj.get("orderId"),
            "orderPreferences": [OrderAttribute.from_dict(_item) for _item in obj["orderPreferences"]] if obj.get("orderPreferences") is not None else None,
            "orderStatus": obj.get("orderStatus"),
            "outboundShipments": [OutboundShipment.from_dict(_item) for _item in obj["outboundShipments"]] if obj.get("outboundShipments") is not None else None,
            "packagesToOutbound": [DistributionPackageQuantity.from_dict(_item) for _item in obj["packagesToOutbound"]] if obj.get("packagesToOutbound") is not None else None,
            "productsToOutbound": [ProductQuantity.from_dict(_item) for _item in obj["productsToOutbound"]] if obj.get("productsToOutbound") is not None else None,
            "shippedOutboundPackages": [DistributionPackageQuantity.from_dict(_item) for _item in obj["shippedOutboundPackages"]] if obj.get("shippedOutboundPackages") is not None else None,
            "shippedOutboundProducts": [ProductQuantity.from_dict(_item) for _item in obj["shippedOutboundProducts"]] if obj.get("shippedOutboundProducts") is not None else None,
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


