# coding: utf-8

"""
    Selling Partner API for Data Kiosk

    The Selling Partner API for Data Kiosk lets you submit GraphQL queries from a variety of schemas to help selling partners manage their businesses.

    The version of the OpenAPI document: 2023-11-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.dataKiosk_2023_11_15.models.query_pagination import QueryPagination
from typing import Optional, Set
from typing_extensions import Self

class Query(BaseModel):
    """
    Detailed information about the query.
    """ # noqa: E501
    query_id: StrictStr = Field(description="The query identifier. This identifier is unique only in combination with a selling partner account ID.", alias="queryId")
    query: StrictStr = Field(description="The submitted query.")
    created_time: datetime = Field(description="The date and time when the query was created, in ISO 8601 date time format.", alias="createdTime")
    processing_status: StrictStr = Field(description="The processing status of the query.", alias="processingStatus")
    processing_start_time: Optional[datetime] = Field(default=None, description="The date and time when the query processing started, in ISO 8601 date time format.", alias="processingStartTime")
    processing_end_time: Optional[datetime] = Field(default=None, description="The date and time when the query processing completed, in ISO 8601 date time format.", alias="processingEndTime")
    data_document_id: Optional[StrictStr] = Field(default=None, description="The data document identifier. This identifier is only present when there is data available as a result of the query. This identifier is unique only in combination with a selling partner account ID. Pass this identifier into the `getDocument` operation to get the information required to retrieve the data document's contents.", alias="dataDocumentId")
    error_document_id: Optional[StrictStr] = Field(default=None, description="The error document identifier. This identifier is only present when an error occurs during query processing. This identifier is unique only in combination with a selling partner account ID. Pass this identifier into the `getDocument` operation to get the information required to retrieve the error document's contents.", alias="errorDocumentId")
    pagination: Optional[QueryPagination] = None
    __properties: ClassVar[List[str]] = ["queryId", "query", "createdTime", "processingStatus", "processingStartTime", "processingEndTime", "dataDocumentId", "errorDocumentId", "pagination"]

    @field_validator('processing_status')
    def processing_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CANCELLED', 'DONE', 'FATAL', 'IN_PROGRESS', 'IN_QUEUE']):
            raise ValueError("must be one of enum values ('CANCELLED', 'DONE', 'FATAL', 'IN_PROGRESS', 'IN_QUEUE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Query from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pagination
        if self.pagination:
            _dict['pagination'] = self.pagination.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Query from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "queryId": obj.get("queryId"),
            "query": obj.get("query"),
            "createdTime": obj.get("createdTime"),
            "processingStatus": obj.get("processingStatus"),
            "processingStartTime": obj.get("processingStartTime"),
            "processingEndTime": obj.get("processingEndTime"),
            "dataDocumentId": obj.get("dataDocumentId"),
            "errorDocumentId": obj.get("errorDocumentId"),
            "pagination": QueryPagination.from_dict(obj["pagination"]) if obj.get("pagination") is not None else None
        })
        return _obj


