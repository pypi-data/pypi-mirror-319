# coding: utf-8

"""
    Amazon Shipping API

    The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.

    The version of the OpenAPI document: v2
    Contact: swa-api-core@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.shippingV2.models.access_point_type import AccessPointType
from py_sp_api.generated.shippingV2.models.accessibility_attributes import AccessibilityAttributes
from py_sp_api.generated.shippingV2.models.address import Address
from py_sp_api.generated.shippingV2.models.exception_operating_hours import ExceptionOperatingHours
from py_sp_api.generated.shippingV2.models.operating_hours import OperatingHours
from typing import Optional, Set
from typing_extensions import Self

class AccessPoint(BaseModel):
    """
    Access point details
    """ # noqa: E501
    access_point_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the access point", alias="accessPointId")
    name: Optional[StrictStr] = Field(default=None, description="Name of entity (store/hub etc) where this access point is located")
    timezone: Optional[StrictStr] = Field(default=None, description="Timezone of access point")
    type: Optional[AccessPointType] = None
    accessibility_attributes: Optional[AccessibilityAttributes] = Field(default=None, alias="accessibilityAttributes")
    address: Optional[Address] = None
    exception_operating_hours: Optional[List[ExceptionOperatingHours]] = Field(default=None, alias="exceptionOperatingHours")
    assistance_type: Optional[StrictStr] = Field(default=None, alias="assistanceType")
    score: Optional[StrictStr] = Field(default=None, description="The score of access point, based on proximity to postal code and sorting preference. This can be used to sort access point results on shipper's end.")
    standard_operating_hours: Optional[Dict[str, OperatingHours]] = Field(default=None, description="Map of day of the week to operating hours of that day", alias="standardOperatingHours")
    __properties: ClassVar[List[str]] = ["accessPointId", "name", "timezone", "type", "accessibilityAttributes", "address", "exceptionOperatingHours", "assistanceType", "score", "standardOperatingHours"]

    @field_validator('assistance_type')
    def assistance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STAFF_ASSISTED', 'SELF_ASSISTED']):
            raise ValueError("must be one of enum values ('STAFF_ASSISTED', 'SELF_ASSISTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccessPoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accessibility_attributes
        if self.accessibility_attributes:
            _dict['accessibilityAttributes'] = self.accessibility_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in exception_operating_hours (list)
        _items = []
        if self.exception_operating_hours:
            for _item_exception_operating_hours in self.exception_operating_hours:
                if _item_exception_operating_hours:
                    _items.append(_item_exception_operating_hours.to_dict())
            _dict['exceptionOperatingHours'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in standard_operating_hours (dict)
        _field_dict = {}
        if self.standard_operating_hours:
            for _key_standard_operating_hours in self.standard_operating_hours:
                if self.standard_operating_hours[_key_standard_operating_hours]:
                    _field_dict[_key_standard_operating_hours] = self.standard_operating_hours[_key_standard_operating_hours].to_dict()
            _dict['standardOperatingHours'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccessPoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessPointId": obj.get("accessPointId"),
            "name": obj.get("name"),
            "timezone": obj.get("timezone"),
            "type": obj.get("type"),
            "accessibilityAttributes": AccessibilityAttributes.from_dict(obj["accessibilityAttributes"]) if obj.get("accessibilityAttributes") is not None else None,
            "address": Address.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "exceptionOperatingHours": [ExceptionOperatingHours.from_dict(_item) for _item in obj["exceptionOperatingHours"]] if obj.get("exceptionOperatingHours") is not None else None,
            "assistanceType": obj.get("assistanceType"),
            "score": obj.get("score"),
            "standardOperatingHours": dict(
                (_k, OperatingHours.from_dict(_v))
                for _k, _v in obj["standardOperatingHours"].items()
            )
            if obj.get("standardOperatingHours") is not None
            else None
        })
        return _obj


