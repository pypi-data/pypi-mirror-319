# coding: utf-8

"""
    Selling Partner API for FBA Inventory

    The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.fbaInventory.models.researching_quantity import ResearchingQuantity
from py_sp_api.generated.fbaInventory.models.reserved_quantity import ReservedQuantity
from py_sp_api.generated.fbaInventory.models.unfulfillable_quantity import UnfulfillableQuantity
from typing import Optional, Set
from typing_extensions import Self

class InventoryDetails(BaseModel):
    """
    Summarized inventory details. This object will not appear if the details parameter in the request is false.
    """ # noqa: E501
    fulfillable_quantity: Optional[StrictInt] = Field(default=None, description="The item quantity that can be picked, packed, and shipped.", alias="fulfillableQuantity")
    inbound_working_quantity: Optional[StrictInt] = Field(default=None, description="The number of units in an inbound shipment for which you have notified Amazon.", alias="inboundWorkingQuantity")
    inbound_shipped_quantity: Optional[StrictInt] = Field(default=None, description="The number of units in an inbound shipment that you have notified Amazon about and have provided a tracking number.", alias="inboundShippedQuantity")
    inbound_receiving_quantity: Optional[StrictInt] = Field(default=None, description="The number of units that have not yet been received at an Amazon fulfillment center for processing, but are part of an inbound shipment with some units that have already been received and processed.", alias="inboundReceivingQuantity")
    reserved_quantity: Optional[ReservedQuantity] = Field(default=None, alias="reservedQuantity")
    researching_quantity: Optional[ResearchingQuantity] = Field(default=None, alias="researchingQuantity")
    unfulfillable_quantity: Optional[UnfulfillableQuantity] = Field(default=None, alias="unfulfillableQuantity")
    __properties: ClassVar[List[str]] = ["fulfillableQuantity", "inboundWorkingQuantity", "inboundShippedQuantity", "inboundReceivingQuantity", "reservedQuantity", "researchingQuantity", "unfulfillableQuantity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InventoryDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of reserved_quantity
        if self.reserved_quantity:
            _dict['reservedQuantity'] = self.reserved_quantity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of researching_quantity
        if self.researching_quantity:
            _dict['researchingQuantity'] = self.researching_quantity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unfulfillable_quantity
        if self.unfulfillable_quantity:
            _dict['unfulfillableQuantity'] = self.unfulfillable_quantity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InventoryDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fulfillableQuantity": obj.get("fulfillableQuantity"),
            "inboundWorkingQuantity": obj.get("inboundWorkingQuantity"),
            "inboundShippedQuantity": obj.get("inboundShippedQuantity"),
            "inboundReceivingQuantity": obj.get("inboundReceivingQuantity"),
            "reservedQuantity": ReservedQuantity.from_dict(obj["reservedQuantity"]) if obj.get("reservedQuantity") is not None else None,
            "researchingQuantity": ResearchingQuantity.from_dict(obj["researchingQuantity"]) if obj.get("researchingQuantity") is not None else None,
            "unfulfillableQuantity": UnfulfillableQuantity.from_dict(obj["unfulfillableQuantity"]) if obj.get("unfulfillableQuantity") is not None else None
        })
        return _obj


