# coding: utf-8

"""
    Selling Partner API for Retail Procurement Orders

    The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from py_sp_api.generated.vendorOrders.models.get_purchase_order_response import GetPurchaseOrderResponse
from py_sp_api.generated.vendorOrders.models.get_purchase_orders_response import GetPurchaseOrdersResponse
from py_sp_api.generated.vendorOrders.models.get_purchase_orders_status_response import GetPurchaseOrdersStatusResponse
from py_sp_api.generated.vendorOrders.models.submit_acknowledgement_request import SubmitAcknowledgementRequest
from py_sp_api.generated.vendorOrders.models.submit_acknowledgement_response import SubmitAcknowledgementResponse

from py_sp_api.generated.vendorOrders.api_client import ApiClient, RequestSerialized
from py_sp_api.generated.vendorOrders.api_response import ApiResponse
from py_sp_api.generated.vendorOrders.rest import RESTResponseType


class VendorOrdersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_purchase_order(
        self,
        purchase_order_number: Annotated[StrictStr, Field(description="The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetPurchaseOrderResponse:
        """get_purchase_order

        Returns a purchase order based on the `purchaseOrderNumber` value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param purchase_order_number: The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code. (required)
        :type purchase_order_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_purchase_order_serialize(
            purchase_order_number=purchase_order_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPurchaseOrderResponse",
            '400': "GetPurchaseOrderResponse",
            '401': "GetPurchaseOrderResponse",
            '403': "GetPurchaseOrderResponse",
            '404': "GetPurchaseOrderResponse",
            '415': "GetPurchaseOrderResponse",
            '429': "GetPurchaseOrderResponse",
            '500': "GetPurchaseOrderResponse",
            '503': "GetPurchaseOrderResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_purchase_order_with_http_info(
        self,
        purchase_order_number: Annotated[StrictStr, Field(description="The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetPurchaseOrderResponse]:
        """get_purchase_order

        Returns a purchase order based on the `purchaseOrderNumber` value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param purchase_order_number: The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code. (required)
        :type purchase_order_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_purchase_order_serialize(
            purchase_order_number=purchase_order_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPurchaseOrderResponse",
            '400': "GetPurchaseOrderResponse",
            '401': "GetPurchaseOrderResponse",
            '403': "GetPurchaseOrderResponse",
            '404': "GetPurchaseOrderResponse",
            '415': "GetPurchaseOrderResponse",
            '429': "GetPurchaseOrderResponse",
            '500': "GetPurchaseOrderResponse",
            '503': "GetPurchaseOrderResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_purchase_order_without_preload_content(
        self,
        purchase_order_number: Annotated[StrictStr, Field(description="The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_purchase_order

        Returns a purchase order based on the `purchaseOrderNumber` value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param purchase_order_number: The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code. (required)
        :type purchase_order_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_purchase_order_serialize(
            purchase_order_number=purchase_order_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPurchaseOrderResponse",
            '400': "GetPurchaseOrderResponse",
            '401': "GetPurchaseOrderResponse",
            '403': "GetPurchaseOrderResponse",
            '404': "GetPurchaseOrderResponse",
            '415': "GetPurchaseOrderResponse",
            '429': "GetPurchaseOrderResponse",
            '500': "GetPurchaseOrderResponse",
            '503': "GetPurchaseOrderResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_purchase_order_serialize(
        self,
        purchase_order_number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if purchase_order_number is not None:
            _path_params['purchaseOrderNumber'] = purchase_order_number
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/vendor/orders/v1/purchaseOrders/{purchaseOrderNumber}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_purchase_orders(
        self,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The limit to the number of records returned. Default value is 100 records.")] = None,
        created_after: Annotated[Optional[datetime], Field(description="Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        created_before: Annotated[Optional[datetime], Field(description="Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort in ascending or descending order by purchase order creation date.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call")] = None,
        include_details: Annotated[Optional[StrictStr], Field(description="When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true.")] = None,
        changed_after: Annotated[Optional[datetime], Field(description="Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        changed_before: Annotated[Optional[datetime], Field(description="Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        po_item_state: Annotated[Optional[StrictStr], Field(description="Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.")] = None,
        is_po_changed: Annotated[Optional[StrictStr], Field(description="When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false.")] = None,
        purchase_order_state: Annotated[Optional[StrictStr], Field(description="Filters purchase orders based on the purchase order state.")] = None,
        ordering_vendor_code: Annotated[Optional[StrictStr], Field(description="Filters purchase orders based on the specified ordering vendor code. This value should be same as 'sellingParty.partyId' in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetPurchaseOrdersResponse:
        """get_purchase_orders

        Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the `createdAfter`, `createdBefore`, `changedAfter` and `changedBefore` parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting `includeDetails` to false. You can then use the `getPurchaseOrder` operation to receive details for a specific purchase order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param limit: The limit to the number of records returned. Default value is 100 records.
        :type limit: int
        :param created_after: Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format.
        :type created_after: datetime
        :param created_before: Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format.
        :type created_before: datetime
        :param sort_order: Sort in ascending or descending order by purchase order creation date.
        :type sort_order: str
        :param next_token: Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call
        :type next_token: str
        :param include_details: When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true.
        :type include_details: bool
        :param changed_after: Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
        :type changed_after: datetime
        :param changed_before: Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
        :type changed_before: datetime
        :param po_item_state: Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.
        :type po_item_state: str
        :param is_po_changed: When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false.
        :type is_po_changed: bool
        :param purchase_order_state: Filters purchase orders based on the purchase order state.
        :type purchase_order_state: str
        :param ordering_vendor_code: Filters purchase orders based on the specified ordering vendor code. This value should be same as 'sellingParty.partyId' in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned.
        :type ordering_vendor_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_purchase_orders_serialize(
            limit=limit,
            created_after=created_after,
            created_before=created_before,
            sort_order=sort_order,
            next_token=next_token,
            include_details=include_details,
            changed_after=changed_after,
            changed_before=changed_before,
            po_item_state=po_item_state,
            is_po_changed=is_po_changed,
            purchase_order_state=purchase_order_state,
            ordering_vendor_code=ordering_vendor_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPurchaseOrdersResponse",
            '400': "GetPurchaseOrdersResponse",
            '403': "GetPurchaseOrdersResponse",
            '404': "GetPurchaseOrdersResponse",
            '415': "GetPurchaseOrdersResponse",
            '429': "GetPurchaseOrdersResponse",
            '500': "GetPurchaseOrdersResponse",
            '503': "GetPurchaseOrdersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_purchase_orders_with_http_info(
        self,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The limit to the number of records returned. Default value is 100 records.")] = None,
        created_after: Annotated[Optional[datetime], Field(description="Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        created_before: Annotated[Optional[datetime], Field(description="Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort in ascending or descending order by purchase order creation date.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call")] = None,
        include_details: Annotated[Optional[StrictStr], Field(description="When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true.")] = None,
        changed_after: Annotated[Optional[datetime], Field(description="Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        changed_before: Annotated[Optional[datetime], Field(description="Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        po_item_state: Annotated[Optional[StrictStr], Field(description="Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.")] = None,
        is_po_changed: Annotated[Optional[StrictStr], Field(description="When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false.")] = None,
        purchase_order_state: Annotated[Optional[StrictStr], Field(description="Filters purchase orders based on the purchase order state.")] = None,
        ordering_vendor_code: Annotated[Optional[StrictStr], Field(description="Filters purchase orders based on the specified ordering vendor code. This value should be same as 'sellingParty.partyId' in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetPurchaseOrdersResponse]:
        """get_purchase_orders

        Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the `createdAfter`, `createdBefore`, `changedAfter` and `changedBefore` parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting `includeDetails` to false. You can then use the `getPurchaseOrder` operation to receive details for a specific purchase order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param limit: The limit to the number of records returned. Default value is 100 records.
        :type limit: int
        :param created_after: Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format.
        :type created_after: datetime
        :param created_before: Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format.
        :type created_before: datetime
        :param sort_order: Sort in ascending or descending order by purchase order creation date.
        :type sort_order: str
        :param next_token: Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call
        :type next_token: str
        :param include_details: When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true.
        :type include_details: bool
        :param changed_after: Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
        :type changed_after: datetime
        :param changed_before: Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
        :type changed_before: datetime
        :param po_item_state: Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.
        :type po_item_state: str
        :param is_po_changed: When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false.
        :type is_po_changed: bool
        :param purchase_order_state: Filters purchase orders based on the purchase order state.
        :type purchase_order_state: str
        :param ordering_vendor_code: Filters purchase orders based on the specified ordering vendor code. This value should be same as 'sellingParty.partyId' in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned.
        :type ordering_vendor_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_purchase_orders_serialize(
            limit=limit,
            created_after=created_after,
            created_before=created_before,
            sort_order=sort_order,
            next_token=next_token,
            include_details=include_details,
            changed_after=changed_after,
            changed_before=changed_before,
            po_item_state=po_item_state,
            is_po_changed=is_po_changed,
            purchase_order_state=purchase_order_state,
            ordering_vendor_code=ordering_vendor_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPurchaseOrdersResponse",
            '400': "GetPurchaseOrdersResponse",
            '403': "GetPurchaseOrdersResponse",
            '404': "GetPurchaseOrdersResponse",
            '415': "GetPurchaseOrdersResponse",
            '429': "GetPurchaseOrdersResponse",
            '500': "GetPurchaseOrdersResponse",
            '503': "GetPurchaseOrdersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_purchase_orders_without_preload_content(
        self,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The limit to the number of records returned. Default value is 100 records.")] = None,
        created_after: Annotated[Optional[datetime], Field(description="Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        created_before: Annotated[Optional[datetime], Field(description="Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort in ascending or descending order by purchase order creation date.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call")] = None,
        include_details: Annotated[Optional[StrictStr], Field(description="When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true.")] = None,
        changed_after: Annotated[Optional[datetime], Field(description="Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        changed_before: Annotated[Optional[datetime], Field(description="Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        po_item_state: Annotated[Optional[StrictStr], Field(description="Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.")] = None,
        is_po_changed: Annotated[Optional[StrictStr], Field(description="When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false.")] = None,
        purchase_order_state: Annotated[Optional[StrictStr], Field(description="Filters purchase orders based on the purchase order state.")] = None,
        ordering_vendor_code: Annotated[Optional[StrictStr], Field(description="Filters purchase orders based on the specified ordering vendor code. This value should be same as 'sellingParty.partyId' in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_purchase_orders

        Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the `createdAfter`, `createdBefore`, `changedAfter` and `changedBefore` parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting `includeDetails` to false. You can then use the `getPurchaseOrder` operation to receive details for a specific purchase order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param limit: The limit to the number of records returned. Default value is 100 records.
        :type limit: int
        :param created_after: Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format.
        :type created_after: datetime
        :param created_before: Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format.
        :type created_before: datetime
        :param sort_order: Sort in ascending or descending order by purchase order creation date.
        :type sort_order: str
        :param next_token: Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call
        :type next_token: str
        :param include_details: When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true.
        :type include_details: bool
        :param changed_after: Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
        :type changed_after: datetime
        :param changed_before: Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
        :type changed_before: datetime
        :param po_item_state: Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.
        :type po_item_state: str
        :param is_po_changed: When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false.
        :type is_po_changed: bool
        :param purchase_order_state: Filters purchase orders based on the purchase order state.
        :type purchase_order_state: str
        :param ordering_vendor_code: Filters purchase orders based on the specified ordering vendor code. This value should be same as 'sellingParty.partyId' in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned.
        :type ordering_vendor_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_purchase_orders_serialize(
            limit=limit,
            created_after=created_after,
            created_before=created_before,
            sort_order=sort_order,
            next_token=next_token,
            include_details=include_details,
            changed_after=changed_after,
            changed_before=changed_before,
            po_item_state=po_item_state,
            is_po_changed=is_po_changed,
            purchase_order_state=purchase_order_state,
            ordering_vendor_code=ordering_vendor_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPurchaseOrdersResponse",
            '400': "GetPurchaseOrdersResponse",
            '403': "GetPurchaseOrdersResponse",
            '404': "GetPurchaseOrdersResponse",
            '415': "GetPurchaseOrdersResponse",
            '429': "GetPurchaseOrdersResponse",
            '500': "GetPurchaseOrdersResponse",
            '503': "GetPurchaseOrdersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_purchase_orders_serialize(
        self,
        limit,
        created_after,
        created_before,
        sort_order,
        next_token,
        include_details,
        changed_after,
        changed_before,
        po_item_state,
        is_po_changed,
        purchase_order_state,
        ordering_vendor_code,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if created_after is not None:
            if isinstance(created_after, datetime):
                _query_params.append(
                    (
                        'createdAfter',
                        created_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdAfter', created_after))
            
        if created_before is not None:
            if isinstance(created_before, datetime):
                _query_params.append(
                    (
                        'createdBefore',
                        created_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdBefore', created_before))
            
        if sort_order is not None:
            
            _query_params.append(('sortOrder', sort_order))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        if include_details is not None:
            
            _query_params.append(('includeDetails', include_details))
            
        if changed_after is not None:
            if isinstance(changed_after, datetime):
                _query_params.append(
                    (
                        'changedAfter',
                        changed_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('changedAfter', changed_after))
            
        if changed_before is not None:
            if isinstance(changed_before, datetime):
                _query_params.append(
                    (
                        'changedBefore',
                        changed_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('changedBefore', changed_before))
            
        if po_item_state is not None:
            
            _query_params.append(('poItemState', po_item_state))
            
        if is_po_changed is not None:
            
            _query_params.append(('isPOChanged', is_po_changed))
            
        if purchase_order_state is not None:
            
            _query_params.append(('purchaseOrderState', purchase_order_state))
            
        if ordering_vendor_code is not None:
            
            _query_params.append(('orderingVendorCode', ordering_vendor_code))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'payload'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/vendor/orders/v1/purchaseOrders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_purchase_orders_status(
        self,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The limit to the number of records returned. Default value is 100 records.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort in ascending or descending order by purchase order creation date.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Used for pagination when there are more purchase orders than the specified result size limit.")] = None,
        created_after: Annotated[Optional[datetime], Field(description="Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        created_before: Annotated[Optional[datetime], Field(description="Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        updated_before: Annotated[Optional[datetime], Field(description="Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        purchase_order_number: Annotated[Optional[StrictStr], Field(description="Provides purchase order status for the specified purchase order number.")] = None,
        purchase_order_status: Annotated[Optional[StrictStr], Field(description="Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses.")] = None,
        item_confirmation_status: Annotated[Optional[StrictStr], Field(description="Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included.")] = None,
        item_receive_status: Annotated[Optional[StrictStr], Field(description="Filters purchase orders based on the purchase order's item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included.")] = None,
        ordering_vendor_code: Annotated[Optional[StrictStr], Field(description="Filters purchase orders based on the specified ordering vendor code. This value should be same as 'sellingParty.partyId' in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned.")] = None,
        ship_to_party_id: Annotated[Optional[StrictStr], Field(description="Filters purchase orders for a specific buyer's Fulfillment Center/warehouse by providing ship to location id here. This value should be same as 'shipToParty.partyId' in the purchase order. If not included in filter, this will return purchase orders for all the buyer's warehouses used for vendor group purchase orders.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetPurchaseOrdersStatusResponse:
        """get_purchase_orders_status

        Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param limit: The limit to the number of records returned. Default value is 100 records.
        :type limit: int
        :param sort_order: Sort in ascending or descending order by purchase order creation date.
        :type sort_order: str
        :param next_token: Used for pagination when there are more purchase orders than the specified result size limit.
        :type next_token: str
        :param created_after: Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
        :type created_after: datetime
        :param created_before: Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
        :type created_before: datetime
        :param updated_after: Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
        :type updated_after: datetime
        :param updated_before: Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
        :type updated_before: datetime
        :param purchase_order_number: Provides purchase order status for the specified purchase order number.
        :type purchase_order_number: str
        :param purchase_order_status: Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses.
        :type purchase_order_status: str
        :param item_confirmation_status: Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included.
        :type item_confirmation_status: str
        :param item_receive_status: Filters purchase orders based on the purchase order's item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included.
        :type item_receive_status: str
        :param ordering_vendor_code: Filters purchase orders based on the specified ordering vendor code. This value should be same as 'sellingParty.partyId' in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned.
        :type ordering_vendor_code: str
        :param ship_to_party_id: Filters purchase orders for a specific buyer's Fulfillment Center/warehouse by providing ship to location id here. This value should be same as 'shipToParty.partyId' in the purchase order. If not included in filter, this will return purchase orders for all the buyer's warehouses used for vendor group purchase orders.
        :type ship_to_party_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_purchase_orders_status_serialize(
            limit=limit,
            sort_order=sort_order,
            next_token=next_token,
            created_after=created_after,
            created_before=created_before,
            updated_after=updated_after,
            updated_before=updated_before,
            purchase_order_number=purchase_order_number,
            purchase_order_status=purchase_order_status,
            item_confirmation_status=item_confirmation_status,
            item_receive_status=item_receive_status,
            ordering_vendor_code=ordering_vendor_code,
            ship_to_party_id=ship_to_party_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPurchaseOrdersStatusResponse",
            '400': "GetPurchaseOrdersStatusResponse",
            '403': "GetPurchaseOrdersStatusResponse",
            '404': "GetPurchaseOrdersStatusResponse",
            '415': "GetPurchaseOrdersStatusResponse",
            '429': "GetPurchaseOrdersStatusResponse",
            '500': "GetPurchaseOrdersStatusResponse",
            '503': "GetPurchaseOrdersStatusResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_purchase_orders_status_with_http_info(
        self,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The limit to the number of records returned. Default value is 100 records.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort in ascending or descending order by purchase order creation date.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Used for pagination when there are more purchase orders than the specified result size limit.")] = None,
        created_after: Annotated[Optional[datetime], Field(description="Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        created_before: Annotated[Optional[datetime], Field(description="Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        updated_before: Annotated[Optional[datetime], Field(description="Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        purchase_order_number: Annotated[Optional[StrictStr], Field(description="Provides purchase order status for the specified purchase order number.")] = None,
        purchase_order_status: Annotated[Optional[StrictStr], Field(description="Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses.")] = None,
        item_confirmation_status: Annotated[Optional[StrictStr], Field(description="Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included.")] = None,
        item_receive_status: Annotated[Optional[StrictStr], Field(description="Filters purchase orders based on the purchase order's item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included.")] = None,
        ordering_vendor_code: Annotated[Optional[StrictStr], Field(description="Filters purchase orders based on the specified ordering vendor code. This value should be same as 'sellingParty.partyId' in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned.")] = None,
        ship_to_party_id: Annotated[Optional[StrictStr], Field(description="Filters purchase orders for a specific buyer's Fulfillment Center/warehouse by providing ship to location id here. This value should be same as 'shipToParty.partyId' in the purchase order. If not included in filter, this will return purchase orders for all the buyer's warehouses used for vendor group purchase orders.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetPurchaseOrdersStatusResponse]:
        """get_purchase_orders_status

        Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param limit: The limit to the number of records returned. Default value is 100 records.
        :type limit: int
        :param sort_order: Sort in ascending or descending order by purchase order creation date.
        :type sort_order: str
        :param next_token: Used for pagination when there are more purchase orders than the specified result size limit.
        :type next_token: str
        :param created_after: Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
        :type created_after: datetime
        :param created_before: Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
        :type created_before: datetime
        :param updated_after: Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
        :type updated_after: datetime
        :param updated_before: Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
        :type updated_before: datetime
        :param purchase_order_number: Provides purchase order status for the specified purchase order number.
        :type purchase_order_number: str
        :param purchase_order_status: Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses.
        :type purchase_order_status: str
        :param item_confirmation_status: Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included.
        :type item_confirmation_status: str
        :param item_receive_status: Filters purchase orders based on the purchase order's item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included.
        :type item_receive_status: str
        :param ordering_vendor_code: Filters purchase orders based on the specified ordering vendor code. This value should be same as 'sellingParty.partyId' in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned.
        :type ordering_vendor_code: str
        :param ship_to_party_id: Filters purchase orders for a specific buyer's Fulfillment Center/warehouse by providing ship to location id here. This value should be same as 'shipToParty.partyId' in the purchase order. If not included in filter, this will return purchase orders for all the buyer's warehouses used for vendor group purchase orders.
        :type ship_to_party_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_purchase_orders_status_serialize(
            limit=limit,
            sort_order=sort_order,
            next_token=next_token,
            created_after=created_after,
            created_before=created_before,
            updated_after=updated_after,
            updated_before=updated_before,
            purchase_order_number=purchase_order_number,
            purchase_order_status=purchase_order_status,
            item_confirmation_status=item_confirmation_status,
            item_receive_status=item_receive_status,
            ordering_vendor_code=ordering_vendor_code,
            ship_to_party_id=ship_to_party_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPurchaseOrdersStatusResponse",
            '400': "GetPurchaseOrdersStatusResponse",
            '403': "GetPurchaseOrdersStatusResponse",
            '404': "GetPurchaseOrdersStatusResponse",
            '415': "GetPurchaseOrdersStatusResponse",
            '429': "GetPurchaseOrdersStatusResponse",
            '500': "GetPurchaseOrdersStatusResponse",
            '503': "GetPurchaseOrdersStatusResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_purchase_orders_status_without_preload_content(
        self,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The limit to the number of records returned. Default value is 100 records.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort in ascending or descending order by purchase order creation date.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Used for pagination when there are more purchase orders than the specified result size limit.")] = None,
        created_after: Annotated[Optional[datetime], Field(description="Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        created_before: Annotated[Optional[datetime], Field(description="Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        updated_before: Annotated[Optional[datetime], Field(description="Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format.")] = None,
        purchase_order_number: Annotated[Optional[StrictStr], Field(description="Provides purchase order status for the specified purchase order number.")] = None,
        purchase_order_status: Annotated[Optional[StrictStr], Field(description="Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses.")] = None,
        item_confirmation_status: Annotated[Optional[StrictStr], Field(description="Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included.")] = None,
        item_receive_status: Annotated[Optional[StrictStr], Field(description="Filters purchase orders based on the purchase order's item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included.")] = None,
        ordering_vendor_code: Annotated[Optional[StrictStr], Field(description="Filters purchase orders based on the specified ordering vendor code. This value should be same as 'sellingParty.partyId' in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned.")] = None,
        ship_to_party_id: Annotated[Optional[StrictStr], Field(description="Filters purchase orders for a specific buyer's Fulfillment Center/warehouse by providing ship to location id here. This value should be same as 'shipToParty.partyId' in the purchase order. If not included in filter, this will return purchase orders for all the buyer's warehouses used for vendor group purchase orders.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_purchase_orders_status

        Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param limit: The limit to the number of records returned. Default value is 100 records.
        :type limit: int
        :param sort_order: Sort in ascending or descending order by purchase order creation date.
        :type sort_order: str
        :param next_token: Used for pagination when there are more purchase orders than the specified result size limit.
        :type next_token: str
        :param created_after: Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
        :type created_after: datetime
        :param created_before: Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
        :type created_before: datetime
        :param updated_after: Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
        :type updated_after: datetime
        :param updated_before: Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
        :type updated_before: datetime
        :param purchase_order_number: Provides purchase order status for the specified purchase order number.
        :type purchase_order_number: str
        :param purchase_order_status: Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses.
        :type purchase_order_status: str
        :param item_confirmation_status: Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included.
        :type item_confirmation_status: str
        :param item_receive_status: Filters purchase orders based on the purchase order's item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included.
        :type item_receive_status: str
        :param ordering_vendor_code: Filters purchase orders based on the specified ordering vendor code. This value should be same as 'sellingParty.partyId' in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned.
        :type ordering_vendor_code: str
        :param ship_to_party_id: Filters purchase orders for a specific buyer's Fulfillment Center/warehouse by providing ship to location id here. This value should be same as 'shipToParty.partyId' in the purchase order. If not included in filter, this will return purchase orders for all the buyer's warehouses used for vendor group purchase orders.
        :type ship_to_party_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_purchase_orders_status_serialize(
            limit=limit,
            sort_order=sort_order,
            next_token=next_token,
            created_after=created_after,
            created_before=created_before,
            updated_after=updated_after,
            updated_before=updated_before,
            purchase_order_number=purchase_order_number,
            purchase_order_status=purchase_order_status,
            item_confirmation_status=item_confirmation_status,
            item_receive_status=item_receive_status,
            ordering_vendor_code=ordering_vendor_code,
            ship_to_party_id=ship_to_party_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPurchaseOrdersStatusResponse",
            '400': "GetPurchaseOrdersStatusResponse",
            '403': "GetPurchaseOrdersStatusResponse",
            '404': "GetPurchaseOrdersStatusResponse",
            '415': "GetPurchaseOrdersStatusResponse",
            '429': "GetPurchaseOrdersStatusResponse",
            '500': "GetPurchaseOrdersStatusResponse",
            '503': "GetPurchaseOrdersStatusResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_purchase_orders_status_serialize(
        self,
        limit,
        sort_order,
        next_token,
        created_after,
        created_before,
        updated_after,
        updated_before,
        purchase_order_number,
        purchase_order_status,
        item_confirmation_status,
        item_receive_status,
        ordering_vendor_code,
        ship_to_party_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort_order is not None:
            
            _query_params.append(('sortOrder', sort_order))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        if created_after is not None:
            if isinstance(created_after, datetime):
                _query_params.append(
                    (
                        'createdAfter',
                        created_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdAfter', created_after))
            
        if created_before is not None:
            if isinstance(created_before, datetime):
                _query_params.append(
                    (
                        'createdBefore',
                        created_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdBefore', created_before))
            
        if updated_after is not None:
            if isinstance(updated_after, datetime):
                _query_params.append(
                    (
                        'updatedAfter',
                        updated_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updatedAfter', updated_after))
            
        if updated_before is not None:
            if isinstance(updated_before, datetime):
                _query_params.append(
                    (
                        'updatedBefore',
                        updated_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updatedBefore', updated_before))
            
        if purchase_order_number is not None:
            
            _query_params.append(('purchaseOrderNumber', purchase_order_number))
            
        if purchase_order_status is not None:
            
            _query_params.append(('purchaseOrderStatus', purchase_order_status))
            
        if item_confirmation_status is not None:
            
            _query_params.append(('itemConfirmationStatus', item_confirmation_status))
            
        if item_receive_status is not None:
            
            _query_params.append(('itemReceiveStatus', item_receive_status))
            
        if ordering_vendor_code is not None:
            
            _query_params.append(('orderingVendorCode', ordering_vendor_code))
            
        if ship_to_party_id is not None:
            
            _query_params.append(('shipToPartyId', ship_to_party_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/vendor/orders/v1/purchaseOrdersStatus',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def submit_acknowledgement(
        self,
        body: Annotated[SubmitAcknowledgementRequest, Field(description="Submits acknowledgements for one or more purchase orders from a vendor.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SubmitAcknowledgementResponse:
        """submit_acknowledgement

        Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param body: Submits acknowledgements for one or more purchase orders from a vendor. (required)
        :type body: SubmitAcknowledgementRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submit_acknowledgement_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "SubmitAcknowledgementResponse",
            '400': "SubmitAcknowledgementResponse",
            '403': "SubmitAcknowledgementResponse",
            '404': "SubmitAcknowledgementResponse",
            '413': "SubmitAcknowledgementResponse",
            '415': "SubmitAcknowledgementResponse",
            '429': "SubmitAcknowledgementResponse",
            '500': "SubmitAcknowledgementResponse",
            '503': "SubmitAcknowledgementResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def submit_acknowledgement_with_http_info(
        self,
        body: Annotated[SubmitAcknowledgementRequest, Field(description="Submits acknowledgements for one or more purchase orders from a vendor.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SubmitAcknowledgementResponse]:
        """submit_acknowledgement

        Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param body: Submits acknowledgements for one or more purchase orders from a vendor. (required)
        :type body: SubmitAcknowledgementRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submit_acknowledgement_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "SubmitAcknowledgementResponse",
            '400': "SubmitAcknowledgementResponse",
            '403': "SubmitAcknowledgementResponse",
            '404': "SubmitAcknowledgementResponse",
            '413': "SubmitAcknowledgementResponse",
            '415': "SubmitAcknowledgementResponse",
            '429': "SubmitAcknowledgementResponse",
            '500': "SubmitAcknowledgementResponse",
            '503': "SubmitAcknowledgementResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def submit_acknowledgement_without_preload_content(
        self,
        body: Annotated[SubmitAcknowledgementRequest, Field(description="Submits acknowledgements for one or more purchase orders from a vendor.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """submit_acknowledgement

        Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param body: Submits acknowledgements for one or more purchase orders from a vendor. (required)
        :type body: SubmitAcknowledgementRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submit_acknowledgement_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "SubmitAcknowledgementResponse",
            '400': "SubmitAcknowledgementResponse",
            '403': "SubmitAcknowledgementResponse",
            '404': "SubmitAcknowledgementResponse",
            '413': "SubmitAcknowledgementResponse",
            '415': "SubmitAcknowledgementResponse",
            '429': "SubmitAcknowledgementResponse",
            '500': "SubmitAcknowledgementResponse",
            '503': "SubmitAcknowledgementResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _submit_acknowledgement_serialize(
        self,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/vendor/orders/v1/acknowledgements',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


