# coding: utf-8

"""
    Selling Partner API for Retail Procurement Orders

    The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.vendorOrders.models.import_details import ImportDetails
from py_sp_api.generated.vendorOrders.models.order_item import OrderItem
from py_sp_api.generated.vendorOrders.models.party_identification import PartyIdentification
from typing import Optional, Set
from typing_extensions import Self

class OrderDetails(BaseModel):
    """
    Details of an order.
    """ # noqa: E501
    purchase_order_date: datetime = Field(description="The date the purchase order was placed. Must be in ISO-8601 date/time format.", alias="purchaseOrderDate")
    purchase_order_changed_date: Optional[datetime] = Field(default=None, description="The date when purchase order was last changed by Amazon after the order was placed. This date will be greater than 'purchaseOrderDate'. This means the PO data was changed on that date and vendors are required to fulfill the  updated PO. The PO changes can be related to Item Quantity, Ship to Location, Ship Window etc. This field will not be present in orders that have not changed after creation. Must be in ISO-8601 date/time format.", alias="purchaseOrderChangedDate")
    purchase_order_state_changed_date: datetime = Field(description="The date when current purchase order state was changed. Current purchase order state is available in the field 'purchaseOrderState'. Must be in ISO-8601 date/time format.", alias="purchaseOrderStateChangedDate")
    purchase_order_type: Optional[StrictStr] = Field(default=None, description="Type of purchase order.", alias="purchaseOrderType")
    import_details: Optional[ImportDetails] = Field(default=None, alias="importDetails")
    deal_code: Optional[StrictStr] = Field(default=None, description="If requested by the recipient, this field will contain a promotional/deal number. The discount code line is optional. It is used to obtain a price discount on items on the order.", alias="dealCode")
    payment_method: Optional[StrictStr] = Field(default=None, description="Payment method used.", alias="paymentMethod")
    buying_party: Optional[PartyIdentification] = Field(default=None, alias="buyingParty")
    selling_party: Optional[PartyIdentification] = Field(default=None, alias="sellingParty")
    ship_to_party: Optional[PartyIdentification] = Field(default=None, alias="shipToParty")
    bill_to_party: Optional[PartyIdentification] = Field(default=None, alias="billToParty")
    ship_window: Optional[StrictStr] = Field(default=None, description="Defines a date time interval according to ISO8601. Interval is separated by double hyphen (--).", alias="shipWindow")
    delivery_window: Optional[StrictStr] = Field(default=None, description="Defines a date time interval according to ISO8601. Interval is separated by double hyphen (--).", alias="deliveryWindow")
    items: List[OrderItem] = Field(description="A list of items in this purchase order.")
    __properties: ClassVar[List[str]] = ["purchaseOrderDate", "purchaseOrderChangedDate", "purchaseOrderStateChangedDate", "purchaseOrderType", "importDetails", "dealCode", "paymentMethod", "buyingParty", "sellingParty", "shipToParty", "billToParty", "shipWindow", "deliveryWindow", "items"]

    @field_validator('purchase_order_type')
    def purchase_order_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RegularOrder', 'ConsignedOrder', 'NewProductIntroduction', 'RushOrder']):
            raise ValueError("must be one of enum values ('RegularOrder', 'ConsignedOrder', 'NewProductIntroduction', 'RushOrder')")
        return value

    @field_validator('payment_method')
    def payment_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invoice', 'Consignment', 'CreditCard', 'Prepaid']):
            raise ValueError("must be one of enum values ('Invoice', 'Consignment', 'CreditCard', 'Prepaid')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of import_details
        if self.import_details:
            _dict['importDetails'] = self.import_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of buying_party
        if self.buying_party:
            _dict['buyingParty'] = self.buying_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selling_party
        if self.selling_party:
            _dict['sellingParty'] = self.selling_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_party
        if self.ship_to_party:
            _dict['shipToParty'] = self.ship_to_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bill_to_party
        if self.bill_to_party:
            _dict['billToParty'] = self.bill_to_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "purchaseOrderDate": obj.get("purchaseOrderDate"),
            "purchaseOrderChangedDate": obj.get("purchaseOrderChangedDate"),
            "purchaseOrderStateChangedDate": obj.get("purchaseOrderStateChangedDate"),
            "purchaseOrderType": obj.get("purchaseOrderType"),
            "importDetails": ImportDetails.from_dict(obj["importDetails"]) if obj.get("importDetails") is not None else None,
            "dealCode": obj.get("dealCode"),
            "paymentMethod": obj.get("paymentMethod"),
            "buyingParty": PartyIdentification.from_dict(obj["buyingParty"]) if obj.get("buyingParty") is not None else None,
            "sellingParty": PartyIdentification.from_dict(obj["sellingParty"]) if obj.get("sellingParty") is not None else None,
            "shipToParty": PartyIdentification.from_dict(obj["shipToParty"]) if obj.get("shipToParty") is not None else None,
            "billToParty": PartyIdentification.from_dict(obj["billToParty"]) if obj.get("billToParty") is not None else None,
            "shipWindow": obj.get("shipWindow"),
            "deliveryWindow": obj.get("deliveryWindow"),
            "items": [OrderItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None
        })
        return _obj


