# coding: utf-8

"""
    Selling Partner API for Services

    With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.services.models.item_delivery import ItemDelivery
from typing import Optional, Set
from typing_extensions import Self

class AssociatedItem(BaseModel):
    """
    Information about an item associated with the service job.
    """ # noqa: E501
    asin: Optional[StrictStr] = Field(default=None, description="The Amazon Standard Identification Number (ASIN) of the item.")
    title: Optional[StrictStr] = Field(default=None, description="The title of the item.")
    quantity: Optional[StrictInt] = Field(default=None, description="The total number of items included in the order.")
    order_id: Optional[Annotated[str, Field(min_length=5, strict=True, max_length=20)]] = Field(default=None, description="The Amazon-defined identifier for an order placed by the buyer, in 3-7-7 format.", alias="orderId")
    item_status: Optional[StrictStr] = Field(default=None, description="The status of the item.", alias="itemStatus")
    brand_name: Optional[StrictStr] = Field(default=None, description="The brand name of the item.", alias="brandName")
    item_delivery: Optional[ItemDelivery] = Field(default=None, alias="itemDelivery")
    __properties: ClassVar[List[str]] = ["asin", "title", "quantity", "orderId", "itemStatus", "brandName", "itemDelivery"]

    @field_validator('item_status')
    def item_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVE', 'CANCELLED', 'SHIPPED', 'DELIVERED']):
            raise ValueError("must be one of enum values ('ACTIVE', 'CANCELLED', 'SHIPPED', 'DELIVERED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssociatedItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of item_delivery
        if self.item_delivery:
            _dict['itemDelivery'] = self.item_delivery.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssociatedItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asin": obj.get("asin"),
            "title": obj.get("title"),
            "quantity": obj.get("quantity"),
            "orderId": obj.get("orderId"),
            "itemStatus": obj.get("itemStatus"),
            "brandName": obj.get("brandName"),
            "itemDelivery": ItemDelivery.from_dict(obj["itemDelivery"]) if obj.get("itemDelivery") is not None else None
        })
        return _obj


