# coding: utf-8

"""
    Selling Partner API for Services

    With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from py_sp_api.generated.services.models.capacity_type import CapacityType
from typing import Optional, Set
from typing_extensions import Self

class FixedSlotCapacityQuery(BaseModel):
    """
    Request schema for the `getFixedSlotCapacity` operation. This schema is used to define the time range, capacity types and slot duration which are being queried.
    """ # noqa: E501
    capacity_types: Optional[List[CapacityType]] = Field(default=None, description="An array of capacity types which are being requested. Default value is `[SCHEDULED_CAPACITY]`.", alias="capacityTypes")
    slot_duration: Optional[Union[Annotated[float, Field(multiple_of=5, strict=True)], Annotated[int, Field(strict=True)]]] = Field(default=None, description="Size in which slots are being requested. This value should be a multiple of 5 and fall in the range: 5 <= `slotDuration` <= 360.", alias="slotDuration")
    start_date_time: datetime = Field(description="Start date time from which the capacity slots are being requested in ISO 8601 format.", alias="startDateTime")
    end_date_time: datetime = Field(description="End date time up to which the capacity slots are being requested in ISO 8601 format.", alias="endDateTime")
    __properties: ClassVar[List[str]] = ["capacityTypes", "slotDuration", "startDateTime", "endDateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FixedSlotCapacityQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FixedSlotCapacityQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capacityTypes": obj.get("capacityTypes"),
            "slotDuration": obj.get("slotDuration"),
            "startDateTime": obj.get("startDateTime"),
            "endDateTime": obj.get("endDateTime")
        })
        return _obj


