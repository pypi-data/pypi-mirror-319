# coding: utf-8

"""
    Selling Partner API for Services

    With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FixedSlot(BaseModel):
    """
    In this slot format each slot only has the requested capacity types. This slot size is as specified by slot duration.
    """ # noqa: E501
    start_date_time: Optional[datetime] = Field(default=None, description="Start date time of slot in ISO 8601 format with precision of seconds.", alias="startDateTime")
    scheduled_capacity: Optional[StrictInt] = Field(default=None, description="Scheduled capacity corresponding to the slot. This capacity represents the originally allocated capacity as per resource schedule.", alias="scheduledCapacity")
    available_capacity: Optional[StrictInt] = Field(default=None, description="Available capacity corresponding to the slot. This capacity represents the capacity available for allocation to reservations.", alias="availableCapacity")
    encumbered_capacity: Optional[StrictInt] = Field(default=None, description="Encumbered capacity corresponding to the slot. This capacity represents the capacity allocated for Amazon Jobs/Appointments/Orders.", alias="encumberedCapacity")
    reserved_capacity: Optional[StrictInt] = Field(default=None, description="Reserved capacity corresponding to the slot. This capacity represents the capacity made unavailable due to events like Breaks/Leaves/Lunch.", alias="reservedCapacity")
    __properties: ClassVar[List[str]] = ["startDateTime", "scheduledCapacity", "availableCapacity", "encumberedCapacity", "reservedCapacity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FixedSlot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FixedSlot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "startDateTime": obj.get("startDateTime"),
            "scheduledCapacity": obj.get("scheduledCapacity"),
            "availableCapacity": obj.get("availableCapacity"),
            "encumberedCapacity": obj.get("encumberedCapacity"),
            "reservedCapacity": obj.get("reservedCapacity")
        })
        return _obj


