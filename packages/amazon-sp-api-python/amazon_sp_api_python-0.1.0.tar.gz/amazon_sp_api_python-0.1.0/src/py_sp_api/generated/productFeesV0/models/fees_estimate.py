# coding: utf-8

"""
    Selling Partner API for Product Fees

    The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.productFeesV0.models.fee_detail import FeeDetail
from py_sp_api.generated.productFeesV0.models.money_type import MoneyType
from typing import Optional, Set
from typing_extensions import Self

class FeesEstimate(BaseModel):
    """
    The total estimated fees for an item and a list of details.
    """ # noqa: E501
    time_of_fees_estimation: datetime = Field(description="The time at which the fees were estimated. This defaults to the time the request is made.", alias="TimeOfFeesEstimation")
    total_fees_estimate: Optional[MoneyType] = Field(default=None, alias="TotalFeesEstimate")
    fee_detail_list: Optional[List[FeeDetail]] = Field(default=None, description="A list of other fees that contribute to a given fee.", alias="FeeDetailList")
    __properties: ClassVar[List[str]] = ["TimeOfFeesEstimation", "TotalFeesEstimate", "FeeDetailList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeesEstimate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of total_fees_estimate
        if self.total_fees_estimate:
            _dict['TotalFeesEstimate'] = self.total_fees_estimate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fee_detail_list (list)
        _items = []
        if self.fee_detail_list:
            for _item_fee_detail_list in self.fee_detail_list:
                if _item_fee_detail_list:
                    _items.append(_item_fee_detail_list.to_dict())
            _dict['FeeDetailList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeesEstimate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "TimeOfFeesEstimation": obj.get("TimeOfFeesEstimation"),
            "TotalFeesEstimate": MoneyType.from_dict(obj["TotalFeesEstimate"]) if obj.get("TotalFeesEstimate") is not None else None,
            "FeeDetailList": [FeeDetail.from_dict(_item) for _item in obj["FeeDetailList"]] if obj.get("FeeDetailList") is not None else None
        })
        return _obj


