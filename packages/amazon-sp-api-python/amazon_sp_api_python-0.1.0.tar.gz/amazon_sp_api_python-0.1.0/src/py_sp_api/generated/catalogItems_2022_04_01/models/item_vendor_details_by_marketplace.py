# coding: utf-8

"""
    Catalog Items v2022-04-01

    The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2022-04-01-use-case-guide).

    The version of the OpenAPI document: 2022-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.catalogItems_2022_04_01.models.item_vendor_details_category import ItemVendorDetailsCategory
from typing import Optional, Set
from typing_extensions import Self

class ItemVendorDetailsByMarketplace(BaseModel):
    """
    Vendor details associated with an Amazon catalog item for the indicated Amazon marketplace.
    """ # noqa: E501
    marketplace_id: StrictStr = Field(description="Amazon marketplace identifier.", alias="marketplaceId")
    brand_code: Optional[StrictStr] = Field(default=None, description="Brand code associated with an Amazon catalog item.", alias="brandCode")
    manufacturer_code: Optional[StrictStr] = Field(default=None, description="Manufacturer code associated with an Amazon catalog item.", alias="manufacturerCode")
    manufacturer_code_parent: Optional[StrictStr] = Field(default=None, description="Parent vendor code of the manufacturer code.", alias="manufacturerCodeParent")
    product_category: Optional[ItemVendorDetailsCategory] = Field(default=None, alias="productCategory")
    product_group: Optional[StrictStr] = Field(default=None, description="Product group associated with an Amazon catalog item.", alias="productGroup")
    product_subcategory: Optional[ItemVendorDetailsCategory] = Field(default=None, alias="productSubcategory")
    replenishment_category: Optional[StrictStr] = Field(default=None, description="Replenishment category associated with an Amazon catalog item.", alias="replenishmentCategory")
    __properties: ClassVar[List[str]] = ["marketplaceId", "brandCode", "manufacturerCode", "manufacturerCodeParent", "productCategory", "productGroup", "productSubcategory", "replenishmentCategory"]

    @field_validator('replenishment_category')
    def replenishment_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALLOCATED', 'BASIC_REPLENISHMENT', 'IN_SEASON', 'LIMITED_REPLENISHMENT', 'MANUFACTURER_OUT_OF_STOCK', 'NEW_PRODUCT', 'NON_REPLENISHABLE', 'NON_STOCKUPABLE', 'OBSOLETE', 'PLANNED_REPLENISHMENT']):
            raise ValueError("must be one of enum values ('ALLOCATED', 'BASIC_REPLENISHMENT', 'IN_SEASON', 'LIMITED_REPLENISHMENT', 'MANUFACTURER_OUT_OF_STOCK', 'NEW_PRODUCT', 'NON_REPLENISHABLE', 'NON_STOCKUPABLE', 'OBSOLETE', 'PLANNED_REPLENISHMENT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemVendorDetailsByMarketplace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of product_category
        if self.product_category:
            _dict['productCategory'] = self.product_category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_subcategory
        if self.product_subcategory:
            _dict['productSubcategory'] = self.product_subcategory.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemVendorDetailsByMarketplace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "marketplaceId": obj.get("marketplaceId"),
            "brandCode": obj.get("brandCode"),
            "manufacturerCode": obj.get("manufacturerCode"),
            "manufacturerCodeParent": obj.get("manufacturerCodeParent"),
            "productCategory": ItemVendorDetailsCategory.from_dict(obj["productCategory"]) if obj.get("productCategory") is not None else None,
            "productGroup": obj.get("productGroup"),
            "productSubcategory": ItemVendorDetailsCategory.from_dict(obj["productSubcategory"]) if obj.get("productSubcategory") is not None else None,
            "replenishmentCategory": obj.get("replenishmentCategory")
        })
        return _obj


