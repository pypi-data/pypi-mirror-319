# coding: utf-8

"""
    Selling Partner API for Direct Fulfillment Shipping

    The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor's shipping data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.vendorDirectFulfillmentShippingV1.models.container import Container
from py_sp_api.generated.vendorDirectFulfillmentShippingV1.models.item import Item
from py_sp_api.generated.vendorDirectFulfillmentShippingV1.models.party_identification import PartyIdentification
from py_sp_api.generated.vendorDirectFulfillmentShippingV1.models.shipment_details import ShipmentDetails
from typing import Optional, Set
from typing_extensions import Self

class ShipmentConfirmation(BaseModel):
    """
    Represents the confirmation details of a shipment, including the purchase order number and other shipment details.
    """ # noqa: E501
    purchase_order_number: Annotated[str, Field(strict=True)] = Field(description="Purchase order number corresponding to the shipment.", alias="purchaseOrderNumber")
    shipment_details: ShipmentDetails = Field(alias="shipmentDetails")
    selling_party: PartyIdentification = Field(alias="sellingParty")
    ship_from_party: PartyIdentification = Field(alias="shipFromParty")
    items: List[Item] = Field(description="Provide the details of the items in this shipment. If any of the item details field is common at a package or a pallet level, then provide them at the corresponding package.")
    containers: Optional[List[Container]] = Field(default=None, description="Provide the details of the items in this shipment. If any of the item details field is common at a package or a pallet level, then provide them at the corresponding package.")
    __properties: ClassVar[List[str]] = ["purchaseOrderNumber", "shipmentDetails", "sellingParty", "shipFromParty", "items", "containers"]

    @field_validator('purchase_order_number')
    def purchase_order_number_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShipmentConfirmation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of shipment_details
        if self.shipment_details:
            _dict['shipmentDetails'] = self.shipment_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selling_party
        if self.selling_party:
            _dict['sellingParty'] = self.selling_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_from_party
        if self.ship_from_party:
            _dict['shipFromParty'] = self.ship_from_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in containers (list)
        _items = []
        if self.containers:
            for _item_containers in self.containers:
                if _item_containers:
                    _items.append(_item_containers.to_dict())
            _dict['containers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShipmentConfirmation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "purchaseOrderNumber": obj.get("purchaseOrderNumber"),
            "shipmentDetails": ShipmentDetails.from_dict(obj["shipmentDetails"]) if obj.get("shipmentDetails") is not None else None,
            "sellingParty": PartyIdentification.from_dict(obj["sellingParty"]) if obj.get("sellingParty") is not None else None,
            "shipFromParty": PartyIdentification.from_dict(obj["shipFromParty"]) if obj.get("shipFromParty") is not None else None,
            "items": [Item.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "containers": [Container.from_dict(_item) for _item in obj["containers"]] if obj.get("containers") is not None else None
        })
        return _obj


