# coding: utf-8

"""
    Selling Partner API for A+ Content Management

    With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.

    The version of the OpenAPI document: 2020-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from py_sp_api.generated.aplusContent_2020_11_01.models.image_crop_specification import ImageCropSpecification
from typing import Optional, Set
from typing_extensions import Self

class ImageComponent(BaseModel):
    """
    A reference to an image, hosted in the A+ Content media library.
    """ # noqa: E501
    upload_destination_id: Annotated[str, Field(min_length=1, strict=True)] = Field(description="This identifier is provided by the Selling Partner API for Uploads.", alias="uploadDestinationId")
    image_crop_specification: ImageCropSpecification = Field(alias="imageCropSpecification")
    alt_text: Annotated[str, Field(min_length=1, strict=True, max_length=100)] = Field(description="The alternative text for the image.", alias="altText")
    __properties: ClassVar[List[str]] = ["uploadDestinationId", "imageCropSpecification", "altText"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageComponent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image_crop_specification
        if self.image_crop_specification:
            _dict['imageCropSpecification'] = self.image_crop_specification.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageComponent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uploadDestinationId": obj.get("uploadDestinationId"),
            "imageCropSpecification": ImageCropSpecification.from_dict(obj["imageCropSpecification"]) if obj.get("imageCropSpecification") is not None else None,
            "altText": obj.get("altText")
        })
        return _obj


