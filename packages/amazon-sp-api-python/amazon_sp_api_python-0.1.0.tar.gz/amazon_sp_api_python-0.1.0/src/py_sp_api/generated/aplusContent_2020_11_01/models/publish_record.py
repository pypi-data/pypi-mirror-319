# coding: utf-8

"""
    Selling Partner API for A+ Content Management

    With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.

    The version of the OpenAPI document: 2020-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.aplusContent_2020_11_01.models.content_type import ContentType
from typing import Optional, Set
from typing_extensions import Self

class PublishRecord(BaseModel):
    """
    The full context for an A+ Content publishing event.
    """ # noqa: E501
    marketplace_id: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The identifier for the marketplace where the A+ Content is published.", alias="marketplaceId")
    locale: Annotated[str, Field(min_length=5, strict=True)] = Field(description="The IETF language tag. This only supports the primary language subtag with one secondary language subtag. The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary subtags. **Pattern:** ^[a-z]{2,}-[A-Z0-9]{2,}$")
    asin: Annotated[str, Field(min_length=10, strict=True)] = Field(description="The Amazon Standard Identification Number (ASIN).")
    content_type: ContentType = Field(alias="contentType")
    content_sub_type: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="The A+ Content document subtype. This represents a special-purpose type of an A+ Content document. Not every A+ Content document type will have a subtype, and subtypes may change at any time.", alias="contentSubType")
    content_reference_key: Annotated[str, Field(min_length=1, strict=True)] = Field(description="A unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.", alias="contentReferenceKey")
    __properties: ClassVar[List[str]] = ["marketplaceId", "locale", "asin", "contentType", "contentSubType", "contentReferenceKey"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublishRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublishRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "marketplaceId": obj.get("marketplaceId"),
            "locale": obj.get("locale"),
            "asin": obj.get("asin"),
            "contentType": obj.get("contentType"),
            "contentSubType": obj.get("contentSubType"),
            "contentReferenceKey": obj.get("contentReferenceKey")
        })
        return _obj


