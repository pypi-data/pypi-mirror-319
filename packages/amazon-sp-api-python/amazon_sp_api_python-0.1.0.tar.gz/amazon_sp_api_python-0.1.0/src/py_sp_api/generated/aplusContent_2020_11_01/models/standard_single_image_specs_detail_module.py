# coding: utf-8

"""
    Selling Partner API for A+ Content Management

    With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.

    The version of the OpenAPI document: 2020-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.aplusContent_2020_11_01.models.image_component import ImageComponent
from py_sp_api.generated.aplusContent_2020_11_01.models.standard_header_text_list_block import StandardHeaderTextListBlock
from py_sp_api.generated.aplusContent_2020_11_01.models.standard_text_block import StandardTextBlock
from py_sp_api.generated.aplusContent_2020_11_01.models.text_component import TextComponent
from typing import Optional, Set
from typing_extensions import Self

class StandardSingleImageSpecsDetailModule(BaseModel):
    """
    A standard image with paragraphs and a bulleted list, and extra space for technical details.
    """ # noqa: E501
    headline: Optional[TextComponent] = None
    image: Optional[ImageComponent] = None
    description_headline: Optional[TextComponent] = Field(default=None, alias="descriptionHeadline")
    description_block1: Optional[StandardTextBlock] = Field(default=None, alias="descriptionBlock1")
    description_block2: Optional[StandardTextBlock] = Field(default=None, alias="descriptionBlock2")
    specification_headline: Optional[TextComponent] = Field(default=None, alias="specificationHeadline")
    specification_list_block: Optional[StandardHeaderTextListBlock] = Field(default=None, alias="specificationListBlock")
    specification_text_block: Optional[StandardTextBlock] = Field(default=None, alias="specificationTextBlock")
    __properties: ClassVar[List[str]] = ["headline", "image", "descriptionHeadline", "descriptionBlock1", "descriptionBlock2", "specificationHeadline", "specificationListBlock", "specificationTextBlock"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StandardSingleImageSpecsDetailModule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of headline
        if self.headline:
            _dict['headline'] = self.headline.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description_headline
        if self.description_headline:
            _dict['descriptionHeadline'] = self.description_headline.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description_block1
        if self.description_block1:
            _dict['descriptionBlock1'] = self.description_block1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description_block2
        if self.description_block2:
            _dict['descriptionBlock2'] = self.description_block2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of specification_headline
        if self.specification_headline:
            _dict['specificationHeadline'] = self.specification_headline.to_dict()
        # override the default output from pydantic by calling `to_dict()` of specification_list_block
        if self.specification_list_block:
            _dict['specificationListBlock'] = self.specification_list_block.to_dict()
        # override the default output from pydantic by calling `to_dict()` of specification_text_block
        if self.specification_text_block:
            _dict['specificationTextBlock'] = self.specification_text_block.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StandardSingleImageSpecsDetailModule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "headline": TextComponent.from_dict(obj["headline"]) if obj.get("headline") is not None else None,
            "image": ImageComponent.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "descriptionHeadline": TextComponent.from_dict(obj["descriptionHeadline"]) if obj.get("descriptionHeadline") is not None else None,
            "descriptionBlock1": StandardTextBlock.from_dict(obj["descriptionBlock1"]) if obj.get("descriptionBlock1") is not None else None,
            "descriptionBlock2": StandardTextBlock.from_dict(obj["descriptionBlock2"]) if obj.get("descriptionBlock2") is not None else None,
            "specificationHeadline": TextComponent.from_dict(obj["specificationHeadline"]) if obj.get("specificationHeadline") is not None else None,
            "specificationListBlock": StandardHeaderTextListBlock.from_dict(obj["specificationListBlock"]) if obj.get("specificationListBlock") is not None else None,
            "specificationTextBlock": StandardTextBlock.from_dict(obj["specificationTextBlock"]) if obj.get("specificationTextBlock") is not None else None
        })
        return _obj


