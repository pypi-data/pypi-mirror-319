# coding: utf-8

"""
    Selling Partner API for Finances

    The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.financesV0.models.charge_component import ChargeComponent
from py_sp_api.generated.financesV0.models.currency import Currency
from py_sp_api.generated.financesV0.models.fee_component import FeeComponent
from py_sp_api.generated.financesV0.models.promotion import Promotion
from py_sp_api.generated.financesV0.models.tax_withheld_component import TaxWithheldComponent
from typing import Optional, Set
from typing_extensions import Self

class ShipmentItem(BaseModel):
    """
    An item of a shipment, refund, guarantee claim, or chargeback.
    """ # noqa: E501
    seller_sku: Optional[StrictStr] = Field(default=None, description="The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API.", alias="SellerSKU")
    order_item_id: Optional[StrictStr] = Field(default=None, description="An Amazon-defined order item identifier.", alias="OrderItemId")
    order_adjustment_item_id: Optional[StrictStr] = Field(default=None, description="An Amazon-defined order adjustment identifier defined for refunds, guarantee claims, and chargeback events.", alias="OrderAdjustmentItemId")
    quantity_shipped: Optional[StrictInt] = Field(default=None, description="The number of items shipped.", alias="QuantityShipped")
    item_charge_list: Optional[List[ChargeComponent]] = Field(default=None, description="A list of charge information on the seller's account.", alias="ItemChargeList")
    item_charge_adjustment_list: Optional[List[ChargeComponent]] = Field(default=None, description="A list of charge information on the seller's account.", alias="ItemChargeAdjustmentList")
    item_fee_list: Optional[List[FeeComponent]] = Field(default=None, description="A list of fee component information.", alias="ItemFeeList")
    item_fee_adjustment_list: Optional[List[FeeComponent]] = Field(default=None, description="A list of fee component information.", alias="ItemFeeAdjustmentList")
    item_tax_withheld_list: Optional[List[TaxWithheldComponent]] = Field(default=None, description="A list of information about taxes withheld.", alias="ItemTaxWithheldList")
    promotion_list: Optional[List[Promotion]] = Field(default=None, description="A list of promotions.", alias="PromotionList")
    promotion_adjustment_list: Optional[List[Promotion]] = Field(default=None, description="A list of promotions.", alias="PromotionAdjustmentList")
    cost_of_points_granted: Optional[Currency] = Field(default=None, alias="CostOfPointsGranted")
    cost_of_points_returned: Optional[Currency] = Field(default=None, alias="CostOfPointsReturned")
    __properties: ClassVar[List[str]] = ["SellerSKU", "OrderItemId", "OrderAdjustmentItemId", "QuantityShipped", "ItemChargeList", "ItemChargeAdjustmentList", "ItemFeeList", "ItemFeeAdjustmentList", "ItemTaxWithheldList", "PromotionList", "PromotionAdjustmentList", "CostOfPointsGranted", "CostOfPointsReturned"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShipmentItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in item_charge_list (list)
        _items = []
        if self.item_charge_list:
            for _item_item_charge_list in self.item_charge_list:
                if _item_item_charge_list:
                    _items.append(_item_item_charge_list.to_dict())
            _dict['ItemChargeList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in item_charge_adjustment_list (list)
        _items = []
        if self.item_charge_adjustment_list:
            for _item_item_charge_adjustment_list in self.item_charge_adjustment_list:
                if _item_item_charge_adjustment_list:
                    _items.append(_item_item_charge_adjustment_list.to_dict())
            _dict['ItemChargeAdjustmentList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in item_fee_list (list)
        _items = []
        if self.item_fee_list:
            for _item_item_fee_list in self.item_fee_list:
                if _item_item_fee_list:
                    _items.append(_item_item_fee_list.to_dict())
            _dict['ItemFeeList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in item_fee_adjustment_list (list)
        _items = []
        if self.item_fee_adjustment_list:
            for _item_item_fee_adjustment_list in self.item_fee_adjustment_list:
                if _item_item_fee_adjustment_list:
                    _items.append(_item_item_fee_adjustment_list.to_dict())
            _dict['ItemFeeAdjustmentList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in item_tax_withheld_list (list)
        _items = []
        if self.item_tax_withheld_list:
            for _item_item_tax_withheld_list in self.item_tax_withheld_list:
                if _item_item_tax_withheld_list:
                    _items.append(_item_item_tax_withheld_list.to_dict())
            _dict['ItemTaxWithheldList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in promotion_list (list)
        _items = []
        if self.promotion_list:
            for _item_promotion_list in self.promotion_list:
                if _item_promotion_list:
                    _items.append(_item_promotion_list.to_dict())
            _dict['PromotionList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in promotion_adjustment_list (list)
        _items = []
        if self.promotion_adjustment_list:
            for _item_promotion_adjustment_list in self.promotion_adjustment_list:
                if _item_promotion_adjustment_list:
                    _items.append(_item_promotion_adjustment_list.to_dict())
            _dict['PromotionAdjustmentList'] = _items
        # override the default output from pydantic by calling `to_dict()` of cost_of_points_granted
        if self.cost_of_points_granted:
            _dict['CostOfPointsGranted'] = self.cost_of_points_granted.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cost_of_points_returned
        if self.cost_of_points_returned:
            _dict['CostOfPointsReturned'] = self.cost_of_points_returned.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShipmentItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "SellerSKU": obj.get("SellerSKU"),
            "OrderItemId": obj.get("OrderItemId"),
            "OrderAdjustmentItemId": obj.get("OrderAdjustmentItemId"),
            "QuantityShipped": obj.get("QuantityShipped"),
            "ItemChargeList": [ChargeComponent.from_dict(_item) for _item in obj["ItemChargeList"]] if obj.get("ItemChargeList") is not None else None,
            "ItemChargeAdjustmentList": [ChargeComponent.from_dict(_item) for _item in obj["ItemChargeAdjustmentList"]] if obj.get("ItemChargeAdjustmentList") is not None else None,
            "ItemFeeList": [FeeComponent.from_dict(_item) for _item in obj["ItemFeeList"]] if obj.get("ItemFeeList") is not None else None,
            "ItemFeeAdjustmentList": [FeeComponent.from_dict(_item) for _item in obj["ItemFeeAdjustmentList"]] if obj.get("ItemFeeAdjustmentList") is not None else None,
            "ItemTaxWithheldList": [TaxWithheldComponent.from_dict(_item) for _item in obj["ItemTaxWithheldList"]] if obj.get("ItemTaxWithheldList") is not None else None,
            "PromotionList": [Promotion.from_dict(_item) for _item in obj["PromotionList"]] if obj.get("PromotionList") is not None else None,
            "PromotionAdjustmentList": [Promotion.from_dict(_item) for _item in obj["PromotionAdjustmentList"]] if obj.get("PromotionAdjustmentList") is not None else None,
            "CostOfPointsGranted": Currency.from_dict(obj["CostOfPointsGranted"]) if obj.get("CostOfPointsGranted") is not None else None,
            "CostOfPointsReturned": Currency.from_dict(obj["CostOfPointsReturned"]) if obj.get("CostOfPointsReturned") is not None else None
        })
        return _obj


