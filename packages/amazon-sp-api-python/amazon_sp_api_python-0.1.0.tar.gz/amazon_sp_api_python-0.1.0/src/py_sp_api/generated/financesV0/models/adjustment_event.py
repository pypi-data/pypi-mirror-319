# coding: utf-8

"""
    Selling Partner API for Finances

    The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.financesV0.models.adjustment_item import AdjustmentItem
from py_sp_api.generated.financesV0.models.currency import Currency
from typing import Optional, Set
from typing_extensions import Self

class AdjustmentEvent(BaseModel):
    """
    An adjustment to the seller's account.
    """ # noqa: E501
    adjustment_type: Optional[StrictStr] = Field(default=None, description="The type of adjustment.  Possible values:  * FBAInventoryReimbursement - An FBA inventory reimbursement to a seller's account. This occurs if a seller's inventory is damaged.  * ReserveEvent - A reserve event that is generated at the time of a settlement period closing. This occurs when some money from a seller's account is held back.  * PostageBilling - The amount paid by a seller for shipping labels.  * PostageRefund - The reimbursement of shipping labels purchased for orders that were canceled or refunded.  * LostOrDamagedReimbursement - An Amazon Easy Ship reimbursement to a seller's account for a package that we lost or damaged.  * CanceledButPickedUpReimbursement - An Amazon Easy Ship reimbursement to a seller's account. This occurs when a package is picked up and the order is subsequently canceled. This value is used only in the India marketplace.  * ReimbursementClawback - An Amazon Easy Ship reimbursement clawback from a seller's account. This occurs when a prior reimbursement is reversed. This value is used only in the India marketplace.  * SellerRewards - An award credited to a seller's account for their participation in an offer in the Seller Rewards program. Applies only to the India marketplace.", alias="AdjustmentType")
    posted_date: Optional[datetime] = Field(default=None, description="Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).", alias="PostedDate")
    adjustment_amount: Optional[Currency] = Field(default=None, alias="AdjustmentAmount")
    adjustment_item_list: Optional[List[AdjustmentItem]] = Field(default=None, description="A list of information about items in an adjustment to the seller's account.", alias="AdjustmentItemList")
    __properties: ClassVar[List[str]] = ["AdjustmentType", "PostedDate", "AdjustmentAmount", "AdjustmentItemList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdjustmentEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of adjustment_amount
        if self.adjustment_amount:
            _dict['AdjustmentAmount'] = self.adjustment_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in adjustment_item_list (list)
        _items = []
        if self.adjustment_item_list:
            for _item_adjustment_item_list in self.adjustment_item_list:
                if _item_adjustment_item_list:
                    _items.append(_item_adjustment_item_list.to_dict())
            _dict['AdjustmentItemList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdjustmentEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AdjustmentType": obj.get("AdjustmentType"),
            "PostedDate": obj.get("PostedDate"),
            "AdjustmentAmount": Currency.from_dict(obj["AdjustmentAmount"]) if obj.get("AdjustmentAmount") is not None else None,
            "AdjustmentItemList": [AdjustmentItem.from_dict(_item) for _item in obj["AdjustmentItemList"]] if obj.get("AdjustmentItemList") is not None else None
        })
        return _obj


