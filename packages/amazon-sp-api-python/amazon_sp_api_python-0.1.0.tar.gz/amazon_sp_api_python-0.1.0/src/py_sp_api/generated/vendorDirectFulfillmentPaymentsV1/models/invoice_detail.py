# coding: utf-8

"""
    Selling Partner API for Direct Fulfillment Payments

    The Selling Partner API for Direct Fulfillment Payments provides programmatic access to a direct fulfillment vendor's invoice data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.vendorDirectFulfillmentPaymentsV1.models.additional_details import AdditionalDetails
from py_sp_api.generated.vendorDirectFulfillmentPaymentsV1.models.charge_details import ChargeDetails
from py_sp_api.generated.vendorDirectFulfillmentPaymentsV1.models.invoice_item import InvoiceItem
from py_sp_api.generated.vendorDirectFulfillmentPaymentsV1.models.money import Money
from py_sp_api.generated.vendorDirectFulfillmentPaymentsV1.models.party_identification import PartyIdentification
from py_sp_api.generated.vendorDirectFulfillmentPaymentsV1.models.tax_detail import TaxDetail
from typing import Optional, Set
from typing_extensions import Self

class InvoiceDetail(BaseModel):
    """
    Represents the details of an invoice, including invoice number, date, parties involved, payment terms, totals, taxes, charges, and line items.
    """ # noqa: E501
    invoice_number: StrictStr = Field(description="The unique invoice number.", alias="invoiceNumber")
    invoice_date: datetime = Field(description="Invoice date.", alias="invoiceDate")
    reference_number: Optional[StrictStr] = Field(default=None, description="An additional unique reference number used for regulatory or other purposes.", alias="referenceNumber")
    remit_to_party: PartyIdentification = Field(alias="remitToParty")
    ship_from_party: PartyIdentification = Field(alias="shipFromParty")
    bill_to_party: Optional[PartyIdentification] = Field(default=None, alias="billToParty")
    ship_to_country_code: Optional[StrictStr] = Field(default=None, description="Ship-to country code.", alias="shipToCountryCode")
    payment_terms_code: Optional[StrictStr] = Field(default=None, description="The payment terms for the invoice.", alias="paymentTermsCode")
    invoice_total: Money = Field(alias="invoiceTotal")
    tax_totals: Optional[List[TaxDetail]] = Field(default=None, description="Individual tax details per line item.", alias="taxTotals")
    additional_details: Optional[List[AdditionalDetails]] = Field(default=None, description="Additional details provided by the selling party, for tax-related or other purposes.", alias="additionalDetails")
    charge_details: Optional[List[ChargeDetails]] = Field(default=None, description="Total charge amount details for all line items.", alias="chargeDetails")
    items: List[InvoiceItem] = Field(description="Provides the details of the items in this invoice.")
    __properties: ClassVar[List[str]] = ["invoiceNumber", "invoiceDate", "referenceNumber", "remitToParty", "shipFromParty", "billToParty", "shipToCountryCode", "paymentTermsCode", "invoiceTotal", "taxTotals", "additionalDetails", "chargeDetails", "items"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of remit_to_party
        if self.remit_to_party:
            _dict['remitToParty'] = self.remit_to_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_from_party
        if self.ship_from_party:
            _dict['shipFromParty'] = self.ship_from_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bill_to_party
        if self.bill_to_party:
            _dict['billToParty'] = self.bill_to_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice_total
        if self.invoice_total:
            _dict['invoiceTotal'] = self.invoice_total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tax_totals (list)
        _items = []
        if self.tax_totals:
            for _item_tax_totals in self.tax_totals:
                if _item_tax_totals:
                    _items.append(_item_tax_totals.to_dict())
            _dict['taxTotals'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in additional_details (list)
        _items = []
        if self.additional_details:
            for _item_additional_details in self.additional_details:
                if _item_additional_details:
                    _items.append(_item_additional_details.to_dict())
            _dict['additionalDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in charge_details (list)
        _items = []
        if self.charge_details:
            for _item_charge_details in self.charge_details:
                if _item_charge_details:
                    _items.append(_item_charge_details.to_dict())
            _dict['chargeDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "invoiceNumber": obj.get("invoiceNumber"),
            "invoiceDate": obj.get("invoiceDate"),
            "referenceNumber": obj.get("referenceNumber"),
            "remitToParty": PartyIdentification.from_dict(obj["remitToParty"]) if obj.get("remitToParty") is not None else None,
            "shipFromParty": PartyIdentification.from_dict(obj["shipFromParty"]) if obj.get("shipFromParty") is not None else None,
            "billToParty": PartyIdentification.from_dict(obj["billToParty"]) if obj.get("billToParty") is not None else None,
            "shipToCountryCode": obj.get("shipToCountryCode"),
            "paymentTermsCode": obj.get("paymentTermsCode"),
            "invoiceTotal": Money.from_dict(obj["invoiceTotal"]) if obj.get("invoiceTotal") is not None else None,
            "taxTotals": [TaxDetail.from_dict(_item) for _item in obj["taxTotals"]] if obj.get("taxTotals") is not None else None,
            "additionalDetails": [AdditionalDetails.from_dict(_item) for _item in obj["additionalDetails"]] if obj.get("additionalDetails") is not None else None,
            "chargeDetails": [ChargeDetails.from_dict(_item) for _item in obj["chargeDetails"]] if obj.get("chargeDetails") is not None else None,
            "items": [InvoiceItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None
        })
        return _obj


