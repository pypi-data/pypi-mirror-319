# coding: utf-8

"""
    Selling Partner API for Feeds

    Effective **June 27, 2024**, the Selling Partner API for Feeds v2020-09-04 will no longer be available and all calls to it will fail. Integrations that rely on the Feeds API must migrate to [Feeds v2021-06-30](https://developer-docs.amazon.com/sp-api/docs/feeds-api-v2021-06-30-reference) to avoid service disruption.

    The version of the OpenAPI document: 2020-09-04
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Feed(BaseModel):
    """
    Feed
    """ # noqa: E501
    feed_id: StrictStr = Field(description="The identifier for the feed. This identifier is unique only in combination with a seller ID.", alias="feedId")
    feed_type: StrictStr = Field(description="The feed type.", alias="feedType")
    marketplace_ids: Optional[List[StrictStr]] = Field(default=None, description="A list of identifiers for the marketplaces that the feed is applied to.", alias="marketplaceIds")
    created_time: datetime = Field(description="The date and time when the feed was created, in ISO 8601 date time format.", alias="createdTime")
    processing_status: StrictStr = Field(description="The processing status of the feed.", alias="processingStatus")
    processing_start_time: Optional[datetime] = Field(default=None, description="The date and time when feed processing started, in ISO 8601 date time format.", alias="processingStartTime")
    processing_end_time: Optional[datetime] = Field(default=None, description="The date and time when feed processing completed, in ISO 8601 date time format.", alias="processingEndTime")
    result_feed_document_id: Optional[StrictStr] = Field(default=None, description="The identifier for the feed document. This identifier is unique only in combination with a seller ID.", alias="resultFeedDocumentId")
    __properties: ClassVar[List[str]] = ["feedId", "feedType", "marketplaceIds", "createdTime", "processingStatus", "processingStartTime", "processingEndTime", "resultFeedDocumentId"]

    @field_validator('processing_status')
    def processing_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CANCELLED', 'DONE', 'FATAL', 'IN_PROGRESS', 'IN_QUEUE']):
            raise ValueError("must be one of enum values ('CANCELLED', 'DONE', 'FATAL', 'IN_PROGRESS', 'IN_QUEUE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Feed from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Feed from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "feedId": obj.get("feedId"),
            "feedType": obj.get("feedType"),
            "marketplaceIds": obj.get("marketplaceIds"),
            "createdTime": obj.get("createdTime"),
            "processingStatus": obj.get("processingStatus"),
            "processingStartTime": obj.get("processingStartTime"),
            "processingEndTime": obj.get("processingEndTime"),
            "resultFeedDocumentId": obj.get("resultFeedDocumentId")
        })
        return _obj


