# coding: utf-8

"""
    Selling Partner API for Sales

    The Selling Partner API for Sales provides APIs related to sales performance.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from py_sp_api.generated.sales.models.money import Money
from typing import Optional, Set
from typing_extensions import Self

class OrderMetricsInterval(BaseModel):
    """
    Contains order metrics.
    """ # noqa: E501
    interval: StrictStr = Field(description="The interval of time based on requested granularity (ex. Hour, Day, etc.) If this is the first or the last interval from the list, it might contain incomplete data if the requested interval doesn't align with the requested granularity (ex. request interval 2018-09-01T02:00:00Z--2018-09-04T19:00:00Z and granularity day will result in Sept 1st UTC day and Sept 4th UTC days having partial data).")
    unit_count: StrictInt = Field(description="The number of units in orders based on the specified filters.", alias="unitCount")
    order_item_count: StrictInt = Field(description="The number of order items based on the specified filters.", alias="orderItemCount")
    order_count: StrictInt = Field(description="The number of orders based on the specified filters.", alias="orderCount")
    average_unit_price: Money = Field(alias="averageUnitPrice")
    total_sales: Money = Field(alias="totalSales")
    __properties: ClassVar[List[str]] = ["interval", "unitCount", "orderItemCount", "orderCount", "averageUnitPrice", "totalSales"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderMetricsInterval from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of average_unit_price
        if self.average_unit_price:
            _dict['averageUnitPrice'] = self.average_unit_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_sales
        if self.total_sales:
            _dict['totalSales'] = self.total_sales.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderMetricsInterval from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "interval": obj.get("interval"),
            "unitCount": obj.get("unitCount"),
            "orderItemCount": obj.get("orderItemCount"),
            "orderCount": obj.get("orderCount"),
            "averageUnitPrice": Money.from_dict(obj["averageUnitPrice"]) if obj.get("averageUnitPrice") is not None else None,
            "totalSales": Money.from_dict(obj["totalSales"]) if obj.get("totalSales") is not None else None
        })
        return _obj


