# coding: utf-8

"""
    Selling Partner API for Merchant Fulfillment

    With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.merchantFulfillmentV0.models.file_contents import FileContents
from py_sp_api.generated.merchantFulfillmentV0.models.label_dimensions import LabelDimensions
from py_sp_api.generated.merchantFulfillmentV0.models.label_format import LabelFormat
from py_sp_api.generated.merchantFulfillmentV0.models.standard_id_for_label import StandardIdForLabel
from typing import Optional, Set
from typing_extensions import Self

class Label(BaseModel):
    """
    Data for creating a shipping label and dimensions for printing the label.
    """ # noqa: E501
    custom_text_for_label: Optional[Annotated[str, Field(strict=True, max_length=14)]] = Field(default=None, description="Custom text to print on the label. Note: Custom text is only included on labels that are in ZPL format (ZPL203). FedEx does not support `CustomTextForLabel`.", alias="CustomTextForLabel")
    dimensions: LabelDimensions = Field(alias="Dimensions")
    file_contents: FileContents = Field(alias="FileContents")
    label_format: Optional[LabelFormat] = Field(default=None, alias="LabelFormat")
    standard_id_for_label: Optional[StandardIdForLabel] = Field(default=None, alias="StandardIdForLabel")
    __properties: ClassVar[List[str]] = ["CustomTextForLabel", "Dimensions", "FileContents", "LabelFormat", "StandardIdForLabel"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Label from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dimensions
        if self.dimensions:
            _dict['Dimensions'] = self.dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file_contents
        if self.file_contents:
            _dict['FileContents'] = self.file_contents.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Label from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CustomTextForLabel": obj.get("CustomTextForLabel"),
            "Dimensions": LabelDimensions.from_dict(obj["Dimensions"]) if obj.get("Dimensions") is not None else None,
            "FileContents": FileContents.from_dict(obj["FileContents"]) if obj.get("FileContents") is not None else None,
            "LabelFormat": obj.get("LabelFormat"),
            "StandardIdForLabel": obj.get("StandardIdForLabel")
        })
        return _obj


