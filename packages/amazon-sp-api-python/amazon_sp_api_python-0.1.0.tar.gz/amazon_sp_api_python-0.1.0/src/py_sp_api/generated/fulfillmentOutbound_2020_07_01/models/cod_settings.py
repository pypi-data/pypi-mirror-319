# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.money import Money
from typing import Optional, Set
from typing_extensions import Self

class CODSettings(BaseModel):
    """
    The COD (Cash On Delivery) charges that you associate with a COD fulfillment order.
    """ # noqa: E501
    is_cod_required: StrictBool = Field(description="When true, this fulfillment order requires a COD (Cash On Delivery) payment.", alias="isCodRequired")
    cod_charge: Optional[Money] = Field(default=None, alias="codCharge")
    cod_charge_tax: Optional[Money] = Field(default=None, alias="codChargeTax")
    shipping_charge: Optional[Money] = Field(default=None, alias="shippingCharge")
    shipping_charge_tax: Optional[Money] = Field(default=None, alias="shippingChargeTax")
    __properties: ClassVar[List[str]] = ["isCodRequired", "codCharge", "codChargeTax", "shippingCharge", "shippingChargeTax"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CODSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cod_charge
        if self.cod_charge:
            _dict['codCharge'] = self.cod_charge.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cod_charge_tax
        if self.cod_charge_tax:
            _dict['codChargeTax'] = self.cod_charge_tax.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_charge
        if self.shipping_charge:
            _dict['shippingCharge'] = self.shipping_charge.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_charge_tax
        if self.shipping_charge_tax:
            _dict['shippingChargeTax'] = self.shipping_charge_tax.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CODSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isCodRequired": obj.get("isCodRequired"),
            "codCharge": Money.from_dict(obj["codCharge"]) if obj.get("codCharge") is not None else None,
            "codChargeTax": Money.from_dict(obj["codChargeTax"]) if obj.get("codChargeTax") is not None else None,
            "shippingCharge": Money.from_dict(obj["shippingCharge"]) if obj.get("shippingCharge") is not None else None,
            "shippingChargeTax": Money.from_dict(obj["shippingChargeTax"]) if obj.get("shippingChargeTax") is not None else None
        })
        return _obj


