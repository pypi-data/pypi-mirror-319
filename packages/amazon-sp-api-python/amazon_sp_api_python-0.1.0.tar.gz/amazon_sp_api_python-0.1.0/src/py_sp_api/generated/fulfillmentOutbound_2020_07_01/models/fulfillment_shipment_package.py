# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.delivery_information import DeliveryInformation
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.locker_details import LockerDetails
from typing import Optional, Set
from typing_extensions import Self

class FulfillmentShipmentPackage(BaseModel):
    """
    Package information for a shipment in a fulfillment order.
    """ # noqa: E501
    package_number: StrictInt = Field(description="Identifies a package in a shipment.", alias="packageNumber")
    carrier_code: StrictStr = Field(description="Identifies the carrier who will deliver the shipment to the recipient.", alias="carrierCode")
    tracking_number: Optional[StrictStr] = Field(default=None, description="The tracking number, if provided, can be used to obtain tracking and delivery information.", alias="trackingNumber")
    estimated_arrival_date: Optional[datetime] = Field(default=None, description="Date timestamp", alias="estimatedArrivalDate")
    locker_details: Optional[LockerDetails] = Field(default=None, alias="lockerDetails")
    delivery_information: Optional[DeliveryInformation] = Field(default=None, alias="deliveryInformation")
    __properties: ClassVar[List[str]] = ["packageNumber", "carrierCode", "trackingNumber", "estimatedArrivalDate", "lockerDetails", "deliveryInformation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FulfillmentShipmentPackage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of locker_details
        if self.locker_details:
            _dict['lockerDetails'] = self.locker_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_information
        if self.delivery_information:
            _dict['deliveryInformation'] = self.delivery_information.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FulfillmentShipmentPackage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "packageNumber": obj.get("packageNumber"),
            "carrierCode": obj.get("carrierCode"),
            "trackingNumber": obj.get("trackingNumber"),
            "estimatedArrivalDate": obj.get("estimatedArrivalDate"),
            "lockerDetails": LockerDetails.from_dict(obj["lockerDetails"]) if obj.get("lockerDetails") is not None else None,
            "deliveryInformation": DeliveryInformation.from_dict(obj["deliveryInformation"]) if obj.get("deliveryInformation") is not None else None
        })
        return _obj


