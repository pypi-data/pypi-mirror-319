# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.invalid_item_reason import InvalidItemReason
from typing import Optional, Set
from typing_extensions import Self

class InvalidReturnItem(BaseModel):
    """
    An item that is invalid for return.
    """ # noqa: E501
    seller_return_item_id: StrictStr = Field(description="An identifier assigned by the seller to the return item.", alias="sellerReturnItemId")
    seller_fulfillment_order_item_id: StrictStr = Field(description="The identifier assigned to the item by the seller when the fulfillment order was created.", alias="sellerFulfillmentOrderItemId")
    invalid_item_reason: InvalidItemReason = Field(alias="invalidItemReason")
    __properties: ClassVar[List[str]] = ["sellerReturnItemId", "sellerFulfillmentOrderItemId", "invalidItemReason"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvalidReturnItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of invalid_item_reason
        if self.invalid_item_reason:
            _dict['invalidItemReason'] = self.invalid_item_reason.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvalidReturnItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sellerReturnItemId": obj.get("sellerReturnItemId"),
            "sellerFulfillmentOrderItemId": obj.get("sellerFulfillmentOrderItemId"),
            "invalidItemReason": InvalidItemReason.from_dict(obj["invalidItemReason"]) if obj.get("invalidItemReason") is not None else None
        })
        return _obj


