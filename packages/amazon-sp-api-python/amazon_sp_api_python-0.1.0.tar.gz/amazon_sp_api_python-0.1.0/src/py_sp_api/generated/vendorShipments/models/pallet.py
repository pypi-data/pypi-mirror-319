# coding: utf-8

"""
    Selling Partner API for Retail Procurement Shipments

    The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.vendorShipments.models.carton_reference_details import CartonReferenceDetails
from py_sp_api.generated.vendorShipments.models.container_identification import ContainerIdentification
from py_sp_api.generated.vendorShipments.models.container_item import ContainerItem
from py_sp_api.generated.vendorShipments.models.dimensions import Dimensions
from py_sp_api.generated.vendorShipments.models.weight import Weight
from typing import Optional, Set
from typing_extensions import Self

class Pallet(BaseModel):
    """
    Details of the Pallet/Tare being shipped.
    """ # noqa: E501
    pallet_identifiers: List[ContainerIdentification] = Field(description="A list of pallet identifiers.", alias="palletIdentifiers")
    tier: Optional[StrictInt] = Field(default=None, description="Number of layers per pallet. Only applicable to container type Pallet.")
    block: Optional[StrictInt] = Field(default=None, description="Number of cartons per layer on the pallet. Only applicable to container type Pallet.")
    dimensions: Optional[Dimensions] = None
    weight: Optional[Weight] = None
    carton_reference_details: Optional[CartonReferenceDetails] = Field(default=None, alias="cartonReferenceDetails")
    items: Optional[List[ContainerItem]] = Field(default=None, description="A list of container item details.")
    __properties: ClassVar[List[str]] = ["palletIdentifiers", "tier", "block", "dimensions", "weight", "cartonReferenceDetails", "items"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Pallet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in pallet_identifiers (list)
        _items = []
        if self.pallet_identifiers:
            for _item_pallet_identifiers in self.pallet_identifiers:
                if _item_pallet_identifiers:
                    _items.append(_item_pallet_identifiers.to_dict())
            _dict['palletIdentifiers'] = _items
        # override the default output from pydantic by calling `to_dict()` of dimensions
        if self.dimensions:
            _dict['dimensions'] = self.dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weight
        if self.weight:
            _dict['weight'] = self.weight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of carton_reference_details
        if self.carton_reference_details:
            _dict['cartonReferenceDetails'] = self.carton_reference_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Pallet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "palletIdentifiers": [ContainerIdentification.from_dict(_item) for _item in obj["palletIdentifiers"]] if obj.get("palletIdentifiers") is not None else None,
            "tier": obj.get("tier"),
            "block": obj.get("block"),
            "dimensions": Dimensions.from_dict(obj["dimensions"]) if obj.get("dimensions") is not None else None,
            "weight": Weight.from_dict(obj["weight"]) if obj.get("weight") is not None else None,
            "cartonReferenceDetails": CartonReferenceDetails.from_dict(obj["cartonReferenceDetails"]) if obj.get("cartonReferenceDetails") is not None else None,
            "items": [ContainerItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None
        })
        return _obj


