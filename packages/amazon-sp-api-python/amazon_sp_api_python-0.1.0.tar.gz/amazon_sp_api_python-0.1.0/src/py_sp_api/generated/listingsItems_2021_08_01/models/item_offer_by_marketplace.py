# coding: utf-8

"""
    Selling Partner API for Listings Items

    The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).

    The version of the OpenAPI document: 2021-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.listingsItems_2021_08_01.models.audience import Audience
from py_sp_api.generated.listingsItems_2021_08_01.models.money import Money
from py_sp_api.generated.listingsItems_2021_08_01.models.points import Points
from typing import Optional, Set
from typing_extensions import Self

class ItemOfferByMarketplace(BaseModel):
    """
    Offer details of a listings item for an Amazon marketplace.
    """ # noqa: E501
    marketplace_id: StrictStr = Field(description="The Amazon marketplace identifier.", alias="marketplaceId")
    offer_type: StrictStr = Field(description="Type of offer for the listings item.", alias="offerType")
    price: Money
    points: Optional[Points] = None
    audience: Optional[Audience] = None
    __properties: ClassVar[List[str]] = ["marketplaceId", "offerType", "price", "points", "audience"]

    @field_validator('offer_type')
    def offer_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['B2C', 'B2B']):
            raise ValueError("must be one of enum values ('B2C', 'B2B')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemOfferByMarketplace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of points
        if self.points:
            _dict['points'] = self.points.to_dict()
        # override the default output from pydantic by calling `to_dict()` of audience
        if self.audience:
            _dict['audience'] = self.audience.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemOfferByMarketplace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "marketplaceId": obj.get("marketplaceId"),
            "offerType": obj.get("offerType"),
            "price": Money.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "points": Points.from_dict(obj["points"]) if obj.get("points") is not None else None,
            "audience": Audience.from_dict(obj["audience"]) if obj.get("audience") is not None else None
        })
        return _obj


