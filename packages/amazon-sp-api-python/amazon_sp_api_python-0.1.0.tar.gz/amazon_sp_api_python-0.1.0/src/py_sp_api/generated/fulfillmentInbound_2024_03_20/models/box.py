# coding: utf-8

"""
    Fulfillment Inbound v2024-03-20

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.box_content_information_source import BoxContentInformationSource
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.dimensions import Dimensions
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.item import Item
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.region import Region
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.weight import Weight
from typing import Optional, Set
from typing_extensions import Self

class Box(BaseModel):
    """
    Contains information about a box that is used in the inbound plan. The box is a container that holds multiple items.
    """ # noqa: E501
    box_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=1024)]] = Field(default=None, description="The ID provided by Amazon that identifies a given box. This ID is comprised of the external shipment ID (which is generated after transportation has been confirmed) and the index of the box.", alias="boxId")
    content_information_source: Optional[BoxContentInformationSource] = Field(default=None, alias="contentInformationSource")
    destination_region: Optional[Region] = Field(default=None, alias="destinationRegion")
    dimensions: Optional[Dimensions] = None
    items: Optional[List[Item]] = Field(default=None, description="Items contained within the box.")
    package_id: Annotated[str, Field(min_length=38, strict=True, max_length=38)] = Field(description="Primary key to uniquely identify a Package (Box or Pallet).", alias="packageId")
    quantity: Optional[Annotated[int, Field(le=10000, strict=True, ge=1)]] = Field(default=None, description="The number of containers where all other properties like weight or dimensions are identical.")
    template_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=1024)]] = Field(default=None, description="Template name of the box.", alias="templateName")
    weight: Optional[Weight] = None
    __properties: ClassVar[List[str]] = ["boxId", "contentInformationSource", "destinationRegion", "dimensions", "items", "packageId", "quantity", "templateName", "weight"]

    @field_validator('package_id')
    def package_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9-]*$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9-]*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Box from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of destination_region
        if self.destination_region:
            _dict['destinationRegion'] = self.destination_region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dimensions
        if self.dimensions:
            _dict['dimensions'] = self.dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of weight
        if self.weight:
            _dict['weight'] = self.weight.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Box from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boxId": obj.get("boxId"),
            "contentInformationSource": obj.get("contentInformationSource"),
            "destinationRegion": Region.from_dict(obj["destinationRegion"]) if obj.get("destinationRegion") is not None else None,
            "dimensions": Dimensions.from_dict(obj["dimensions"]) if obj.get("dimensions") is not None else None,
            "items": [Item.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "packageId": obj.get("packageId"),
            "quantity": obj.get("quantity"),
            "templateName": obj.get("templateName"),
            "weight": Weight.from_dict(obj["weight"]) if obj.get("weight") is not None else None
        })
        return _obj


