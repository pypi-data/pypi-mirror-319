# coding: utf-8

"""
    Fulfillment Inbound v2024-03-20

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.carrier import Carrier
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.carrier_appointment import CarrierAppointment
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.quote import Quote
from typing import Optional, Set
from typing_extensions import Self

class TransportationOption(BaseModel):
    """
    Contains information pertaining to a transportation option and the related carrier.
    """ # noqa: E501
    carrier: Carrier
    carrier_appointment: Optional[CarrierAppointment] = Field(default=None, alias="carrierAppointment")
    preconditions: List[StrictStr] = Field(description="Identifies a list of preconditions for confirming the transportation option.")
    quote: Optional[Quote] = None
    shipment_id: Annotated[str, Field(min_length=38, strict=True, max_length=38)] = Field(description="Identifier of a shipment. A shipment contains the boxes and units being inbounded.", alias="shipmentId")
    shipping_mode: Annotated[str, Field(min_length=1, strict=True, max_length=1024)] = Field(description="Mode of shipment transportation that this option will provide.  Possible values: `GROUND_SMALL_PARCEL`, `FREIGHT_LTL`, `FREIGHT_FTL_PALLET`, `FREIGHT_FTL_NONPALLET`, `OCEAN_LCL`, `OCEAN_FCL`, `AIR_SMALL_PARCEL`, `AIR_SMALL_PARCEL_EXPRESS`.", alias="shippingMode")
    shipping_solution: Annotated[str, Field(min_length=1, strict=True, max_length=1024)] = Field(description="Shipping program for the option. Possible values: `AMAZON_PARTNERED_CARRIER`, `USE_YOUR_OWN_CARRIER`.", alias="shippingSolution")
    transportation_option_id: Annotated[str, Field(min_length=38, strict=True, max_length=38)] = Field(description="Identifier of a transportation option. A transportation option represent one option for how to send a shipment.", alias="transportationOptionId")
    __properties: ClassVar[List[str]] = ["carrier", "carrierAppointment", "preconditions", "quote", "shipmentId", "shippingMode", "shippingSolution", "transportationOptionId"]

    @field_validator('shipment_id')
    def shipment_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9-]*$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9-]*$/")
        return value

    @field_validator('transportation_option_id')
    def transportation_option_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9-]*$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9-]*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportationOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of carrier
        if self.carrier:
            _dict['carrier'] = self.carrier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of carrier_appointment
        if self.carrier_appointment:
            _dict['carrierAppointment'] = self.carrier_appointment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quote
        if self.quote:
            _dict['quote'] = self.quote.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportationOption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "carrier": Carrier.from_dict(obj["carrier"]) if obj.get("carrier") is not None else None,
            "carrierAppointment": CarrierAppointment.from_dict(obj["carrierAppointment"]) if obj.get("carrierAppointment") is not None else None,
            "preconditions": obj.get("preconditions"),
            "quote": Quote.from_dict(obj["quote"]) if obj.get("quote") is not None else None,
            "shipmentId": obj.get("shipmentId"),
            "shippingMode": obj.get("shippingMode"),
            "shippingSolution": obj.get("shippingSolution"),
            "transportationOptionId": obj.get("transportationOptionId")
        })
        return _obj


