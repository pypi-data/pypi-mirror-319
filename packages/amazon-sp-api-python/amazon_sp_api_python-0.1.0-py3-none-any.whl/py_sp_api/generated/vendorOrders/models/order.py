# coding: utf-8

"""
    Selling Partner API for Retail Procurement Orders

    The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.vendorOrders.models.order_details import OrderDetails
from typing import Optional, Set
from typing_extensions import Self

class Order(BaseModel):
    """
    Represents an order placed by Amazon, including the purchase order number, current state, and order details.
    """ # noqa: E501
    purchase_order_number: StrictStr = Field(description="The purchase order number for this order. Formatting Notes: 8-character alpha-numeric code.", alias="purchaseOrderNumber")
    purchase_order_state: StrictStr = Field(description="This field will contain the current state of the purchase order.", alias="purchaseOrderState")
    order_details: Optional[OrderDetails] = Field(default=None, alias="orderDetails")
    __properties: ClassVar[List[str]] = ["purchaseOrderNumber", "purchaseOrderState", "orderDetails"]

    @field_validator('purchase_order_state')
    def purchase_order_state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['New', 'Acknowledged', 'Closed']):
            raise ValueError("must be one of enum values ('New', 'Acknowledged', 'Closed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Order from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of order_details
        if self.order_details:
            _dict['orderDetails'] = self.order_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Order from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "purchaseOrderNumber": obj.get("purchaseOrderNumber"),
            "purchaseOrderState": obj.get("purchaseOrderState"),
            "orderDetails": OrderDetails.from_dict(obj["orderDetails"]) if obj.get("orderDetails") is not None else None
        })
        return _obj


