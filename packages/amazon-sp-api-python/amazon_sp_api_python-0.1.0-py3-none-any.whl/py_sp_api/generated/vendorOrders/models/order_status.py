# coding: utf-8

"""
    Selling Partner API for Retail Procurement Orders

    The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.vendorOrders.models.order_item_status import OrderItemStatus
from py_sp_api.generated.vendorOrders.models.party_identification import PartyIdentification
from typing import Optional, Set
from typing_extensions import Self

class OrderStatus(BaseModel):
    """
    Current status of a purchase order.
    """ # noqa: E501
    purchase_order_number: StrictStr = Field(description="The buyer's purchase order number for this order. Formatting Notes: 8-character alpha-numeric code.", alias="purchaseOrderNumber")
    purchase_order_status: StrictStr = Field(description="The status of the buyer's purchase order for this order.", alias="purchaseOrderStatus")
    purchase_order_date: datetime = Field(description="The date the purchase order was placed. Must be in ISO-8601 date/time format.", alias="purchaseOrderDate")
    last_updated_date: Optional[datetime] = Field(default=None, description="The date when the purchase order was last updated. Must be in ISO-8601 date/time format.", alias="lastUpdatedDate")
    selling_party: PartyIdentification = Field(alias="sellingParty")
    ship_to_party: PartyIdentification = Field(alias="shipToParty")
    item_status: List[OrderItemStatus] = Field(description="Detailed description of items order status.", alias="itemStatus")
    __properties: ClassVar[List[str]] = ["purchaseOrderNumber", "purchaseOrderStatus", "purchaseOrderDate", "lastUpdatedDate", "sellingParty", "shipToParty", "itemStatus"]

    @field_validator('purchase_order_status')
    def purchase_order_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['OPEN', 'CLOSED']):
            raise ValueError("must be one of enum values ('OPEN', 'CLOSED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of selling_party
        if self.selling_party:
            _dict['sellingParty'] = self.selling_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_party
        if self.ship_to_party:
            _dict['shipToParty'] = self.ship_to_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in item_status (list)
        _items = []
        if self.item_status:
            for _item_item_status in self.item_status:
                if _item_item_status:
                    _items.append(_item_item_status.to_dict())
            _dict['itemStatus'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "purchaseOrderNumber": obj.get("purchaseOrderNumber"),
            "purchaseOrderStatus": obj.get("purchaseOrderStatus"),
            "purchaseOrderDate": obj.get("purchaseOrderDate"),
            "lastUpdatedDate": obj.get("lastUpdatedDate"),
            "sellingParty": PartyIdentification.from_dict(obj["sellingParty"]) if obj.get("sellingParty") is not None else None,
            "shipToParty": PartyIdentification.from_dict(obj["shipToParty"]) if obj.get("shipToParty") is not None else None,
            "itemStatus": [OrderItemStatus.from_dict(_item) for _item in obj["itemStatus"]] if obj.get("itemStatus") is not None else None
        })
        return _obj


