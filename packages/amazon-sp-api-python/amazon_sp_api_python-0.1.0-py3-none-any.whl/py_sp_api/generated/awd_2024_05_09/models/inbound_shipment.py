# coding: utf-8

"""
    The Selling Partner API for Amazon Warehousing and Distribution

    The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 

    The version of the OpenAPI document: 2024-05-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.awd_2024_05_09.models.address import Address
from py_sp_api.generated.awd_2024_05_09.models.carrier_code import CarrierCode
from py_sp_api.generated.awd_2024_05_09.models.distribution_package_quantity import DistributionPackageQuantity
from py_sp_api.generated.awd_2024_05_09.models.inbound_shipment_status import InboundShipmentStatus
from py_sp_api.generated.awd_2024_05_09.models.inventory_quantity import InventoryQuantity
from py_sp_api.generated.awd_2024_05_09.models.sku_quantity import SkuQuantity
from typing import Optional, Set
from typing_extensions import Self

class InboundShipment(BaseModel):
    """
    Represents an AWD inbound shipment.
    """ # noqa: E501
    carrier_code: Optional[CarrierCode] = Field(default=None, alias="carrierCode")
    created_at: Optional[datetime] = Field(default=None, description="Timestamp when the shipment was created. The date is returned in <a href='https://developer-docs.amazon.com/sp-api/docs/iso-8601'>ISO 8601</a> format.", alias="createdAt")
    destination_address: Address = Field(alias="destinationAddress")
    external_reference_id: Optional[StrictStr] = Field(default=None, description="Client-provided reference ID that can correlate this shipment to client resources. For example, to map this shipment to an internal bookkeeping order record.", alias="externalReferenceId")
    order_id: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The AWD inbound order ID that this inbound shipment belongs to.", alias="orderId")
    origin_address: Address = Field(alias="originAddress")
    received_quantity: Optional[List[InventoryQuantity]] = Field(default=None, description="Quantity received (at the receiving end) as part of this shipment.", alias="receivedQuantity")
    ship_by: Optional[datetime] = Field(default=None, description="Timestamp when the shipment will be shipped.", alias="shipBy")
    shipment_container_quantities: List[DistributionPackageQuantity] = Field(description="Packages that are part of this shipment.", alias="shipmentContainerQuantities")
    shipment_id: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Unique shipment ID.", alias="shipmentId")
    shipment_sku_quantities: Optional[List[SkuQuantity]] = Field(default=None, description="Quantity details at SKU level for the shipment. This attribute will only appear if the skuQuantities parameter in the request is set to SHOW.", alias="shipmentSkuQuantities")
    destination_region: Optional[StrictStr] = Field(default=None, description="Assigned region where the order will be shipped. This can differ from what was passed as preference. AWD currently supports following region IDs: [us-west, us-east]", alias="destinationRegion")
    shipment_status: InboundShipmentStatus = Field(alias="shipmentStatus")
    tracking_id: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="Carrier-unique tracking ID for this shipment.", alias="trackingId")
    updated_at: Optional[datetime] = Field(default=None, description="Timestamp when the shipment was updated. The date is returned in <a href='https://developer-docs.amazon.com/sp-api/docs/iso-8601'>ISO 8601</a> format.", alias="updatedAt")
    warehouse_reference_id: Optional[StrictStr] = Field(default=None, description="An AWD-provided reference ID that you can use to interact with the warehouse. For example, a carrier appointment booking.", alias="warehouseReferenceId")
    __properties: ClassVar[List[str]] = ["carrierCode", "createdAt", "destinationAddress", "externalReferenceId", "orderId", "originAddress", "receivedQuantity", "shipBy", "shipmentContainerQuantities", "shipmentId", "shipmentSkuQuantities", "destinationRegion", "shipmentStatus", "trackingId", "updatedAt", "warehouseReferenceId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InboundShipment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of carrier_code
        if self.carrier_code:
            _dict['carrierCode'] = self.carrier_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_address
        if self.destination_address:
            _dict['destinationAddress'] = self.destination_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of origin_address
        if self.origin_address:
            _dict['originAddress'] = self.origin_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in received_quantity (list)
        _items = []
        if self.received_quantity:
            for _item_received_quantity in self.received_quantity:
                if _item_received_quantity:
                    _items.append(_item_received_quantity.to_dict())
            _dict['receivedQuantity'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_container_quantities (list)
        _items = []
        if self.shipment_container_quantities:
            for _item_shipment_container_quantities in self.shipment_container_quantities:
                if _item_shipment_container_quantities:
                    _items.append(_item_shipment_container_quantities.to_dict())
            _dict['shipmentContainerQuantities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_sku_quantities (list)
        _items = []
        if self.shipment_sku_quantities:
            for _item_shipment_sku_quantities in self.shipment_sku_quantities:
                if _item_shipment_sku_quantities:
                    _items.append(_item_shipment_sku_quantities.to_dict())
            _dict['shipmentSkuQuantities'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InboundShipment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "carrierCode": CarrierCode.from_dict(obj["carrierCode"]) if obj.get("carrierCode") is not None else None,
            "createdAt": obj.get("createdAt"),
            "destinationAddress": Address.from_dict(obj["destinationAddress"]) if obj.get("destinationAddress") is not None else None,
            "externalReferenceId": obj.get("externalReferenceId"),
            "orderId": obj.get("orderId"),
            "originAddress": Address.from_dict(obj["originAddress"]) if obj.get("originAddress") is not None else None,
            "receivedQuantity": [InventoryQuantity.from_dict(_item) for _item in obj["receivedQuantity"]] if obj.get("receivedQuantity") is not None else None,
            "shipBy": obj.get("shipBy"),
            "shipmentContainerQuantities": [DistributionPackageQuantity.from_dict(_item) for _item in obj["shipmentContainerQuantities"]] if obj.get("shipmentContainerQuantities") is not None else None,
            "shipmentId": obj.get("shipmentId"),
            "shipmentSkuQuantities": [SkuQuantity.from_dict(_item) for _item in obj["shipmentSkuQuantities"]] if obj.get("shipmentSkuQuantities") is not None else None,
            "destinationRegion": obj.get("destinationRegion"),
            "shipmentStatus": obj.get("shipmentStatus"),
            "trackingId": obj.get("trackingId"),
            "updatedAt": obj.get("updatedAt"),
            "warehouseReferenceId": obj.get("warehouseReferenceId")
        })
        return _obj


