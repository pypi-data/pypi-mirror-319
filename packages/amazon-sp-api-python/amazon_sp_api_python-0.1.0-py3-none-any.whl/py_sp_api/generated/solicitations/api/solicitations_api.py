# coding: utf-8

"""
    Selling Partner API for Solicitations

    With the Solicitations API you can build applications that send non-critical solicitations to buyers. You can get a list of solicitation types that are available for an order that you specify, then call an operation that sends a solicitation to the buyer for that order. Buyers cannot respond to solicitations sent by this API, and these solicitations do not appear in the Messaging section of Seller Central or in the recipient's Message Center. The Solicitations API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import List
from typing_extensions import Annotated
from py_sp_api.generated.solicitations.models.create_product_review_and_seller_feedback_solicitation_response import CreateProductReviewAndSellerFeedbackSolicitationResponse
from py_sp_api.generated.solicitations.models.get_solicitation_actions_for_order_response import GetSolicitationActionsForOrderResponse

from py_sp_api.generated.solicitations.api_client import ApiClient, RequestSerialized
from py_sp_api.generated.solicitations.api_response import ApiResponse
from py_sp_api.generated.solicitations.rest import RESTResponseType


class SolicitationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_product_review_and_seller_feedback_solicitation(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This specifies the order for which a solicitation is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateProductReviewAndSellerFeedbackSolicitationResponse:
        """create_product_review_and_seller_feedback_solicitation

        Sends a solicitation to a buyer asking for seller feedback and a product review for the specified order. Send only one productReviewAndSellerFeedback or free form proactive message per order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This specifies the order for which a solicitation is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :type marketplace_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_product_review_and_seller_feedback_solicitation_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '400': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '403': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '404': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '413': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '415': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '429': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '500': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '503': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_product_review_and_seller_feedback_solicitation_with_http_info(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This specifies the order for which a solicitation is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateProductReviewAndSellerFeedbackSolicitationResponse]:
        """create_product_review_and_seller_feedback_solicitation

        Sends a solicitation to a buyer asking for seller feedback and a product review for the specified order. Send only one productReviewAndSellerFeedback or free form proactive message per order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This specifies the order for which a solicitation is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :type marketplace_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_product_review_and_seller_feedback_solicitation_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '400': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '403': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '404': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '413': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '415': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '429': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '500': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '503': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_product_review_and_seller_feedback_solicitation_without_preload_content(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This specifies the order for which a solicitation is sent.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_product_review_and_seller_feedback_solicitation

        Sends a solicitation to a buyer asking for seller feedback and a product review for the specified order. Send only one productReviewAndSellerFeedback or free form proactive message per order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This specifies the order for which a solicitation is sent. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :type marketplace_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_product_review_and_seller_feedback_solicitation_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '400': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '403': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '404': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '413': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '415': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '429': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '500': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
            '503': "CreateProductReviewAndSellerFeedbackSolicitationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_product_review_and_seller_feedback_solicitation_serialize(
        self,
        amazon_order_id,
        marketplace_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if amazon_order_id is not None:
            _path_params['amazonOrderId'] = amazon_order_id
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/solicitations/v1/orders/{amazonOrderId}/solicitations/productReviewAndSellerFeedback',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_solicitation_actions_for_order(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This specifies the order for which you want a list of available solicitation types.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSolicitationActionsForOrderResponse:
        """get_solicitation_actions_for_order

        Returns a list of solicitation types that are available for an order that you specify. A solicitation type is represented by an actions object, which contains a path and query parameter(s). You can use the path and parameter(s) to call an operation that sends a solicitation. Currently only the productReviewAndSellerFeedbackSolicitation solicitation type is available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This specifies the order for which you want a list of available solicitation types. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :type marketplace_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_solicitation_actions_for_order_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSolicitationActionsForOrderResponse",
            '400': "GetSolicitationActionsForOrderResponse",
            '403': "GetSolicitationActionsForOrderResponse",
            '404': "GetSolicitationActionsForOrderResponse",
            '413': "GetSolicitationActionsForOrderResponse",
            '415': "GetSolicitationActionsForOrderResponse",
            '429': "GetSolicitationActionsForOrderResponse",
            '500': "GetSolicitationActionsForOrderResponse",
            '503': "GetSolicitationActionsForOrderResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_solicitation_actions_for_order_with_http_info(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This specifies the order for which you want a list of available solicitation types.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSolicitationActionsForOrderResponse]:
        """get_solicitation_actions_for_order

        Returns a list of solicitation types that are available for an order that you specify. A solicitation type is represented by an actions object, which contains a path and query parameter(s). You can use the path and parameter(s) to call an operation that sends a solicitation. Currently only the productReviewAndSellerFeedbackSolicitation solicitation type is available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This specifies the order for which you want a list of available solicitation types. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :type marketplace_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_solicitation_actions_for_order_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSolicitationActionsForOrderResponse",
            '400': "GetSolicitationActionsForOrderResponse",
            '403': "GetSolicitationActionsForOrderResponse",
            '404': "GetSolicitationActionsForOrderResponse",
            '413': "GetSolicitationActionsForOrderResponse",
            '415': "GetSolicitationActionsForOrderResponse",
            '429': "GetSolicitationActionsForOrderResponse",
            '500': "GetSolicitationActionsForOrderResponse",
            '503': "GetSolicitationActionsForOrderResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_solicitation_actions_for_order_without_preload_content(
        self,
        amazon_order_id: Annotated[StrictStr, Field(description="An Amazon order identifier. This specifies the order for which you want a list of available solicitation types.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_solicitation_actions_for_order

        Returns a list of solicitation types that are available for an order that you specify. A solicitation type is represented by an actions object, which contains a path and query parameter(s). You can use the path and parameter(s) to call an operation that sends a solicitation. Currently only the productReviewAndSellerFeedbackSolicitation solicitation type is available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

        :param amazon_order_id: An Amazon order identifier. This specifies the order for which you want a list of available solicitation types. (required)
        :type amazon_order_id: str
        :param marketplace_ids: A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :type marketplace_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_solicitation_actions_for_order_serialize(
            amazon_order_id=amazon_order_id,
            marketplace_ids=marketplace_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSolicitationActionsForOrderResponse",
            '400': "GetSolicitationActionsForOrderResponse",
            '403': "GetSolicitationActionsForOrderResponse",
            '404': "GetSolicitationActionsForOrderResponse",
            '413': "GetSolicitationActionsForOrderResponse",
            '415': "GetSolicitationActionsForOrderResponse",
            '429': "GetSolicitationActionsForOrderResponse",
            '500': "GetSolicitationActionsForOrderResponse",
            '503': "GetSolicitationActionsForOrderResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_solicitation_actions_for_order_serialize(
        self,
        amazon_order_id,
        marketplace_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if amazon_order_id is not None:
            _path_params['amazonOrderId'] = amazon_order_id
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/solicitations/v1/orders/{amazonOrderId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


