# coding: utf-8

"""
    Selling Partner API for A+ Content Management

    With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.

    The version of the OpenAPI document: 2020-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.aplusContent_2020_11_01.models.content_module_type import ContentModuleType
from py_sp_api.generated.aplusContent_2020_11_01.models.standard_company_logo_module import StandardCompanyLogoModule
from py_sp_api.generated.aplusContent_2020_11_01.models.standard_comparison_table_module import StandardComparisonTableModule
from py_sp_api.generated.aplusContent_2020_11_01.models.standard_four_image_text_module import StandardFourImageTextModule
from py_sp_api.generated.aplusContent_2020_11_01.models.standard_four_image_text_quadrant_module import StandardFourImageTextQuadrantModule
from py_sp_api.generated.aplusContent_2020_11_01.models.standard_header_image_text_module import StandardHeaderImageTextModule
from py_sp_api.generated.aplusContent_2020_11_01.models.standard_image_sidebar_module import StandardImageSidebarModule
from py_sp_api.generated.aplusContent_2020_11_01.models.standard_image_text_overlay_module import StandardImageTextOverlayModule
from py_sp_api.generated.aplusContent_2020_11_01.models.standard_multiple_image_text_module import StandardMultipleImageTextModule
from py_sp_api.generated.aplusContent_2020_11_01.models.standard_product_description_module import StandardProductDescriptionModule
from py_sp_api.generated.aplusContent_2020_11_01.models.standard_single_image_highlights_module import StandardSingleImageHighlightsModule
from py_sp_api.generated.aplusContent_2020_11_01.models.standard_single_image_specs_detail_module import StandardSingleImageSpecsDetailModule
from py_sp_api.generated.aplusContent_2020_11_01.models.standard_single_side_image_module import StandardSingleSideImageModule
from py_sp_api.generated.aplusContent_2020_11_01.models.standard_tech_specs_module import StandardTechSpecsModule
from py_sp_api.generated.aplusContent_2020_11_01.models.standard_text_module import StandardTextModule
from py_sp_api.generated.aplusContent_2020_11_01.models.standard_three_image_text_module import StandardThreeImageTextModule
from typing import Optional, Set
from typing_extensions import Self

class ContentModule(BaseModel):
    """
    An A+ Content module. An A+ Content document is composed of content modules. The contentModuleType property selects which content module types to use.
    """ # noqa: E501
    content_module_type: ContentModuleType = Field(alias="contentModuleType")
    standard_company_logo: Optional[StandardCompanyLogoModule] = Field(default=None, alias="standardCompanyLogo")
    standard_comparison_table: Optional[StandardComparisonTableModule] = Field(default=None, alias="standardComparisonTable")
    standard_four_image_text: Optional[StandardFourImageTextModule] = Field(default=None, alias="standardFourImageText")
    standard_four_image_text_quadrant: Optional[StandardFourImageTextQuadrantModule] = Field(default=None, alias="standardFourImageTextQuadrant")
    standard_header_image_text: Optional[StandardHeaderImageTextModule] = Field(default=None, alias="standardHeaderImageText")
    standard_image_sidebar: Optional[StandardImageSidebarModule] = Field(default=None, alias="standardImageSidebar")
    standard_image_text_overlay: Optional[StandardImageTextOverlayModule] = Field(default=None, alias="standardImageTextOverlay")
    standard_multiple_image_text: Optional[StandardMultipleImageTextModule] = Field(default=None, alias="standardMultipleImageText")
    standard_product_description: Optional[StandardProductDescriptionModule] = Field(default=None, alias="standardProductDescription")
    standard_single_image_highlights: Optional[StandardSingleImageHighlightsModule] = Field(default=None, alias="standardSingleImageHighlights")
    standard_single_image_specs_detail: Optional[StandardSingleImageSpecsDetailModule] = Field(default=None, alias="standardSingleImageSpecsDetail")
    standard_single_side_image: Optional[StandardSingleSideImageModule] = Field(default=None, alias="standardSingleSideImage")
    standard_tech_specs: Optional[StandardTechSpecsModule] = Field(default=None, alias="standardTechSpecs")
    standard_text: Optional[StandardTextModule] = Field(default=None, alias="standardText")
    standard_three_image_text: Optional[StandardThreeImageTextModule] = Field(default=None, alias="standardThreeImageText")
    __properties: ClassVar[List[str]] = ["contentModuleType", "standardCompanyLogo", "standardComparisonTable", "standardFourImageText", "standardFourImageTextQuadrant", "standardHeaderImageText", "standardImageSidebar", "standardImageTextOverlay", "standardMultipleImageText", "standardProductDescription", "standardSingleImageHighlights", "standardSingleImageSpecsDetail", "standardSingleSideImage", "standardTechSpecs", "standardText", "standardThreeImageText"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContentModule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of standard_company_logo
        if self.standard_company_logo:
            _dict['standardCompanyLogo'] = self.standard_company_logo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standard_comparison_table
        if self.standard_comparison_table:
            _dict['standardComparisonTable'] = self.standard_comparison_table.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standard_four_image_text
        if self.standard_four_image_text:
            _dict['standardFourImageText'] = self.standard_four_image_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standard_four_image_text_quadrant
        if self.standard_four_image_text_quadrant:
            _dict['standardFourImageTextQuadrant'] = self.standard_four_image_text_quadrant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standard_header_image_text
        if self.standard_header_image_text:
            _dict['standardHeaderImageText'] = self.standard_header_image_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standard_image_sidebar
        if self.standard_image_sidebar:
            _dict['standardImageSidebar'] = self.standard_image_sidebar.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standard_image_text_overlay
        if self.standard_image_text_overlay:
            _dict['standardImageTextOverlay'] = self.standard_image_text_overlay.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standard_multiple_image_text
        if self.standard_multiple_image_text:
            _dict['standardMultipleImageText'] = self.standard_multiple_image_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standard_product_description
        if self.standard_product_description:
            _dict['standardProductDescription'] = self.standard_product_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standard_single_image_highlights
        if self.standard_single_image_highlights:
            _dict['standardSingleImageHighlights'] = self.standard_single_image_highlights.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standard_single_image_specs_detail
        if self.standard_single_image_specs_detail:
            _dict['standardSingleImageSpecsDetail'] = self.standard_single_image_specs_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standard_single_side_image
        if self.standard_single_side_image:
            _dict['standardSingleSideImage'] = self.standard_single_side_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standard_tech_specs
        if self.standard_tech_specs:
            _dict['standardTechSpecs'] = self.standard_tech_specs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standard_text
        if self.standard_text:
            _dict['standardText'] = self.standard_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standard_three_image_text
        if self.standard_three_image_text:
            _dict['standardThreeImageText'] = self.standard_three_image_text.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContentModule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentModuleType": obj.get("contentModuleType"),
            "standardCompanyLogo": StandardCompanyLogoModule.from_dict(obj["standardCompanyLogo"]) if obj.get("standardCompanyLogo") is not None else None,
            "standardComparisonTable": StandardComparisonTableModule.from_dict(obj["standardComparisonTable"]) if obj.get("standardComparisonTable") is not None else None,
            "standardFourImageText": StandardFourImageTextModule.from_dict(obj["standardFourImageText"]) if obj.get("standardFourImageText") is not None else None,
            "standardFourImageTextQuadrant": StandardFourImageTextQuadrantModule.from_dict(obj["standardFourImageTextQuadrant"]) if obj.get("standardFourImageTextQuadrant") is not None else None,
            "standardHeaderImageText": StandardHeaderImageTextModule.from_dict(obj["standardHeaderImageText"]) if obj.get("standardHeaderImageText") is not None else None,
            "standardImageSidebar": StandardImageSidebarModule.from_dict(obj["standardImageSidebar"]) if obj.get("standardImageSidebar") is not None else None,
            "standardImageTextOverlay": StandardImageTextOverlayModule.from_dict(obj["standardImageTextOverlay"]) if obj.get("standardImageTextOverlay") is not None else None,
            "standardMultipleImageText": StandardMultipleImageTextModule.from_dict(obj["standardMultipleImageText"]) if obj.get("standardMultipleImageText") is not None else None,
            "standardProductDescription": StandardProductDescriptionModule.from_dict(obj["standardProductDescription"]) if obj.get("standardProductDescription") is not None else None,
            "standardSingleImageHighlights": StandardSingleImageHighlightsModule.from_dict(obj["standardSingleImageHighlights"]) if obj.get("standardSingleImageHighlights") is not None else None,
            "standardSingleImageSpecsDetail": StandardSingleImageSpecsDetailModule.from_dict(obj["standardSingleImageSpecsDetail"]) if obj.get("standardSingleImageSpecsDetail") is not None else None,
            "standardSingleSideImage": StandardSingleSideImageModule.from_dict(obj["standardSingleSideImage"]) if obj.get("standardSingleSideImage") is not None else None,
            "standardTechSpecs": StandardTechSpecsModule.from_dict(obj["standardTechSpecs"]) if obj.get("standardTechSpecs") is not None else None,
            "standardText": StandardTextModule.from_dict(obj["standardText"]) if obj.get("standardText") is not None else None,
            "standardThreeImageText": StandardThreeImageTextModule.from_dict(obj["standardThreeImageText"]) if obj.get("standardThreeImageText") is not None else None
        })
        return _obj


