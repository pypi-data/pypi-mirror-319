# coding: utf-8

"""
    Selling Partner API for Pricing

    The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).

    The version of the OpenAPI document: 2022-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.productPricing_2022_05_01.models.http_method import HttpMethod
from typing import Optional, Set
from typing_extensions import Self

class FeaturedOfferExpectedPriceRequest(BaseModel):
    """
    An individual FOEP request for a particular SKU.
    """ # noqa: E501
    uri: StrictStr = Field(description="The URI associated with an individual request within a batch. For `FeaturedOfferExpectedPrice`, this is `/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice`.")
    method: HttpMethod
    body: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Additional HTTP body information that is associated with an individual request within a batch.")
    headers: Optional[Dict[str, StrictStr]] = Field(default=None, description="A mapping of additional HTTP headers to send or receive for an individual request within a batch.")
    marketplace_id: StrictStr = Field(description="A marketplace identifier. Specifies the marketplace for which data is returned.", alias="marketplaceId")
    sku: StrictStr = Field(description="The seller SKU of the item.")
    __properties: ClassVar[List[str]] = ["uri", "method", "body", "headers", "marketplaceId", "sku"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeaturedOfferExpectedPriceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeaturedOfferExpectedPriceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uri": obj.get("uri"),
            "method": obj.get("method"),
            "body": obj.get("body"),
            "headers": obj.get("headers"),
            "marketplaceId": obj.get("marketplaceId"),
            "sku": obj.get("sku")
        })
        return _obj


