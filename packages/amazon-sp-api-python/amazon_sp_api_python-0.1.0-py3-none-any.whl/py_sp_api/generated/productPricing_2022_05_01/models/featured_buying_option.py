# coding: utf-8

"""
    Selling Partner API for Pricing

    The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).

    The version of the OpenAPI document: 2022-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from py_sp_api.generated.productPricing_2022_05_01.models.segmented_featured_offer import SegmentedFeaturedOffer
from typing import Optional, Set
from typing_extensions import Self

class FeaturedBuyingOption(BaseModel):
    """
    Describes a featured buying option, which includes a list of segmented featured offers for a particular item condition.
    """ # noqa: E501
    buying_option_type: StrictStr = Field(description="The buying option type for the featured offer. `buyingOptionType` represents the buying options that a customer receives on the detail page, such as `B2B`, `Fresh`, and `Subscribe n Save`. `buyingOptionType` currently supports `NEW` as a value.", alias="buyingOptionType")
    segmented_featured_offers: Annotated[List[SegmentedFeaturedOffer], Field(min_length=1)] = Field(description="A list of segmented featured offers for the current buying option type. A segment can be considered as a group of regional contexts that all have the same featured offer. A regional context is a combination of factors such as customer type, region, or postal code and buying option.", alias="segmentedFeaturedOffers")
    __properties: ClassVar[List[str]] = ["buyingOptionType", "segmentedFeaturedOffers"]

    @field_validator('buying_option_type')
    def buying_option_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['New']):
            raise ValueError("must be one of enum values ('New')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeaturedBuyingOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in segmented_featured_offers (list)
        _items = []
        if self.segmented_featured_offers:
            for _item_segmented_featured_offers in self.segmented_featured_offers:
                if _item_segmented_featured_offers:
                    _items.append(_item_segmented_featured_offers.to_dict())
            _dict['segmentedFeaturedOffers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeaturedBuyingOption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buyingOptionType": obj.get("buyingOptionType"),
            "segmentedFeaturedOffers": [SegmentedFeaturedOffer.from_dict(_item) for _item in obj["segmentedFeaturedOffers"]] if obj.get("segmentedFeaturedOffers") is not None else None
        })
        return _obj


