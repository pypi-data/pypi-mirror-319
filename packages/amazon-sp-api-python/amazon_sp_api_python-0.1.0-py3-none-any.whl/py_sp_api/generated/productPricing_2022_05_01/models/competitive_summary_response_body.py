# coding: utf-8

"""
    Selling Partner API for Pricing

    The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).

    The version of the OpenAPI document: 2022-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.productPricing_2022_05_01.models.error import Error
from py_sp_api.generated.productPricing_2022_05_01.models.featured_buying_option import FeaturedBuyingOption
from py_sp_api.generated.productPricing_2022_05_01.models.lowest_priced_offer import LowestPricedOffer
from py_sp_api.generated.productPricing_2022_05_01.models.reference_price import ReferencePrice
from typing import Optional, Set
from typing_extensions import Self

class CompetitiveSummaryResponseBody(BaseModel):
    """
    The `competitiveSummaryResponse` body for a requested ASIN and `marketplaceId`.
    """ # noqa: E501
    asin: StrictStr = Field(description="The ASIN of the item.")
    marketplace_id: StrictStr = Field(description="A marketplace identifier. Specifies the marketplace for which data is returned.", alias="marketplaceId")
    featured_buying_options: Optional[List[FeaturedBuyingOption]] = Field(default=None, description="A list of featured buying options for the specified ASIN `marketplaceId` combination.", alias="featuredBuyingOptions")
    lowest_priced_offers: Optional[List[LowestPricedOffer]] = Field(default=None, description="A list of lowest priced offers for the specified ASIN `marketplaceId` combination.", alias="lowestPricedOffers")
    reference_prices: Optional[List[ReferencePrice]] = Field(default=None, description="A list of reference prices for the specified ASIN `marketplaceId` combination.", alias="referencePrices")
    errors: Optional[List[Error]] = Field(default=None, description="A list of error responses that are returned when a request is unsuccessful.")
    __properties: ClassVar[List[str]] = ["asin", "marketplaceId", "featuredBuyingOptions", "lowestPricedOffers", "referencePrices", "errors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompetitiveSummaryResponseBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in featured_buying_options (list)
        _items = []
        if self.featured_buying_options:
            for _item_featured_buying_options in self.featured_buying_options:
                if _item_featured_buying_options:
                    _items.append(_item_featured_buying_options.to_dict())
            _dict['featuredBuyingOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lowest_priced_offers (list)
        _items = []
        if self.lowest_priced_offers:
            for _item_lowest_priced_offers in self.lowest_priced_offers:
                if _item_lowest_priced_offers:
                    _items.append(_item_lowest_priced_offers.to_dict())
            _dict['lowestPricedOffers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reference_prices (list)
        _items = []
        if self.reference_prices:
            for _item_reference_prices in self.reference_prices:
                if _item_reference_prices:
                    _items.append(_item_reference_prices.to_dict())
            _dict['referencePrices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompetitiveSummaryResponseBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asin": obj.get("asin"),
            "marketplaceId": obj.get("marketplaceId"),
            "featuredBuyingOptions": [FeaturedBuyingOption.from_dict(_item) for _item in obj["featuredBuyingOptions"]] if obj.get("featuredBuyingOptions") is not None else None,
            "lowestPricedOffers": [LowestPricedOffer.from_dict(_item) for _item in obj["lowestPricedOffers"]] if obj.get("lowestPricedOffers") is not None else None,
            "referencePrices": [ReferencePrice.from_dict(_item) for _item in obj["referencePrices"]] if obj.get("referencePrices") is not None else None,
            "errors": [Error.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None
        })
        return _obj


