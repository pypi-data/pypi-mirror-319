# coding: utf-8

"""
    Amazon Shipping API

    The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.

    The version of the OpenAPI document: v2
    Contact: swa-api-core@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.shippingV2.models.requested_document_specification import RequestedDocumentSpecification
from py_sp_api.generated.shippingV2.models.requested_value_added_service import RequestedValueAddedService
from typing import Optional, Set
from typing_extensions import Self

class PurchaseShipmentRequest(BaseModel):
    """
    The request schema for the purchaseShipment operation.
    """ # noqa: E501
    request_token: StrictStr = Field(description="A unique token generated to identify a getRates operation.", alias="requestToken")
    rate_id: StrictStr = Field(description="An identifier for the rate (shipment offering) provided by a shipping service provider.", alias="rateId")
    requested_document_specification: RequestedDocumentSpecification = Field(alias="requestedDocumentSpecification")
    requested_value_added_services: Optional[List[RequestedValueAddedService]] = Field(default=None, description="The value-added services to be added to a shipping service purchase.", alias="requestedValueAddedServices")
    additional_inputs: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="The additional inputs required to purchase a shipping offering, in JSON format. The JSON provided here must adhere to the JSON schema that is returned in the response to the getAdditionalInputs operation.  Additional inputs are only required when indicated by the requiresAdditionalInputs property in the response to the getRates operation.", alias="additionalInputs")
    __properties: ClassVar[List[str]] = ["requestToken", "rateId", "requestedDocumentSpecification", "requestedValueAddedServices", "additionalInputs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PurchaseShipmentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of requested_document_specification
        if self.requested_document_specification:
            _dict['requestedDocumentSpecification'] = self.requested_document_specification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in requested_value_added_services (list)
        _items = []
        if self.requested_value_added_services:
            for _item_requested_value_added_services in self.requested_value_added_services:
                if _item_requested_value_added_services:
                    _items.append(_item_requested_value_added_services.to_dict())
            _dict['requestedValueAddedServices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PurchaseShipmentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "requestToken": obj.get("requestToken"),
            "rateId": obj.get("rateId"),
            "requestedDocumentSpecification": RequestedDocumentSpecification.from_dict(obj["requestedDocumentSpecification"]) if obj.get("requestedDocumentSpecification") is not None else None,
            "requestedValueAddedServices": [RequestedValueAddedService.from_dict(_item) for _item in obj["requestedValueAddedServices"]] if obj.get("requestedValueAddedServices") is not None else None,
            "additionalInputs": obj.get("additionalInputs")
        })
        return _obj


