# coding: utf-8

"""
    The Selling Partner API for Finances

    The Selling Partner API for Finances provides financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.

    The version of the OpenAPI document: 2024-06-19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PaymentsContext(BaseModel):
    """
    Additional information related to payments-related transactions.
    """ # noqa: E501
    payment_type: Optional[StrictStr] = Field(default=None, description="The type of payment.", alias="paymentType")
    payment_method: Optional[StrictStr] = Field(default=None, description="The method of payment.", alias="paymentMethod")
    payment_reference: Optional[StrictStr] = Field(default=None, description="The reference number of the payment.", alias="paymentReference")
    payment_date: Optional[datetime] = Field(default=None, description="A date in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.", alias="paymentDate")
    __properties: ClassVar[List[str]] = ["paymentType", "paymentMethod", "paymentReference", "paymentDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentsContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentsContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "paymentType": obj.get("paymentType"),
            "paymentMethod": obj.get("paymentMethod"),
            "paymentReference": obj.get("paymentReference"),
            "paymentDate": obj.get("paymentDate")
        })
        return _obj


