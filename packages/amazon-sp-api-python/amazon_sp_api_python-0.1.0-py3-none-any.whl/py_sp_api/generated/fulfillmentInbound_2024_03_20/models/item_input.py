# coding: utf-8

"""
    Fulfillment Inbound v2024-03-20

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.label_owner import LabelOwner
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.prep_owner import PrepOwner
from typing import Optional, Set
from typing_extensions import Self

class ItemInput(BaseModel):
    """
    Defines an item's input parameters.
    """ # noqa: E501
    expiration: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The expiration date of the MSKU. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format with pattern `YYYY-MM-DD`. Items with the same MSKU but different expiration dates cannot go into the same box.")
    label_owner: LabelOwner = Field(alias="labelOwner")
    manufacturing_lot_code: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=256)]] = Field(default=None, description="The manufacturing lot code.", alias="manufacturingLotCode")
    msku: Annotated[str, Field(min_length=1, strict=True, max_length=40)] = Field(description="The merchant SKU, a merchant-supplied identifier of a specific SKU.")
    prep_owner: PrepOwner = Field(alias="prepOwner")
    quantity: Annotated[int, Field(le=10000, strict=True, ge=1)] = Field(description="The number of units of the specified MSKU that will be shipped.")
    __properties: ClassVar[List[str]] = ["expiration", "labelOwner", "manufacturingLotCode", "msku", "prepOwner", "quantity"]

    @field_validator('expiration')
    def expiration_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$", value):
            raise ValueError(r"must validate the regular expression /^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expiration": obj.get("expiration"),
            "labelOwner": obj.get("labelOwner"),
            "manufacturingLotCode": obj.get("manufacturingLotCode"),
            "msku": obj.get("msku"),
            "prepOwner": obj.get("prepOwner"),
            "quantity": obj.get("quantity")
        })
        return _obj


