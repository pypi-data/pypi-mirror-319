# coding: utf-8

"""
    Fulfillment Inbound v2024-03-20

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.item_label_page_type import ItemLabelPageType
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.label_print_type import LabelPrintType
from py_sp_api.generated.fulfillmentInbound_2024_03_20.models.msku_quantity import MskuQuantity
from typing import Optional, Set
from typing_extensions import Self

class CreateMarketplaceItemLabelsRequest(BaseModel):
    """
    The `createMarketplaceItemLabels` request.
    """ # noqa: E501
    height: Optional[Union[Annotated[float, Field(le=1E+2, strict=True, ge=25)], Annotated[int, Field(le=100, strict=True, ge=25)]]] = Field(default=None, description="The height of the item label.")
    label_type: LabelPrintType = Field(alias="labelType")
    locale_code: Optional[Annotated[str, Field(strict=True)]] = Field(default='en_US', description="The locale code constructed from ISO 639 language code and ISO 3166-1 alpha-2 standard of country codes separated by an underscore character.", alias="localeCode")
    marketplace_id: Annotated[str, Field(min_length=1, strict=True, max_length=20)] = Field(description="The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).", alias="marketplaceId")
    msku_quantities: Annotated[List[MskuQuantity], Field(min_length=1, max_length=100)] = Field(description="Represents the quantity of an MSKU to print item labels for.", alias="mskuQuantities")
    page_type: Optional[ItemLabelPageType] = Field(default=None, alias="pageType")
    width: Optional[Union[Annotated[float, Field(le=1E+2, strict=True, ge=25)], Annotated[int, Field(le=100, strict=True, ge=25)]]] = Field(default=None, description="The width of the item label.")
    __properties: ClassVar[List[str]] = ["height", "labelType", "localeCode", "marketplaceId", "mskuQuantities", "pageType", "width"]

    @field_validator('locale_code')
    def locale_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z]{2}_[A-Z]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[a-z]{2}_[A-Z]{2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateMarketplaceItemLabelsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in msku_quantities (list)
        _items = []
        if self.msku_quantities:
            for _item_msku_quantities in self.msku_quantities:
                if _item_msku_quantities:
                    _items.append(_item_msku_quantities.to_dict())
            _dict['mskuQuantities'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateMarketplaceItemLabelsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "height": obj.get("height"),
            "labelType": obj.get("labelType"),
            "localeCode": obj.get("localeCode") if obj.get("localeCode") is not None else 'en_US',
            "marketplaceId": obj.get("marketplaceId"),
            "mskuQuantities": [MskuQuantity.from_dict(_item) for _item in obj["mskuQuantities"]] if obj.get("mskuQuantities") is not None else None,
            "pageType": obj.get("pageType"),
            "width": obj.get("width")
        })
        return _obj


