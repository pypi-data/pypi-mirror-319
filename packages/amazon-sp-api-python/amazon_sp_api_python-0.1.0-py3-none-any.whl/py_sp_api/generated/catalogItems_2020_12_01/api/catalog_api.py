# coding: utf-8

"""
    Selling Partner API for Catalog Items

    The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, see the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2020-12-01-use-case-guide).

    The version of the OpenAPI document: 2020-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.catalogItems_2020_12_01.models.item import Item
from py_sp_api.generated.catalogItems_2020_12_01.models.item_search_results import ItemSearchResults

from py_sp_api.generated.catalogItems_2020_12_01.api_client import ApiClient, RequestSerialized
from py_sp_api.generated.catalogItems_2020_12_01.api_response import ApiResponse
from py_sp_api.generated.catalogItems_2020_12_01.rest import RESTResponseType


class CatalogApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_catalog_item(
        self,
        asin: Annotated[StrictStr, Field(description="The Amazon Standard Identification Number (ASIN) of the item.")],
        marketplace_ids: Annotated[List[StrictStr], Field(description="A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.")],
        included_data: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of data sets to include in the response. Default: summaries.")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Item:
        """get_catalog_item

        Retrieves details for an item in the Amazon catalog.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param asin: The Amazon Standard Identification Number (ASIN) of the item. (required)
        :type asin: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces. (required)
        :type marketplace_ids: List[str]
        :param included_data: A comma-delimited list of data sets to include in the response. Default: summaries.
        :type included_data: List[str]
        :param locale: Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.
        :type locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_catalog_item_serialize(
            asin=asin,
            marketplace_ids=marketplace_ids,
            included_data=included_data,
            locale=locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Item",
            '400': "ErrorList",
            '403': "ErrorList",
            '404': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_catalog_item_with_http_info(
        self,
        asin: Annotated[StrictStr, Field(description="The Amazon Standard Identification Number (ASIN) of the item.")],
        marketplace_ids: Annotated[List[StrictStr], Field(description="A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.")],
        included_data: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of data sets to include in the response. Default: summaries.")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Item]:
        """get_catalog_item

        Retrieves details for an item in the Amazon catalog.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param asin: The Amazon Standard Identification Number (ASIN) of the item. (required)
        :type asin: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces. (required)
        :type marketplace_ids: List[str]
        :param included_data: A comma-delimited list of data sets to include in the response. Default: summaries.
        :type included_data: List[str]
        :param locale: Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.
        :type locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_catalog_item_serialize(
            asin=asin,
            marketplace_ids=marketplace_ids,
            included_data=included_data,
            locale=locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Item",
            '400': "ErrorList",
            '403': "ErrorList",
            '404': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_catalog_item_without_preload_content(
        self,
        asin: Annotated[StrictStr, Field(description="The Amazon Standard Identification Number (ASIN) of the item.")],
        marketplace_ids: Annotated[List[StrictStr], Field(description="A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.")],
        included_data: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of data sets to include in the response. Default: summaries.")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_catalog_item

        Retrieves details for an item in the Amazon catalog.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param asin: The Amazon Standard Identification Number (ASIN) of the item. (required)
        :type asin: str
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces. (required)
        :type marketplace_ids: List[str]
        :param included_data: A comma-delimited list of data sets to include in the response. Default: summaries.
        :type included_data: List[str]
        :param locale: Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.
        :type locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_catalog_item_serialize(
            asin=asin,
            marketplace_ids=marketplace_ids,
            included_data=included_data,
            locale=locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Item",
            '400': "ErrorList",
            '403': "ErrorList",
            '404': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_catalog_item_serialize(
        self,
        asin,
        marketplace_ids,
        included_data,
        locale,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'marketplaceIds': 'csv',
            'includedData': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if asin is not None:
            _path_params['asin'] = asin
        # process the query parameters
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        if included_data is not None:
            
            _query_params.append(('includedData', included_data))
            
        if locale is not None:
            
            _query_params.append(('locale', locale))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/2020-12-01/items/{asin}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_catalog_items(
        self,
        keywords: Annotated[List[StrictStr], Field(description="A comma-delimited list of words or item identifiers to search the Amazon catalog for.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        included_data: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of data sets to include in the response. Default: summaries.")] = None,
        brand_names: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of brand names to limit the search to.")] = None,
        classification_ids: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of classification identifiers to limit the search to.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=20, strict=True)]], Field(description="Number of results to be returned per page.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="A token to fetch a certain page when there are multiple pages worth of results.")] = None,
        keywords_locale: Annotated[Optional[StrictStr], Field(description="The language the keywords are provided in. Defaults to the primary locale of the marketplace.")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ItemSearchResults:
        """search_catalog_items

        Search for and return a list of Amazon catalog items and associated information.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param keywords: A comma-delimited list of words or item identifiers to search the Amazon catalog for. (required)
        :type keywords: List[str]
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param included_data: A comma-delimited list of data sets to include in the response. Default: summaries.
        :type included_data: List[str]
        :param brand_names: A comma-delimited list of brand names to limit the search to.
        :type brand_names: List[str]
        :param classification_ids: A comma-delimited list of classification identifiers to limit the search to.
        :type classification_ids: List[str]
        :param page_size: Number of results to be returned per page.
        :type page_size: int
        :param page_token: A token to fetch a certain page when there are multiple pages worth of results.
        :type page_token: str
        :param keywords_locale: The language the keywords are provided in. Defaults to the primary locale of the marketplace.
        :type keywords_locale: str
        :param locale: Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.
        :type locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_catalog_items_serialize(
            keywords=keywords,
            marketplace_ids=marketplace_ids,
            included_data=included_data,
            brand_names=brand_names,
            classification_ids=classification_ids,
            page_size=page_size,
            page_token=page_token,
            keywords_locale=keywords_locale,
            locale=locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemSearchResults",
            '400': "ErrorList",
            '403': "ErrorList",
            '404': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_catalog_items_with_http_info(
        self,
        keywords: Annotated[List[StrictStr], Field(description="A comma-delimited list of words or item identifiers to search the Amazon catalog for.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        included_data: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of data sets to include in the response. Default: summaries.")] = None,
        brand_names: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of brand names to limit the search to.")] = None,
        classification_ids: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of classification identifiers to limit the search to.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=20, strict=True)]], Field(description="Number of results to be returned per page.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="A token to fetch a certain page when there are multiple pages worth of results.")] = None,
        keywords_locale: Annotated[Optional[StrictStr], Field(description="The language the keywords are provided in. Defaults to the primary locale of the marketplace.")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ItemSearchResults]:
        """search_catalog_items

        Search for and return a list of Amazon catalog items and associated information.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param keywords: A comma-delimited list of words or item identifiers to search the Amazon catalog for. (required)
        :type keywords: List[str]
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param included_data: A comma-delimited list of data sets to include in the response. Default: summaries.
        :type included_data: List[str]
        :param brand_names: A comma-delimited list of brand names to limit the search to.
        :type brand_names: List[str]
        :param classification_ids: A comma-delimited list of classification identifiers to limit the search to.
        :type classification_ids: List[str]
        :param page_size: Number of results to be returned per page.
        :type page_size: int
        :param page_token: A token to fetch a certain page when there are multiple pages worth of results.
        :type page_token: str
        :param keywords_locale: The language the keywords are provided in. Defaults to the primary locale of the marketplace.
        :type keywords_locale: str
        :param locale: Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.
        :type locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_catalog_items_serialize(
            keywords=keywords,
            marketplace_ids=marketplace_ids,
            included_data=included_data,
            brand_names=brand_names,
            classification_ids=classification_ids,
            page_size=page_size,
            page_token=page_token,
            keywords_locale=keywords_locale,
            locale=locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemSearchResults",
            '400': "ErrorList",
            '403': "ErrorList",
            '404': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_catalog_items_without_preload_content(
        self,
        keywords: Annotated[List[StrictStr], Field(description="A comma-delimited list of words or item identifiers to search the Amazon catalog for.")],
        marketplace_ids: Annotated[List[StrictStr], Field(max_length=1, description="A comma-delimited list of Amazon marketplace identifiers for the request.")],
        included_data: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of data sets to include in the response. Default: summaries.")] = None,
        brand_names: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of brand names to limit the search to.")] = None,
        classification_ids: Annotated[Optional[List[StrictStr]], Field(description="A comma-delimited list of classification identifiers to limit the search to.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=20, strict=True)]], Field(description="Number of results to be returned per page.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="A token to fetch a certain page when there are multiple pages worth of results.")] = None,
        keywords_locale: Annotated[Optional[StrictStr], Field(description="The language the keywords are provided in. Defaults to the primary locale of the marketplace.")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """search_catalog_items

        Search for and return a list of Amazon catalog items and associated information.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).

        :param keywords: A comma-delimited list of words or item identifiers to search the Amazon catalog for. (required)
        :type keywords: List[str]
        :param marketplace_ids: A comma-delimited list of Amazon marketplace identifiers for the request. (required)
        :type marketplace_ids: List[str]
        :param included_data: A comma-delimited list of data sets to include in the response. Default: summaries.
        :type included_data: List[str]
        :param brand_names: A comma-delimited list of brand names to limit the search to.
        :type brand_names: List[str]
        :param classification_ids: A comma-delimited list of classification identifiers to limit the search to.
        :type classification_ids: List[str]
        :param page_size: Number of results to be returned per page.
        :type page_size: int
        :param page_token: A token to fetch a certain page when there are multiple pages worth of results.
        :type page_token: str
        :param keywords_locale: The language the keywords are provided in. Defaults to the primary locale of the marketplace.
        :type keywords_locale: str
        :param locale: Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.
        :type locale: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_catalog_items_serialize(
            keywords=keywords,
            marketplace_ids=marketplace_ids,
            included_data=included_data,
            brand_names=brand_names,
            classification_ids=classification_ids,
            page_size=page_size,
            page_token=page_token,
            keywords_locale=keywords_locale,
            locale=locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemSearchResults",
            '400': "ErrorList",
            '403': "ErrorList",
            '404': "ErrorList",
            '413': "ErrorList",
            '415': "ErrorList",
            '429': "ErrorList",
            '500': "ErrorList",
            '503': "ErrorList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_catalog_items_serialize(
        self,
        keywords,
        marketplace_ids,
        included_data,
        brand_names,
        classification_ids,
        page_size,
        page_token,
        keywords_locale,
        locale,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'keywords': 'csv',
            'marketplaceIds': 'csv',
            'includedData': 'csv',
            'brandNames': 'csv',
            'classificationIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if keywords is not None:
            
            _query_params.append(('keywords', keywords))
            
        if marketplace_ids is not None:
            
            _query_params.append(('marketplaceIds', marketplace_ids))
            
        if included_data is not None:
            
            _query_params.append(('includedData', included_data))
            
        if brand_names is not None:
            
            _query_params.append(('brandNames', brand_names))
            
        if classification_ids is not None:
            
            _query_params.append(('classificationIds', classification_ids))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_token is not None:
            
            _query_params.append(('pageToken', page_token))
            
        if keywords_locale is not None:
            
            _query_params.append(('keywordsLocale', keywords_locale))
            
        if locale is not None:
            
            _query_params.append(('locale', locale))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/2020-12-01/items',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


