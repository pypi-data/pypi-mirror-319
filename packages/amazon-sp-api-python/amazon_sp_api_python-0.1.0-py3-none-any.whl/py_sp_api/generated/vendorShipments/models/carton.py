# coding: utf-8

"""
    Selling Partner API for Retail Procurement Shipments

    The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.vendorShipments.models.container_identification import ContainerIdentification
from py_sp_api.generated.vendorShipments.models.container_item import ContainerItem
from py_sp_api.generated.vendorShipments.models.dimensions import Dimensions
from py_sp_api.generated.vendorShipments.models.weight import Weight
from typing import Optional, Set
from typing_extensions import Self

class Carton(BaseModel):
    """
    Details of the carton/package being shipped.
    """ # noqa: E501
    carton_identifiers: Optional[List[ContainerIdentification]] = Field(default=None, description="A list of carton identifiers.", alias="cartonIdentifiers")
    carton_sequence_number: StrictStr = Field(description="Carton sequence number for the carton. The first carton will be 001, the second 002, and so on. This number is used as a reference to refer to this carton from the pallet level.", alias="cartonSequenceNumber")
    dimensions: Optional[Dimensions] = None
    weight: Optional[Weight] = None
    tracking_number: Optional[StrictStr] = Field(default=None, description="This is required to be provided for every carton in the small parcel shipments.", alias="trackingNumber")
    items: List[ContainerItem] = Field(description="A list of container item details.")
    __properties: ClassVar[List[str]] = ["cartonIdentifiers", "cartonSequenceNumber", "dimensions", "weight", "trackingNumber", "items"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Carton from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in carton_identifiers (list)
        _items = []
        if self.carton_identifiers:
            for _item_carton_identifiers in self.carton_identifiers:
                if _item_carton_identifiers:
                    _items.append(_item_carton_identifiers.to_dict())
            _dict['cartonIdentifiers'] = _items
        # override the default output from pydantic by calling `to_dict()` of dimensions
        if self.dimensions:
            _dict['dimensions'] = self.dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weight
        if self.weight:
            _dict['weight'] = self.weight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Carton from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cartonIdentifiers": [ContainerIdentification.from_dict(_item) for _item in obj["cartonIdentifiers"]] if obj.get("cartonIdentifiers") is not None else None,
            "cartonSequenceNumber": obj.get("cartonSequenceNumber"),
            "dimensions": Dimensions.from_dict(obj["dimensions"]) if obj.get("dimensions") is not None else None,
            "weight": Weight.from_dict(obj["weight"]) if obj.get("weight") is not None else None,
            "trackingNumber": obj.get("trackingNumber"),
            "items": [ContainerItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None
        })
        return _obj


