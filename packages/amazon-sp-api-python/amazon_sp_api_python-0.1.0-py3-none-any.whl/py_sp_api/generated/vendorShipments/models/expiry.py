# coding: utf-8

"""
    Selling Partner API for Retail Procurement Shipments

    The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.vendorShipments.models.duration import Duration
from typing import Optional, Set
from typing_extensions import Self

class Expiry(BaseModel):
    """
    Expiry refers to the collection of dates required  for certain items. These could be either expiryDate or mfgDate and expiryAfterDuration. These are mandatory for perishable items.
    """ # noqa: E501
    manufacturer_date: Optional[datetime] = Field(default=None, description="Production, packaging or assembly date determined by the manufacturer. Its meaning is determined based on the trade item context.", alias="manufacturerDate")
    expiry_date: Optional[datetime] = Field(default=None, description="The date that determines the limit of consumption or use of a product. Its meaning is determined based on the trade item context.", alias="expiryDate")
    expiry_after_duration: Optional[Duration] = Field(default=None, alias="expiryAfterDuration")
    __properties: ClassVar[List[str]] = ["manufacturerDate", "expiryDate", "expiryAfterDuration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Expiry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of expiry_after_duration
        if self.expiry_after_duration:
            _dict['expiryAfterDuration'] = self.expiry_after_duration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Expiry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "manufacturerDate": obj.get("manufacturerDate"),
            "expiryDate": obj.get("expiryDate"),
            "expiryAfterDuration": Duration.from_dict(obj["expiryAfterDuration"]) if obj.get("expiryAfterDuration") is not None else None
        })
        return _obj


