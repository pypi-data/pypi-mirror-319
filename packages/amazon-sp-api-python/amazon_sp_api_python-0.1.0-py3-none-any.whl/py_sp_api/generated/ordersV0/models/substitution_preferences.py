# coding: utf-8

"""
    Orders v0

    Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.ordersV0.models.substitution_option import SubstitutionOption
from typing import Optional, Set
from typing_extensions import Self

class SubstitutionPreferences(BaseModel):
    """
    Substitution preferences for an order item.
    """ # noqa: E501
    substitution_type: StrictStr = Field(description="The type of substitution that these preferences represent.", alias="SubstitutionType")
    substitution_options: Optional[List[SubstitutionOption]] = Field(default=None, description="A collection of substitution options.", alias="SubstitutionOptions")
    __properties: ClassVar[List[str]] = ["SubstitutionType", "SubstitutionOptions"]

    @field_validator('substitution_type')
    def substitution_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CUSTOMER_PREFERENCE', 'AMAZON_RECOMMENDED', 'DO_NOT_SUBSTITUTE']):
            raise ValueError("must be one of enum values ('CUSTOMER_PREFERENCE', 'AMAZON_RECOMMENDED', 'DO_NOT_SUBSTITUTE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubstitutionPreferences from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in substitution_options (list)
        _items = []
        if self.substitution_options:
            for _item_substitution_options in self.substitution_options:
                if _item_substitution_options:
                    _items.append(_item_substitution_options.to_dict())
            _dict['SubstitutionOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubstitutionPreferences from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "SubstitutionType": obj.get("SubstitutionType"),
            "SubstitutionOptions": [SubstitutionOption.from_dict(_item) for _item in obj["SubstitutionOptions"]] if obj.get("SubstitutionOptions") is not None else None
        })
        return _obj


