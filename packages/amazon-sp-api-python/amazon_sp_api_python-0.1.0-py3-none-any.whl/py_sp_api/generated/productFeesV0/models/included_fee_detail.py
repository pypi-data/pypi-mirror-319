# coding: utf-8

"""
    Selling Partner API for Product Fees

    The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.productFeesV0.models.money_type import MoneyType
from typing import Optional, Set
from typing_extensions import Self

class IncludedFeeDetail(BaseModel):
    """
    The type of fee, fee amount, and other details.
    """ # noqa: E501
    fee_type: StrictStr = Field(description="The type of fee charged to a seller.", alias="FeeType")
    fee_amount: MoneyType = Field(alias="FeeAmount")
    fee_promotion: Optional[MoneyType] = Field(default=None, alias="FeePromotion")
    tax_amount: Optional[MoneyType] = Field(default=None, alias="TaxAmount")
    final_fee: MoneyType = Field(alias="FinalFee")
    __properties: ClassVar[List[str]] = ["FeeType", "FeeAmount", "FeePromotion", "TaxAmount", "FinalFee"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IncludedFeeDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fee_amount
        if self.fee_amount:
            _dict['FeeAmount'] = self.fee_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fee_promotion
        if self.fee_promotion:
            _dict['FeePromotion'] = self.fee_promotion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_amount
        if self.tax_amount:
            _dict['TaxAmount'] = self.tax_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of final_fee
        if self.final_fee:
            _dict['FinalFee'] = self.final_fee.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IncludedFeeDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FeeType": obj.get("FeeType"),
            "FeeAmount": MoneyType.from_dict(obj["FeeAmount"]) if obj.get("FeeAmount") is not None else None,
            "FeePromotion": MoneyType.from_dict(obj["FeePromotion"]) if obj.get("FeePromotion") is not None else None,
            "TaxAmount": MoneyType.from_dict(obj["TaxAmount"]) if obj.get("TaxAmount") is not None else None,
            "FinalFee": MoneyType.from_dict(obj["FinalFee"]) if obj.get("FinalFee") is not None else None
        })
        return _obj


