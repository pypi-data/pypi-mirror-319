# coding: utf-8

"""
    Selling Partner API for Pricing

    The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.productPricingV0.models.condition_type import ConditionType
from py_sp_api.generated.productPricingV0.models.item_identifier import ItemIdentifier
from py_sp_api.generated.productPricingV0.models.offer_detail import OfferDetail
from py_sp_api.generated.productPricingV0.models.summary import Summary
from typing import Optional, Set
from typing_extensions import Self

class GetOffersResult(BaseModel):
    """
    GetOffersResult
    """ # noqa: E501
    marketplace_id: StrictStr = Field(description="A marketplace identifier.", alias="MarketplaceID")
    asin: Optional[StrictStr] = Field(default=None, description="The Amazon Standard Identification Number (ASIN) of the item.", alias="ASIN")
    sku: Optional[StrictStr] = Field(default=None, description="The stock keeping unit (SKU) of the item.", alias="SKU")
    item_condition: ConditionType = Field(alias="ItemCondition")
    status: StrictStr = Field(description="The status of the operation.")
    identifier: ItemIdentifier = Field(alias="Identifier")
    summary: Summary = Field(alias="Summary")
    offers: Annotated[List[OfferDetail], Field(max_length=20)] = Field(alias="Offers")
    __properties: ClassVar[List[str]] = ["MarketplaceID", "ASIN", "SKU", "ItemCondition", "status", "Identifier", "Summary", "Offers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetOffersResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['Identifier'] = self.identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['Summary'] = self.summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in offers (list)
        _items = []
        if self.offers:
            for _item_offers in self.offers:
                if _item_offers:
                    _items.append(_item_offers.to_dict())
            _dict['Offers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetOffersResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "MarketplaceID": obj.get("MarketplaceID"),
            "ASIN": obj.get("ASIN"),
            "SKU": obj.get("SKU"),
            "ItemCondition": obj.get("ItemCondition"),
            "status": obj.get("status"),
            "Identifier": ItemIdentifier.from_dict(obj["Identifier"]) if obj.get("Identifier") is not None else None,
            "Summary": Summary.from_dict(obj["Summary"]) if obj.get("Summary") is not None else None,
            "Offers": [OfferDetail.from_dict(_item) for _item in obj["Offers"]] if obj.get("Offers") is not None else None
        })
        return _obj


