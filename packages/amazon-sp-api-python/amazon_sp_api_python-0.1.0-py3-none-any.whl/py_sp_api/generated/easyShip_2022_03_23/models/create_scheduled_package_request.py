# coding: utf-8

"""
    Selling Partner API for Easy Ship

    The Selling Partner API for Easy Ship helps you build applications that help sellers manage and ship Amazon Easy Ship orders.  Your Easy Ship applications can:  * Get available time slots for packages to be scheduled for delivery.  * Schedule, reschedule, and cancel Easy Ship orders.  * Print labels, invoices, and warranties.  See the [Marketplace Support Table](doc:easyship-api-v2022-03-23-use-case-guide#marketplace-support-table) for the differences in Easy Ship operations by marketplace.

    The version of the OpenAPI document: 2022-03-23
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from py_sp_api.generated.easyShip_2022_03_23.models.package_details import PackageDetails
from typing import Optional, Set
from typing_extensions import Self

class CreateScheduledPackageRequest(BaseModel):
    """
    The request schema for the `createScheduledPackage` operation.
    """ # noqa: E501
    amazon_order_id: StrictStr = Field(description="An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship.", alias="amazonOrderId")
    marketplace_id: Annotated[str, Field(min_length=1, strict=True, max_length=255)] = Field(description="A string of up to 255 characters.", alias="marketplaceId")
    package_details: PackageDetails = Field(alias="packageDetails")
    __properties: ClassVar[List[str]] = ["amazonOrderId", "marketplaceId", "packageDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateScheduledPackageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of package_details
        if self.package_details:
            _dict['packageDetails'] = self.package_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateScheduledPackageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amazonOrderId": obj.get("amazonOrderId"),
            "marketplaceId": obj.get("marketplaceId"),
            "packageDetails": PackageDetails.from_dict(obj["packageDetails"]) if obj.get("packageDetails") is not None else None
        })
        return _obj


