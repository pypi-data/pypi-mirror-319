# coding: utf-8

"""
    Selling Partner API for Shipment Invoicing

    The Selling Partner API for Shipment Invoicing helps you programmatically retrieve shipment invoice information in the Brazil marketplace for a selling partner’s Fulfillment by Amazon (FBA) orders.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.shipmentInvoicingV0.models.address import Address
from py_sp_api.generated.shipmentInvoicingV0.models.buyer_tax_info import BuyerTaxInfo
from py_sp_api.generated.shipmentInvoicingV0.models.marketplace_tax_info import MarketplaceTaxInfo
from py_sp_api.generated.shipmentInvoicingV0.models.shipment_item import ShipmentItem
from typing import Optional, Set
from typing_extensions import Self

class ShipmentDetail(BaseModel):
    """
    The information required by a selling partner to issue a shipment invoice.
    """ # noqa: E501
    warehouse_id: Optional[StrictStr] = Field(default=None, description="The Amazon-defined identifier for the warehouse.", alias="WarehouseId")
    amazon_order_id: Optional[StrictStr] = Field(default=None, description="The Amazon-defined identifier for the order.", alias="AmazonOrderId")
    amazon_shipment_id: Optional[StrictStr] = Field(default=None, description="The Amazon-defined identifier for the shipment.", alias="AmazonShipmentId")
    purchase_date: Optional[datetime] = Field(default=None, description="The date and time when the order was created.", alias="PurchaseDate")
    shipping_address: Optional[Address] = Field(default=None, alias="ShippingAddress")
    payment_method_details: Optional[List[StrictStr]] = Field(default=None, description="The list of payment method details.", alias="PaymentMethodDetails")
    marketplace_id: Optional[StrictStr] = Field(default=None, description="The identifier for the marketplace where the order was placed.", alias="MarketplaceId")
    seller_id: Optional[StrictStr] = Field(default=None, description="The seller identifier.", alias="SellerId")
    buyer_name: Optional[StrictStr] = Field(default=None, description="The name of the buyer.", alias="BuyerName")
    buyer_county: Optional[StrictStr] = Field(default=None, description="The county of the buyer.", alias="BuyerCounty")
    buyer_tax_info: Optional[BuyerTaxInfo] = Field(default=None, alias="BuyerTaxInfo")
    marketplace_tax_info: Optional[MarketplaceTaxInfo] = Field(default=None, alias="MarketplaceTaxInfo")
    seller_display_name: Optional[StrictStr] = Field(default=None, description="The seller’s friendly name registered in the marketplace.", alias="SellerDisplayName")
    shipment_items: Optional[List[ShipmentItem]] = Field(default=None, description="A list of shipment items.", alias="ShipmentItems")
    __properties: ClassVar[List[str]] = ["WarehouseId", "AmazonOrderId", "AmazonShipmentId", "PurchaseDate", "ShippingAddress", "PaymentMethodDetails", "MarketplaceId", "SellerId", "BuyerName", "BuyerCounty", "BuyerTaxInfo", "MarketplaceTaxInfo", "SellerDisplayName", "ShipmentItems"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShipmentDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['ShippingAddress'] = self.shipping_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of buyer_tax_info
        if self.buyer_tax_info:
            _dict['BuyerTaxInfo'] = self.buyer_tax_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of marketplace_tax_info
        if self.marketplace_tax_info:
            _dict['MarketplaceTaxInfo'] = self.marketplace_tax_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_items (list)
        _items = []
        if self.shipment_items:
            for _item_shipment_items in self.shipment_items:
                if _item_shipment_items:
                    _items.append(_item_shipment_items.to_dict())
            _dict['ShipmentItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShipmentDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "WarehouseId": obj.get("WarehouseId"),
            "AmazonOrderId": obj.get("AmazonOrderId"),
            "AmazonShipmentId": obj.get("AmazonShipmentId"),
            "PurchaseDate": obj.get("PurchaseDate"),
            "ShippingAddress": Address.from_dict(obj["ShippingAddress"]) if obj.get("ShippingAddress") is not None else None,
            "PaymentMethodDetails": obj.get("PaymentMethodDetails"),
            "MarketplaceId": obj.get("MarketplaceId"),
            "SellerId": obj.get("SellerId"),
            "BuyerName": obj.get("BuyerName"),
            "BuyerCounty": obj.get("BuyerCounty"),
            "BuyerTaxInfo": BuyerTaxInfo.from_dict(obj["BuyerTaxInfo"]) if obj.get("BuyerTaxInfo") is not None else None,
            "MarketplaceTaxInfo": MarketplaceTaxInfo.from_dict(obj["MarketplaceTaxInfo"]) if obj.get("MarketplaceTaxInfo") is not None else None,
            "SellerDisplayName": obj.get("SellerDisplayName"),
            "ShipmentItems": [ShipmentItem.from_dict(_item) for _item in obj["ShipmentItems"]] if obj.get("ShipmentItems") is not None else None
        })
        return _obj


