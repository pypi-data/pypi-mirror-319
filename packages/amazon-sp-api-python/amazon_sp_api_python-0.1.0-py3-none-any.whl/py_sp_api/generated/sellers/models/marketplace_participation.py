# coding: utf-8

"""
    The Selling Partner API for Sellers

    The Selling Partner API for Sellers lets you retrieve information on behalf of sellers about their seller account, such as the marketplaces they participate in. Along with listing the marketplaces that a seller can sell in, the API also provides additional information about the marketplace such as the default language and the default currency. The API also provides seller-specific information such as whether the seller has suspended listings in that marketplace.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from py_sp_api.generated.sellers.models.marketplace import Marketplace
from py_sp_api.generated.sellers.models.participation import Participation
from typing import Optional, Set
from typing_extensions import Self

class MarketplaceParticipation(BaseModel):
    """
    MarketplaceParticipation
    """ # noqa: E501
    marketplace: Marketplace
    participation: Participation
    store_name: StrictStr = Field(description="The name of the seller's store as displayed in the marketplace.", alias="storeName")
    __properties: ClassVar[List[str]] = ["marketplace", "participation", "storeName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarketplaceParticipation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of marketplace
        if self.marketplace:
            _dict['marketplace'] = self.marketplace.to_dict()
        # override the default output from pydantic by calling `to_dict()` of participation
        if self.participation:
            _dict['participation'] = self.participation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarketplaceParticipation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "marketplace": Marketplace.from_dict(obj["marketplace"]) if obj.get("marketplace") is not None else None,
            "participation": Participation.from_dict(obj["participation"]) if obj.get("participation") is not None else None,
            "storeName": obj.get("storeName")
        })
        return _obj


