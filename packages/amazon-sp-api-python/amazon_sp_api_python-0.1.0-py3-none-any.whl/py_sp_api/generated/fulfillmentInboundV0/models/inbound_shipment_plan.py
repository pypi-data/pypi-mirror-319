# coding: utf-8

"""
    Selling Partner API for Fulfillment Inbound

    The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.fulfillmentInboundV0.models.address import Address
from py_sp_api.generated.fulfillmentInboundV0.models.box_contents_fee_details import BoxContentsFeeDetails
from py_sp_api.generated.fulfillmentInboundV0.models.inbound_shipment_plan_item import InboundShipmentPlanItem
from py_sp_api.generated.fulfillmentInboundV0.models.label_prep_type import LabelPrepType
from typing import Optional, Set
from typing_extensions import Self

class InboundShipmentPlan(BaseModel):
    """
    Inbound shipment information used to create an inbound shipment. Returned by the createInboundShipmentPlan operation.
    """ # noqa: E501
    shipment_id: StrictStr = Field(description="A shipment identifier originally returned by the createInboundShipmentPlan operation.", alias="ShipmentId")
    destination_fulfillment_center_id: StrictStr = Field(description="An Amazon fulfillment center identifier created by Amazon.", alias="DestinationFulfillmentCenterId")
    ship_to_address: Address = Field(alias="ShipToAddress")
    label_prep_type: LabelPrepType = Field(alias="LabelPrepType")
    items: List[InboundShipmentPlanItem] = Field(description="A list of inbound shipment plan item information.", alias="Items")
    estimated_box_contents_fee: Optional[BoxContentsFeeDetails] = Field(default=None, alias="EstimatedBoxContentsFee")
    __properties: ClassVar[List[str]] = ["ShipmentId", "DestinationFulfillmentCenterId", "ShipToAddress", "LabelPrepType", "Items", "EstimatedBoxContentsFee"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InboundShipmentPlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ship_to_address
        if self.ship_to_address:
            _dict['ShipToAddress'] = self.ship_to_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['Items'] = _items
        # override the default output from pydantic by calling `to_dict()` of estimated_box_contents_fee
        if self.estimated_box_contents_fee:
            _dict['EstimatedBoxContentsFee'] = self.estimated_box_contents_fee.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InboundShipmentPlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ShipmentId": obj.get("ShipmentId"),
            "DestinationFulfillmentCenterId": obj.get("DestinationFulfillmentCenterId"),
            "ShipToAddress": Address.from_dict(obj["ShipToAddress"]) if obj.get("ShipToAddress") is not None else None,
            "LabelPrepType": obj.get("LabelPrepType"),
            "Items": [InboundShipmentPlanItem.from_dict(_item) for _item in obj["Items"]] if obj.get("Items") is not None else None,
            "EstimatedBoxContentsFee": BoxContentsFeeDetails.from_dict(obj["EstimatedBoxContentsFee"]) if obj.get("EstimatedBoxContentsFee") is not None else None
        })
        return _obj


