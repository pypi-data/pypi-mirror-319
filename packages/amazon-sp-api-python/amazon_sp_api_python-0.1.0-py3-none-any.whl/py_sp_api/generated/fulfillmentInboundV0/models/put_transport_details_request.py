# coding: utf-8

"""
    Selling Partner API for Fulfillment Inbound

    The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List
from py_sp_api.generated.fulfillmentInboundV0.models.shipment_type import ShipmentType
from py_sp_api.generated.fulfillmentInboundV0.models.transport_detail_input import TransportDetailInput
from typing import Optional, Set
from typing_extensions import Self

class PutTransportDetailsRequest(BaseModel):
    """
    The request schema for a putTransportDetails operation.
    """ # noqa: E501
    is_partnered: StrictBool = Field(description="Indicates whether a putTransportDetails request is for an Amazon-partnered carrier.", alias="IsPartnered")
    shipment_type: ShipmentType = Field(alias="ShipmentType")
    transport_details: TransportDetailInput = Field(alias="TransportDetails")
    __properties: ClassVar[List[str]] = ["IsPartnered", "ShipmentType", "TransportDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PutTransportDetailsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of transport_details
        if self.transport_details:
            _dict['TransportDetails'] = self.transport_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PutTransportDetailsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "IsPartnered": obj.get("IsPartnered"),
            "ShipmentType": obj.get("ShipmentType"),
            "TransportDetails": TransportDetailInput.from_dict(obj["TransportDetails"]) if obj.get("TransportDetails") is not None else None
        })
        return _obj


