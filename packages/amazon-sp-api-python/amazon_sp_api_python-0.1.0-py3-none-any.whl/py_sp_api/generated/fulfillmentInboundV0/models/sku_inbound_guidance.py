# coding: utf-8

"""
    Selling Partner API for Fulfillment Inbound

    The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.fulfillmentInboundV0.models.guidance_reason import GuidanceReason
from py_sp_api.generated.fulfillmentInboundV0.models.inbound_guidance import InboundGuidance
from typing import Optional, Set
from typing_extensions import Self

class SKUInboundGuidance(BaseModel):
    """
    Reasons why a given seller SKU is not recommended for shipment to Amazon's fulfillment network.
    """ # noqa: E501
    seller_sku: StrictStr = Field(description="The seller SKU of the item.", alias="SellerSKU")
    asin: StrictStr = Field(description="The Amazon Standard Identification Number (ASIN) of the item.", alias="ASIN")
    inbound_guidance: InboundGuidance = Field(alias="InboundGuidance")
    guidance_reason_list: Optional[List[GuidanceReason]] = Field(default=None, description="A list of inbound guidance reason information.", alias="GuidanceReasonList")
    __properties: ClassVar[List[str]] = ["SellerSKU", "ASIN", "InboundGuidance", "GuidanceReasonList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SKUInboundGuidance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SKUInboundGuidance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "SellerSKU": obj.get("SellerSKU"),
            "ASIN": obj.get("ASIN"),
            "InboundGuidance": obj.get("InboundGuidance"),
            "GuidanceReasonList": obj.get("GuidanceReasonList")
        })
        return _obj


