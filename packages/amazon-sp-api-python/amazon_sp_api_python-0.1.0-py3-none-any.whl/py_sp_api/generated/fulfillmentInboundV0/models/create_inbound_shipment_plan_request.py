# coding: utf-8

"""
    Selling Partner API for Fulfillment Inbound

    The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.fulfillmentInboundV0.models.address import Address
from py_sp_api.generated.fulfillmentInboundV0.models.inbound_shipment_plan_request_item import InboundShipmentPlanRequestItem
from py_sp_api.generated.fulfillmentInboundV0.models.label_prep_preference import LabelPrepPreference
from typing import Optional, Set
from typing_extensions import Self

class CreateInboundShipmentPlanRequest(BaseModel):
    """
    The request schema for the createInboundShipmentPlan operation.
    """ # noqa: E501
    ship_from_address: Address = Field(alias="ShipFromAddress")
    label_prep_preference: LabelPrepPreference = Field(alias="LabelPrepPreference")
    ship_to_country_code: Optional[StrictStr] = Field(default=None, description="The two-character country code for the country where the inbound shipment is to be sent.  Note: Not required. Specifying both ShipToCountryCode and ShipToCountrySubdivisionCode returns an error.   Values:   ShipToCountryCode values for North America:  * CA – Canada  * MX - Mexico  * US - United States  ShipToCountryCode values for MCI sellers in Europe:  * DE – Germany  * ES – Spain  * FR – France  * GB – United Kingdom  * IT – Italy  Default: The country code for the seller's home marketplace.", alias="ShipToCountryCode")
    ship_to_country_subdivision_code: Optional[StrictStr] = Field(default=None, description="The two-character country code, followed by a dash and then up to three characters that represent the subdivision of the country where the inbound shipment is to be sent. For example, \"IN-MH\". In full ISO 3166-2 format.  Note: Not required. Specifying both ShipToCountryCode and ShipToCountrySubdivisionCode returns an error.", alias="ShipToCountrySubdivisionCode")
    inbound_shipment_plan_request_items: List[InboundShipmentPlanRequestItem] = Field(description="List of inbound shipment plan requests", alias="InboundShipmentPlanRequestItems")
    __properties: ClassVar[List[str]] = ["ShipFromAddress", "LabelPrepPreference", "ShipToCountryCode", "ShipToCountrySubdivisionCode", "InboundShipmentPlanRequestItems"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateInboundShipmentPlanRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ship_from_address
        if self.ship_from_address:
            _dict['ShipFromAddress'] = self.ship_from_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in inbound_shipment_plan_request_items (list)
        _items = []
        if self.inbound_shipment_plan_request_items:
            for _item_inbound_shipment_plan_request_items in self.inbound_shipment_plan_request_items:
                if _item_inbound_shipment_plan_request_items:
                    _items.append(_item_inbound_shipment_plan_request_items.to_dict())
            _dict['InboundShipmentPlanRequestItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateInboundShipmentPlanRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ShipFromAddress": Address.from_dict(obj["ShipFromAddress"]) if obj.get("ShipFromAddress") is not None else None,
            "LabelPrepPreference": obj.get("LabelPrepPreference"),
            "ShipToCountryCode": obj.get("ShipToCountryCode"),
            "ShipToCountrySubdivisionCode": obj.get("ShipToCountrySubdivisionCode"),
            "InboundShipmentPlanRequestItems": [InboundShipmentPlanRequestItem.from_dict(_item) for _item in obj["InboundShipmentPlanRequestItems"]] if obj.get("InboundShipmentPlanRequestItems") is not None else None
        })
        return _obj


