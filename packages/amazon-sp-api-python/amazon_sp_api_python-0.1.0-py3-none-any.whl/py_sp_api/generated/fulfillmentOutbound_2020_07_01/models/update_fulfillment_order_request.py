# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.address import Address
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.feature_settings import FeatureSettings
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.fulfillment_action import FulfillmentAction
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.fulfillment_policy import FulfillmentPolicy
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.shipping_speed_category import ShippingSpeedCategory
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.update_fulfillment_order_item import UpdateFulfillmentOrderItem
from typing import Optional, Set
from typing_extensions import Self

class UpdateFulfillmentOrderRequest(BaseModel):
    """
    The request body schema for the `updateFulfillmentOrder` operation.
    """ # noqa: E501
    marketplace_id: Optional[StrictStr] = Field(default=None, description="The marketplace the fulfillment order is placed against.", alias="marketplaceId")
    displayable_order_id: Optional[Annotated[str, Field(strict=True, max_length=40)]] = Field(default=None, description="A fulfillment order identifier that the seller creates. This value displays as the order identifier in recipient-facing materials such as the outbound shipment packing slip. The value of `DisplayableOrderId` should match the order identifier that the seller provides to the recipient. The seller can use the `SellerFulfillmentOrderId` for this value or they can specify an alternate value if they want the recipient to reference an alternate order identifier.", alias="displayableOrderId")
    displayable_order_date: Optional[datetime] = Field(default=None, description="Date timestamp", alias="displayableOrderDate")
    displayable_order_comment: Optional[Annotated[str, Field(strict=True, max_length=750)]] = Field(default=None, description="Order-specific text that appears in recipient-facing materials such as the outbound shipment packing slip.", alias="displayableOrderComment")
    shipping_speed_category: Optional[ShippingSpeedCategory] = Field(default=None, alias="shippingSpeedCategory")
    destination_address: Optional[Address] = Field(default=None, alias="destinationAddress")
    fulfillment_action: Optional[FulfillmentAction] = Field(default=None, alias="fulfillmentAction")
    fulfillment_policy: Optional[FulfillmentPolicy] = Field(default=None, alias="fulfillmentPolicy")
    ship_from_country_code: Optional[StrictStr] = Field(default=None, description="The two-character country code for the country from which the fulfillment order ships. Must be in ISO 3166-1 alpha-2 format.", alias="shipFromCountryCode")
    notification_emails: Optional[List[Annotated[str, Field(strict=True, max_length=64)]]] = Field(default=None, description="A list of email addresses that the seller provides that are used by Amazon to send ship-complete notifications to recipients on behalf of the seller.", alias="notificationEmails")
    feature_constraints: Optional[List[FeatureSettings]] = Field(default=None, description="A list of features and their fulfillment policies to apply to the order.", alias="featureConstraints")
    items: Optional[List[UpdateFulfillmentOrderItem]] = Field(default=None, description="An array of fulfillment order item information for updating a fulfillment order.")
    __properties: ClassVar[List[str]] = ["marketplaceId", "displayableOrderId", "displayableOrderDate", "displayableOrderComment", "shippingSpeedCategory", "destinationAddress", "fulfillmentAction", "fulfillmentPolicy", "shipFromCountryCode", "notificationEmails", "featureConstraints", "items"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateFulfillmentOrderRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of destination_address
        if self.destination_address:
            _dict['destinationAddress'] = self.destination_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in feature_constraints (list)
        _items = []
        if self.feature_constraints:
            for _item_feature_constraints in self.feature_constraints:
                if _item_feature_constraints:
                    _items.append(_item_feature_constraints.to_dict())
            _dict['featureConstraints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateFulfillmentOrderRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "marketplaceId": obj.get("marketplaceId"),
            "displayableOrderId": obj.get("displayableOrderId"),
            "displayableOrderDate": obj.get("displayableOrderDate"),
            "displayableOrderComment": obj.get("displayableOrderComment"),
            "shippingSpeedCategory": obj.get("shippingSpeedCategory"),
            "destinationAddress": Address.from_dict(obj["destinationAddress"]) if obj.get("destinationAddress") is not None else None,
            "fulfillmentAction": obj.get("fulfillmentAction"),
            "fulfillmentPolicy": obj.get("fulfillmentPolicy"),
            "shipFromCountryCode": obj.get("shipFromCountryCode"),
            "notificationEmails": obj.get("notificationEmails"),
            "featureConstraints": [FeatureSettings.from_dict(_item) for _item in obj["featureConstraints"]] if obj.get("featureConstraints") is not None else None,
            "items": [UpdateFulfillmentOrderItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None
        })
        return _obj


