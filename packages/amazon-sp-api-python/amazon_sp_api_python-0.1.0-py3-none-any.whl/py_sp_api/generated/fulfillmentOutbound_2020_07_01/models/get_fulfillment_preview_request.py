# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.address import Address
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.feature_settings import FeatureSettings
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.get_fulfillment_preview_item import GetFulfillmentPreviewItem
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.shipping_speed_category import ShippingSpeedCategory
from typing import Optional, Set
from typing_extensions import Self

class GetFulfillmentPreviewRequest(BaseModel):
    """
    The request body schema for the `getFulfillmentPreview` operation.
    """ # noqa: E501
    marketplace_id: Optional[StrictStr] = Field(default=None, description="The marketplace the fulfillment order is placed against.", alias="marketplaceId")
    address: Address
    items: List[GetFulfillmentPreviewItem] = Field(description="An array of fulfillment preview item information.")
    shipping_speed_categories: Optional[List[ShippingSpeedCategory]] = Field(default=None, description="ShippingSpeedCategory List", alias="shippingSpeedCategories")
    include_cod_fulfillment_preview: Optional[StrictBool] = Field(default=None, description="When true, returns all fulfillment order previews both for COD and not for COD. Otherwise, returns only fulfillment order previews that are not for COD.", alias="includeCODFulfillmentPreview")
    include_delivery_windows: Optional[StrictBool] = Field(default=None, description="When true, returns the `ScheduledDeliveryInfo` response object, which contains the available delivery windows for a Scheduled Delivery. The `ScheduledDeliveryInfo` response object can only be returned for fulfillment order previews with `ShippingSpeedCategories` = `ScheduledDelivery`.", alias="includeDeliveryWindows")
    feature_constraints: Optional[List[FeatureSettings]] = Field(default=None, description="A list of features and their fulfillment policies to apply to the order.", alias="featureConstraints")
    __properties: ClassVar[List[str]] = ["marketplaceId", "address", "items", "shippingSpeedCategories", "includeCODFulfillmentPreview", "includeDeliveryWindows", "featureConstraints"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetFulfillmentPreviewRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in feature_constraints (list)
        _items = []
        if self.feature_constraints:
            for _item_feature_constraints in self.feature_constraints:
                if _item_feature_constraints:
                    _items.append(_item_feature_constraints.to_dict())
            _dict['featureConstraints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetFulfillmentPreviewRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "marketplaceId": obj.get("marketplaceId"),
            "address": Address.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "items": [GetFulfillmentPreviewItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "shippingSpeedCategories": obj.get("shippingSpeedCategories"),
            "includeCODFulfillmentPreview": obj.get("includeCODFulfillmentPreview"),
            "includeDeliveryWindows": obj.get("includeDeliveryWindows"),
            "featureConstraints": [FeatureSettings.from_dict(_item) for _item in obj["featureConstraints"]] if obj.get("featureConstraints") is not None else None
        })
        return _obj


