# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.fulfillment_shipment_item import FulfillmentShipmentItem
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.fulfillment_shipment_package import FulfillmentShipmentPackage
from typing import Optional, Set
from typing_extensions import Self

class FulfillmentShipment(BaseModel):
    """
    Delivery and item information for a shipment in a fulfillment order.
    """ # noqa: E501
    amazon_shipment_id: StrictStr = Field(description="A shipment identifier assigned by Amazon.", alias="amazonShipmentId")
    fulfillment_center_id: StrictStr = Field(description="An identifier for the fulfillment center that the shipment will be sent from.", alias="fulfillmentCenterId")
    fulfillment_shipment_status: StrictStr = Field(description="The current status of the shipment.", alias="fulfillmentShipmentStatus")
    shipping_date: Optional[datetime] = Field(default=None, description="Date timestamp", alias="shippingDate")
    estimated_arrival_date: Optional[datetime] = Field(default=None, description="Date timestamp", alias="estimatedArrivalDate")
    shipping_notes: Optional[List[StrictStr]] = Field(default=None, description="Provides additional insight into shipment timeline. Primairly used to communicate that actual delivery dates aren't available.", alias="shippingNotes")
    fulfillment_shipment_item: List[FulfillmentShipmentItem] = Field(description="An array of fulfillment shipment item information.", alias="fulfillmentShipmentItem")
    fulfillment_shipment_package: Optional[List[FulfillmentShipmentPackage]] = Field(default=None, description="An array of fulfillment shipment package information.", alias="fulfillmentShipmentPackage")
    __properties: ClassVar[List[str]] = ["amazonShipmentId", "fulfillmentCenterId", "fulfillmentShipmentStatus", "shippingDate", "estimatedArrivalDate", "shippingNotes", "fulfillmentShipmentItem", "fulfillmentShipmentPackage"]

    @field_validator('fulfillment_shipment_status')
    def fulfillment_shipment_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PENDING', 'SHIPPED', 'CANCELLED_BY_FULFILLER', 'CANCELLED_BY_SELLER']):
            raise ValueError("must be one of enum values ('PENDING', 'SHIPPED', 'CANCELLED_BY_FULFILLER', 'CANCELLED_BY_SELLER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FulfillmentShipment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fulfillment_shipment_item (list)
        _items = []
        if self.fulfillment_shipment_item:
            for _item_fulfillment_shipment_item in self.fulfillment_shipment_item:
                if _item_fulfillment_shipment_item:
                    _items.append(_item_fulfillment_shipment_item.to_dict())
            _dict['fulfillmentShipmentItem'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fulfillment_shipment_package (list)
        _items = []
        if self.fulfillment_shipment_package:
            for _item_fulfillment_shipment_package in self.fulfillment_shipment_package:
                if _item_fulfillment_shipment_package:
                    _items.append(_item_fulfillment_shipment_package.to_dict())
            _dict['fulfillmentShipmentPackage'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FulfillmentShipment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amazonShipmentId": obj.get("amazonShipmentId"),
            "fulfillmentCenterId": obj.get("fulfillmentCenterId"),
            "fulfillmentShipmentStatus": obj.get("fulfillmentShipmentStatus"),
            "shippingDate": obj.get("shippingDate"),
            "estimatedArrivalDate": obj.get("estimatedArrivalDate"),
            "shippingNotes": obj.get("shippingNotes"),
            "fulfillmentShipmentItem": [FulfillmentShipmentItem.from_dict(_item) for _item in obj["fulfillmentShipmentItem"]] if obj.get("fulfillmentShipmentItem") is not None else None,
            "fulfillmentShipmentPackage": [FulfillmentShipmentPackage.from_dict(_item) for _item in obj["fulfillmentShipmentPackage"]] if obj.get("fulfillmentShipmentPackage") is not None else None
        })
        return _obj


