# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.additional_location_info import AdditionalLocationInfo
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.current_status import CurrentStatus
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.tracking_address import TrackingAddress
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.tracking_event import TrackingEvent
from typing import Optional, Set
from typing_extensions import Self

class PackageTrackingDetails(BaseModel):
    """
    Tracking details of package
    """ # noqa: E501
    package_number: StrictInt = Field(description="The package identifier.", alias="packageNumber")
    tracking_number: Optional[StrictStr] = Field(default=None, description="The tracking number for the package.", alias="trackingNumber")
    customer_tracking_link: Optional[StrictStr] = Field(default=None, description="Link on swiship.com that allows customers to track the package.", alias="customerTrackingLink")
    carrier_code: Optional[StrictStr] = Field(default=None, description="The name of the carrier.", alias="carrierCode")
    carrier_phone_number: Optional[StrictStr] = Field(default=None, description="The phone number of the carrier.", alias="carrierPhoneNumber")
    carrier_url: Optional[StrictStr] = Field(default=None, description="The URL of the carrier's website.", alias="carrierURL")
    ship_date: Optional[datetime] = Field(default=None, description="Date timestamp", alias="shipDate")
    estimated_arrival_date: Optional[datetime] = Field(default=None, description="Date timestamp", alias="estimatedArrivalDate")
    ship_to_address: Optional[TrackingAddress] = Field(default=None, alias="shipToAddress")
    current_status: Optional[CurrentStatus] = Field(default=None, alias="currentStatus")
    current_status_description: Optional[StrictStr] = Field(default=None, description="Description corresponding to the `CurrentStatus` value.", alias="currentStatusDescription")
    signed_for_by: Optional[StrictStr] = Field(default=None, description="The name of the person who signed for the package.", alias="signedForBy")
    additional_location_info: Optional[AdditionalLocationInfo] = Field(default=None, alias="additionalLocationInfo")
    tracking_events: Optional[List[TrackingEvent]] = Field(default=None, description="An array of tracking event information.", alias="trackingEvents")
    __properties: ClassVar[List[str]] = ["packageNumber", "trackingNumber", "customerTrackingLink", "carrierCode", "carrierPhoneNumber", "carrierURL", "shipDate", "estimatedArrivalDate", "shipToAddress", "currentStatus", "currentStatusDescription", "signedForBy", "additionalLocationInfo", "trackingEvents"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PackageTrackingDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ship_to_address
        if self.ship_to_address:
            _dict['shipToAddress'] = self.ship_to_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tracking_events (list)
        _items = []
        if self.tracking_events:
            for _item_tracking_events in self.tracking_events:
                if _item_tracking_events:
                    _items.append(_item_tracking_events.to_dict())
            _dict['trackingEvents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PackageTrackingDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "packageNumber": obj.get("packageNumber"),
            "trackingNumber": obj.get("trackingNumber"),
            "customerTrackingLink": obj.get("customerTrackingLink"),
            "carrierCode": obj.get("carrierCode"),
            "carrierPhoneNumber": obj.get("carrierPhoneNumber"),
            "carrierURL": obj.get("carrierURL"),
            "shipDate": obj.get("shipDate"),
            "estimatedArrivalDate": obj.get("estimatedArrivalDate"),
            "shipToAddress": TrackingAddress.from_dict(obj["shipToAddress"]) if obj.get("shipToAddress") is not None else None,
            "currentStatus": obj.get("currentStatus"),
            "currentStatusDescription": obj.get("currentStatusDescription"),
            "signedForBy": obj.get("signedForBy"),
            "additionalLocationInfo": obj.get("additionalLocationInfo"),
            "trackingEvents": [TrackingEvent.from_dict(_item) for _item in obj["trackingEvents"]] if obj.get("trackingEvents") is not None else None
        })
        return _obj


