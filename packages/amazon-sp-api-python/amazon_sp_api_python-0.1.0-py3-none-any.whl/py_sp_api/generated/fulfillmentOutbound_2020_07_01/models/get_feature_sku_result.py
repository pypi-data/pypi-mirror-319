# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.fulfillmentOutbound_2020_07_01.models.feature_sku import FeatureSku
from typing import Optional, Set
from typing_extensions import Self

class GetFeatureSkuResult(BaseModel):
    """
    The payload for the `getFeatureSKU` operation.
    """ # noqa: E501
    marketplace_id: StrictStr = Field(description="The requested marketplace.", alias="marketplaceId")
    feature_name: StrictStr = Field(description="The name of the feature.", alias="featureName")
    is_eligible: StrictBool = Field(description="When true, the seller SKU is eligible for the requested feature.", alias="isEligible")
    ineligible_reasons: Optional[List[StrictStr]] = Field(default=None, description="A list of one or more reasons that the seller SKU is ineligibile for the feature.  Possible values: * `MERCHANT_NOT_ENROLLED` - The merchant isn't enrolled for the feature. * `SKU_NOT_ELIGIBLE` - The SKU doesn't reside in a warehouse that supports the feature. * `INVALID_SKU` - There is an issue with the SKU provided.", alias="ineligibleReasons")
    sku_info: Optional[FeatureSku] = Field(default=None, alias="skuInfo")
    __properties: ClassVar[List[str]] = ["marketplaceId", "featureName", "isEligible", "ineligibleReasons", "skuInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetFeatureSkuResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sku_info
        if self.sku_info:
            _dict['skuInfo'] = self.sku_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetFeatureSkuResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "marketplaceId": obj.get("marketplaceId"),
            "featureName": obj.get("featureName"),
            "isEligible": obj.get("isEligible"),
            "ineligibleReasons": obj.get("ineligibleReasons"),
            "skuInfo": FeatureSku.from_dict(obj["skuInfo"]) if obj.get("skuInfo") is not None else None
        })
        return _obj


