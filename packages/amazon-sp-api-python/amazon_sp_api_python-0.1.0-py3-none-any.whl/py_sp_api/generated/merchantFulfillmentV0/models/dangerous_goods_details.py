# coding: utf-8

"""
    Selling Partner API for Merchant Fulfillment

    With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DangerousGoodsDetails(BaseModel):
    """
    Details related to any dangerous goods or items that are shipped.
    """ # noqa: E501
    united_nations_regulatory_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The specific UNID of the item being shipped.", alias="UnitedNationsRegulatoryId")
    transportation_regulatory_class: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The specific regulatory class of the shipped item.", alias="TransportationRegulatoryClass")
    packing_group: Optional[StrictStr] = Field(default=None, description="The specific packaging group of the item being shipped.", alias="PackingGroup")
    packing_instruction: Optional[StrictStr] = Field(default=None, description="The specific packing instruction of the item being shipped.", alias="PackingInstruction")
    __properties: ClassVar[List[str]] = ["UnitedNationsRegulatoryId", "TransportationRegulatoryClass", "PackingGroup", "PackingInstruction"]

    @field_validator('united_nations_regulatory_id')
    def united_nations_regulatory_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(UN|ID|NA)[0-9]{4}$", value):
            raise ValueError(r"must validate the regular expression /^(UN|ID|NA)[0-9]{4}$/")
        return value

    @field_validator('transportation_regulatory_class')
    def transportation_regulatory_class_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[1-9](\.[1-9])?$", value):
            raise ValueError(r"must validate the regular expression /^[1-9](\.[1-9])?$/")
        return value

    @field_validator('packing_group')
    def packing_group_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['I', 'II', 'III']):
            raise ValueError("must be one of enum values ('I', 'II', 'III')")
        return value

    @field_validator('packing_instruction')
    def packing_instruction_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PI965_SECTION_IA', 'PI965_SECTION_IB', 'PI965_SECTION_II', 'PI966_SECTION_I', 'PI966_SECTION_II', 'PI967_SECTION_I', 'PI967_SECTION_II', 'PI968_SECTION_IA', 'PI968_SECTION_IB', 'PI969_SECTION_I', 'PI969_SECTION_II', 'PI970_SECTION_I', 'PI970_SECTION_II']):
            raise ValueError("must be one of enum values ('PI965_SECTION_IA', 'PI965_SECTION_IB', 'PI965_SECTION_II', 'PI966_SECTION_I', 'PI966_SECTION_II', 'PI967_SECTION_I', 'PI967_SECTION_II', 'PI968_SECTION_IA', 'PI968_SECTION_IB', 'PI969_SECTION_I', 'PI969_SECTION_II', 'PI970_SECTION_I', 'PI970_SECTION_II')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DangerousGoodsDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DangerousGoodsDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "UnitedNationsRegulatoryId": obj.get("UnitedNationsRegulatoryId"),
            "TransportationRegulatoryClass": obj.get("TransportationRegulatoryClass"),
            "PackingGroup": obj.get("PackingGroup"),
            "PackingInstruction": obj.get("PackingInstruction")
        })
        return _obj


