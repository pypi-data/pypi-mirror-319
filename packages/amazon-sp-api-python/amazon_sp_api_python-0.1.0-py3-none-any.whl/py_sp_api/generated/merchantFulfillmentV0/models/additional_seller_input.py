# coding: utf-8

"""
    Selling Partner API for Merchant Fulfillment

    With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.merchantFulfillmentV0.models.address import Address
from py_sp_api.generated.merchantFulfillmentV0.models.currency_amount import CurrencyAmount
from py_sp_api.generated.merchantFulfillmentV0.models.length import Length
from py_sp_api.generated.merchantFulfillmentV0.models.weight import Weight
from typing import Optional, Set
from typing_extensions import Self

class AdditionalSellerInput(BaseModel):
    """
    Additional information required to purchase shipping.
    """ # noqa: E501
    data_type: Optional[StrictStr] = Field(default=None, description="The data type of the additional information.", alias="DataType")
    value_as_string: Optional[StrictStr] = Field(default=None, description="The value when the data type is string.", alias="ValueAsString")
    value_as_boolean: Optional[StrictBool] = Field(default=None, description="The value when the data type is boolean.", alias="ValueAsBoolean")
    value_as_integer: Optional[StrictInt] = Field(default=None, description="The value when the data type is integer.", alias="ValueAsInteger")
    value_as_timestamp: Optional[datetime] = Field(default=None, description="Date-time formatted timestamp.", alias="ValueAsTimestamp")
    value_as_address: Optional[Address] = Field(default=None, alias="ValueAsAddress")
    value_as_weight: Optional[Weight] = Field(default=None, alias="ValueAsWeight")
    value_as_dimension: Optional[Length] = Field(default=None, alias="ValueAsDimension")
    value_as_currency: Optional[CurrencyAmount] = Field(default=None, alias="ValueAsCurrency")
    __properties: ClassVar[List[str]] = ["DataType", "ValueAsString", "ValueAsBoolean", "ValueAsInteger", "ValueAsTimestamp", "ValueAsAddress", "ValueAsWeight", "ValueAsDimension", "ValueAsCurrency"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdditionalSellerInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of value_as_address
        if self.value_as_address:
            _dict['ValueAsAddress'] = self.value_as_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value_as_weight
        if self.value_as_weight:
            _dict['ValueAsWeight'] = self.value_as_weight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value_as_dimension
        if self.value_as_dimension:
            _dict['ValueAsDimension'] = self.value_as_dimension.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value_as_currency
        if self.value_as_currency:
            _dict['ValueAsCurrency'] = self.value_as_currency.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdditionalSellerInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DataType": obj.get("DataType"),
            "ValueAsString": obj.get("ValueAsString"),
            "ValueAsBoolean": obj.get("ValueAsBoolean"),
            "ValueAsInteger": obj.get("ValueAsInteger"),
            "ValueAsTimestamp": obj.get("ValueAsTimestamp"),
            "ValueAsAddress": Address.from_dict(obj["ValueAsAddress"]) if obj.get("ValueAsAddress") is not None else None,
            "ValueAsWeight": Weight.from_dict(obj["ValueAsWeight"]) if obj.get("ValueAsWeight") is not None else None,
            "ValueAsDimension": Length.from_dict(obj["ValueAsDimension"]) if obj.get("ValueAsDimension") is not None else None,
            "ValueAsCurrency": CurrencyAmount.from_dict(obj["ValueAsCurrency"]) if obj.get("ValueAsCurrency") is not None else None
        })
        return _obj


