# coding: utf-8

"""
    Selling Partner API for Notifications

    The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, refer to the [Notifications Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/notifications-api-v1-use-case-guide).

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.notifications.models.aggregation_settings import AggregationSettings
from py_sp_api.generated.notifications.models.order_change_type_enum import OrderChangeTypeEnum
from typing import Optional, Set
from typing_extensions import Self

class EventFilter(BaseModel):
    """
    A `notificationType` specific filter. This object contains all of the currently available filters and properties that you can use to define a `notificationType` specific filter.
    """ # noqa: E501
    aggregation_settings: Optional[AggregationSettings] = Field(default=None, alias="aggregationSettings")
    marketplace_ids: Optional[List[StrictStr]] = Field(default=None, description="A list of marketplace identifiers to subscribe to (for example: ATVPDKIKX0DER). To receive notifications in every marketplace, do not provide this list.", alias="marketplaceIds")
    order_change_types: Optional[List[OrderChangeTypeEnum]] = Field(default=None, description="A list of order change types to subscribe to (for example: `BuyerRequestedChange`). To receive notifications of all change types, do not provide this list.", alias="orderChangeTypes")
    event_filter_type: StrictStr = Field(description="An `eventFilterType` value that is supported by the specific `notificationType`. This is used by the subscription service to determine the type of event filter. Refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values) to determine if an `eventFilterType` is supported.", alias="eventFilterType")
    __properties: ClassVar[List[str]] = ["aggregationSettings", "marketplaceIds", "orderChangeTypes", "eventFilterType"]

    @field_validator('event_filter_type')
    def event_filter_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ANY_OFFER_CHANGED', 'ORDER_CHANGE']):
            raise ValueError("must be one of enum values ('ANY_OFFER_CHANGED', 'ORDER_CHANGE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aggregation_settings
        if self.aggregation_settings:
            _dict['aggregationSettings'] = self.aggregation_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregationSettings": AggregationSettings.from_dict(obj["aggregationSettings"]) if obj.get("aggregationSettings") is not None else None,
            "marketplaceIds": obj.get("marketplaceIds"),
            "orderChangeTypes": obj.get("orderChangeTypes"),
            "eventFilterType": obj.get("eventFilterType")
        })
        return _obj


