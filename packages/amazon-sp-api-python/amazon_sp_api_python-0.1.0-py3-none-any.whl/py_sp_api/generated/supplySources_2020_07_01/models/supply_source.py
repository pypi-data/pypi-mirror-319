# coding: utf-8

"""
    Selling Partner API for Supply Sources

    Manage configurations and capabilities of seller supply sources.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.supplySources_2020_07_01.models.address import Address
from py_sp_api.generated.supplySources_2020_07_01.models.supply_source_capabilities import SupplySourceCapabilities
from py_sp_api.generated.supplySources_2020_07_01.models.supply_source_configuration import SupplySourceConfiguration
from py_sp_api.generated.supplySources_2020_07_01.models.supply_source_status_read_only import SupplySourceStatusReadOnly
from typing import Optional, Set
from typing_extensions import Self

class SupplySource(BaseModel):
    """
    The supply source details, including configurations and capabilities.
    """ # noqa: E501
    supply_source_id: Optional[StrictStr] = Field(default=None, description="An Amazon generated unique supply source ID.", alias="supplySourceId")
    supply_source_code: Optional[StrictStr] = Field(default=None, description="The seller-provided unique supply source code.", alias="supplySourceCode")
    alias: Optional[StrictStr] = Field(default=None, description="The custom alias for this supply source")
    status: Optional[SupplySourceStatusReadOnly] = None
    address: Optional[Address] = None
    configuration: Optional[SupplySourceConfiguration] = None
    capabilities: Optional[SupplySourceCapabilities] = None
    created_at: Optional[StrictStr] = Field(default=None, description="A date and time in the rfc3339 format.", alias="createdAt")
    updated_at: Optional[StrictStr] = Field(default=None, description="A date and time in the rfc3339 format.", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["supplySourceId", "supplySourceCode", "alias", "status", "address", "configuration", "capabilities", "createdAt", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupplySource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of configuration
        if self.configuration:
            _dict['configuration'] = self.configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of capabilities
        if self.capabilities:
            _dict['capabilities'] = self.capabilities.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupplySource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "supplySourceId": obj.get("supplySourceId"),
            "supplySourceCode": obj.get("supplySourceCode"),
            "alias": obj.get("alias"),
            "status": obj.get("status"),
            "address": Address.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "configuration": SupplySourceConfiguration.from_dict(obj["configuration"]) if obj.get("configuration") is not None else None,
            "capabilities": SupplySourceCapabilities.from_dict(obj["capabilities"]) if obj.get("capabilities") is not None else None,
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


