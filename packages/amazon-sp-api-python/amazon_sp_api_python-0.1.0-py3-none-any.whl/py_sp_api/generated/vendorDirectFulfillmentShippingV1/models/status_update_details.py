# coding: utf-8

"""
    Selling Partner API for Direct Fulfillment Shipping

    The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor's shipping data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_sp_api.generated.vendorDirectFulfillmentShippingV1.models.address import Address
from py_sp_api.generated.vendorDirectFulfillmentShippingV1.models.status_update_details_shipment_schedule import StatusUpdateDetailsShipmentSchedule
from typing import Optional, Set
from typing_extensions import Self

class StatusUpdateDetails(BaseModel):
    """
    Details for the shipment status update given by the vendor for the specific package.
    """ # noqa: E501
    tracking_number: StrictStr = Field(description="This is required to be provided for every package and should match with the trackingNumber sent for the shipment confirmation.", alias="trackingNumber")
    status_code: StrictStr = Field(description="Indicates the shipment status code of the package that provides transportation information for Amazon tracking systems and ultimately for the final customer. For more information, refer to the [Additional Fields Explanation](https://developer-docs.amazon.com/sp-api/docs/vendor-direct-fulfillment-shipping-api-use-case-guide#additional-fields-explanation).", alias="statusCode")
    reason_code: StrictStr = Field(description="Provides a reason code for the status of the package that will provide additional information about the transportation status. For more information, refer to the [Additional Fields Explanation](https://developer-docs.amazon.com/sp-api/docs/vendor-direct-fulfillment-shipping-api-use-case-guide#additional-fields-explanation).", alias="reasonCode")
    status_date_time: datetime = Field(description="The date and time when the shipment status was updated. This field is expected to be in ISO-8601 date/time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.", alias="statusDateTime")
    status_location_address: Address = Field(alias="statusLocationAddress")
    shipment_schedule: Optional[StatusUpdateDetailsShipmentSchedule] = Field(default=None, alias="shipmentSchedule")
    __properties: ClassVar[List[str]] = ["trackingNumber", "statusCode", "reasonCode", "statusDateTime", "statusLocationAddress", "shipmentSchedule"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatusUpdateDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status_location_address
        if self.status_location_address:
            _dict['statusLocationAddress'] = self.status_location_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipment_schedule
        if self.shipment_schedule:
            _dict['shipmentSchedule'] = self.shipment_schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatusUpdateDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "trackingNumber": obj.get("trackingNumber"),
            "statusCode": obj.get("statusCode"),
            "reasonCode": obj.get("reasonCode"),
            "statusDateTime": obj.get("statusDateTime"),
            "statusLocationAddress": Address.from_dict(obj["statusLocationAddress"]) if obj.get("statusLocationAddress") is not None else None,
            "shipmentSchedule": StatusUpdateDetailsShipmentSchedule.from_dict(obj["shipmentSchedule"]) if obj.get("shipmentSchedule") is not None else None
        })
        return _obj


