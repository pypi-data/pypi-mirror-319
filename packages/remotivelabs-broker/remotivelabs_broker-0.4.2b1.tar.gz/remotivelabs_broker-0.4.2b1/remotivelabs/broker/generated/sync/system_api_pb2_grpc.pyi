"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
from . import common_pb2
import grpc
from . import system_api_pb2

class SystemServiceStub:
    """/ Handle configuration of the RemotiveBroker server."""

    def __init__(self, channel: grpc.Channel) -> None: ...
    GetConfiguration: grpc.UnaryUnaryMultiCallable[
        common_pb2.Empty,
        system_api_pb2.Configuration,
    ]
    """/ Get current configuration of server."""
    ListSignals: grpc.UnaryUnaryMultiCallable[
        common_pb2.NameSpace,
        common_pb2.Frames,
    ]
    """/ Get list of all available frames and signals on server."""
    UploadFileChunk: grpc.UnaryUnaryMultiCallable[
        system_api_pb2.FileUploadChunkRequest,
        system_api_pb2.FileUploadResponse,
    ]
    """*
    Upload file using chunks (without streams), specifically useful for
    gRPC-web which does not support Client-side streaming.
    """
    UploadFile: grpc.StreamUnaryMultiCallable[
        system_api_pb2.FileUploadRequest,
        system_api_pb2.FileUploadResponse,
    ]
    """*
    Upload file using streams, preferred option for client with Client-side
    streaming.
    """
    BatchDeleteFiles: grpc.UnaryUnaryMultiCallable[
        system_api_pb2.FileDescriptions,
        common_pb2.Empty,
    ]
    """/ Delete a single or multiple files from server."""
    BatchDownloadFiles: grpc.UnaryStreamMultiCallable[
        system_api_pb2.FileDescriptions,
        system_api_pb2.FileDownloadResponse,
    ]
    """/ Download a single or multiple files from server."""
    BatchDownloadFileChunks: grpc.UnaryUnaryMultiCallable[
        system_api_pb2.BatchDownloadFileChunksRequest,
        system_api_pb2.BatchDownloadFileChunksResponse,
    ]
    ReloadConfiguration: grpc.UnaryUnaryMultiCallable[
        common_pb2.Empty,
        system_api_pb2.ReloadMessage,
    ]
    """*
    Will not return until new configuration is tested an active, make sure
    to set timeout to a large value. (fibex on pi > 50s).
    """
    GetLicenseInfo: grpc.UnaryUnaryMultiCallable[
        common_pb2.Empty,
        system_api_pb2.LicenseInfo,
    ]
    """/ Get information about server license."""
    SetLicense: grpc.UnaryUnaryMultiCallable[
        system_api_pb2.License,
        system_api_pb2.LicenseInfo,
    ]
    """/ Set server license."""
    SetProperty: grpc.UnaryUnaryMultiCallable[
        system_api_pb2.PropertyValue,
        common_pb2.Empty,
    ]
    """/ Sets a custom property, such as SecOc parameters"""

class SystemServiceServicer(metaclass=abc.ABCMeta):
    """/ Handle configuration of the RemotiveBroker server."""

    @abc.abstractmethod
    def GetConfiguration(
        self,
        request: common_pb2.Empty,
        context: grpc.ServicerContext,
    ) -> system_api_pb2.Configuration:
        """/ Get current configuration of server."""
    @abc.abstractmethod
    def ListSignals(
        self,
        request: common_pb2.NameSpace,
        context: grpc.ServicerContext,
    ) -> common_pb2.Frames:
        """/ Get list of all available frames and signals on server."""
    @abc.abstractmethod
    def UploadFileChunk(
        self,
        request: system_api_pb2.FileUploadChunkRequest,
        context: grpc.ServicerContext,
    ) -> system_api_pb2.FileUploadResponse:
        """*
        Upload file using chunks (without streams), specifically useful for
        gRPC-web which does not support Client-side streaming.
        """
    @abc.abstractmethod
    def UploadFile(
        self,
        request_iterator: collections.abc.Iterator[system_api_pb2.FileUploadRequest],
        context: grpc.ServicerContext,
    ) -> system_api_pb2.FileUploadResponse:
        """*
        Upload file using streams, preferred option for client with Client-side
        streaming.
        """
    @abc.abstractmethod
    def BatchDeleteFiles(
        self,
        request: system_api_pb2.FileDescriptions,
        context: grpc.ServicerContext,
    ) -> common_pb2.Empty:
        """/ Delete a single or multiple files from server."""
    @abc.abstractmethod
    def BatchDownloadFiles(
        self,
        request: system_api_pb2.FileDescriptions,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[system_api_pb2.FileDownloadResponse]:
        """/ Download a single or multiple files from server."""
    @abc.abstractmethod
    def BatchDownloadFileChunks(
        self,
        request: system_api_pb2.BatchDownloadFileChunksRequest,
        context: grpc.ServicerContext,
    ) -> system_api_pb2.BatchDownloadFileChunksResponse: ...
    @abc.abstractmethod
    def ReloadConfiguration(
        self,
        request: common_pb2.Empty,
        context: grpc.ServicerContext,
    ) -> system_api_pb2.ReloadMessage:
        """*
        Will not return until new configuration is tested an active, make sure
        to set timeout to a large value. (fibex on pi > 50s).
        """
    @abc.abstractmethod
    def GetLicenseInfo(
        self,
        request: common_pb2.Empty,
        context: grpc.ServicerContext,
    ) -> system_api_pb2.LicenseInfo:
        """/ Get information about server license."""
    @abc.abstractmethod
    def SetLicense(
        self,
        request: system_api_pb2.License,
        context: grpc.ServicerContext,
    ) -> system_api_pb2.LicenseInfo:
        """/ Set server license."""
    @abc.abstractmethod
    def SetProperty(
        self,
        request: system_api_pb2.PropertyValue,
        context: grpc.ServicerContext,
    ) -> common_pb2.Empty:
        """/ Sets a custom property, such as SecOc parameters"""

def add_SystemServiceServicer_to_server(servicer: SystemServiceServicer, server: grpc.Server) -> None: ...
