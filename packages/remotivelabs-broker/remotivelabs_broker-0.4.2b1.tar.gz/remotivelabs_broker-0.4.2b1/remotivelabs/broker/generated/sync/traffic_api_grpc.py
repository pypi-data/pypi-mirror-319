# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: traffic_api.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

from . import common_pb2
from . import system_api_pb2
from . import traffic_api_pb2


class TrafficServiceBase(abc.ABC):

    @abc.abstractmethod
    async def PlayTraffic(self, stream: 'grpclib.server.Stream[traffic_api_pb2.PlaybackInfos, traffic_api_pb2.PlaybackInfos]') -> None:
        pass

    @abc.abstractmethod
    async def PlayTrafficStatus(self, stream: 'grpclib.server.Stream[common_pb2.Empty, traffic_api_pb2.PlaybackInfos]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/base.TrafficService/PlayTraffic': grpclib.const.Handler(
                self.PlayTraffic,
                grpclib.const.Cardinality.UNARY_UNARY,
                traffic_api_pb2.PlaybackInfos,
                traffic_api_pb2.PlaybackInfos,
            ),
            '/base.TrafficService/PlayTrafficStatus': grpclib.const.Handler(
                self.PlayTrafficStatus,
                grpclib.const.Cardinality.UNARY_STREAM,
                common_pb2.Empty,
                traffic_api_pb2.PlaybackInfos,
            ),
        }


class TrafficServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.PlayTraffic = grpclib.client.UnaryUnaryMethod(
            channel,
            '/base.TrafficService/PlayTraffic',
            traffic_api_pb2.PlaybackInfos,
            traffic_api_pb2.PlaybackInfos,
        )
        self.PlayTrafficStatus = grpclib.client.UnaryStreamMethod(
            channel,
            '/base.TrafficService/PlayTrafficStatus',
            common_pb2.Empty,
            traffic_api_pb2.PlaybackInfos,
        )
