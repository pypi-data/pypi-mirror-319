# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: system_api.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

from . import common_pb2
from . import system_api_pb2


class SystemServiceBase(abc.ABC):

    @abc.abstractmethod
    async def GetConfiguration(self, stream: 'grpclib.server.Stream[common_pb2.Empty, system_api_pb2.Configuration]') -> None:
        pass

    @abc.abstractmethod
    async def ListSignals(self, stream: 'grpclib.server.Stream[common_pb2.NameSpace, common_pb2.Frames]') -> None:
        pass

    @abc.abstractmethod
    async def UploadFileChunk(self, stream: 'grpclib.server.Stream[system_api_pb2.FileUploadChunkRequest, system_api_pb2.FileUploadResponse]') -> None:
        pass

    @abc.abstractmethod
    async def UploadFile(self, stream: 'grpclib.server.Stream[system_api_pb2.FileUploadRequest, system_api_pb2.FileUploadResponse]') -> None:
        pass

    @abc.abstractmethod
    async def BatchDeleteFiles(self, stream: 'grpclib.server.Stream[system_api_pb2.FileDescriptions, common_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def BatchDownloadFiles(self, stream: 'grpclib.server.Stream[system_api_pb2.FileDescriptions, system_api_pb2.FileDownloadResponse]') -> None:
        pass

    @abc.abstractmethod
    async def BatchDownloadFileChunks(self, stream: 'grpclib.server.Stream[system_api_pb2.BatchDownloadFileChunksRequest, system_api_pb2.BatchDownloadFileChunksResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ReloadConfiguration(self, stream: 'grpclib.server.Stream[common_pb2.Empty, system_api_pb2.ReloadMessage]') -> None:
        pass

    @abc.abstractmethod
    async def GetLicenseInfo(self, stream: 'grpclib.server.Stream[common_pb2.Empty, system_api_pb2.LicenseInfo]') -> None:
        pass

    @abc.abstractmethod
    async def SetLicense(self, stream: 'grpclib.server.Stream[system_api_pb2.License, system_api_pb2.LicenseInfo]') -> None:
        pass

    @abc.abstractmethod
    async def SetProperty(self, stream: 'grpclib.server.Stream[system_api_pb2.PropertyValue, common_pb2.Empty]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/base.SystemService/GetConfiguration': grpclib.const.Handler(
                self.GetConfiguration,
                grpclib.const.Cardinality.UNARY_UNARY,
                common_pb2.Empty,
                system_api_pb2.Configuration,
            ),
            '/base.SystemService/ListSignals': grpclib.const.Handler(
                self.ListSignals,
                grpclib.const.Cardinality.UNARY_UNARY,
                common_pb2.NameSpace,
                common_pb2.Frames,
            ),
            '/base.SystemService/UploadFileChunk': grpclib.const.Handler(
                self.UploadFileChunk,
                grpclib.const.Cardinality.UNARY_UNARY,
                system_api_pb2.FileUploadChunkRequest,
                system_api_pb2.FileUploadResponse,
            ),
            '/base.SystemService/UploadFile': grpclib.const.Handler(
                self.UploadFile,
                grpclib.const.Cardinality.STREAM_UNARY,
                system_api_pb2.FileUploadRequest,
                system_api_pb2.FileUploadResponse,
            ),
            '/base.SystemService/BatchDeleteFiles': grpclib.const.Handler(
                self.BatchDeleteFiles,
                grpclib.const.Cardinality.UNARY_UNARY,
                system_api_pb2.FileDescriptions,
                common_pb2.Empty,
            ),
            '/base.SystemService/BatchDownloadFiles': grpclib.const.Handler(
                self.BatchDownloadFiles,
                grpclib.const.Cardinality.UNARY_STREAM,
                system_api_pb2.FileDescriptions,
                system_api_pb2.FileDownloadResponse,
            ),
            '/base.SystemService/BatchDownloadFileChunks': grpclib.const.Handler(
                self.BatchDownloadFileChunks,
                grpclib.const.Cardinality.UNARY_UNARY,
                system_api_pb2.BatchDownloadFileChunksRequest,
                system_api_pb2.BatchDownloadFileChunksResponse,
            ),
            '/base.SystemService/ReloadConfiguration': grpclib.const.Handler(
                self.ReloadConfiguration,
                grpclib.const.Cardinality.UNARY_UNARY,
                common_pb2.Empty,
                system_api_pb2.ReloadMessage,
            ),
            '/base.SystemService/GetLicenseInfo': grpclib.const.Handler(
                self.GetLicenseInfo,
                grpclib.const.Cardinality.UNARY_UNARY,
                common_pb2.Empty,
                system_api_pb2.LicenseInfo,
            ),
            '/base.SystemService/SetLicense': grpclib.const.Handler(
                self.SetLicense,
                grpclib.const.Cardinality.UNARY_UNARY,
                system_api_pb2.License,
                system_api_pb2.LicenseInfo,
            ),
            '/base.SystemService/SetProperty': grpclib.const.Handler(
                self.SetProperty,
                grpclib.const.Cardinality.UNARY_UNARY,
                system_api_pb2.PropertyValue,
                common_pb2.Empty,
            ),
        }


class SystemServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetConfiguration = grpclib.client.UnaryUnaryMethod(
            channel,
            '/base.SystemService/GetConfiguration',
            common_pb2.Empty,
            system_api_pb2.Configuration,
        )
        self.ListSignals = grpclib.client.UnaryUnaryMethod(
            channel,
            '/base.SystemService/ListSignals',
            common_pb2.NameSpace,
            common_pb2.Frames,
        )
        self.UploadFileChunk = grpclib.client.UnaryUnaryMethod(
            channel,
            '/base.SystemService/UploadFileChunk',
            system_api_pb2.FileUploadChunkRequest,
            system_api_pb2.FileUploadResponse,
        )
        self.UploadFile = grpclib.client.StreamUnaryMethod(
            channel,
            '/base.SystemService/UploadFile',
            system_api_pb2.FileUploadRequest,
            system_api_pb2.FileUploadResponse,
        )
        self.BatchDeleteFiles = grpclib.client.UnaryUnaryMethod(
            channel,
            '/base.SystemService/BatchDeleteFiles',
            system_api_pb2.FileDescriptions,
            common_pb2.Empty,
        )
        self.BatchDownloadFiles = grpclib.client.UnaryStreamMethod(
            channel,
            '/base.SystemService/BatchDownloadFiles',
            system_api_pb2.FileDescriptions,
            system_api_pb2.FileDownloadResponse,
        )
        self.BatchDownloadFileChunks = grpclib.client.UnaryUnaryMethod(
            channel,
            '/base.SystemService/BatchDownloadFileChunks',
            system_api_pb2.BatchDownloadFileChunksRequest,
            system_api_pb2.BatchDownloadFileChunksResponse,
        )
        self.ReloadConfiguration = grpclib.client.UnaryUnaryMethod(
            channel,
            '/base.SystemService/ReloadConfiguration',
            common_pb2.Empty,
            system_api_pb2.ReloadMessage,
        )
        self.GetLicenseInfo = grpclib.client.UnaryUnaryMethod(
            channel,
            '/base.SystemService/GetLicenseInfo',
            common_pb2.Empty,
            system_api_pb2.LicenseInfo,
        )
        self.SetLicense = grpclib.client.UnaryUnaryMethod(
            channel,
            '/base.SystemService/SetLicense',
            system_api_pb2.License,
            system_api_pb2.LicenseInfo,
        )
        self.SetProperty = grpclib.client.UnaryUnaryMethod(
            channel,
            '/base.SystemService/SetProperty',
            system_api_pb2.PropertyValue,
            common_pb2.Empty,
        )
