# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: diagnostics_api.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

from . import common_pb2
from . import diagnostics_api_pb2


class DiagnosticsServiceBase(abc.ABC):

    @abc.abstractmethod
    async def PublishMultiFrame(self, stream: 'grpclib.server.Stream[diagnostics_api_pb2.PublisherConfig, common_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def SubscribeMultiFrame(self, stream: 'grpclib.server.Stream[diagnostics_api_pb2.SubscriberConfig, diagnostics_api_pb2.Payload]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/diagnostics.DiagnosticsService/PublishMultiFrame': grpclib.const.Handler(
                self.PublishMultiFrame,
                grpclib.const.Cardinality.UNARY_UNARY,
                diagnostics_api_pb2.PublisherConfig,
                common_pb2.Empty,
            ),
            '/diagnostics.DiagnosticsService/SubscribeMultiFrame': grpclib.const.Handler(
                self.SubscribeMultiFrame,
                grpclib.const.Cardinality.UNARY_STREAM,
                diagnostics_api_pb2.SubscriberConfig,
                diagnostics_api_pb2.Payload,
            ),
        }


class DiagnosticsServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.PublishMultiFrame = grpclib.client.UnaryUnaryMethod(
            channel,
            '/diagnostics.DiagnosticsService/PublishMultiFrame',
            diagnostics_api_pb2.PublisherConfig,
            common_pb2.Empty,
        )
        self.SubscribeMultiFrame = grpclib.client.UnaryStreamMethod(
            channel,
            '/diagnostics.DiagnosticsService/SubscribeMultiFrame',
            diagnostics_api_pb2.SubscriberConfig,
            diagnostics_api_pb2.Payload,
        )
