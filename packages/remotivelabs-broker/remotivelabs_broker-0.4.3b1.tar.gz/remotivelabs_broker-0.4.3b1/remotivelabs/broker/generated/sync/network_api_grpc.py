# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: network_api.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

from . import common_pb2
from . import network_api_pb2


class NetworkServiceBase(abc.ABC):

    @abc.abstractmethod
    async def SubscribeToSignals(self, stream: 'grpclib.server.Stream[network_api_pb2.SubscriberConfig, network_api_pb2.Signals]') -> None:
        pass

    @abc.abstractmethod
    async def SubscribeToSignalWithScript(self, stream: 'grpclib.server.Stream[network_api_pb2.SubscriberWithScriptConfig, network_api_pb2.Signals]') -> None:
        pass

    @abc.abstractmethod
    async def SubscribeToFramesDistribution(self, stream: 'grpclib.server.Stream[network_api_pb2.FramesDistributionConfig, network_api_pb2.FramesDistribution]') -> None:
        pass

    @abc.abstractmethod
    async def PublishSignals(self, stream: 'grpclib.server.Stream[network_api_pb2.PublisherConfig, common_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def ReadSignals(self, stream: 'grpclib.server.Stream[network_api_pb2.SignalIds, network_api_pb2.Signals]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/base.NetworkService/SubscribeToSignals': grpclib.const.Handler(
                self.SubscribeToSignals,
                grpclib.const.Cardinality.UNARY_STREAM,
                network_api_pb2.SubscriberConfig,
                network_api_pb2.Signals,
            ),
            '/base.NetworkService/SubscribeToSignalWithScript': grpclib.const.Handler(
                self.SubscribeToSignalWithScript,
                grpclib.const.Cardinality.UNARY_STREAM,
                network_api_pb2.SubscriberWithScriptConfig,
                network_api_pb2.Signals,
            ),
            '/base.NetworkService/SubscribeToFramesDistribution': grpclib.const.Handler(
                self.SubscribeToFramesDistribution,
                grpclib.const.Cardinality.UNARY_STREAM,
                network_api_pb2.FramesDistributionConfig,
                network_api_pb2.FramesDistribution,
            ),
            '/base.NetworkService/PublishSignals': grpclib.const.Handler(
                self.PublishSignals,
                grpclib.const.Cardinality.UNARY_UNARY,
                network_api_pb2.PublisherConfig,
                common_pb2.Empty,
            ),
            '/base.NetworkService/ReadSignals': grpclib.const.Handler(
                self.ReadSignals,
                grpclib.const.Cardinality.UNARY_UNARY,
                network_api_pb2.SignalIds,
                network_api_pb2.Signals,
            ),
        }


class NetworkServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.SubscribeToSignals = grpclib.client.UnaryStreamMethod(
            channel,
            '/base.NetworkService/SubscribeToSignals',
            network_api_pb2.SubscriberConfig,
            network_api_pb2.Signals,
        )
        self.SubscribeToSignalWithScript = grpclib.client.UnaryStreamMethod(
            channel,
            '/base.NetworkService/SubscribeToSignalWithScript',
            network_api_pb2.SubscriberWithScriptConfig,
            network_api_pb2.Signals,
        )
        self.SubscribeToFramesDistribution = grpclib.client.UnaryStreamMethod(
            channel,
            '/base.NetworkService/SubscribeToFramesDistribution',
            network_api_pb2.FramesDistributionConfig,
            network_api_pb2.FramesDistribution,
        )
        self.PublishSignals = grpclib.client.UnaryUnaryMethod(
            channel,
            '/base.NetworkService/PublishSignals',
            network_api_pb2.PublisherConfig,
            common_pb2.Empty,
        )
        self.ReadSignals = grpclib.client.UnaryUnaryMethod(
            channel,
            '/base.NetworkService/ReadSignals',
            network_api_pb2.SignalIds,
            network_api_pb2.Signals,
        )
