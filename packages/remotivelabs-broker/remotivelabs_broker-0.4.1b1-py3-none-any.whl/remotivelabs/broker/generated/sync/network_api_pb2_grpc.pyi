"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
from . import common_pb2
import grpc
from . import network_api_pb2

class NetworkServiceStub:
    """/ Signal publish, subscribe and read."""

    def __init__(self, channel: grpc.Channel) -> None: ...
    SubscribeToSignals: grpc.UnaryStreamMultiCallable[
        network_api_pb2.SubscriberConfig,
        network_api_pb2.Signals,
    ]
    """/ Subscribe to signals."""
    SubscribeToSignalWithScript: grpc.UnaryStreamMultiCallable[
        network_api_pb2.SubscriberWithScriptConfig,
        network_api_pb2.Signals,
    ]
    """/ Subscribe to signals with transform provided as a LUA script."""
    SubscribeToFramesDistribution: grpc.UnaryStreamMultiCallable[
        network_api_pb2.FramesDistributionConfig,
        network_api_pb2.FramesDistribution,
    ]
    """/ A stream which emits frames distributions of a provided namespace. Useful for diagnostic purposes. Counts are reset every 500 ms."""
    PublishSignals: grpc.UnaryUnaryMultiCallable[
        network_api_pb2.PublisherConfig,
        common_pb2.Empty,
    ]
    """/ Publish signals with values."""
    ReadSignals: grpc.UnaryUnaryMultiCallable[
        network_api_pb2.SignalIds,
        network_api_pb2.Signals,
    ]
    """/ Read signals from cache."""

class NetworkServiceServicer(metaclass=abc.ABCMeta):
    """/ Signal publish, subscribe and read."""

    @abc.abstractmethod
    def SubscribeToSignals(
        self,
        request: network_api_pb2.SubscriberConfig,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[network_api_pb2.Signals]:
        """/ Subscribe to signals."""
    @abc.abstractmethod
    def SubscribeToSignalWithScript(
        self,
        request: network_api_pb2.SubscriberWithScriptConfig,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[network_api_pb2.Signals]:
        """/ Subscribe to signals with transform provided as a LUA script."""
    @abc.abstractmethod
    def SubscribeToFramesDistribution(
        self,
        request: network_api_pb2.FramesDistributionConfig,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[network_api_pb2.FramesDistribution]:
        """/ A stream which emits frames distributions of a provided namespace. Useful for diagnostic purposes. Counts are reset every 500 ms."""
    @abc.abstractmethod
    def PublishSignals(
        self,
        request: network_api_pb2.PublisherConfig,
        context: grpc.ServicerContext,
    ) -> common_pb2.Empty:
        """/ Publish signals with values."""
    @abc.abstractmethod
    def ReadSignals(
        self,
        request: network_api_pb2.SignalIds,
        context: grpc.ServicerContext,
    ) -> network_api_pb2.Signals:
        """/ Read signals from cache."""

def add_NetworkServiceServicer_to_server(servicer: NetworkServiceServicer, server: grpc.Server) -> None: ...
