[project]
name = "music_assistant"
authors = [
    { name = "The Music Assistant Authors", email = "marcelveldt@users.noreply.github.com" },
]
classifiers = [
    "Environment :: Console",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "aiodns>=3.0.0",
    "Brotli>=1.0.9",
    "aiohttp==3.11.6",
    "aiofiles==24.1.0",
    "aiorun==2024.8.1",
    "aiosqlite==0.20.0",
    "certifi==2024.8.30",
    "colorlog==6.9.0",
    "cryptography==43.0.3",
    "eyeD3==0.9.7",
    "faust-cchardet>=2.1.18",
    "ifaddr==0.2.0",
    "mashumaro==3.14",
    "memory-tempfile==2.2.3",
    "music-assistant-frontend==v2.9.16",
    "music-assistant-models==1.1.4",
    "orjson==3.10.12",
    "pillow==11.0.0",
    "python-slugify==8.0.4",
    "unidecode==1.3.8",
    "xmltodict==0.14.2",
    "shortuuid==1.0.13",
    "zeroconf==0.136.2",
]
description = "Music Assistant"
readme = "README.md"
requires-python = ">=3.11"
version = "2.3.6"

[project.license]
text = "Apache-2.0"

[project.optional-dependencies]
test = [
    "codespell==2.3.0",
    "isort==5.13.2",
    "mypy==1.13.0",
    "pre-commit==4.0.1",
    "pre-commit-hooks==5.0.0",
    "pytest==8.3.4",
    "pytest-aiohttp==1.0.5",
    "pytest-cov==5.0.0",
    "syrupy==4.8.0",
    "tomli==2.1.0",
    "ruff==0.7.4",
]

[project.scripts]
mass = "music_assistant.__main__:main"

[tool.codespell]
ignore-words-list = "provid,hass,followings,childs"
skip = "*.js"

[tool.setuptools]
include-package-data = true
packages = [
    "music_assistant",
]
platforms = [
    "any",
]
zip-safe = false

[tool.setuptools.package-data]
music_assistant = [
    "py.typed",
]

[tool.ruff]
fix = true
show-fixes = true
line-length = 100
target-version = "py311"

[tool.ruff.lint]
ignore = [
    "ANN002",
    "ANN003",
    "ANN101",
    "ANN401",
    "D203",
    "D213",
    "D417",
    "EM101",
    "EM102",
    "FIX002",
    "PLR2004",
    "PD011",
    "S101",
    "TCH001",
    "TCH003",
    "TD002",
    "TD003",
    "TD004",
    "TRY003",
    "TRY400",
    "COM812",
    "ISC001",
    "BLE001",
    "FBT001",
    "FBT002",
    "FBT003",
    "ANN001",
    "ANN102",
    "ANN201",
    "ANN202",
    "TRY002",
    "PTH103",
    "PTH100",
    "PTH110",
    "PTH111",
    "PTH112",
    "PTH113",
    "PTH118",
    "PTH120",
    "PTH123",
    "PYI034",
    "PYI036",
    "G004",
    "PGH003",
    "DTZ005",
    "S104",
    "S105",
    "S106",
    "SLF001",
    "SIM113",
    "SIM102",
    "PERF401",
    "PERF402",
    "ARG002",
    "S311",
    "TRY301",
    "RET505",
    "PLR0912",
    "B904",
    "TRY401",
    "S324",
    "DTZ006",
    "ERA001",
    "PTH206",
    "C901",
    "PTH119",
    "PTH116",
    "DTZ003",
    "RUF012",
    "S304",
    "DTZ003",
    "RET507",
    "RUF006",
    "TRY300",
    "PTH107",
    "S608",
    "N818",
    "S307",
    "B007",
    "RUF009",
    "ANN204",
    "PTH202",
    "ASYNC109",
    "ASYNC110",
]
select = [
    "ALL",
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.pylint]
max-args = 10
max-branches = 25
max-returns = 15
max-statements = 50

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
known-first-party = [
    "music_assistant",
]

[tool.ruff.lint.mccabe]
max-complexity = 25

[tool.ruff.format]
line-ending = "lf"

[tool.mypy]
platform = "linux"
python_version = "3.11"
follow_imports = "normal"
ignore_missing_imports = true
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
addopts = "--cov music_assistant"
asyncio_mode = "auto"
