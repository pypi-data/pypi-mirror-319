# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import argussight.grpc.argus_service_pb2 as argus__service__pb2

GRPC_GENERATED_VERSION = "1.67.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in argus_service_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class SpawnerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartProcesses = channel.unary_unary(
            "/argussight.SpawnerService/StartProcesses",
            request_serializer=argus__service__pb2.StartProcessesRequest.SerializeToString,
            response_deserializer=argus__service__pb2.StartProcessesResponse.FromString,
            _registered_method=True,
        )
        self.TerminateProcesses = channel.unary_unary(
            "/argussight.SpawnerService/TerminateProcesses",
            request_serializer=argus__service__pb2.TerminateProcessesRequest.SerializeToString,
            response_deserializer=argus__service__pb2.TerminateProcessesResponse.FromString,
            _registered_method=True,
        )
        self.ManageProcesses = channel.unary_unary(
            "/argussight.SpawnerService/ManageProcesses",
            request_serializer=argus__service__pb2.ManageProcessesRequest.SerializeToString,
            response_deserializer=argus__service__pb2.ManageProcessesResponse.FromString,
            _registered_method=True,
        )
        self.GetProcesses = channel.unary_unary(
            "/argussight.SpawnerService/GetProcesses",
            request_serializer=argus__service__pb2.GetProcessesRequest.SerializeToString,
            response_deserializer=argus__service__pb2.GetProcessesResponse.FromString,
            _registered_method=True,
        )
        self.ChangeSettings = channel.unary_unary(
            "/argussight.SpawnerService/ChangeSettings",
            request_serializer=argus__service__pb2.ChangeSettingsRequest.SerializeToString,
            response_deserializer=argus__service__pb2.ChangeSettingsResponse.FromString,
            _registered_method=True,
        )
        self.AddStream = channel.unary_unary(
            "/argussight.SpawnerService/AddStream",
            request_serializer=argus__service__pb2.AddStreamRequest.SerializeToString,
            response_deserializer=argus__service__pb2.AddStreamResponse.FromString,
            _registered_method=True,
        )


class SpawnerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartProcesses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def TerminateProcesses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ManageProcesses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetProcesses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ChangeSettings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AddStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_SpawnerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "StartProcesses": grpc.unary_unary_rpc_method_handler(
            servicer.StartProcesses,
            request_deserializer=argus__service__pb2.StartProcessesRequest.FromString,
            response_serializer=argus__service__pb2.StartProcessesResponse.SerializeToString,
        ),
        "TerminateProcesses": grpc.unary_unary_rpc_method_handler(
            servicer.TerminateProcesses,
            request_deserializer=argus__service__pb2.TerminateProcessesRequest.FromString,
            response_serializer=argus__service__pb2.TerminateProcessesResponse.SerializeToString,
        ),
        "ManageProcesses": grpc.unary_unary_rpc_method_handler(
            servicer.ManageProcesses,
            request_deserializer=argus__service__pb2.ManageProcessesRequest.FromString,
            response_serializer=argus__service__pb2.ManageProcessesResponse.SerializeToString,
        ),
        "GetProcesses": grpc.unary_unary_rpc_method_handler(
            servicer.GetProcesses,
            request_deserializer=argus__service__pb2.GetProcessesRequest.FromString,
            response_serializer=argus__service__pb2.GetProcessesResponse.SerializeToString,
        ),
        "ChangeSettings": grpc.unary_unary_rpc_method_handler(
            servicer.ChangeSettings,
            request_deserializer=argus__service__pb2.ChangeSettingsRequest.FromString,
            response_serializer=argus__service__pb2.ChangeSettingsResponse.SerializeToString,
        ),
        "AddStream": grpc.unary_unary_rpc_method_handler(
            servicer.AddStream,
            request_deserializer=argus__service__pb2.AddStreamRequest.FromString,
            response_serializer=argus__service__pb2.AddStreamResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "argussight.SpawnerService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "argussight.SpawnerService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class SpawnerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartProcesses(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/argussight.SpawnerService/StartProcesses",
            argus__service__pb2.StartProcessesRequest.SerializeToString,
            argus__service__pb2.StartProcessesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def TerminateProcesses(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/argussight.SpawnerService/TerminateProcesses",
            argus__service__pb2.TerminateProcessesRequest.SerializeToString,
            argus__service__pb2.TerminateProcessesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ManageProcesses(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/argussight.SpawnerService/ManageProcesses",
            argus__service__pb2.ManageProcessesRequest.SerializeToString,
            argus__service__pb2.ManageProcessesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetProcesses(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/argussight.SpawnerService/GetProcesses",
            argus__service__pb2.GetProcessesRequest.SerializeToString,
            argus__service__pb2.GetProcessesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ChangeSettings(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/argussight.SpawnerService/ChangeSettings",
            argus__service__pb2.ChangeSettingsRequest.SerializeToString,
            argus__service__pb2.ChangeSettingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def AddStream(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/argussight.SpawnerService/AddStream",
            argus__service__pb2.AddStreamRequest.SerializeToString,
            argus__service__pb2.AddStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
