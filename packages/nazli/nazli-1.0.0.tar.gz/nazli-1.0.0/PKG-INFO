Metadata-Version: 2.2
Name: nazli
Version: 1.0.0
Summary: Present Characters as Pixel Emoji
Author-email: "Kamyar M.G." <kmgurmia@gmail.com>
Maintainer-email: "Kamyar M.G." <kmgurmia@gmail.com>
License: MIT License
        
        Copyright (c) 2024 Kamyar M.G.
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/kamyarmg/nazli
Project-URL: Repository, https://github.com/kamyarmg/nazli
Project-URL: Issues, https://github.com/kamyarmg/nazli/issues
Project-URL: Changelog, https://github.com/kamyarmg/nazli/blob/master/CHANGELOG.rst
Keywords: emoji,python,string,cute,funny,NAZLI
Classifier: Development Status :: 1 - Planning
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Build Tools
Classifier: Topic :: File Formats :: JSON
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE


# Nazli - Word to Pixel Emoji

This Python project converts text into pixel-art-style emojis, transforming each character into a creative and visually appealing grid of emojis.

## Features

- **Pixel Art Transformation:** Converts words into pixel-art-style emoji grids.
- **Customizable Emojis:** Choose your own emojis for the "filled" and "empty" parts of the pixel art.
- **Flexible Input:** Handles multi-character words and adjusts spacing based on emoji width.
- **Simple Integration:** Designed for easy integration into larger projects or standalone use.

## Usage

1. Clone the repository:
   ```bash
   git clone https://github.com/kamyarmg/nazli.git
   cd nazli
   ```

2. Import the module into your project:
   ```python
   from nazli import word_to_pixel_emoji

   print(word_to_pixel_emoji("I", filled_emoji="🌺"))
   print(word_to_pixel_emoji("Wish", filled_emoji="🌸"))
   print(word_to_pixel_emoji("You", filled_emoji="🧊"))
   print(word_to_pixel_emoji("The", filled_emoji="🍀"))
   print(word_to_pixel_emoji("Best.", filled_emoji="🌟"))
   ```

#### Output Example:
```
  🌺🌺🌺
    🌺
    🌺
    🌺
  🌺🌺🌺

🌸      🌸    🌸🌸🌸      🌸🌸🌸🌸  🌸      🌸
🌸      🌸      🌸      🌸          🌸      🌸
🌸  🌸  🌸      🌸        🌸🌸🌸    🌸🌸🌸🌸🌸
🌸🌸  🌸🌸      🌸              🌸  🌸      🌸
🌸      🌸    🌸🌸🌸    🌸🌸🌸🌸    🌸      🌸

🧊      🧊    🧊🧊🧊    🧊      🧊
  🧊  🧊    🧊      🧊  🧊      🧊
    🧊      🧊      🧊  🧊      🧊
    🧊      🧊      🧊  🧊      🧊
    🧊        🧊🧊🧊      🧊🧊🧊

🍀🍀🍀🍀🍀  🍀      🍀  🍀🍀🍀🍀🍀
    🍀      🍀      🍀  🍀
    🍀      🍀🍀🍀🍀🍀  🍀🍀🍀🍀
    🍀      🍀      🍀  🍀
    🍀      🍀      🍀  🍀🍀🍀🍀🍀

🌟🌟🌟🌟    🌟🌟🌟🌟🌟    🌟🌟🌟🌟  🌟🌟🌟🌟🌟
🌟      🌟  🌟          🌟              ‌ 🌟
🌟🌟🌟🌟    🌟🌟🌟🌟      🌟🌟🌟        🌟
🌟      🌟  🌟                  🌟       🌟
🌟🌟🌟🌟    🌟🌟🌟🌟🌟  🌟🌟🌟🌟        🌟          🌟



```

### Key Functions

1. **`word_to_pixel_emoji(word: str, filled_emoji: str = "🌸") -> str`**
   - Converts a word into a grid of pixel emoji art.
   - Parameters:
     - `word`: The text to convert.
     - `filled_emoji`: The emoji to use for the filled portions of the grid (default: 🌸).

   - Returns:
     - A string containing the pixel-art emoji representation of the word.

2. **`char_to_pixel_emoji(char: str, filled_emoji: str, empty_emoji: str) -> list[str] | None`**
   - Converts a single character to a pixel-art representation.
   - Returns `None` if the character is not in the pixel map.

3. **`emoji_length(emoji: str) -> int`**
   - Calculates the visual width of an emoji based on its Unicode properties.

## Pixel Map

The pixel map for each character is stored in `PIXEL_MAP` and defines how each letter is visualized. You can customize this mapping by updating the `pixel_art.py` module.

### Example Mapping
```python
PIXEL_MAP = {
    "A": [
        "  X  ",
        " X X ",
        "XXXXX",
        "X   X",
        "X   X",
    ],
    # Add more characters...
}
```

## Contributing

Contributions are welcome! Feel free to submit issues or pull requests to enhance the functionality or add support for additional features. For more information, please see the [CONTRIBUTING.md](CONTRIBUTING.md)
