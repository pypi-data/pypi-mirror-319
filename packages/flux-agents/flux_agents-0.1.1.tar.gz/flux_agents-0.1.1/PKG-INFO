Metadata-Version: 2.2
Name: flux-agents
Version: 0.1.1
Summary: Advanced AI Agent Framework with LLM integration
Home-page: https://github.com/yourusername/flux
Author: Christian de Frondeville, Arijit Nukala, Gubi Ganguly
Author-email: your.email@example.com
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: msgpack>=1.0.5
Requires-Dist: zstandard
Requires-Dist: pyarrow
Requires-Dist: polars>=0.20.6
Requires-Dist: numpy
Requires-Dist: xmltodict>=0.13.0
Requires-Dist: pyyaml>=6.0.1
Requires-Dist: google-generativeai
Requires-Dist: hnswlib
Requires-Dist: transformers
Requires-Dist: aiofiles
Requires-Dist: aiohttp
Requires-Dist: plotly
Requires-Dist: langfuse
Requires-Dist: diff-match-patch
Requires-Dist: patience
Requires-Dist: pandas
Requires-Dist: tabulate
Provides-Extra: torch
Requires-Dist: torch; extra == "torch"
Requires-Dist: sentence-transformers[torch]>=2.5.0; extra == "torch"
Provides-Extra: docs
Requires-Dist: sphinx>=7.1.2; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.3.0; extra == "docs"
Requires-Dist: myst-parser>=2.0.0; extra == "docs"
Requires-Dist: sphinx-autodoc-typehints>=1.25.2; extra == "docs"
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-asyncio; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: isort; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Flux: Advanced AI Agent Framework

Flux is a powerful Python framework built from the ground up with asynchronous execution at its core. It provides a modern, async-first approach to building AI agents, featuring non-blocking LLM integration, concurrent vector operations, and real-time monitoring capabilities.

## 🌟 Key Features

### 🤖 Configurable Agents
- Built on asyncio for non-blocking, concurrent operations
- Flexible agent configuration with different logging modes
- Tool integration with ReAct-style reasoning
- Robust message handling and state management
- Vector store integration for context management
- Parallel processing of multiple agent tasks

### 🧠 LLM Integration
- Support for multiple LLM providers (Gemini, Pulse)
- Asynchronous inference with automatic batching
- Non-blocking embedding generation
- Built-in embedding generation and management
- Smart token handling and context management

### 🛠️ Utilities
- Concurrent file and metadata operations
- Efficient serialization with msgpack and orjson
- Text summarization and truncation capabilities
- Shared tokenizer functionality
- Thread-safe resource management
- Comprehensive logging and monitoring

## 📦 Installation

```bash
pip install flux-agents
```

Or with torch support for local embeddings:
```bash
pip install flux-agents[torch]
```

## 📚 Documentation

Full documentation is available at [github pages](https://tiger1def.github.io/Flux/)

## 🚀 Quick Start

```python
from agents import Agent, Message, AgentConfig, Logging
import asyncio

# Create an agent with basic logging
agent = Agent(
    name="Test Agent",
    config = AgentConfig(
        task_prompt = "You must respond like a pirate",
        logging = Logging.ENABLED
    )
)

# Example of concurrent agent operations
async def main():
    # Create multiple messages
    messages = [
        Message(content="What is the weather?"),
        Message(content="Tell me a joke"),
        Message(content="Write a poem")
    ]
    
    # Process messages concurrently
    responses = await asyncio.gather(*[
        agent(msg) for msg in messages
    ])
    
    for msg, response in zip(messages, responses):
        print(f"Q: {msg.content}\nA: {response.content}\n")

# Run the example
asyncio.run(main())
```

## 📊 Core Components

### Agent System
- Base agent implementation with configurable behaviors
- ReAct-style agents for tool integration
- Vector chat capabilities
- Concurrent message processing
- Thread-safe state management

### Monitoring
- Comprehensive logging system
- Real-time monitoring with async logging
- Support for multiple logging backends
- Integration with LangFuse
- Detailed agent activity tracking

### Storage
- Concurrent vector operations with HNSW
- Asynchronous file I/O
- File management system
- Serialization utilities
- State persistence

## 🤝 Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## 👥 Authors

- Christian de Frondeville
- Arijit Nukala
- Gubi Ganguly
