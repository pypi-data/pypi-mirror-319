# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import os
import pathlib

class CellConfig:
    area: float
    wave: WaveConfig = None

class CellsConfig:
    r"""
    Cells config
    """

    def add(self, name: str) -> CellConfig:
        r"""
        Add cell instance
        """
        ...

class Config:
    pvts: PVTsConfig
    r"""
    reference to PVTs config
    """
    lib: LibConfig
    r"""
    reference to library config
    """
    formats: FormatsConfig
    r"""
    reference to formats config
    """
    wave: WaveConfig
    r"""
    reference to wave config
    """
    netlist: list[str]
    r"""
    circuit netlist files for SPICE simulation
    """
    cells: CellsConfig
    def __new__(cls, name: str = "default_proj"): ...

class FormatsConfig:
    r"""
    PVTs config

    You can set multi-PVT here
    """

    def add_nldm(self) -> None: ...
    def add_lvf(self, sample_num: int = 100, sample_method: str = "Buildin") -> None:
        r"""
        `sample_num`: sampling number
        `sample_method`: Valid values are
         + `"Buildin"`: Simulator buildin sampling
         + `"MC"`: Monte Carlo
         + `"QMC"`: Quasi Monte Carlo, Sobols' sequence
         + `"LHS"`: Latin Hpyercube Sampling
         + `"Adaptive"`: Adaptive Sampling, using Bayesian Optimization
        """
        ...

    def add_ccs(
        self,
        receiver_cap_thresholds_rise: list[float] = [10, 30, 50, 60, 70, 80, 90],
        receiver_cap_thresholds_fall: list[float] = [90, 70, 50, 40, 30, 20, 10],
        receiver_cap_threshold2_rise: list[float] = [0, 50, 70],
        receiver_cap_threshold2_fall: list[float] = [70, 50, 0],
    ) -> None: ...

class LibConfig:
    r"""
    Contains all the library-relative configs
    """

    time_unit: str = "1ps"
    r"""
    Valid values are `"1ps"`, `"10ps"`, `"100ps"`, and `"1ns"`. The default is `"1ns"`.
    """
    capacitive_load_unit: tuple[float, str] = (1.0, "pf")
    r"""
    Valid values is `(float, "pf"|"ff")`. The defualt value is `(1.0, "pf")`
    """
    voltage_unit: str = "1V"
    r"""
    Valid values are `"1mV"`, `"10mV"`, `"100mV"`, and `"1V"`. The default is `"1V"`.
    """
    current_unit: str = "1mA"
    r"""
    The valid values are `"1uA"`, `"10uA"`, `"100uA"`, `"1mA"`, `"10mA"`, `"100mA"`, and `"1A"`.
    The default value is `"1mA"`.
    """
    pulling_resistance_unit: str = "1ohm"
    r"""
    The default value is `"1ohm"`.
    """
    leakage_power_unit: str = "1mW"
    r"""
    Valid values are `"1W"`, `"100mW"`, `"10mW"`, `"1mW"`, `"100nW"`, `"10nW"`, `"1nW"`, `"100pW"`, `"10pW"`, and `"1pW"`.
    The default value is `"1mW"`.
    """
    slew_upper_threshold_pct_rise: float | list[float] = 80.0
    slew_lower_threshold_pct_rise: float | list[float] = 20.0
    slew_lower_threshold_pct_fall: float | list[float] = 20.0
    slew_upper_threshold_pct_fall: float | list[float] = 80.0
    input_threshold_pct_fall: float | list[float] = 50.0
    input_threshold_pct_rise: float | list[float] = 50.0
    output_threshold_pct_rise: float | list[float] = 50.0
    output_threshold_pct_fall: float | list[float] = 50.0
    slew_derate_from_library: float | list[float] = 1.0
    voltage_map: dict[str, float | list[float]]

class Library:
    r"""
    Libarary datastruct
    """

    @staticmethod
    def read(file: str | os.PathLike | pathlib.Path) -> Library: ...
    def write(self, path: str | os.PathLike | pathlib.Path) -> None: ...

class PVTsConfig:
    r"""
    PVTs config

    You can set multi-PVT here
    """

    names: list[str]
    volt_pwr: list[float]
    volt_gnd: list[float]
    temp: list[float]
    metadata: dict[str, list[str | None]]
    def add(
        self,
        name: str,
        volt_pwr: float,
        volt_gnd: float,
        temp: float,
        models: list[tuple[str, str | None]],
        models_statistical: list[tuple[str, str | None]] = None,
        default_slew_index: list[float] = None,
        default_load_index: list[float] = None,
        **metadata: str,
    ) -> None:
        r"""
        Add pvt instance.
        Value of `metadata` needs to be `str`
        """
        ...

class WaveConfig:
    r"""
    The wave config for switch edge in simulation
    """

    def set_linear(self) -> None:
        r"""
        Set wave as linear for both `rise` and `fall` edges. It is the default manner,
        so normally you don't need to do that.
        """
        ...

    def set_rise_linear(self) -> None:
        r"""
        Set wave as linear for `rise` edges. It is the default manner,
        so normally you don't need to do that.
        """
        ...

    def set_fall_linear(self) -> None:
        r"""
        Set wave as linear for `fall` edges. It is the default manner,
        so normally you don't need to do that.
        """
        ...

    def set_pwl(self, times: list[float], volts: list[float]) -> None:
        r"""
        Make the voltage of switch edge wave as a function of time,
        for both `rise` and `fall` edges.
        The `times` should be monotone increasing, but `volts` don't have to.
        The unit is percentage, both `times` and `volts` should change form `0.0` to `100.0`.
        """
        ...

    def set_rise_pwl(self, times: list[float], volts: list[float]) -> None:
        r"""
        Make the voltage of switch edge wave as a function of time,
        for `rise` edges.
        The `times` should be monotone increasing, but `volts` don't have to.
        The unit is percentage, both `times` and `volts` should change form `0.0` to `100.0`.
        """
        ...

    def set_fall_pwl(self, times: list[float], volts: list[float]) -> None:
        r"""
        Make the voltage of switch edge wave as a function of time,
        for `fall` edges.
        The `times` should be monotone increasing, but `volts` don't have to.
        The unit is percentage, both `times` and `volts` should change form `0.0` to `100.0`.
        """
        ...
