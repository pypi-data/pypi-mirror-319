from io import BytesIO
import pytest
{{ vars.resource_config.class|generate_import }}
{{ metadata_record.resource_config.class|generate_import }}


def test_files_api_flow(client_with_credentials, search_clear, headers, input_data, base_urls):
    """Test record creation."""
    base_files_url = base_urls["{{ test_constants.files_base_url_placeholder }}"]
    res = client_with_credentials.post(base_urls['base_url'], headers=headers, json=input_data)
    assert res.status_code == 201
    id_ = res.json["id"]

    # Initialize files upload
    res = client_with_credentials.post(
        f"{base_files_url.replace('{id}', id_)}/files",
        headers=headers,
        json=[
            {"key": "test.pdf", "metadata": {"title": "Test file"}},
        ],
    )
    assert res.status_code == 201
    res_file = res.json["entries"][0]
    assert res_file["key"] == "test.pdf"
    assert res_file["status"] == "pending"
    assert res_file["metadata"] == {"title": "Test file"}

    # Get the file metadata
    res = client_with_credentials.get(f"{base_files_url.replace('{id}', id_)}/files/test.pdf", headers=headers)
    assert res.status_code == 200
    assert res.json["key"] == "test.pdf"
    assert res.json["status"] == "pending"
    assert res.json["metadata"] == {"title": "Test file"}

    # Upload a file
    res = client_with_credentials.put(
        f"{base_files_url.replace('{id}', id_)}/files/test.pdf/content",
        headers={
            "content-type": "application/octet-stream",
            "accept": "application/json",
        },
        data=BytesIO(b"testfile"),
    )
    assert res.status_code == 200
    assert res.json["status"] == "pending"

    # Commit the uploaded file
    res = client_with_credentials.post(f"{base_files_url.replace('{id}', id_)}/files/test.pdf/commit", headers=headers)
    assert res.status_code == 200
    assert res.json["status"] == "completed"

    # Get the file metadata
    res = client_with_credentials.get(f"{base_files_url.replace('{id}', id_)}/files/test.pdf", headers=headers)
    assert res.status_code == 200
    assert res.json["key"] == "test.pdf"
    assert res.json["status"] == "completed"
    assert res.json["metadata"] == {"title": "Test file"}
    file_size = str(res.json["size"])
    assert isinstance(res.json["size"], int), "File size not integer"

    # Read a file's content
    res = client_with_credentials.get(f"{base_files_url.replace('{id}', id_)}/files/test.pdf/content", headers=headers)
    assert res.status_code == 200
    assert res.data == b"testfile"

    # Update file metadata
    res = client_with_credentials.put(
        f"{base_files_url.replace('{id}', id_)}/files/test.pdf", headers=headers, json={"metadata": {"title": "New title"}}
    )
    assert res.status_code == 200
    assert res.json["key"] == "test.pdf"
    assert res.json["status"] == "completed"
    assert res.json["metadata"] == {"title": "New title"}

    # Get all files
    res = client_with_credentials.get(f"{base_files_url.replace('{id}', id_)}/files", headers=headers)
    assert res.status_code == 200
    assert len(res.json["entries"]) == 1
    assert res.json["entries"][0]["key"] == "test.pdf"
    assert res.json["entries"][0]["status"] == "completed"
    assert res.json["entries"][0]["metadata"] == {"title": "New title"}

    # Delete a file
    res = client_with_credentials.delete(f"{base_files_url.replace('{id}', id_)}/files/test.pdf", headers=headers)
    assert res.status_code == 204

    # Get all files
    res = client_with_credentials.get(f"{base_files_url.replace('{id}', id_)}/files", headers=headers)
    assert res.status_code == 200
    assert len(res.json["entries"]) == 0

def test_default_preview_file(app, client_with_credentials, search_clear, headers, input_data, base_urls):
    base_files_url = base_urls["{{ test_constants.files_base_url_placeholder }}"]
    res = client_with_credentials.post(base_urls['base_url'], headers=headers, json=input_data)
    assert res.status_code == 201
    id_ = res.json["id"]

    # Initialize 3 file uploads
    res = client_with_credentials.post(
        f"{base_files_url.replace('{id}', id_)}/files",
        headers=headers,
        json=[
            {"key": "f1.pdf"},
            {"key": "f2.pdf"},
            {"key": "f3.pdf"},
        ],
    )
    assert res.status_code == 201
    file_entries = res.json["entries"]
    assert len(file_entries) == 3
    assert {(f["key"], f["status"]) for f in file_entries} == {
        ("f1.pdf", "pending"),
        ("f2.pdf", "pending"),
        ("f3.pdf", "pending"),
    }
    assert res.json["default_preview"] is None

    # Upload and commit the 3 files
    for f in file_entries:
        res = client_with_credentials.put(
            f"{base_files_url.replace('{id}', id_)}/files/{f['key']}/content",
            headers={
                "content-type": "application/octet-stream",
                "accept": "application/json",
            },
            data=BytesIO(b"testfile"),
        )
        assert res.status_code == 200
        assert res.json["status"] == "pending"

        res = client_with_credentials.post(f"{base_files_url.replace('{id}', id_)}/files/{f['key']}/commit", headers=headers)
        assert res.status_code == 200
        assert res.json["status"] == "completed"

    # Set the default preview file
    input_data["files"]["default_preview"] = "f1.pdf"
    res = client_with_credentials.put(f"{base_urls['base_url']}{id_}{{ test_constants.update_url }}", headers=headers, json=input_data)
    assert res.status_code == 200
    assert res.json["files"]["default_preview"] == "f1.pdf"

    # Change the default preview file
    input_data["files"]["default_preview"] = "f2.pdf"
    res = client_with_credentials.put(f"{base_urls['base_url']}{id_}{{ test_constants.update_url }}", headers=headers, json=input_data)
    assert res.status_code == 200
    assert res.json["files"]["default_preview"] == "f2.pdf"

    # Unset the default preview file
    input_data["files"]["default_preview"] = None
    res = client_with_credentials.put(f"{base_urls['base_url']}{id_}{{ test_constants.update_url }}", headers=headers, json=input_data)
    assert res.status_code == 200
    assert res.json["files"].get("default_preview") is None

    # Empty string the default preview file
    input_data["files"]["default_preview"] = ""
    res = client_with_credentials.put(f"{base_urls['base_url']}{id_}{{ test_constants.update_url }}", headers=headers, json=input_data)
    assert res.status_code == 200
    assert res.json["files"].get("default_preview") is None

    # Set the default preview file
    input_data["files"]["default_preview"] = "f3.pdf"
    res = client_with_credentials.put(f"{base_urls['base_url']}{id_}{{ test_constants.update_url }}", headers=headers, json=input_data)
    assert res.status_code == 200
    assert res.json["files"]["default_preview"] == "f3.pdf"

    # Delete the default preview file
    res = client_with_credentials.delete(f"{base_files_url.replace('{id}', id_)}/files/f3.pdf", headers=headers)
    assert res.status_code == 204

    # Get all files and check default preview
    res = client_with_credentials.get(f"{base_files_url.replace('{id}', id_)}/files", headers=headers)
    assert res.status_code == 200
    assert len(res.json["entries"]) == 2
    assert res.json["default_preview"] is None

def test_file_api_errors(client_with_credentials, search_clear, headers, input_data, base_urls):
    base_files_url = base_urls["{{ test_constants.files_base_url_placeholder }}"]

    h = headers

    # Initialize a draft
    res = client_with_credentials.post(base_urls['base_url'], headers=headers, json=input_data)
    assert res.status_code == 201
    id_ = res.json["id"]

    # Initialize files upload
    # Pass an object instead of an array
    res = client_with_credentials.post(f"{base_files_url.replace('{id}', id_)}/files", headers=headers, json={"key": "test.pdf"})
    assert res.status_code == 400

    res = client_with_credentials.post(
        f"{base_files_url.replace('{id}', id_)}/files",
        headers=headers,
        json=[
            {"key": "test.pdf", "metadata": {"title": "Test file"}},
        ],
    )
    assert res.status_code == 201

    # Upload a file
    res = client_with_credentials.put(
        f"{base_files_url.replace('{id}', id_)}/files/test.pdf/content",
        headers={
            "content-type": "application/octet-stream",
            "accept": "application/json",
        },
        data=BytesIO(b"testfile"),
    )
    assert res.status_code == 200
    assert res.json["status"] == "pending"

    # Commit the uploaded file
    res = client_with_credentials.post(f"{base_files_url.replace('{id}', id_)}/files/test.pdf/commit", headers=headers)
    assert res.status_code == 200
    assert res.json["status"] == "completed"

    # Initialize same file upload again
    res = client_with_credentials.post(
        f"{base_files_url.replace('{id}', id_)}/files",
        headers=headers,
        json=[
            {"key": "test.pdf", "metadata": {"title": "Test file"}},
        ],
    )
    assert res.status_code == 400

{% if not test_constants.skip_continous_disable_files_test %}
def test_disable_files_when_files_already_present_should_error(
    app, client_with_credentials, search_clear, headers, input_data, base_urls
):
    base_files_url = base_urls["{{ test_constants.files_base_url_placeholder }}"]
    response = client_with_credentials.post(base_urls['base_url'], headers=headers, json=input_data)
    id_ = response.json["id"]
    # Add file
    file_id = "f1.pdf"
    client_with_credentials.post(f"{base_files_url.replace('{id}', id_)}/files", headers=headers, json=[{"key": file_id}])
    client_with_credentials.put(
        f"{base_files_url.replace('{id}', id_)}/files/{file_id}/content",
        headers={
            "content-type": "application/octet-stream",
            "accept": "application/json",
        },
        data=BytesIO(b"testfile"),
    )
    client_with_credentials.post(f"{base_files_url.replace('{id}', id_)}/files/{file_id}/commit", headers=headers)
    # Disable files
    input_data["files"] = {"enabled": False}

    response = client_with_credentials.put(f"{base_urls['base_url']}{id_}{{ test_constants.update_url }}", headers=headers, json=input_data)

    assert response.status_code == 400
    assert response.json["errors"] == [
        {
            "field": "files.enabled",
            "messages": [
                "You must first delete all files to set the record to be "
                "metadata-only."
            ],
        }
    ]
{% endif %}

def assert_record_file_links(id_, generated_links, base_urls, site_hostname="127.0.0.1:5000"):
    """Compare generated links to expected links."""
    base_files_url = base_urls["{{ test_constants.files_base_url_placeholder }}"]

    required_links = {
        {% for link_name, link in test_constants.links_record_files.items() %}
        "{{ link_name }}": f"{{ link }}",
        {% endfor %}
    }
    assert required_links.items() <= generated_links.items()

def assert_file_links(id_, generated_links, base_urls, site_hostname="127.0.0.1:5000"):
    """Compare generated links to expected links."""
    base_files_url = base_urls["{{ test_constants.files_base_url_placeholder }}"]
    required_links = {
        {% for link_name, link in test_constants.links_files.items() %}
        "{{ link_name }}": f"{{ link }}",
        {% endfor %}
    }
    assert required_links.items() <= generated_links.items()


def test_record_file_links(app, client_with_credentials, input_data, headers, base_urls, site_hostname="127.0.0.1:5000"):
    base_files_url = base_urls["{{ test_constants.files_base_url_placeholder }}"]

    res = client_with_credentials.post(base_urls['base_url'], json=input_data)

    id_ = res.json["id"]
    assert f"https://{site_hostname}/api{base_files_url.replace('{id}', id_)}/files" == res.json["links"]["files"]

    res = client_with_credentials.post(
        f"{base_files_url.replace('{id}', id_)}/files",
        headers=headers,
        json=[
            {"key": "test.pdf", "metadata": {"title": "Test file"}},
        ],
    )
    res = client_with_credentials.get(
        f"{base_files_url.replace('{id}', id_)}/files"
    )
    assert_record_file_links(id_, res.json["links"], base_urls)
    assert_file_links(id_, res.json["entries"][0]["links"], base_urls)

def test_record_file_links_no_permissions(
    app,
    client_with_credentials,
    anonymous_client,
    input_data,
    headers,
    base_urls,
    site_hostname="127.0.0.1:5000",
):
    base_files_url = base_urls["{{ test_constants.files_base_url_placeholder }}"]

    res = client_with_credentials.post(base_urls['base_url'], json=input_data)

    id_ = res.json["id"]
    assert "files" in res.json["links"]

    res = anonymous_client.post(
        f"{base_files_url.replace('{id}', id_)}/files",
        headers=headers,
        json=[
            {"key": "test.pdf", "metadata": {"title": "Test file"}},
        ],
    )
    assert res.status_code == 403 # todo patch permissions and test individual links