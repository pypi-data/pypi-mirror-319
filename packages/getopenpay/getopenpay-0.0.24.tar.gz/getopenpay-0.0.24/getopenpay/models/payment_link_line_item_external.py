# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional

from getopenpay.models.object_name import ObjectName
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

try:
  from typing import Self
except ImportError:
  from typing_extensions import Self


class PaymentLinkLineItemExternal(BaseModel):
  """
    PaymentLinkLineItemExternal
    """

  # noqa: E501
  id: StrictStr = Field(description='Unique identifier of the payment link line item.')
  object: Optional[ObjectName] = None
  created_at: datetime = Field(
    description="DateTime at which the object was created, in 'ISO 8601' format."
  )
  updated_at: datetime = Field(
    description="DateTime at which the object was updated, in 'ISO 8601' format."
  )
  is_deleted: Optional[StrictBool] = Field(
    default=False, description='If true, indicates that this object has been deleted'
  )
  payment_link_id: StrictStr = Field(
    description='The ID of the payment link associated with this item'
  )
  price_id: StrictStr = Field(description='Unique identifier of the price.')
  quantity: StrictInt = Field(description='Quantity of the item.')
  __properties: ClassVar[List[str]] = [
    'id', 'object', 'created_at', 'updated_at', 'is_deleted', 'payment_link_id', 'price_id',
    'quantity'
  ]

  model_config = {'populate_by_name': True, 'validate_assignment': True}

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.model_dump(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> Self:
    """Create an instance of PaymentLinkLineItemExternal from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self) -> Dict[str, Any]:
    """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
    _dict = self.model_dump(
      by_alias=True,
      exclude={},
      exclude_none=True,
    )
    return _dict

  @classmethod
  def from_dict(cls, obj: Dict) -> Self:
    """Create an instance of PaymentLinkLineItemExternal from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return cls.model_validate(obj)

    _obj = cls.model_validate(
      {
        'id': obj.get('id'),
        'object': obj.get('object'),
        'created_at': obj.get('created_at'),
        'updated_at': obj.get('updated_at'),
        'is_deleted': obj.get('is_deleted') if obj.get('is_deleted') is not None else False,
        'payment_link_id': obj.get('payment_link_id'),
        'price_id': obj.get('price_id'),
        'quantity': obj.get('quantity')
      }
    )
    return _obj
