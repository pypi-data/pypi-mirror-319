# coding: utf-8

"""
    Measurements Generation API

    Measurements Generation API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PositionVelocityCorrelationCoefficients(BaseModel):
    """
    Position-velocity correlation coefficients in 3 dimensions
    """ # noqa: E501
    position_x_velocity_x_correlation: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Units [-]", alias="positionXVelocityXCorrelation")
    position_x_velocity_y_correlation: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Units [-]", alias="positionXVelocityYCorrelation")
    position_x_velocity_z_correlation: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Units [-]", alias="positionXVelocityZCorrelation")
    position_y_velocity_x_correlation: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Units [-]", alias="positionYVelocityXCorrelation")
    position_y_velocity_y_correlation: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Units [-]", alias="positionYVelocityYCorrelation")
    position_y_velocity_z_correlation: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Units [-]", alias="positionYVelocityZCorrelation")
    position_z_velocity_x_correlation: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Units [-]", alias="positionZVelocityXCorrelation")
    position_z_velocity_y_correlation: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Units [-]", alias="positionZVelocityYCorrelation")
    position_z_velocity_z_correlation: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Units [-]", alias="positionZVelocityZCorrelation")
    __properties: ClassVar[List[str]] = ["positionXVelocityXCorrelation", "positionXVelocityYCorrelation", "positionXVelocityZCorrelation", "positionYVelocityXCorrelation", "positionYVelocityYCorrelation", "positionYVelocityZCorrelation", "positionZVelocityXCorrelation", "positionZVelocityYCorrelation", "positionZVelocityZCorrelation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PositionVelocityCorrelationCoefficients from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PositionVelocityCorrelationCoefficients from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "positionXVelocityXCorrelation": obj.get("positionXVelocityXCorrelation") if obj.get("positionXVelocityXCorrelation") is not None else 0.0,
            "positionXVelocityYCorrelation": obj.get("positionXVelocityYCorrelation") if obj.get("positionXVelocityYCorrelation") is not None else 0.0,
            "positionXVelocityZCorrelation": obj.get("positionXVelocityZCorrelation") if obj.get("positionXVelocityZCorrelation") is not None else 0.0,
            "positionYVelocityXCorrelation": obj.get("positionYVelocityXCorrelation") if obj.get("positionYVelocityXCorrelation") is not None else 0.0,
            "positionYVelocityYCorrelation": obj.get("positionYVelocityYCorrelation") if obj.get("positionYVelocityYCorrelation") is not None else 0.0,
            "positionYVelocityZCorrelation": obj.get("positionYVelocityZCorrelation") if obj.get("positionYVelocityZCorrelation") is not None else 0.0,
            "positionZVelocityXCorrelation": obj.get("positionZVelocityXCorrelation") if obj.get("positionZVelocityXCorrelation") is not None else 0.0,
            "positionZVelocityYCorrelation": obj.get("positionZVelocityYCorrelation") if obj.get("positionZVelocityYCorrelation") is not None else 0.0,
            "positionZVelocityZCorrelation": obj.get("positionZVelocityZCorrelation") if obj.get("positionZVelocityZCorrelation") is not None else 0.0
        })
        return _obj


