# coding: utf-8

"""
    Measurements Generation API

    Measurements Generation API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from spacetower_measurement_generation_python_client.models.earth_centered_frame_id import EarthCenteredFrameId
from spacetower_measurement_generation_python_client.models.measurement_request import MeasurementRequest
from spacetower_measurement_generation_python_client.models.measurement_type import MeasurementType
from spacetower_measurement_generation_python_client.models.noise_frame_id import NoiseFrameId
from spacetower_measurement_generation_python_client.models.position_correlation_coefficients import PositionCorrelationCoefficients
from spacetower_measurement_generation_python_client.models.position_standard_deviation import PositionStandardDeviation
from typing import Optional, Set
from typing_extensions import Self

class PositionMeasurementsRequest(MeasurementRequest):
    """
    Request for generating a measurement sample consisting of position in a specified frame
    """ # noqa: E501
    frame_id: EarthCenteredFrameId = Field(alias="frameId")
    position_standard_deviation: Optional[PositionStandardDeviation] = Field(default=None, alias="positionStandardDeviation")
    position_correlation_coefficients: Optional[PositionCorrelationCoefficients] = Field(default=None, alias="positionCorrelationCoefficients")
    noise_frame_id: Optional[NoiseFrameId] = Field(default=None, alias="noiseFrameId")
    __properties: ClassVar[List[str]] = ["measurementType", "frameId", "positionStandardDeviation", "positionCorrelationCoefficients", "noiseFrameId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PositionMeasurementsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of position_standard_deviation
        if self.position_standard_deviation:
            _dict['positionStandardDeviation'] = self.position_standard_deviation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of position_correlation_coefficients
        if self.position_correlation_coefficients:
            _dict['positionCorrelationCoefficients'] = self.position_correlation_coefficients.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PositionMeasurementsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "measurementType": obj.get("measurementType"),
            "frameId": obj.get("frameId"),
            "positionStandardDeviation": PositionStandardDeviation.from_dict(obj["positionStandardDeviation"]) if obj.get("positionStandardDeviation") is not None else None,
            "positionCorrelationCoefficients": PositionCorrelationCoefficients.from_dict(obj["positionCorrelationCoefficients"]) if obj.get("positionCorrelationCoefficients") is not None else None,
            "noiseFrameId": obj.get("noiseFrameId")
        })
        return _obj


