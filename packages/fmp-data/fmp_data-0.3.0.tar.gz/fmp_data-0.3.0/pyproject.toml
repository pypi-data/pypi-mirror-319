[tool.poetry]
name = "fmp-data"
version = "0.3.0"
description = "Python client for Financial Modeling Prep API"
authors = ["mehdizare <mehdizare@users.noreply.github.com>"]
readme = "README.md"
packages = [{ include = "fmp_data" }]
license = "MIT"
homepage = "https://github.com/MehdiZare/fmp-data"
repository = "https://github.com/MehdiZare/fmp-data"
documentation = "https://github.com/MehdiZare/fmp-data#readme"
keywords = ["fmp", "financial", "api", "stocks", "market-data", "stock market", "financial data"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "License :: OSI Approved :: Apache Software License", # Added for tenacity
    "License :: OSI Approved :: BSD License", # Added for httpx
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business :: Financial :: Investment",
    "Framework :: AsyncIO",
    "Intended Audience :: Financial and Insurance Industry",
]

include = [
    { path = "fmp_data/py.typed" }
]

[tool.poetry.urls]
"Homepage" = "https://github.com/MehdiZare/fmp-data"
"Bug Tracker" = "https://github.com/MehdiZare/fmp-data/issues"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
httpx = "^0.28.1"
pydantic = "^2.9.2"
python-dotenv = "^1.0.1"
tenacity = "^9.0.0"
tqdm = "^4.66.5"
cachetools = "^5.5.0"
structlog = "^24.4.0"
types-cachetools = "^5.5.0.20240820"
pydantic-settings = "^2.6.0"
pandas = "^2.2.3"


[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
pytest-cov = "^5.0.0"
black = "^24.10.0"
mypy = "^1.13.0"
isort = "^5.13.2"
ruff = "^0.7.1"
pytest-asyncio = "^0.24.0"
responses = "^0.25.3"
freezegun = "^1.5.1"
bandit = "^1.7.10"
rich = "^13.9.3"
pytest-mock = "^3.14.0"
pre-commit = "^4.0.1"
coverage = "^7.6.4"
vcrpy = "^6.0.2"
twine = "^5.1.1"
poetry-dynamic-versioning = "^1.4.1"
langchain = "^0.3.13"
openai = "^1.58.1"
tiktoken = "^0.8.0"
langchain-community = "^0.3.13"
langchain-openai = "^0.2.14"
faiss-cpu = "^1.9.0.post1"

[tool.poetry.group.langchain]
optional = true

[tool.poetry.group.langchain.dependencies]
langchain = "^0.3.13"
openai = "^1.58.1"
tiktoken = "^0.8.0"
langchain-community = "^0.3.13"
langchain-openai = "^0.2.14"
faiss-cpu = "^1.9.0.post1"
langgraph = "^0.2.60"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.1"
mkdocs-material = "^9.5.42"
mkdocstrings-python = "^1.12.2"


[tool.poetry.scripts]
format = "scripts:format_code"
lint = "scripts:lint"
typecheck = "scripts:typecheck"
test = "scripts:test"
security = "scripts:security_check"
fmp = "fmp_data.scripts.dev:main"
mkdocstrings-python = "mkdocstrings.cli:main"

[tool.poetry-dynamic-versioning]
enable = false
write_to = "fmp_data/__init__.py"
vcs = "git"
style = "pep440"
pattern = "v(?P<base>\\d+\\.\\d+)(?:-(?P<stage>beta|alpha))?(?:\\.(?P<rev>\\d+))?"
strict = true

format-jinja = """
{%- if env.get("TEST_PYPI_TOKEN") -%}
    {%- if stage -%}
        {{base}}{{stage[0]}}{{rev if rev else "1"}}.dev{{distance}}
    {%- else -%}
        {{base}}.0.dev{{distance}}
    {%- endif -%}
{%- else -%}
    {%- if stage -%}
        {{base}}{{stage[0]}}{{rev if rev else "1"}}
    {%- else -%}
        {{base}}.0
    {%- endif -%}
{%- endif -%}
"""



[tool.poetry-dynamic-versioning.substitution]
folders = [
    { path = "fmp_data" }
]

# Tool configurations
[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312", "py313"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
exclude = ["tests/", "examples/"]

# Plugin configs
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "vcr.*"
ignore_missing_imports = true

[tool.pydocstyle]
convention = "google"
add-select = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
]
add-ignore = [
    "D105",
    "D107",
    "D200",
    "D203",
    "D213",
    "D406",
    "D407",
]
ignore-decorators = "overrides"


[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",
    "W",
    "F",
    "I",
    "C",
    "B",
    "S",
    "UP",
]
ignore = ["S101"]
per-file-ignores = { "tests/*" = ["S101"], "scripts/*" = ["S603", "S607"], "**/conftest.py" = ["S101"], "__init__.py" = ["F401"] }



[tool.ruff.lint.isort]
known-first-party = ["fmp_data"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--quiet --no-header --tb=short -v --disable-warnings"
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]

[tool.coverage.run]
source = ["fmp_data"]
branch = true
omit = [
    "fmp_data/endpoints/definitions.py",
    "fmp_data/example.py",
    "*/__init__.py",
    "tests/*",
    "*/tests/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == '__main__':",
    "pass",
    "raise ImportError",
    "except ImportError",
    "def main()",
    "if TYPE_CHECKING:"
]
show_missing = true
fail_under = 80

[tool.coverage.html]
directory = "coverage_html"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B404", "B603", "B607"]



[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0"]
build-backend = "poetry-dynamic-versioning.backend"
