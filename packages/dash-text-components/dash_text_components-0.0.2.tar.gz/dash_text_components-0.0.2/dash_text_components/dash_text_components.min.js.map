{"version":3,"file":"dash_text_components.min.js","mappings":"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","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///external window \"React\"","webpack:///external window \"PropTypes\"","webpack:///./src/lib/components/TextInput.react.js","webpack:///./src/lib/components/AttentionHighlight.react.js","webpack:///./src/lib/components/WordCloud.react.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","var getCurrentScript = function() {\n    var script = document.currentScript;\n    if (!script) {\n        /* Shim for IE11 and below */\n        /* Do not take into account async scripts and inline scripts */\n\n        var doc_scripts = document.getElementsByTagName('script');\n        var scripts = [];\n\n        for (var i = 0; i < doc_scripts.length; i++) {\n            scripts.push(doc_scripts[i]);\n        }\n\n        scripts = scripts.filter(function(s) { return !s.async && !s.text && !s.textContent; });\n        script = scripts.slice(-1)[0];\n    }\n\n    return script;\n};\n\nvar isLocalScript = function(script) {\n    return /\\/_dash-component-suites\\//.test(script.src);\n};\n\nObject.defineProperty(__webpack_require__, 'p', {\n    get: (function () {\n        var script = getCurrentScript();\n\n        var url = script.src.split('/').slice(0, -1).join('/') + '/';\n\n        return function() {\n            return url;\n        };\n    })()\n});\n\nif (typeof jsonpScriptSrc !== 'undefined') {\n    var __jsonpScriptSrc__ = jsonpScriptSrc;\n    jsonpScriptSrc = function(chunkId) {\n        var script = getCurrentScript();\n        var isLocal = isLocalScript(script);\n\n        var src = __jsonpScriptSrc__(chunkId);\n\n        if(!isLocal) {\n            return src;\n        }\n\n        var srcFragments = src.split('/');\n        var fileFragments = srcFragments.slice(-1)[0].split('.');\n\n        fileFragments.splice(1, 0, \"v0_0_2m1736359262\");\n        srcFragments.splice(-1, 1, fileFragments.join('.'))\n\n        return srcFragments.join('/');\n    };\n}\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"React\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"PropTypes\"];","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * ExampleComponent is an example component.\n * It takes a property, `label`, and\n * displays it.\n * It renders an input with the property `value`\n * which is editable by the user.\n */\nexport default class TextInput extends Component {\n    render() {\n        const { id, label, setProps, value } = this.props;\n\n        return (\n            <div id={id}>\n                {label}\n                <input\n                    value={value}\n                    onChange={\n                        /*\n                         * Send the new value to the parent component.\n                         * setProps is a prop that is automatically supplied\n                         * by dash's front-end (\"dash-renderer\").\n                         * In a Dash app, this will update the component's\n                         * props and send the data back to the Python Dash\n                         * app server if a callback uses the modified prop as\n                         * Input or State.\n                         */\n                        e => setProps({ value: e.target.value })\n                    }\n                />\n            </div>\n        );\n    }\n}\n\nTextInput.defaultProps = {};\n\nTextInput.propTypes = {\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * A label that will be printed when this component is rendered.\n     */\n    label: PropTypes.string.isRequired,\n\n    /**\n     * The value displayed in the input.\n     */\n    value: PropTypes.string,\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * AttentionHighlight is a component that displays tokens and highlights related words\n * based on attention weights when hovering over a token.\n */\nexport default class AttentionHighlight extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hoveredIndex: null\n        };\n    }\n\n    validateProps() {\n        const { tokens, attentionMatrix } = this.props;\n        \n        if (!attentionMatrix) return true;\n        \n        // Check matrix dimensions match tokens length\n        if (attentionMatrix.length !== tokens.length) {\n            console.error('AttentionMatrix rows must match tokens length');\n            return false;\n        }\n        \n        // Check each row length and value range\n        for (let i = 0; i < attentionMatrix.length; i++) {\n            if (!attentionMatrix[i] || attentionMatrix[i].length !== tokens.length) {\n                console.error('AttentionMatrix must be square');\n                return false;\n            }\n            for (let j = 0; j < attentionMatrix[i].length; j++) {\n                if (typeof attentionMatrix[i][j] !== 'number' || \n                    attentionMatrix[i][j] < 0 || \n                    attentionMatrix[i][j] > 1) {\n                    console.error('AttentionMatrix values must be numbers between 0 and 1');\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    getHighlightColor(index, hoveredIndex, attentionWeight) {\n        if (!this.validateProps()) return 'transparent';\n        \n        if (hoveredIndex === null) {\n            // Default state: light gray background\n            return 'rgba(200, 200, 200, 0.1)';\n        }\n        \n        if (index === hoveredIndex) {\n            // Currently hovered token: blue highlight\n            return 'rgba(66, 135, 245, 0.3)';\n        }\n        \n        // Related tokens: orange highlight with intensity based on attention\n        // Scale up small values for better visibility\n        const scaledOpacity = Math.pow(attentionWeight, 0.5) * 0.8;\n        return `rgba(255, 165, 0, ${scaledOpacity})`;\n    }\n\n    render() {\n        const { id, tokens, attentionMatrix, setProps } = this.props;\n        const { hoveredIndex } = this.state;\n\n        return (\n            <div id={id} style={{ \n                lineHeight: '2em',\n                padding: '1em',\n                fontFamily: 'sans-serif'\n            }}>\n                {tokens.map((token, index) => {\n                    const attentionWeight = hoveredIndex !== null && attentionMatrix ? \n                        attentionMatrix[hoveredIndex][index] : 0;\n\n                    return (\n                        <span\n                            key={index}\n                            style={{\n                                padding: '0.4em 0.6em',\n                                margin: '0.2em',\n                                display: 'inline-block',\n                                backgroundColor: this.getHighlightColor(index, hoveredIndex, attentionWeight),\n                                transition: 'all 0.3s ease',\n                                cursor: 'pointer',\n                                border: '1px solid rgba(0, 0, 0, 0.1)',\n                                borderRadius: '4px',\n                                fontSize: '1em',\n                                boxShadow: hoveredIndex === index ? \n                                    '0 2px 4px rgba(0,0,0,0.1)' : 'none'\n                            }}\n                            onMouseEnter={() => this.setState({ hoveredIndex: index })}\n                            onMouseLeave={() => this.setState({ hoveredIndex: null })}\n                        >\n                            {token}\n                        </span>\n                    );\n                })}\n            </div>\n        );\n    }\n}\n\nAttentionHighlight.defaultProps = {\n    tokens: [],\n    attentionMatrix: null\n};\n\nAttentionHighlight.propTypes = {\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * Array of tokens to display\n     */\n    tokens: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Matrix of attention weights. Should be a 2D array where attentionMatrix[i][j]\n     * represents the attention weight from token i to token j.\n     * Values should be between 0 and 1.\n     */\n    attentionMatrix: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * WordCloud is a component that displays words with sizes proportional \n * to their frequencies or weights.\n */\nexport default class WordCloud extends Component {\n    constructor(props) {\n        super(props);\n        this.containerRef = React.createRef();\n        this.state = {\n            wordPositions: new Map(),\n            containerDimensions: { width: 500, height: 500 }\n        };\n    }\n\n    componentDidMount() {\n        this.setupResizeObserver();\n        this.updateContainerDimensions();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.words !== this.props.words || prevProps.style !== this.props.style) {\n            this.updateContainerDimensions();\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n        }\n    }\n\n    setupResizeObserver() {\n        this.resizeObserver = new ResizeObserver(entries => {\n            for (let entry of entries) {\n                const { width, height } = entry.contentRect;\n                if (width !== this.state.containerDimensions.width ||\n                    height !== this.state.containerDimensions.height) {\n                    this.setState({\n                        containerDimensions: { width, height }\n                    }, () => {\n                        this.calculateWordPositions();\n                    });\n                }\n            }\n        });\n\n        if (this.containerRef.current) {\n            this.resizeObserver.observe(this.containerRef.current);\n        }\n    }\n\n    updateContainerDimensions() {\n        if (this.containerRef.current) {\n            const { width, height } = this.containerRef.current.getBoundingClientRect();\n            this.setState({\n                containerDimensions: { width, height }\n            }, () => {\n                this.calculateWordPositions();\n            });\n        }\n    }\n\n    // Deterministic random number generator\n    seededRandom(seed) {\n        const x = Math.sin(seed++) * 10000;\n        return x - Math.floor(x);\n    }\n\n    getFontSize(weight, words) {\n        const maxWeight = Math.max(...words.map(w => w.weight));\n        const minWeight = Math.min(...words.map(w => w.weight));\n        const normalized = (weight - minWeight) / (maxWeight - minWeight);\n        return 12 + normalized * 16; // Reduced max font size\n    }\n\n    // QuadTree class for efficient collision detection\n    createQuadTree(bounds) {\n        class QuadTree {\n            constructor(bounds) {\n                this.bounds = bounds;\n                this.points = [];\n                this.children = null;\n                this.maxPoints = 4;\n            }\n\n            insert(point) {\n                if (!this.contains(point)) return false;\n\n                if (!this.children) {\n                    if (this.points.length < this.maxPoints) {\n                        this.points.push(point);\n                        return true;\n                    }\n                    this.subdivide();\n                }\n\n                if (this.children) {\n                    for (const child of this.children) {\n                        if (child.insert(point)) return true;\n                    }\n                }\n                return false;\n            }\n\n            subdivide() {\n                const { x, y, width, height } = this.bounds;\n                const w2 = width / 2;\n                const h2 = height / 2;\n\n                this.children = [\n                    { x, y, width: w2, height: h2 },\n                    { x: x + w2, y, width: w2, height: h2 },\n                    { x, y: y + h2, width: w2, height: h2 },\n                    { x: x + w2, y: y + h2, width: w2, height: h2 }\n                ].map(bounds => new QuadTree(bounds));\n\n                for (const point of this.points) {\n                    for (const child of this.children) {\n                        if (child.insert(point)) break;\n                    }\n                }\n                this.points = [];\n            }\n\n            contains(point) {\n                const { x, y, width, height } = this.bounds;\n                return point.x >= x && point.x < x + width &&\n                    point.y >= y && point.y < y + height;\n            }\n\n            query(range) {\n                const results = [];\n                if (!this.intersects(range)) return results;\n\n                if (this.children) {\n                    for (const child of this.children) {\n                        results.push(...child.query(range));\n                    }\n                } else {\n                    for (const point of this.points) {\n                        if (this.pointInRange(point, range)) {\n                            results.push(point);\n                        }\n                    }\n                }\n                return results;\n            }\n\n            intersects(range) {\n                const { x, y, width, height } = this.bounds;\n                return !(range.x > x + width ||\n                    range.x + range.width < x ||\n                    range.y > y + height ||\n                    range.y + range.height < y);\n            }\n\n            pointInRange(point, range) {\n                return point.x >= range.x && point.x < range.x + range.width &&\n                    point.y >= range.y && point.y < range.y + range.height;\n            }\n        }\n\n        return new QuadTree(bounds);\n    }\n\n    calculateWordPositions() {\n        const { words } = this.props;\n        const { width: containerWidth, height: containerHeight } = this.state.containerDimensions;\n        const centerX = containerWidth / 2;\n        const centerY = containerHeight / 2;\n        const newPositions = new Map();\n\n        // Initialize QuadTree\n        const quadTree = this.createQuadTree({\n            x: 0,\n            y: 0,\n            width: containerWidth,\n            height: containerHeight\n        });\n\n        // Force-directed placement parameters\n        const repulsionForce = 150;\n        const iterations = 100;\n        const minDistance = Math.min(containerWidth, containerHeight) * 0.5;\n\n        const placeWord = (word, fontSize, seed) => {\n            // Calculate word dimensions\n            const padding = 4; // Minimal padding\n            const wordWidth = Math.ceil(word.length * fontSize * 0.6);\n            const wordHeight = Math.ceil(fontSize * 1.2);\n            const boundingWidth = wordWidth + padding * 2;\n            const boundingHeight = wordHeight + padding * 2;\n\n            let bestPosition = null;\n            let minCollisions = Infinity;\n\n            // Initial position using golden ratio spiral\n            const goldenRatio = (1 + Math.sqrt(5)) / 2;\n            let angle = this.seededRandom(seed) * 2 * Math.PI;\n            let radius = 0;\n            const radiusStep = Math.min(containerWidth, containerHeight) * 0.02; // Reduced step size\n\n            for (let i = 0; i < iterations; i++) {\n                radius += radiusStep;\n                angle += (2 * Math.PI) / goldenRatio;\n\n                const x = centerX + radius * Math.cos(angle);\n                const y = centerY + radius * Math.sin(angle);\n\n                // Strict boundary checking\n                const safetyMargin = 4;\n                if (x < boundingWidth / 2 + safetyMargin ||\n                    x > containerWidth - boundingWidth / 2 - safetyMargin ||\n                    y < boundingHeight / 2 + safetyMargin ||\n                    y > containerHeight - boundingHeight / 2 - safetyMargin) {\n                    continue;\n                }\n\n                // Force-directed adjustments\n                let fx = 0, fy = 0;\n                const searchRange = repulsionForce * 1.5;\n                quadTree.query({\n                    x: x - searchRange,\n                    y: y - searchRange,\n                    width: searchRange * 2,\n                    height: searchRange * 2\n                }).forEach(other => {\n                    const dx = x - other.x;\n                    const dy = y - other.y;\n                    const distance = Math.sqrt(dx * dx + dy * dy);\n\n                    if (distance > 0 && distance < searchRange) {\n                        const force = repulsionForce * Math.pow(1 - distance / searchRange, 1.5);\n                        const scaleFactor = distance < minDistance ? 1.2 : 1;\n                        fx += (dx / distance) * force * scaleFactor;\n                        fy += (dy / distance) * force * scaleFactor;\n                    }\n                });\n\n                const adjustedX = x + fx;\n                const adjustedY = y + fy;\n\n                // Final boundary check after force adjustments\n                if (adjustedX < boundingWidth / 2 + safetyMargin ||\n                    adjustedX > containerWidth - boundingWidth / 2 - safetyMargin ||\n                    adjustedY < boundingHeight / 2 + safetyMargin ||\n                    adjustedY > containerHeight - boundingHeight / 2 - safetyMargin) {\n                    continue;\n                }\n\n                const collisions = quadTree.query({\n                    x: adjustedX - boundingWidth / 2,\n                    y: adjustedY - boundingHeight / 2,\n                    width: boundingWidth,\n                    height: boundingHeight\n                }).length;\n\n                if (collisions < minCollisions) {\n                    minCollisions = collisions;\n                    bestPosition = {\n                        left: adjustedX,\n                        top: adjustedY,\n                        width: boundingWidth,\n                        height: boundingHeight\n                    };\n\n                    if (minCollisions === 0) break;\n                }\n            }\n\n            if (bestPosition) {\n                quadTree.insert({\n                    x: bestPosition.left,\n                    y: bestPosition.top,\n                    width: bestPosition.width,\n                    height: bestPosition.height\n                });\n            }\n\n            return bestPosition || {\n                // Fallback position near center\n                left: centerX,\n                top: centerY,\n                width: boundingWidth,\n                height: boundingHeight\n            };\n        };\n\n        // Sort words by weight to render larger weights first\n        const sortedWords = [...words].sort((a, b) => b.weight - a.weight);\n\n        // Calculate positions for all words\n        sortedWords.forEach((word, index) => {\n            const fontSize = this.getFontSize(word.weight, words);\n            const seed = word.text.split('').reduce((acc, char) => acc + char.charCodeAt(0), index * 100);\n            const position = placeWord(word.text, fontSize, seed);\n            newPositions.set(word.text, { ...position, fontSize });\n        });\n\n        this.setState({ wordPositions: newPositions });\n    }\n\n    render() {\n        const { id, words, setProps, style } = this.props;\n        const { containerDimensions, wordPositions } = this.state;\n        const { width: containerWidth, height: containerHeight } = containerDimensions;\n\n        // Sort words by weight to maintain consistent rendering order\n        const sortedWords = [...words].sort((a, b) => b.weight - a.weight);\n\n        return (\n            <div\n                id={id}\n                ref={this.containerRef}\n                style={{\n                    position: 'relative',\n                    width: `${containerWidth}px`,\n                    height: `${containerHeight}px`,\n                    border: '1px solid #ddd',\n                    borderRadius: '4px',\n                    overflow: 'hidden',\n                    ...style\n                }}\n            >\n                {sortedWords.map((word, index) => {\n                    const position = wordPositions.get(word.text);\n                    if (!position) return null;\n                    const { left, top, width, height, fontSize } = position;\n                    return (\n                        <div\n                            key={word.text}\n                            style={{\n                                position: 'absolute',\n                                left: `${left}px`,\n                                top: `${top}px`,\n                                width: `${width}px`,\n                                height: `${height}px`,\n                                transform: 'translate(-50%, -50%)',\n                                whiteSpace: 'nowrap',\n                                display: 'flex',\n                                alignItems: 'center',\n                                justifyContent: 'center',\n                                fontSize: `${fontSize}px`,\n                                color: `hsl(${(index * 37) % 360}, 70%, 50%)`,\n                                cursor: 'pointer',\n                                userSelect: 'none',\n                                backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                                borderRadius: '4px',\n                                boxShadow: '0 1px 2px rgba(0,0,0,0.1)',\n                                transition: 'transform 0.3s ease-in-out, opacity 0.3s ease-in-out',\n                                opacity: position ? 1 : 0\n                            }}\n                            onClick={() => {\n                                if (setProps) {\n                                    setProps({ clickedWord: word.text });\n                                }\n                            }}\n                        >\n                            {word.text}\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }\n}\n\nWordCloud.defaultProps = {\n    words: []\n};\n\nWordCloud.propTypes = {\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * Array of word objects, each containing text and weight.\n     * Example: [{ text: \"hello\", weight: 5 }, { text: \"world\", weight: 3 }]\n     */\n    words: PropTypes.arrayOf(\n        PropTypes.shape({\n            text: PropTypes.string.isRequired,\n            weight: PropTypes.number.isRequired\n        })\n    ),\n\n    /**\n     * The word that was clicked in the cloud\n     */\n    clickedWord: PropTypes.string,\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func,\n\n    /**\n     * Custom CSS styles to apply to the WordCloud container.\n     */\n    style: PropTypes.object\n};\n"],"names":["url","__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","getCurrentScript","script","document","currentScript","doc_scripts","getElementsByTagName","scripts","i","length","push","filter","s","async","text","textContent","slice","src","split","join","jsonpScriptSrc","__jsonpScriptSrc__","chunkId","isLocal","test","srcFragments","fileFragments","splice","window","TextInput","_Component","_classCallCheck","_callSuper","arguments","_inherits","_this$props","this","props","id","label","setProps","React","onChange","e","target","Component","defaultProps","propTypes","PropTypes","isRequired","AttentionHighlight","_this","state","hoveredIndex","tokens","attentionMatrix","console","error","j","index","attentionWeight","validateProps","scaledOpacity","Math","pow","concat","_this2","_this$props2","style","lineHeight","padding","fontFamily","map","token","margin","display","backgroundColor","getHighlightColor","transition","cursor","border","borderRadius","fontSize","boxShadow","onMouseEnter","setState","onMouseLeave","WordCloud","containerRef","wordPositions","Map","containerDimensions","width","height","_createClass","setupResizeObserver","updateContainerDimensions","prevProps","words","resizeObserver","disconnect","ResizeObserver","entries","_step","_iterator","_createForOfIteratorHelper","n","done","_entry$contentRect","contentRect","calculateWordPositions","err","f","current","observe","_this3","_this$containerRef$cu","getBoundingClientRect","seed","x","sin","floor","weight","maxWeight","max","apply","_toConsumableArray","w","minWeight","min","bounds","QuadTree","points","children","maxPoints","point","contains","subdivide","_step2","_iterator2","insert","_this$bounds","y","w2","h2","_step3","_iterator3","_step4","_iterator4","_this$bounds2","range","results","intersects","_step5","_iterator5","child","query","_step6","_iterator6","pointInRange","_this$bounds3","_this4","_this$state$container","containerWidth","containerHeight","centerX","centerY","newPositions","quadTree","createQuadTree","minDistance","sort","b","forEach","word","getFontSize","reduce","acc","char","charCodeAt","position","_ret","wordWidth","ceil","wordHeight","boundingWidth","boundingHeight","bestPosition","minCollisions","Infinity","goldenRatio","sqrt","angle","seededRandom","PI","radius","radiusStep","_loop","cos","fx","fy","searchRange","repulsionForce","other","dx","dy","distance","force","scaleFactor","adjustedX","adjustedY","collisions","left","top","placeWord","set","_objectSpread","_this$state","sortedWords","ref","overflow","transform","whiteSpace","alignItems","justifyContent","color","userSelect","opacity","onClick","clickedWord"],"sourceRoot":""}