# Generated from PS.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,190,932,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,1,0,1,0,1,0,1,0,3,0,153,8,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,3,1,3,1,3,1,3,3,3,165,8,3,1,4,1,4,1,4,1,4,3,4,171,8,4,1,
        4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,3,7,185,8,7,1,8,1,
        8,1,8,5,8,190,8,8,10,8,12,8,193,9,8,1,9,1,9,1,9,1,9,5,9,199,8,9,
        10,9,12,9,202,9,9,1,9,3,9,205,8,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,213,
        8,9,10,9,12,9,216,9,9,1,9,3,9,219,8,9,1,9,1,9,3,9,223,8,9,1,9,1,
        9,1,9,1,9,1,9,3,9,230,8,9,1,9,1,9,1,9,1,9,3,9,236,8,9,1,10,1,10,
        1,10,1,10,5,10,242,8,10,10,10,12,10,245,9,10,1,10,3,10,248,8,10,
        1,10,1,10,1,11,1,11,1,11,5,11,255,8,11,10,11,12,11,258,9,11,1,12,
        1,12,1,12,1,12,1,12,1,12,5,12,266,8,12,10,12,12,12,269,9,12,1,13,
        1,13,1,14,1,14,1,14,1,14,1,14,5,14,278,8,14,10,14,12,14,281,9,14,
        1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,5,17,
        295,8,17,10,17,12,17,298,9,17,1,18,1,18,1,18,1,18,1,18,1,18,5,18,
        306,8,18,10,18,12,18,309,9,18,1,19,1,19,1,19,1,19,1,19,1,19,5,19,
        317,8,19,10,19,12,19,320,9,19,1,20,1,20,1,20,4,20,325,8,20,11,20,
        12,20,326,3,20,329,8,20,1,21,1,21,1,21,1,21,5,21,335,8,21,10,21,
        12,21,338,9,21,3,21,340,8,21,1,22,1,22,5,22,344,8,22,10,22,12,22,
        347,9,22,1,23,1,23,5,23,351,8,23,10,23,12,23,354,9,23,1,24,1,24,
        1,24,1,24,3,24,360,8,24,1,25,1,25,1,25,1,25,1,25,1,25,3,25,368,8,
        25,1,26,1,26,1,26,1,26,3,26,374,8,26,1,26,1,26,1,27,1,27,1,27,1,
        27,3,27,382,8,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
        28,1,28,1,28,3,28,396,8,28,1,28,3,28,399,8,28,5,28,401,8,28,10,28,
        12,28,404,9,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        3,29,416,8,29,1,29,3,29,419,8,29,5,29,421,8,29,10,29,12,29,424,9,
        29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,3,30,439,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,3,31,453,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,483,8,32,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,495,8,33,1,34,1,34,1,
        34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,3,35,513,8,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,3,37,527,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,3,38,537,8,38,1,39,1,39,3,39,541,8,39,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,3,40,552,8,40,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,3,41,561,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        3,43,585,8,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,
        1,48,1,48,1,48,1,48,3,48,601,8,48,1,49,1,49,1,49,1,49,1,49,1,49,
        3,49,609,8,49,1,50,1,50,3,50,613,8,50,1,50,3,50,616,8,50,1,50,3,
        50,619,8,50,1,50,3,50,622,8,50,3,50,624,8,50,1,50,1,50,1,50,1,50,
        1,50,3,50,631,8,50,1,50,1,50,3,50,635,8,50,1,50,3,50,638,8,50,1,
        50,3,50,641,8,50,1,50,3,50,644,8,50,3,50,646,8,50,1,50,1,50,1,50,
        1,50,1,50,3,50,653,8,50,1,50,1,50,3,50,657,8,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,3,50,679,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,3,50,702,8,50,1,50,3,50,705,8,50,1,50,1,50,1,50,3,50,710,
        8,50,1,50,1,50,1,50,1,50,1,50,3,50,717,8,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,730,8,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,3,50,740,8,50,3,50,742,8,50,1,51,1,51,1,
        51,1,51,1,51,3,51,749,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
        52,3,52,759,8,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,
        53,770,8,53,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,56,1,
        56,3,56,783,8,56,1,57,1,57,1,58,1,58,1,58,1,58,1,58,3,58,792,8,58,
        1,58,1,58,3,58,796,8,58,1,59,1,59,1,59,1,59,1,59,1,59,3,59,804,8,
        59,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,
        62,1,62,1,62,1,62,3,62,822,8,62,1,62,1,62,1,62,5,62,827,8,62,10,
        62,12,62,830,9,62,1,63,1,63,1,63,1,63,1,63,1,63,5,63,838,8,63,10,
        63,12,63,841,9,63,1,64,1,64,1,64,1,64,1,64,1,64,5,64,849,8,64,10,
        64,12,64,852,9,64,1,65,1,65,1,65,1,65,1,65,1,65,5,65,860,8,65,10,
        65,12,65,863,9,65,1,66,1,66,1,66,1,66,1,66,3,66,870,8,66,1,67,1,
        67,1,67,3,67,875,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,
        69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,
        69,1,69,1,69,1,69,1,69,3,69,903,8,69,1,70,1,70,1,70,5,70,908,8,70,
        10,70,12,70,911,9,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        3,71,922,8,71,1,72,1,72,3,72,926,8,72,1,73,1,73,1,73,1,73,1,73,0,
        10,24,34,36,38,56,58,124,126,128,130,74,0,2,4,6,8,10,12,14,16,18,
        20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
        64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
        106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
        138,140,142,144,146,0,17,1,0,1,4,1,0,5,12,1,0,162,169,1,0,163,164,
        1,0,24,25,4,0,26,27,126,128,132,132,150,150,3,0,157,157,172,173,
        182,182,3,0,66,89,103,104,107,107,2,0,101,102,105,106,6,0,90,95,
        98,99,108,108,111,112,114,117,121,125,4,0,96,97,109,110,113,113,
        118,120,1,0,64,65,2,0,157,157,172,173,2,0,162,162,190,190,1,0,188,
        189,5,0,28,28,30,30,32,32,40,40,42,42,5,0,29,29,31,31,33,33,41,41,
        43,43,1011,0,152,1,0,0,0,2,154,1,0,0,0,4,156,1,0,0,0,6,158,1,0,0,
        0,8,170,1,0,0,0,10,174,1,0,0,0,12,178,1,0,0,0,14,184,1,0,0,0,16,
        186,1,0,0,0,18,222,1,0,0,0,20,237,1,0,0,0,22,251,1,0,0,0,24,259,
        1,0,0,0,26,270,1,0,0,0,28,272,1,0,0,0,30,282,1,0,0,0,32,286,1,0,
        0,0,34,288,1,0,0,0,36,299,1,0,0,0,38,310,1,0,0,0,40,328,1,0,0,0,
        42,339,1,0,0,0,44,341,1,0,0,0,46,348,1,0,0,0,48,359,1,0,0,0,50,361,
        1,0,0,0,52,369,1,0,0,0,54,377,1,0,0,0,56,385,1,0,0,0,58,405,1,0,
        0,0,60,438,1,0,0,0,62,452,1,0,0,0,64,482,1,0,0,0,66,494,1,0,0,0,
        68,496,1,0,0,0,70,512,1,0,0,0,72,514,1,0,0,0,74,526,1,0,0,0,76,536,
        1,0,0,0,78,538,1,0,0,0,80,542,1,0,0,0,82,560,1,0,0,0,84,562,1,0,
        0,0,86,584,1,0,0,0,88,586,1,0,0,0,90,588,1,0,0,0,92,590,1,0,0,0,
        94,592,1,0,0,0,96,600,1,0,0,0,98,608,1,0,0,0,100,741,1,0,0,0,102,
        748,1,0,0,0,104,758,1,0,0,0,106,760,1,0,0,0,108,773,1,0,0,0,110,
        775,1,0,0,0,112,782,1,0,0,0,114,784,1,0,0,0,116,786,1,0,0,0,118,
        797,1,0,0,0,120,805,1,0,0,0,122,810,1,0,0,0,124,821,1,0,0,0,126,
        831,1,0,0,0,128,842,1,0,0,0,130,853,1,0,0,0,132,869,1,0,0,0,134,
        874,1,0,0,0,136,876,1,0,0,0,138,902,1,0,0,0,140,904,1,0,0,0,142,
        921,1,0,0,0,144,925,1,0,0,0,146,927,1,0,0,0,148,153,3,24,12,0,149,
        153,3,26,13,0,150,153,3,124,62,0,151,153,3,140,70,0,152,148,1,0,
        0,0,152,149,1,0,0,0,152,150,1,0,0,0,152,151,1,0,0,0,153,1,1,0,0,
        0,154,155,7,0,0,0,155,3,1,0,0,0,156,157,7,1,0,0,157,5,1,0,0,0,158,
        159,5,157,0,0,159,164,5,148,0,0,160,165,5,160,0,0,161,162,5,34,0,
        0,162,163,5,160,0,0,163,165,5,35,0,0,164,160,1,0,0,0,164,161,1,0,
        0,0,165,7,1,0,0,0,166,171,3,32,16,0,167,171,3,64,32,0,168,171,5,
        24,0,0,169,171,5,25,0,0,170,166,1,0,0,0,170,167,1,0,0,0,170,168,
        1,0,0,0,170,169,1,0,0,0,171,172,1,0,0,0,172,173,3,6,3,0,173,9,1,
        0,0,0,174,175,3,6,3,0,175,176,5,159,0,0,176,177,3,6,3,0,177,11,1,
        0,0,0,178,179,3,6,3,0,179,180,3,8,4,0,180,13,1,0,0,0,181,185,3,12,
        6,0,182,185,3,8,4,0,183,185,3,10,5,0,184,181,1,0,0,0,184,182,1,0,
        0,0,184,183,1,0,0,0,185,15,1,0,0,0,186,191,3,14,7,0,187,188,5,152,
        0,0,188,190,3,14,7,0,189,187,1,0,0,0,190,193,1,0,0,0,191,189,1,0,
        0,0,191,192,1,0,0,0,192,17,1,0,0,0,193,191,1,0,0,0,194,195,5,140,
        0,0,195,200,3,22,11,0,196,197,5,147,0,0,197,199,3,22,11,0,198,196,
        1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,204,
        1,0,0,0,202,200,1,0,0,0,203,205,5,147,0,0,204,203,1,0,0,0,204,205,
        1,0,0,0,205,206,1,0,0,0,206,207,5,141,0,0,207,223,1,0,0,0,208,209,
        5,142,0,0,209,214,3,22,11,0,210,211,5,147,0,0,211,213,3,22,11,0,
        212,210,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,
        215,218,1,0,0,0,216,214,1,0,0,0,217,219,5,147,0,0,218,217,1,0,0,
        0,218,219,1,0,0,0,219,220,1,0,0,0,220,221,5,143,0,0,221,223,1,0,
        0,0,222,194,1,0,0,0,222,208,1,0,0,0,223,235,1,0,0,0,224,229,5,158,
        0,0,225,226,5,40,0,0,226,227,3,16,8,0,227,228,5,41,0,0,228,230,1,
        0,0,0,229,225,1,0,0,0,229,230,1,0,0,0,230,231,1,0,0,0,231,232,5,
        34,0,0,232,233,3,16,8,0,233,234,5,35,0,0,234,236,1,0,0,0,235,224,
        1,0,0,0,235,236,1,0,0,0,236,19,1,0,0,0,237,238,5,144,0,0,238,243,
        3,22,11,0,239,240,5,147,0,0,240,242,3,22,11,0,241,239,1,0,0,0,242,
        245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,247,1,0,0,0,245,
        243,1,0,0,0,246,248,5,147,0,0,247,246,1,0,0,0,247,248,1,0,0,0,248,
        249,1,0,0,0,249,250,5,145,0,0,250,21,1,0,0,0,251,256,3,32,16,0,252,
        253,5,146,0,0,253,255,3,32,16,0,254,252,1,0,0,0,255,258,1,0,0,0,
        256,254,1,0,0,0,256,257,1,0,0,0,257,23,1,0,0,0,258,256,1,0,0,0,259,
        260,6,12,-1,0,260,261,3,32,16,0,261,267,1,0,0,0,262,263,10,2,0,0,
        263,264,7,2,0,0,264,266,3,24,12,3,265,262,1,0,0,0,266,269,1,0,0,
        0,267,265,1,0,0,0,267,268,1,0,0,0,268,25,1,0,0,0,269,267,1,0,0,0,
        270,271,3,28,14,0,271,27,1,0,0,0,272,273,3,24,12,0,273,274,5,151,
        0,0,274,279,3,24,12,0,275,276,5,151,0,0,276,278,3,24,12,0,277,275,
        1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,29,1,
        0,0,0,281,279,1,0,0,0,282,283,3,32,16,0,283,284,7,3,0,0,284,285,
        3,32,16,0,285,31,1,0,0,0,286,287,3,34,17,0,287,33,1,0,0,0,288,289,
        6,17,-1,0,289,290,3,36,18,0,290,296,1,0,0,0,291,292,10,2,0,0,292,
        293,7,4,0,0,293,295,3,34,17,3,294,291,1,0,0,0,295,298,1,0,0,0,296,
        294,1,0,0,0,296,297,1,0,0,0,297,35,1,0,0,0,298,296,1,0,0,0,299,300,
        6,18,-1,0,300,301,3,40,20,0,301,307,1,0,0,0,302,303,10,2,0,0,303,
        304,7,5,0,0,304,306,3,36,18,3,305,302,1,0,0,0,306,309,1,0,0,0,307,
        305,1,0,0,0,307,308,1,0,0,0,308,37,1,0,0,0,309,307,1,0,0,0,310,311,
        6,19,-1,0,311,312,3,42,21,0,312,318,1,0,0,0,313,314,10,2,0,0,314,
        315,7,5,0,0,315,317,3,38,19,3,316,313,1,0,0,0,317,320,1,0,0,0,318,
        316,1,0,0,0,318,319,1,0,0,0,319,39,1,0,0,0,320,318,1,0,0,0,321,322,
        7,4,0,0,322,329,3,40,20,0,323,325,3,44,22,0,324,323,1,0,0,0,325,
        326,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,329,1,0,0,0,328,
        321,1,0,0,0,328,324,1,0,0,0,329,41,1,0,0,0,330,331,7,4,0,0,331,340,
        3,42,21,0,332,336,3,44,22,0,333,335,3,46,23,0,334,333,1,0,0,0,335,
        338,1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,340,1,0,0,0,338,
        336,1,0,0,0,339,330,1,0,0,0,339,332,1,0,0,0,340,43,1,0,0,0,341,345,
        3,56,28,0,342,344,3,48,24,0,343,342,1,0,0,0,344,347,1,0,0,0,345,
        343,1,0,0,0,345,346,1,0,0,0,346,45,1,0,0,0,347,345,1,0,0,0,348,352,
        3,58,29,0,349,351,3,48,24,0,350,349,1,0,0,0,351,354,1,0,0,0,352,
        350,1,0,0,0,352,353,1,0,0,0,353,47,1,0,0,0,354,352,1,0,0,0,355,360,
        5,170,0,0,356,360,3,50,25,0,357,360,3,2,1,0,358,360,3,4,2,0,359,
        355,1,0,0,0,359,356,1,0,0,0,359,357,1,0,0,0,359,358,1,0,0,0,360,
        49,1,0,0,0,361,367,5,46,0,0,362,368,3,54,27,0,363,368,3,52,26,0,
        364,365,3,54,27,0,365,366,3,52,26,0,366,368,1,0,0,0,367,362,1,0,
        0,0,367,363,1,0,0,0,367,364,1,0,0,0,368,51,1,0,0,0,369,370,5,148,
        0,0,370,373,5,34,0,0,371,374,3,32,16,0,372,374,3,30,15,0,373,371,
        1,0,0,0,373,372,1,0,0,0,374,375,1,0,0,0,375,376,5,35,0,0,376,53,
        1,0,0,0,377,378,5,149,0,0,378,381,5,34,0,0,379,382,3,32,16,0,380,
        382,3,30,15,0,381,379,1,0,0,0,381,380,1,0,0,0,382,383,1,0,0,0,383,
        384,5,35,0,0,384,55,1,0,0,0,385,386,6,28,-1,0,386,387,3,60,30,0,
        387,402,1,0,0,0,388,389,10,2,0,0,389,395,5,149,0,0,390,396,3,82,
        41,0,391,392,5,34,0,0,392,393,3,32,16,0,393,394,5,35,0,0,394,396,
        1,0,0,0,395,390,1,0,0,0,395,391,1,0,0,0,396,398,1,0,0,0,397,399,
        3,116,58,0,398,397,1,0,0,0,398,399,1,0,0,0,399,401,1,0,0,0,400,388,
        1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,57,1,
        0,0,0,404,402,1,0,0,0,405,406,6,29,-1,0,406,407,3,62,31,0,407,422,
        1,0,0,0,408,409,10,2,0,0,409,415,5,149,0,0,410,416,3,82,41,0,411,
        412,5,34,0,0,412,413,3,32,16,0,413,414,5,35,0,0,414,416,1,0,0,0,
        415,410,1,0,0,0,415,411,1,0,0,0,416,418,1,0,0,0,417,419,3,116,58,
        0,418,417,1,0,0,0,418,419,1,0,0,0,419,421,1,0,0,0,420,408,1,0,0,
        0,421,424,1,0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,423,59,1,0,0,0,
        424,422,1,0,0,0,425,439,3,64,32,0,426,439,3,66,33,0,427,439,3,68,
        34,0,428,439,3,70,35,0,429,439,3,72,36,0,430,439,3,74,37,0,431,439,
        3,76,38,0,432,439,3,100,50,0,433,439,3,82,41,0,434,439,3,84,42,0,
        435,439,3,86,43,0,436,439,3,18,9,0,437,439,3,20,10,0,438,425,1,0,
        0,0,438,426,1,0,0,0,438,427,1,0,0,0,438,428,1,0,0,0,438,429,1,0,
        0,0,438,430,1,0,0,0,438,431,1,0,0,0,438,432,1,0,0,0,438,433,1,0,
        0,0,438,434,1,0,0,0,438,435,1,0,0,0,438,436,1,0,0,0,438,437,1,0,
        0,0,439,61,1,0,0,0,440,453,3,64,32,0,441,453,3,66,33,0,442,453,3,
        68,34,0,443,453,3,70,35,0,444,453,3,72,36,0,445,453,3,74,37,0,446,
        453,3,76,38,0,447,453,3,82,41,0,448,453,3,84,42,0,449,453,3,86,43,
        0,450,453,3,18,9,0,451,453,3,20,10,0,452,440,1,0,0,0,452,441,1,0,
        0,0,452,442,1,0,0,0,452,443,1,0,0,0,452,444,1,0,0,0,452,445,1,0,
        0,0,452,446,1,0,0,0,452,447,1,0,0,0,452,448,1,0,0,0,452,449,1,0,
        0,0,452,450,1,0,0,0,452,451,1,0,0,0,453,63,1,0,0,0,454,455,5,28,
        0,0,455,456,3,32,16,0,456,457,5,29,0,0,457,483,1,0,0,0,458,459,5,
        32,0,0,459,460,3,32,16,0,460,461,5,33,0,0,461,483,1,0,0,0,462,463,
        5,34,0,0,463,464,3,32,16,0,464,465,5,35,0,0,465,483,1,0,0,0,466,
        467,5,40,0,0,467,468,3,32,16,0,468,469,5,41,0,0,469,483,1,0,0,0,
        470,471,5,36,0,0,471,472,3,32,16,0,472,473,5,37,0,0,473,483,1,0,
        0,0,474,475,5,38,0,0,475,476,3,32,16,0,476,477,5,39,0,0,477,483,
        1,0,0,0,478,479,5,42,0,0,479,480,3,32,16,0,480,481,5,43,0,0,481,
        483,1,0,0,0,482,454,1,0,0,0,482,458,1,0,0,0,482,462,1,0,0,0,482,
        466,1,0,0,0,482,470,1,0,0,0,482,474,1,0,0,0,482,478,1,0,0,0,483,
        65,1,0,0,0,484,485,5,44,0,0,485,486,5,34,0,0,486,487,3,32,16,0,487,
        488,5,35,0,0,488,495,1,0,0,0,489,490,5,45,0,0,490,491,5,34,0,0,491,
        492,3,32,16,0,492,493,5,35,0,0,493,495,1,0,0,0,494,484,1,0,0,0,494,
        489,1,0,0,0,495,67,1,0,0,0,496,497,5,50,0,0,497,498,3,32,16,0,498,
        499,5,50,0,0,499,69,1,0,0,0,500,501,5,46,0,0,501,502,3,32,16,0,502,
        503,5,46,0,0,503,513,1,0,0,0,504,505,5,47,0,0,505,506,3,32,16,0,
        506,507,5,48,0,0,507,513,1,0,0,0,508,509,5,49,0,0,509,510,3,32,16,
        0,510,511,5,49,0,0,511,513,1,0,0,0,512,500,1,0,0,0,512,504,1,0,0,
        0,512,508,1,0,0,0,513,71,1,0,0,0,514,515,5,51,0,0,515,516,3,32,16,
        0,516,517,5,52,0,0,517,73,1,0,0,0,518,519,5,53,0,0,519,520,3,32,
        16,0,520,521,5,54,0,0,521,527,1,0,0,0,522,523,5,55,0,0,523,524,3,
        32,16,0,524,525,5,56,0,0,525,527,1,0,0,0,526,518,1,0,0,0,526,522,
        1,0,0,0,527,75,1,0,0,0,528,529,5,57,0,0,529,530,3,32,16,0,530,531,
        5,58,0,0,531,537,1,0,0,0,532,533,5,59,0,0,533,534,3,32,16,0,534,
        535,5,60,0,0,535,537,1,0,0,0,536,528,1,0,0,0,536,532,1,0,0,0,537,
        77,1,0,0,0,538,540,7,6,0,0,539,541,3,116,58,0,540,539,1,0,0,0,540,
        541,1,0,0,0,541,79,1,0,0,0,542,551,7,6,0,0,543,544,3,118,59,0,544,
        545,3,116,58,0,545,552,1,0,0,0,546,547,3,116,58,0,547,548,3,118,
        59,0,548,552,1,0,0,0,549,552,3,116,58,0,550,552,3,118,59,0,551,543,
        1,0,0,0,551,546,1,0,0,0,551,549,1,0,0,0,551,550,1,0,0,0,551,552,
        1,0,0,0,552,81,1,0,0,0,553,561,3,80,40,0,554,561,5,174,0,0,555,561,
        5,160,0,0,556,561,5,171,0,0,557,561,5,161,0,0,558,561,5,154,0,0,
        559,561,5,175,0,0,560,553,1,0,0,0,560,554,1,0,0,0,560,555,1,0,0,
        0,560,556,1,0,0,0,560,557,1,0,0,0,560,558,1,0,0,0,560,559,1,0,0,
        0,561,83,1,0,0,0,562,563,5,129,0,0,563,564,5,34,0,0,564,565,3,32,
        16,0,565,566,5,35,0,0,566,567,5,34,0,0,567,568,3,32,16,0,568,569,
        5,35,0,0,569,85,1,0,0,0,570,571,5,34,0,0,571,572,3,32,16,0,572,573,
        5,131,0,0,573,574,3,32,16,0,574,575,5,35,0,0,575,585,1,0,0,0,576,
        577,5,130,0,0,577,578,5,34,0,0,578,579,3,32,16,0,579,580,5,35,0,
        0,580,581,5,34,0,0,581,582,3,32,16,0,582,583,5,35,0,0,583,585,1,
        0,0,0,584,570,1,0,0,0,584,576,1,0,0,0,585,87,1,0,0,0,586,587,7,7,
        0,0,587,89,1,0,0,0,588,589,7,8,0,0,589,91,1,0,0,0,590,591,7,9,0,
        0,591,93,1,0,0,0,592,593,7,10,0,0,593,95,1,0,0,0,594,601,3,88,44,
        0,595,596,5,134,0,0,596,597,5,34,0,0,597,598,3,92,46,0,598,599,5,
        35,0,0,599,601,1,0,0,0,600,594,1,0,0,0,600,595,1,0,0,0,601,97,1,
        0,0,0,602,609,3,90,45,0,603,604,5,134,0,0,604,605,5,34,0,0,605,606,
        3,94,47,0,606,607,5,35,0,0,607,609,1,0,0,0,608,602,1,0,0,0,608,603,
        1,0,0,0,609,99,1,0,0,0,610,623,3,96,48,0,611,613,3,116,58,0,612,
        611,1,0,0,0,612,613,1,0,0,0,613,615,1,0,0,0,614,616,3,118,59,0,615,
        614,1,0,0,0,615,616,1,0,0,0,616,624,1,0,0,0,617,619,3,118,59,0,618,
        617,1,0,0,0,618,619,1,0,0,0,619,621,1,0,0,0,620,622,3,116,58,0,621,
        620,1,0,0,0,621,622,1,0,0,0,622,624,1,0,0,0,623,612,1,0,0,0,623,
        618,1,0,0,0,624,630,1,0,0,0,625,626,5,28,0,0,626,627,3,108,54,0,
        627,628,5,29,0,0,628,631,1,0,0,0,629,631,3,110,55,0,630,625,1,0,
        0,0,630,629,1,0,0,0,631,742,1,0,0,0,632,645,3,98,49,0,633,635,3,
        116,58,0,634,633,1,0,0,0,634,635,1,0,0,0,635,637,1,0,0,0,636,638,
        3,118,59,0,637,636,1,0,0,0,637,638,1,0,0,0,638,646,1,0,0,0,639,641,
        3,118,59,0,640,639,1,0,0,0,640,641,1,0,0,0,641,643,1,0,0,0,642,644,
        3,116,58,0,643,642,1,0,0,0,643,644,1,0,0,0,644,646,1,0,0,0,645,634,
        1,0,0,0,645,640,1,0,0,0,646,652,1,0,0,0,647,648,5,28,0,0,648,649,
        3,112,56,0,649,650,5,29,0,0,650,653,1,0,0,0,651,653,3,114,57,0,652,
        647,1,0,0,0,652,651,1,0,0,0,653,742,1,0,0,0,654,656,3,78,39,0,655,
        657,3,118,59,0,656,655,1,0,0,0,656,657,1,0,0,0,657,678,1,0,0,0,658,
        659,5,28,0,0,659,660,3,104,52,0,660,661,5,29,0,0,661,679,1,0,0,0,
        662,663,5,40,0,0,663,664,3,104,52,0,664,665,5,41,0,0,665,679,1,0,
        0,0,666,667,5,34,0,0,667,668,5,28,0,0,668,669,3,104,52,0,669,670,
        5,29,0,0,670,671,5,35,0,0,671,679,1,0,0,0,672,673,5,34,0,0,673,674,
        5,40,0,0,674,675,3,104,52,0,675,676,5,41,0,0,676,677,5,35,0,0,677,
        679,1,0,0,0,678,658,1,0,0,0,678,662,1,0,0,0,678,666,1,0,0,0,678,
        672,1,0,0,0,679,742,1,0,0,0,680,701,5,63,0,0,681,682,3,116,58,0,
        682,683,3,118,59,0,683,702,1,0,0,0,684,685,3,118,59,0,685,686,3,
        116,58,0,686,702,1,0,0,0,687,688,5,148,0,0,688,689,5,34,0,0,689,
        690,5,35,0,0,690,691,1,0,0,0,691,692,5,149,0,0,692,693,5,34,0,0,
        693,702,5,35,0,0,694,695,5,149,0,0,695,696,5,34,0,0,696,697,5,35,
        0,0,697,698,1,0,0,0,698,699,5,148,0,0,699,700,5,34,0,0,700,702,5,
        35,0,0,701,681,1,0,0,0,701,684,1,0,0,0,701,687,1,0,0,0,701,694,1,
        0,0,0,701,702,1,0,0,0,702,709,1,0,0,0,703,705,3,34,17,0,704,703,
        1,0,0,0,704,705,1,0,0,0,705,706,1,0,0,0,706,710,5,154,0,0,707,710,
        3,84,42,0,708,710,3,34,17,0,709,704,1,0,0,0,709,707,1,0,0,0,709,
        708,1,0,0,0,710,742,1,0,0,0,711,716,5,100,0,0,712,713,5,40,0,0,713,
        714,3,32,16,0,714,715,5,41,0,0,715,717,1,0,0,0,716,712,1,0,0,0,716,
        717,1,0,0,0,717,718,1,0,0,0,718,719,5,34,0,0,719,720,3,32,16,0,720,
        721,5,35,0,0,721,742,1,0,0,0,722,729,7,11,0,0,723,724,3,120,60,0,
        724,725,3,118,59,0,725,730,1,0,0,0,726,727,3,118,59,0,727,728,3,
        120,60,0,728,730,1,0,0,0,729,723,1,0,0,0,729,726,1,0,0,0,730,731,
        1,0,0,0,731,732,3,36,18,0,732,742,1,0,0,0,733,734,5,61,0,0,734,735,
        3,106,53,0,735,736,3,36,18,0,736,742,1,0,0,0,737,739,5,155,0,0,738,
        740,3,118,59,0,739,738,1,0,0,0,739,740,1,0,0,0,740,742,1,0,0,0,741,
        610,1,0,0,0,741,632,1,0,0,0,741,654,1,0,0,0,741,680,1,0,0,0,741,
        711,1,0,0,0,741,722,1,0,0,0,741,733,1,0,0,0,741,737,1,0,0,0,742,
        101,1,0,0,0,743,744,3,32,16,0,744,745,5,152,0,0,745,746,3,102,51,
        0,746,749,1,0,0,0,747,749,3,32,16,0,748,743,1,0,0,0,748,747,1,0,
        0,0,749,103,1,0,0,0,750,759,3,82,41,0,751,752,3,32,16,0,752,753,
        5,152,0,0,753,759,1,0,0,0,754,755,3,32,16,0,755,756,5,152,0,0,756,
        757,3,102,51,0,757,759,1,0,0,0,758,750,1,0,0,0,758,751,1,0,0,0,758,
        754,1,0,0,0,759,105,1,0,0,0,760,761,5,148,0,0,761,762,5,34,0,0,762,
        763,7,12,0,0,763,764,5,62,0,0,764,769,3,32,16,0,765,766,5,149,0,
        0,766,767,5,34,0,0,767,768,7,4,0,0,768,770,5,35,0,0,769,765,1,0,
        0,0,769,770,1,0,0,0,770,771,1,0,0,0,771,772,5,35,0,0,772,107,1,0,
        0,0,773,774,3,32,16,0,774,109,1,0,0,0,775,776,3,38,19,0,776,111,
        1,0,0,0,777,783,3,32,16,0,778,779,3,32,16,0,779,780,5,152,0,0,780,
        781,3,112,56,0,781,783,1,0,0,0,782,777,1,0,0,0,782,778,1,0,0,0,783,
        113,1,0,0,0,784,785,3,38,19,0,785,115,1,0,0,0,786,795,5,148,0,0,
        787,796,3,82,41,0,788,791,5,34,0,0,789,792,3,32,16,0,790,792,3,102,
        51,0,791,789,1,0,0,0,791,790,1,0,0,0,792,793,1,0,0,0,793,794,5,35,
        0,0,794,796,1,0,0,0,795,787,1,0,0,0,795,788,1,0,0,0,796,117,1,0,
        0,0,797,803,5,149,0,0,798,804,3,82,41,0,799,800,5,34,0,0,800,801,
        3,32,16,0,801,802,5,35,0,0,802,804,1,0,0,0,803,798,1,0,0,0,803,799,
        1,0,0,0,804,119,1,0,0,0,805,806,5,148,0,0,806,807,5,34,0,0,807,808,
        3,30,15,0,808,809,5,35,0,0,809,121,1,0,0,0,810,811,5,148,0,0,811,
        812,5,34,0,0,812,813,3,30,15,0,813,814,5,35,0,0,814,123,1,0,0,0,
        815,816,6,62,-1,0,816,817,3,32,16,0,817,818,7,13,0,0,818,819,3,124,
        62,2,819,822,1,0,0,0,820,822,3,126,63,0,821,815,1,0,0,0,821,820,
        1,0,0,0,822,828,1,0,0,0,823,824,10,3,0,0,824,825,7,14,0,0,825,827,
        3,124,62,4,826,823,1,0,0,0,827,830,1,0,0,0,828,826,1,0,0,0,828,829,
        1,0,0,0,829,125,1,0,0,0,830,828,1,0,0,0,831,832,6,63,-1,0,832,833,
        3,128,64,0,833,839,1,0,0,0,834,835,10,2,0,0,835,836,5,185,0,0,836,
        838,3,126,63,3,837,834,1,0,0,0,838,841,1,0,0,0,839,837,1,0,0,0,839,
        840,1,0,0,0,840,127,1,0,0,0,841,839,1,0,0,0,842,843,6,64,-1,0,843,
        844,3,130,65,0,844,850,1,0,0,0,845,846,10,2,0,0,846,847,5,183,0,
        0,847,849,3,128,64,3,848,845,1,0,0,0,849,852,1,0,0,0,850,848,1,0,
        0,0,850,851,1,0,0,0,851,129,1,0,0,0,852,850,1,0,0,0,853,854,6,65,
        -1,0,854,855,3,132,66,0,855,861,1,0,0,0,856,857,10,2,0,0,857,858,
        5,184,0,0,858,860,3,130,65,3,859,856,1,0,0,0,860,863,1,0,0,0,861,
        859,1,0,0,0,861,862,1,0,0,0,862,131,1,0,0,0,863,861,1,0,0,0,864,
        865,5,28,0,0,865,866,3,126,63,0,866,867,5,29,0,0,867,870,1,0,0,0,
        868,870,3,134,67,0,869,864,1,0,0,0,869,868,1,0,0,0,870,133,1,0,0,
        0,871,875,3,142,71,0,872,875,3,136,68,0,873,875,3,138,69,0,874,871,
        1,0,0,0,874,872,1,0,0,0,874,873,1,0,0,0,875,135,1,0,0,0,876,877,
        7,15,0,0,877,878,3,32,16,0,878,879,5,152,0,0,879,880,3,32,16,0,880,
        881,7,16,0,0,881,137,1,0,0,0,882,883,5,34,0,0,883,884,3,140,70,0,
        884,885,5,35,0,0,885,903,1,0,0,0,886,887,5,28,0,0,887,888,3,140,
        70,0,888,889,5,29,0,0,889,903,1,0,0,0,890,891,5,30,0,0,891,892,3,
        140,70,0,892,893,5,31,0,0,893,903,1,0,0,0,894,895,5,40,0,0,895,896,
        3,140,70,0,896,897,5,41,0,0,897,903,1,0,0,0,898,899,5,36,0,0,899,
        900,3,140,70,0,900,901,5,37,0,0,901,903,1,0,0,0,902,882,1,0,0,0,
        902,886,1,0,0,0,902,890,1,0,0,0,902,894,1,0,0,0,902,898,1,0,0,0,
        903,139,1,0,0,0,904,909,3,144,72,0,905,906,5,152,0,0,906,908,3,144,
        72,0,907,905,1,0,0,0,908,911,1,0,0,0,909,907,1,0,0,0,909,910,1,0,
        0,0,910,141,1,0,0,0,911,909,1,0,0,0,912,922,5,176,0,0,913,922,5,
        177,0,0,914,922,5,178,0,0,915,922,5,179,0,0,916,922,5,180,0,0,917,
        922,5,181,0,0,918,922,5,187,0,0,919,920,5,34,0,0,920,922,5,35,0,
        0,921,912,1,0,0,0,921,913,1,0,0,0,921,914,1,0,0,0,921,915,1,0,0,
        0,921,916,1,0,0,0,921,917,1,0,0,0,921,918,1,0,0,0,921,919,1,0,0,
        0,922,143,1,0,0,0,923,926,3,146,73,0,924,926,3,32,16,0,925,923,1,
        0,0,0,925,924,1,0,0,0,926,145,1,0,0,0,927,928,3,32,16,0,928,929,
        5,186,0,0,929,930,3,32,16,0,930,147,1,0,0,0,88,152,164,170,184,191,
        200,204,214,218,222,229,235,243,247,256,267,279,296,307,318,326,
        328,336,339,345,352,359,367,373,381,395,398,402,415,418,422,438,
        452,482,494,512,526,536,540,551,560,584,600,608,612,615,618,621,
        623,630,634,637,640,643,645,652,656,678,701,704,709,716,729,739,
        741,748,758,769,782,791,795,803,821,828,839,850,861,869,874,902,
        909,921,925
    ]

class PSParser ( Parser ):

    grammarFileName = "PS.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'^T'", "'^{T}'", "'^{\\\\top}'", "'''", 
                     "'^\\circ'", "'^\\degree'", "'^\\circle'", "'^\\u00B0'", 
                     "'^{\\circ}'", "'^{\\degree}'", "'^{\\circle}'", "'^{\\u00B0}'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'\\quad'", "'\\qquad'", "<INVALID>", "'\\negmedspace'", 
                     "'\\negthickspace'", "'\\$'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'('", "')'", 
                     "'\\('", "'\\)'", "'\\lgroup'", "'\\rgroup'", "'{'", 
                     "'}'", "'\\{'", "'\\}'", "'\\lbrace'", "'\\rbrace'", 
                     "'['", "']'", "'\\lbrack'", "'\\rbrack'", "'\\phantom'", 
                     "'\\boxed'", "'|'", "'\\lvert'", "'\\rvert'", "'\\vert'", 
                     "'\\|'", "'\\langle'", "'\\rangle'", "'\\lfloor'", 
                     "'\\rfloor'", "'\\llcorner'", "'\\lrcorner'", "'\\lceil'", 
                     "'\\rceil'", "'\\ulcorner'", "'\\urcorner'", "'\\lim'", 
                     "<INVALID>", "'\\int'", "'\\sum'", "'\\prod'", "'\\log'", 
                     "'\\ln'", "'\\exp'", "'\\sin'", "'\\cos'", "'\\tan'", 
                     "'\\csc'", "'\\sec'", "'\\cot'", "'\\arcsin'", "'\\arccos'", 
                     "'\\arctan'", "'\\arccsc'", "'\\arcsec'", "'\\arccot'", 
                     "'\\sinh'", "'\\cosh'", "'\\tanh'", "'\\arsinh'", "'\\arcosh'", 
                     "'\\artanh'", "'\\arcsinh'", "'\\arccosh'", "'\\arctanh'", 
                     "'arsinh'", "'arcsinh'", "'arcosh'", "'arccosh'", "'artanh'", 
                     "'arctanh'", "'gcd'", "'lcm'", "'floor'", "'ceil'", 
                     "'\\sqrt'", "'\\gcd'", "'\\lcm'", "'\\floor'", "'\\ceil'", 
                     "'\\max'", "'\\min'", "'\\det'", "'eye'", "'zeros'", 
                     "'ones'", "'cols'", "'rows'", "'diag'", "'norm'", "'rank'", 
                     "<INVALID>", "'rref'", "'hstack'", "'vstack'", "<INVALID>", 
                     "'nullspace'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'\\times'", "'\\cdot'", "'\\div'", "<INVALID>", 
                     "<INVALID>", "'\\choose'", "'\\mod'", "'\\mathit'", 
                     "'\\operatorname'", "'matrix'", "'pmatrix'", "'bmatrix'", 
                     "'vmatrix'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'&'", "'\\\\'", "'_'", "'^'", "':'", "';'", "','", 
                     "'.'", "<INVALID>", "<INVALID>", "'E'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'\\in'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'!'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "WS", "THINSPACE", "MEDSPACE", "THICKSPACE", 
                      "QUAD", "QQUAD", "NEGTHINSPACE", "NEGMEDSPACE", "NEGTHICKSPACE", 
                      "DOLLAR_SIGN", "IGNORE", "ADD", "SUB", "MUL", "DIV", 
                      "L_PAREN", "R_PAREN", "L_PAREN_VISUAL", "R_PAREN_VISUAL", 
                      "L_GROUP", "R_GROUP", "L_BRACE", "R_BRACE", "L_BRACE_VISUAL", 
                      "R_BRACE_VISUAL", "L_BRACE_CMD", "R_BRACE_CMD", "L_BRACKET", 
                      "R_BRACKET", "L_BRACK", "R_BRACK", "PHANTOM_CMD", 
                      "BOXED_CMD", "BAR", "L_VERT", "R_VERT", "VERT", "NORM", 
                      "L_ANGLE", "R_ANGLE", "L_FLOOR", "R_FLOOR", "LL_CORNER", 
                      "LR_CORNER", "L_CEIL", "R_CEIL", "UL_CORNER", "UR_CORNER", 
                      "FUNC_LIM", "LIM_APPROACH_SYM", "FUNC_INT", "FUNC_SUM", 
                      "FUNC_PROD", "FUNC_LOG", "FUNC_LN", "FUNC_EXP", "FUNC_SIN", 
                      "FUNC_COS", "FUNC_TAN", "FUNC_CSC", "FUNC_SEC", "FUNC_COT", 
                      "FUNC_ARCSIN", "FUNC_ARCCOS", "FUNC_ARCTAN", "FUNC_ARCCSC", 
                      "FUNC_ARCSEC", "FUNC_ARCCOT", "FUNC_SINH", "FUNC_COSH", 
                      "FUNC_TANH", "FUNC_ARSINH", "FUNC_ARCOSH", "FUNC_ARTANH", 
                      "FUNC_ARCSINH", "FUNC_ARCCOSH", "FUNC_ARCTANH", "FUNC_ARSINH_NAME", 
                      "FUNC_ARCSINH_NAME", "FUNC_ARCOSH_NAME", "FUNC_ARCCOSH_NAME", 
                      "FUNC_ARTANH_NAME", "FUNC_ARCTANH_NAME", "FUNC_GCD_NAME", 
                      "FUNC_LCM_NAME", "FUNC_FLOOR_NAME", "FUNC_CEIL_NAME", 
                      "FUNC_SQRT", "FUNC_GCD", "FUNC_LCM", "FUNC_FLOOR", 
                      "FUNC_CEIL", "FUNC_MAX", "FUNC_MIN", "FUNC_DET", "FUNC_EYE_NAME", 
                      "FUNC_ZEROS_NAME", "FUNC_ONES_NAME", "FUNC_COLS_NAME", 
                      "FUNC_ROWS_NAME", "FUNC_DIAG_NAME", "FUNC_NORM_NAME", 
                      "FUNC_RANK_NAME", "FUNC_TRACE_NAME", "FUNC_RREF_NAME", 
                      "FUNC_HSTACK_NAME", "FUNC_VSTACK_NAME", "FUNC_ORTHOGONALIZE_NAME", 
                      "FUNC_NULLSPACE_NAME", "FUNC_DIAGONALIZE_NAME", "FUNC_EIGENVALS_NAME", 
                      "FUNC_EIGENVECTORS_NAME", "FUNC_SVD_NAME", "CMD_TIMES", 
                      "CMD_CDOT", "CMD_DIV", "CMD_FRAC", "CMD_BINOM", "CMD_CHOOSE", 
                      "CMD_MOD", "CMD_MATHIT", "CMD_OPERATORNAME", "MATRIX_TYPE_MATRIX", 
                      "MATRIX_TYPE_PMATRIX", "MATRIX_TYPE_BMATRIX", "MATRIX_TYPE_DET", 
                      "MATRIX_TYPES", "CMD_MATRIX_START", "CMD_MATRIX_END", 
                      "CMD_ARRAY_START", "CMD_ARRAY_END", "CMD_DET_START", 
                      "CMD_DET_END", "MATRIX_DEL_COL", "MATRIX_DEL_ROW", 
                      "UNDERSCORE", "CARET", "COLON", "SEMICOLON", "COMMA", 
                      "PERIOD", "DIFFERENTIAL", "EXP_E", "E_NOTATION_E", 
                      "LETTER_NO_E", "MATRIX_XRIGHTARROW", "TRANSFORM_EXCHANGE", 
                      "NUMBER", "E_NOTATION", "IN", "ASSIGNMENT", "EQUAL", 
                      "LT", "LTE", "GT", "GTE", "UNEQUAL", "BANG", "PERCENT_NUMBER", 
                      "GREEK_CMD", "OTHER_SYMBOL_CMD", "SYMBOL", "VARIABLE", 
                      "SET_NATURALS", "SET_INTEGERS", "SET_RATIONALS", "SET_REALS", 
                      "SET_COMPLEX", "SET_PRIMES", "ACCENT", "UNION", "INTERSECTION", 
                      "SET_MINUS", "PLUS_MINUS", "SET_EMPTY", "SUPSET", 
                      "SUBSET", "NOTIN" ]

    RULE_math = 0
    RULE_transpose = 1
    RULE_degree = 2
    RULE_transform_atom = 3
    RULE_transform_scale = 4
    RULE_transform_swap = 5
    RULE_transform_assignment = 6
    RULE_elementary_transform = 7
    RULE_elementary_transforms = 8
    RULE_matrix = 9
    RULE_det = 10
    RULE_matrix_row = 11
    RULE_relation = 12
    RULE_relation_list = 13
    RULE_relation_list_content = 14
    RULE_equality = 15
    RULE_expr = 16
    RULE_additive = 17
    RULE_mp = 18
    RULE_mp_nofunc = 19
    RULE_unary = 20
    RULE_unary_nofunc = 21
    RULE_postfix = 22
    RULE_postfix_nofunc = 23
    RULE_postfix_op = 24
    RULE_eval_at = 25
    RULE_eval_at_sub = 26
    RULE_eval_at_sup = 27
    RULE_exp = 28
    RULE_exp_nofunc = 29
    RULE_comp = 30
    RULE_comp_nofunc = 31
    RULE_group = 32
    RULE_formatting_group = 33
    RULE_norm_group = 34
    RULE_abs_group = 35
    RULE_dot_product = 36
    RULE_floor_group = 37
    RULE_ceil_group = 38
    RULE_atom_expr_no_supexpr = 39
    RULE_atom_expr = 40
    RULE_atom = 41
    RULE_frac = 42
    RULE_binom = 43
    RULE_func_normal_functions_single_arg = 44
    RULE_func_normal_functions_multi_arg = 45
    RULE_func_operator_names_single_arg = 46
    RULE_func_operator_names_multi_arg = 47
    RULE_func_normal_single_arg = 48
    RULE_func_normal_multi_arg = 49
    RULE_func = 50
    RULE_args = 51
    RULE_func_common_args = 52
    RULE_limit_sub = 53
    RULE_func_single_arg = 54
    RULE_func_single_arg_noparens = 55
    RULE_func_multi_arg = 56
    RULE_func_multi_arg_noparens = 57
    RULE_subexpr = 58
    RULE_supexpr = 59
    RULE_subeq = 60
    RULE_supeq = 61
    RULE_set_relation = 62
    RULE_minus_expr = 63
    RULE_union_expr = 64
    RULE_intersection_expr = 65
    RULE_set_group = 66
    RULE_set_atom = 67
    RULE_interval = 68
    RULE_finite_set = 69
    RULE_set_elements = 70
    RULE_literal_set = 71
    RULE_set_element = 72
    RULE_plus_minus_expr = 73

    ruleNames =  [ "math", "transpose", "degree", "transform_atom", "transform_scale", 
                   "transform_swap", "transform_assignment", "elementary_transform", 
                   "elementary_transforms", "matrix", "det", "matrix_row", 
                   "relation", "relation_list", "relation_list_content", 
                   "equality", "expr", "additive", "mp", "mp_nofunc", "unary", 
                   "unary_nofunc", "postfix", "postfix_nofunc", "postfix_op", 
                   "eval_at", "eval_at_sub", "eval_at_sup", "exp", "exp_nofunc", 
                   "comp", "comp_nofunc", "group", "formatting_group", "norm_group", 
                   "abs_group", "dot_product", "floor_group", "ceil_group", 
                   "atom_expr_no_supexpr", "atom_expr", "atom", "frac", 
                   "binom", "func_normal_functions_single_arg", "func_normal_functions_multi_arg", 
                   "func_operator_names_single_arg", "func_operator_names_multi_arg", 
                   "func_normal_single_arg", "func_normal_multi_arg", "func", 
                   "args", "func_common_args", "limit_sub", "func_single_arg", 
                   "func_single_arg_noparens", "func_multi_arg", "func_multi_arg_noparens", 
                   "subexpr", "supexpr", "subeq", "supeq", "set_relation", 
                   "minus_expr", "union_expr", "intersection_expr", "set_group", 
                   "set_atom", "interval", "finite_set", "set_elements", 
                   "literal_set", "set_element", "plus_minus_expr" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    WS=13
    THINSPACE=14
    MEDSPACE=15
    THICKSPACE=16
    QUAD=17
    QQUAD=18
    NEGTHINSPACE=19
    NEGMEDSPACE=20
    NEGTHICKSPACE=21
    DOLLAR_SIGN=22
    IGNORE=23
    ADD=24
    SUB=25
    MUL=26
    DIV=27
    L_PAREN=28
    R_PAREN=29
    L_PAREN_VISUAL=30
    R_PAREN_VISUAL=31
    L_GROUP=32
    R_GROUP=33
    L_BRACE=34
    R_BRACE=35
    L_BRACE_VISUAL=36
    R_BRACE_VISUAL=37
    L_BRACE_CMD=38
    R_BRACE_CMD=39
    L_BRACKET=40
    R_BRACKET=41
    L_BRACK=42
    R_BRACK=43
    PHANTOM_CMD=44
    BOXED_CMD=45
    BAR=46
    L_VERT=47
    R_VERT=48
    VERT=49
    NORM=50
    L_ANGLE=51
    R_ANGLE=52
    L_FLOOR=53
    R_FLOOR=54
    LL_CORNER=55
    LR_CORNER=56
    L_CEIL=57
    R_CEIL=58
    UL_CORNER=59
    UR_CORNER=60
    FUNC_LIM=61
    LIM_APPROACH_SYM=62
    FUNC_INT=63
    FUNC_SUM=64
    FUNC_PROD=65
    FUNC_LOG=66
    FUNC_LN=67
    FUNC_EXP=68
    FUNC_SIN=69
    FUNC_COS=70
    FUNC_TAN=71
    FUNC_CSC=72
    FUNC_SEC=73
    FUNC_COT=74
    FUNC_ARCSIN=75
    FUNC_ARCCOS=76
    FUNC_ARCTAN=77
    FUNC_ARCCSC=78
    FUNC_ARCSEC=79
    FUNC_ARCCOT=80
    FUNC_SINH=81
    FUNC_COSH=82
    FUNC_TANH=83
    FUNC_ARSINH=84
    FUNC_ARCOSH=85
    FUNC_ARTANH=86
    FUNC_ARCSINH=87
    FUNC_ARCCOSH=88
    FUNC_ARCTANH=89
    FUNC_ARSINH_NAME=90
    FUNC_ARCSINH_NAME=91
    FUNC_ARCOSH_NAME=92
    FUNC_ARCCOSH_NAME=93
    FUNC_ARTANH_NAME=94
    FUNC_ARCTANH_NAME=95
    FUNC_GCD_NAME=96
    FUNC_LCM_NAME=97
    FUNC_FLOOR_NAME=98
    FUNC_CEIL_NAME=99
    FUNC_SQRT=100
    FUNC_GCD=101
    FUNC_LCM=102
    FUNC_FLOOR=103
    FUNC_CEIL=104
    FUNC_MAX=105
    FUNC_MIN=106
    FUNC_DET=107
    FUNC_EYE_NAME=108
    FUNC_ZEROS_NAME=109
    FUNC_ONES_NAME=110
    FUNC_COLS_NAME=111
    FUNC_ROWS_NAME=112
    FUNC_DIAG_NAME=113
    FUNC_NORM_NAME=114
    FUNC_RANK_NAME=115
    FUNC_TRACE_NAME=116
    FUNC_RREF_NAME=117
    FUNC_HSTACK_NAME=118
    FUNC_VSTACK_NAME=119
    FUNC_ORTHOGONALIZE_NAME=120
    FUNC_NULLSPACE_NAME=121
    FUNC_DIAGONALIZE_NAME=122
    FUNC_EIGENVALS_NAME=123
    FUNC_EIGENVECTORS_NAME=124
    FUNC_SVD_NAME=125
    CMD_TIMES=126
    CMD_CDOT=127
    CMD_DIV=128
    CMD_FRAC=129
    CMD_BINOM=130
    CMD_CHOOSE=131
    CMD_MOD=132
    CMD_MATHIT=133
    CMD_OPERATORNAME=134
    MATRIX_TYPE_MATRIX=135
    MATRIX_TYPE_PMATRIX=136
    MATRIX_TYPE_BMATRIX=137
    MATRIX_TYPE_DET=138
    MATRIX_TYPES=139
    CMD_MATRIX_START=140
    CMD_MATRIX_END=141
    CMD_ARRAY_START=142
    CMD_ARRAY_END=143
    CMD_DET_START=144
    CMD_DET_END=145
    MATRIX_DEL_COL=146
    MATRIX_DEL_ROW=147
    UNDERSCORE=148
    CARET=149
    COLON=150
    SEMICOLON=151
    COMMA=152
    PERIOD=153
    DIFFERENTIAL=154
    EXP_E=155
    E_NOTATION_E=156
    LETTER_NO_E=157
    MATRIX_XRIGHTARROW=158
    TRANSFORM_EXCHANGE=159
    NUMBER=160
    E_NOTATION=161
    IN=162
    ASSIGNMENT=163
    EQUAL=164
    LT=165
    LTE=166
    GT=167
    GTE=168
    UNEQUAL=169
    BANG=170
    PERCENT_NUMBER=171
    GREEK_CMD=172
    OTHER_SYMBOL_CMD=173
    SYMBOL=174
    VARIABLE=175
    SET_NATURALS=176
    SET_INTEGERS=177
    SET_RATIONALS=178
    SET_REALS=179
    SET_COMPLEX=180
    SET_PRIMES=181
    ACCENT=182
    UNION=183
    INTERSECTION=184
    SET_MINUS=185
    PLUS_MINUS=186
    SET_EMPTY=187
    SUPSET=188
    SUBSET=189
    NOTIN=190

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation(self):
            return self.getTypedRuleContext(PSParser.RelationContext,0)


        def relation_list(self):
            return self.getTypedRuleContext(PSParser.Relation_listContext,0)


        def set_relation(self):
            return self.getTypedRuleContext(PSParser.Set_relationContext,0)


        def set_elements(self):
            return self.getTypedRuleContext(PSParser.Set_elementsContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_math

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMath" ):
                listener.enterMath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMath" ):
                listener.exitMath(self)




    def math(self):

        localctx = PSParser.MathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_math)
        try:
            self.state = 152
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 148
                self.relation(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 149
                self.relation_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 150
                self.set_relation(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 151
                self.set_elements()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransposeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PSParser.RULE_transpose

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranspose" ):
                listener.enterTranspose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranspose" ):
                listener.exitTranspose(self)




    def transpose(self):

        localctx = PSParser.TransposeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_transpose)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 154
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 30) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DegreeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PSParser.RULE_degree

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDegree" ):
                listener.enterDegree(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDegree" ):
                listener.exitDegree(self)




    def degree(self):

        localctx = PSParser.DegreeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_degree)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 156
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER_NO_E(self):
            return self.getToken(PSParser.LETTER_NO_E, 0)

        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def NUMBER(self):
            return self.getToken(PSParser.NUMBER, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_transform_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_atom" ):
                listener.enterTransform_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_atom" ):
                listener.exitTransform_atom(self)




    def transform_atom(self):

        localctx = PSParser.Transform_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_transform_atom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 158
            self.match(PSParser.LETTER_NO_E)
            self.state = 159
            self.match(PSParser.UNDERSCORE)
            self.state = 164
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [160]:
                self.state = 160
                self.match(PSParser.NUMBER)
                pass
            elif token in [34]:
                self.state = 161
                self.match(PSParser.L_BRACE)
                self.state = 162
                self.match(PSParser.NUMBER)
                self.state = 163
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_scaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transform_atom(self):
            return self.getTypedRuleContext(PSParser.Transform_atomContext,0)


        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def group(self):
            return self.getTypedRuleContext(PSParser.GroupContext,0)


        def ADD(self):
            return self.getToken(PSParser.ADD, 0)

        def SUB(self):
            return self.getToken(PSParser.SUB, 0)

        def getRuleIndex(self):
            return PSParser.RULE_transform_scale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_scale" ):
                listener.enterTransform_scale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_scale" ):
                listener.exitTransform_scale(self)




    def transform_scale(self):

        localctx = PSParser.Transform_scaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_transform_scale)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 166
                self.expr()
                pass

            elif la_ == 2:
                self.state = 167
                self.group()
                pass

            elif la_ == 3:
                self.state = 168
                self.match(PSParser.ADD)
                pass

            elif la_ == 4:
                self.state = 169
                self.match(PSParser.SUB)
                pass


            self.state = 172
            self.transform_atom()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_swapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transform_atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Transform_atomContext)
            else:
                return self.getTypedRuleContext(PSParser.Transform_atomContext,i)


        def TRANSFORM_EXCHANGE(self):
            return self.getToken(PSParser.TRANSFORM_EXCHANGE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_transform_swap

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_swap" ):
                listener.enterTransform_swap(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_swap" ):
                listener.exitTransform_swap(self)




    def transform_swap(self):

        localctx = PSParser.Transform_swapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_transform_swap)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 174
            self.transform_atom()
            self.state = 175
            self.match(PSParser.TRANSFORM_EXCHANGE)
            self.state = 176
            self.transform_atom()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transform_atom(self):
            return self.getTypedRuleContext(PSParser.Transform_atomContext,0)


        def transform_scale(self):
            return self.getTypedRuleContext(PSParser.Transform_scaleContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_transform_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_assignment" ):
                listener.enterTransform_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_assignment" ):
                listener.exitTransform_assignment(self)




    def transform_assignment(self):

        localctx = PSParser.Transform_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_transform_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 178
            self.transform_atom()
            self.state = 179
            self.transform_scale()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elementary_transformContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transform_assignment(self):
            return self.getTypedRuleContext(PSParser.Transform_assignmentContext,0)


        def transform_scale(self):
            return self.getTypedRuleContext(PSParser.Transform_scaleContext,0)


        def transform_swap(self):
            return self.getTypedRuleContext(PSParser.Transform_swapContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_elementary_transform

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementary_transform" ):
                listener.enterElementary_transform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementary_transform" ):
                listener.exitElementary_transform(self)




    def elementary_transform(self):

        localctx = PSParser.Elementary_transformContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_elementary_transform)
        try:
            self.state = 184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 181
                self.transform_assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 182
                self.transform_scale()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 183
                self.transform_swap()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elementary_transformsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementary_transform(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Elementary_transformContext)
            else:
                return self.getTypedRuleContext(PSParser.Elementary_transformContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.COMMA)
            else:
                return self.getToken(PSParser.COMMA, i)

        def getRuleIndex(self):
            return PSParser.RULE_elementary_transforms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementary_transforms" ):
                listener.enterElementary_transforms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementary_transforms" ):
                listener.exitElementary_transforms(self)




    def elementary_transforms(self):

        localctx = PSParser.Elementary_transformsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_elementary_transforms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            self.elementary_transform()
            self.state = 191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==152:
                self.state = 187
                self.match(PSParser.COMMA)
                self.state = 188
                self.elementary_transform()
                self.state = 193
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatrixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_MATRIX_START(self):
            return self.getToken(PSParser.CMD_MATRIX_START, 0)

        def matrix_row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Matrix_rowContext)
            else:
                return self.getTypedRuleContext(PSParser.Matrix_rowContext,i)


        def CMD_MATRIX_END(self):
            return self.getToken(PSParser.CMD_MATRIX_END, 0)

        def CMD_ARRAY_START(self):
            return self.getToken(PSParser.CMD_ARRAY_START, 0)

        def CMD_ARRAY_END(self):
            return self.getToken(PSParser.CMD_ARRAY_END, 0)

        def MATRIX_XRIGHTARROW(self):
            return self.getToken(PSParser.MATRIX_XRIGHTARROW, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def elementary_transforms(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Elementary_transformsContext)
            else:
                return self.getTypedRuleContext(PSParser.Elementary_transformsContext,i)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def MATRIX_DEL_ROW(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.MATRIX_DEL_ROW)
            else:
                return self.getToken(PSParser.MATRIX_DEL_ROW, i)

        def L_BRACKET(self):
            return self.getToken(PSParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(PSParser.R_BRACKET, 0)

        def getRuleIndex(self):
            return PSParser.RULE_matrix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatrix" ):
                listener.enterMatrix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatrix" ):
                listener.exitMatrix(self)




    def matrix(self):

        localctx = PSParser.MatrixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_matrix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [140]:
                self.state = 194
                self.match(PSParser.CMD_MATRIX_START)
                self.state = 195
                self.matrix_row()
                self.state = 200
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 196
                        self.match(PSParser.MATRIX_DEL_ROW)
                        self.state = 197
                        self.matrix_row() 
                    self.state = 202
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

                self.state = 204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==147:
                    self.state = 203
                    self.match(PSParser.MATRIX_DEL_ROW)


                self.state = 206
                self.match(PSParser.CMD_MATRIX_END)
                pass
            elif token in [142]:
                self.state = 208
                self.match(PSParser.CMD_ARRAY_START)
                self.state = 209
                self.matrix_row()
                self.state = 214
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 210
                        self.match(PSParser.MATRIX_DEL_ROW)
                        self.state = 211
                        self.matrix_row() 
                    self.state = 216
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==147:
                    self.state = 217
                    self.match(PSParser.MATRIX_DEL_ROW)


                self.state = 220
                self.match(PSParser.CMD_ARRAY_END)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 224
                self.match(PSParser.MATRIX_XRIGHTARROW)
                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40:
                    self.state = 225
                    self.match(PSParser.L_BRACKET)
                    self.state = 226
                    self.elementary_transforms()
                    self.state = 227
                    self.match(PSParser.R_BRACKET)


                self.state = 231
                self.match(PSParser.L_BRACE)
                self.state = 232
                self.elementary_transforms()
                self.state = 233
                self.match(PSParser.R_BRACE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DET_START(self):
            return self.getToken(PSParser.CMD_DET_START, 0)

        def matrix_row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Matrix_rowContext)
            else:
                return self.getTypedRuleContext(PSParser.Matrix_rowContext,i)


        def CMD_DET_END(self):
            return self.getToken(PSParser.CMD_DET_END, 0)

        def MATRIX_DEL_ROW(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.MATRIX_DEL_ROW)
            else:
                return self.getToken(PSParser.MATRIX_DEL_ROW, i)

        def getRuleIndex(self):
            return PSParser.RULE_det

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDet" ):
                listener.enterDet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDet" ):
                listener.exitDet(self)




    def det(self):

        localctx = PSParser.DetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_det)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.match(PSParser.CMD_DET_START)
            self.state = 238
            self.matrix_row()
            self.state = 243
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 239
                    self.match(PSParser.MATRIX_DEL_ROW)
                    self.state = 240
                    self.matrix_row() 
                self.state = 245
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

            self.state = 247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==147:
                self.state = 246
                self.match(PSParser.MATRIX_DEL_ROW)


            self.state = 249
            self.match(PSParser.CMD_DET_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Matrix_rowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def MATRIX_DEL_COL(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.MATRIX_DEL_COL)
            else:
                return self.getToken(PSParser.MATRIX_DEL_COL, i)

        def getRuleIndex(self):
            return PSParser.RULE_matrix_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatrix_row" ):
                listener.enterMatrix_row(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatrix_row" ):
                listener.exitMatrix_row(self)




    def matrix_row(self):

        localctx = PSParser.Matrix_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_matrix_row)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.expr()
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==146:
                self.state = 252
                self.match(PSParser.MATRIX_DEL_COL)
                self.state = 253
                self.expr()
                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.RelationContext)
            else:
                return self.getTypedRuleContext(PSParser.RelationContext,i)


        def IN(self):
            return self.getToken(PSParser.IN, 0)

        def ASSIGNMENT(self):
            return self.getToken(PSParser.ASSIGNMENT, 0)

        def EQUAL(self):
            return self.getToken(PSParser.EQUAL, 0)

        def LT(self):
            return self.getToken(PSParser.LT, 0)

        def LTE(self):
            return self.getToken(PSParser.LTE, 0)

        def GT(self):
            return self.getToken(PSParser.GT, 0)

        def GTE(self):
            return self.getToken(PSParser.GTE, 0)

        def UNEQUAL(self):
            return self.getToken(PSParser.UNEQUAL, 0)

        def getRuleIndex(self):
            return PSParser.RULE_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation" ):
                listener.enterRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation" ):
                listener.exitRelation(self)



    def relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 24
        self.enterRecursionRule(localctx, 24, self.RULE_relation, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self.expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 267
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.RelationContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
                    self.state = 262
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 263
                    _la = self._input.LA(1)
                    if not(((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & 255) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 264
                    self.relation(3) 
                self.state = 269
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Relation_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation_list_content(self):
            return self.getTypedRuleContext(PSParser.Relation_list_contentContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_relation_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation_list" ):
                listener.enterRelation_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation_list" ):
                listener.exitRelation_list(self)




    def relation_list(self):

        localctx = PSParser.Relation_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_relation_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self.relation_list_content()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relation_list_contentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.RelationContext)
            else:
                return self.getTypedRuleContext(PSParser.RelationContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.SEMICOLON)
            else:
                return self.getToken(PSParser.SEMICOLON, i)

        def getRuleIndex(self):
            return PSParser.RULE_relation_list_content

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation_list_content" ):
                listener.enterRelation_list_content(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation_list_content" ):
                listener.exitRelation_list_content(self)




    def relation_list_content(self):

        localctx = PSParser.Relation_list_contentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_relation_list_content)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.relation(0)
            self.state = 273
            self.match(PSParser.SEMICOLON)
            self.state = 274
            self.relation(0)
            self.state = 279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==151:
                self.state = 275
                self.match(PSParser.SEMICOLON)
                self.state = 276
                self.relation(0)
                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def EQUAL(self):
            return self.getToken(PSParser.EQUAL, 0)

        def ASSIGNMENT(self):
            return self.getToken(PSParser.ASSIGNMENT, 0)

        def getRuleIndex(self):
            return PSParser.RULE_equality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality" ):
                listener.enterEquality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality" ):
                listener.exitEquality(self)




    def equality(self):

        localctx = PSParser.EqualityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_equality)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self.expr()
            self.state = 283
            _la = self._input.LA(1)
            if not(_la==163 or _la==164):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 284
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive(self):
            return self.getTypedRuleContext(PSParser.AdditiveContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = PSParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.additive(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp(self):
            return self.getTypedRuleContext(PSParser.MpContext,0)


        def additive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.AdditiveContext)
            else:
                return self.getTypedRuleContext(PSParser.AdditiveContext,i)


        def ADD(self):
            return self.getToken(PSParser.ADD, 0)

        def SUB(self):
            return self.getToken(PSParser.SUB, 0)

        def getRuleIndex(self):
            return PSParser.RULE_additive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditive" ):
                listener.enterAdditive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditive" ):
                listener.exitAdditive(self)



    def additive(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.AdditiveContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_additive, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.mp(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 296
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.AdditiveContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additive)
                    self.state = 291
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 292
                    _la = self._input.LA(1)
                    if not(_la==24 or _la==25):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 293
                    self.additive(3) 
                self.state = 298
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(PSParser.UnaryContext,0)


        def mp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.MpContext)
            else:
                return self.getTypedRuleContext(PSParser.MpContext,i)


        def MUL(self):
            return self.getToken(PSParser.MUL, 0)

        def CMD_TIMES(self):
            return self.getToken(PSParser.CMD_TIMES, 0)

        def CMD_CDOT(self):
            return self.getToken(PSParser.CMD_CDOT, 0)

        def DIV(self):
            return self.getToken(PSParser.DIV, 0)

        def CMD_DIV(self):
            return self.getToken(PSParser.CMD_DIV, 0)

        def COLON(self):
            return self.getToken(PSParser.COLON, 0)

        def CMD_MOD(self):
            return self.getToken(PSParser.CMD_MOD, 0)

        def getRuleIndex(self):
            return PSParser.RULE_mp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMp" ):
                listener.enterMp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMp" ):
                listener.exitMp(self)



    def mp(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.MpContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_mp, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.unary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 307
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.MpContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mp)
                    self.state = 302
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 303
                    _la = self._input.LA(1)
                    if not(_la==26 or _la==27 or ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & 16777287) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 304
                    self.mp(3) 
                self.state = 309
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Mp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_nofunc(self):
            return self.getTypedRuleContext(PSParser.Unary_nofuncContext,0)


        def mp_nofunc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Mp_nofuncContext)
            else:
                return self.getTypedRuleContext(PSParser.Mp_nofuncContext,i)


        def MUL(self):
            return self.getToken(PSParser.MUL, 0)

        def CMD_TIMES(self):
            return self.getToken(PSParser.CMD_TIMES, 0)

        def CMD_CDOT(self):
            return self.getToken(PSParser.CMD_CDOT, 0)

        def DIV(self):
            return self.getToken(PSParser.DIV, 0)

        def CMD_DIV(self):
            return self.getToken(PSParser.CMD_DIV, 0)

        def COLON(self):
            return self.getToken(PSParser.COLON, 0)

        def CMD_MOD(self):
            return self.getToken(PSParser.CMD_MOD, 0)

        def getRuleIndex(self):
            return PSParser.RULE_mp_nofunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMp_nofunc" ):
                listener.enterMp_nofunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMp_nofunc" ):
                listener.exitMp_nofunc(self)



    def mp_nofunc(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.Mp_nofuncContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 38
        self.enterRecursionRule(localctx, 38, self.RULE_mp_nofunc, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self.unary_nofunc()
            self._ctx.stop = self._input.LT(-1)
            self.state = 318
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.Mp_nofuncContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mp_nofunc)
                    self.state = 313
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 314
                    _la = self._input.LA(1)
                    if not(_la==26 or _la==27 or ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & 16777287) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 315
                    self.mp_nofunc(3) 
                self.state = 320
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(PSParser.UnaryContext,0)


        def ADD(self):
            return self.getToken(PSParser.ADD, 0)

        def SUB(self):
            return self.getToken(PSParser.SUB, 0)

        def postfix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.PostfixContext)
            else:
                return self.getTypedRuleContext(PSParser.PostfixContext,i)


        def getRuleIndex(self):
            return PSParser.RULE_unary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary" ):
                listener.enterUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary" ):
                listener.exitUnary(self)




    def unary(self):

        localctx = PSParser.UnaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_unary)
        self._la = 0 # Token type
        try:
            self.state = 328
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24, 25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 321
                _la = self._input.LA(1)
                if not(_la==24 or _la==25):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 322
                self.unary()
                pass
            elif token in [28, 32, 34, 36, 38, 40, 42, 44, 45, 46, 47, 49, 50, 51, 53, 55, 57, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 100, 101, 102, 103, 104, 105, 106, 107, 129, 130, 134, 140, 142, 144, 154, 155, 157, 160, 161, 171, 172, 173, 174, 175, 182]:
                self.enterOuterAlt(localctx, 2)
                self.state = 324 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 323
                        self.postfix()

                    else:
                        raise NoViableAltException(self)
                    self.state = 326 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_nofunc(self):
            return self.getTypedRuleContext(PSParser.Unary_nofuncContext,0)


        def ADD(self):
            return self.getToken(PSParser.ADD, 0)

        def SUB(self):
            return self.getToken(PSParser.SUB, 0)

        def postfix(self):
            return self.getTypedRuleContext(PSParser.PostfixContext,0)


        def postfix_nofunc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Postfix_nofuncContext)
            else:
                return self.getTypedRuleContext(PSParser.Postfix_nofuncContext,i)


        def getRuleIndex(self):
            return PSParser.RULE_unary_nofunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_nofunc" ):
                listener.enterUnary_nofunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_nofunc" ):
                listener.exitUnary_nofunc(self)




    def unary_nofunc(self):

        localctx = PSParser.Unary_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_unary_nofunc)
        self._la = 0 # Token type
        try:
            self.state = 339
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24, 25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 330
                _la = self._input.LA(1)
                if not(_la==24 or _la==25):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 331
                self.unary_nofunc()
                pass
            elif token in [28, 32, 34, 36, 38, 40, 42, 44, 45, 46, 47, 49, 50, 51, 53, 55, 57, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 100, 101, 102, 103, 104, 105, 106, 107, 129, 130, 134, 140, 142, 144, 154, 155, 157, 160, 161, 171, 172, 173, 174, 175, 182]:
                self.enterOuterAlt(localctx, 2)
                self.state = 332
                self.postfix()
                self.state = 336
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 333
                        self.postfix_nofunc() 
                    self.state = 338
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp(self):
            return self.getTypedRuleContext(PSParser.ExpContext,0)


        def postfix_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Postfix_opContext)
            else:
                return self.getTypedRuleContext(PSParser.Postfix_opContext,i)


        def getRuleIndex(self):
            return PSParser.RULE_postfix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix" ):
                listener.enterPostfix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix" ):
                listener.exitPostfix(self)




    def postfix(self):

        localctx = PSParser.PostfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_postfix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.exp(0)
            self.state = 345
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 342
                    self.postfix_op() 
                self.state = 347
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_nofunc(self):
            return self.getTypedRuleContext(PSParser.Exp_nofuncContext,0)


        def postfix_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Postfix_opContext)
            else:
                return self.getTypedRuleContext(PSParser.Postfix_opContext,i)


        def getRuleIndex(self):
            return PSParser.RULE_postfix_nofunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix_nofunc" ):
                listener.enterPostfix_nofunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix_nofunc" ):
                listener.exitPostfix_nofunc(self)




    def postfix_nofunc(self):

        localctx = PSParser.Postfix_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_postfix_nofunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.exp_nofunc(0)
            self.state = 352
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 349
                    self.postfix_op() 
                self.state = 354
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANG(self):
            return self.getToken(PSParser.BANG, 0)

        def eval_at(self):
            return self.getTypedRuleContext(PSParser.Eval_atContext,0)


        def transpose(self):
            return self.getTypedRuleContext(PSParser.TransposeContext,0)


        def degree(self):
            return self.getTypedRuleContext(PSParser.DegreeContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_postfix_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix_op" ):
                listener.enterPostfix_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix_op" ):
                listener.exitPostfix_op(self)




    def postfix_op(self):

        localctx = PSParser.Postfix_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_postfix_op)
        try:
            self.state = 359
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [170]:
                self.enterOuterAlt(localctx, 1)
                self.state = 355
                self.match(PSParser.BANG)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 2)
                self.state = 356
                self.eval_at()
                pass
            elif token in [1, 2, 3, 4]:
                self.enterOuterAlt(localctx, 3)
                self.state = 357
                self.transpose()
                pass
            elif token in [5, 6, 7, 8, 9, 10, 11, 12]:
                self.enterOuterAlt(localctx, 4)
                self.state = 358
                self.degree()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_atContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAR(self):
            return self.getToken(PSParser.BAR, 0)

        def eval_at_sup(self):
            return self.getTypedRuleContext(PSParser.Eval_at_supContext,0)


        def eval_at_sub(self):
            return self.getTypedRuleContext(PSParser.Eval_at_subContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_eval_at

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_at" ):
                listener.enterEval_at(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_at" ):
                listener.exitEval_at(self)




    def eval_at(self):

        localctx = PSParser.Eval_atContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_eval_at)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self.match(PSParser.BAR)
            self.state = 367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 362
                self.eval_at_sup()
                pass

            elif la_ == 2:
                self.state = 363
                self.eval_at_sub()
                pass

            elif la_ == 3:
                self.state = 364
                self.eval_at_sup()
                self.state = 365
                self.eval_at_sub()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_at_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def equality(self):
            return self.getTypedRuleContext(PSParser.EqualityContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_eval_at_sub

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_at_sub" ):
                listener.enterEval_at_sub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_at_sub" ):
                listener.exitEval_at_sub(self)




    def eval_at_sub(self):

        localctx = PSParser.Eval_at_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_eval_at_sub)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(PSParser.UNDERSCORE)
            self.state = 370
            self.match(PSParser.L_BRACE)
            self.state = 373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 371
                self.expr()
                pass

            elif la_ == 2:
                self.state = 372
                self.equality()
                pass


            self.state = 375
            self.match(PSParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_at_supContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CARET(self):
            return self.getToken(PSParser.CARET, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def equality(self):
            return self.getTypedRuleContext(PSParser.EqualityContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_eval_at_sup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_at_sup" ):
                listener.enterEval_at_sup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_at_sup" ):
                listener.exitEval_at_sup(self)




    def eval_at_sup(self):

        localctx = PSParser.Eval_at_supContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_eval_at_sup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.match(PSParser.CARET)
            self.state = 378
            self.match(PSParser.L_BRACE)
            self.state = 381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 379
                self.expr()
                pass

            elif la_ == 2:
                self.state = 380
                self.equality()
                pass


            self.state = 383
            self.match(PSParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp(self):
            return self.getTypedRuleContext(PSParser.CompContext,0)


        def exp(self):
            return self.getTypedRuleContext(PSParser.ExpContext,0)


        def CARET(self):
            return self.getToken(PSParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def subexpr(self):
            return self.getTypedRuleContext(PSParser.SubexprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp" ):
                listener.enterExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp" ):
                listener.exitExp(self)



    def exp(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.ExpContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_exp, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.comp()
            self._ctx.stop = self._input.LT(-1)
            self.state = 402
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.ExpContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exp)
                    self.state = 388
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 389
                    self.match(PSParser.CARET)
                    self.state = 395
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [154, 157, 160, 161, 171, 172, 173, 174, 175, 182]:
                        self.state = 390
                        self.atom()
                        pass
                    elif token in [34]:
                        self.state = 391
                        self.match(PSParser.L_BRACE)
                        self.state = 392
                        self.expr()
                        self.state = 393
                        self.match(PSParser.R_BRACE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 398
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                    if la_ == 1:
                        self.state = 397
                        self.subexpr()

             
                self.state = 404
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Exp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_nofunc(self):
            return self.getTypedRuleContext(PSParser.Comp_nofuncContext,0)


        def exp_nofunc(self):
            return self.getTypedRuleContext(PSParser.Exp_nofuncContext,0)


        def CARET(self):
            return self.getToken(PSParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def subexpr(self):
            return self.getTypedRuleContext(PSParser.SubexprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_exp_nofunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_nofunc" ):
                listener.enterExp_nofunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_nofunc" ):
                listener.exitExp_nofunc(self)



    def exp_nofunc(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.Exp_nofuncContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 58
        self.enterRecursionRule(localctx, 58, self.RULE_exp_nofunc, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.comp_nofunc()
            self._ctx.stop = self._input.LT(-1)
            self.state = 422
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.Exp_nofuncContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exp_nofunc)
                    self.state = 408
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 409
                    self.match(PSParser.CARET)
                    self.state = 415
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [154, 157, 160, 161, 171, 172, 173, 174, 175, 182]:
                        self.state = 410
                        self.atom()
                        pass
                    elif token in [34]:
                        self.state = 411
                        self.match(PSParser.L_BRACE)
                        self.state = 412
                        self.expr()
                        self.state = 413
                        self.match(PSParser.R_BRACE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 418
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                    if la_ == 1:
                        self.state = 417
                        self.subexpr()

             
                self.state = 424
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self):
            return self.getTypedRuleContext(PSParser.GroupContext,0)


        def formatting_group(self):
            return self.getTypedRuleContext(PSParser.Formatting_groupContext,0)


        def norm_group(self):
            return self.getTypedRuleContext(PSParser.Norm_groupContext,0)


        def abs_group(self):
            return self.getTypedRuleContext(PSParser.Abs_groupContext,0)


        def dot_product(self):
            return self.getTypedRuleContext(PSParser.Dot_productContext,0)


        def floor_group(self):
            return self.getTypedRuleContext(PSParser.Floor_groupContext,0)


        def ceil_group(self):
            return self.getTypedRuleContext(PSParser.Ceil_groupContext,0)


        def func(self):
            return self.getTypedRuleContext(PSParser.FuncContext,0)


        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def frac(self):
            return self.getTypedRuleContext(PSParser.FracContext,0)


        def binom(self):
            return self.getTypedRuleContext(PSParser.BinomContext,0)


        def matrix(self):
            return self.getTypedRuleContext(PSParser.MatrixContext,0)


        def det(self):
            return self.getTypedRuleContext(PSParser.DetContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp" ):
                listener.enterComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp" ):
                listener.exitComp(self)




    def comp(self):

        localctx = PSParser.CompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_comp)
        try:
            self.state = 438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 425
                self.group()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 426
                self.formatting_group()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 427
                self.norm_group()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 428
                self.abs_group()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 429
                self.dot_product()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 430
                self.floor_group()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 431
                self.ceil_group()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 432
                self.func()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 433
                self.atom()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 434
                self.frac()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 435
                self.binom()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 436
                self.matrix()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 437
                self.det()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self):
            return self.getTypedRuleContext(PSParser.GroupContext,0)


        def formatting_group(self):
            return self.getTypedRuleContext(PSParser.Formatting_groupContext,0)


        def norm_group(self):
            return self.getTypedRuleContext(PSParser.Norm_groupContext,0)


        def abs_group(self):
            return self.getTypedRuleContext(PSParser.Abs_groupContext,0)


        def dot_product(self):
            return self.getTypedRuleContext(PSParser.Dot_productContext,0)


        def floor_group(self):
            return self.getTypedRuleContext(PSParser.Floor_groupContext,0)


        def ceil_group(self):
            return self.getTypedRuleContext(PSParser.Ceil_groupContext,0)


        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def frac(self):
            return self.getTypedRuleContext(PSParser.FracContext,0)


        def binom(self):
            return self.getTypedRuleContext(PSParser.BinomContext,0)


        def matrix(self):
            return self.getTypedRuleContext(PSParser.MatrixContext,0)


        def det(self):
            return self.getTypedRuleContext(PSParser.DetContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_comp_nofunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_nofunc" ):
                listener.enterComp_nofunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_nofunc" ):
                listener.exitComp_nofunc(self)




    def comp_nofunc(self):

        localctx = PSParser.Comp_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_comp_nofunc)
        try:
            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 440
                self.group()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 441
                self.formatting_group()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 442
                self.norm_group()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 443
                self.abs_group()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 444
                self.dot_product()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 445
                self.floor_group()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 446
                self.ceil_group()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 447
                self.atom()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 448
                self.frac()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 449
                self.binom()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 450
                self.matrix()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 451
                self.det()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(PSParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(PSParser.R_PAREN, 0)

        def L_GROUP(self):
            return self.getToken(PSParser.L_GROUP, 0)

        def R_GROUP(self):
            return self.getToken(PSParser.R_GROUP, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def L_BRACKET(self):
            return self.getToken(PSParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(PSParser.R_BRACKET, 0)

        def L_BRACE_VISUAL(self):
            return self.getToken(PSParser.L_BRACE_VISUAL, 0)

        def R_BRACE_VISUAL(self):
            return self.getToken(PSParser.R_BRACE_VISUAL, 0)

        def L_BRACE_CMD(self):
            return self.getToken(PSParser.L_BRACE_CMD, 0)

        def R_BRACE_CMD(self):
            return self.getToken(PSParser.R_BRACE_CMD, 0)

        def L_BRACK(self):
            return self.getToken(PSParser.L_BRACK, 0)

        def R_BRACK(self):
            return self.getToken(PSParser.R_BRACK, 0)

        def getRuleIndex(self):
            return PSParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)




    def group(self):

        localctx = PSParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_group)
        try:
            self.state = 482
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 454
                self.match(PSParser.L_PAREN)
                self.state = 455
                self.expr()
                self.state = 456
                self.match(PSParser.R_PAREN)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 458
                self.match(PSParser.L_GROUP)
                self.state = 459
                self.expr()
                self.state = 460
                self.match(PSParser.R_GROUP)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 3)
                self.state = 462
                self.match(PSParser.L_BRACE)
                self.state = 463
                self.expr()
                self.state = 464
                self.match(PSParser.R_BRACE)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 4)
                self.state = 466
                self.match(PSParser.L_BRACKET)
                self.state = 467
                self.expr()
                self.state = 468
                self.match(PSParser.R_BRACKET)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 5)
                self.state = 470
                self.match(PSParser.L_BRACE_VISUAL)
                self.state = 471
                self.expr()
                self.state = 472
                self.match(PSParser.R_BRACE_VISUAL)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 6)
                self.state = 474
                self.match(PSParser.L_BRACE_CMD)
                self.state = 475
                self.expr()
                self.state = 476
                self.match(PSParser.R_BRACE_CMD)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 7)
                self.state = 478
                self.match(PSParser.L_BRACK)
                self.state = 479
                self.expr()
                self.state = 480
                self.match(PSParser.R_BRACK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Formatting_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PHANTOM_CMD(self):
            return self.getToken(PSParser.PHANTOM_CMD, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def BOXED_CMD(self):
            return self.getToken(PSParser.BOXED_CMD, 0)

        def getRuleIndex(self):
            return PSParser.RULE_formatting_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormatting_group" ):
                listener.enterFormatting_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormatting_group" ):
                listener.exitFormatting_group(self)




    def formatting_group(self):

        localctx = PSParser.Formatting_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_formatting_group)
        try:
            self.state = 494
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 484
                self.match(PSParser.PHANTOM_CMD)
                self.state = 485
                self.match(PSParser.L_BRACE)
                self.state = 486
                self.expr()
                self.state = 487
                self.match(PSParser.R_BRACE)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 489
                self.match(PSParser.BOXED_CMD)
                self.state = 490
                self.match(PSParser.L_BRACE)
                self.state = 491
                self.expr()
                self.state = 492
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Norm_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NORM(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.NORM)
            else:
                return self.getToken(PSParser.NORM, i)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_norm_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNorm_group" ):
                listener.enterNorm_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNorm_group" ):
                listener.exitNorm_group(self)




    def norm_group(self):

        localctx = PSParser.Norm_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_norm_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(PSParser.NORM)
            self.state = 497
            self.expr()
            self.state = 498
            self.match(PSParser.NORM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Abs_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAR(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.BAR)
            else:
                return self.getToken(PSParser.BAR, i)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def L_VERT(self):
            return self.getToken(PSParser.L_VERT, 0)

        def R_VERT(self):
            return self.getToken(PSParser.R_VERT, 0)

        def VERT(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.VERT)
            else:
                return self.getToken(PSParser.VERT, i)

        def getRuleIndex(self):
            return PSParser.RULE_abs_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbs_group" ):
                listener.enterAbs_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbs_group" ):
                listener.exitAbs_group(self)




    def abs_group(self):

        localctx = PSParser.Abs_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_abs_group)
        try:
            self.state = 512
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46]:
                self.enterOuterAlt(localctx, 1)
                self.state = 500
                self.match(PSParser.BAR)
                self.state = 501
                self.expr()
                self.state = 502
                self.match(PSParser.BAR)
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 2)
                self.state = 504
                self.match(PSParser.L_VERT)
                self.state = 505
                self.expr()
                self.state = 506
                self.match(PSParser.R_VERT)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 3)
                self.state = 508
                self.match(PSParser.VERT)
                self.state = 509
                self.expr()
                self.state = 510
                self.match(PSParser.VERT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_productContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_ANGLE(self):
            return self.getToken(PSParser.L_ANGLE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_ANGLE(self):
            return self.getToken(PSParser.R_ANGLE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_dot_product

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_product" ):
                listener.enterDot_product(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_product" ):
                listener.exitDot_product(self)




    def dot_product(self):

        localctx = PSParser.Dot_productContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_dot_product)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.match(PSParser.L_ANGLE)
            self.state = 515
            self.expr()
            self.state = 516
            self.match(PSParser.R_ANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Floor_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_FLOOR(self):
            return self.getToken(PSParser.L_FLOOR, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_FLOOR(self):
            return self.getToken(PSParser.R_FLOOR, 0)

        def LL_CORNER(self):
            return self.getToken(PSParser.LL_CORNER, 0)

        def LR_CORNER(self):
            return self.getToken(PSParser.LR_CORNER, 0)

        def getRuleIndex(self):
            return PSParser.RULE_floor_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloor_group" ):
                listener.enterFloor_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloor_group" ):
                listener.exitFloor_group(self)




    def floor_group(self):

        localctx = PSParser.Floor_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_floor_group)
        try:
            self.state = 526
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 518
                self.match(PSParser.L_FLOOR)
                self.state = 519
                self.expr()
                self.state = 520
                self.match(PSParser.R_FLOOR)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 522
                self.match(PSParser.LL_CORNER)
                self.state = 523
                self.expr()
                self.state = 524
                self.match(PSParser.LR_CORNER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ceil_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_CEIL(self):
            return self.getToken(PSParser.L_CEIL, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_CEIL(self):
            return self.getToken(PSParser.R_CEIL, 0)

        def UL_CORNER(self):
            return self.getToken(PSParser.UL_CORNER, 0)

        def UR_CORNER(self):
            return self.getToken(PSParser.UR_CORNER, 0)

        def getRuleIndex(self):
            return PSParser.RULE_ceil_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCeil_group" ):
                listener.enterCeil_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCeil_group" ):
                listener.exitCeil_group(self)




    def ceil_group(self):

        localctx = PSParser.Ceil_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_ceil_group)
        try:
            self.state = 536
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 528
                self.match(PSParser.L_CEIL)
                self.state = 529
                self.expr()
                self.state = 530
                self.match(PSParser.R_CEIL)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 532
                self.match(PSParser.UL_CORNER)
                self.state = 533
                self.expr()
                self.state = 534
                self.match(PSParser.UR_CORNER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_expr_no_supexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER_NO_E(self):
            return self.getToken(PSParser.LETTER_NO_E, 0)

        def GREEK_CMD(self):
            return self.getToken(PSParser.GREEK_CMD, 0)

        def OTHER_SYMBOL_CMD(self):
            return self.getToken(PSParser.OTHER_SYMBOL_CMD, 0)

        def ACCENT(self):
            return self.getToken(PSParser.ACCENT, 0)

        def subexpr(self):
            return self.getTypedRuleContext(PSParser.SubexprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_atom_expr_no_supexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr_no_supexpr" ):
                listener.enterAtom_expr_no_supexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr_no_supexpr" ):
                listener.exitAtom_expr_no_supexpr(self)




    def atom_expr_no_supexpr(self):

        localctx = PSParser.Atom_expr_no_supexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_atom_expr_no_supexpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            _la = self._input.LA(1)
            if not(((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & 33652737) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 539
                self.subexpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER_NO_E(self):
            return self.getToken(PSParser.LETTER_NO_E, 0)

        def GREEK_CMD(self):
            return self.getToken(PSParser.GREEK_CMD, 0)

        def OTHER_SYMBOL_CMD(self):
            return self.getToken(PSParser.OTHER_SYMBOL_CMD, 0)

        def ACCENT(self):
            return self.getToken(PSParser.ACCENT, 0)

        def supexpr(self):
            return self.getTypedRuleContext(PSParser.SupexprContext,0)


        def subexpr(self):
            return self.getTypedRuleContext(PSParser.SubexprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_atom_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr" ):
                listener.enterAtom_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr" ):
                listener.exitAtom_expr(self)




    def atom_expr(self):

        localctx = PSParser.Atom_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_atom_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            _la = self._input.LA(1)
            if not(((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & 33652737) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 551
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 543
                self.supexpr()
                self.state = 544
                self.subexpr()

            elif la_ == 2:
                self.state = 546
                self.subexpr()
                self.state = 547
                self.supexpr()

            elif la_ == 3:
                self.state = 549
                self.subexpr()

            elif la_ == 4:
                self.state = 550
                self.supexpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_expr(self):
            return self.getTypedRuleContext(PSParser.Atom_exprContext,0)


        def SYMBOL(self):
            return self.getToken(PSParser.SYMBOL, 0)

        def NUMBER(self):
            return self.getToken(PSParser.NUMBER, 0)

        def PERCENT_NUMBER(self):
            return self.getToken(PSParser.PERCENT_NUMBER, 0)

        def E_NOTATION(self):
            return self.getToken(PSParser.E_NOTATION, 0)

        def DIFFERENTIAL(self):
            return self.getToken(PSParser.DIFFERENTIAL, 0)

        def VARIABLE(self):
            return self.getToken(PSParser.VARIABLE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)




    def atom(self):

        localctx = PSParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_atom)
        try:
            self.state = 560
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [157, 172, 173, 182]:
                self.enterOuterAlt(localctx, 1)
                self.state = 553
                self.atom_expr()
                pass
            elif token in [174]:
                self.enterOuterAlt(localctx, 2)
                self.state = 554
                self.match(PSParser.SYMBOL)
                pass
            elif token in [160]:
                self.enterOuterAlt(localctx, 3)
                self.state = 555
                self.match(PSParser.NUMBER)
                pass
            elif token in [171]:
                self.enterOuterAlt(localctx, 4)
                self.state = 556
                self.match(PSParser.PERCENT_NUMBER)
                pass
            elif token in [161]:
                self.enterOuterAlt(localctx, 5)
                self.state = 557
                self.match(PSParser.E_NOTATION)
                pass
            elif token in [154]:
                self.enterOuterAlt(localctx, 6)
                self.state = 558
                self.match(PSParser.DIFFERENTIAL)
                pass
            elif token in [175]:
                self.enterOuterAlt(localctx, 7)
                self.state = 559
                self.match(PSParser.VARIABLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FracContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.upper = None # ExprContext
            self.lower = None # ExprContext

        def CMD_FRAC(self):
            return self.getToken(PSParser.CMD_FRAC, 0)

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.L_BRACE)
            else:
                return self.getToken(PSParser.L_BRACE, i)

        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.R_BRACE)
            else:
                return self.getToken(PSParser.R_BRACE, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def getRuleIndex(self):
            return PSParser.RULE_frac

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrac" ):
                listener.enterFrac(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrac" ):
                listener.exitFrac(self)




    def frac(self):

        localctx = PSParser.FracContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_frac)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.match(PSParser.CMD_FRAC)
            self.state = 563
            self.match(PSParser.L_BRACE)
            self.state = 564
            localctx.upper = self.expr()
            self.state = 565
            self.match(PSParser.R_BRACE)
            self.state = 566
            self.match(PSParser.L_BRACE)
            self.state = 567
            localctx.lower = self.expr()
            self.state = 568
            self.match(PSParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.upper = None # ExprContext
            self.lower = None # ExprContext

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.L_BRACE)
            else:
                return self.getToken(PSParser.L_BRACE, i)

        def CMD_CHOOSE(self):
            return self.getToken(PSParser.CMD_CHOOSE, 0)

        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.R_BRACE)
            else:
                return self.getToken(PSParser.R_BRACE, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def CMD_BINOM(self):
            return self.getToken(PSParser.CMD_BINOM, 0)

        def getRuleIndex(self):
            return PSParser.RULE_binom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinom" ):
                listener.enterBinom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinom" ):
                listener.exitBinom(self)




    def binom(self):

        localctx = PSParser.BinomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_binom)
        try:
            self.state = 584
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 570
                self.match(PSParser.L_BRACE)
                self.state = 571
                localctx.upper = self.expr()
                self.state = 572
                self.match(PSParser.CMD_CHOOSE)
                self.state = 573
                localctx.lower = self.expr()
                self.state = 574
                self.match(PSParser.R_BRACE)
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 2)
                self.state = 576
                self.match(PSParser.CMD_BINOM)
                self.state = 577
                self.match(PSParser.L_BRACE)
                self.state = 578
                localctx.upper = self.expr()
                self.state = 579
                self.match(PSParser.R_BRACE)
                self.state = 580
                self.match(PSParser.L_BRACE)
                self.state = 581
                localctx.lower = self.expr()
                self.state = 582
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_normal_functions_single_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_LOG(self):
            return self.getToken(PSParser.FUNC_LOG, 0)

        def FUNC_LN(self):
            return self.getToken(PSParser.FUNC_LN, 0)

        def FUNC_EXP(self):
            return self.getToken(PSParser.FUNC_EXP, 0)

        def FUNC_SIN(self):
            return self.getToken(PSParser.FUNC_SIN, 0)

        def FUNC_COS(self):
            return self.getToken(PSParser.FUNC_COS, 0)

        def FUNC_TAN(self):
            return self.getToken(PSParser.FUNC_TAN, 0)

        def FUNC_CSC(self):
            return self.getToken(PSParser.FUNC_CSC, 0)

        def FUNC_SEC(self):
            return self.getToken(PSParser.FUNC_SEC, 0)

        def FUNC_COT(self):
            return self.getToken(PSParser.FUNC_COT, 0)

        def FUNC_ARCSIN(self):
            return self.getToken(PSParser.FUNC_ARCSIN, 0)

        def FUNC_ARCCOS(self):
            return self.getToken(PSParser.FUNC_ARCCOS, 0)

        def FUNC_ARCTAN(self):
            return self.getToken(PSParser.FUNC_ARCTAN, 0)

        def FUNC_ARCCSC(self):
            return self.getToken(PSParser.FUNC_ARCCSC, 0)

        def FUNC_ARCSEC(self):
            return self.getToken(PSParser.FUNC_ARCSEC, 0)

        def FUNC_ARCCOT(self):
            return self.getToken(PSParser.FUNC_ARCCOT, 0)

        def FUNC_SINH(self):
            return self.getToken(PSParser.FUNC_SINH, 0)

        def FUNC_COSH(self):
            return self.getToken(PSParser.FUNC_COSH, 0)

        def FUNC_TANH(self):
            return self.getToken(PSParser.FUNC_TANH, 0)

        def FUNC_ARSINH(self):
            return self.getToken(PSParser.FUNC_ARSINH, 0)

        def FUNC_ARCOSH(self):
            return self.getToken(PSParser.FUNC_ARCOSH, 0)

        def FUNC_ARTANH(self):
            return self.getToken(PSParser.FUNC_ARTANH, 0)

        def FUNC_ARCSINH(self):
            return self.getToken(PSParser.FUNC_ARCSINH, 0)

        def FUNC_ARCCOSH(self):
            return self.getToken(PSParser.FUNC_ARCCOSH, 0)

        def FUNC_ARCTANH(self):
            return self.getToken(PSParser.FUNC_ARCTANH, 0)

        def FUNC_FLOOR(self):
            return self.getToken(PSParser.FUNC_FLOOR, 0)

        def FUNC_CEIL(self):
            return self.getToken(PSParser.FUNC_CEIL, 0)

        def FUNC_DET(self):
            return self.getToken(PSParser.FUNC_DET, 0)

        def getRuleIndex(self):
            return PSParser.RULE_func_normal_functions_single_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_normal_functions_single_arg" ):
                listener.enterFunc_normal_functions_single_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_normal_functions_single_arg" ):
                listener.exitFunc_normal_functions_single_arg(self)




    def func_normal_functions_single_arg(self):

        localctx = PSParser.Func_normal_functions_single_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_func_normal_functions_single_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            _la = self._input.LA(1)
            if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 2611356893183) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_normal_functions_multi_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_GCD(self):
            return self.getToken(PSParser.FUNC_GCD, 0)

        def FUNC_LCM(self):
            return self.getToken(PSParser.FUNC_LCM, 0)

        def FUNC_MAX(self):
            return self.getToken(PSParser.FUNC_MAX, 0)

        def FUNC_MIN(self):
            return self.getToken(PSParser.FUNC_MIN, 0)

        def getRuleIndex(self):
            return PSParser.RULE_func_normal_functions_multi_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_normal_functions_multi_arg" ):
                listener.enterFunc_normal_functions_multi_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_normal_functions_multi_arg" ):
                listener.exitFunc_normal_functions_multi_arg(self)




    def func_normal_functions_multi_arg(self):

        localctx = PSParser.Func_normal_functions_multi_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_func_normal_functions_multi_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            _la = self._input.LA(1)
            if not(((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & 51) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_operator_names_single_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_ARSINH_NAME(self):
            return self.getToken(PSParser.FUNC_ARSINH_NAME, 0)

        def FUNC_ARCOSH_NAME(self):
            return self.getToken(PSParser.FUNC_ARCOSH_NAME, 0)

        def FUNC_ARTANH_NAME(self):
            return self.getToken(PSParser.FUNC_ARTANH_NAME, 0)

        def FUNC_ARCSINH_NAME(self):
            return self.getToken(PSParser.FUNC_ARCSINH_NAME, 0)

        def FUNC_ARCCOSH_NAME(self):
            return self.getToken(PSParser.FUNC_ARCCOSH_NAME, 0)

        def FUNC_ARCTANH_NAME(self):
            return self.getToken(PSParser.FUNC_ARCTANH_NAME, 0)

        def FUNC_FLOOR_NAME(self):
            return self.getToken(PSParser.FUNC_FLOOR_NAME, 0)

        def FUNC_CEIL_NAME(self):
            return self.getToken(PSParser.FUNC_CEIL_NAME, 0)

        def FUNC_EYE_NAME(self):
            return self.getToken(PSParser.FUNC_EYE_NAME, 0)

        def FUNC_RANK_NAME(self):
            return self.getToken(PSParser.FUNC_RANK_NAME, 0)

        def FUNC_TRACE_NAME(self):
            return self.getToken(PSParser.FUNC_TRACE_NAME, 0)

        def FUNC_RREF_NAME(self):
            return self.getToken(PSParser.FUNC_RREF_NAME, 0)

        def FUNC_NULLSPACE_NAME(self):
            return self.getToken(PSParser.FUNC_NULLSPACE_NAME, 0)

        def FUNC_DIAGONALIZE_NAME(self):
            return self.getToken(PSParser.FUNC_DIAGONALIZE_NAME, 0)

        def FUNC_NORM_NAME(self):
            return self.getToken(PSParser.FUNC_NORM_NAME, 0)

        def FUNC_EIGENVALS_NAME(self):
            return self.getToken(PSParser.FUNC_EIGENVALS_NAME, 0)

        def FUNC_EIGENVECTORS_NAME(self):
            return self.getToken(PSParser.FUNC_EIGENVECTORS_NAME, 0)

        def FUNC_SVD_NAME(self):
            return self.getToken(PSParser.FUNC_SVD_NAME, 0)

        def FUNC_COLS_NAME(self):
            return self.getToken(PSParser.FUNC_COLS_NAME, 0)

        def FUNC_ROWS_NAME(self):
            return self.getToken(PSParser.FUNC_ROWS_NAME, 0)

        def getRuleIndex(self):
            return PSParser.RULE_func_operator_names_single_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_operator_names_single_arg" ):
                listener.enterFunc_operator_names_single_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_operator_names_single_arg" ):
                listener.exitFunc_operator_names_single_arg(self)




    def func_operator_names_single_arg(self):

        localctx = PSParser.Func_operator_names_single_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_func_operator_names_single_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            _la = self._input.LA(1)
            if not(((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & 66830205759) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_operator_names_multi_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_GCD_NAME(self):
            return self.getToken(PSParser.FUNC_GCD_NAME, 0)

        def FUNC_LCM_NAME(self):
            return self.getToken(PSParser.FUNC_LCM_NAME, 0)

        def FUNC_ZEROS_NAME(self):
            return self.getToken(PSParser.FUNC_ZEROS_NAME, 0)

        def FUNC_ORTHOGONALIZE_NAME(self):
            return self.getToken(PSParser.FUNC_ORTHOGONALIZE_NAME, 0)

        def FUNC_ONES_NAME(self):
            return self.getToken(PSParser.FUNC_ONES_NAME, 0)

        def FUNC_DIAG_NAME(self):
            return self.getToken(PSParser.FUNC_DIAG_NAME, 0)

        def FUNC_HSTACK_NAME(self):
            return self.getToken(PSParser.FUNC_HSTACK_NAME, 0)

        def FUNC_VSTACK_NAME(self):
            return self.getToken(PSParser.FUNC_VSTACK_NAME, 0)

        def getRuleIndex(self):
            return PSParser.RULE_func_operator_names_multi_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_operator_names_multi_arg" ):
                listener.enterFunc_operator_names_multi_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_operator_names_multi_arg" ):
                listener.exitFunc_operator_names_multi_arg(self)




    def func_operator_names_multi_arg(self):

        localctx = PSParser.Func_operator_names_multi_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_func_operator_names_multi_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            _la = self._input.LA(1)
            if not(((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 29515779) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_normal_single_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.func_operator_name = None # Func_operator_names_single_argContext

        def func_normal_functions_single_arg(self):
            return self.getTypedRuleContext(PSParser.Func_normal_functions_single_argContext,0)


        def CMD_OPERATORNAME(self):
            return self.getToken(PSParser.CMD_OPERATORNAME, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def func_operator_names_single_arg(self):
            return self.getTypedRuleContext(PSParser.Func_operator_names_single_argContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_normal_single_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_normal_single_arg" ):
                listener.enterFunc_normal_single_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_normal_single_arg" ):
                listener.exitFunc_normal_single_arg(self)




    def func_normal_single_arg(self):

        localctx = PSParser.Func_normal_single_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_func_normal_single_arg)
        try:
            self.state = 600
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 103, 104, 107]:
                self.enterOuterAlt(localctx, 1)
                self.state = 594
                self.func_normal_functions_single_arg()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 595
                self.match(PSParser.CMD_OPERATORNAME)
                self.state = 596
                self.match(PSParser.L_BRACE)
                self.state = 597
                localctx.func_operator_name = self.func_operator_names_single_arg()
                self.state = 598
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_normal_multi_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.func_operator_name = None # Func_operator_names_multi_argContext

        def func_normal_functions_multi_arg(self):
            return self.getTypedRuleContext(PSParser.Func_normal_functions_multi_argContext,0)


        def CMD_OPERATORNAME(self):
            return self.getToken(PSParser.CMD_OPERATORNAME, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def func_operator_names_multi_arg(self):
            return self.getTypedRuleContext(PSParser.Func_operator_names_multi_argContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_normal_multi_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_normal_multi_arg" ):
                listener.enterFunc_normal_multi_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_normal_multi_arg" ):
                listener.exitFunc_normal_multi_arg(self)




    def func_normal_multi_arg(self):

        localctx = PSParser.Func_normal_multi_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_func_normal_multi_arg)
        try:
            self.state = 608
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [101, 102, 105, 106]:
                self.enterOuterAlt(localctx, 1)
                self.state = 602
                self.func_normal_functions_multi_arg()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 603
                self.match(PSParser.CMD_OPERATORNAME)
                self.state = 604
                self.match(PSParser.L_BRACE)
                self.state = 605
                localctx.func_operator_name = self.func_operator_names_multi_arg()
                self.state = 606
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.root = None # ExprContext
            self.base = None # ExprContext

        def func_normal_single_arg(self):
            return self.getTypedRuleContext(PSParser.Func_normal_single_argContext,0)


        def L_PAREN(self):
            return self.getToken(PSParser.L_PAREN, 0)

        def func_single_arg(self):
            return self.getTypedRuleContext(PSParser.Func_single_argContext,0)


        def R_PAREN(self):
            return self.getToken(PSParser.R_PAREN, 0)

        def func_single_arg_noparens(self):
            return self.getTypedRuleContext(PSParser.Func_single_arg_noparensContext,0)


        def subexpr(self):
            return self.getTypedRuleContext(PSParser.SubexprContext,0)


        def supexpr(self):
            return self.getTypedRuleContext(PSParser.SupexprContext,0)


        def func_normal_multi_arg(self):
            return self.getTypedRuleContext(PSParser.Func_normal_multi_argContext,0)


        def func_multi_arg(self):
            return self.getTypedRuleContext(PSParser.Func_multi_argContext,0)


        def func_multi_arg_noparens(self):
            return self.getTypedRuleContext(PSParser.Func_multi_arg_noparensContext,0)


        def atom_expr_no_supexpr(self):
            return self.getTypedRuleContext(PSParser.Atom_expr_no_supexprContext,0)


        def func_common_args(self):
            return self.getTypedRuleContext(PSParser.Func_common_argsContext,0)


        def L_BRACKET(self):
            return self.getToken(PSParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(PSParser.R_BRACKET, 0)

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.L_BRACE)
            else:
                return self.getToken(PSParser.L_BRACE, i)

        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.R_BRACE)
            else:
                return self.getToken(PSParser.R_BRACE, i)

        def FUNC_INT(self):
            return self.getToken(PSParser.FUNC_INT, 0)

        def DIFFERENTIAL(self):
            return self.getToken(PSParser.DIFFERENTIAL, 0)

        def frac(self):
            return self.getTypedRuleContext(PSParser.FracContext,0)


        def additive(self):
            return self.getTypedRuleContext(PSParser.AdditiveContext,0)


        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def CARET(self):
            return self.getToken(PSParser.CARET, 0)

        def FUNC_SQRT(self):
            return self.getToken(PSParser.FUNC_SQRT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def mp(self):
            return self.getTypedRuleContext(PSParser.MpContext,0)


        def FUNC_SUM(self):
            return self.getToken(PSParser.FUNC_SUM, 0)

        def FUNC_PROD(self):
            return self.getToken(PSParser.FUNC_PROD, 0)

        def subeq(self):
            return self.getTypedRuleContext(PSParser.SubeqContext,0)


        def FUNC_LIM(self):
            return self.getToken(PSParser.FUNC_LIM, 0)

        def limit_sub(self):
            return self.getTypedRuleContext(PSParser.Limit_subContext,0)


        def EXP_E(self):
            return self.getToken(PSParser.EXP_E, 0)

        def getRuleIndex(self):
            return PSParser.RULE_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc" ):
                listener.enterFunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc" ):
                listener.exitFunc(self)




    def func(self):

        localctx = PSParser.FuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_func)
        self._la = 0 # Token type
        try:
            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 610
                self.func_normal_single_arg()
                self.state = 623
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                if la_ == 1:
                    self.state = 612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==148:
                        self.state = 611
                        self.subexpr()


                    self.state = 615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==149:
                        self.state = 614
                        self.supexpr()


                    pass

                elif la_ == 2:
                    self.state = 618
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==149:
                        self.state = 617
                        self.supexpr()


                    self.state = 621
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==148:
                        self.state = 620
                        self.subexpr()


                    pass


                self.state = 630
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 625
                    self.match(PSParser.L_PAREN)
                    self.state = 626
                    self.func_single_arg()
                    self.state = 627
                    self.match(PSParser.R_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 629
                    self.func_single_arg_noparens()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 632
                self.func_normal_multi_arg()
                self.state = 645
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 634
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==148:
                        self.state = 633
                        self.subexpr()


                    self.state = 637
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==149:
                        self.state = 636
                        self.supexpr()


                    pass

                elif la_ == 2:
                    self.state = 640
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==149:
                        self.state = 639
                        self.supexpr()


                    self.state = 643
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==148:
                        self.state = 642
                        self.subexpr()


                    pass


                self.state = 652
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 647
                    self.match(PSParser.L_PAREN)
                    self.state = 648
                    self.func_multi_arg()
                    self.state = 649
                    self.match(PSParser.R_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 651
                    self.func_multi_arg_noparens()
                    pass


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 654
                self.atom_expr_no_supexpr()
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==149:
                    self.state = 655
                    self.supexpr()


                self.state = 678
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 658
                    self.match(PSParser.L_PAREN)
                    self.state = 659
                    self.func_common_args()
                    self.state = 660
                    self.match(PSParser.R_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 662
                    self.match(PSParser.L_BRACKET)
                    self.state = 663
                    self.func_common_args()
                    self.state = 664
                    self.match(PSParser.R_BRACKET)
                    pass

                elif la_ == 3:
                    self.state = 666
                    self.match(PSParser.L_BRACE)
                    self.state = 667
                    self.match(PSParser.L_PAREN)
                    self.state = 668
                    self.func_common_args()
                    self.state = 669
                    self.match(PSParser.R_PAREN)
                    self.state = 670
                    self.match(PSParser.R_BRACE)
                    pass

                elif la_ == 4:
                    self.state = 672
                    self.match(PSParser.L_BRACE)
                    self.state = 673
                    self.match(PSParser.L_BRACKET)
                    self.state = 674
                    self.func_common_args()
                    self.state = 675
                    self.match(PSParser.R_BRACKET)
                    self.state = 676
                    self.match(PSParser.R_BRACE)
                    pass


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 680
                self.match(PSParser.FUNC_INT)
                self.state = 701
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 681
                    self.subexpr()
                    self.state = 682
                    self.supexpr()

                elif la_ == 2:
                    self.state = 684
                    self.supexpr()
                    self.state = 685
                    self.subexpr()

                elif la_ == 3:
                    self.state = 687
                    self.match(PSParser.UNDERSCORE)
                    self.state = 688
                    self.match(PSParser.L_BRACE)
                    self.state = 689
                    self.match(PSParser.R_BRACE)

                    self.state = 691
                    self.match(PSParser.CARET)
                    self.state = 692
                    self.match(PSParser.L_BRACE)
                    self.state = 693
                    self.match(PSParser.R_BRACE)

                elif la_ == 4:
                    self.state = 694
                    self.match(PSParser.CARET)
                    self.state = 695
                    self.match(PSParser.L_BRACE)
                    self.state = 696
                    self.match(PSParser.R_BRACE)

                    self.state = 698
                    self.match(PSParser.UNDERSCORE)
                    self.state = 699
                    self.match(PSParser.L_BRACE)
                    self.state = 700
                    self.match(PSParser.R_BRACE)


                self.state = 709
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 704
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                    if la_ == 1:
                        self.state = 703
                        self.additive(0)


                    self.state = 706
                    self.match(PSParser.DIFFERENTIAL)
                    pass

                elif la_ == 2:
                    self.state = 707
                    self.frac()
                    pass

                elif la_ == 3:
                    self.state = 708
                    self.additive(0)
                    pass


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 711
                self.match(PSParser.FUNC_SQRT)
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40:
                    self.state = 712
                    self.match(PSParser.L_BRACKET)
                    self.state = 713
                    localctx.root = self.expr()
                    self.state = 714
                    self.match(PSParser.R_BRACKET)


                self.state = 718
                self.match(PSParser.L_BRACE)
                self.state = 719
                localctx.base = self.expr()
                self.state = 720
                self.match(PSParser.R_BRACE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 722
                _la = self._input.LA(1)
                if not(_la==64 or _la==65):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 729
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [148]:
                    self.state = 723
                    self.subeq()
                    self.state = 724
                    self.supexpr()
                    pass
                elif token in [149]:
                    self.state = 726
                    self.supexpr()
                    self.state = 727
                    self.subeq()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 731
                self.mp(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 733
                self.match(PSParser.FUNC_LIM)
                self.state = 734
                self.limit_sub()
                self.state = 735
                self.mp(0)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 737
                self.match(PSParser.EXP_E)
                self.state = 739
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 738
                    self.supexpr()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def COMMA(self):
            return self.getToken(PSParser.COMMA, 0)

        def args(self):
            return self.getTypedRuleContext(PSParser.ArgsContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)




    def args(self):

        localctx = PSParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_args)
        try:
            self.state = 748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 743
                self.expr()
                self.state = 744
                self.match(PSParser.COMMA)
                self.state = 745
                self.args()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 747
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_common_argsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def COMMA(self):
            return self.getToken(PSParser.COMMA, 0)

        def args(self):
            return self.getTypedRuleContext(PSParser.ArgsContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_common_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_common_args" ):
                listener.enterFunc_common_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_common_args" ):
                listener.exitFunc_common_args(self)




    def func_common_args(self):

        localctx = PSParser.Func_common_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_func_common_args)
        try:
            self.state = 758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 750
                self.atom()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 751
                self.expr()
                self.state = 752
                self.match(PSParser.COMMA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 754
                self.expr()
                self.state = 755
                self.match(PSParser.COMMA)
                self.state = 756
                self.args()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.L_BRACE)
            else:
                return self.getToken(PSParser.L_BRACE, i)

        def LIM_APPROACH_SYM(self):
            return self.getToken(PSParser.LIM_APPROACH_SYM, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.R_BRACE)
            else:
                return self.getToken(PSParser.R_BRACE, i)

        def LETTER_NO_E(self):
            return self.getToken(PSParser.LETTER_NO_E, 0)

        def GREEK_CMD(self):
            return self.getToken(PSParser.GREEK_CMD, 0)

        def OTHER_SYMBOL_CMD(self):
            return self.getToken(PSParser.OTHER_SYMBOL_CMD, 0)

        def CARET(self):
            return self.getToken(PSParser.CARET, 0)

        def ADD(self):
            return self.getToken(PSParser.ADD, 0)

        def SUB(self):
            return self.getToken(PSParser.SUB, 0)

        def getRuleIndex(self):
            return PSParser.RULE_limit_sub

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_sub" ):
                listener.enterLimit_sub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_sub" ):
                listener.exitLimit_sub(self)




    def limit_sub(self):

        localctx = PSParser.Limit_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_limit_sub)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.match(PSParser.UNDERSCORE)
            self.state = 761
            self.match(PSParser.L_BRACE)
            self.state = 762
            _la = self._input.LA(1)
            if not(((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & 98305) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 763
            self.match(PSParser.LIM_APPROACH_SYM)
            self.state = 764
            self.expr()
            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 765
                self.match(PSParser.CARET)
                self.state = 766
                self.match(PSParser.L_BRACE)
                self.state = 767
                _la = self._input.LA(1)
                if not(_la==24 or _la==25):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 768
                self.match(PSParser.R_BRACE)


            self.state = 771
            self.match(PSParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_single_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_single_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_single_arg" ):
                listener.enterFunc_single_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_single_arg" ):
                listener.exitFunc_single_arg(self)




    def func_single_arg(self):

        localctx = PSParser.Func_single_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_func_single_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_single_arg_noparensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp_nofunc(self):
            return self.getTypedRuleContext(PSParser.Mp_nofuncContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_single_arg_noparens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_single_arg_noparens" ):
                listener.enterFunc_single_arg_noparens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_single_arg_noparens" ):
                listener.exitFunc_single_arg_noparens(self)




    def func_single_arg_noparens(self):

        localctx = PSParser.Func_single_arg_noparensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_func_single_arg_noparens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.mp_nofunc(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_multi_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def COMMA(self):
            return self.getToken(PSParser.COMMA, 0)

        def func_multi_arg(self):
            return self.getTypedRuleContext(PSParser.Func_multi_argContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_multi_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_multi_arg" ):
                listener.enterFunc_multi_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_multi_arg" ):
                listener.exitFunc_multi_arg(self)




    def func_multi_arg(self):

        localctx = PSParser.Func_multi_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_func_multi_arg)
        try:
            self.state = 782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 777
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 778
                self.expr()
                self.state = 779
                self.match(PSParser.COMMA)
                self.state = 780
                self.func_multi_arg()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_multi_arg_noparensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp_nofunc(self):
            return self.getTypedRuleContext(PSParser.Mp_nofuncContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_multi_arg_noparens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_multi_arg_noparens" ):
                listener.enterFunc_multi_arg_noparens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_multi_arg_noparens" ):
                listener.exitFunc_multi_arg_noparens(self)




    def func_multi_arg_noparens(self):

        localctx = PSParser.Func_multi_arg_noparensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_func_multi_arg_noparens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.mp_nofunc(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def args(self):
            return self.getTypedRuleContext(PSParser.ArgsContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubexpr" ):
                listener.enterSubexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubexpr" ):
                listener.exitSubexpr(self)




    def subexpr(self):

        localctx = PSParser.SubexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_subexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.match(PSParser.UNDERSCORE)
            self.state = 795
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [154, 157, 160, 161, 171, 172, 173, 174, 175, 182]:
                self.state = 787
                self.atom()
                pass
            elif token in [34]:
                self.state = 788
                self.match(PSParser.L_BRACE)
                self.state = 791
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 789
                    self.expr()
                    pass

                elif la_ == 2:
                    self.state = 790
                    self.args()
                    pass


                self.state = 793
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SupexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CARET(self):
            return self.getToken(PSParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_supexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupexpr" ):
                listener.enterSupexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupexpr" ):
                listener.exitSupexpr(self)




    def supexpr(self):

        localctx = PSParser.SupexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_supexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.match(PSParser.CARET)
            self.state = 803
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [154, 157, 160, 161, 171, 172, 173, 174, 175, 182]:
                self.state = 798
                self.atom()
                pass
            elif token in [34]:
                self.state = 799
                self.match(PSParser.L_BRACE)
                self.state = 800
                self.expr()
                self.state = 801
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def equality(self):
            return self.getTypedRuleContext(PSParser.EqualityContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_subeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubeq" ):
                listener.enterSubeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubeq" ):
                listener.exitSubeq(self)




    def subeq(self):

        localctx = PSParser.SubeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_subeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(PSParser.UNDERSCORE)
            self.state = 806
            self.match(PSParser.L_BRACE)
            self.state = 807
            self.equality()
            self.state = 808
            self.match(PSParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SupeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def equality(self):
            return self.getTypedRuleContext(PSParser.EqualityContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_supeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupeq" ):
                listener.enterSupeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupeq" ):
                listener.exitSupeq(self)




    def supeq(self):

        localctx = PSParser.SupeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_supeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.match(PSParser.UNDERSCORE)
            self.state = 811
            self.match(PSParser.L_BRACE)
            self.state = 812
            self.equality()
            self.state = 813
            self.match(PSParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def set_relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Set_relationContext)
            else:
                return self.getTypedRuleContext(PSParser.Set_relationContext,i)


        def IN(self):
            return self.getToken(PSParser.IN, 0)

        def NOTIN(self):
            return self.getToken(PSParser.NOTIN, 0)

        def minus_expr(self):
            return self.getTypedRuleContext(PSParser.Minus_exprContext,0)


        def SUBSET(self):
            return self.getToken(PSParser.SUBSET, 0)

        def SUPSET(self):
            return self.getToken(PSParser.SUPSET, 0)

        def getRuleIndex(self):
            return PSParser.RULE_set_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_relation" ):
                listener.enterSet_relation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_relation" ):
                listener.exitSet_relation(self)



    def set_relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.Set_relationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 124
        self.enterRecursionRule(localctx, 124, self.RULE_set_relation, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 816
                self.expr()
                self.state = 817
                _la = self._input.LA(1)
                if not(_la==162 or _la==190):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 818
                self.set_relation(2)
                pass

            elif la_ == 2:
                self.state = 820
                self.minus_expr(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 828
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.Set_relationContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_set_relation)
                    self.state = 823
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 824
                    _la = self._input.LA(1)
                    if not(_la==188 or _la==189):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 825
                    self.set_relation(4) 
                self.state = 830
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Minus_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def union_expr(self):
            return self.getTypedRuleContext(PSParser.Union_exprContext,0)


        def minus_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Minus_exprContext)
            else:
                return self.getTypedRuleContext(PSParser.Minus_exprContext,i)


        def SET_MINUS(self):
            return self.getToken(PSParser.SET_MINUS, 0)

        def getRuleIndex(self):
            return PSParser.RULE_minus_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinus_expr" ):
                listener.enterMinus_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinus_expr" ):
                listener.exitMinus_expr(self)



    def minus_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.Minus_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_minus_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.union_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 839
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.Minus_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_minus_expr)
                    self.state = 834
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 835
                    self.match(PSParser.SET_MINUS)
                    self.state = 836
                    self.minus_expr(3) 
                self.state = 841
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Union_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intersection_expr(self):
            return self.getTypedRuleContext(PSParser.Intersection_exprContext,0)


        def union_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Union_exprContext)
            else:
                return self.getTypedRuleContext(PSParser.Union_exprContext,i)


        def UNION(self):
            return self.getToken(PSParser.UNION, 0)

        def getRuleIndex(self):
            return PSParser.RULE_union_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_expr" ):
                listener.enterUnion_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_expr" ):
                listener.exitUnion_expr(self)



    def union_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.Union_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_union_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.intersection_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 850
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.Union_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_union_expr)
                    self.state = 845
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 846
                    self.match(PSParser.UNION)
                    self.state = 847
                    self.union_expr(3) 
                self.state = 852
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Intersection_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_group(self):
            return self.getTypedRuleContext(PSParser.Set_groupContext,0)


        def intersection_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Intersection_exprContext)
            else:
                return self.getTypedRuleContext(PSParser.Intersection_exprContext,i)


        def INTERSECTION(self):
            return self.getToken(PSParser.INTERSECTION, 0)

        def getRuleIndex(self):
            return PSParser.RULE_intersection_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntersection_expr" ):
                listener.enterIntersection_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntersection_expr" ):
                listener.exitIntersection_expr(self)



    def intersection_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.Intersection_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 130
        self.enterRecursionRule(localctx, 130, self.RULE_intersection_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.set_group()
            self._ctx.stop = self._input.LT(-1)
            self.state = 861
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.Intersection_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_intersection_expr)
                    self.state = 856
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 857
                    self.match(PSParser.INTERSECTION)
                    self.state = 858
                    self.intersection_expr(3) 
                self.state = 863
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Set_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(PSParser.L_PAREN, 0)

        def minus_expr(self):
            return self.getTypedRuleContext(PSParser.Minus_exprContext,0)


        def R_PAREN(self):
            return self.getToken(PSParser.R_PAREN, 0)

        def set_atom(self):
            return self.getTypedRuleContext(PSParser.Set_atomContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_set_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_group" ):
                listener.enterSet_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_group" ):
                listener.exitSet_group(self)




    def set_group(self):

        localctx = PSParser.Set_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_set_group)
        try:
            self.state = 869
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 864
                self.match(PSParser.L_PAREN)
                self.state = 865
                self.minus_expr(0)
                self.state = 866
                self.match(PSParser.R_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 868
                self.set_atom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_set(self):
            return self.getTypedRuleContext(PSParser.Literal_setContext,0)


        def interval(self):
            return self.getTypedRuleContext(PSParser.IntervalContext,0)


        def finite_set(self):
            return self.getTypedRuleContext(PSParser.Finite_setContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_set_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_atom" ):
                listener.enterSet_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_atom" ):
                listener.exitSet_atom(self)




    def set_atom(self):

        localctx = PSParser.Set_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_set_atom)
        try:
            self.state = 874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 871
                self.literal_set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 872
                self.interval()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 873
                self.finite_set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def COMMA(self):
            return self.getToken(PSParser.COMMA, 0)

        def L_BRACKET(self):
            return self.getToken(PSParser.L_BRACKET, 0)

        def L_PAREN(self):
            return self.getToken(PSParser.L_PAREN, 0)

        def L_PAREN_VISUAL(self):
            return self.getToken(PSParser.L_PAREN_VISUAL, 0)

        def L_BRACK(self):
            return self.getToken(PSParser.L_BRACK, 0)

        def L_GROUP(self):
            return self.getToken(PSParser.L_GROUP, 0)

        def R_BRACKET(self):
            return self.getToken(PSParser.R_BRACKET, 0)

        def R_PAREN(self):
            return self.getToken(PSParser.R_PAREN, 0)

        def R_PAREN_VISUAL(self):
            return self.getToken(PSParser.R_PAREN_VISUAL, 0)

        def R_BRACK(self):
            return self.getToken(PSParser.R_BRACK, 0)

        def R_GROUP(self):
            return self.getToken(PSParser.R_GROUP, 0)

        def getRuleIndex(self):
            return PSParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)




    def interval(self):

        localctx = PSParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 5503195283456) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 877
            self.expr()
            self.state = 878
            self.match(PSParser.COMMA)
            self.state = 879
            self.expr()
            self.state = 880
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 11006390566912) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finite_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def set_elements(self):
            return self.getTypedRuleContext(PSParser.Set_elementsContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def L_PAREN(self):
            return self.getToken(PSParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(PSParser.R_PAREN, 0)

        def L_PAREN_VISUAL(self):
            return self.getToken(PSParser.L_PAREN_VISUAL, 0)

        def R_PAREN_VISUAL(self):
            return self.getToken(PSParser.R_PAREN_VISUAL, 0)

        def L_BRACKET(self):
            return self.getToken(PSParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(PSParser.R_BRACKET, 0)

        def L_BRACE_VISUAL(self):
            return self.getToken(PSParser.L_BRACE_VISUAL, 0)

        def R_BRACE_VISUAL(self):
            return self.getToken(PSParser.R_BRACE_VISUAL, 0)

        def getRuleIndex(self):
            return PSParser.RULE_finite_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinite_set" ):
                listener.enterFinite_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinite_set" ):
                listener.exitFinite_set(self)




    def finite_set(self):

        localctx = PSParser.Finite_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_finite_set)
        try:
            self.state = 902
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 882
                self.match(PSParser.L_BRACE)
                self.state = 883
                self.set_elements()
                self.state = 884
                self.match(PSParser.R_BRACE)
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 886
                self.match(PSParser.L_PAREN)
                self.state = 887
                self.set_elements()
                self.state = 888
                self.match(PSParser.R_PAREN)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 3)
                self.state = 890
                self.match(PSParser.L_PAREN_VISUAL)
                self.state = 891
                self.set_elements()
                self.state = 892
                self.match(PSParser.R_PAREN_VISUAL)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 4)
                self.state = 894
                self.match(PSParser.L_BRACKET)
                self.state = 895
                self.set_elements()
                self.state = 896
                self.match(PSParser.R_BRACKET)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 5)
                self.state = 898
                self.match(PSParser.L_BRACE_VISUAL)
                self.state = 899
                self.set_elements()
                self.state = 900
                self.match(PSParser.R_BRACE_VISUAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Set_elementContext)
            else:
                return self.getTypedRuleContext(PSParser.Set_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.COMMA)
            else:
                return self.getToken(PSParser.COMMA, i)

        def getRuleIndex(self):
            return PSParser.RULE_set_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_elements" ):
                listener.enterSet_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_elements" ):
                listener.exitSet_elements(self)




    def set_elements(self):

        localctx = PSParser.Set_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_set_elements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self.set_element()
            self.state = 909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==152:
                self.state = 905
                self.match(PSParser.COMMA)
                self.state = 906
                self.set_element()
                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET_NATURALS(self):
            return self.getToken(PSParser.SET_NATURALS, 0)

        def SET_INTEGERS(self):
            return self.getToken(PSParser.SET_INTEGERS, 0)

        def SET_RATIONALS(self):
            return self.getToken(PSParser.SET_RATIONALS, 0)

        def SET_REALS(self):
            return self.getToken(PSParser.SET_REALS, 0)

        def SET_COMPLEX(self):
            return self.getToken(PSParser.SET_COMPLEX, 0)

        def SET_PRIMES(self):
            return self.getToken(PSParser.SET_PRIMES, 0)

        def SET_EMPTY(self):
            return self.getToken(PSParser.SET_EMPTY, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_literal_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_set" ):
                listener.enterLiteral_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_set" ):
                listener.exitLiteral_set(self)




    def literal_set(self):

        localctx = PSParser.Literal_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_literal_set)
        try:
            self.state = 921
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [176]:
                self.enterOuterAlt(localctx, 1)
                self.state = 912
                self.match(PSParser.SET_NATURALS)
                pass
            elif token in [177]:
                self.enterOuterAlt(localctx, 2)
                self.state = 913
                self.match(PSParser.SET_INTEGERS)
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 3)
                self.state = 914
                self.match(PSParser.SET_RATIONALS)
                pass
            elif token in [179]:
                self.enterOuterAlt(localctx, 4)
                self.state = 915
                self.match(PSParser.SET_REALS)
                pass
            elif token in [180]:
                self.enterOuterAlt(localctx, 5)
                self.state = 916
                self.match(PSParser.SET_COMPLEX)
                pass
            elif token in [181]:
                self.enterOuterAlt(localctx, 6)
                self.state = 917
                self.match(PSParser.SET_PRIMES)
                pass
            elif token in [187]:
                self.enterOuterAlt(localctx, 7)
                self.state = 918
                self.match(PSParser.SET_EMPTY)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 8)
                self.state = 919
                self.match(PSParser.L_BRACE)
                self.state = 920
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plus_minus_expr(self):
            return self.getTypedRuleContext(PSParser.Plus_minus_exprContext,0)


        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_set_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_element" ):
                listener.enterSet_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_element" ):
                listener.exitSet_element(self)




    def set_element(self):

        localctx = PSParser.Set_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_set_element)
        try:
            self.state = 925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 923
                self.plus_minus_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 924
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plus_minus_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def PLUS_MINUS(self):
            return self.getToken(PSParser.PLUS_MINUS, 0)

        def getRuleIndex(self):
            return PSParser.RULE_plus_minus_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlus_minus_expr" ):
                listener.enterPlus_minus_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlus_minus_expr" ):
                listener.exitPlus_minus_expr(self)




    def plus_minus_expr(self):

        localctx = PSParser.Plus_minus_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_plus_minus_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self.expr()
            self.state = 928
            self.match(PSParser.PLUS_MINUS)
            self.state = 929
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[12] = self.relation_sempred
        self._predicates[17] = self.additive_sempred
        self._predicates[18] = self.mp_sempred
        self._predicates[19] = self.mp_nofunc_sempred
        self._predicates[28] = self.exp_sempred
        self._predicates[29] = self.exp_nofunc_sempred
        self._predicates[62] = self.set_relation_sempred
        self._predicates[63] = self.minus_expr_sempred
        self._predicates[64] = self.union_expr_sempred
        self._predicates[65] = self.intersection_expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def relation_sempred(self, localctx:RelationContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def additive_sempred(self, localctx:AdditiveContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def mp_sempred(self, localctx:MpContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def mp_nofunc_sempred(self, localctx:Mp_nofuncContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def exp_sempred(self, localctx:ExpContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def exp_nofunc_sempred(self, localctx:Exp_nofuncContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

    def set_relation_sempred(self, localctx:Set_relationContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         

    def minus_expr_sempred(self, localctx:Minus_exprContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

    def union_expr_sempred(self, localctx:Union_exprContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def intersection_expr_sempred(self, localctx:Intersection_exprContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         




