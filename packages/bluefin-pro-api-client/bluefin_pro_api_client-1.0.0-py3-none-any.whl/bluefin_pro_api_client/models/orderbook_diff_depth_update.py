# coding: utf-8

"""
    Bluefin API

    Bluefin API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class OrderbookDiffDepthUpdate(BaseModel):
    """
    OrderbookDiffDepthUpdate
    """ # noqa: E501
    updated_at_utc_millis: StrictInt = Field(description="The timestamp of the orderbook update.", alias="updatedAtUtcMillis")
    market_address: StrictStr = Field(description="The address of the market for the orderbook update.", alias="marketAddress")
    bids_e9: List[List[StrictStr]] = Field(alias="bidsE9")
    asks_e9: List[List[StrictStr]] = Field(alias="asksE9")
    first_update_id: StrictInt = Field(description="The ID of the first update in this batch.", alias="firstUpdateId")
    last_update_id: StrictInt = Field(description="The ID of the last update in this batch.", alias="lastUpdateId")
    __properties: ClassVar[List[str]] = ["updatedAtUtcMillis", "marketAddress", "bidsE9", "asksE9", "firstUpdateId", "lastUpdateId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderbookDiffDepthUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderbookDiffDepthUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "updatedAtUtcMillis": obj.get("updatedAtUtcMillis"),
            "marketAddress": obj.get("marketAddress"),
            "bidsE9": obj.get("bidsE9"),
            "asksE9": obj.get("asksE9"),
            "firstUpdateId": obj.get("firstUpdateId"),
            "lastUpdateId": obj.get("lastUpdateId")
        })
        return _obj


