# coding: utf-8

"""
    Bluefin API

    Bluefin API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from bluefin_pro_api_client.models.side import Side
from typing import Optional, Set
from typing_extensions import Self

class AccountPositionUpdate(BaseModel):
    """
    Details about an account position update.
    """ # noqa: E501
    market_address: StrictStr = Field(description="The address of the market.", alias="marketAddress")
    avg_entry_price_e9: StrictStr = Field(description="The average entry price for the position.", alias="avgEntryPriceE9")
    leverage_e9: StrictStr = Field(description="The leverage applied to the position.", alias="leverageE9")
    liquidation_price_e9: StrictStr = Field(description="The liquidation price of the position.", alias="liquidationPriceE9")
    mark_price_e9: StrictStr = Field(description="The current mark price of the position.", alias="markPriceE9")
    notional_value_e9: StrictStr = Field(description="The notional value of the position.", alias="notionalValueE9")
    max_notional_value_e9: StrictStr = Field(description="The maximum notional value for the position.", alias="maxNotionalValueE9")
    size_e9: StrictStr = Field(description="The size of the position.", alias="sizeE9")
    unrealized_pnl_e9: StrictStr = Field(description="The unrealized profit and loss for the position.", alias="unrealizedPnlE9")
    side: Side
    initial_margin_e9: StrictStr = Field(description="The initial margin required for the position.", alias="initialMarginE9")
    maintenance_margin_e9: StrictStr = Field(description="The maintenance margin required for the position.", alias="maintenanceMarginE9")
    is_isolated: StrictBool = Field(description="Indicates if the position is isolated.", alias="isIsolated")
    isolated_margin_e9: StrictStr = Field(description="The isolated margin applied to the position.", alias="isolatedMarginE9")
    updated_at_utc_millis: StrictInt = Field(description="The last update time for the position in milliseconds.", alias="updatedAtUtcMillis")
    __properties: ClassVar[List[str]] = ["marketAddress", "avgEntryPriceE9", "leverageE9", "liquidationPriceE9", "markPriceE9", "notionalValueE9", "maxNotionalValueE9", "sizeE9", "unrealizedPnlE9", "side", "initialMarginE9", "maintenanceMarginE9", "isIsolated", "isolatedMarginE9", "updatedAtUtcMillis"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountPositionUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountPositionUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "marketAddress": obj.get("marketAddress"),
            "avgEntryPriceE9": obj.get("avgEntryPriceE9"),
            "leverageE9": obj.get("leverageE9"),
            "liquidationPriceE9": obj.get("liquidationPriceE9"),
            "markPriceE9": obj.get("markPriceE9"),
            "notionalValueE9": obj.get("notionalValueE9"),
            "maxNotionalValueE9": obj.get("maxNotionalValueE9"),
            "sizeE9": obj.get("sizeE9"),
            "unrealizedPnlE9": obj.get("unrealizedPnlE9"),
            "side": obj.get("side"),
            "initialMarginE9": obj.get("initialMarginE9"),
            "maintenanceMarginE9": obj.get("maintenanceMarginE9"),
            "isIsolated": obj.get("isIsolated"),
            "isolatedMarginE9": obj.get("isolatedMarginE9"),
            "updatedAtUtcMillis": obj.get("updatedAtUtcMillis")
        })
        return _obj


