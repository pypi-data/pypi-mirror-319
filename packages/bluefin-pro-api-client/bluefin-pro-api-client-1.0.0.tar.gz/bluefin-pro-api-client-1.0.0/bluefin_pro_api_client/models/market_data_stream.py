# coding: utf-8

"""
    Bluefin API

    Bluefin API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from bluefin_pro_api_client.models.candlestick_stream import CandlestickStream
from bluefin_pro_api_client.models.diff_depth_stream import DiffDepthStream
from bluefin_pro_api_client.models.mark_price_stream import MarkPriceStream
from bluefin_pro_api_client.models.market_price_stream import MarketPriceStream
from bluefin_pro_api_client.models.oracle_price_stream import OraclePriceStream
from bluefin_pro_api_client.models.partial_depth_stream import PartialDepthStream
from bluefin_pro_api_client.models.recent_trade_stream import RecentTradeStream
from bluefin_pro_api_client.models.ticker_all_stream import TickerAllStream
from bluefin_pro_api_client.models.ticker_stream import TickerStream
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

MARKETDATASTREAM_ONE_OF_SCHEMAS = ["CandlestickStream", "DiffDepthStream", "MarkPriceStream", "MarketPriceStream", "OraclePriceStream", "PartialDepthStream", "RecentTradeStream", "TickerAllStream", "TickerStream"]

class MarketDataStream(BaseModel):
    """
    Represents the type of market data stream and its parameters.
    """
    # data type: RecentTradeStream
    oneof_schema_1_validator: Optional[RecentTradeStream] = None
    # data type: TickerStream
    oneof_schema_2_validator: Optional[TickerStream] = None
    # data type: TickerAllStream
    oneof_schema_3_validator: Optional[TickerAllStream] = None
    # data type: CandlestickStream
    oneof_schema_4_validator: Optional[CandlestickStream] = None
    # data type: DiffDepthStream
    oneof_schema_5_validator: Optional[DiffDepthStream] = None
    # data type: PartialDepthStream
    oneof_schema_6_validator: Optional[PartialDepthStream] = None
    # data type: OraclePriceStream
    oneof_schema_7_validator: Optional[OraclePriceStream] = None
    # data type: MarkPriceStream
    oneof_schema_8_validator: Optional[MarkPriceStream] = None
    # data type: MarketPriceStream
    oneof_schema_9_validator: Optional[MarketPriceStream] = None
    actual_instance: Optional[Union[CandlestickStream, DiffDepthStream, MarkPriceStream, MarketPriceStream, OraclePriceStream, PartialDepthStream, RecentTradeStream, TickerAllStream, TickerStream]] = None
    one_of_schemas: Set[str] = { "CandlestickStream", "DiffDepthStream", "MarkPriceStream", "MarketPriceStream", "OraclePriceStream", "PartialDepthStream", "RecentTradeStream", "TickerAllStream", "TickerStream" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = MarketDataStream.model_construct()
        error_messages = []
        match = 0
        # validate data type: RecentTradeStream
        if not isinstance(v, RecentTradeStream):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RecentTradeStream`")
        else:
            match += 1
        # validate data type: TickerStream
        if not isinstance(v, TickerStream):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TickerStream`")
        else:
            match += 1
        # validate data type: TickerAllStream
        if not isinstance(v, TickerAllStream):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TickerAllStream`")
        else:
            match += 1
        # validate data type: CandlestickStream
        if not isinstance(v, CandlestickStream):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CandlestickStream`")
        else:
            match += 1
        # validate data type: DiffDepthStream
        if not isinstance(v, DiffDepthStream):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DiffDepthStream`")
        else:
            match += 1
        # validate data type: PartialDepthStream
        if not isinstance(v, PartialDepthStream):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PartialDepthStream`")
        else:
            match += 1
        # validate data type: OraclePriceStream
        if not isinstance(v, OraclePriceStream):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OraclePriceStream`")
        else:
            match += 1
        # validate data type: MarkPriceStream
        if not isinstance(v, MarkPriceStream):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MarkPriceStream`")
        else:
            match += 1
        # validate data type: MarketPriceStream
        if not isinstance(v, MarketPriceStream):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MarketPriceStream`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in MarketDataStream with oneOf schemas: CandlestickStream, DiffDepthStream, MarkPriceStream, MarketPriceStream, OraclePriceStream, PartialDepthStream, RecentTradeStream, TickerAllStream, TickerStream. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in MarketDataStream with oneOf schemas: CandlestickStream, DiffDepthStream, MarkPriceStream, MarketPriceStream, OraclePriceStream, PartialDepthStream, RecentTradeStream, TickerAllStream, TickerStream. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into RecentTradeStream
        try:
            instance.actual_instance = RecentTradeStream.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TickerStream
        try:
            instance.actual_instance = TickerStream.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TickerAllStream
        try:
            instance.actual_instance = TickerAllStream.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CandlestickStream
        try:
            instance.actual_instance = CandlestickStream.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DiffDepthStream
        try:
            instance.actual_instance = DiffDepthStream.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PartialDepthStream
        try:
            instance.actual_instance = PartialDepthStream.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OraclePriceStream
        try:
            instance.actual_instance = OraclePriceStream.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MarkPriceStream
        try:
            instance.actual_instance = MarkPriceStream.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MarketPriceStream
        try:
            instance.actual_instance = MarketPriceStream.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into MarketDataStream with oneOf schemas: CandlestickStream, DiffDepthStream, MarkPriceStream, MarketPriceStream, OraclePriceStream, PartialDepthStream, RecentTradeStream, TickerAllStream, TickerStream. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into MarketDataStream with oneOf schemas: CandlestickStream, DiffDepthStream, MarkPriceStream, MarketPriceStream, OraclePriceStream, PartialDepthStream, RecentTradeStream, TickerAllStream, TickerStream. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], CandlestickStream, DiffDepthStream, MarkPriceStream, MarketPriceStream, OraclePriceStream, PartialDepthStream, RecentTradeStream, TickerAllStream, TickerStream]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


