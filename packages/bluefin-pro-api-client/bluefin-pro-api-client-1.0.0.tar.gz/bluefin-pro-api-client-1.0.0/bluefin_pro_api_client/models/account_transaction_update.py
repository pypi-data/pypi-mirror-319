# coding: utf-8

"""
    Bluefin API

    Bluefin API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from bluefin_pro_api_client.models.transaction_type import TransactionType
from typing import Optional, Set
from typing_extensions import Self

class AccountTransactionUpdate(BaseModel):
    """
    Details about a transaction in the account.
    """ # noqa: E501
    market_address: StrictStr = Field(description="The address of the market.", alias="marketAddress")
    transaction_type: TransactionType = Field(alias="transactionType")
    amount_e9: StrictStr = Field(description="The amount of the transaction in scientific notation with 9 decimal places.", alias="amountE9")
    asset_bank_address: StrictStr = Field(description="The address of the bank holding the asset.", alias="assetBankAddress")
    trade_id: StrictStr = Field(description="The trade ID associated with the transaction.", alias="tradeId")
    __properties: ClassVar[List[str]] = ["marketAddress", "transactionType", "amountE9", "assetBankAddress", "tradeId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountTransactionUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountTransactionUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "marketAddress": obj.get("marketAddress"),
            "transactionType": obj.get("transactionType"),
            "amountE9": obj.get("amountE9"),
            "assetBankAddress": obj.get("assetBankAddress"),
            "tradeId": obj.get("tradeId")
        })
        return _obj


