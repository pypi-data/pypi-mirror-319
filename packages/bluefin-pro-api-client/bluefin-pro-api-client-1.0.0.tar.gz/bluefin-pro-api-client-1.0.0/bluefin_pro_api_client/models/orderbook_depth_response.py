# coding: utf-8

"""
    Bluefin API

    Bluefin API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class OrderbookDepthResponse(BaseModel):
    """
    OrderbookDepthResponse
    """ # noqa: E501
    market_address: StrictStr = Field(description="Market address.", alias="marketAddress")
    last_update_id: StrictInt = Field(description="Count indicating the number of changes in orderbook state.", alias="lastUpdateId")
    last_updated_at_utc_millis: StrictInt = Field(description="Timestamp at which the last change in orderbook state took place, in milliseconds.", alias="lastUpdatedAtUtcMillis")
    response_sent_at_utc_millis: StrictInt = Field(description="The time at which the orderbook server sent the response, in milliseconds.", alias="responseSentAtUtcMillis")
    best_bid_price_e9: StrictStr = Field(description="The best bid price on orderbook at the moment (e9 format).", alias="bestBidPriceE9")
    best_bid_quantity_e9: StrictStr = Field(description="The best bid quantity on orderbook at the moment (e9 format).", alias="bestBidQuantityE9")
    best_ask_price_e9: StrictStr = Field(description="The best ask price on orderbook at the moment (e9 format).", alias="bestAskPriceE9")
    best_ask_quantity_e9: StrictStr = Field(description="The best ask quantity on orderbook at the moment (e9 format).", alias="bestAskQuantityE9")
    bids_e9: List[List[StrictStr]] = Field(description="Bids to be filled. Index 0 is price, index 1 is quantity at price bin. Prices are in e9 format.", alias="bidsE9")
    asks_e9: List[List[StrictStr]] = Field(description="Asks to be filled. Index 0 is price, index 1 is quantity at price bin. Prices are in e9 format.", alias="asksE9")
    __properties: ClassVar[List[str]] = ["marketAddress", "lastUpdateId", "lastUpdatedAtUtcMillis", "responseSentAtUtcMillis", "bestBidPriceE9", "bestBidQuantityE9", "bestAskPriceE9", "bestAskQuantityE9", "bidsE9", "asksE9"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderbookDepthResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderbookDepthResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "marketAddress": obj.get("marketAddress"),
            "lastUpdateId": obj.get("lastUpdateId"),
            "lastUpdatedAtUtcMillis": obj.get("lastUpdatedAtUtcMillis"),
            "responseSentAtUtcMillis": obj.get("responseSentAtUtcMillis"),
            "bestBidPriceE9": obj.get("bestBidPriceE9"),
            "bestBidQuantityE9": obj.get("bestBidQuantityE9"),
            "bestAskPriceE9": obj.get("bestAskPriceE9"),
            "bestAskQuantityE9": obj.get("bestAskQuantityE9"),
            "bidsE9": obj.get("bidsE9"),
            "asksE9": obj.get("asksE9")
        })
        return _obj


