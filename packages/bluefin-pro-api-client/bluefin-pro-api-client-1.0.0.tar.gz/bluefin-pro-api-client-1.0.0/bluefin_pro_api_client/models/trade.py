# coding: utf-8

"""
    Bluefin API

    Bluefin API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from bluefin_pro_api_client.models.trade_side import TradeSide
from typing import Optional, Set
from typing_extensions import Self

class Trade(BaseModel):
    """
    Trade
    """ # noqa: E501
    id: StrictInt = Field(description="Trade ID")
    market_address: StrictStr = Field(description="Market address.", alias="marketAddress")
    price_e9: StrictStr = Field(description="Trade price (e9 format).", alias="priceE9")
    quantity_e9: StrictStr = Field(description="Trade quantity (e9 format).", alias="quantityE9")
    quote_quantity_e9: StrictStr = Field(description="Trade quote quantity (e9 format).", alias="quoteQuantityE9")
    side: TradeSide
    time_at_utc_millis: StrictInt = Field(description="Trade timestamp.", alias="timeAtUtcMillis")
    __properties: ClassVar[List[str]] = ["id", "marketAddress", "priceE9", "quantityE9", "quoteQuantityE9", "side", "timeAtUtcMillis"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Trade from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Trade from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "marketAddress": obj.get("marketAddress"),
            "priceE9": obj.get("priceE9"),
            "quantityE9": obj.get("quantityE9"),
            "quoteQuantityE9": obj.get("quoteQuantityE9"),
            "side": obj.get("side"),
            "timeAtUtcMillis": obj.get("timeAtUtcMillis")
        })
        return _obj


