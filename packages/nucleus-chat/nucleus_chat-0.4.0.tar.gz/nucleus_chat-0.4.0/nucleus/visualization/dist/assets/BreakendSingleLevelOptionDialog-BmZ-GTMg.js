import{m as z,R as l,i as $,C as F,aQ as j,j as O,u as b,o as R,a as N,c as _,D as B,e as L,B as S,x as V,d as A}from"./index-Bm2SqMk3.js";const I=z()({block:{display:"block"}});function C({checked:e,disabled:c,label:a,onChange:o}){const{classes:n}=I();return l.createElement($,{disabled:c,className:n.block,control:l.createElement(F,{checked:e,onChange:o}),label:a})}function G(e){return e.map(({id:c,displays:a,...o})=>({...o,displays:a.map(({id:n,...i})=>i)}))}function M({feature:e,assembly:c}){var a;const o=(a=e.get("ALT"))===null||a===void 0?void 0:a[0],n=o?j(o):void 0,i=e.get("start"),d=e.get("refName"),s=r=>c.getCanonicalRefName(r)||r;if(o==="<TRA>"){const r=e.get("INFO");return{pos:i,refName:s(d),mateRefName:s(r.CHR2[0]),matePos:r.END[0]-1}}else if(n!=null&&n.MatePosition){const r=n.MatePosition.split(":");return{pos:i,refName:s(d),mateRefName:s(r[0]),matePos:+r[1]-1}}else if(e.get("mate")){const r=e.get("mate");return{pos:i,refName:s(d),mateRefName:s(r.refName),matePos:r.start}}else return{pos:i,refName:s(d),mateRefName:s(d),matePos:e.get("end")}}function H({feature:e,session:c,assemblyName:a}){const{assemblyManager:o}=c,n=o.get(a);if(!n)throw new Error(`assembly ${a} not found`);if(!n.regions)throw new Error(`assembly ${a} regions not loaded`);const i=M({feature:e,assembly:n}),{refName:d,mateRefName:s}=i,r=n.regions.find(t=>t.refName===d),u=n.regions.find(t=>t.refName===s);return{coverage:i,snap:{type:"BreakpointSplitView",views:[{type:"LinearGenomeView",displayedRegions:b.gatherOverlaps([{...r,assemblyName:a},{...u,assemblyName:a}])}],displayName:`${e.get("name")||e.get("id")||"breakend"} split detail`}}}async function W({stableViewId:e,feature:c,assemblyName:a,session:o,tracks:n,windowSize:i=0}){var d;const{snap:s,coverage:r}=H({feature:c,assemblyName:a,session:o}),{refName:u,pos:t,mateRefName:f,matePos:k}=r;let g=o.views.find(p=>p.id===e);g?((d=g.views[0])===null||d===void 0||d.setDisplayedRegions(s.views[0].displayedRegions),g.setDisplayName(s.displayName)):g=o.addView("BreakpointSplitView",{...s,views:[{...s.views[0],tracks:n?G(O(n)):[]}]});const m=g.views[0];await b.when(()=>m.initialized);const v=m.bpToPx({coord:Math.max(0,t-i),refName:u}),w=m.bpToPx({coord:k+i,refName:f});v&&w?m.moveTo({...v,offset:v.offsetPx},{...w,offset:w.offsetPx}):b.getSession(m).notify("Unable to navigate to breakpoint")}function T(e){return e.map(({id:c,displays:a,...o})=>({...o,displays:a.map(({id:n,...i})=>i)}))}const D=R(function({session:e,handleClose:c,feature:a,assemblyName:o,stableViewId:n,view:i}){const[d,s]=N.useState(!0),[r,u]=N.useState(!0);return l.createElement(_.Dialog,{open:!0,onClose:c,title:"Multi-level breakpoint split view options"},l.createElement(B,null,l.createElement("div",null,"Launch multi-level breakpoint split view"),i?l.createElement(l.Fragment,null,l.createElement(C,{checked:d,label:"Copy tracks into the new view",onChange:t=>{s(t.target.checked)}}),d?l.createElement(C,{checked:r,disabled:!d,label:"Mirror the copied tracks (only available if copying tracks and using two level)",onChange:t=>{u(t.target.checked)}}):null):null),l.createElement(L,null,l.createElement(S,{onClick:()=>{(async()=>{try{const{assemblyManager:t}=e,f=await t.waitForAssembly(o);if(!f)throw new Error(`assembly ${o} not found`);const{refName:k,pos:g,mateRefName:m,matePos:v}=M({feature:a,assembly:f}),w=i?O(i.tracks):[];let p=e.views.find(y=>y.id===n);const P=`${a.get("name")||a.get("id")||"breakend"} split detail`;p||(p=e.addView("BreakpointSplitView",{id:n,type:"BreakpointSplitView",displayName:P,views:[{type:"LinearGenomeView",hideHeader:!0,tracks:T(w)},{type:"LinearGenomeView",hideHeader:!0,tracks:T(r?[...w].reverse():w)}]})),p.setDisplayName(P);const h=f.regions.find(y=>y.refName===k),E=f.regions.find(y=>y.refName===m);if(!h||!E)throw new Error("can't find regions");await Promise.all([p.views[0].navToLocations([{refName:k,start:h.start,end:g,assemblyName:o},{refName:k,start:g+1,end:h.end,assemblyName:o}]),p.views[1].navToLocations([{refName:m,start:E.start,end:v,assemblyName:o},{refName:m,start:v+1,end:E.end,assemblyName:o}])]),await V(()=>p.views[1].initialized&&p.views[0].initialized),p.views[1].zoomTo(10),p.views[0].zoomTo(10),p.views[1].centerAt(v,m),p.views[0].centerAt(g,k)}catch(t){console.error(t),e.notifyError(`${t}`,t)}})(),c()},variant:"contained",color:"primary",autoFocus:!0},"OK"),l.createElement(S,{color:"secondary",variant:"contained",onClick:()=>{c()}},"Cancel")))}),x=R(function({session:e,handleClose:c,feature:a,stableViewId:o,assemblyName:n,view:i}){const[d,s]=N.useState(!0),[r,u]=b.useLocalStorage("breakpointWindowSize","5000");return l.createElement(_.Dialog,{open:!0,onClose:c,title:"Single-level breakpoint split view options"},l.createElement(B,null,i?l.createElement(C,{checked:d,label:"Copy tracks into the new view",onChange:t=>{s(t.target.checked)}}):null,l.createElement(A,{label:"Window size (bp)",value:r,onChange:t=>{u(t.target.value)}})),l.createElement(L,null,l.createElement(S,{onClick:()=>{(async()=>{try{const{assemblyManager:t}=e;if(!await t.waitForAssembly(n))throw new Error(`assembly ${n} not found`);await W({feature:a,assemblyName:n,session:e,stableViewId:o,tracks:i==null?void 0:i.tracks,windowSize:+r||0})}catch(t){console.error(t),e.notifyError(`${t}`,t)}})(),c()},variant:"contained",color:"primary",autoFocus:!0},"OK"),l.createElement(S,{color:"secondary",variant:"contained",onClick:()=>{c()}},"Cancel")))}),Q=Object.freeze(Object.defineProperty({__proto__:null,default:D},Symbol.toStringTag,{value:"Module"})),U=Object.freeze(Object.defineProperty({__proto__:null,default:x},Symbol.toStringTag,{value:"Module"})),q=Object.freeze(Object.defineProperty({__proto__:null,default:D},Symbol.toStringTag,{value:"Module"})),J=Object.freeze(Object.defineProperty({__proto__:null,default:x},Symbol.toStringTag,{value:"Module"}));export{Q as B,U as a,q as b,J as c};
