const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/LaunchBreakendPanel-gozxPh1Z.js","assets/index-Bm2SqMk3.js","assets/index-B32Lr0K5.css","assets/BaseCard-BEWjgl8a.js"])))=>i.map(i=>d[i]);
import{a as v,u as _,R as t,i as y,C as N,T as E,b2 as O,bh as C,d as D,_ as P,o as x,P as R,aQ as $}from"./index-Bm2SqMk3.js";import{F as q}from"./FeatureDetails-BOlRKFD_.js";import{B as k}from"./BaseCard-BEWjgl8a.js";function I({rows:a,columns:l}){const[i,n]=v.useState(!1),e=l.map(o=>_.measureGridWidth(a.map(s=>s[o.field])));return a.length?t.createElement("div",null,t.createElement(y,{control:t.createElement(N,{checked:i,onChange:o=>{n(o.target.checked)}}),label:t.createElement(E,{variant:"body2"},"Show options")}),t.createElement(O,{rowHeight:25,rows:a,columns:l.map((o,s)=>({...o,width:e[s]})),slots:{toolbar:i?C:null}})):null}function w({data:a,fields:l,title:i}){return a.length?t.createElement(k,{title:i},t.createElement(I,{rows:a.map((n,e)=>({id:e,...Object.fromEntries(n.split("|").map((o,s)=>[l[s],o]))})),columns:l.map(n=>({field:n}))})):null}function L({columns:a,filter:l,setFilter:i}){return t.createElement(t.Fragment,null,t.createElement(E,null,"These filters can use a plain text search or regex style query, e.g. in the genotype field, entering 1 will query for all genotypes that include the first alternate allele e.g. 0|1 or 1|1, entering [1-9]\\d* will find any non-zero allele e.g. 0|2 or 2/33"),a.map(({field:n})=>t.createElement(D,{key:`filter-${n}`,placeholder:`Filter ${n}`,value:l[n]||"",onChange:e=>{i({...l,[n]:e.target.value})}})))}function V(a){var l;const{feature:i,descriptions:n={}}=a,[e,o]=v.useState({}),s=i.samples||{},r=Object.entries(s);let d,u=[];const f=Object.keys(e);try{u=r.map(c=>({...Object.fromEntries(Object.entries(c[1]).map(m=>[m[0],`${m[1]}`])),sample:c[0],id:c[0]})).filter(c=>f.length?f.every(m=>{const p=e[m];return p?new RegExp(p,"i").exec(c[m]):!0}):!0)}catch(c){d=c}const[b,A]=v.useState(!1),F=["sample",...Object.keys(((l=r[0])===null||l===void 0?void 0:l[1])||{})],T=F.map(c=>_.measureGridWidth(u.map(m=>m[c]))),S=F.map((c,m)=>{var p,g;return{field:c,description:(g=(p=n==null?void 0:n.FORMAT)===null||p===void 0?void 0:p[c])===null||g===void 0?void 0:g.Description,width:T[m]}});return r.length?t.createElement(k,{...a,title:"Samples"},d?t.createElement(E,{color:"error"},`${d}`):null,t.createElement(y,{control:t.createElement(N,{checked:b,onChange:c=>{A(c.target.checked)}}),label:t.createElement(E,{variant:"body2"},"Show options")}),b?t.createElement(L,{setFilter:o,columns:S,filter:e}):null,t.createElement("div",{style:{display:"flex",flexDirection:"column"}},t.createElement(O,{rows:u,hideFooter:u.length<100,columns:S,disableRowSelectionOnClick:!0,rowHeight:25,columnHeaderHeight:35,disableColumnMenu:!0,slots:{toolbar:b?C:null},slotProps:{toolbar:{printOptions:{disableToolbarButton:!0}}}}))):null}const j={CHROM:"chromosome: An identifier from the reference genome",POS:"position: The reference position, with the 1st base having position 1",ID:"identifier: Semi-colon separated list of unique identifiers where available",REF:"reference base(s): Each base must be one of A,C,G,T,N (case insensitive).",ALT:"alternate base(s): Comma-separated list of alternate non-reference alleles",QUAL:"quality: Phred-scaled quality score for the assertion made in ALT",FILTER:"filter status: PASS if this position has passed all filters, otherwise a semicolon-separated list of codes for filters that fail"},h=v.lazy(()=>P(()=>import("./LaunchBreakendPanel-gozxPh1Z.js"),__vite__mapDeps([0,1,2,3])));function H({descriptions:a,feature:l}){var i,n,e,o,s;const r=(n=(i=a==null?void 0:a.INFO)===null||i===void 0?void 0:i.ANN)===null||n===void 0?void 0:n.Description,d=((o=(e=r==null?void 0:r.match(/.*Functional annotations:'(.*)'$/))===null||e===void 0?void 0:e[1])===null||o===void 0?void 0:o.split("|"))||[],u=((s=l.INFO)===null||s===void 0?void 0:s.ANN)||[];return t.createElement(w,{fields:d,data:u,title:"Variant ANN field"})}function B({descriptions:a,feature:l}){var i,n,e,o,s;const r=(n=(i=a==null?void 0:a.INFO)===null||i===void 0?void 0:i.CSQ)===null||n===void 0?void 0:n.Description,d=((o=(e=r==null?void 0:r.match(/.*Format: (.*)/))===null||e===void 0?void 0:e[1])===null||o===void 0?void 0:o.split("|"))||[],u=((s=l.INFO)===null||s===void 0?void 0:s.CSQ)||[];return t.createElement(w,{fields:d,data:u,title:"Variant CSQ field"})}const W=x(function(a){const{model:l}=a,{featureData:i,descriptions:n}=l,e=JSON.parse(JSON.stringify(i)),{samples:o,ALT:s,type:r="",...d}=e;return t.createElement(R,{"data-testid":"variant-side-drawer"},t.createElement(q,{feature:d,descriptions:{...j,...n},...a}),t.createElement(B,{feature:d,descriptions:n}),t.createElement(H,{feature:d,descriptions:n}),t.createElement(v.Suspense,{fallback:null},r==="breakend"?t.createElement(h,{feature:e,locStrings:e.ALT.map(u=>{var f;return((f=$(u))===null||f===void 0?void 0:f.MatePosition)||""}),model:l}):null,r==="translocation"?t.createElement(h,{feature:e,model:l,locStrings:[`${e.INFO.CHR2[0]}:${e.INFO.END}`]}):null,r==="paired_feature"?t.createElement(h,{feature:e,model:l,locStrings:[`${e.mate.refName}:${e.mate.start}`]}):null,r.includes("inversion")||r.includes("deletion")||r.includes("duplication")||r.includes("cnv")||r.includes("sv")?t.createElement(h,{feature:{uniqueId:"random",refName:e.refName,start:e.start,end:e.start+1,mate:{refName:e.refName,start:e.end,end:e.end+1}},model:l,locStrings:[`${e.refName}:${e.end}`]}):null),t.createElement(V,{feature:e,...a,descriptions:n}))});export{W as default};
