# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 64.4.4-v202501071919
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ItemFinderInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cron_schedule': 'list[str]',
        'description': 'str',
        'enabled': 'bool',
        'finder_configurations': 'list[ItemFinderConfigurationV1]',
        'name': 'str',
        'scoped_to': 'str'
    }

    attribute_map = {
        'cron_schedule': 'cronSchedule',
        'description': 'description',
        'enabled': 'enabled',
        'finder_configurations': 'finderConfigurations',
        'name': 'name',
        'scoped_to': 'scopedTo'
    }

    def __init__(self, cron_schedule=None, description=None, enabled=True, finder_configurations=None, name=None, scoped_to=None):
        """
        ItemFinderInputV1 - a model defined in Swagger
        """

        self._cron_schedule = None
        self._description = None
        self._enabled = None
        self._finder_configurations = None
        self._name = None
        self._scoped_to = None

        if cron_schedule is not None:
          self.cron_schedule = cron_schedule
        if description is not None:
          self.description = description
        if enabled is not None:
          self.enabled = enabled
        if finder_configurations is not None:
          self.finder_configurations = finder_configurations
        if name is not None:
          self.name = name
        if scoped_to is not None:
          self.scoped_to = scoped_to

    @property
    def cron_schedule(self):
        """
        Gets the cron_schedule of this ItemFinderInputV1.
        The item finder's check interval(s) as a list of cron expressions. If the list is empty, the system wide default check schedule is used. For more information about cron expressions, see  http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html

        :return: The cron_schedule of this ItemFinderInputV1.
        :rtype: list[str]
        """
        return self._cron_schedule

    @cron_schedule.setter
    def cron_schedule(self, cron_schedule):
        """
        Sets the cron_schedule of this ItemFinderInputV1.
        The item finder's check interval(s) as a list of cron expressions. If the list is empty, the system wide default check schedule is used. For more information about cron expressions, see  http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html

        :param cron_schedule: The cron_schedule of this ItemFinderInputV1.
        :type: list[str]
        """

        self._cron_schedule = cron_schedule

    @property
    def description(self):
        """
        Gets the description of this ItemFinderInputV1.
        Clarifying information or other plain language description of this item. An input of just whitespaces is equivalent to a null input.

        :return: The description of this ItemFinderInputV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ItemFinderInputV1.
        Clarifying information or other plain language description of this item. An input of just whitespaces is equivalent to a null input.

        :param description: The description of this ItemFinderInputV1.
        :type: str
        """

        self._description = description

    @property
    def enabled(self):
        """
        Gets the enabled of this ItemFinderInputV1.
        Whether the item finder is enabled

        :return: The enabled of this ItemFinderInputV1.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this ItemFinderInputV1.
        Whether the item finder is enabled

        :param enabled: The enabled of this ItemFinderInputV1.
        :type: bool
        """

        self._enabled = enabled

    @property
    def finder_configurations(self):
        """
        Gets the finder_configurations of this ItemFinderInputV1.
        The list of configurations for finding items

        :return: The finder_configurations of this ItemFinderInputV1.
        :rtype: list[ItemFinderConfigurationV1]
        """
        return self._finder_configurations

    @finder_configurations.setter
    def finder_configurations(self, finder_configurations):
        """
        Sets the finder_configurations of this ItemFinderInputV1.
        The list of configurations for finding items

        :param finder_configurations: The finder_configurations of this ItemFinderInputV1.
        :type: list[ItemFinderConfigurationV1]
        """
        if finder_configurations is None:
            raise ValueError("Invalid value for `finder_configurations`, must not be `None`")

        self._finder_configurations = finder_configurations

    @property
    def name(self):
        """
        Gets the name of this ItemFinderInputV1.
        Human readable name. Required during creation. An input of just whitespaces is equivalent to a null input.

        :return: The name of this ItemFinderInputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ItemFinderInputV1.
        Human readable name. Required during creation. An input of just whitespaces is equivalent to a null input.

        :param name: The name of this ItemFinderInputV1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def scoped_to(self):
        """
        Gets the scoped_to of this ItemFinderInputV1.
        The ID of the workbook to which the item finder will be scoped. If not provided, it will have a global scope

        :return: The scoped_to of this ItemFinderInputV1.
        :rtype: str
        """
        return self._scoped_to

    @scoped_to.setter
    def scoped_to(self, scoped_to):
        """
        Sets the scoped_to of this ItemFinderInputV1.
        The ID of the workbook to which the item finder will be scoped. If not provided, it will have a global scope

        :param scoped_to: The scoped_to of this ItemFinderInputV1.
        :type: str
        """

        self._scoped_to = scoped_to

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ItemFinderInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
