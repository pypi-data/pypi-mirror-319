# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 64.4.4-v202501071919
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ColumnRuleInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ancestor': 'ColumnRuleAncestorInputV1',
        'concat': 'ColumnRuleConcatInputV1',
        'event_property': 'ColumnRuleEventPropertyInputV1',
        'item_property': 'ColumnRuleItemPropertyInputV1',
        'path': 'ColumnRulePathInputV1'
    }

    attribute_map = {
        'ancestor': 'ancestor',
        'concat': 'concat',
        'event_property': 'eventProperty',
        'item_property': 'itemProperty',
        'path': 'path'
    }

    def __init__(self, ancestor=None, concat=None, event_property=None, item_property=None, path=None):
        """
        ColumnRuleInputV1 - a model defined in Swagger
        """

        self._ancestor = None
        self._concat = None
        self._event_property = None
        self._item_property = None
        self._path = None

        if ancestor is not None:
          self.ancestor = ancestor
        if concat is not None:
          self.concat = concat
        if event_property is not None:
          self.event_property = event_property
        if item_property is not None:
          self.item_property = item_property
        if path is not None:
          self.path = path

    @property
    def ancestor(self):
        """
        Gets the ancestor of this ColumnRuleInputV1.

        :return: The ancestor of this ColumnRuleInputV1.
        :rtype: ColumnRuleAncestorInputV1
        """
        return self._ancestor

    @ancestor.setter
    def ancestor(self, ancestor):
        """
        Sets the ancestor of this ColumnRuleInputV1.

        :param ancestor: The ancestor of this ColumnRuleInputV1.
        :type: ColumnRuleAncestorInputV1
        """

        self._ancestor = ancestor

    @property
    def concat(self):
        """
        Gets the concat of this ColumnRuleInputV1.

        :return: The concat of this ColumnRuleInputV1.
        :rtype: ColumnRuleConcatInputV1
        """
        return self._concat

    @concat.setter
    def concat(self, concat):
        """
        Sets the concat of this ColumnRuleInputV1.

        :param concat: The concat of this ColumnRuleInputV1.
        :type: ColumnRuleConcatInputV1
        """

        self._concat = concat

    @property
    def event_property(self):
        """
        Gets the event_property of this ColumnRuleInputV1.

        :return: The event_property of this ColumnRuleInputV1.
        :rtype: ColumnRuleEventPropertyInputV1
        """
        return self._event_property

    @event_property.setter
    def event_property(self, event_property):
        """
        Sets the event_property of this ColumnRuleInputV1.

        :param event_property: The event_property of this ColumnRuleInputV1.
        :type: ColumnRuleEventPropertyInputV1
        """

        self._event_property = event_property

    @property
    def item_property(self):
        """
        Gets the item_property of this ColumnRuleInputV1.

        :return: The item_property of this ColumnRuleInputV1.
        :rtype: ColumnRuleItemPropertyInputV1
        """
        return self._item_property

    @item_property.setter
    def item_property(self, item_property):
        """
        Sets the item_property of this ColumnRuleInputV1.

        :param item_property: The item_property of this ColumnRuleInputV1.
        :type: ColumnRuleItemPropertyInputV1
        """

        self._item_property = item_property

    @property
    def path(self):
        """
        Gets the path of this ColumnRuleInputV1.

        :return: The path of this ColumnRuleInputV1.
        :rtype: ColumnRulePathInputV1
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this ColumnRuleInputV1.

        :param path: The path of this ColumnRuleInputV1.
        :type: ColumnRulePathInputV1
        """

        self._path = path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ColumnRuleInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
