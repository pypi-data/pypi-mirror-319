# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 64.4.4-v202501071919
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ColumnRuleOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'arguments': 'dict(str, str)',
        'input_column1': 'str',
        'input_column2': 'str',
        'rule': 'str'
    }

    attribute_map = {
        'arguments': 'arguments',
        'input_column1': 'inputColumn1',
        'input_column2': 'inputColumn2',
        'rule': 'rule'
    }

    def __init__(self, arguments=None, input_column1=None, input_column2=None, rule=None):
        """
        ColumnRuleOutputV1 - a model defined in Swagger
        """

        self._arguments = None
        self._input_column1 = None
        self._input_column2 = None
        self._rule = None

        if arguments is not None:
          self.arguments = arguments
        if input_column1 is not None:
          self.input_column1 = input_column1
        if input_column2 is not None:
          self.input_column2 = input_column2
        if rule is not None:
          self.rule = rule

    @property
    def arguments(self):
        """
        Gets the arguments of this ColumnRuleOutputV1.
        The column rule arguments

        :return: The arguments of this ColumnRuleOutputV1.
        :rtype: dict(str, str)
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """
        Sets the arguments of this ColumnRuleOutputV1.
        The column rule arguments

        :param arguments: The arguments of this ColumnRuleOutputV1.
        :type: dict(str, str)
        """

        self._arguments = arguments

    @property
    def input_column1(self):
        """
        Gets the input_column1 of this ColumnRuleOutputV1.
        The column rule input column 1 ID

        :return: The input_column1 of this ColumnRuleOutputV1.
        :rtype: str
        """
        return self._input_column1

    @input_column1.setter
    def input_column1(self, input_column1):
        """
        Sets the input_column1 of this ColumnRuleOutputV1.
        The column rule input column 1 ID

        :param input_column1: The input_column1 of this ColumnRuleOutputV1.
        :type: str
        """

        self._input_column1 = input_column1

    @property
    def input_column2(self):
        """
        Gets the input_column2 of this ColumnRuleOutputV1.
        The column rule input column 2 ID

        :return: The input_column2 of this ColumnRuleOutputV1.
        :rtype: str
        """
        return self._input_column2

    @input_column2.setter
    def input_column2(self, input_column2):
        """
        Sets the input_column2 of this ColumnRuleOutputV1.
        The column rule input column 2 ID

        :param input_column2: The input_column2 of this ColumnRuleOutputV1.
        :type: str
        """

        self._input_column2 = input_column2

    @property
    def rule(self):
        """
        Gets the rule of this ColumnRuleOutputV1.
        The column rule name

        :return: The rule of this ColumnRuleOutputV1.
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """
        Sets the rule of this ColumnRuleOutputV1.
        The column rule name

        :param rule: The rule of this ColumnRuleOutputV1.
        :type: str
        """

        self._rule = rule

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ColumnRuleOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
