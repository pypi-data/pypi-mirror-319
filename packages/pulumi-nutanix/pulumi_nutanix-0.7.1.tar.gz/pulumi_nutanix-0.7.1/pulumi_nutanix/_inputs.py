# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'AccessControlPolicyCategoryArgs',
    'AccessControlPolicyCategoryArgsDict',
    'AccessControlPolicyContextFilterListArgs',
    'AccessControlPolicyContextFilterListArgsDict',
    'AccessControlPolicyContextFilterListEntityFilterExpressionListArgs',
    'AccessControlPolicyContextFilterListEntityFilterExpressionListArgsDict',
    'AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs',
    'AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgsDict',
    'AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgs',
    'AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgsDict',
    'AccessControlPolicyContextFilterListScopeFilterExpressionListArgs',
    'AccessControlPolicyContextFilterListScopeFilterExpressionListArgsDict',
    'AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideArgs',
    'AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideArgsDict',
    'AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgs',
    'AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgsDict',
    'AccessControlPolicyOwnerReferenceArgs',
    'AccessControlPolicyOwnerReferenceArgsDict',
    'AccessControlPolicyRoleReferenceArgs',
    'AccessControlPolicyRoleReferenceArgsDict',
    'AccessControlPolicyUserGroupReferenceListArgs',
    'AccessControlPolicyUserGroupReferenceListArgsDict',
    'AccessControlPolicyUserReferenceListArgs',
    'AccessControlPolicyUserReferenceListArgsDict',
    'AddressGroupIpAddressBlockListArgs',
    'AddressGroupIpAddressBlockListArgsDict',
    'FoundationCentralImageClusterClusterStatusArgs',
    'FoundationCentralImageClusterClusterStatusArgsDict',
    'FoundationCentralImageClusterClusterStatusClusterProgressDetailArgs',
    'FoundationCentralImageClusterClusterStatusClusterProgressDetailArgsDict',
    'FoundationCentralImageClusterClusterStatusNodeProgressDetailArgs',
    'FoundationCentralImageClusterClusterStatusNodeProgressDetailArgsDict',
    'FoundationCentralImageClusterCommonNetworkSettingsArgs',
    'FoundationCentralImageClusterCommonNetworkSettingsArgsDict',
    'FoundationCentralImageClusterFoundationInitConfigArgs',
    'FoundationCentralImageClusterFoundationInitConfigArgsDict',
    'FoundationCentralImageClusterFoundationInitConfigBlockArgs',
    'FoundationCentralImageClusterFoundationInitConfigBlockArgsDict',
    'FoundationCentralImageClusterFoundationInitConfigBlockNodeArgs',
    'FoundationCentralImageClusterFoundationInitConfigBlockNodeArgsDict',
    'FoundationCentralImageClusterFoundationInitConfigClusterArgs',
    'FoundationCentralImageClusterFoundationInitConfigClusterArgsDict',
    'FoundationCentralImageClusterFoundationInitConfigHypervisorIsoArgs',
    'FoundationCentralImageClusterFoundationInitConfigHypervisorIsoArgsDict',
    'FoundationCentralImageClusterFoundationInitConfigNosPackageUrlArgs',
    'FoundationCentralImageClusterFoundationInitConfigNosPackageUrlArgsDict',
    'FoundationCentralImageClusterHypervisorIsoDetailsArgs',
    'FoundationCentralImageClusterHypervisorIsoDetailsArgsDict',
    'FoundationCentralImageClusterNodeListArgs',
    'FoundationCentralImageClusterNodeListArgsDict',
    'FoundationImageNodesBlockArgs',
    'FoundationImageNodesBlockArgsDict',
    'FoundationImageNodesBlockNodeArgs',
    'FoundationImageNodesBlockNodeArgsDict',
    'FoundationImageNodesBlockNodeUcsmParamsArgs',
    'FoundationImageNodesBlockNodeUcsmParamsArgsDict',
    'FoundationImageNodesBlockNodeVswitchArgs',
    'FoundationImageNodesBlockNodeVswitchArgsDict',
    'FoundationImageNodesClusterArgs',
    'FoundationImageNodesClusterArgsDict',
    'FoundationImageNodesClusterUrlArgs',
    'FoundationImageNodesClusterUrlArgsDict',
    'FoundationImageNodesEosMetadataArgs',
    'FoundationImageNodesEosMetadataArgsDict',
    'FoundationImageNodesFcSettingsArgs',
    'FoundationImageNodesFcSettingsArgsDict',
    'FoundationImageNodesFcSettingsFcMetadataArgs',
    'FoundationImageNodesFcSettingsFcMetadataArgsDict',
    'FoundationImageNodesHypervisorIsoArgs',
    'FoundationImageNodesHypervisorIsoArgsDict',
    'FoundationImageNodesHypervisorIsoEsxArgs',
    'FoundationImageNodesHypervisorIsoEsxArgsDict',
    'FoundationImageNodesHypervisorIsoHypervArgs',
    'FoundationImageNodesHypervisorIsoHypervArgsDict',
    'FoundationImageNodesHypervisorIsoKvmArgs',
    'FoundationImageNodesHypervisorIsoKvmArgsDict',
    'FoundationImageNodesHypervisorIsoXenArgs',
    'FoundationImageNodesHypervisorIsoXenArgsDict',
    'FoundationImageNodesTestsArgs',
    'FoundationImageNodesTestsArgsDict',
    'FoundationIpmiConfigBlockArgs',
    'FoundationIpmiConfigBlockArgsDict',
    'FoundationIpmiConfigBlockNodeArgs',
    'FoundationIpmiConfigBlockNodeArgsDict',
    'ImageCategoryArgs',
    'ImageCategoryArgsDict',
    'ImageClusterReferenceArgs',
    'ImageClusterReferenceArgsDict',
    'ImageCurrentClusterReferenceListArgs',
    'ImageCurrentClusterReferenceListArgsDict',
    'KarbonClusterActivePassiveConfigArgs',
    'KarbonClusterActivePassiveConfigArgsDict',
    'KarbonClusterCniConfigArgs',
    'KarbonClusterCniConfigArgsDict',
    'KarbonClusterCniConfigCalicoConfigArgs',
    'KarbonClusterCniConfigCalicoConfigArgsDict',
    'KarbonClusterCniConfigCalicoConfigIpPoolConfigArgs',
    'KarbonClusterCniConfigCalicoConfigIpPoolConfigArgsDict',
    'KarbonClusterCniConfigFlannelConfigArgs',
    'KarbonClusterCniConfigFlannelConfigArgsDict',
    'KarbonClusterEtcdNodePoolArgs',
    'KarbonClusterEtcdNodePoolArgsDict',
    'KarbonClusterEtcdNodePoolAhvConfigArgs',
    'KarbonClusterEtcdNodePoolAhvConfigArgsDict',
    'KarbonClusterEtcdNodePoolNodeArgs',
    'KarbonClusterEtcdNodePoolNodeArgsDict',
    'KarbonClusterExternalLbConfigArgs',
    'KarbonClusterExternalLbConfigArgsDict',
    'KarbonClusterExternalLbConfigMasterNodesConfigArgs',
    'KarbonClusterExternalLbConfigMasterNodesConfigArgsDict',
    'KarbonClusterMasterNodePoolArgs',
    'KarbonClusterMasterNodePoolArgsDict',
    'KarbonClusterMasterNodePoolAhvConfigArgs',
    'KarbonClusterMasterNodePoolAhvConfigArgsDict',
    'KarbonClusterMasterNodePoolNodeArgs',
    'KarbonClusterMasterNodePoolNodeArgsDict',
    'KarbonClusterPrivateRegistryArgs',
    'KarbonClusterPrivateRegistryArgsDict',
    'KarbonClusterSingleMasterConfigArgs',
    'KarbonClusterSingleMasterConfigArgsDict',
    'KarbonClusterStorageClassConfigArgs',
    'KarbonClusterStorageClassConfigArgsDict',
    'KarbonClusterStorageClassConfigVolumesConfigArgs',
    'KarbonClusterStorageClassConfigVolumesConfigArgsDict',
    'KarbonClusterWorkerNodePoolArgs',
    'KarbonClusterWorkerNodePoolArgsDict',
    'KarbonClusterWorkerNodePoolAhvConfigArgs',
    'KarbonClusterWorkerNodePoolAhvConfigArgsDict',
    'KarbonClusterWorkerNodePoolNodeArgs',
    'KarbonClusterWorkerNodePoolNodeArgsDict',
    'KarbonWorkerNodepoolAhvConfigArgs',
    'KarbonWorkerNodepoolAhvConfigArgsDict',
    'KarbonWorkerNodepoolNodeArgs',
    'KarbonWorkerNodepoolNodeArgsDict',
    'NdbCloneActionargumentArgs',
    'NdbCloneActionargumentArgsDict',
    'NdbCloneDatabaseNodeArgs',
    'NdbCloneDatabaseNodeArgsDict',
    'NdbCloneDatabaseNodeInfoArgs',
    'NdbCloneDatabaseNodeInfoArgsDict',
    'NdbCloneDatabaseNodePropertyArgs',
    'NdbCloneDatabaseNodePropertyArgsDict',
    'NdbCloneDatabaseNodeProtectionDomainArgs',
    'NdbCloneDatabaseNodeProtectionDomainArgsDict',
    'NdbCloneDatabaseNodeProtectionDomainPropertyArgs',
    'NdbCloneDatabaseNodeProtectionDomainPropertyArgsDict',
    'NdbCloneDatabaseNodeTagArgs',
    'NdbCloneDatabaseNodeTagArgsDict',
    'NdbCloneInfoArgs',
    'NdbCloneInfoArgsDict',
    'NdbCloneInfoBpgConfigArgs',
    'NdbCloneInfoBpgConfigArgsDict',
    'NdbCloneInfoBpgConfigBpgDbParamArgs',
    'NdbCloneInfoBpgConfigBpgDbParamArgsDict',
    'NdbCloneInfoBpgConfigStorageArgs',
    'NdbCloneInfoBpgConfigStorageArgsDict',
    'NdbCloneInfoBpgConfigStorageArchiveStorageArgs',
    'NdbCloneInfoBpgConfigStorageArchiveStorageArgsDict',
    'NdbCloneInfoBpgConfigStorageDataDiskArgs',
    'NdbCloneInfoBpgConfigStorageDataDiskArgsDict',
    'NdbCloneInfoBpgConfigStorageLogDiskArgs',
    'NdbCloneInfoBpgConfigStorageLogDiskArgsDict',
    'NdbCloneInfoBpgConfigVmPropertyArgs',
    'NdbCloneInfoBpgConfigVmPropertyArgsDict',
    'NdbCloneLcmConfigArgs',
    'NdbCloneLcmConfigArgsDict',
    'NdbCloneLcmConfigDatabaseLcmConfigArgs',
    'NdbCloneLcmConfigDatabaseLcmConfigArgsDict',
    'NdbCloneLcmConfigDatabaseLcmConfigExpiryDetailArgs',
    'NdbCloneLcmConfigDatabaseLcmConfigExpiryDetailArgsDict',
    'NdbCloneLcmConfigDatabaseLcmConfigRefreshDetailArgs',
    'NdbCloneLcmConfigDatabaseLcmConfigRefreshDetailArgsDict',
    'NdbCloneLinkedDatabaseArgs',
    'NdbCloneLinkedDatabaseArgsDict',
    'NdbCloneLinkedDatabaseInfoArgs',
    'NdbCloneLinkedDatabaseInfoArgsDict',
    'NdbCloneNodeArgs',
    'NdbCloneNodeArgsDict',
    'NdbCloneNodePropertyArgs',
    'NdbCloneNodePropertyArgsDict',
    'NdbClonePostgresqlInfoArgs',
    'NdbClonePostgresqlInfoArgsDict',
    'NdbClonePropertyArgs',
    'NdbClonePropertyArgsDict',
    'NdbCloneTagArgs',
    'NdbCloneTagArgsDict',
    'NdbCloneTimeMachineArgs',
    'NdbCloneTimeMachineArgsDict',
    'NdbCloneTimeMachinePropertyArgs',
    'NdbCloneTimeMachinePropertyArgsDict',
    'NdbCloneTimeMachineScheduleArgs',
    'NdbCloneTimeMachineScheduleArgsDict',
    'NdbCloneTimeMachineScheduleContinuousScheduleArgs',
    'NdbCloneTimeMachineScheduleContinuousScheduleArgsDict',
    'NdbCloneTimeMachineScheduleDailyScheduleArgs',
    'NdbCloneTimeMachineScheduleDailyScheduleArgsDict',
    'NdbCloneTimeMachineScheduleMonthlyScheduleArgs',
    'NdbCloneTimeMachineScheduleMonthlyScheduleArgsDict',
    'NdbCloneTimeMachineScheduleQuartelyScheduleArgs',
    'NdbCloneTimeMachineScheduleQuartelyScheduleArgsDict',
    'NdbCloneTimeMachineScheduleSnapshotTimeOfDayArgs',
    'NdbCloneTimeMachineScheduleSnapshotTimeOfDayArgsDict',
    'NdbCloneTimeMachineScheduleWeeklyScheduleArgs',
    'NdbCloneTimeMachineScheduleWeeklyScheduleArgsDict',
    'NdbCloneTimeMachineScheduleYearlyScheduleArgs',
    'NdbCloneTimeMachineScheduleYearlyScheduleArgsDict',
    'NdbCloneTimeMachineSlaArgs',
    'NdbCloneTimeMachineSlaArgsDict',
    'NdbCloneTimeMachineTagArgs',
    'NdbCloneTimeMachineTagArgsDict',
    'NdbClusterAgentNetworkInfoArgs',
    'NdbClusterAgentNetworkInfoArgsDict',
    'NdbClusterEntityCountArgs',
    'NdbClusterEntityCountArgsDict',
    'NdbClusterEntityCountEngineCountArgs',
    'NdbClusterEntityCountEngineCountArgsDict',
    'NdbClusterEntityCountEngineCountMariadbDatabaseArgs',
    'NdbClusterEntityCountEngineCountMariadbDatabaseArgsDict',
    'NdbClusterEntityCountEngineCountMariadbDatabaseProfileArgs',
    'NdbClusterEntityCountEngineCountMariadbDatabaseProfileArgsDict',
    'NdbClusterEntityCountEngineCountMongodbDatabaseArgs',
    'NdbClusterEntityCountEngineCountMongodbDatabaseArgsDict',
    'NdbClusterEntityCountEngineCountMongodbDatabaseProfileArgs',
    'NdbClusterEntityCountEngineCountMongodbDatabaseProfileArgsDict',
    'NdbClusterEntityCountEngineCountMysqlDatabaseArgs',
    'NdbClusterEntityCountEngineCountMysqlDatabaseArgsDict',
    'NdbClusterEntityCountEngineCountMysqlDatabaseProfileArgs',
    'NdbClusterEntityCountEngineCountMysqlDatabaseProfileArgsDict',
    'NdbClusterEntityCountEngineCountOracleDatabaseArgs',
    'NdbClusterEntityCountEngineCountOracleDatabaseArgsDict',
    'NdbClusterEntityCountEngineCountOracleDatabaseProfileArgs',
    'NdbClusterEntityCountEngineCountOracleDatabaseProfileArgsDict',
    'NdbClusterEntityCountEngineCountPostgresDatabaseArgs',
    'NdbClusterEntityCountEngineCountPostgresDatabaseArgsDict',
    'NdbClusterEntityCountEngineCountPostgresDatabaseProfileArgs',
    'NdbClusterEntityCountEngineCountPostgresDatabaseProfileArgsDict',
    'NdbClusterEntityCountEngineCountSaphanaDatabaseArgs',
    'NdbClusterEntityCountEngineCountSaphanaDatabaseArgsDict',
    'NdbClusterEntityCountEngineCountSaphanaDatabaseProfileArgs',
    'NdbClusterEntityCountEngineCountSaphanaDatabaseProfileArgsDict',
    'NdbClusterEntityCountEngineCountSqlserverDatabaseArgs',
    'NdbClusterEntityCountEngineCountSqlserverDatabaseArgsDict',
    'NdbClusterEntityCountEngineCountSqlserverDatabaseProfileArgs',
    'NdbClusterEntityCountEngineCountSqlserverDatabaseProfileArgsDict',
    'NdbClusterNetworksInfoArgs',
    'NdbClusterNetworksInfoArgsDict',
    'NdbClusterNetworksInfoNetworkInfoArgs',
    'NdbClusterNetworksInfoNetworkInfoArgsDict',
    'NdbClusterPropertyArgs',
    'NdbClusterPropertyArgsDict',
    'NdbClusterResourceConfigArgs',
    'NdbClusterResourceConfigArgsDict',
    'NdbDatabaseActionargumentArgs',
    'NdbDatabaseActionargumentArgsDict',
    'NdbDatabaseClusterInfoArgs',
    'NdbDatabaseClusterInfoArgsDict',
    'NdbDatabaseClusterInfoClusterIpInfoArgs',
    'NdbDatabaseClusterInfoClusterIpInfoArgsDict',
    'NdbDatabaseClusterInfoClusterIpInfoIpInfoArgs',
    'NdbDatabaseClusterInfoClusterIpInfoIpInfoArgsDict',
    'NdbDatabaseDatabaseNodeArgs',
    'NdbDatabaseDatabaseNodeArgsDict',
    'NdbDatabaseDatabaseNodeInfoArgs',
    'NdbDatabaseDatabaseNodeInfoArgsDict',
    'NdbDatabaseDatabaseNodePropertyArgs',
    'NdbDatabaseDatabaseNodePropertyArgsDict',
    'NdbDatabaseDatabaseNodeProtectionDomainArgs',
    'NdbDatabaseDatabaseNodeProtectionDomainArgsDict',
    'NdbDatabaseDatabaseNodeProtectionDomainPropertyArgs',
    'NdbDatabaseDatabaseNodeProtectionDomainPropertyArgsDict',
    'NdbDatabaseDatabaseNodeTagArgs',
    'NdbDatabaseDatabaseNodeTagArgsDict',
    'NdbDatabaseInfoArgs',
    'NdbDatabaseInfoArgsDict',
    'NdbDatabaseInfoBpgConfigArgs',
    'NdbDatabaseInfoBpgConfigArgsDict',
    'NdbDatabaseInfoBpgConfigBpgDbParamArgs',
    'NdbDatabaseInfoBpgConfigBpgDbParamArgsDict',
    'NdbDatabaseInfoBpgConfigStorageArgs',
    'NdbDatabaseInfoBpgConfigStorageArgsDict',
    'NdbDatabaseInfoBpgConfigStorageArchiveStorageArgs',
    'NdbDatabaseInfoBpgConfigStorageArchiveStorageArgsDict',
    'NdbDatabaseInfoBpgConfigStorageDataDiskArgs',
    'NdbDatabaseInfoBpgConfigStorageDataDiskArgsDict',
    'NdbDatabaseInfoBpgConfigStorageLogDiskArgs',
    'NdbDatabaseInfoBpgConfigStorageLogDiskArgsDict',
    'NdbDatabaseInfoBpgConfigVmPropertyArgs',
    'NdbDatabaseInfoBpgConfigVmPropertyArgsDict',
    'NdbDatabaseLcmConfigArgs',
    'NdbDatabaseLcmConfigArgsDict',
    'NdbDatabaseLcmConfigExpiryDetailArgs',
    'NdbDatabaseLcmConfigExpiryDetailArgsDict',
    'NdbDatabaseLcmConfigPostDeleteCommandArgs',
    'NdbDatabaseLcmConfigPostDeleteCommandArgsDict',
    'NdbDatabaseLcmConfigPreDeleteCommandArgs',
    'NdbDatabaseLcmConfigPreDeleteCommandArgsDict',
    'NdbDatabaseLcmConfigRefreshDetailArgs',
    'NdbDatabaseLcmConfigRefreshDetailArgsDict',
    'NdbDatabaseLinkedDatabaseArgs',
    'NdbDatabaseLinkedDatabaseArgsDict',
    'NdbDatabaseLinkedDatabaseInfoArgs',
    'NdbDatabaseLinkedDatabaseInfoArgsDict',
    'NdbDatabaseMaintenanceTasksArgs',
    'NdbDatabaseMaintenanceTasksArgsDict',
    'NdbDatabaseMaintenanceTasksTaskArgs',
    'NdbDatabaseMaintenanceTasksTaskArgsDict',
    'NdbDatabaseNodeArgs',
    'NdbDatabaseNodeArgsDict',
    'NdbDatabaseNodeIpInfoArgs',
    'NdbDatabaseNodeIpInfoArgsDict',
    'NdbDatabaseNodePropertyArgs',
    'NdbDatabaseNodePropertyArgsDict',
    'NdbDatabasePostgresqlInfoArgs',
    'NdbDatabasePostgresqlInfoArgsDict',
    'NdbDatabasePostgresqlInfoHaInstanceArgs',
    'NdbDatabasePostgresqlInfoHaInstanceArgsDict',
    'NdbDatabasePropertyArgs',
    'NdbDatabasePropertyArgsDict',
    'NdbDatabaseRestoreDatabaseNodeArgs',
    'NdbDatabaseRestoreDatabaseNodeArgsDict',
    'NdbDatabaseRestoreDatabaseNodeInfoArgs',
    'NdbDatabaseRestoreDatabaseNodeInfoArgsDict',
    'NdbDatabaseRestoreDatabaseNodePropertyArgs',
    'NdbDatabaseRestoreDatabaseNodePropertyArgsDict',
    'NdbDatabaseRestoreDatabaseNodeProtectionDomainArgs',
    'NdbDatabaseRestoreDatabaseNodeProtectionDomainArgsDict',
    'NdbDatabaseRestoreDatabaseNodeProtectionDomainPropertyArgs',
    'NdbDatabaseRestoreDatabaseNodeProtectionDomainPropertyArgsDict',
    'NdbDatabaseRestoreDatabaseNodeTagArgs',
    'NdbDatabaseRestoreDatabaseNodeTagArgsDict',
    'NdbDatabaseRestoreInfoArgs',
    'NdbDatabaseRestoreInfoArgsDict',
    'NdbDatabaseRestoreInfoBpgConfigArgs',
    'NdbDatabaseRestoreInfoBpgConfigArgsDict',
    'NdbDatabaseRestoreInfoBpgConfigBpgDbParamArgs',
    'NdbDatabaseRestoreInfoBpgConfigBpgDbParamArgsDict',
    'NdbDatabaseRestoreInfoBpgConfigStorageArgs',
    'NdbDatabaseRestoreInfoBpgConfigStorageArgsDict',
    'NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorageArgs',
    'NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorageArgsDict',
    'NdbDatabaseRestoreInfoBpgConfigStorageDataDiskArgs',
    'NdbDatabaseRestoreInfoBpgConfigStorageDataDiskArgsDict',
    'NdbDatabaseRestoreInfoBpgConfigStorageLogDiskArgs',
    'NdbDatabaseRestoreInfoBpgConfigStorageLogDiskArgsDict',
    'NdbDatabaseRestoreInfoBpgConfigVmPropertyArgs',
    'NdbDatabaseRestoreInfoBpgConfigVmPropertyArgsDict',
    'NdbDatabaseRestoreLcmConfigArgs',
    'NdbDatabaseRestoreLcmConfigArgsDict',
    'NdbDatabaseRestoreLcmConfigExpiryDetailArgs',
    'NdbDatabaseRestoreLcmConfigExpiryDetailArgsDict',
    'NdbDatabaseRestoreLcmConfigPostDeleteCommandArgs',
    'NdbDatabaseRestoreLcmConfigPostDeleteCommandArgsDict',
    'NdbDatabaseRestoreLcmConfigPreDeleteCommandArgs',
    'NdbDatabaseRestoreLcmConfigPreDeleteCommandArgsDict',
    'NdbDatabaseRestoreLcmConfigRefreshDetailArgs',
    'NdbDatabaseRestoreLcmConfigRefreshDetailArgsDict',
    'NdbDatabaseRestoreLinkedDatabaseArgs',
    'NdbDatabaseRestoreLinkedDatabaseArgsDict',
    'NdbDatabaseRestoreLinkedDatabaseInfoArgs',
    'NdbDatabaseRestoreLinkedDatabaseInfoArgsDict',
    'NdbDatabaseRestorePropertyArgs',
    'NdbDatabaseRestorePropertyArgsDict',
    'NdbDatabaseRestoreTagArgs',
    'NdbDatabaseRestoreTagArgsDict',
    'NdbDatabaseRestoreTimeMachineArgs',
    'NdbDatabaseRestoreTimeMachineArgsDict',
    'NdbDatabaseRestoreTimeMachinePropertyArgs',
    'NdbDatabaseRestoreTimeMachinePropertyArgsDict',
    'NdbDatabaseRestoreTimeMachineScheduleArgs',
    'NdbDatabaseRestoreTimeMachineScheduleArgsDict',
    'NdbDatabaseRestoreTimeMachineScheduleContinuousScheduleArgs',
    'NdbDatabaseRestoreTimeMachineScheduleContinuousScheduleArgsDict',
    'NdbDatabaseRestoreTimeMachineScheduleDailyScheduleArgs',
    'NdbDatabaseRestoreTimeMachineScheduleDailyScheduleArgsDict',
    'NdbDatabaseRestoreTimeMachineScheduleMonthlyScheduleArgs',
    'NdbDatabaseRestoreTimeMachineScheduleMonthlyScheduleArgsDict',
    'NdbDatabaseRestoreTimeMachineScheduleQuartelyScheduleArgs',
    'NdbDatabaseRestoreTimeMachineScheduleQuartelyScheduleArgsDict',
    'NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDayArgs',
    'NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDayArgsDict',
    'NdbDatabaseRestoreTimeMachineScheduleWeeklyScheduleArgs',
    'NdbDatabaseRestoreTimeMachineScheduleWeeklyScheduleArgsDict',
    'NdbDatabaseRestoreTimeMachineScheduleYearlyScheduleArgs',
    'NdbDatabaseRestoreTimeMachineScheduleYearlyScheduleArgsDict',
    'NdbDatabaseRestoreTimeMachineSlaArgs',
    'NdbDatabaseRestoreTimeMachineSlaArgsDict',
    'NdbDatabaseRestoreTimeMachineTagArgs',
    'NdbDatabaseRestoreTimeMachineTagArgsDict',
    'NdbDatabaseScaleDatabaseNodeArgs',
    'NdbDatabaseScaleDatabaseNodeArgsDict',
    'NdbDatabaseScaleDatabaseNodeInfoArgs',
    'NdbDatabaseScaleDatabaseNodeInfoArgsDict',
    'NdbDatabaseScaleDatabaseNodePropertyArgs',
    'NdbDatabaseScaleDatabaseNodePropertyArgsDict',
    'NdbDatabaseScaleDatabaseNodeProtectionDomainArgs',
    'NdbDatabaseScaleDatabaseNodeProtectionDomainArgsDict',
    'NdbDatabaseScaleDatabaseNodeProtectionDomainPropertyArgs',
    'NdbDatabaseScaleDatabaseNodeProtectionDomainPropertyArgsDict',
    'NdbDatabaseScaleDatabaseNodeTagArgs',
    'NdbDatabaseScaleDatabaseNodeTagArgsDict',
    'NdbDatabaseScaleInfoArgs',
    'NdbDatabaseScaleInfoArgsDict',
    'NdbDatabaseScaleInfoBpgConfigArgs',
    'NdbDatabaseScaleInfoBpgConfigArgsDict',
    'NdbDatabaseScaleInfoBpgConfigBpgDbParamArgs',
    'NdbDatabaseScaleInfoBpgConfigBpgDbParamArgsDict',
    'NdbDatabaseScaleInfoBpgConfigStorageArgs',
    'NdbDatabaseScaleInfoBpgConfigStorageArgsDict',
    'NdbDatabaseScaleInfoBpgConfigStorageArchiveStorageArgs',
    'NdbDatabaseScaleInfoBpgConfigStorageArchiveStorageArgsDict',
    'NdbDatabaseScaleInfoBpgConfigStorageDataDiskArgs',
    'NdbDatabaseScaleInfoBpgConfigStorageDataDiskArgsDict',
    'NdbDatabaseScaleInfoBpgConfigStorageLogDiskArgs',
    'NdbDatabaseScaleInfoBpgConfigStorageLogDiskArgsDict',
    'NdbDatabaseScaleInfoBpgConfigVmPropertyArgs',
    'NdbDatabaseScaleInfoBpgConfigVmPropertyArgsDict',
    'NdbDatabaseScaleLcmConfigArgs',
    'NdbDatabaseScaleLcmConfigArgsDict',
    'NdbDatabaseScaleLcmConfigExpiryDetailArgs',
    'NdbDatabaseScaleLcmConfigExpiryDetailArgsDict',
    'NdbDatabaseScaleLcmConfigPostDeleteCommandArgs',
    'NdbDatabaseScaleLcmConfigPostDeleteCommandArgsDict',
    'NdbDatabaseScaleLcmConfigPreDeleteCommandArgs',
    'NdbDatabaseScaleLcmConfigPreDeleteCommandArgsDict',
    'NdbDatabaseScaleLcmConfigRefreshDetailArgs',
    'NdbDatabaseScaleLcmConfigRefreshDetailArgsDict',
    'NdbDatabaseScaleLinkedDatabaseArgs',
    'NdbDatabaseScaleLinkedDatabaseArgsDict',
    'NdbDatabaseScaleLinkedDatabaseInfoArgs',
    'NdbDatabaseScaleLinkedDatabaseInfoArgsDict',
    'NdbDatabaseScalePropertyArgs',
    'NdbDatabaseScalePropertyArgsDict',
    'NdbDatabaseScaleTagArgs',
    'NdbDatabaseScaleTagArgsDict',
    'NdbDatabaseScaleTimeMachineArgs',
    'NdbDatabaseScaleTimeMachineArgsDict',
    'NdbDatabaseScaleTimeMachinePropertyArgs',
    'NdbDatabaseScaleTimeMachinePropertyArgsDict',
    'NdbDatabaseScaleTimeMachineScheduleArgs',
    'NdbDatabaseScaleTimeMachineScheduleArgsDict',
    'NdbDatabaseScaleTimeMachineScheduleContinuousScheduleArgs',
    'NdbDatabaseScaleTimeMachineScheduleContinuousScheduleArgsDict',
    'NdbDatabaseScaleTimeMachineScheduleDailyScheduleArgs',
    'NdbDatabaseScaleTimeMachineScheduleDailyScheduleArgsDict',
    'NdbDatabaseScaleTimeMachineScheduleMonthlyScheduleArgs',
    'NdbDatabaseScaleTimeMachineScheduleMonthlyScheduleArgsDict',
    'NdbDatabaseScaleTimeMachineScheduleQuartelyScheduleArgs',
    'NdbDatabaseScaleTimeMachineScheduleQuartelyScheduleArgsDict',
    'NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDayArgs',
    'NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDayArgsDict',
    'NdbDatabaseScaleTimeMachineScheduleWeeklyScheduleArgs',
    'NdbDatabaseScaleTimeMachineScheduleWeeklyScheduleArgsDict',
    'NdbDatabaseScaleTimeMachineScheduleYearlyScheduleArgs',
    'NdbDatabaseScaleTimeMachineScheduleYearlyScheduleArgsDict',
    'NdbDatabaseScaleTimeMachineSlaArgs',
    'NdbDatabaseScaleTimeMachineSlaArgsDict',
    'NdbDatabaseScaleTimeMachineTagArgs',
    'NdbDatabaseScaleTimeMachineTagArgsDict',
    'NdbDatabaseSnapshotLcmConfigArgs',
    'NdbDatabaseSnapshotLcmConfigArgsDict',
    'NdbDatabaseSnapshotLcmConfigExpiryDetailArgs',
    'NdbDatabaseSnapshotLcmConfigExpiryDetailArgsDict',
    'NdbDatabaseSnapshotLcmConfigPostDeleteCommandArgs',
    'NdbDatabaseSnapshotLcmConfigPostDeleteCommandArgsDict',
    'NdbDatabaseSnapshotLcmConfigPreDeleteCommandArgs',
    'NdbDatabaseSnapshotLcmConfigPreDeleteCommandArgsDict',
    'NdbDatabaseSnapshotLcmConfigRefreshDetailArgs',
    'NdbDatabaseSnapshotLcmConfigRefreshDetailArgsDict',
    'NdbDatabaseSnapshotPropertyArgs',
    'NdbDatabaseSnapshotPropertyArgsDict',
    'NdbDatabaseSnapshotTagArgs',
    'NdbDatabaseSnapshotTagArgsDict',
    'NdbDatabaseTagArgs',
    'NdbDatabaseTagArgsDict',
    'NdbDatabaseTimeMachineArgs',
    'NdbDatabaseTimeMachineArgsDict',
    'NdbDatabaseTimeMachinePropertyArgs',
    'NdbDatabaseTimeMachinePropertyArgsDict',
    'NdbDatabaseTimeMachineScheduleArgs',
    'NdbDatabaseTimeMachineScheduleArgsDict',
    'NdbDatabaseTimeMachineScheduleContinuousScheduleArgs',
    'NdbDatabaseTimeMachineScheduleContinuousScheduleArgsDict',
    'NdbDatabaseTimeMachineScheduleDailyScheduleArgs',
    'NdbDatabaseTimeMachineScheduleDailyScheduleArgsDict',
    'NdbDatabaseTimeMachineScheduleMonthlyScheduleArgs',
    'NdbDatabaseTimeMachineScheduleMonthlyScheduleArgsDict',
    'NdbDatabaseTimeMachineScheduleQuartelyScheduleArgs',
    'NdbDatabaseTimeMachineScheduleQuartelyScheduleArgsDict',
    'NdbDatabaseTimeMachineScheduleSnapshotTimeOfDayArgs',
    'NdbDatabaseTimeMachineScheduleSnapshotTimeOfDayArgsDict',
    'NdbDatabaseTimeMachineScheduleWeeklyScheduleArgs',
    'NdbDatabaseTimeMachineScheduleWeeklyScheduleArgsDict',
    'NdbDatabaseTimeMachineScheduleYearlyScheduleArgs',
    'NdbDatabaseTimeMachineScheduleYearlyScheduleArgsDict',
    'NdbDatabaseTimeMachineSlaArgs',
    'NdbDatabaseTimeMachineSlaArgsDict',
    'NdbDatabaseTimeMachineTagArgs',
    'NdbDatabaseTimeMachineTagArgsDict',
    'NdbDatabaseTimemachineinfoArgs',
    'NdbDatabaseTimemachineinfoArgsDict',
    'NdbDatabaseTimemachineinfoScheduleArgs',
    'NdbDatabaseTimemachineinfoScheduleArgsDict',
    'NdbDatabaseTimemachineinfoScheduleContinuousscheduleArgs',
    'NdbDatabaseTimemachineinfoScheduleContinuousscheduleArgsDict',
    'NdbDatabaseTimemachineinfoScheduleMonthlyscheduleArgs',
    'NdbDatabaseTimemachineinfoScheduleMonthlyscheduleArgsDict',
    'NdbDatabaseTimemachineinfoScheduleQuartelyscheduleArgs',
    'NdbDatabaseTimemachineinfoScheduleQuartelyscheduleArgsDict',
    'NdbDatabaseTimemachineinfoScheduleSnapshottimeofdayArgs',
    'NdbDatabaseTimemachineinfoScheduleSnapshottimeofdayArgsDict',
    'NdbDatabaseTimemachineinfoScheduleWeeklyscheduleArgs',
    'NdbDatabaseTimemachineinfoScheduleWeeklyscheduleArgsDict',
    'NdbDatabaseTimemachineinfoScheduleYearlyscheduleArgs',
    'NdbDatabaseTimemachineinfoScheduleYearlyscheduleArgsDict',
    'NdbDatabaseTimemachineinfoSlaDetailArgs',
    'NdbDatabaseTimemachineinfoSlaDetailArgsDict',
    'NdbDatabaseTimemachineinfoSlaDetailPrimarySlaArgs',
    'NdbDatabaseTimemachineinfoSlaDetailPrimarySlaArgsDict',
    'NdbDatabaseTimemachineinfoTagArgs',
    'NdbDatabaseTimemachineinfoTagArgsDict',
    'NdbDbserverVmCredentialArgs',
    'NdbDbserverVmCredentialArgsDict',
    'NdbDbserverVmMaintenanceTasksArgs',
    'NdbDbserverVmMaintenanceTasksArgsDict',
    'NdbDbserverVmMaintenanceTasksTaskArgs',
    'NdbDbserverVmMaintenanceTasksTaskArgsDict',
    'NdbDbserverVmPostgresDatabaseArgs',
    'NdbDbserverVmPostgresDatabaseArgsDict',
    'NdbDbserverVmPropertyArgs',
    'NdbDbserverVmPropertyArgsDict',
    'NdbDbserverVmTagArgs',
    'NdbDbserverVmTagArgsDict',
    'NdbLinkedDatabasesInfoArgs',
    'NdbLinkedDatabasesInfoArgsDict',
    'NdbLinkedDatabasesInfoInfoArgs',
    'NdbLinkedDatabasesInfoInfoArgsDict',
    'NdbMaintenanceTaskEntityTaskAssociationArgs',
    'NdbMaintenanceTaskEntityTaskAssociationArgsDict',
    'NdbMaintenanceTaskEntityTaskAssociationPayloadArgs',
    'NdbMaintenanceTaskEntityTaskAssociationPayloadArgsDict',
    'NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommandArgs',
    'NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommandArgsDict',
    'NdbMaintenanceTaskEntityTaskAssociationPropertyArgs',
    'NdbMaintenanceTaskEntityTaskAssociationPropertyArgsDict',
    'NdbMaintenanceTaskEntityTaskAssociationTagArgs',
    'NdbMaintenanceTaskEntityTaskAssociationTagArgsDict',
    'NdbMaintenanceTaskTaskArgs',
    'NdbMaintenanceTaskTaskArgsDict',
    'NdbMaintenanceWindowEntityTaskAssocArgs',
    'NdbMaintenanceWindowEntityTaskAssocArgsDict',
    'NdbMaintenanceWindowEntityTaskAssocPayloadArgs',
    'NdbMaintenanceWindowEntityTaskAssocPayloadArgsDict',
    'NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommandArgs',
    'NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommandArgsDict',
    'NdbMaintenanceWindowEntityTaskAssocPropertyArgs',
    'NdbMaintenanceWindowEntityTaskAssocPropertyArgsDict',
    'NdbMaintenanceWindowEntityTaskAssocTagArgs',
    'NdbMaintenanceWindowEntityTaskAssocTagArgsDict',
    'NdbMaintenanceWindowPropertyArgs',
    'NdbMaintenanceWindowPropertyArgsDict',
    'NdbMaintenanceWindowScheduleArgs',
    'NdbMaintenanceWindowScheduleArgsDict',
    'NdbMaintenanceWindowTagArgs',
    'NdbMaintenanceWindowTagArgsDict',
    'NdbNetworkIpPoolArgs',
    'NdbNetworkIpPoolArgsDict',
    'NdbNetworkIpPoolAddressArgs',
    'NdbNetworkIpPoolAddressArgsDict',
    'NdbNetworkPropertiesMapArgs',
    'NdbNetworkPropertiesMapArgsDict',
    'NdbNetworkPropertyArgs',
    'NdbNetworkPropertyArgsDict',
    'NdbProfileClusterAvailabilityArgs',
    'NdbProfileClusterAvailabilityArgsDict',
    'NdbProfileComputeProfileArgs',
    'NdbProfileComputeProfileArgsDict',
    'NdbProfileDatabaseParameterProfileArgs',
    'NdbProfileDatabaseParameterProfileArgsDict',
    'NdbProfileDatabaseParameterProfilePostgresDatabaseArgs',
    'NdbProfileDatabaseParameterProfilePostgresDatabaseArgsDict',
    'NdbProfileNetworkProfileArgs',
    'NdbProfileNetworkProfileArgsDict',
    'NdbProfileNetworkProfilePostgresDatabaseArgs',
    'NdbProfileNetworkProfilePostgresDatabaseArgsDict',
    'NdbProfileNetworkProfilePostgresDatabaseHaInstanceArgs',
    'NdbProfileNetworkProfilePostgresDatabaseHaInstanceArgsDict',
    'NdbProfileNetworkProfilePostgresDatabaseSingleInstanceArgs',
    'NdbProfileNetworkProfilePostgresDatabaseSingleInstanceArgsDict',
    'NdbProfileNetworkProfileVersionClusterAssociationArgs',
    'NdbProfileNetworkProfileVersionClusterAssociationArgsDict',
    'NdbProfileSoftwareProfileArgs',
    'NdbProfileSoftwareProfileArgsDict',
    'NdbProfileSoftwareProfilePostgresDatabaseArgs',
    'NdbProfileSoftwareProfilePostgresDatabaseArgsDict',
    'NdbProfileVersionArgs',
    'NdbProfileVersionArgsDict',
    'NdbProfileVersionPropertyArgs',
    'NdbProfileVersionPropertyArgsDict',
    'NdbProfileVersionVersionClusterAssociationArgs',
    'NdbProfileVersionVersionClusterAssociationArgsDict',
    'NdbProfileVersionVersionClusterAssociationPropertyArgs',
    'NdbProfileVersionVersionClusterAssociationPropertyArgsDict',
    'NdbRegisterDatabaseActionargumentArgs',
    'NdbRegisterDatabaseActionargumentArgsDict',
    'NdbRegisterDatabaseDatabaseNodeArgs',
    'NdbRegisterDatabaseDatabaseNodeArgsDict',
    'NdbRegisterDatabaseDatabaseNodeInfoArgs',
    'NdbRegisterDatabaseDatabaseNodeInfoArgsDict',
    'NdbRegisterDatabaseDatabaseNodePropertyArgs',
    'NdbRegisterDatabaseDatabaseNodePropertyArgsDict',
    'NdbRegisterDatabaseDatabaseNodeProtectionDomainArgs',
    'NdbRegisterDatabaseDatabaseNodeProtectionDomainArgsDict',
    'NdbRegisterDatabaseDatabaseNodeProtectionDomainPropertyArgs',
    'NdbRegisterDatabaseDatabaseNodeProtectionDomainPropertyArgsDict',
    'NdbRegisterDatabaseDatabaseNodeTagArgs',
    'NdbRegisterDatabaseDatabaseNodeTagArgsDict',
    'NdbRegisterDatabaseInfoArgs',
    'NdbRegisterDatabaseInfoArgsDict',
    'NdbRegisterDatabaseInfoBpgConfigArgs',
    'NdbRegisterDatabaseInfoBpgConfigArgsDict',
    'NdbRegisterDatabaseInfoBpgConfigBpgDbParamArgs',
    'NdbRegisterDatabaseInfoBpgConfigBpgDbParamArgsDict',
    'NdbRegisterDatabaseInfoBpgConfigStorageArgs',
    'NdbRegisterDatabaseInfoBpgConfigStorageArgsDict',
    'NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorageArgs',
    'NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorageArgsDict',
    'NdbRegisterDatabaseInfoBpgConfigStorageDataDiskArgs',
    'NdbRegisterDatabaseInfoBpgConfigStorageDataDiskArgsDict',
    'NdbRegisterDatabaseInfoBpgConfigStorageLogDiskArgs',
    'NdbRegisterDatabaseInfoBpgConfigStorageLogDiskArgsDict',
    'NdbRegisterDatabaseInfoBpgConfigVmPropertyArgs',
    'NdbRegisterDatabaseInfoBpgConfigVmPropertyArgsDict',
    'NdbRegisterDatabaseLcmConfigArgs',
    'NdbRegisterDatabaseLcmConfigArgsDict',
    'NdbRegisterDatabaseLcmConfigExpiryDetailArgs',
    'NdbRegisterDatabaseLcmConfigExpiryDetailArgsDict',
    'NdbRegisterDatabaseLcmConfigPostDeleteCommandArgs',
    'NdbRegisterDatabaseLcmConfigPostDeleteCommandArgsDict',
    'NdbRegisterDatabaseLcmConfigPreDeleteCommandArgs',
    'NdbRegisterDatabaseLcmConfigPreDeleteCommandArgsDict',
    'NdbRegisterDatabaseLcmConfigRefreshDetailArgs',
    'NdbRegisterDatabaseLcmConfigRefreshDetailArgsDict',
    'NdbRegisterDatabaseLinkedDatabaseArgs',
    'NdbRegisterDatabaseLinkedDatabaseArgsDict',
    'NdbRegisterDatabaseLinkedDatabaseInfoArgs',
    'NdbRegisterDatabaseLinkedDatabaseInfoArgsDict',
    'NdbRegisterDatabasePostgressInfoArgs',
    'NdbRegisterDatabasePostgressInfoArgsDict',
    'NdbRegisterDatabasePropertyArgs',
    'NdbRegisterDatabasePropertyArgsDict',
    'NdbRegisterDatabaseTagArgs',
    'NdbRegisterDatabaseTagArgsDict',
    'NdbRegisterDatabaseTimeMachineArgs',
    'NdbRegisterDatabaseTimeMachineArgsDict',
    'NdbRegisterDatabaseTimeMachineInfoArgs',
    'NdbRegisterDatabaseTimeMachineInfoArgsDict',
    'NdbRegisterDatabaseTimeMachineInfoScheduleArgs',
    'NdbRegisterDatabaseTimeMachineInfoScheduleArgsDict',
    'NdbRegisterDatabaseTimeMachineInfoScheduleContinuousscheduleArgs',
    'NdbRegisterDatabaseTimeMachineInfoScheduleContinuousscheduleArgsDict',
    'NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyscheduleArgs',
    'NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyscheduleArgsDict',
    'NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyscheduleArgs',
    'NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyscheduleArgsDict',
    'NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofdayArgs',
    'NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofdayArgsDict',
    'NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyscheduleArgs',
    'NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyscheduleArgsDict',
    'NdbRegisterDatabaseTimeMachineInfoScheduleYearlyscheduleArgs',
    'NdbRegisterDatabaseTimeMachineInfoScheduleYearlyscheduleArgsDict',
    'NdbRegisterDatabaseTimeMachineInfoSlaDetailArgs',
    'NdbRegisterDatabaseTimeMachineInfoSlaDetailArgsDict',
    'NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySlaArgs',
    'NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySlaArgsDict',
    'NdbRegisterDatabaseTimeMachineInfoTagArgs',
    'NdbRegisterDatabaseTimeMachineInfoTagArgsDict',
    'NdbRegisterDatabaseTimeMachinePropertyArgs',
    'NdbRegisterDatabaseTimeMachinePropertyArgsDict',
    'NdbRegisterDatabaseTimeMachineScheduleArgs',
    'NdbRegisterDatabaseTimeMachineScheduleArgsDict',
    'NdbRegisterDatabaseTimeMachineScheduleContinuousScheduleArgs',
    'NdbRegisterDatabaseTimeMachineScheduleContinuousScheduleArgsDict',
    'NdbRegisterDatabaseTimeMachineScheduleDailyScheduleArgs',
    'NdbRegisterDatabaseTimeMachineScheduleDailyScheduleArgsDict',
    'NdbRegisterDatabaseTimeMachineScheduleMonthlyScheduleArgs',
    'NdbRegisterDatabaseTimeMachineScheduleMonthlyScheduleArgsDict',
    'NdbRegisterDatabaseTimeMachineScheduleQuartelyScheduleArgs',
    'NdbRegisterDatabaseTimeMachineScheduleQuartelyScheduleArgsDict',
    'NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDayArgs',
    'NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDayArgsDict',
    'NdbRegisterDatabaseTimeMachineScheduleWeeklyScheduleArgs',
    'NdbRegisterDatabaseTimeMachineScheduleWeeklyScheduleArgsDict',
    'NdbRegisterDatabaseTimeMachineScheduleYearlyScheduleArgs',
    'NdbRegisterDatabaseTimeMachineScheduleYearlyScheduleArgsDict',
    'NdbRegisterDatabaseTimeMachineSlaArgs',
    'NdbRegisterDatabaseTimeMachineSlaArgsDict',
    'NdbRegisterDatabaseTimeMachineTagArgs',
    'NdbRegisterDatabaseTimeMachineTagArgsDict',
    'NdbRegisterDbserverCredentialArgs',
    'NdbRegisterDbserverCredentialArgsDict',
    'NdbRegisterDbserverPostgresDatabaseArgs',
    'NdbRegisterDbserverPostgresDatabaseArgsDict',
    'NdbRegisterDbserverPropertyArgs',
    'NdbRegisterDbserverPropertyArgsDict',
    'NdbRegisterDbserverTagArgs',
    'NdbRegisterDbserverTagArgsDict',
    'NdbScaleDatabaseDatabaseNodeArgs',
    'NdbScaleDatabaseDatabaseNodeArgsDict',
    'NdbScaleDatabaseDatabaseNodeInfoArgs',
    'NdbScaleDatabaseDatabaseNodeInfoArgsDict',
    'NdbScaleDatabaseDatabaseNodePropertyArgs',
    'NdbScaleDatabaseDatabaseNodePropertyArgsDict',
    'NdbScaleDatabaseDatabaseNodeProtectionDomainArgs',
    'NdbScaleDatabaseDatabaseNodeProtectionDomainArgsDict',
    'NdbScaleDatabaseDatabaseNodeProtectionDomainPropertyArgs',
    'NdbScaleDatabaseDatabaseNodeProtectionDomainPropertyArgsDict',
    'NdbScaleDatabaseDatabaseNodeTagArgs',
    'NdbScaleDatabaseDatabaseNodeTagArgsDict',
    'NdbScaleDatabaseInfoArgs',
    'NdbScaleDatabaseInfoArgsDict',
    'NdbScaleDatabaseInfoBpgConfigArgs',
    'NdbScaleDatabaseInfoBpgConfigArgsDict',
    'NdbScaleDatabaseInfoBpgConfigBpgDbParamArgs',
    'NdbScaleDatabaseInfoBpgConfigBpgDbParamArgsDict',
    'NdbScaleDatabaseInfoBpgConfigStorageArgs',
    'NdbScaleDatabaseInfoBpgConfigStorageArgsDict',
    'NdbScaleDatabaseInfoBpgConfigStorageArchiveStorageArgs',
    'NdbScaleDatabaseInfoBpgConfigStorageArchiveStorageArgsDict',
    'NdbScaleDatabaseInfoBpgConfigStorageDataDiskArgs',
    'NdbScaleDatabaseInfoBpgConfigStorageDataDiskArgsDict',
    'NdbScaleDatabaseInfoBpgConfigStorageLogDiskArgs',
    'NdbScaleDatabaseInfoBpgConfigStorageLogDiskArgsDict',
    'NdbScaleDatabaseInfoBpgConfigVmPropertyArgs',
    'NdbScaleDatabaseInfoBpgConfigVmPropertyArgsDict',
    'NdbScaleDatabaseLcmConfigArgs',
    'NdbScaleDatabaseLcmConfigArgsDict',
    'NdbScaleDatabaseLcmConfigExpiryDetailArgs',
    'NdbScaleDatabaseLcmConfigExpiryDetailArgsDict',
    'NdbScaleDatabaseLcmConfigPostDeleteCommandArgs',
    'NdbScaleDatabaseLcmConfigPostDeleteCommandArgsDict',
    'NdbScaleDatabaseLcmConfigPreDeleteCommandArgs',
    'NdbScaleDatabaseLcmConfigPreDeleteCommandArgsDict',
    'NdbScaleDatabaseLcmConfigRefreshDetailArgs',
    'NdbScaleDatabaseLcmConfigRefreshDetailArgsDict',
    'NdbScaleDatabaseLinkedDatabaseArgs',
    'NdbScaleDatabaseLinkedDatabaseArgsDict',
    'NdbScaleDatabaseLinkedDatabaseInfoArgs',
    'NdbScaleDatabaseLinkedDatabaseInfoArgsDict',
    'NdbScaleDatabasePropertyArgs',
    'NdbScaleDatabasePropertyArgsDict',
    'NdbScaleDatabaseTagArgs',
    'NdbScaleDatabaseTagArgsDict',
    'NdbScaleDatabaseTimeMachineArgs',
    'NdbScaleDatabaseTimeMachineArgsDict',
    'NdbScaleDatabaseTimeMachinePropertyArgs',
    'NdbScaleDatabaseTimeMachinePropertyArgsDict',
    'NdbScaleDatabaseTimeMachineScheduleArgs',
    'NdbScaleDatabaseTimeMachineScheduleArgsDict',
    'NdbScaleDatabaseTimeMachineScheduleContinuousScheduleArgs',
    'NdbScaleDatabaseTimeMachineScheduleContinuousScheduleArgsDict',
    'NdbScaleDatabaseTimeMachineScheduleDailyScheduleArgs',
    'NdbScaleDatabaseTimeMachineScheduleDailyScheduleArgsDict',
    'NdbScaleDatabaseTimeMachineScheduleMonthlyScheduleArgs',
    'NdbScaleDatabaseTimeMachineScheduleMonthlyScheduleArgsDict',
    'NdbScaleDatabaseTimeMachineScheduleQuartelyScheduleArgs',
    'NdbScaleDatabaseTimeMachineScheduleQuartelyScheduleArgsDict',
    'NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDayArgs',
    'NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDayArgsDict',
    'NdbScaleDatabaseTimeMachineScheduleWeeklyScheduleArgs',
    'NdbScaleDatabaseTimeMachineScheduleWeeklyScheduleArgsDict',
    'NdbScaleDatabaseTimeMachineScheduleYearlyScheduleArgs',
    'NdbScaleDatabaseTimeMachineScheduleYearlyScheduleArgsDict',
    'NdbScaleDatabaseTimeMachineSlaArgs',
    'NdbScaleDatabaseTimeMachineSlaArgsDict',
    'NdbScaleDatabaseTimeMachineTagArgs',
    'NdbScaleDatabaseTimeMachineTagArgsDict',
    'NdbSoftwareVersionProfilePostgresDatabaseArgs',
    'NdbSoftwareVersionProfilePostgresDatabaseArgsDict',
    'NdbSoftwareVersionProfilePropertyArgs',
    'NdbSoftwareVersionProfilePropertyArgsDict',
    'NdbSoftwareVersionProfileVersionClusterAssociationArgs',
    'NdbSoftwareVersionProfileVersionClusterAssociationArgsDict',
    'NdbSoftwareVersionProfileVersionClusterAssociationPropertyArgs',
    'NdbSoftwareVersionProfileVersionClusterAssociationPropertyArgsDict',
    'NdbStretchedVlanMetadataArgs',
    'NdbStretchedVlanMetadataArgsDict',
    'NdbStretchedVlanVlansListArgs',
    'NdbStretchedVlanVlansListArgsDict',
    'NdbStretchedVlanVlansListPropertiesMapArgs',
    'NdbStretchedVlanVlansListPropertiesMapArgsDict',
    'NdbStretchedVlanVlansListPropertyArgs',
    'NdbStretchedVlanVlansListPropertyArgsDict',
    'NetworkSecurityRuleAdRuleInboundAllowListArgs',
    'NetworkSecurityRuleAdRuleInboundAllowListArgsDict',
    'NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionListArgs',
    'NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionListArgsDict',
    'NetworkSecurityRuleAdRuleInboundAllowListFilterParamArgs',
    'NetworkSecurityRuleAdRuleInboundAllowListFilterParamArgsDict',
    'NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeListArgs',
    'NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeListArgsDict',
    'NetworkSecurityRuleAdRuleInboundAllowListServiceGroupListArgs',
    'NetworkSecurityRuleAdRuleInboundAllowListServiceGroupListArgsDict',
    'NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeListArgs',
    'NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeListArgsDict',
    'NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeListArgs',
    'NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeListArgsDict',
    'NetworkSecurityRuleAdRuleOutboundAllowListArgs',
    'NetworkSecurityRuleAdRuleOutboundAllowListArgsDict',
    'NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListArgs',
    'NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListArgsDict',
    'NetworkSecurityRuleAdRuleOutboundAllowListFilterParamArgs',
    'NetworkSecurityRuleAdRuleOutboundAllowListFilterParamArgsDict',
    'NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeListArgs',
    'NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeListArgsDict',
    'NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListArgs',
    'NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListArgsDict',
    'NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeListArgs',
    'NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeListArgsDict',
    'NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeListArgs',
    'NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeListArgsDict',
    'NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs',
    'NetworkSecurityRuleAdRuleTargetGroupFilterParamArgsDict',
    'NetworkSecurityRuleAppRuleInboundAllowListArgs',
    'NetworkSecurityRuleAppRuleInboundAllowListArgsDict',
    'NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionListArgs',
    'NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionListArgsDict',
    'NetworkSecurityRuleAppRuleInboundAllowListFilterParamArgs',
    'NetworkSecurityRuleAppRuleInboundAllowListFilterParamArgsDict',
    'NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeListArgs',
    'NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeListArgsDict',
    'NetworkSecurityRuleAppRuleInboundAllowListServiceGroupListArgs',
    'NetworkSecurityRuleAppRuleInboundAllowListServiceGroupListArgsDict',
    'NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeListArgs',
    'NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeListArgsDict',
    'NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeListArgs',
    'NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeListArgsDict',
    'NetworkSecurityRuleAppRuleOutboundAllowListArgs',
    'NetworkSecurityRuleAppRuleOutboundAllowListArgsDict',
    'NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionListArgs',
    'NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionListArgsDict',
    'NetworkSecurityRuleAppRuleOutboundAllowListFilterParamArgs',
    'NetworkSecurityRuleAppRuleOutboundAllowListFilterParamArgsDict',
    'NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeListArgs',
    'NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeListArgsDict',
    'NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupListArgs',
    'NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupListArgsDict',
    'NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeListArgs',
    'NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeListArgsDict',
    'NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeListArgs',
    'NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeListArgsDict',
    'NetworkSecurityRuleAppRuleTargetGroupFilterParamArgs',
    'NetworkSecurityRuleAppRuleTargetGroupFilterParamArgsDict',
    'NetworkSecurityRuleCategoryArgs',
    'NetworkSecurityRuleCategoryArgsDict',
    'NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs',
    'NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgsDict',
    'NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs',
    'NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgsDict',
    'PbrDestinationArgs',
    'PbrDestinationArgsDict',
    'PbrProtocolParametersArgs',
    'PbrProtocolParametersArgsDict',
    'PbrProtocolParametersIcmpArgs',
    'PbrProtocolParametersIcmpArgsDict',
    'PbrProtocolParametersTcpArgs',
    'PbrProtocolParametersTcpArgsDict',
    'PbrProtocolParametersTcpDestinationPortRangeListArgs',
    'PbrProtocolParametersTcpDestinationPortRangeListArgsDict',
    'PbrProtocolParametersTcpSourcePortRangeListArgs',
    'PbrProtocolParametersTcpSourcePortRangeListArgsDict',
    'PbrProtocolParametersUdpArgs',
    'PbrProtocolParametersUdpArgsDict',
    'PbrProtocolParametersUdpDestinationPortRangeListArgs',
    'PbrProtocolParametersUdpDestinationPortRangeListArgsDict',
    'PbrProtocolParametersUdpSourcePortRangeListArgs',
    'PbrProtocolParametersUdpSourcePortRangeListArgsDict',
    'PbrSourceArgs',
    'PbrSourceArgsDict',
    'ProjectAccountReferenceListArgs',
    'ProjectAccountReferenceListArgsDict',
    'ProjectAcpArgs',
    'ProjectAcpArgsDict',
    'ProjectAcpContextFilterListArgs',
    'ProjectAcpContextFilterListArgsDict',
    'ProjectAcpContextFilterListEntityFilterExpressionListArgs',
    'ProjectAcpContextFilterListEntityFilterExpressionListArgsDict',
    'ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideArgs',
    'ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideArgsDict',
    'ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgs',
    'ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgsDict',
    'ProjectAcpContextFilterListScopeFilterExpressionListArgs',
    'ProjectAcpContextFilterListScopeFilterExpressionListArgsDict',
    'ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideArgs',
    'ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideArgsDict',
    'ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgs',
    'ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgsDict',
    'ProjectAcpRoleReferenceArgs',
    'ProjectAcpRoleReferenceArgsDict',
    'ProjectAcpUserGroupReferenceListArgs',
    'ProjectAcpUserGroupReferenceListArgsDict',
    'ProjectAcpUserReferenceListArgs',
    'ProjectAcpUserReferenceListArgsDict',
    'ProjectCategoryArgs',
    'ProjectCategoryArgsDict',
    'ProjectClusterReferenceListArgs',
    'ProjectClusterReferenceListArgsDict',
    'ProjectDefaultEnvironmentReferenceArgs',
    'ProjectDefaultEnvironmentReferenceArgsDict',
    'ProjectDefaultSubnetReferenceArgs',
    'ProjectDefaultSubnetReferenceArgsDict',
    'ProjectEnvironmentReferenceListArgs',
    'ProjectEnvironmentReferenceListArgsDict',
    'ProjectExternalNetworkListArgs',
    'ProjectExternalNetworkListArgsDict',
    'ProjectExternalUserGroupReferenceListArgs',
    'ProjectExternalUserGroupReferenceListArgsDict',
    'ProjectResourceDomainArgs',
    'ProjectResourceDomainArgsDict',
    'ProjectResourceDomainResourceArgs',
    'ProjectResourceDomainResourceArgsDict',
    'ProjectSubnetReferenceListArgs',
    'ProjectSubnetReferenceListArgsDict',
    'ProjectTunnelReferenceListArgs',
    'ProjectTunnelReferenceListArgsDict',
    'ProjectUserGroupListArgs',
    'ProjectUserGroupListArgsDict',
    'ProjectUserGroupListDirectoryServiceOusArgs',
    'ProjectUserGroupListDirectoryServiceOusArgsDict',
    'ProjectUserGroupListDirectoryServiceUserGroupArgs',
    'ProjectUserGroupListDirectoryServiceUserGroupArgsDict',
    'ProjectUserGroupListSamlUserGroupArgs',
    'ProjectUserGroupListSamlUserGroupArgsDict',
    'ProjectUserListArgs',
    'ProjectUserListArgsDict',
    'ProjectUserListDirectoryServiceUserArgs',
    'ProjectUserListDirectoryServiceUserArgsDict',
    'ProjectUserListDirectoryServiceUserDirectoryServiceReferenceArgs',
    'ProjectUserListDirectoryServiceUserDirectoryServiceReferenceArgsDict',
    'ProjectUserListIdentityProviderUserArgs',
    'ProjectUserListIdentityProviderUserArgsDict',
    'ProjectUserListIdentityProviderUserIdentityProviderReferenceArgs',
    'ProjectUserListIdentityProviderUserIdentityProviderReferenceArgsDict',
    'ProjectUserReferenceListArgs',
    'ProjectUserReferenceListArgsDict',
    'ProjectVpcReferenceListArgs',
    'ProjectVpcReferenceListArgsDict',
    'ProtectionRuleAvailabilityZoneConnectivityListArgs',
    'ProtectionRuleAvailabilityZoneConnectivityListArgsDict',
    'ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs',
    'ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgsDict',
    'ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs',
    'ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgsDict',
    'ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyArgs',
    'ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyArgsDict',
    'ProtectionRuleCategoryArgs',
    'ProtectionRuleCategoryArgsDict',
    'ProtectionRuleCategoryFilterArgs',
    'ProtectionRuleCategoryFilterArgsDict',
    'ProtectionRuleCategoryFilterParamArgs',
    'ProtectionRuleCategoryFilterParamArgsDict',
    'ProtectionRuleOrderedAvailabilityZoneListArgs',
    'ProtectionRuleOrderedAvailabilityZoneListArgsDict',
    'ProtectionRuleOwnerReferenceArgs',
    'ProtectionRuleOwnerReferenceArgsDict',
    'ProtectionRuleProjectReferenceArgs',
    'ProtectionRuleProjectReferenceArgsDict',
    'RecoveryPlanCategoryArgs',
    'RecoveryPlanCategoryArgsDict',
    'RecoveryPlanOwnerReferenceArgs',
    'RecoveryPlanOwnerReferenceArgsDict',
    'RecoveryPlanParametersArgs',
    'RecoveryPlanParametersArgsDict',
    'RecoveryPlanParametersFloatingIpAssignmentListArgs',
    'RecoveryPlanParametersFloatingIpAssignmentListArgsDict',
    'RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListArgs',
    'RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListArgsDict',
    'RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigArgs',
    'RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigArgsDict',
    'RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigArgs',
    'RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigArgsDict',
    'RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformationArgs',
    'RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformationArgsDict',
    'RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReferenceArgs',
    'RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReferenceArgsDict',
    'RecoveryPlanParametersNetworkMappingListArgs',
    'RecoveryPlanParametersNetworkMappingListArgsDict',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListArgs',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListArgsDict',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListArgs',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListArgsDict',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListArgs',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListArgsDict',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListArgs',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListArgsDict',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceArgs',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceArgsDict',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkArgs',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkArgsDict',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListArgs',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListArgsDict',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceArgs',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceArgsDict',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceArgs',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceArgsDict',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListArgs',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListArgsDict',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListArgs',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListArgsDict',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceArgs',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceArgsDict',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkArgs',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkArgsDict',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListArgs',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListArgsDict',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceArgs',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceArgsDict',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceArgs',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceArgsDict',
    'RecoveryPlanProjectReferenceArgs',
    'RecoveryPlanProjectReferenceArgsDict',
    'RecoveryPlanStageListArgs',
    'RecoveryPlanStageListArgsDict',
    'RecoveryPlanStageListStageWorkArgs',
    'RecoveryPlanStageListStageWorkArgsDict',
    'RecoveryPlanStageListStageWorkRecoverEntitiesArgs',
    'RecoveryPlanStageListStageWorkRecoverEntitiesArgsDict',
    'RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListArgs',
    'RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListArgsDict',
    'RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategoryArgs',
    'RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategoryArgsDict',
    'RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptListArgs',
    'RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptListArgsDict',
    'RoleCategoryArgs',
    'RoleCategoryArgsDict',
    'RoleOwnerReferenceArgs',
    'RoleOwnerReferenceArgsDict',
    'RolePermissionReferenceListArgs',
    'RolePermissionReferenceListArgsDict',
    'RoleProjectReferenceArgs',
    'RoleProjectReferenceArgsDict',
    'ServiceGroupServiceListArgs',
    'ServiceGroupServiceListArgsDict',
    'ServiceGroupServiceListIcmpTypeCodeListArgs',
    'ServiceGroupServiceListIcmpTypeCodeListArgsDict',
    'ServiceGroupServiceListTcpPortRangeListArgs',
    'ServiceGroupServiceListTcpPortRangeListArgsDict',
    'ServiceGroupServiceListUdpPortRangeListArgs',
    'ServiceGroupServiceListUdpPortRangeListArgsDict',
    'StaticRoutesDefaultRouteNexthopArgs',
    'StaticRoutesDefaultRouteNexthopArgsDict',
    'StaticRoutesStaticRoutesListArgs',
    'StaticRoutesStaticRoutesListArgsDict',
    'SubnetCategoryArgs',
    'SubnetCategoryArgsDict',
    'UserAccessControlPolicyReferenceListArgs',
    'UserAccessControlPolicyReferenceListArgsDict',
    'UserCategoryArgs',
    'UserCategoryArgsDict',
    'UserDirectoryServiceUserArgs',
    'UserDirectoryServiceUserArgsDict',
    'UserDirectoryServiceUserDirectoryServiceReferenceArgs',
    'UserDirectoryServiceUserDirectoryServiceReferenceArgsDict',
    'UserGroupsCategoryArgs',
    'UserGroupsCategoryArgsDict',
    'UserGroupsDirectoryServiceOusArgs',
    'UserGroupsDirectoryServiceOusArgsDict',
    'UserGroupsDirectoryServiceUserGroupArgs',
    'UserGroupsDirectoryServiceUserGroupArgsDict',
    'UserGroupsSamlUserGroupArgs',
    'UserGroupsSamlUserGroupArgsDict',
    'UserIdentityProviderUserArgs',
    'UserIdentityProviderUserArgsDict',
    'UserIdentityProviderUserIdentityProviderReferenceArgs',
    'UserIdentityProviderUserIdentityProviderReferenceArgsDict',
    'UserProjectReferenceListArgs',
    'UserProjectReferenceListArgsDict',
    'VirtualMachineCategoryArgs',
    'VirtualMachineCategoryArgsDict',
    'VirtualMachineDiskListArgs',
    'VirtualMachineDiskListArgsDict',
    'VirtualMachineDiskListDevicePropertiesArgs',
    'VirtualMachineDiskListDevicePropertiesArgsDict',
    'VirtualMachineDiskListStorageConfigArgs',
    'VirtualMachineDiskListStorageConfigArgsDict',
    'VirtualMachineDiskListStorageConfigStorageContainerReferenceArgs',
    'VirtualMachineDiskListStorageConfigStorageContainerReferenceArgsDict',
    'VirtualMachineGpuListArgs',
    'VirtualMachineGpuListArgsDict',
    'VirtualMachineNicListArgs',
    'VirtualMachineNicListArgsDict',
    'VirtualMachineNicListIpEndpointListArgs',
    'VirtualMachineNicListIpEndpointListArgsDict',
    'VirtualMachineNicListStatusArgs',
    'VirtualMachineNicListStatusArgsDict',
    'VirtualMachineNicListStatusIpEndpointListArgs',
    'VirtualMachineNicListStatusIpEndpointListArgsDict',
    'VirtualMachineSerialPortListArgs',
    'VirtualMachineSerialPortListArgsDict',
    'VpcCommonDomainNameServerIpListArgs',
    'VpcCommonDomainNameServerIpListArgsDict',
    'VpcExternalSubnetListStatusArgs',
    'VpcExternalSubnetListStatusArgsDict',
    'VpcExternalSubnetListStatusActiveGatewayNodeArgs',
    'VpcExternalSubnetListStatusActiveGatewayNodeArgsDict',
    'VpcExternallyRoutablePrefixListArgs',
    'VpcExternallyRoutablePrefixListArgsDict',
    'GetAccessControlPoliciesMetadataArgs',
    'GetAccessControlPoliciesMetadataArgsDict',
    'GetAccessControlPolicyCategoryArgs',
    'GetAccessControlPolicyCategoryArgsDict',
    'GetAddressGroupsMetadataArgs',
    'GetAddressGroupsMetadataArgsDict',
    'GetAssertHelperCheckArgs',
    'GetAssertHelperCheckArgsDict',
    'GetClusterCategoryArgs',
    'GetClusterCategoryArgsDict',
    'GetFloatingIpsMetadataArgs',
    'GetFloatingIpsMetadataArgsDict',
    'GetFoundationCentralClusterDetailsClusterStatusArgs',
    'GetFoundationCentralClusterDetailsClusterStatusArgsDict',
    'GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailArgs',
    'GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailArgsDict',
    'GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailArgs',
    'GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailArgsDict',
    'GetFoundationCentralClusterDetailsCommonNetworkSettingsArgs',
    'GetFoundationCentralClusterDetailsCommonNetworkSettingsArgsDict',
    'GetFoundationCentralImagedClustersListFiltersArgs',
    'GetFoundationCentralImagedClustersListFiltersArgsDict',
    'GetFoundationCentralImagedNodesListFiltersArgs',
    'GetFoundationCentralImagedNodesListFiltersArgsDict',
    'GetFoundationCentralListApiKeysMetadataArgs',
    'GetFoundationCentralListApiKeysMetadataArgsDict',
    'GetHostCategoryArgs',
    'GetHostCategoryArgsDict',
    'GetImageCategoryArgs',
    'GetImageCategoryArgsDict',
    'GetNdbCloneFilterArgs',
    'GetNdbCloneFilterArgsDict',
    'GetNdbCloneTagArgs',
    'GetNdbCloneTagArgsDict',
    'GetNdbClonesFilterArgs',
    'GetNdbClonesFilterArgsDict',
    'GetNdbDatabaseTagArgs',
    'GetNdbDatabaseTagArgsDict',
    'GetNdbDbserverTagArgs',
    'GetNdbDbserverTagArgsDict',
    'GetNdbMaintenanceWindowTagArgs',
    'GetNdbMaintenanceWindowTagArgsDict',
    'GetNdbSnapshotFilterArgs',
    'GetNdbSnapshotFilterArgsDict',
    'GetNdbSnapshotTagArgs',
    'GetNdbSnapshotTagArgsDict',
    'GetNdbSnapshotsFilterArgs',
    'GetNdbSnapshotsFilterArgsDict',
    'GetNdbTimeMachineTagArgs',
    'GetNdbTimeMachineTagArgsDict',
    'GetNetworkSecurityRuleCategoryArgs',
    'GetNetworkSecurityRuleCategoryArgsDict',
    'GetPbrsMetadataArgs',
    'GetPbrsMetadataArgsDict',
    'GetPermissionCategoryArgs',
    'GetPermissionCategoryArgsDict',
    'GetPermissionsMetadataArgs',
    'GetPermissionsMetadataArgsDict',
    'GetProjectCategoryArgs',
    'GetProjectCategoryArgsDict',
    'GetProjectExternalUserGroupReferenceListArgs',
    'GetProjectExternalUserGroupReferenceListArgsDict',
    'GetProjectSubnetReferenceListArgs',
    'GetProjectSubnetReferenceListArgsDict',
    'GetProjectUserReferenceListArgs',
    'GetProjectUserReferenceListArgsDict',
    'GetProtectionRuleCategoryArgs',
    'GetProtectionRuleCategoryArgsDict',
    'GetRecoveryPlanCategoryArgs',
    'GetRecoveryPlanCategoryArgsDict',
    'GetRoleCategoryArgs',
    'GetRoleCategoryArgsDict',
    'GetRolesMetadataArgs',
    'GetRolesMetadataArgsDict',
    'GetServiceGroupsMetadataArgs',
    'GetServiceGroupsMetadataArgsDict',
    'GetSubnetAdditionalFilterArgs',
    'GetSubnetAdditionalFilterArgsDict',
    'GetSubnetCategoryArgs',
    'GetSubnetCategoryArgsDict',
    'GetSubnetsMetadataArgs',
    'GetSubnetsMetadataArgsDict',
    'GetUserCategoryArgs',
    'GetUserCategoryArgsDict',
    'GetUserGroupCategoryArgs',
    'GetUserGroupCategoryArgsDict',
    'GetUserGroupsMetadataArgs',
    'GetUserGroupsMetadataArgsDict',
    'GetUsersMetadataArgs',
    'GetUsersMetadataArgsDict',
    'GetVirtualMachineCategoryArgs',
    'GetVirtualMachineCategoryArgsDict',
    'GetVpcsMetadataArgs',
    'GetVpcsMetadataArgsDict',
]

MYPY = False

if not MYPY:
    class AccessControlPolicyCategoryArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        - (Optional) Name of the Access Control Policy.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        - value of the key.
        """
elif False:
    AccessControlPolicyCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccessControlPolicyCategoryArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: - (Optional) Name of the Access Control Policy.
        :param pulumi.Input[str] value: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AccessControlPolicyContextFilterListArgsDict(TypedDict):
        entity_filter_expression_lists: pulumi.Input[Sequence[pulumi.Input['AccessControlPolicyContextFilterListEntityFilterExpressionListArgsDict']]]
        """
        A list of Entity filter expressions.
        """
        scope_filter_expression_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['AccessControlPolicyContextFilterListScopeFilterExpressionListArgsDict']]]]
        """
        - (Optional) Filter the scope of an Access Control Policy.
        """
elif False:
    AccessControlPolicyContextFilterListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccessControlPolicyContextFilterListArgs:
    def __init__(__self__, *,
                 entity_filter_expression_lists: pulumi.Input[Sequence[pulumi.Input['AccessControlPolicyContextFilterListEntityFilterExpressionListArgs']]],
                 scope_filter_expression_lists: Optional[pulumi.Input[Sequence[pulumi.Input['AccessControlPolicyContextFilterListScopeFilterExpressionListArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AccessControlPolicyContextFilterListEntityFilterExpressionListArgs']]] entity_filter_expression_lists: A list of Entity filter expressions.
        :param pulumi.Input[Sequence[pulumi.Input['AccessControlPolicyContextFilterListScopeFilterExpressionListArgs']]] scope_filter_expression_lists: - (Optional) Filter the scope of an Access Control Policy.
        """
        pulumi.set(__self__, "entity_filter_expression_lists", entity_filter_expression_lists)
        if scope_filter_expression_lists is not None:
            pulumi.set(__self__, "scope_filter_expression_lists", scope_filter_expression_lists)

    @property
    @pulumi.getter(name="entityFilterExpressionLists")
    def entity_filter_expression_lists(self) -> pulumi.Input[Sequence[pulumi.Input['AccessControlPolicyContextFilterListEntityFilterExpressionListArgs']]]:
        """
        A list of Entity filter expressions.
        """
        return pulumi.get(self, "entity_filter_expression_lists")

    @entity_filter_expression_lists.setter
    def entity_filter_expression_lists(self, value: pulumi.Input[Sequence[pulumi.Input['AccessControlPolicyContextFilterListEntityFilterExpressionListArgs']]]):
        pulumi.set(self, "entity_filter_expression_lists", value)

    @property
    @pulumi.getter(name="scopeFilterExpressionLists")
    def scope_filter_expression_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessControlPolicyContextFilterListScopeFilterExpressionListArgs']]]]:
        """
        - (Optional) Filter the scope of an Access Control Policy.
        """
        return pulumi.get(self, "scope_filter_expression_lists")

    @scope_filter_expression_lists.setter
    def scope_filter_expression_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessControlPolicyContextFilterListScopeFilterExpressionListArgs']]]]):
        pulumi.set(self, "scope_filter_expression_lists", value)


if not MYPY:
    class AccessControlPolicyContextFilterListEntityFilterExpressionListArgsDict(TypedDict):
        operator: pulumi.Input[str]
        """
        - (Required) The operator in the filter expression.
        """
        right_hand_side: pulumi.Input['AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgsDict']
        """
        - (Required) The right hand side (RHS) of an scope expression.
        """
        left_hand_side_entity_type: NotRequired[pulumi.Input[str]]
        """
        - (Optional)  The LHS of the filter expression - the entity type.
        """
elif False:
    AccessControlPolicyContextFilterListEntityFilterExpressionListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccessControlPolicyContextFilterListEntityFilterExpressionListArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 right_hand_side: pulumi.Input['AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs'],
                 left_hand_side_entity_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] operator: - (Required) The operator in the filter expression.
        :param pulumi.Input['AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs'] right_hand_side: - (Required) The right hand side (RHS) of an scope expression.
        :param pulumi.Input[str] left_hand_side_entity_type: - (Optional)  The LHS of the filter expression - the entity type.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "right_hand_side", right_hand_side)
        if left_hand_side_entity_type is not None:
            pulumi.set(__self__, "left_hand_side_entity_type", left_hand_side_entity_type)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        - (Required) The operator in the filter expression.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="rightHandSide")
    def right_hand_side(self) -> pulumi.Input['AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs']:
        """
        - (Required) The right hand side (RHS) of an scope expression.
        """
        return pulumi.get(self, "right_hand_side")

    @right_hand_side.setter
    def right_hand_side(self, value: pulumi.Input['AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs']):
        pulumi.set(self, "right_hand_side", value)

    @property
    @pulumi.getter(name="leftHandSideEntityType")
    def left_hand_side_entity_type(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional)  The LHS of the filter expression - the entity type.
        """
        return pulumi.get(self, "left_hand_side_entity_type")

    @left_hand_side_entity_type.setter
    def left_hand_side_entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "left_hand_side_entity_type", value)


if not MYPY:
    class AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgsDict(TypedDict):
        categories: NotRequired[pulumi.Input['AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgsDict']]
        """
        - (Optional) The category values represented as a dictionary of key > list of values.
        """
        collection: NotRequired[pulumi.Input[str]]
        """
        - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        uuid_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        - (Optional) The explicit list of UUIDs for the given kind.
        """
elif False:
    AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs:
    def __init__(__self__, *,
                 categories: Optional[pulumi.Input['AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgs']] = None,
                 collection: Optional[pulumi.Input[str]] = None,
                 uuid_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgs'] categories: - (Optional) The category values represented as a dictionary of key > list of values.
        :param pulumi.Input[str] collection: - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] uuid_lists: - (Optional) The explicit list of UUIDs for the given kind.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if uuid_lists is not None:
            pulumi.set(__self__, "uuid_lists", uuid_lists)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input['AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgs']]:
        """
        - (Optional) The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input['AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgs']]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def collection(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        return pulumi.get(self, "collection")

    @collection.setter
    def collection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collection", value)

    @property
    @pulumi.getter(name="uuidLists")
    def uuid_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - (Optional) The explicit list of UUIDs for the given kind.
        """
        return pulumi.get(self, "uuid_lists")

    @uuid_lists.setter
    def uuid_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "uuid_lists", value)


if not MYPY:
    class AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        - (Optional) Name of the Access Control Policy.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        - value of the key.
        """
elif False:
    AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: - (Optional) Name of the Access Control Policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - value of the key.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class AccessControlPolicyContextFilterListScopeFilterExpressionListArgsDict(TypedDict):
        left_hand_side: pulumi.Input[str]
        """
        - (Optional)  The LHS of the filter expression - the scope type.
        """
        operator: pulumi.Input[str]
        """
        - (Required) The operator of the filter expression.
        """
        right_hand_side: pulumi.Input['AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideArgsDict']
        """
        - (Required) The right hand side (RHS) of an scope expression.
        """
elif False:
    AccessControlPolicyContextFilterListScopeFilterExpressionListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccessControlPolicyContextFilterListScopeFilterExpressionListArgs:
    def __init__(__self__, *,
                 left_hand_side: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 right_hand_side: pulumi.Input['AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideArgs']):
        """
        :param pulumi.Input[str] left_hand_side: - (Optional)  The LHS of the filter expression - the scope type.
        :param pulumi.Input[str] operator: - (Required) The operator of the filter expression.
        :param pulumi.Input['AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideArgs'] right_hand_side: - (Required) The right hand side (RHS) of an scope expression.
        """
        pulumi.set(__self__, "left_hand_side", left_hand_side)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "right_hand_side", right_hand_side)

    @property
    @pulumi.getter(name="leftHandSide")
    def left_hand_side(self) -> pulumi.Input[str]:
        """
        - (Optional)  The LHS of the filter expression - the scope type.
        """
        return pulumi.get(self, "left_hand_side")

    @left_hand_side.setter
    def left_hand_side(self, value: pulumi.Input[str]):
        pulumi.set(self, "left_hand_side", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        - (Required) The operator of the filter expression.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="rightHandSide")
    def right_hand_side(self) -> pulumi.Input['AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideArgs']:
        """
        - (Required) The right hand side (RHS) of an scope expression.
        """
        return pulumi.get(self, "right_hand_side")

    @right_hand_side.setter
    def right_hand_side(self, value: pulumi.Input['AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideArgs']):
        pulumi.set(self, "right_hand_side", value)


if not MYPY:
    class AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideArgsDict(TypedDict):
        categories: NotRequired[pulumi.Input['AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgsDict']]
        """
        - (Optional) The category values represented as a dictionary of key > list of values.
        """
        collection: NotRequired[pulumi.Input[str]]
        """
        - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        uuid_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        - (Optional) The explicit list of UUIDs for the given kind.
        """
elif False:
    AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideArgs:
    def __init__(__self__, *,
                 categories: Optional[pulumi.Input['AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgs']] = None,
                 collection: Optional[pulumi.Input[str]] = None,
                 uuid_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgs'] categories: - (Optional) The category values represented as a dictionary of key > list of values.
        :param pulumi.Input[str] collection: - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] uuid_lists: - (Optional) The explicit list of UUIDs for the given kind.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if uuid_lists is not None:
            pulumi.set(__self__, "uuid_lists", uuid_lists)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input['AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgs']]:
        """
        - (Optional) The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input['AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgs']]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def collection(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        return pulumi.get(self, "collection")

    @collection.setter
    def collection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collection", value)

    @property
    @pulumi.getter(name="uuidLists")
    def uuid_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - (Optional) The explicit list of UUIDs for the given kind.
        """
        return pulumi.get(self, "uuid_lists")

    @uuid_lists.setter
    def uuid_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "uuid_lists", value)


if not MYPY:
    class AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        - (Optional) Name of the Access Control Policy.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        - value of the key.
        """
elif False:
    AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: - (Optional) Name of the Access Control Policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - value of the key.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class AccessControlPolicyOwnerReferenceArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name (Default value: project)(Required).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Optional) Name of the Access Control Policy.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        - the UUID(Required).
        """
elif False:
    AccessControlPolicyOwnerReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccessControlPolicyOwnerReferenceArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: - The kind name (Default value: project)(Required).
        :param pulumi.Input[str] name: - (Optional) Name of the Access Control Policy.
        :param pulumi.Input[str] uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class AccessControlPolicyRoleReferenceArgsDict(TypedDict):
        kind: pulumi.Input[str]
        """
        - The kind name (Default value: project)(Required).
        """
        uuid: pulumi.Input[str]
        """
        - the UUID(Required).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Optional) Name of the Access Control Policy.
        """
elif False:
    AccessControlPolicyRoleReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccessControlPolicyRoleReferenceArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 uuid: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: - The kind name (Default value: project)(Required).
        :param pulumi.Input[str] uuid: - the UUID(Required).
        :param pulumi.Input[str] name: - (Optional) Name of the Access Control Policy.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "uuid", uuid)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class AccessControlPolicyUserGroupReferenceListArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        - the UUID(Required).
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name (Default value: project)(Required).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Optional) Name of the Access Control Policy.
        """
elif False:
    AccessControlPolicyUserGroupReferenceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccessControlPolicyUserGroupReferenceListArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: - the UUID(Required).
        :param pulumi.Input[str] kind: - The kind name (Default value: project)(Required).
        :param pulumi.Input[str] name: - (Optional) Name of the Access Control Policy.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class AccessControlPolicyUserReferenceListArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        - the UUID(Required).
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name (Default value: project)(Required).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Optional) Name of the Access Control Policy.
        """
elif False:
    AccessControlPolicyUserReferenceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccessControlPolicyUserReferenceListArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: - the UUID(Required).
        :param pulumi.Input[str] kind: - The kind name (Default value: project)(Required).
        :param pulumi.Input[str] name: - (Optional) Name of the Access Control Policy.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class AddressGroupIpAddressBlockListArgsDict(TypedDict):
        ip: pulumi.Input[str]
        """
        - (Required) IP of the address block
        """
        prefix_length: pulumi.Input[int]
        """
        - (Required) Prefix length of address block in int

        See detailed information in [Nutanix Address Groups](https://www.nutanix.dev/api_references/prism-central-v3/#/5ccef53a546a4-create-a-new-address-group).
        """
elif False:
    AddressGroupIpAddressBlockListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AddressGroupIpAddressBlockListArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 prefix_length: pulumi.Input[int]):
        """
        :param pulumi.Input[str] ip: - (Required) IP of the address block
        :param pulumi.Input[int] prefix_length: - (Required) Prefix length of address block in int
               
               See detailed information in [Nutanix Address Groups](https://www.nutanix.dev/api_references/prism-central-v3/#/5ccef53a546a4-create-a-new-address-group).
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        """
        - (Required) IP of the address block
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> pulumi.Input[int]:
        """
        - (Required) Prefix length of address block in int

        See detailed information in [Nutanix Address Groups](https://www.nutanix.dev/api_references/prism-central-v3/#/5ccef53a546a4-create-a-new-address-group).
        """
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "prefix_length", value)


if not MYPY:
    class FoundationCentralImageClusterClusterStatusArgsDict(TypedDict):
        aggregate_percent_complete: NotRequired[pulumi.Input[float]]
        cluster_creation_started: NotRequired[pulumi.Input[bool]]
        cluster_progress_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterClusterStatusClusterProgressDetailArgsDict']]]]
        current_foundation_ip: NotRequired[pulumi.Input[str]]
        foundation_session_id: NotRequired[pulumi.Input[str]]
        imaging_stopped: NotRequired[pulumi.Input[bool]]
        intent_picked_up: NotRequired[pulumi.Input[bool]]
        node_progress_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterClusterStatusNodeProgressDetailArgsDict']]]]
elif False:
    FoundationCentralImageClusterClusterStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationCentralImageClusterClusterStatusArgs:
    def __init__(__self__, *,
                 aggregate_percent_complete: Optional[pulumi.Input[float]] = None,
                 cluster_creation_started: Optional[pulumi.Input[bool]] = None,
                 cluster_progress_details: Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterClusterStatusClusterProgressDetailArgs']]]] = None,
                 current_foundation_ip: Optional[pulumi.Input[str]] = None,
                 foundation_session_id: Optional[pulumi.Input[str]] = None,
                 imaging_stopped: Optional[pulumi.Input[bool]] = None,
                 intent_picked_up: Optional[pulumi.Input[bool]] = None,
                 node_progress_details: Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterClusterStatusNodeProgressDetailArgs']]]] = None):
        if aggregate_percent_complete is not None:
            pulumi.set(__self__, "aggregate_percent_complete", aggregate_percent_complete)
        if cluster_creation_started is not None:
            pulumi.set(__self__, "cluster_creation_started", cluster_creation_started)
        if cluster_progress_details is not None:
            pulumi.set(__self__, "cluster_progress_details", cluster_progress_details)
        if current_foundation_ip is not None:
            pulumi.set(__self__, "current_foundation_ip", current_foundation_ip)
        if foundation_session_id is not None:
            pulumi.set(__self__, "foundation_session_id", foundation_session_id)
        if imaging_stopped is not None:
            pulumi.set(__self__, "imaging_stopped", imaging_stopped)
        if intent_picked_up is not None:
            pulumi.set(__self__, "intent_picked_up", intent_picked_up)
        if node_progress_details is not None:
            pulumi.set(__self__, "node_progress_details", node_progress_details)

    @property
    @pulumi.getter(name="aggregatePercentComplete")
    def aggregate_percent_complete(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "aggregate_percent_complete")

    @aggregate_percent_complete.setter
    def aggregate_percent_complete(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "aggregate_percent_complete", value)

    @property
    @pulumi.getter(name="clusterCreationStarted")
    def cluster_creation_started(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cluster_creation_started")

    @cluster_creation_started.setter
    def cluster_creation_started(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cluster_creation_started", value)

    @property
    @pulumi.getter(name="clusterProgressDetails")
    def cluster_progress_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterClusterStatusClusterProgressDetailArgs']]]]:
        return pulumi.get(self, "cluster_progress_details")

    @cluster_progress_details.setter
    def cluster_progress_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterClusterStatusClusterProgressDetailArgs']]]]):
        pulumi.set(self, "cluster_progress_details", value)

    @property
    @pulumi.getter(name="currentFoundationIp")
    def current_foundation_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "current_foundation_ip")

    @current_foundation_ip.setter
    def current_foundation_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "current_foundation_ip", value)

    @property
    @pulumi.getter(name="foundationSessionId")
    def foundation_session_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "foundation_session_id")

    @foundation_session_id.setter
    def foundation_session_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "foundation_session_id", value)

    @property
    @pulumi.getter(name="imagingStopped")
    def imaging_stopped(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "imaging_stopped")

    @imaging_stopped.setter
    def imaging_stopped(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "imaging_stopped", value)

    @property
    @pulumi.getter(name="intentPickedUp")
    def intent_picked_up(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "intent_picked_up")

    @intent_picked_up.setter
    def intent_picked_up(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "intent_picked_up", value)

    @property
    @pulumi.getter(name="nodeProgressDetails")
    def node_progress_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterClusterStatusNodeProgressDetailArgs']]]]:
        return pulumi.get(self, "node_progress_details")

    @node_progress_details.setter
    def node_progress_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterClusterStatusNodeProgressDetailArgs']]]]):
        pulumi.set(self, "node_progress_details", value)


if not MYPY:
    class FoundationCentralImageClusterClusterStatusClusterProgressDetailArgsDict(TypedDict):
        cluster_name: NotRequired[pulumi.Input[str]]
        """
        Name of the cluster.
        """
        message_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        percent_complete: NotRequired[pulumi.Input[float]]
        status: NotRequired[pulumi.Input[str]]
elif False:
    FoundationCentralImageClusterClusterStatusClusterProgressDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationCentralImageClusterClusterStatusClusterProgressDetailArgs:
    def __init__(__self__, *,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 message_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 percent_complete: Optional[pulumi.Input[float]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cluster_name: Name of the cluster.
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if message_lists is not None:
            pulumi.set(__self__, "message_lists", message_lists)
        if percent_complete is not None:
            pulumi.set(__self__, "percent_complete", percent_complete)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cluster.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="messageLists")
    def message_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "message_lists")

    @message_lists.setter
    def message_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "message_lists", value)

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "percent_complete")

    @percent_complete.setter
    def percent_complete(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percent_complete", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class FoundationCentralImageClusterClusterStatusNodeProgressDetailArgsDict(TypedDict):
        imaged_node_uuid: NotRequired[pulumi.Input[str]]
        """
        UUID of the node.
        """
        imaging_stopped: NotRequired[pulumi.Input[bool]]
        intent_picked_up: NotRequired[pulumi.Input[bool]]
        message_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        percent_complete: NotRequired[pulumi.Input[float]]
        status: NotRequired[pulumi.Input[str]]
elif False:
    FoundationCentralImageClusterClusterStatusNodeProgressDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationCentralImageClusterClusterStatusNodeProgressDetailArgs:
    def __init__(__self__, *,
                 imaged_node_uuid: Optional[pulumi.Input[str]] = None,
                 imaging_stopped: Optional[pulumi.Input[bool]] = None,
                 intent_picked_up: Optional[pulumi.Input[bool]] = None,
                 message_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 percent_complete: Optional[pulumi.Input[float]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] imaged_node_uuid: UUID of the node.
        """
        if imaged_node_uuid is not None:
            pulumi.set(__self__, "imaged_node_uuid", imaged_node_uuid)
        if imaging_stopped is not None:
            pulumi.set(__self__, "imaging_stopped", imaging_stopped)
        if intent_picked_up is not None:
            pulumi.set(__self__, "intent_picked_up", intent_picked_up)
        if message_lists is not None:
            pulumi.set(__self__, "message_lists", message_lists)
        if percent_complete is not None:
            pulumi.set(__self__, "percent_complete", percent_complete)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="imagedNodeUuid")
    def imaged_node_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        UUID of the node.
        """
        return pulumi.get(self, "imaged_node_uuid")

    @imaged_node_uuid.setter
    def imaged_node_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imaged_node_uuid", value)

    @property
    @pulumi.getter(name="imagingStopped")
    def imaging_stopped(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "imaging_stopped")

    @imaging_stopped.setter
    def imaging_stopped(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "imaging_stopped", value)

    @property
    @pulumi.getter(name="intentPickedUp")
    def intent_picked_up(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "intent_picked_up")

    @intent_picked_up.setter
    def intent_picked_up(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "intent_picked_up", value)

    @property
    @pulumi.getter(name="messageLists")
    def message_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "message_lists")

    @message_lists.setter
    def message_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "message_lists", value)

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "percent_complete")

    @percent_complete.setter
    def percent_complete(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percent_complete", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class FoundationCentralImageClusterCommonNetworkSettingsArgsDict(TypedDict):
        cvm_dns_servers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of dns servers for the cvms in the cluster.
        """
        cvm_ntp_servers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of ntp servers for the cvms in the cluster.
        """
        hypervisor_dns_servers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of dns servers for the hypervisors in the cluster.
        """
        hypervisor_ntp_servers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of ntp servers for the hypervisors in the cluster.
        """
elif False:
    FoundationCentralImageClusterCommonNetworkSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationCentralImageClusterCommonNetworkSettingsArgs:
    def __init__(__self__, *,
                 cvm_dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cvm_ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 hypervisor_dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 hypervisor_ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cvm_dns_servers: List of dns servers for the cvms in the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cvm_ntp_servers: List of ntp servers for the cvms in the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hypervisor_dns_servers: List of dns servers for the hypervisors in the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hypervisor_ntp_servers: List of ntp servers for the hypervisors in the cluster.
        """
        if cvm_dns_servers is not None:
            pulumi.set(__self__, "cvm_dns_servers", cvm_dns_servers)
        if cvm_ntp_servers is not None:
            pulumi.set(__self__, "cvm_ntp_servers", cvm_ntp_servers)
        if hypervisor_dns_servers is not None:
            pulumi.set(__self__, "hypervisor_dns_servers", hypervisor_dns_servers)
        if hypervisor_ntp_servers is not None:
            pulumi.set(__self__, "hypervisor_ntp_servers", hypervisor_ntp_servers)

    @property
    @pulumi.getter(name="cvmDnsServers")
    def cvm_dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of dns servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_dns_servers")

    @cvm_dns_servers.setter
    def cvm_dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cvm_dns_servers", value)

    @property
    @pulumi.getter(name="cvmNtpServers")
    def cvm_ntp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of ntp servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_ntp_servers")

    @cvm_ntp_servers.setter
    def cvm_ntp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cvm_ntp_servers", value)

    @property
    @pulumi.getter(name="hypervisorDnsServers")
    def hypervisor_dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of dns servers for the hypervisors in the cluster.
        """
        return pulumi.get(self, "hypervisor_dns_servers")

    @hypervisor_dns_servers.setter
    def hypervisor_dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hypervisor_dns_servers", value)

    @property
    @pulumi.getter(name="hypervisorNtpServers")
    def hypervisor_ntp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of ntp servers for the hypervisors in the cluster.
        """
        return pulumi.get(self, "hypervisor_ntp_servers")

    @hypervisor_ntp_servers.setter
    def hypervisor_ntp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hypervisor_ntp_servers", value)


if not MYPY:
    class FoundationCentralImageClusterFoundationInitConfigArgsDict(TypedDict):
        blocks: NotRequired[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterFoundationInitConfigBlockArgsDict']]]]
        clusters: NotRequired[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterFoundationInitConfigClusterArgsDict']]]]
        cvm_gateway: NotRequired[pulumi.Input[str]]
        """
        Gateway of the cvm.
        """
        cvm_netmask: NotRequired[pulumi.Input[str]]
        """
        Netmask of the cvm.
        """
        dns_servers: NotRequired[pulumi.Input[str]]
        hyperv_product_key: NotRequired[pulumi.Input[str]]
        """
        Product key for hyperv isos. Required only if the hypervisor type is hyperv and product key is mandatory (ex: for volume license).
        """
        hyperv_sku: NotRequired[pulumi.Input[str]]
        """
        SKU of hyperv to be installed if hypervisor_type is hyperv.
        """
        hypervisor_gateway: NotRequired[pulumi.Input[str]]
        """
        Gateway of the hypervisor.
        """
        hypervisor_iso_url: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        hypervisor_isos: NotRequired[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterFoundationInitConfigHypervisorIsoArgsDict']]]]
        hypervisor_netmask: NotRequired[pulumi.Input[str]]
        """
        Netmask of the hypervisor.
        """
        ipmi_gateway: NotRequired[pulumi.Input[str]]
        """
        Gateway of the ipmi.
        """
        ipmi_netmask: NotRequired[pulumi.Input[str]]
        """
        Netmask of the ipmi.
        """
        nos_package_urls: NotRequired[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterFoundationInitConfigNosPackageUrlArgsDict']]]]
elif False:
    FoundationCentralImageClusterFoundationInitConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationCentralImageClusterFoundationInitConfigArgs:
    def __init__(__self__, *,
                 blocks: Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterFoundationInitConfigBlockArgs']]]] = None,
                 clusters: Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterFoundationInitConfigClusterArgs']]]] = None,
                 cvm_gateway: Optional[pulumi.Input[str]] = None,
                 cvm_netmask: Optional[pulumi.Input[str]] = None,
                 dns_servers: Optional[pulumi.Input[str]] = None,
                 hyperv_product_key: Optional[pulumi.Input[str]] = None,
                 hyperv_sku: Optional[pulumi.Input[str]] = None,
                 hypervisor_gateway: Optional[pulumi.Input[str]] = None,
                 hypervisor_iso_url: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 hypervisor_isos: Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterFoundationInitConfigHypervisorIsoArgs']]]] = None,
                 hypervisor_netmask: Optional[pulumi.Input[str]] = None,
                 ipmi_gateway: Optional[pulumi.Input[str]] = None,
                 ipmi_netmask: Optional[pulumi.Input[str]] = None,
                 nos_package_urls: Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterFoundationInitConfigNosPackageUrlArgs']]]] = None):
        """
        :param pulumi.Input[str] cvm_gateway: Gateway of the cvm.
        :param pulumi.Input[str] cvm_netmask: Netmask of the cvm.
        :param pulumi.Input[str] hyperv_product_key: Product key for hyperv isos. Required only if the hypervisor type is hyperv and product key is mandatory (ex: for volume license).
        :param pulumi.Input[str] hyperv_sku: SKU of hyperv to be installed if hypervisor_type is hyperv.
        :param pulumi.Input[str] hypervisor_gateway: Gateway of the hypervisor.
        :param pulumi.Input[str] hypervisor_netmask: Netmask of the hypervisor.
        :param pulumi.Input[str] ipmi_gateway: Gateway of the ipmi.
        :param pulumi.Input[str] ipmi_netmask: Netmask of the ipmi.
        """
        if blocks is not None:
            pulumi.set(__self__, "blocks", blocks)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if cvm_gateway is not None:
            pulumi.set(__self__, "cvm_gateway", cvm_gateway)
        if cvm_netmask is not None:
            pulumi.set(__self__, "cvm_netmask", cvm_netmask)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if hyperv_product_key is not None:
            pulumi.set(__self__, "hyperv_product_key", hyperv_product_key)
        if hyperv_sku is not None:
            pulumi.set(__self__, "hyperv_sku", hyperv_sku)
        if hypervisor_gateway is not None:
            pulumi.set(__self__, "hypervisor_gateway", hypervisor_gateway)
        if hypervisor_iso_url is not None:
            pulumi.set(__self__, "hypervisor_iso_url", hypervisor_iso_url)
        if hypervisor_isos is not None:
            pulumi.set(__self__, "hypervisor_isos", hypervisor_isos)
        if hypervisor_netmask is not None:
            pulumi.set(__self__, "hypervisor_netmask", hypervisor_netmask)
        if ipmi_gateway is not None:
            pulumi.set(__self__, "ipmi_gateway", ipmi_gateway)
        if ipmi_netmask is not None:
            pulumi.set(__self__, "ipmi_netmask", ipmi_netmask)
        if nos_package_urls is not None:
            pulumi.set(__self__, "nos_package_urls", nos_package_urls)

    @property
    @pulumi.getter
    def blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterFoundationInitConfigBlockArgs']]]]:
        return pulumi.get(self, "blocks")

    @blocks.setter
    def blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterFoundationInitConfigBlockArgs']]]]):
        pulumi.set(self, "blocks", value)

    @property
    @pulumi.getter
    def clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterFoundationInitConfigClusterArgs']]]]:
        return pulumi.get(self, "clusters")

    @clusters.setter
    def clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterFoundationInitConfigClusterArgs']]]]):
        pulumi.set(self, "clusters", value)

    @property
    @pulumi.getter(name="cvmGateway")
    def cvm_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway of the cvm.
        """
        return pulumi.get(self, "cvm_gateway")

    @cvm_gateway.setter
    def cvm_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cvm_gateway", value)

    @property
    @pulumi.getter(name="cvmNetmask")
    def cvm_netmask(self) -> Optional[pulumi.Input[str]]:
        """
        Netmask of the cvm.
        """
        return pulumi.get(self, "cvm_netmask")

    @cvm_netmask.setter
    def cvm_netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cvm_netmask", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="hypervProductKey")
    def hyperv_product_key(self) -> Optional[pulumi.Input[str]]:
        """
        Product key for hyperv isos. Required only if the hypervisor type is hyperv and product key is mandatory (ex: for volume license).
        """
        return pulumi.get(self, "hyperv_product_key")

    @hyperv_product_key.setter
    def hyperv_product_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hyperv_product_key", value)

    @property
    @pulumi.getter(name="hypervSku")
    def hyperv_sku(self) -> Optional[pulumi.Input[str]]:
        """
        SKU of hyperv to be installed if hypervisor_type is hyperv.
        """
        return pulumi.get(self, "hyperv_sku")

    @hyperv_sku.setter
    def hyperv_sku(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hyperv_sku", value)

    @property
    @pulumi.getter(name="hypervisorGateway")
    def hypervisor_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway of the hypervisor.
        """
        return pulumi.get(self, "hypervisor_gateway")

    @hypervisor_gateway.setter
    def hypervisor_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hypervisor_gateway", value)

    @property
    @pulumi.getter(name="hypervisorIsoUrl")
    def hypervisor_iso_url(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "hypervisor_iso_url")

    @hypervisor_iso_url.setter
    def hypervisor_iso_url(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "hypervisor_iso_url", value)

    @property
    @pulumi.getter(name="hypervisorIsos")
    def hypervisor_isos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterFoundationInitConfigHypervisorIsoArgs']]]]:
        return pulumi.get(self, "hypervisor_isos")

    @hypervisor_isos.setter
    def hypervisor_isos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterFoundationInitConfigHypervisorIsoArgs']]]]):
        pulumi.set(self, "hypervisor_isos", value)

    @property
    @pulumi.getter(name="hypervisorNetmask")
    def hypervisor_netmask(self) -> Optional[pulumi.Input[str]]:
        """
        Netmask of the hypervisor.
        """
        return pulumi.get(self, "hypervisor_netmask")

    @hypervisor_netmask.setter
    def hypervisor_netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hypervisor_netmask", value)

    @property
    @pulumi.getter(name="ipmiGateway")
    def ipmi_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway of the ipmi.
        """
        return pulumi.get(self, "ipmi_gateway")

    @ipmi_gateway.setter
    def ipmi_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipmi_gateway", value)

    @property
    @pulumi.getter(name="ipmiNetmask")
    def ipmi_netmask(self) -> Optional[pulumi.Input[str]]:
        """
        Netmask of the ipmi.
        """
        return pulumi.get(self, "ipmi_netmask")

    @ipmi_netmask.setter
    def ipmi_netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipmi_netmask", value)

    @property
    @pulumi.getter(name="nosPackageUrls")
    def nos_package_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterFoundationInitConfigNosPackageUrlArgs']]]]:
        return pulumi.get(self, "nos_package_urls")

    @nos_package_urls.setter
    def nos_package_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterFoundationInitConfigNosPackageUrlArgs']]]]):
        pulumi.set(self, "nos_package_urls", value)


if not MYPY:
    class FoundationCentralImageClusterFoundationInitConfigBlockArgsDict(TypedDict):
        block_id: NotRequired[pulumi.Input[str]]
        nodes: NotRequired[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterFoundationInitConfigBlockNodeArgsDict']]]]
elif False:
    FoundationCentralImageClusterFoundationInitConfigBlockArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationCentralImageClusterFoundationInitConfigBlockArgs:
    def __init__(__self__, *,
                 block_id: Optional[pulumi.Input[str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterFoundationInitConfigBlockNodeArgs']]]] = None):
        if block_id is not None:
            pulumi.set(__self__, "block_id", block_id)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="blockId")
    def block_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_id")

    @block_id.setter
    def block_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_id", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterFoundationInitConfigBlockNodeArgs']]]]:
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FoundationCentralImageClusterFoundationInitConfigBlockNodeArgs']]]]):
        pulumi.set(self, "nodes", value)


if not MYPY:
    class FoundationCentralImageClusterFoundationInitConfigBlockNodeArgsDict(TypedDict):
        cvm_ip: NotRequired[pulumi.Input[str]]
        """
        IP address to be set for the cvm on the node.
        """
        cvm_vlan_id: NotRequired[pulumi.Input[int]]
        """
        Vlan tag of the cvm, if the cvm is on a vlan.
        """
        fc_imaged_node_uuid: NotRequired[pulumi.Input[str]]
        hardware_attributes_override: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Hardware attributes override json for the node.
        """
        hypervisor: NotRequired[pulumi.Input[str]]
        hypervisor_hostname: NotRequired[pulumi.Input[str]]
        """
        Name to be set for the hypervisor host.
        """
        hypervisor_ip: NotRequired[pulumi.Input[str]]
        """
        IP address to be set for the hypervisor on the node.
        """
        image_now: NotRequired[pulumi.Input[bool]]
        """
        True, if the node should be imaged, False, otherwise.
        """
        ipmi_ip: NotRequired[pulumi.Input[str]]
        """
        IP address to be set for the ipmi of the node.
        """
        ipv6_address: NotRequired[pulumi.Input[str]]
        node_position: NotRequired[pulumi.Input[str]]
        node_serial: NotRequired[pulumi.Input[str]]
elif False:
    FoundationCentralImageClusterFoundationInitConfigBlockNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationCentralImageClusterFoundationInitConfigBlockNodeArgs:
    def __init__(__self__, *,
                 cvm_ip: Optional[pulumi.Input[str]] = None,
                 cvm_vlan_id: Optional[pulumi.Input[int]] = None,
                 fc_imaged_node_uuid: Optional[pulumi.Input[str]] = None,
                 hardware_attributes_override: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 hypervisor: Optional[pulumi.Input[str]] = None,
                 hypervisor_hostname: Optional[pulumi.Input[str]] = None,
                 hypervisor_ip: Optional[pulumi.Input[str]] = None,
                 image_now: Optional[pulumi.Input[bool]] = None,
                 ipmi_ip: Optional[pulumi.Input[str]] = None,
                 ipv6_address: Optional[pulumi.Input[str]] = None,
                 node_position: Optional[pulumi.Input[str]] = None,
                 node_serial: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cvm_ip: IP address to be set for the cvm on the node.
        :param pulumi.Input[int] cvm_vlan_id: Vlan tag of the cvm, if the cvm is on a vlan.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] hardware_attributes_override: Hardware attributes override json for the node.
        :param pulumi.Input[str] hypervisor_hostname: Name to be set for the hypervisor host.
        :param pulumi.Input[str] hypervisor_ip: IP address to be set for the hypervisor on the node.
        :param pulumi.Input[bool] image_now: True, if the node should be imaged, False, otherwise.
        :param pulumi.Input[str] ipmi_ip: IP address to be set for the ipmi of the node.
        """
        if cvm_ip is not None:
            pulumi.set(__self__, "cvm_ip", cvm_ip)
        if cvm_vlan_id is not None:
            pulumi.set(__self__, "cvm_vlan_id", cvm_vlan_id)
        if fc_imaged_node_uuid is not None:
            pulumi.set(__self__, "fc_imaged_node_uuid", fc_imaged_node_uuid)
        if hardware_attributes_override is not None:
            pulumi.set(__self__, "hardware_attributes_override", hardware_attributes_override)
        if hypervisor is not None:
            pulumi.set(__self__, "hypervisor", hypervisor)
        if hypervisor_hostname is not None:
            pulumi.set(__self__, "hypervisor_hostname", hypervisor_hostname)
        if hypervisor_ip is not None:
            pulumi.set(__self__, "hypervisor_ip", hypervisor_ip)
        if image_now is not None:
            pulumi.set(__self__, "image_now", image_now)
        if ipmi_ip is not None:
            pulumi.set(__self__, "ipmi_ip", ipmi_ip)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if node_position is not None:
            pulumi.set(__self__, "node_position", node_position)
        if node_serial is not None:
            pulumi.set(__self__, "node_serial", node_serial)

    @property
    @pulumi.getter(name="cvmIp")
    def cvm_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address to be set for the cvm on the node.
        """
        return pulumi.get(self, "cvm_ip")

    @cvm_ip.setter
    def cvm_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cvm_ip", value)

    @property
    @pulumi.getter(name="cvmVlanId")
    def cvm_vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        Vlan tag of the cvm, if the cvm is on a vlan.
        """
        return pulumi.get(self, "cvm_vlan_id")

    @cvm_vlan_id.setter
    def cvm_vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cvm_vlan_id", value)

    @property
    @pulumi.getter(name="fcImagedNodeUuid")
    def fc_imaged_node_uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fc_imaged_node_uuid")

    @fc_imaged_node_uuid.setter
    def fc_imaged_node_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fc_imaged_node_uuid", value)

    @property
    @pulumi.getter(name="hardwareAttributesOverride")
    def hardware_attributes_override(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Hardware attributes override json for the node.
        """
        return pulumi.get(self, "hardware_attributes_override")

    @hardware_attributes_override.setter
    def hardware_attributes_override(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "hardware_attributes_override", value)

    @property
    @pulumi.getter
    def hypervisor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hypervisor")

    @hypervisor.setter
    def hypervisor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hypervisor", value)

    @property
    @pulumi.getter(name="hypervisorHostname")
    def hypervisor_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Name to be set for the hypervisor host.
        """
        return pulumi.get(self, "hypervisor_hostname")

    @hypervisor_hostname.setter
    def hypervisor_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hypervisor_hostname", value)

    @property
    @pulumi.getter(name="hypervisorIp")
    def hypervisor_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address to be set for the hypervisor on the node.
        """
        return pulumi.get(self, "hypervisor_ip")

    @hypervisor_ip.setter
    def hypervisor_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hypervisor_ip", value)

    @property
    @pulumi.getter(name="imageNow")
    def image_now(self) -> Optional[pulumi.Input[bool]]:
        """
        True, if the node should be imaged, False, otherwise.
        """
        return pulumi.get(self, "image_now")

    @image_now.setter
    def image_now(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "image_now", value)

    @property
    @pulumi.getter(name="ipmiIp")
    def ipmi_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address to be set for the ipmi of the node.
        """
        return pulumi.get(self, "ipmi_ip")

    @ipmi_ip.setter
    def ipmi_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipmi_ip", value)

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_address")

    @ipv6_address.setter
    def ipv6_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_address", value)

    @property
    @pulumi.getter(name="nodePosition")
    def node_position(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_position")

    @node_position.setter
    def node_position(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_position", value)

    @property
    @pulumi.getter(name="nodeSerial")
    def node_serial(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_serial")

    @node_serial.setter
    def node_serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_serial", value)


if not MYPY:
    class FoundationCentralImageClusterFoundationInitConfigClusterArgsDict(TypedDict):
        cluster_external_ip: NotRequired[pulumi.Input[str]]
        """
        External management ip of the cluster.
        """
        cluster_init_now: NotRequired[pulumi.Input[bool]]
        cluster_init_successful: NotRequired[pulumi.Input[bool]]
        cluster_members: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        cluster_name: NotRequired[pulumi.Input[str]]
        """
        Name of the cluster.
        """
        cvm_dns_servers: NotRequired[pulumi.Input[str]]
        """
        List of dns servers for the cvms in the cluster.
        """
        cvm_ntp_servers: NotRequired[pulumi.Input[str]]
        """
        List of ntp servers for the cvms in the cluster.
        """
        redundancy_factor: NotRequired[pulumi.Input[int]]
        """
        Redundancy factor of the cluster.
        """
        timezone: NotRequired[pulumi.Input[str]]
        """
        Timezone to be set on the cluster.
        """
elif False:
    FoundationCentralImageClusterFoundationInitConfigClusterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationCentralImageClusterFoundationInitConfigClusterArgs:
    def __init__(__self__, *,
                 cluster_external_ip: Optional[pulumi.Input[str]] = None,
                 cluster_init_now: Optional[pulumi.Input[bool]] = None,
                 cluster_init_successful: Optional[pulumi.Input[bool]] = None,
                 cluster_members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cvm_dns_servers: Optional[pulumi.Input[str]] = None,
                 cvm_ntp_servers: Optional[pulumi.Input[str]] = None,
                 redundancy_factor: Optional[pulumi.Input[int]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cluster_external_ip: External management ip of the cluster.
        :param pulumi.Input[str] cluster_name: Name of the cluster.
        :param pulumi.Input[str] cvm_dns_servers: List of dns servers for the cvms in the cluster.
        :param pulumi.Input[str] cvm_ntp_servers: List of ntp servers for the cvms in the cluster.
        :param pulumi.Input[int] redundancy_factor: Redundancy factor of the cluster.
        :param pulumi.Input[str] timezone: Timezone to be set on the cluster.
        """
        if cluster_external_ip is not None:
            pulumi.set(__self__, "cluster_external_ip", cluster_external_ip)
        if cluster_init_now is not None:
            pulumi.set(__self__, "cluster_init_now", cluster_init_now)
        if cluster_init_successful is not None:
            pulumi.set(__self__, "cluster_init_successful", cluster_init_successful)
        if cluster_members is not None:
            pulumi.set(__self__, "cluster_members", cluster_members)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cvm_dns_servers is not None:
            pulumi.set(__self__, "cvm_dns_servers", cvm_dns_servers)
        if cvm_ntp_servers is not None:
            pulumi.set(__self__, "cvm_ntp_servers", cvm_ntp_servers)
        if redundancy_factor is not None:
            pulumi.set(__self__, "redundancy_factor", redundancy_factor)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="clusterExternalIp")
    def cluster_external_ip(self) -> Optional[pulumi.Input[str]]:
        """
        External management ip of the cluster.
        """
        return pulumi.get(self, "cluster_external_ip")

    @cluster_external_ip.setter
    def cluster_external_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_external_ip", value)

    @property
    @pulumi.getter(name="clusterInitNow")
    def cluster_init_now(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cluster_init_now")

    @cluster_init_now.setter
    def cluster_init_now(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cluster_init_now", value)

    @property
    @pulumi.getter(name="clusterInitSuccessful")
    def cluster_init_successful(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cluster_init_successful")

    @cluster_init_successful.setter
    def cluster_init_successful(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cluster_init_successful", value)

    @property
    @pulumi.getter(name="clusterMembers")
    def cluster_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cluster_members")

    @cluster_members.setter
    def cluster_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cluster_members", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cluster.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="cvmDnsServers")
    def cvm_dns_servers(self) -> Optional[pulumi.Input[str]]:
        """
        List of dns servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_dns_servers")

    @cvm_dns_servers.setter
    def cvm_dns_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cvm_dns_servers", value)

    @property
    @pulumi.getter(name="cvmNtpServers")
    def cvm_ntp_servers(self) -> Optional[pulumi.Input[str]]:
        """
        List of ntp servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_ntp_servers")

    @cvm_ntp_servers.setter
    def cvm_ntp_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cvm_ntp_servers", value)

    @property
    @pulumi.getter(name="redundancyFactor")
    def redundancy_factor(self) -> Optional[pulumi.Input[int]]:
        """
        Redundancy factor of the cluster.
        """
        return pulumi.get(self, "redundancy_factor")

    @redundancy_factor.setter
    def redundancy_factor(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "redundancy_factor", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        Timezone to be set on the cluster.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


if not MYPY:
    class FoundationCentralImageClusterFoundationInitConfigHypervisorIsoArgsDict(TypedDict):
        hypervisor_type: NotRequired[pulumi.Input[str]]
        """
        Type of hypervisor to be installed. Must be one of {kvm, esx, hyperv}.
        """
        sha256sum: NotRequired[pulumi.Input[str]]
        """
        sha256sum of the hypervisor iso.
        """
        url: NotRequired[pulumi.Input[str]]
        """
        URL to download hypervisor iso. Required only if imaging is needed.
        """
elif False:
    FoundationCentralImageClusterFoundationInitConfigHypervisorIsoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationCentralImageClusterFoundationInitConfigHypervisorIsoArgs:
    def __init__(__self__, *,
                 hypervisor_type: Optional[pulumi.Input[str]] = None,
                 sha256sum: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] hypervisor_type: Type of hypervisor to be installed. Must be one of {kvm, esx, hyperv}.
        :param pulumi.Input[str] sha256sum: sha256sum of the hypervisor iso.
        :param pulumi.Input[str] url: URL to download hypervisor iso. Required only if imaging is needed.
        """
        if hypervisor_type is not None:
            pulumi.set(__self__, "hypervisor_type", hypervisor_type)
        if sha256sum is not None:
            pulumi.set(__self__, "sha256sum", sha256sum)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="hypervisorType")
    def hypervisor_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of hypervisor to be installed. Must be one of {kvm, esx, hyperv}.
        """
        return pulumi.get(self, "hypervisor_type")

    @hypervisor_type.setter
    def hypervisor_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hypervisor_type", value)

    @property
    @pulumi.getter
    def sha256sum(self) -> Optional[pulumi.Input[str]]:
        """
        sha256sum of the hypervisor iso.
        """
        return pulumi.get(self, "sha256sum")

    @sha256sum.setter
    def sha256sum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sha256sum", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to download hypervisor iso. Required only if imaging is needed.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class FoundationCentralImageClusterFoundationInitConfigNosPackageUrlArgsDict(TypedDict):
        sha256sum: NotRequired[pulumi.Input[str]]
        """
        sha256sum of the hypervisor iso.
        """
        url: NotRequired[pulumi.Input[str]]
        """
        URL to download hypervisor iso. Required only if imaging is needed.
        """
elif False:
    FoundationCentralImageClusterFoundationInitConfigNosPackageUrlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationCentralImageClusterFoundationInitConfigNosPackageUrlArgs:
    def __init__(__self__, *,
                 sha256sum: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] sha256sum: sha256sum of the hypervisor iso.
        :param pulumi.Input[str] url: URL to download hypervisor iso. Required only if imaging is needed.
        """
        if sha256sum is not None:
            pulumi.set(__self__, "sha256sum", sha256sum)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def sha256sum(self) -> Optional[pulumi.Input[str]]:
        """
        sha256sum of the hypervisor iso.
        """
        return pulumi.get(self, "sha256sum")

    @sha256sum.setter
    def sha256sum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sha256sum", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to download hypervisor iso. Required only if imaging is needed.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class FoundationCentralImageClusterHypervisorIsoDetailsArgsDict(TypedDict):
        hyperv_product_key: NotRequired[pulumi.Input[str]]
        """
        Product key for hyperv isos. Required only if the hypervisor type is hyperv and product key is mandatory (ex: for volume license).
        """
        hyperv_sku: NotRequired[pulumi.Input[str]]
        """
        SKU of hyperv to be installed if hypervisor_type is hyperv.
        """
        sha256sum: NotRequired[pulumi.Input[str]]
        """
        sha256sum of the hypervisor iso.
        """
        url: NotRequired[pulumi.Input[str]]
        """
        URL to download hypervisor iso. Required only if imaging is needed.
        """
elif False:
    FoundationCentralImageClusterHypervisorIsoDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationCentralImageClusterHypervisorIsoDetailsArgs:
    def __init__(__self__, *,
                 hyperv_product_key: Optional[pulumi.Input[str]] = None,
                 hyperv_sku: Optional[pulumi.Input[str]] = None,
                 sha256sum: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] hyperv_product_key: Product key for hyperv isos. Required only if the hypervisor type is hyperv and product key is mandatory (ex: for volume license).
        :param pulumi.Input[str] hyperv_sku: SKU of hyperv to be installed if hypervisor_type is hyperv.
        :param pulumi.Input[str] sha256sum: sha256sum of the hypervisor iso.
        :param pulumi.Input[str] url: URL to download hypervisor iso. Required only if imaging is needed.
        """
        if hyperv_product_key is not None:
            pulumi.set(__self__, "hyperv_product_key", hyperv_product_key)
        if hyperv_sku is not None:
            pulumi.set(__self__, "hyperv_sku", hyperv_sku)
        if sha256sum is not None:
            pulumi.set(__self__, "sha256sum", sha256sum)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="hypervProductKey")
    def hyperv_product_key(self) -> Optional[pulumi.Input[str]]:
        """
        Product key for hyperv isos. Required only if the hypervisor type is hyperv and product key is mandatory (ex: for volume license).
        """
        return pulumi.get(self, "hyperv_product_key")

    @hyperv_product_key.setter
    def hyperv_product_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hyperv_product_key", value)

    @property
    @pulumi.getter(name="hypervSku")
    def hyperv_sku(self) -> Optional[pulumi.Input[str]]:
        """
        SKU of hyperv to be installed if hypervisor_type is hyperv.
        """
        return pulumi.get(self, "hyperv_sku")

    @hyperv_sku.setter
    def hyperv_sku(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hyperv_sku", value)

    @property
    @pulumi.getter
    def sha256sum(self) -> Optional[pulumi.Input[str]]:
        """
        sha256sum of the hypervisor iso.
        """
        return pulumi.get(self, "sha256sum")

    @sha256sum.setter
    def sha256sum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sha256sum", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to download hypervisor iso. Required only if imaging is needed.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class FoundationCentralImageClusterNodeListArgsDict(TypedDict):
        cvm_gateway: NotRequired[pulumi.Input[str]]
        """
        Gateway of the cvm.
        """
        cvm_ip: NotRequired[pulumi.Input[str]]
        """
        IP address to be set for the cvm on the node.
        """
        cvm_netmask: NotRequired[pulumi.Input[str]]
        """
        Netmask of the cvm.
        """
        cvm_ram_gb: NotRequired[pulumi.Input[int]]
        """
        Amount of memory to be assigned for the cvm.
        """
        cvm_vlan_id: NotRequired[pulumi.Input[int]]
        """
        Vlan tag of the cvm, if the cvm is on a vlan.
        """
        hardware_attributes_override: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Hardware attributes override json for the node.
        """
        hypervisor_gateway: NotRequired[pulumi.Input[str]]
        """
        Gateway of the hypervisor.
        """
        hypervisor_hostname: NotRequired[pulumi.Input[str]]
        """
        Name to be set for the hypervisor host.
        """
        hypervisor_ip: NotRequired[pulumi.Input[str]]
        """
        IP address to be set for the hypervisor on the node.
        """
        hypervisor_netmask: NotRequired[pulumi.Input[str]]
        """
        Netmask of the hypervisor.
        """
        hypervisor_type: NotRequired[pulumi.Input[str]]
        """
        Type of hypervisor to be installed. Must be one of {kvm, esx, hyperv}.
        """
        image_now: NotRequired[pulumi.Input[bool]]
        """
        True, if the node should be imaged, False, otherwise.
        """
        imaged_node_uuid: NotRequired[pulumi.Input[str]]
        """
        UUID of the node.
        """
        ipmi_gateway: NotRequired[pulumi.Input[str]]
        """
        Gateway of the ipmi.
        """
        ipmi_ip: NotRequired[pulumi.Input[str]]
        """
        IP address to be set for the ipmi of the node.
        """
        ipmi_netmask: NotRequired[pulumi.Input[str]]
        """
        Netmask of the ipmi.
        """
        rdma_passthrough: NotRequired[pulumi.Input[bool]]
        """
        Passthrough RDMA nic to CVM if possible, default to false.
        """
        use_existing_network_settings: NotRequired[pulumi.Input[bool]]
        """
        Decides whether to use the existing network settings for the node. If True, the existing network settings of the node will be used during cluster creation. If False, then client must provide new network settings. If all nodes are booted in phoenix, this field is, by default, considered to be False.
        """
elif False:
    FoundationCentralImageClusterNodeListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationCentralImageClusterNodeListArgs:
    def __init__(__self__, *,
                 cvm_gateway: Optional[pulumi.Input[str]] = None,
                 cvm_ip: Optional[pulumi.Input[str]] = None,
                 cvm_netmask: Optional[pulumi.Input[str]] = None,
                 cvm_ram_gb: Optional[pulumi.Input[int]] = None,
                 cvm_vlan_id: Optional[pulumi.Input[int]] = None,
                 hardware_attributes_override: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 hypervisor_gateway: Optional[pulumi.Input[str]] = None,
                 hypervisor_hostname: Optional[pulumi.Input[str]] = None,
                 hypervisor_ip: Optional[pulumi.Input[str]] = None,
                 hypervisor_netmask: Optional[pulumi.Input[str]] = None,
                 hypervisor_type: Optional[pulumi.Input[str]] = None,
                 image_now: Optional[pulumi.Input[bool]] = None,
                 imaged_node_uuid: Optional[pulumi.Input[str]] = None,
                 ipmi_gateway: Optional[pulumi.Input[str]] = None,
                 ipmi_ip: Optional[pulumi.Input[str]] = None,
                 ipmi_netmask: Optional[pulumi.Input[str]] = None,
                 rdma_passthrough: Optional[pulumi.Input[bool]] = None,
                 use_existing_network_settings: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] cvm_gateway: Gateway of the cvm.
        :param pulumi.Input[str] cvm_ip: IP address to be set for the cvm on the node.
        :param pulumi.Input[str] cvm_netmask: Netmask of the cvm.
        :param pulumi.Input[int] cvm_ram_gb: Amount of memory to be assigned for the cvm.
        :param pulumi.Input[int] cvm_vlan_id: Vlan tag of the cvm, if the cvm is on a vlan.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] hardware_attributes_override: Hardware attributes override json for the node.
        :param pulumi.Input[str] hypervisor_gateway: Gateway of the hypervisor.
        :param pulumi.Input[str] hypervisor_hostname: Name to be set for the hypervisor host.
        :param pulumi.Input[str] hypervisor_ip: IP address to be set for the hypervisor on the node.
        :param pulumi.Input[str] hypervisor_netmask: Netmask of the hypervisor.
        :param pulumi.Input[str] hypervisor_type: Type of hypervisor to be installed. Must be one of {kvm, esx, hyperv}.
        :param pulumi.Input[bool] image_now: True, if the node should be imaged, False, otherwise.
        :param pulumi.Input[str] imaged_node_uuid: UUID of the node.
        :param pulumi.Input[str] ipmi_gateway: Gateway of the ipmi.
        :param pulumi.Input[str] ipmi_ip: IP address to be set for the ipmi of the node.
        :param pulumi.Input[str] ipmi_netmask: Netmask of the ipmi.
        :param pulumi.Input[bool] rdma_passthrough: Passthrough RDMA nic to CVM if possible, default to false.
        :param pulumi.Input[bool] use_existing_network_settings: Decides whether to use the existing network settings for the node. If True, the existing network settings of the node will be used during cluster creation. If False, then client must provide new network settings. If all nodes are booted in phoenix, this field is, by default, considered to be False.
        """
        if cvm_gateway is not None:
            pulumi.set(__self__, "cvm_gateway", cvm_gateway)
        if cvm_ip is not None:
            pulumi.set(__self__, "cvm_ip", cvm_ip)
        if cvm_netmask is not None:
            pulumi.set(__self__, "cvm_netmask", cvm_netmask)
        if cvm_ram_gb is not None:
            pulumi.set(__self__, "cvm_ram_gb", cvm_ram_gb)
        if cvm_vlan_id is not None:
            pulumi.set(__self__, "cvm_vlan_id", cvm_vlan_id)
        if hardware_attributes_override is not None:
            pulumi.set(__self__, "hardware_attributes_override", hardware_attributes_override)
        if hypervisor_gateway is not None:
            pulumi.set(__self__, "hypervisor_gateway", hypervisor_gateway)
        if hypervisor_hostname is not None:
            pulumi.set(__self__, "hypervisor_hostname", hypervisor_hostname)
        if hypervisor_ip is not None:
            pulumi.set(__self__, "hypervisor_ip", hypervisor_ip)
        if hypervisor_netmask is not None:
            pulumi.set(__self__, "hypervisor_netmask", hypervisor_netmask)
        if hypervisor_type is not None:
            pulumi.set(__self__, "hypervisor_type", hypervisor_type)
        if image_now is not None:
            pulumi.set(__self__, "image_now", image_now)
        if imaged_node_uuid is not None:
            pulumi.set(__self__, "imaged_node_uuid", imaged_node_uuid)
        if ipmi_gateway is not None:
            pulumi.set(__self__, "ipmi_gateway", ipmi_gateway)
        if ipmi_ip is not None:
            pulumi.set(__self__, "ipmi_ip", ipmi_ip)
        if ipmi_netmask is not None:
            pulumi.set(__self__, "ipmi_netmask", ipmi_netmask)
        if rdma_passthrough is not None:
            pulumi.set(__self__, "rdma_passthrough", rdma_passthrough)
        if use_existing_network_settings is not None:
            pulumi.set(__self__, "use_existing_network_settings", use_existing_network_settings)

    @property
    @pulumi.getter(name="cvmGateway")
    def cvm_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway of the cvm.
        """
        return pulumi.get(self, "cvm_gateway")

    @cvm_gateway.setter
    def cvm_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cvm_gateway", value)

    @property
    @pulumi.getter(name="cvmIp")
    def cvm_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address to be set for the cvm on the node.
        """
        return pulumi.get(self, "cvm_ip")

    @cvm_ip.setter
    def cvm_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cvm_ip", value)

    @property
    @pulumi.getter(name="cvmNetmask")
    def cvm_netmask(self) -> Optional[pulumi.Input[str]]:
        """
        Netmask of the cvm.
        """
        return pulumi.get(self, "cvm_netmask")

    @cvm_netmask.setter
    def cvm_netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cvm_netmask", value)

    @property
    @pulumi.getter(name="cvmRamGb")
    def cvm_ram_gb(self) -> Optional[pulumi.Input[int]]:
        """
        Amount of memory to be assigned for the cvm.
        """
        return pulumi.get(self, "cvm_ram_gb")

    @cvm_ram_gb.setter
    def cvm_ram_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cvm_ram_gb", value)

    @property
    @pulumi.getter(name="cvmVlanId")
    def cvm_vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        Vlan tag of the cvm, if the cvm is on a vlan.
        """
        return pulumi.get(self, "cvm_vlan_id")

    @cvm_vlan_id.setter
    def cvm_vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cvm_vlan_id", value)

    @property
    @pulumi.getter(name="hardwareAttributesOverride")
    def hardware_attributes_override(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Hardware attributes override json for the node.
        """
        return pulumi.get(self, "hardware_attributes_override")

    @hardware_attributes_override.setter
    def hardware_attributes_override(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "hardware_attributes_override", value)

    @property
    @pulumi.getter(name="hypervisorGateway")
    def hypervisor_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway of the hypervisor.
        """
        return pulumi.get(self, "hypervisor_gateway")

    @hypervisor_gateway.setter
    def hypervisor_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hypervisor_gateway", value)

    @property
    @pulumi.getter(name="hypervisorHostname")
    def hypervisor_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Name to be set for the hypervisor host.
        """
        return pulumi.get(self, "hypervisor_hostname")

    @hypervisor_hostname.setter
    def hypervisor_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hypervisor_hostname", value)

    @property
    @pulumi.getter(name="hypervisorIp")
    def hypervisor_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address to be set for the hypervisor on the node.
        """
        return pulumi.get(self, "hypervisor_ip")

    @hypervisor_ip.setter
    def hypervisor_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hypervisor_ip", value)

    @property
    @pulumi.getter(name="hypervisorNetmask")
    def hypervisor_netmask(self) -> Optional[pulumi.Input[str]]:
        """
        Netmask of the hypervisor.
        """
        return pulumi.get(self, "hypervisor_netmask")

    @hypervisor_netmask.setter
    def hypervisor_netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hypervisor_netmask", value)

    @property
    @pulumi.getter(name="hypervisorType")
    def hypervisor_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of hypervisor to be installed. Must be one of {kvm, esx, hyperv}.
        """
        return pulumi.get(self, "hypervisor_type")

    @hypervisor_type.setter
    def hypervisor_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hypervisor_type", value)

    @property
    @pulumi.getter(name="imageNow")
    def image_now(self) -> Optional[pulumi.Input[bool]]:
        """
        True, if the node should be imaged, False, otherwise.
        """
        return pulumi.get(self, "image_now")

    @image_now.setter
    def image_now(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "image_now", value)

    @property
    @pulumi.getter(name="imagedNodeUuid")
    def imaged_node_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        UUID of the node.
        """
        return pulumi.get(self, "imaged_node_uuid")

    @imaged_node_uuid.setter
    def imaged_node_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imaged_node_uuid", value)

    @property
    @pulumi.getter(name="ipmiGateway")
    def ipmi_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway of the ipmi.
        """
        return pulumi.get(self, "ipmi_gateway")

    @ipmi_gateway.setter
    def ipmi_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipmi_gateway", value)

    @property
    @pulumi.getter(name="ipmiIp")
    def ipmi_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address to be set for the ipmi of the node.
        """
        return pulumi.get(self, "ipmi_ip")

    @ipmi_ip.setter
    def ipmi_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipmi_ip", value)

    @property
    @pulumi.getter(name="ipmiNetmask")
    def ipmi_netmask(self) -> Optional[pulumi.Input[str]]:
        """
        Netmask of the ipmi.
        """
        return pulumi.get(self, "ipmi_netmask")

    @ipmi_netmask.setter
    def ipmi_netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipmi_netmask", value)

    @property
    @pulumi.getter(name="rdmaPassthrough")
    def rdma_passthrough(self) -> Optional[pulumi.Input[bool]]:
        """
        Passthrough RDMA nic to CVM if possible, default to false.
        """
        return pulumi.get(self, "rdma_passthrough")

    @rdma_passthrough.setter
    def rdma_passthrough(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rdma_passthrough", value)

    @property
    @pulumi.getter(name="useExistingNetworkSettings")
    def use_existing_network_settings(self) -> Optional[pulumi.Input[bool]]:
        """
        Decides whether to use the existing network settings for the node. If True, the existing network settings of the node will be used during cluster creation. If False, then client must provide new network settings. If all nodes are booted in phoenix, this field is, by default, considered to be False.
        """
        return pulumi.get(self, "use_existing_network_settings")

    @use_existing_network_settings.setter
    def use_existing_network_settings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_existing_network_settings", value)


if not MYPY:
    class FoundationImageNodesBlockArgsDict(TypedDict):
        nodes: pulumi.Input[Sequence[pulumi.Input['FoundationImageNodesBlockNodeArgsDict']]]
        block_id: NotRequired[pulumi.Input[str]]
        """
        - Block ID.
        """
elif False:
    FoundationImageNodesBlockArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationImageNodesBlockArgs:
    def __init__(__self__, *,
                 nodes: pulumi.Input[Sequence[pulumi.Input['FoundationImageNodesBlockNodeArgs']]],
                 block_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] block_id: - Block ID.
        """
        pulumi.set(__self__, "nodes", nodes)
        if block_id is not None:
            pulumi.set(__self__, "block_id", block_id)

    @property
    @pulumi.getter
    def nodes(self) -> pulumi.Input[Sequence[pulumi.Input['FoundationImageNodesBlockNodeArgs']]]:
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: pulumi.Input[Sequence[pulumi.Input['FoundationImageNodesBlockNodeArgs']]]):
        pulumi.set(self, "nodes", value)

    @property
    @pulumi.getter(name="blockId")
    def block_id(self) -> Optional[pulumi.Input[str]]:
        """
        - Block ID.
        """
        return pulumi.get(self, "block_id")

    @block_id.setter
    def block_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_id", value)


if not MYPY:
    class FoundationImageNodesBlockNodeArgsDict(TypedDict):
        hypervisor_hostname: pulumi.Input[str]
        """
        - (Required) Hypervisor Hostname.
        """
        hypervisor_ip: pulumi.Input[str]
        """
        - (Required) Hypervisor IP address.
        """
        node_position: pulumi.Input[str]
        """
        - (Required) Position of the node in the block.
        """
        bond_lacp_rate: NotRequired[pulumi.Input[str]]
        """
        - (Required if node is lacp configured) slow or fast if lacp if being used at the switch
        """
        bond_mode: NotRequired[pulumi.Input[str]]
        """
        - (Required if node is capable) dynamic if using LACP, static for LAG
        """
        bond_uplinks: NotRequired[pulumi.Input[str]]
        """
        - MAC Addresses of NICs in a team/bond
        """
        cluster_id: NotRequired[pulumi.Input[str]]
        """
        - ID of cluster.
        """
        current_cvm_vlan_tag: NotRequired[pulumi.Input[int]]
        """
        - Current CVM vlan tag. 0 Value with remove vlan tag.
        """
        current_network_interface: NotRequired[pulumi.Input[str]]
        """
        - CVM current network interface.
        """
        cvm_gb_ram: NotRequired[pulumi.Input[int]]
        """
        - RAM capacity of CVM in GB.
        """
        cvm_ip: NotRequired[pulumi.Input[str]]
        cvm_num_vcpus: NotRequired[pulumi.Input[int]]
        """
        - Number of CVM vcpus.
        """
        device_hint: NotRequired[pulumi.Input[str]]
        """
        - use "vm_installer" to enable CVM imaging from standalone.
        """
        exlude_boot_serial: NotRequired[pulumi.Input[str]]
        """
        - serial of boot device to be excluded (used by NX G6 platforms)
        """
        hypervisor: NotRequired[pulumi.Input[str]]
        image_delay: NotRequired[pulumi.Input[int]]
        """
        - Imaging delay.
        """
        image_now: NotRequired[pulumi.Input[bool]]
        """
        - (Optional, Default = true) If the node should be imaged now.
        """
        image_successful: NotRequired[pulumi.Input[bool]]
        ipmi_configure_now: NotRequired[pulumi.Input[bool]]
        """
        - Whether IPMI should be configured.
        """
        ipmi_gateway: NotRequired[pulumi.Input[str]]
        """
        - (Required incase using IPMI based imaging either here or outside blocks) IPMI gateway for this node
        """
        ipmi_ip: NotRequired[pulumi.Input[str]]
        """
        - (Required) IPMI IP address.
        """
        ipmi_mac: NotRequired[pulumi.Input[str]]
        """
        - IPMI MAC address.
        """
        ipmi_netmask: NotRequired[pulumi.Input[str]]
        """
        - (Required incase using IPMI based imaging either here or outside blocks) IPMI netmask for this node
        """
        ipmi_password: NotRequired[pulumi.Input[str]]
        """
        - (Required incase using IPMI based imaging either here or outside blocks) IPMI username
        """
        ipmi_user: NotRequired[pulumi.Input[str]]
        """
        - (Required incase using IPMI based imaging either here or outside blocks) IPMI password
        """
        ipv6_address: NotRequired[pulumi.Input[str]]
        """
        - (Required when device_hint = "vm_installer" for imaging using node's existing cvm for imaging) IPV6 address.
        """
        ipv6_interface: NotRequired[pulumi.Input[str]]
        """
        - (Required when device_hint = "vm_installer" for imaging using node's existing cvm for imaging) ipv6 interface.
        """
        mitigate_low_boot_space: NotRequired[pulumi.Input[bool]]
        """
        - relocate bootbank files to make space for phoenix files.
        """
        node_serial: NotRequired[pulumi.Input[str]]
        """
        - serial number of the node.
        """
        rdma_mac_addr: NotRequired[pulumi.Input[str]]
        """
        - mac address of nic to be used for rdma
        """
        rdma_passthrough: NotRequired[pulumi.Input[bool]]
        """
        - (Required if node is capable) passthru RDMA nic to CVM if possible, default to false
        """
        ucsm_managed_mode: NotRequired[pulumi.Input[str]]
        """
        - UCSM Managed mode.
        """
        ucsm_node_serial: NotRequired[pulumi.Input[str]]
        """
        - UCSM node serial.
        """
        ucsm_params: NotRequired[pulumi.Input['FoundationImageNodesBlockNodeUcsmParamsArgsDict']]
        """
        - Object of UCSM parameters.
        * `ucsm_params.native_vlan` :- If the vlan is native.
        * `ucsm_params.keep_ucsm_settings` :- Whether UCSM settings should be kept.
        * `ucsm_params.mac_pool` :- Mac address pool.
        * `ucsm_params.vlan_name` :- Name of vlan.
        """
        vswitches: NotRequired[pulumi.Input[Sequence[pulumi.Input['FoundationImageNodesBlockNodeVswitchArgsDict']]]]
elif False:
    FoundationImageNodesBlockNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationImageNodesBlockNodeArgs:
    def __init__(__self__, *,
                 hypervisor_hostname: pulumi.Input[str],
                 hypervisor_ip: pulumi.Input[str],
                 node_position: pulumi.Input[str],
                 bond_lacp_rate: Optional[pulumi.Input[str]] = None,
                 bond_mode: Optional[pulumi.Input[str]] = None,
                 bond_uplinks: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 current_cvm_vlan_tag: Optional[pulumi.Input[int]] = None,
                 current_network_interface: Optional[pulumi.Input[str]] = None,
                 cvm_gb_ram: Optional[pulumi.Input[int]] = None,
                 cvm_ip: Optional[pulumi.Input[str]] = None,
                 cvm_num_vcpus: Optional[pulumi.Input[int]] = None,
                 device_hint: Optional[pulumi.Input[str]] = None,
                 exlude_boot_serial: Optional[pulumi.Input[str]] = None,
                 hypervisor: Optional[pulumi.Input[str]] = None,
                 image_delay: Optional[pulumi.Input[int]] = None,
                 image_now: Optional[pulumi.Input[bool]] = None,
                 image_successful: Optional[pulumi.Input[bool]] = None,
                 ipmi_configure_now: Optional[pulumi.Input[bool]] = None,
                 ipmi_gateway: Optional[pulumi.Input[str]] = None,
                 ipmi_ip: Optional[pulumi.Input[str]] = None,
                 ipmi_mac: Optional[pulumi.Input[str]] = None,
                 ipmi_netmask: Optional[pulumi.Input[str]] = None,
                 ipmi_password: Optional[pulumi.Input[str]] = None,
                 ipmi_user: Optional[pulumi.Input[str]] = None,
                 ipv6_address: Optional[pulumi.Input[str]] = None,
                 ipv6_interface: Optional[pulumi.Input[str]] = None,
                 mitigate_low_boot_space: Optional[pulumi.Input[bool]] = None,
                 node_serial: Optional[pulumi.Input[str]] = None,
                 rdma_mac_addr: Optional[pulumi.Input[str]] = None,
                 rdma_passthrough: Optional[pulumi.Input[bool]] = None,
                 ucsm_managed_mode: Optional[pulumi.Input[str]] = None,
                 ucsm_node_serial: Optional[pulumi.Input[str]] = None,
                 ucsm_params: Optional[pulumi.Input['FoundationImageNodesBlockNodeUcsmParamsArgs']] = None,
                 vswitches: Optional[pulumi.Input[Sequence[pulumi.Input['FoundationImageNodesBlockNodeVswitchArgs']]]] = None):
        """
        :param pulumi.Input[str] hypervisor_hostname: - (Required) Hypervisor Hostname.
        :param pulumi.Input[str] hypervisor_ip: - (Required) Hypervisor IP address.
        :param pulumi.Input[str] node_position: - (Required) Position of the node in the block.
        :param pulumi.Input[str] bond_lacp_rate: - (Required if node is lacp configured) slow or fast if lacp if being used at the switch
        :param pulumi.Input[str] bond_mode: - (Required if node is capable) dynamic if using LACP, static for LAG
        :param pulumi.Input[str] bond_uplinks: - MAC Addresses of NICs in a team/bond
        :param pulumi.Input[str] cluster_id: - ID of cluster.
        :param pulumi.Input[int] current_cvm_vlan_tag: - Current CVM vlan tag. 0 Value with remove vlan tag.
        :param pulumi.Input[str] current_network_interface: - CVM current network interface.
        :param pulumi.Input[int] cvm_gb_ram: - RAM capacity of CVM in GB.
        :param pulumi.Input[int] cvm_num_vcpus: - Number of CVM vcpus.
        :param pulumi.Input[str] device_hint: - use "vm_installer" to enable CVM imaging from standalone.
        :param pulumi.Input[str] exlude_boot_serial: - serial of boot device to be excluded (used by NX G6 platforms)
        :param pulumi.Input[int] image_delay: - Imaging delay.
        :param pulumi.Input[bool] image_now: - (Optional, Default = true) If the node should be imaged now.
        :param pulumi.Input[bool] ipmi_configure_now: - Whether IPMI should be configured.
        :param pulumi.Input[str] ipmi_gateway: - (Required incase using IPMI based imaging either here or outside blocks) IPMI gateway for this node
        :param pulumi.Input[str] ipmi_ip: - (Required) IPMI IP address.
        :param pulumi.Input[str] ipmi_mac: - IPMI MAC address.
        :param pulumi.Input[str] ipmi_netmask: - (Required incase using IPMI based imaging either here or outside blocks) IPMI netmask for this node
        :param pulumi.Input[str] ipmi_password: - (Required incase using IPMI based imaging either here or outside blocks) IPMI username
        :param pulumi.Input[str] ipmi_user: - (Required incase using IPMI based imaging either here or outside blocks) IPMI password
        :param pulumi.Input[str] ipv6_address: - (Required when device_hint = "vm_installer" for imaging using node's existing cvm for imaging) IPV6 address.
        :param pulumi.Input[str] ipv6_interface: - (Required when device_hint = "vm_installer" for imaging using node's existing cvm for imaging) ipv6 interface.
        :param pulumi.Input[bool] mitigate_low_boot_space: - relocate bootbank files to make space for phoenix files.
        :param pulumi.Input[str] node_serial: - serial number of the node.
        :param pulumi.Input[str] rdma_mac_addr: - mac address of nic to be used for rdma
        :param pulumi.Input[bool] rdma_passthrough: - (Required if node is capable) passthru RDMA nic to CVM if possible, default to false
        :param pulumi.Input[str] ucsm_managed_mode: - UCSM Managed mode.
        :param pulumi.Input[str] ucsm_node_serial: - UCSM node serial.
        :param pulumi.Input['FoundationImageNodesBlockNodeUcsmParamsArgs'] ucsm_params: - Object of UCSM parameters.
               * `ucsm_params.native_vlan` :- If the vlan is native.
               * `ucsm_params.keep_ucsm_settings` :- Whether UCSM settings should be kept.
               * `ucsm_params.mac_pool` :- Mac address pool.
               * `ucsm_params.vlan_name` :- Name of vlan.
        """
        pulumi.set(__self__, "hypervisor_hostname", hypervisor_hostname)
        pulumi.set(__self__, "hypervisor_ip", hypervisor_ip)
        pulumi.set(__self__, "node_position", node_position)
        if bond_lacp_rate is not None:
            pulumi.set(__self__, "bond_lacp_rate", bond_lacp_rate)
        if bond_mode is not None:
            pulumi.set(__self__, "bond_mode", bond_mode)
        if bond_uplinks is not None:
            pulumi.set(__self__, "bond_uplinks", bond_uplinks)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if current_cvm_vlan_tag is not None:
            pulumi.set(__self__, "current_cvm_vlan_tag", current_cvm_vlan_tag)
        if current_network_interface is not None:
            pulumi.set(__self__, "current_network_interface", current_network_interface)
        if cvm_gb_ram is not None:
            pulumi.set(__self__, "cvm_gb_ram", cvm_gb_ram)
        if cvm_ip is not None:
            pulumi.set(__self__, "cvm_ip", cvm_ip)
        if cvm_num_vcpus is not None:
            pulumi.set(__self__, "cvm_num_vcpus", cvm_num_vcpus)
        if device_hint is not None:
            pulumi.set(__self__, "device_hint", device_hint)
        if exlude_boot_serial is not None:
            pulumi.set(__self__, "exlude_boot_serial", exlude_boot_serial)
        if hypervisor is not None:
            pulumi.set(__self__, "hypervisor", hypervisor)
        if image_delay is not None:
            pulumi.set(__self__, "image_delay", image_delay)
        if image_now is not None:
            pulumi.set(__self__, "image_now", image_now)
        if image_successful is not None:
            pulumi.set(__self__, "image_successful", image_successful)
        if ipmi_configure_now is not None:
            pulumi.set(__self__, "ipmi_configure_now", ipmi_configure_now)
        if ipmi_gateway is not None:
            pulumi.set(__self__, "ipmi_gateway", ipmi_gateway)
        if ipmi_ip is not None:
            pulumi.set(__self__, "ipmi_ip", ipmi_ip)
        if ipmi_mac is not None:
            pulumi.set(__self__, "ipmi_mac", ipmi_mac)
        if ipmi_netmask is not None:
            pulumi.set(__self__, "ipmi_netmask", ipmi_netmask)
        if ipmi_password is not None:
            pulumi.set(__self__, "ipmi_password", ipmi_password)
        if ipmi_user is not None:
            pulumi.set(__self__, "ipmi_user", ipmi_user)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_interface is not None:
            pulumi.set(__self__, "ipv6_interface", ipv6_interface)
        if mitigate_low_boot_space is not None:
            pulumi.set(__self__, "mitigate_low_boot_space", mitigate_low_boot_space)
        if node_serial is not None:
            pulumi.set(__self__, "node_serial", node_serial)
        if rdma_mac_addr is not None:
            pulumi.set(__self__, "rdma_mac_addr", rdma_mac_addr)
        if rdma_passthrough is not None:
            pulumi.set(__self__, "rdma_passthrough", rdma_passthrough)
        if ucsm_managed_mode is not None:
            pulumi.set(__self__, "ucsm_managed_mode", ucsm_managed_mode)
        if ucsm_node_serial is not None:
            pulumi.set(__self__, "ucsm_node_serial", ucsm_node_serial)
        if ucsm_params is not None:
            pulumi.set(__self__, "ucsm_params", ucsm_params)
        if vswitches is not None:
            pulumi.set(__self__, "vswitches", vswitches)

    @property
    @pulumi.getter(name="hypervisorHostname")
    def hypervisor_hostname(self) -> pulumi.Input[str]:
        """
        - (Required) Hypervisor Hostname.
        """
        return pulumi.get(self, "hypervisor_hostname")

    @hypervisor_hostname.setter
    def hypervisor_hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hypervisor_hostname", value)

    @property
    @pulumi.getter(name="hypervisorIp")
    def hypervisor_ip(self) -> pulumi.Input[str]:
        """
        - (Required) Hypervisor IP address.
        """
        return pulumi.get(self, "hypervisor_ip")

    @hypervisor_ip.setter
    def hypervisor_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "hypervisor_ip", value)

    @property
    @pulumi.getter(name="nodePosition")
    def node_position(self) -> pulumi.Input[str]:
        """
        - (Required) Position of the node in the block.
        """
        return pulumi.get(self, "node_position")

    @node_position.setter
    def node_position(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_position", value)

    @property
    @pulumi.getter(name="bondLacpRate")
    def bond_lacp_rate(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required if node is lacp configured) slow or fast if lacp if being used at the switch
        """
        return pulumi.get(self, "bond_lacp_rate")

    @bond_lacp_rate.setter
    def bond_lacp_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bond_lacp_rate", value)

    @property
    @pulumi.getter(name="bondMode")
    def bond_mode(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required if node is capable) dynamic if using LACP, static for LAG
        """
        return pulumi.get(self, "bond_mode")

    @bond_mode.setter
    def bond_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bond_mode", value)

    @property
    @pulumi.getter(name="bondUplinks")
    def bond_uplinks(self) -> Optional[pulumi.Input[str]]:
        """
        - MAC Addresses of NICs in a team/bond
        """
        return pulumi.get(self, "bond_uplinks")

    @bond_uplinks.setter
    def bond_uplinks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bond_uplinks", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        - ID of cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="currentCvmVlanTag")
    def current_cvm_vlan_tag(self) -> Optional[pulumi.Input[int]]:
        """
        - Current CVM vlan tag. 0 Value with remove vlan tag.
        """
        return pulumi.get(self, "current_cvm_vlan_tag")

    @current_cvm_vlan_tag.setter
    def current_cvm_vlan_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "current_cvm_vlan_tag", value)

    @property
    @pulumi.getter(name="currentNetworkInterface")
    def current_network_interface(self) -> Optional[pulumi.Input[str]]:
        """
        - CVM current network interface.
        """
        return pulumi.get(self, "current_network_interface")

    @current_network_interface.setter
    def current_network_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "current_network_interface", value)

    @property
    @pulumi.getter(name="cvmGbRam")
    def cvm_gb_ram(self) -> Optional[pulumi.Input[int]]:
        """
        - RAM capacity of CVM in GB.
        """
        return pulumi.get(self, "cvm_gb_ram")

    @cvm_gb_ram.setter
    def cvm_gb_ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cvm_gb_ram", value)

    @property
    @pulumi.getter(name="cvmIp")
    def cvm_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cvm_ip")

    @cvm_ip.setter
    def cvm_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cvm_ip", value)

    @property
    @pulumi.getter(name="cvmNumVcpus")
    def cvm_num_vcpus(self) -> Optional[pulumi.Input[int]]:
        """
        - Number of CVM vcpus.
        """
        return pulumi.get(self, "cvm_num_vcpus")

    @cvm_num_vcpus.setter
    def cvm_num_vcpus(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cvm_num_vcpus", value)

    @property
    @pulumi.getter(name="deviceHint")
    def device_hint(self) -> Optional[pulumi.Input[str]]:
        """
        - use "vm_installer" to enable CVM imaging from standalone.
        """
        return pulumi.get(self, "device_hint")

    @device_hint.setter
    def device_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_hint", value)

    @property
    @pulumi.getter(name="exludeBootSerial")
    def exlude_boot_serial(self) -> Optional[pulumi.Input[str]]:
        """
        - serial of boot device to be excluded (used by NX G6 platforms)
        """
        return pulumi.get(self, "exlude_boot_serial")

    @exlude_boot_serial.setter
    def exlude_boot_serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exlude_boot_serial", value)

    @property
    @pulumi.getter
    def hypervisor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hypervisor")

    @hypervisor.setter
    def hypervisor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hypervisor", value)

    @property
    @pulumi.getter(name="imageDelay")
    def image_delay(self) -> Optional[pulumi.Input[int]]:
        """
        - Imaging delay.
        """
        return pulumi.get(self, "image_delay")

    @image_delay.setter
    def image_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_delay", value)

    @property
    @pulumi.getter(name="imageNow")
    def image_now(self) -> Optional[pulumi.Input[bool]]:
        """
        - (Optional, Default = true) If the node should be imaged now.
        """
        return pulumi.get(self, "image_now")

    @image_now.setter
    def image_now(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "image_now", value)

    @property
    @pulumi.getter(name="imageSuccessful")
    def image_successful(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "image_successful")

    @image_successful.setter
    def image_successful(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "image_successful", value)

    @property
    @pulumi.getter(name="ipmiConfigureNow")
    def ipmi_configure_now(self) -> Optional[pulumi.Input[bool]]:
        """
        - Whether IPMI should be configured.
        """
        return pulumi.get(self, "ipmi_configure_now")

    @ipmi_configure_now.setter
    def ipmi_configure_now(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipmi_configure_now", value)

    @property
    @pulumi.getter(name="ipmiGateway")
    def ipmi_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required incase using IPMI based imaging either here or outside blocks) IPMI gateway for this node
        """
        return pulumi.get(self, "ipmi_gateway")

    @ipmi_gateway.setter
    def ipmi_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipmi_gateway", value)

    @property
    @pulumi.getter(name="ipmiIp")
    def ipmi_ip(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) IPMI IP address.
        """
        return pulumi.get(self, "ipmi_ip")

    @ipmi_ip.setter
    def ipmi_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipmi_ip", value)

    @property
    @pulumi.getter(name="ipmiMac")
    def ipmi_mac(self) -> Optional[pulumi.Input[str]]:
        """
        - IPMI MAC address.
        """
        return pulumi.get(self, "ipmi_mac")

    @ipmi_mac.setter
    def ipmi_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipmi_mac", value)

    @property
    @pulumi.getter(name="ipmiNetmask")
    def ipmi_netmask(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required incase using IPMI based imaging either here or outside blocks) IPMI netmask for this node
        """
        return pulumi.get(self, "ipmi_netmask")

    @ipmi_netmask.setter
    def ipmi_netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipmi_netmask", value)

    @property
    @pulumi.getter(name="ipmiPassword")
    def ipmi_password(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required incase using IPMI based imaging either here or outside blocks) IPMI username
        """
        return pulumi.get(self, "ipmi_password")

    @ipmi_password.setter
    def ipmi_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipmi_password", value)

    @property
    @pulumi.getter(name="ipmiUser")
    def ipmi_user(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required incase using IPMI based imaging either here or outside blocks) IPMI password
        """
        return pulumi.get(self, "ipmi_user")

    @ipmi_user.setter
    def ipmi_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipmi_user", value)

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required when device_hint = "vm_installer" for imaging using node's existing cvm for imaging) IPV6 address.
        """
        return pulumi.get(self, "ipv6_address")

    @ipv6_address.setter
    def ipv6_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_address", value)

    @property
    @pulumi.getter(name="ipv6Interface")
    def ipv6_interface(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required when device_hint = "vm_installer" for imaging using node's existing cvm for imaging) ipv6 interface.
        """
        return pulumi.get(self, "ipv6_interface")

    @ipv6_interface.setter
    def ipv6_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_interface", value)

    @property
    @pulumi.getter(name="mitigateLowBootSpace")
    def mitigate_low_boot_space(self) -> Optional[pulumi.Input[bool]]:
        """
        - relocate bootbank files to make space for phoenix files.
        """
        return pulumi.get(self, "mitigate_low_boot_space")

    @mitigate_low_boot_space.setter
    def mitigate_low_boot_space(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mitigate_low_boot_space", value)

    @property
    @pulumi.getter(name="nodeSerial")
    def node_serial(self) -> Optional[pulumi.Input[str]]:
        """
        - serial number of the node.
        """
        return pulumi.get(self, "node_serial")

    @node_serial.setter
    def node_serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_serial", value)

    @property
    @pulumi.getter(name="rdmaMacAddr")
    def rdma_mac_addr(self) -> Optional[pulumi.Input[str]]:
        """
        - mac address of nic to be used for rdma
        """
        return pulumi.get(self, "rdma_mac_addr")

    @rdma_mac_addr.setter
    def rdma_mac_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rdma_mac_addr", value)

    @property
    @pulumi.getter(name="rdmaPassthrough")
    def rdma_passthrough(self) -> Optional[pulumi.Input[bool]]:
        """
        - (Required if node is capable) passthru RDMA nic to CVM if possible, default to false
        """
        return pulumi.get(self, "rdma_passthrough")

    @rdma_passthrough.setter
    def rdma_passthrough(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rdma_passthrough", value)

    @property
    @pulumi.getter(name="ucsmManagedMode")
    def ucsm_managed_mode(self) -> Optional[pulumi.Input[str]]:
        """
        - UCSM Managed mode.
        """
        return pulumi.get(self, "ucsm_managed_mode")

    @ucsm_managed_mode.setter
    def ucsm_managed_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ucsm_managed_mode", value)

    @property
    @pulumi.getter(name="ucsmNodeSerial")
    def ucsm_node_serial(self) -> Optional[pulumi.Input[str]]:
        """
        - UCSM node serial.
        """
        return pulumi.get(self, "ucsm_node_serial")

    @ucsm_node_serial.setter
    def ucsm_node_serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ucsm_node_serial", value)

    @property
    @pulumi.getter(name="ucsmParams")
    def ucsm_params(self) -> Optional[pulumi.Input['FoundationImageNodesBlockNodeUcsmParamsArgs']]:
        """
        - Object of UCSM parameters.
        * `ucsm_params.native_vlan` :- If the vlan is native.
        * `ucsm_params.keep_ucsm_settings` :- Whether UCSM settings should be kept.
        * `ucsm_params.mac_pool` :- Mac address pool.
        * `ucsm_params.vlan_name` :- Name of vlan.
        """
        return pulumi.get(self, "ucsm_params")

    @ucsm_params.setter
    def ucsm_params(self, value: Optional[pulumi.Input['FoundationImageNodesBlockNodeUcsmParamsArgs']]):
        pulumi.set(self, "ucsm_params", value)

    @property
    @pulumi.getter
    def vswitches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FoundationImageNodesBlockNodeVswitchArgs']]]]:
        return pulumi.get(self, "vswitches")

    @vswitches.setter
    def vswitches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FoundationImageNodesBlockNodeVswitchArgs']]]]):
        pulumi.set(self, "vswitches", value)


if not MYPY:
    class FoundationImageNodesBlockNodeUcsmParamsArgsDict(TypedDict):
        keep_ucsm_settings: NotRequired[pulumi.Input[bool]]
        mac_pool: NotRequired[pulumi.Input[str]]
        native_vlan: NotRequired[pulumi.Input[bool]]
        vlan_name: NotRequired[pulumi.Input[str]]
elif False:
    FoundationImageNodesBlockNodeUcsmParamsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationImageNodesBlockNodeUcsmParamsArgs:
    def __init__(__self__, *,
                 keep_ucsm_settings: Optional[pulumi.Input[bool]] = None,
                 mac_pool: Optional[pulumi.Input[str]] = None,
                 native_vlan: Optional[pulumi.Input[bool]] = None,
                 vlan_name: Optional[pulumi.Input[str]] = None):
        if keep_ucsm_settings is not None:
            pulumi.set(__self__, "keep_ucsm_settings", keep_ucsm_settings)
        if mac_pool is not None:
            pulumi.set(__self__, "mac_pool", mac_pool)
        if native_vlan is not None:
            pulumi.set(__self__, "native_vlan", native_vlan)
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="keepUcsmSettings")
    def keep_ucsm_settings(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "keep_ucsm_settings")

    @keep_ucsm_settings.setter
    def keep_ucsm_settings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keep_ucsm_settings", value)

    @property
    @pulumi.getter(name="macPool")
    def mac_pool(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_pool")

    @mac_pool.setter
    def mac_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_pool", value)

    @property
    @pulumi.getter(name="nativeVlan")
    def native_vlan(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "native_vlan")

    @native_vlan.setter
    def native_vlan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "native_vlan", value)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_name")

    @vlan_name.setter
    def vlan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_name", value)


if not MYPY:
    class FoundationImageNodesBlockNodeVswitchArgsDict(TypedDict):
        bond_mode: NotRequired[pulumi.Input[str]]
        """
        - (Required if node is capable) dynamic if using LACP, static for LAG
        """
        lacp: NotRequired[pulumi.Input[str]]
        mtu: NotRequired[pulumi.Input[int]]
        name: NotRequired[pulumi.Input[str]]
        other_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        uplinks: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    FoundationImageNodesBlockNodeVswitchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationImageNodesBlockNodeVswitchArgs:
    def __init__(__self__, *,
                 bond_mode: Optional[pulumi.Input[str]] = None,
                 lacp: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 other_configs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 uplinks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] bond_mode: - (Required if node is capable) dynamic if using LACP, static for LAG
        """
        if bond_mode is not None:
            pulumi.set(__self__, "bond_mode", bond_mode)
        if lacp is not None:
            pulumi.set(__self__, "lacp", lacp)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if other_configs is not None:
            pulumi.set(__self__, "other_configs", other_configs)
        if uplinks is not None:
            pulumi.set(__self__, "uplinks", uplinks)

    @property
    @pulumi.getter(name="bondMode")
    def bond_mode(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required if node is capable) dynamic if using LACP, static for LAG
        """
        return pulumi.get(self, "bond_mode")

    @bond_mode.setter
    def bond_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bond_mode", value)

    @property
    @pulumi.getter
    def lacp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lacp")

    @lacp.setter
    def lacp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lacp", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="otherConfigs")
    def other_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "other_configs")

    @other_configs.setter
    def other_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "other_configs", value)

    @property
    @pulumi.getter
    def uplinks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "uplinks")

    @uplinks.setter
    def uplinks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "uplinks", value)


if not MYPY:
    class FoundationImageNodesClusterArgsDict(TypedDict):
        cluster_members: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        - (Required) Members in the cluster.
        """
        cluster_name: pulumi.Input[str]
        """
        - (Required) Name of the cluster.
        """
        redundancy_factor: pulumi.Input[int]
        """
        - (Required) Cluster Redundancy Factor.
        """
        backplane_netmask: NotRequired[pulumi.Input[str]]
        """
        - Backplane netmask.
        """
        backplane_subnet: NotRequired[pulumi.Input[str]]
        """
        - Backplane subnet address.
        """
        backplane_vlan: NotRequired[pulumi.Input[str]]
        """
        - Backplane vlan.
        """
        cluster_external_ip: NotRequired[pulumi.Input[str]]
        """
        - External IP of the cluster.
        """
        cluster_init_now: NotRequired[pulumi.Input[bool]]
        """
        - (Optional, Default = true) If cluster should be created.
        """
        cluster_init_successful: NotRequired[pulumi.Input[bool]]
        """
        - If cluster initialization was successful.
        """
        cvm_dns_servers: NotRequired[pulumi.Input[str]]
        """
        - DNS servers of CVM.
        """
        cvm_ntp_servers: NotRequired[pulumi.Input[str]]
        """
        - NTP servers of CVM.
        """
        enable_ns: NotRequired[pulumi.Input[bool]]
        """
        - If network segmentation should be enabled.
        """
        hypervisor_ntp_servers: NotRequired[pulumi.Input[str]]
        """
        - NTP servers of hypervisor.
        """
        single_node_cluster: NotRequired[pulumi.Input[bool]]
        """
        - If it is a single node cluster.
        """
        timezone: NotRequired[pulumi.Input[str]]
        """
        - Set timezone for every CVM
        """
elif False:
    FoundationImageNodesClusterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationImageNodesClusterArgs:
    def __init__(__self__, *,
                 cluster_members: pulumi.Input[Sequence[pulumi.Input[str]]],
                 cluster_name: pulumi.Input[str],
                 redundancy_factor: pulumi.Input[int],
                 backplane_netmask: Optional[pulumi.Input[str]] = None,
                 backplane_subnet: Optional[pulumi.Input[str]] = None,
                 backplane_vlan: Optional[pulumi.Input[str]] = None,
                 cluster_external_ip: Optional[pulumi.Input[str]] = None,
                 cluster_init_now: Optional[pulumi.Input[bool]] = None,
                 cluster_init_successful: Optional[pulumi.Input[bool]] = None,
                 cvm_dns_servers: Optional[pulumi.Input[str]] = None,
                 cvm_ntp_servers: Optional[pulumi.Input[str]] = None,
                 enable_ns: Optional[pulumi.Input[bool]] = None,
                 hypervisor_ntp_servers: Optional[pulumi.Input[str]] = None,
                 single_node_cluster: Optional[pulumi.Input[bool]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cluster_members: - (Required) Members in the cluster.
        :param pulumi.Input[str] cluster_name: - (Required) Name of the cluster.
        :param pulumi.Input[int] redundancy_factor: - (Required) Cluster Redundancy Factor.
        :param pulumi.Input[str] backplane_netmask: - Backplane netmask.
        :param pulumi.Input[str] backplane_subnet: - Backplane subnet address.
        :param pulumi.Input[str] backplane_vlan: - Backplane vlan.
        :param pulumi.Input[str] cluster_external_ip: - External IP of the cluster.
        :param pulumi.Input[bool] cluster_init_now: - (Optional, Default = true) If cluster should be created.
        :param pulumi.Input[bool] cluster_init_successful: - If cluster initialization was successful.
        :param pulumi.Input[str] cvm_dns_servers: - DNS servers of CVM.
        :param pulumi.Input[str] cvm_ntp_servers: - NTP servers of CVM.
        :param pulumi.Input[bool] enable_ns: - If network segmentation should be enabled.
        :param pulumi.Input[str] hypervisor_ntp_servers: - NTP servers of hypervisor.
        :param pulumi.Input[bool] single_node_cluster: - If it is a single node cluster.
        :param pulumi.Input[str] timezone: - Set timezone for every CVM
        """
        pulumi.set(__self__, "cluster_members", cluster_members)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "redundancy_factor", redundancy_factor)
        if backplane_netmask is not None:
            pulumi.set(__self__, "backplane_netmask", backplane_netmask)
        if backplane_subnet is not None:
            pulumi.set(__self__, "backplane_subnet", backplane_subnet)
        if backplane_vlan is not None:
            pulumi.set(__self__, "backplane_vlan", backplane_vlan)
        if cluster_external_ip is not None:
            pulumi.set(__self__, "cluster_external_ip", cluster_external_ip)
        if cluster_init_now is not None:
            pulumi.set(__self__, "cluster_init_now", cluster_init_now)
        if cluster_init_successful is not None:
            pulumi.set(__self__, "cluster_init_successful", cluster_init_successful)
        if cvm_dns_servers is not None:
            pulumi.set(__self__, "cvm_dns_servers", cvm_dns_servers)
        if cvm_ntp_servers is not None:
            pulumi.set(__self__, "cvm_ntp_servers", cvm_ntp_servers)
        if enable_ns is not None:
            pulumi.set(__self__, "enable_ns", enable_ns)
        if hypervisor_ntp_servers is not None:
            pulumi.set(__self__, "hypervisor_ntp_servers", hypervisor_ntp_servers)
        if single_node_cluster is not None:
            pulumi.set(__self__, "single_node_cluster", single_node_cluster)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="clusterMembers")
    def cluster_members(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        - (Required) Members in the cluster.
        """
        return pulumi.get(self, "cluster_members")

    @cluster_members.setter
    def cluster_members(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "cluster_members", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        - (Required) Name of the cluster.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="redundancyFactor")
    def redundancy_factor(self) -> pulumi.Input[int]:
        """
        - (Required) Cluster Redundancy Factor.
        """
        return pulumi.get(self, "redundancy_factor")

    @redundancy_factor.setter
    def redundancy_factor(self, value: pulumi.Input[int]):
        pulumi.set(self, "redundancy_factor", value)

    @property
    @pulumi.getter(name="backplaneNetmask")
    def backplane_netmask(self) -> Optional[pulumi.Input[str]]:
        """
        - Backplane netmask.
        """
        return pulumi.get(self, "backplane_netmask")

    @backplane_netmask.setter
    def backplane_netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backplane_netmask", value)

    @property
    @pulumi.getter(name="backplaneSubnet")
    def backplane_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        - Backplane subnet address.
        """
        return pulumi.get(self, "backplane_subnet")

    @backplane_subnet.setter
    def backplane_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backplane_subnet", value)

    @property
    @pulumi.getter(name="backplaneVlan")
    def backplane_vlan(self) -> Optional[pulumi.Input[str]]:
        """
        - Backplane vlan.
        """
        return pulumi.get(self, "backplane_vlan")

    @backplane_vlan.setter
    def backplane_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backplane_vlan", value)

    @property
    @pulumi.getter(name="clusterExternalIp")
    def cluster_external_ip(self) -> Optional[pulumi.Input[str]]:
        """
        - External IP of the cluster.
        """
        return pulumi.get(self, "cluster_external_ip")

    @cluster_external_ip.setter
    def cluster_external_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_external_ip", value)

    @property
    @pulumi.getter(name="clusterInitNow")
    def cluster_init_now(self) -> Optional[pulumi.Input[bool]]:
        """
        - (Optional, Default = true) If cluster should be created.
        """
        return pulumi.get(self, "cluster_init_now")

    @cluster_init_now.setter
    def cluster_init_now(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cluster_init_now", value)

    @property
    @pulumi.getter(name="clusterInitSuccessful")
    def cluster_init_successful(self) -> Optional[pulumi.Input[bool]]:
        """
        - If cluster initialization was successful.
        """
        return pulumi.get(self, "cluster_init_successful")

    @cluster_init_successful.setter
    def cluster_init_successful(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cluster_init_successful", value)

    @property
    @pulumi.getter(name="cvmDnsServers")
    def cvm_dns_servers(self) -> Optional[pulumi.Input[str]]:
        """
        - DNS servers of CVM.
        """
        return pulumi.get(self, "cvm_dns_servers")

    @cvm_dns_servers.setter
    def cvm_dns_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cvm_dns_servers", value)

    @property
    @pulumi.getter(name="cvmNtpServers")
    def cvm_ntp_servers(self) -> Optional[pulumi.Input[str]]:
        """
        - NTP servers of CVM.
        """
        return pulumi.get(self, "cvm_ntp_servers")

    @cvm_ntp_servers.setter
    def cvm_ntp_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cvm_ntp_servers", value)

    @property
    @pulumi.getter(name="enableNs")
    def enable_ns(self) -> Optional[pulumi.Input[bool]]:
        """
        - If network segmentation should be enabled.
        """
        return pulumi.get(self, "enable_ns")

    @enable_ns.setter
    def enable_ns(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ns", value)

    @property
    @pulumi.getter(name="hypervisorNtpServers")
    def hypervisor_ntp_servers(self) -> Optional[pulumi.Input[str]]:
        """
        - NTP servers of hypervisor.
        """
        return pulumi.get(self, "hypervisor_ntp_servers")

    @hypervisor_ntp_servers.setter
    def hypervisor_ntp_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hypervisor_ntp_servers", value)

    @property
    @pulumi.getter(name="singleNodeCluster")
    def single_node_cluster(self) -> Optional[pulumi.Input[bool]]:
        """
        - If it is a single node cluster.
        """
        return pulumi.get(self, "single_node_cluster")

    @single_node_cluster.setter
    def single_node_cluster(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "single_node_cluster", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        - Set timezone for every CVM
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


if not MYPY:
    class FoundationImageNodesClusterUrlArgsDict(TypedDict):
        cluster_name: NotRequired[pulumi.Input[str]]
        """
        - (Required) Name of the cluster.
        """
        cluster_url: NotRequired[pulumi.Input[str]]
elif False:
    FoundationImageNodesClusterUrlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationImageNodesClusterUrlArgs:
    def __init__(__self__, *,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cluster_name: - (Required) Name of the cluster.
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) Name of the cluster.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_url", value)


if not MYPY:
    class FoundationImageNodesEosMetadataArgsDict(TypedDict):
        account_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        - arrya of account names
        """
        config_id: NotRequired[pulumi.Input[str]]
        """
        - Id of the Eos config uploaded in foundation GUI.
        """
        email: NotRequired[pulumi.Input[str]]
        """
        - Email address of the user who downloaded Eos config.
        """
elif False:
    FoundationImageNodesEosMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationImageNodesEosMetadataArgs:
    def __init__(__self__, *,
                 account_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 config_id: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] account_names: - arrya of account names
        :param pulumi.Input[str] config_id: - Id of the Eos config uploaded in foundation GUI.
        :param pulumi.Input[str] email: - Email address of the user who downloaded Eos config.
        """
        if account_names is not None:
            pulumi.set(__self__, "account_names", account_names)
        if config_id is not None:
            pulumi.set(__self__, "config_id", config_id)
        if email is not None:
            pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter(name="accountNames")
    def account_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - arrya of account names
        """
        return pulumi.get(self, "account_names")

    @account_names.setter
    def account_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_names", value)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[pulumi.Input[str]]:
        """
        - Id of the Eos config uploaded in foundation GUI.
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        - Email address of the user who downloaded Eos config.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)


if not MYPY:
    class FoundationImageNodesFcSettingsArgsDict(TypedDict):
        fc_metadata: pulumi.Input['FoundationImageNodesFcSettingsFcMetadataArgsDict']
        """
        - Foundation Central metadata which will be transferred to the newly imaged node.
        * `fc_metadata.fc_ip` :- IP address of foundation central.
        * `fc_metadata.api_key` :- api_key which the node uses to register itself with foundation central.
        """
        foundation_central: pulumi.Input[bool]
        """
        - If this attribute is set to True, FC workflow will be invoked.
        """
elif False:
    FoundationImageNodesFcSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationImageNodesFcSettingsArgs:
    def __init__(__self__, *,
                 fc_metadata: pulumi.Input['FoundationImageNodesFcSettingsFcMetadataArgs'],
                 foundation_central: pulumi.Input[bool]):
        """
        :param pulumi.Input['FoundationImageNodesFcSettingsFcMetadataArgs'] fc_metadata: - Foundation Central metadata which will be transferred to the newly imaged node.
               * `fc_metadata.fc_ip` :- IP address of foundation central.
               * `fc_metadata.api_key` :- api_key which the node uses to register itself with foundation central.
        :param pulumi.Input[bool] foundation_central: - If this attribute is set to True, FC workflow will be invoked.
        """
        pulumi.set(__self__, "fc_metadata", fc_metadata)
        pulumi.set(__self__, "foundation_central", foundation_central)

    @property
    @pulumi.getter(name="fcMetadata")
    def fc_metadata(self) -> pulumi.Input['FoundationImageNodesFcSettingsFcMetadataArgs']:
        """
        - Foundation Central metadata which will be transferred to the newly imaged node.
        * `fc_metadata.fc_ip` :- IP address of foundation central.
        * `fc_metadata.api_key` :- api_key which the node uses to register itself with foundation central.
        """
        return pulumi.get(self, "fc_metadata")

    @fc_metadata.setter
    def fc_metadata(self, value: pulumi.Input['FoundationImageNodesFcSettingsFcMetadataArgs']):
        pulumi.set(self, "fc_metadata", value)

    @property
    @pulumi.getter(name="foundationCentral")
    def foundation_central(self) -> pulumi.Input[bool]:
        """
        - If this attribute is set to True, FC workflow will be invoked.
        """
        return pulumi.get(self, "foundation_central")

    @foundation_central.setter
    def foundation_central(self, value: pulumi.Input[bool]):
        pulumi.set(self, "foundation_central", value)


if not MYPY:
    class FoundationImageNodesFcSettingsFcMetadataArgsDict(TypedDict):
        api_key: pulumi.Input[str]
        fc_ip: pulumi.Input[str]
elif False:
    FoundationImageNodesFcSettingsFcMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationImageNodesFcSettingsFcMetadataArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 fc_ip: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "fc_ip", fc_ip)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="fcIp")
    def fc_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "fc_ip")

    @fc_ip.setter
    def fc_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "fc_ip", value)


if not MYPY:
    class FoundationImageNodesHypervisorIsoArgsDict(TypedDict):
        esx: NotRequired[pulumi.Input['FoundationImageNodesHypervisorIsoEsxArgsDict']]
        """
        - Details of hypervisor ISO of type esx.
        """
        hyperv: NotRequired[pulumi.Input['FoundationImageNodesHypervisorIsoHypervArgsDict']]
        """
        - Details of hypervisor ISO of type hyperv.
        """
        kvm: NotRequired[pulumi.Input['FoundationImageNodesHypervisorIsoKvmArgsDict']]
        """
        - Details of hypervisor ISO of type kvm.
        """
        xen: NotRequired[pulumi.Input['FoundationImageNodesHypervisorIsoXenArgsDict']]
        """
        - Details of hypervisor ISO of type xen.
        """
elif False:
    FoundationImageNodesHypervisorIsoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationImageNodesHypervisorIsoArgs:
    def __init__(__self__, *,
                 esx: Optional[pulumi.Input['FoundationImageNodesHypervisorIsoEsxArgs']] = None,
                 hyperv: Optional[pulumi.Input['FoundationImageNodesHypervisorIsoHypervArgs']] = None,
                 kvm: Optional[pulumi.Input['FoundationImageNodesHypervisorIsoKvmArgs']] = None,
                 xen: Optional[pulumi.Input['FoundationImageNodesHypervisorIsoXenArgs']] = None):
        """
        :param pulumi.Input['FoundationImageNodesHypervisorIsoEsxArgs'] esx: - Details of hypervisor ISO of type esx.
        :param pulumi.Input['FoundationImageNodesHypervisorIsoHypervArgs'] hyperv: - Details of hypervisor ISO of type hyperv.
        :param pulumi.Input['FoundationImageNodesHypervisorIsoKvmArgs'] kvm: - Details of hypervisor ISO of type kvm.
        :param pulumi.Input['FoundationImageNodesHypervisorIsoXenArgs'] xen: - Details of hypervisor ISO of type xen.
        """
        if esx is not None:
            pulumi.set(__self__, "esx", esx)
        if hyperv is not None:
            pulumi.set(__self__, "hyperv", hyperv)
        if kvm is not None:
            pulumi.set(__self__, "kvm", kvm)
        if xen is not None:
            pulumi.set(__self__, "xen", xen)

    @property
    @pulumi.getter
    def esx(self) -> Optional[pulumi.Input['FoundationImageNodesHypervisorIsoEsxArgs']]:
        """
        - Details of hypervisor ISO of type esx.
        """
        return pulumi.get(self, "esx")

    @esx.setter
    def esx(self, value: Optional[pulumi.Input['FoundationImageNodesHypervisorIsoEsxArgs']]):
        pulumi.set(self, "esx", value)

    @property
    @pulumi.getter
    def hyperv(self) -> Optional[pulumi.Input['FoundationImageNodesHypervisorIsoHypervArgs']]:
        """
        - Details of hypervisor ISO of type hyperv.
        """
        return pulumi.get(self, "hyperv")

    @hyperv.setter
    def hyperv(self, value: Optional[pulumi.Input['FoundationImageNodesHypervisorIsoHypervArgs']]):
        pulumi.set(self, "hyperv", value)

    @property
    @pulumi.getter
    def kvm(self) -> Optional[pulumi.Input['FoundationImageNodesHypervisorIsoKvmArgs']]:
        """
        - Details of hypervisor ISO of type kvm.
        """
        return pulumi.get(self, "kvm")

    @kvm.setter
    def kvm(self, value: Optional[pulumi.Input['FoundationImageNodesHypervisorIsoKvmArgs']]):
        pulumi.set(self, "kvm", value)

    @property
    @pulumi.getter
    def xen(self) -> Optional[pulumi.Input['FoundationImageNodesHypervisorIsoXenArgs']]:
        """
        - Details of hypervisor ISO of type xen.
        """
        return pulumi.get(self, "xen")

    @xen.setter
    def xen(self, value: Optional[pulumi.Input['FoundationImageNodesHypervisorIsoXenArgs']]):
        pulumi.set(self, "xen", value)


if not MYPY:
    class FoundationImageNodesHypervisorIsoEsxArgsDict(TypedDict):
        checksum: pulumi.Input[str]
        """
        - (Required) Filename of hypervisor ISO.
        """
        filename: pulumi.Input[str]
        """
        - (Required) Checksum for ISO file.
        """
elif False:
    FoundationImageNodesHypervisorIsoEsxArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationImageNodesHypervisorIsoEsxArgs:
    def __init__(__self__, *,
                 checksum: pulumi.Input[str],
                 filename: pulumi.Input[str]):
        """
        :param pulumi.Input[str] checksum: - (Required) Filename of hypervisor ISO.
        :param pulumi.Input[str] filename: - (Required) Checksum for ISO file.
        """
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def checksum(self) -> pulumi.Input[str]:
        """
        - (Required) Filename of hypervisor ISO.
        """
        return pulumi.get(self, "checksum")

    @checksum.setter
    def checksum(self, value: pulumi.Input[str]):
        pulumi.set(self, "checksum", value)

    @property
    @pulumi.getter
    def filename(self) -> pulumi.Input[str]:
        """
        - (Required) Checksum for ISO file.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: pulumi.Input[str]):
        pulumi.set(self, "filename", value)


if not MYPY:
    class FoundationImageNodesHypervisorIsoHypervArgsDict(TypedDict):
        checksum: pulumi.Input[str]
        """
        - (Required) Filename of hypervisor ISO.
        """
        filename: pulumi.Input[str]
        """
        - (Required) Checksum for ISO file.
        """
elif False:
    FoundationImageNodesHypervisorIsoHypervArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationImageNodesHypervisorIsoHypervArgs:
    def __init__(__self__, *,
                 checksum: pulumi.Input[str],
                 filename: pulumi.Input[str]):
        """
        :param pulumi.Input[str] checksum: - (Required) Filename of hypervisor ISO.
        :param pulumi.Input[str] filename: - (Required) Checksum for ISO file.
        """
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def checksum(self) -> pulumi.Input[str]:
        """
        - (Required) Filename of hypervisor ISO.
        """
        return pulumi.get(self, "checksum")

    @checksum.setter
    def checksum(self, value: pulumi.Input[str]):
        pulumi.set(self, "checksum", value)

    @property
    @pulumi.getter
    def filename(self) -> pulumi.Input[str]:
        """
        - (Required) Checksum for ISO file.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: pulumi.Input[str]):
        pulumi.set(self, "filename", value)


if not MYPY:
    class FoundationImageNodesHypervisorIsoKvmArgsDict(TypedDict):
        checksum: pulumi.Input[str]
        """
        - (Required) Filename of hypervisor ISO.
        """
        filename: pulumi.Input[str]
        """
        - (Required) Checksum for ISO file.
        """
elif False:
    FoundationImageNodesHypervisorIsoKvmArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationImageNodesHypervisorIsoKvmArgs:
    def __init__(__self__, *,
                 checksum: pulumi.Input[str],
                 filename: pulumi.Input[str]):
        """
        :param pulumi.Input[str] checksum: - (Required) Filename of hypervisor ISO.
        :param pulumi.Input[str] filename: - (Required) Checksum for ISO file.
        """
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def checksum(self) -> pulumi.Input[str]:
        """
        - (Required) Filename of hypervisor ISO.
        """
        return pulumi.get(self, "checksum")

    @checksum.setter
    def checksum(self, value: pulumi.Input[str]):
        pulumi.set(self, "checksum", value)

    @property
    @pulumi.getter
    def filename(self) -> pulumi.Input[str]:
        """
        - (Required) Checksum for ISO file.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: pulumi.Input[str]):
        pulumi.set(self, "filename", value)


if not MYPY:
    class FoundationImageNodesHypervisorIsoXenArgsDict(TypedDict):
        checksum: pulumi.Input[str]
        """
        - (Required) Filename of hypervisor ISO.
        """
        filename: pulumi.Input[str]
        """
        - (Required) Checksum for ISO file.
        """
elif False:
    FoundationImageNodesHypervisorIsoXenArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationImageNodesHypervisorIsoXenArgs:
    def __init__(__self__, *,
                 checksum: pulumi.Input[str],
                 filename: pulumi.Input[str]):
        """
        :param pulumi.Input[str] checksum: - (Required) Filename of hypervisor ISO.
        :param pulumi.Input[str] filename: - (Required) Checksum for ISO file.
        """
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def checksum(self) -> pulumi.Input[str]:
        """
        - (Required) Filename of hypervisor ISO.
        """
        return pulumi.get(self, "checksum")

    @checksum.setter
    def checksum(self, value: pulumi.Input[str]):
        pulumi.set(self, "checksum", value)

    @property
    @pulumi.getter
    def filename(self) -> pulumi.Input[str]:
        """
        - (Required) Checksum for ISO file.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: pulumi.Input[str]):
        pulumi.set(self, "filename", value)


if not MYPY:
    class FoundationImageNodesTestsArgsDict(TypedDict):
        run_ncc: NotRequired[pulumi.Input[bool]]
        """
        - Whether NCC checks should run.
        """
        run_syscheck: NotRequired[pulumi.Input[bool]]
        """
        - Whether system checks should run.
        """
elif False:
    FoundationImageNodesTestsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationImageNodesTestsArgs:
    def __init__(__self__, *,
                 run_ncc: Optional[pulumi.Input[bool]] = None,
                 run_syscheck: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] run_ncc: - Whether NCC checks should run.
        :param pulumi.Input[bool] run_syscheck: - Whether system checks should run.
        """
        if run_ncc is not None:
            pulumi.set(__self__, "run_ncc", run_ncc)
        if run_syscheck is not None:
            pulumi.set(__self__, "run_syscheck", run_syscheck)

    @property
    @pulumi.getter(name="runNcc")
    def run_ncc(self) -> Optional[pulumi.Input[bool]]:
        """
        - Whether NCC checks should run.
        """
        return pulumi.get(self, "run_ncc")

    @run_ncc.setter
    def run_ncc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_ncc", value)

    @property
    @pulumi.getter(name="runSyscheck")
    def run_syscheck(self) -> Optional[pulumi.Input[bool]]:
        """
        - Whether system checks should run.
        """
        return pulumi.get(self, "run_syscheck")

    @run_syscheck.setter
    def run_syscheck(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_syscheck", value)


if not MYPY:
    class FoundationIpmiConfigBlockArgsDict(TypedDict):
        nodes: pulumi.Input[Sequence[pulumi.Input['FoundationIpmiConfigBlockNodeArgsDict']]]
        """
        - (Required) array of nodes for ipmi config.
        """
        block_id: NotRequired[pulumi.Input[str]]
        """
        - (Optional) Block Id
        """
elif False:
    FoundationIpmiConfigBlockArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationIpmiConfigBlockArgs:
    def __init__(__self__, *,
                 nodes: pulumi.Input[Sequence[pulumi.Input['FoundationIpmiConfigBlockNodeArgs']]],
                 block_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['FoundationIpmiConfigBlockNodeArgs']]] nodes: - (Required) array of nodes for ipmi config.
        :param pulumi.Input[str] block_id: - (Optional) Block Id
        """
        pulumi.set(__self__, "nodes", nodes)
        if block_id is not None:
            pulumi.set(__self__, "block_id", block_id)

    @property
    @pulumi.getter
    def nodes(self) -> pulumi.Input[Sequence[pulumi.Input['FoundationIpmiConfigBlockNodeArgs']]]:
        """
        - (Required) array of nodes for ipmi config.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: pulumi.Input[Sequence[pulumi.Input['FoundationIpmiConfigBlockNodeArgs']]]):
        pulumi.set(self, "nodes", value)

    @property
    @pulumi.getter(name="blockId")
    def block_id(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) Block Id
        """
        return pulumi.get(self, "block_id")

    @block_id.setter
    def block_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_id", value)


if not MYPY:
    class FoundationIpmiConfigBlockNodeArgsDict(TypedDict):
        ipmi_configure_now: pulumi.Input[bool]
        """
        - (Required) Whether IPMI should be configured. Should be kept true to configure
        """
        ipmi_ip: pulumi.Input[str]
        """
        - IPMI IP address.
        """
        ipmi_mac: pulumi.Input[str]
        """
        - (Required) IPMI mac address.
        """
        ipmi_configure_successful: NotRequired[pulumi.Input[bool]]
        """
        - Whether IPMI was successfully configured.
        """
        ipmi_message: NotRequired[pulumi.Input[str]]
        """
        - IPMI configuration status message if any.
        """
elif False:
    FoundationIpmiConfigBlockNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FoundationIpmiConfigBlockNodeArgs:
    def __init__(__self__, *,
                 ipmi_configure_now: pulumi.Input[bool],
                 ipmi_ip: pulumi.Input[str],
                 ipmi_mac: pulumi.Input[str],
                 ipmi_configure_successful: Optional[pulumi.Input[bool]] = None,
                 ipmi_message: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] ipmi_configure_now: - (Required) Whether IPMI should be configured. Should be kept true to configure
        :param pulumi.Input[str] ipmi_ip: - IPMI IP address.
        :param pulumi.Input[str] ipmi_mac: - (Required) IPMI mac address.
        :param pulumi.Input[bool] ipmi_configure_successful: - Whether IPMI was successfully configured.
        :param pulumi.Input[str] ipmi_message: - IPMI configuration status message if any.
        """
        pulumi.set(__self__, "ipmi_configure_now", ipmi_configure_now)
        pulumi.set(__self__, "ipmi_ip", ipmi_ip)
        pulumi.set(__self__, "ipmi_mac", ipmi_mac)
        if ipmi_configure_successful is not None:
            pulumi.set(__self__, "ipmi_configure_successful", ipmi_configure_successful)
        if ipmi_message is not None:
            pulumi.set(__self__, "ipmi_message", ipmi_message)

    @property
    @pulumi.getter(name="ipmiConfigureNow")
    def ipmi_configure_now(self) -> pulumi.Input[bool]:
        """
        - (Required) Whether IPMI should be configured. Should be kept true to configure
        """
        return pulumi.get(self, "ipmi_configure_now")

    @ipmi_configure_now.setter
    def ipmi_configure_now(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ipmi_configure_now", value)

    @property
    @pulumi.getter(name="ipmiIp")
    def ipmi_ip(self) -> pulumi.Input[str]:
        """
        - IPMI IP address.
        """
        return pulumi.get(self, "ipmi_ip")

    @ipmi_ip.setter
    def ipmi_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ipmi_ip", value)

    @property
    @pulumi.getter(name="ipmiMac")
    def ipmi_mac(self) -> pulumi.Input[str]:
        """
        - (Required) IPMI mac address.
        """
        return pulumi.get(self, "ipmi_mac")

    @ipmi_mac.setter
    def ipmi_mac(self, value: pulumi.Input[str]):
        pulumi.set(self, "ipmi_mac", value)

    @property
    @pulumi.getter(name="ipmiConfigureSuccessful")
    def ipmi_configure_successful(self) -> Optional[pulumi.Input[bool]]:
        """
        - Whether IPMI was successfully configured.
        """
        return pulumi.get(self, "ipmi_configure_successful")

    @ipmi_configure_successful.setter
    def ipmi_configure_successful(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipmi_configure_successful", value)

    @property
    @pulumi.getter(name="ipmiMessage")
    def ipmi_message(self) -> Optional[pulumi.Input[str]]:
        """
        - IPMI configuration status message if any.
        """
        return pulumi.get(self, "ipmi_message")

    @ipmi_message.setter
    def ipmi_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipmi_message", value)


if not MYPY:
    class ImageCategoryArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) The name for the image.
        """
        value: NotRequired[pulumi.Input[str]]
elif False:
    ImageCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ImageCategoryArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: - (Required) The name for the image.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) The name for the image.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ImageClusterReferenceArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name (Default value: project)(Required).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) The name for the image.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        - the UUID(Required).
        """
elif False:
    ImageClusterReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ImageClusterReferenceArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: - The kind name (Default value: project)(Required).
        :param pulumi.Input[str] name: - (Required) The name for the image.
        :param pulumi.Input[str] uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) The name for the image.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class ImageCurrentClusterReferenceListArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name (Default value: project)(Required).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) The name for the image.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        - the UUID(Required).
        """
elif False:
    ImageCurrentClusterReferenceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ImageCurrentClusterReferenceListArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: - The kind name (Default value: project)(Required).
        :param pulumi.Input[str] name: - (Required) The name for the image.
        :param pulumi.Input[str] uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) The name for the image.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class KarbonClusterActivePassiveConfigArgsDict(TypedDict):
        external_ipv4_address: pulumi.Input[str]
elif False:
    KarbonClusterActivePassiveConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonClusterActivePassiveConfigArgs:
    def __init__(__self__, *,
                 external_ipv4_address: pulumi.Input[str]):
        pulumi.set(__self__, "external_ipv4_address", external_ipv4_address)

    @property
    @pulumi.getter(name="externalIpv4Address")
    def external_ipv4_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "external_ipv4_address")

    @external_ipv4_address.setter
    def external_ipv4_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "external_ipv4_address", value)


if not MYPY:
    class KarbonClusterCniConfigArgsDict(TypedDict):
        calico_config: NotRequired[pulumi.Input['KarbonClusterCniConfigCalicoConfigArgsDict']]
        """
        - (Optional) Configuration of the calico CNI provider.
        * `calico_config.ip_pool_config`: - (Optional) List of IP pools to be configured/managed by calico.
        * `calico_config.ip_pool_config.cidr`: - (Optional) IP range to use for this pool, it should fall within pod cidr.
        """
        flannel_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['KarbonClusterCniConfigFlannelConfigArgsDict']]]]
        """
        - (Optional) Configuration of the flannel container network interface (CNI) provider.
        """
        node_cidr_mask_size: NotRequired[pulumi.Input[int]]
        """
        - (Optional) The size of the subnet from the pod_ipv4_cidr assigned to each host. A value of 24 would allow up to 255 pods per node.
        """
        pod_ipv4_cidr: NotRequired[pulumi.Input[str]]
        """
        - (Optional) CIDR for pods in the cluster.
        """
        service_ipv4_cidr: NotRequired[pulumi.Input[str]]
        """
        - (Optional) Classless inter-domain routing (CIDR) for k8s services in the cluster.
        """
elif False:
    KarbonClusterCniConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonClusterCniConfigArgs:
    def __init__(__self__, *,
                 calico_config: Optional[pulumi.Input['KarbonClusterCniConfigCalicoConfigArgs']] = None,
                 flannel_configs: Optional[pulumi.Input[Sequence[pulumi.Input['KarbonClusterCniConfigFlannelConfigArgs']]]] = None,
                 node_cidr_mask_size: Optional[pulumi.Input[int]] = None,
                 pod_ipv4_cidr: Optional[pulumi.Input[str]] = None,
                 service_ipv4_cidr: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['KarbonClusterCniConfigCalicoConfigArgs'] calico_config: - (Optional) Configuration of the calico CNI provider.
               * `calico_config.ip_pool_config`: - (Optional) List of IP pools to be configured/managed by calico.
               * `calico_config.ip_pool_config.cidr`: - (Optional) IP range to use for this pool, it should fall within pod cidr.
        :param pulumi.Input[Sequence[pulumi.Input['KarbonClusterCniConfigFlannelConfigArgs']]] flannel_configs: - (Optional) Configuration of the flannel container network interface (CNI) provider.
        :param pulumi.Input[int] node_cidr_mask_size: - (Optional) The size of the subnet from the pod_ipv4_cidr assigned to each host. A value of 24 would allow up to 255 pods per node.
        :param pulumi.Input[str] pod_ipv4_cidr: - (Optional) CIDR for pods in the cluster.
        :param pulumi.Input[str] service_ipv4_cidr: - (Optional) Classless inter-domain routing (CIDR) for k8s services in the cluster.
        """
        if calico_config is not None:
            pulumi.set(__self__, "calico_config", calico_config)
        if flannel_configs is not None:
            pulumi.set(__self__, "flannel_configs", flannel_configs)
        if node_cidr_mask_size is not None:
            pulumi.set(__self__, "node_cidr_mask_size", node_cidr_mask_size)
        if pod_ipv4_cidr is not None:
            pulumi.set(__self__, "pod_ipv4_cidr", pod_ipv4_cidr)
        if service_ipv4_cidr is not None:
            pulumi.set(__self__, "service_ipv4_cidr", service_ipv4_cidr)

    @property
    @pulumi.getter(name="calicoConfig")
    def calico_config(self) -> Optional[pulumi.Input['KarbonClusterCniConfigCalicoConfigArgs']]:
        """
        - (Optional) Configuration of the calico CNI provider.
        * `calico_config.ip_pool_config`: - (Optional) List of IP pools to be configured/managed by calico.
        * `calico_config.ip_pool_config.cidr`: - (Optional) IP range to use for this pool, it should fall within pod cidr.
        """
        return pulumi.get(self, "calico_config")

    @calico_config.setter
    def calico_config(self, value: Optional[pulumi.Input['KarbonClusterCniConfigCalicoConfigArgs']]):
        pulumi.set(self, "calico_config", value)

    @property
    @pulumi.getter(name="flannelConfigs")
    def flannel_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KarbonClusterCniConfigFlannelConfigArgs']]]]:
        """
        - (Optional) Configuration of the flannel container network interface (CNI) provider.
        """
        return pulumi.get(self, "flannel_configs")

    @flannel_configs.setter
    def flannel_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KarbonClusterCniConfigFlannelConfigArgs']]]]):
        pulumi.set(self, "flannel_configs", value)

    @property
    @pulumi.getter(name="nodeCidrMaskSize")
    def node_cidr_mask_size(self) -> Optional[pulumi.Input[int]]:
        """
        - (Optional) The size of the subnet from the pod_ipv4_cidr assigned to each host. A value of 24 would allow up to 255 pods per node.
        """
        return pulumi.get(self, "node_cidr_mask_size")

    @node_cidr_mask_size.setter
    def node_cidr_mask_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_cidr_mask_size", value)

    @property
    @pulumi.getter(name="podIpv4Cidr")
    def pod_ipv4_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) CIDR for pods in the cluster.
        """
        return pulumi.get(self, "pod_ipv4_cidr")

    @pod_ipv4_cidr.setter
    def pod_ipv4_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_ipv4_cidr", value)

    @property
    @pulumi.getter(name="serviceIpv4Cidr")
    def service_ipv4_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) Classless inter-domain routing (CIDR) for k8s services in the cluster.
        """
        return pulumi.get(self, "service_ipv4_cidr")

    @service_ipv4_cidr.setter
    def service_ipv4_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_ipv4_cidr", value)


if not MYPY:
    class KarbonClusterCniConfigCalicoConfigArgsDict(TypedDict):
        ip_pool_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['KarbonClusterCniConfigCalicoConfigIpPoolConfigArgsDict']]]]
elif False:
    KarbonClusterCniConfigCalicoConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonClusterCniConfigCalicoConfigArgs:
    def __init__(__self__, *,
                 ip_pool_configs: Optional[pulumi.Input[Sequence[pulumi.Input['KarbonClusterCniConfigCalicoConfigIpPoolConfigArgs']]]] = None):
        if ip_pool_configs is not None:
            pulumi.set(__self__, "ip_pool_configs", ip_pool_configs)

    @property
    @pulumi.getter(name="ipPoolConfigs")
    def ip_pool_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KarbonClusterCniConfigCalicoConfigIpPoolConfigArgs']]]]:
        return pulumi.get(self, "ip_pool_configs")

    @ip_pool_configs.setter
    def ip_pool_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KarbonClusterCniConfigCalicoConfigIpPoolConfigArgs']]]]):
        pulumi.set(self, "ip_pool_configs", value)


if not MYPY:
    class KarbonClusterCniConfigCalicoConfigIpPoolConfigArgsDict(TypedDict):
        cidr: NotRequired[pulumi.Input[str]]
elif False:
    KarbonClusterCniConfigCalicoConfigIpPoolConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonClusterCniConfigCalicoConfigIpPoolConfigArgs:
    def __init__(__self__, *,
                 cidr: Optional[pulumi.Input[str]] = None):
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)


if not MYPY:
    class KarbonClusterCniConfigFlannelConfigArgsDict(TypedDict):
        pass
elif False:
    KarbonClusterCniConfigFlannelConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonClusterCniConfigFlannelConfigArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class KarbonClusterEtcdNodePoolArgsDict(TypedDict):
        node_os_version: pulumi.Input[str]
        """
        - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        """
        num_instances: pulumi.Input[int]
        """
        - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        """
        ahv_config: NotRequired[pulumi.Input['KarbonClusterEtcdNodePoolAhvConfigArgsDict']]
        """
        - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
        * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
        * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
        * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
        * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
        * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
        """
        nodes: NotRequired[pulumi.Input[Sequence[pulumi.Input['KarbonClusterEtcdNodePoolNodeArgsDict']]]]
        """
        - List of the deployed nodes in the node pool.
        * `nodes.hostname`: - Hostname of the deployed node.
        * `nodes.ipv4_address`: - IP of the deployed node.
        """
elif False:
    KarbonClusterEtcdNodePoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonClusterEtcdNodePoolArgs:
    def __init__(__self__, *,
                 node_os_version: pulumi.Input[str],
                 num_instances: pulumi.Input[int],
                 ahv_config: Optional[pulumi.Input['KarbonClusterEtcdNodePoolAhvConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['KarbonClusterEtcdNodePoolNodeArgs']]]] = None):
        """
        :param pulumi.Input[str] node_os_version: - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        :param pulumi.Input[int] num_instances: - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        :param pulumi.Input['KarbonClusterEtcdNodePoolAhvConfigArgs'] ahv_config: - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
               * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
               * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
               * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
               * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
               * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        :param pulumi.Input[str] name: - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
        :param pulumi.Input[Sequence[pulumi.Input['KarbonClusterEtcdNodePoolNodeArgs']]] nodes: - List of the deployed nodes in the node pool.
               * `nodes.hostname`: - Hostname of the deployed node.
               * `nodes.ipv4_address`: - IP of the deployed node.
        """
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "num_instances", num_instances)
        if ahv_config is not None:
            pulumi.set(__self__, "ahv_config", ahv_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> pulumi.Input[str]:
        """
        - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "node_os_version")

    @node_os_version.setter
    def node_os_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_os_version", value)

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> pulumi.Input[int]:
        """
        - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        """
        return pulumi.get(self, "num_instances")

    @num_instances.setter
    def num_instances(self, value: pulumi.Input[int]):
        pulumi.set(self, "num_instances", value)

    @property
    @pulumi.getter(name="ahvConfig")
    def ahv_config(self) -> Optional[pulumi.Input['KarbonClusterEtcdNodePoolAhvConfigArgs']]:
        """
        - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
        * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
        * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
        * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
        * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
        * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "ahv_config")

    @ahv_config.setter
    def ahv_config(self, value: Optional[pulumi.Input['KarbonClusterEtcdNodePoolAhvConfigArgs']]):
        pulumi.set(self, "ahv_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KarbonClusterEtcdNodePoolNodeArgs']]]]:
        """
        - List of the deployed nodes in the node pool.
        * `nodes.hostname`: - Hostname of the deployed node.
        * `nodes.ipv4_address`: - IP of the deployed node.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KarbonClusterEtcdNodePoolNodeArgs']]]]):
        pulumi.set(self, "nodes", value)


if not MYPY:
    class KarbonClusterEtcdNodePoolAhvConfigArgsDict(TypedDict):
        network_uuid: pulumi.Input[str]
        prism_element_cluster_uuid: pulumi.Input[str]
        cpu: NotRequired[pulumi.Input[int]]
        disk_mib: NotRequired[pulumi.Input[int]]
        memory_mib: NotRequired[pulumi.Input[int]]
elif False:
    KarbonClusterEtcdNodePoolAhvConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonClusterEtcdNodePoolAhvConfigArgs:
    def __init__(__self__, *,
                 network_uuid: pulumi.Input[str],
                 prism_element_cluster_uuid: pulumi.Input[str],
                 cpu: Optional[pulumi.Input[int]] = None,
                 disk_mib: Optional[pulumi.Input[int]] = None,
                 memory_mib: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_mib is not None:
            pulumi.set(__self__, "disk_mib", disk_mib)
        if memory_mib is not None:
            pulumi.set(__self__, "memory_mib", memory_mib)

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "network_uuid")

    @network_uuid.setter
    def network_uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_uuid", value)

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "prism_element_cluster_uuid")

    @prism_element_cluster_uuid.setter
    def prism_element_cluster_uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "prism_element_cluster_uuid", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disk_mib")

    @disk_mib.setter
    def disk_mib(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_mib", value)

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "memory_mib")

    @memory_mib.setter
    def memory_mib(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_mib", value)


if not MYPY:
    class KarbonClusterEtcdNodePoolNodeArgsDict(TypedDict):
        hostname: NotRequired[pulumi.Input[str]]
        ipv4_address: NotRequired[pulumi.Input[str]]
elif False:
    KarbonClusterEtcdNodePoolNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonClusterEtcdNodePoolNodeArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None,
                 ipv4_address: Optional[pulumi.Input[str]] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_address", value)


if not MYPY:
    class KarbonClusterExternalLbConfigArgsDict(TypedDict):
        external_ipv4_address: pulumi.Input[str]
        master_nodes_configs: pulumi.Input[Sequence[pulumi.Input['KarbonClusterExternalLbConfigMasterNodesConfigArgsDict']]]
elif False:
    KarbonClusterExternalLbConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonClusterExternalLbConfigArgs:
    def __init__(__self__, *,
                 external_ipv4_address: pulumi.Input[str],
                 master_nodes_configs: pulumi.Input[Sequence[pulumi.Input['KarbonClusterExternalLbConfigMasterNodesConfigArgs']]]):
        pulumi.set(__self__, "external_ipv4_address", external_ipv4_address)
        pulumi.set(__self__, "master_nodes_configs", master_nodes_configs)

    @property
    @pulumi.getter(name="externalIpv4Address")
    def external_ipv4_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "external_ipv4_address")

    @external_ipv4_address.setter
    def external_ipv4_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "external_ipv4_address", value)

    @property
    @pulumi.getter(name="masterNodesConfigs")
    def master_nodes_configs(self) -> pulumi.Input[Sequence[pulumi.Input['KarbonClusterExternalLbConfigMasterNodesConfigArgs']]]:
        return pulumi.get(self, "master_nodes_configs")

    @master_nodes_configs.setter
    def master_nodes_configs(self, value: pulumi.Input[Sequence[pulumi.Input['KarbonClusterExternalLbConfigMasterNodesConfigArgs']]]):
        pulumi.set(self, "master_nodes_configs", value)


if not MYPY:
    class KarbonClusterExternalLbConfigMasterNodesConfigArgsDict(TypedDict):
        ipv4_address: pulumi.Input[str]
        node_pool_name: NotRequired[pulumi.Input[str]]
elif False:
    KarbonClusterExternalLbConfigMasterNodesConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonClusterExternalLbConfigMasterNodesConfigArgs:
    def __init__(__self__, *,
                 ipv4_address: pulumi.Input[str],
                 node_pool_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        if node_pool_name is not None:
            pulumi.set(__self__, "node_pool_name", node_pool_name)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "ipv4_address", value)

    @property
    @pulumi.getter(name="nodePoolName")
    def node_pool_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_pool_name")

    @node_pool_name.setter
    def node_pool_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_pool_name", value)


if not MYPY:
    class KarbonClusterMasterNodePoolArgsDict(TypedDict):
        node_os_version: pulumi.Input[str]
        """
        - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        """
        num_instances: pulumi.Input[int]
        """
        - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        """
        ahv_config: NotRequired[pulumi.Input['KarbonClusterMasterNodePoolAhvConfigArgsDict']]
        """
        - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
        * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
        * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
        * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
        * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
        * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
        """
        nodes: NotRequired[pulumi.Input[Sequence[pulumi.Input['KarbonClusterMasterNodePoolNodeArgsDict']]]]
        """
        - List of the deployed nodes in the node pool.
        * `nodes.hostname`: - Hostname of the deployed node.
        * `nodes.ipv4_address`: - IP of the deployed node.
        """
elif False:
    KarbonClusterMasterNodePoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonClusterMasterNodePoolArgs:
    def __init__(__self__, *,
                 node_os_version: pulumi.Input[str],
                 num_instances: pulumi.Input[int],
                 ahv_config: Optional[pulumi.Input['KarbonClusterMasterNodePoolAhvConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['KarbonClusterMasterNodePoolNodeArgs']]]] = None):
        """
        :param pulumi.Input[str] node_os_version: - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        :param pulumi.Input[int] num_instances: - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        :param pulumi.Input['KarbonClusterMasterNodePoolAhvConfigArgs'] ahv_config: - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
               * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
               * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
               * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
               * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
               * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        :param pulumi.Input[str] name: - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
        :param pulumi.Input[Sequence[pulumi.Input['KarbonClusterMasterNodePoolNodeArgs']]] nodes: - List of the deployed nodes in the node pool.
               * `nodes.hostname`: - Hostname of the deployed node.
               * `nodes.ipv4_address`: - IP of the deployed node.
        """
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "num_instances", num_instances)
        if ahv_config is not None:
            pulumi.set(__self__, "ahv_config", ahv_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> pulumi.Input[str]:
        """
        - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "node_os_version")

    @node_os_version.setter
    def node_os_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_os_version", value)

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> pulumi.Input[int]:
        """
        - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        """
        return pulumi.get(self, "num_instances")

    @num_instances.setter
    def num_instances(self, value: pulumi.Input[int]):
        pulumi.set(self, "num_instances", value)

    @property
    @pulumi.getter(name="ahvConfig")
    def ahv_config(self) -> Optional[pulumi.Input['KarbonClusterMasterNodePoolAhvConfigArgs']]:
        """
        - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
        * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
        * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
        * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
        * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
        * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "ahv_config")

    @ahv_config.setter
    def ahv_config(self, value: Optional[pulumi.Input['KarbonClusterMasterNodePoolAhvConfigArgs']]):
        pulumi.set(self, "ahv_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KarbonClusterMasterNodePoolNodeArgs']]]]:
        """
        - List of the deployed nodes in the node pool.
        * `nodes.hostname`: - Hostname of the deployed node.
        * `nodes.ipv4_address`: - IP of the deployed node.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KarbonClusterMasterNodePoolNodeArgs']]]]):
        pulumi.set(self, "nodes", value)


if not MYPY:
    class KarbonClusterMasterNodePoolAhvConfigArgsDict(TypedDict):
        network_uuid: pulumi.Input[str]
        prism_element_cluster_uuid: pulumi.Input[str]
        cpu: NotRequired[pulumi.Input[int]]
        disk_mib: NotRequired[pulumi.Input[int]]
        memory_mib: NotRequired[pulumi.Input[int]]
elif False:
    KarbonClusterMasterNodePoolAhvConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonClusterMasterNodePoolAhvConfigArgs:
    def __init__(__self__, *,
                 network_uuid: pulumi.Input[str],
                 prism_element_cluster_uuid: pulumi.Input[str],
                 cpu: Optional[pulumi.Input[int]] = None,
                 disk_mib: Optional[pulumi.Input[int]] = None,
                 memory_mib: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_mib is not None:
            pulumi.set(__self__, "disk_mib", disk_mib)
        if memory_mib is not None:
            pulumi.set(__self__, "memory_mib", memory_mib)

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "network_uuid")

    @network_uuid.setter
    def network_uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_uuid", value)

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "prism_element_cluster_uuid")

    @prism_element_cluster_uuid.setter
    def prism_element_cluster_uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "prism_element_cluster_uuid", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disk_mib")

    @disk_mib.setter
    def disk_mib(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_mib", value)

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "memory_mib")

    @memory_mib.setter
    def memory_mib(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_mib", value)


if not MYPY:
    class KarbonClusterMasterNodePoolNodeArgsDict(TypedDict):
        hostname: NotRequired[pulumi.Input[str]]
        ipv4_address: NotRequired[pulumi.Input[str]]
elif False:
    KarbonClusterMasterNodePoolNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonClusterMasterNodePoolNodeArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None,
                 ipv4_address: Optional[pulumi.Input[str]] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_address", value)


if not MYPY:
    class KarbonClusterPrivateRegistryArgsDict(TypedDict):
        registry_name: pulumi.Input[str]
elif False:
    KarbonClusterPrivateRegistryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonClusterPrivateRegistryArgs:
    def __init__(__self__, *,
                 registry_name: pulumi.Input[str]):
        pulumi.set(__self__, "registry_name", registry_name)

    @property
    @pulumi.getter(name="registryName")
    def registry_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "registry_name")

    @registry_name.setter
    def registry_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "registry_name", value)


if not MYPY:
    class KarbonClusterSingleMasterConfigArgsDict(TypedDict):
        pass
elif False:
    KarbonClusterSingleMasterConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonClusterSingleMasterConfigArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class KarbonClusterStorageClassConfigArgsDict(TypedDict):
        volumes_config: pulumi.Input['KarbonClusterStorageClassConfigVolumesConfigArgsDict']
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) The name of the storage class.
        """
        reclaim_policy: NotRequired[pulumi.Input[str]]
        """
        Reclaim policy for persistent volumes provisioned using the specified storage class.
        * `volumes_config.#.file_system` - (Optional) Karbon uses either the ext4 or xfs file-system on the volume disk.
        * `volumes_config.#.flash_mode` - (Optional) Pins the persistent volumes to the flash tier in case of a `true` value.
        * `volumes_config.#.password` - (Required) The password of the Prism Element user that the API calls use to provision volumes.
        * `volumes_config.#.prism_element_cluster_uuid` - (Required) The universally unique identifier (UUID) of the Prism Element cluster.
        * `volumes_config.#.storage_container` - (Required) Name of the storage container the storage container uses to provision volumes.
        * `volumes_config.#.username` - (Required) Username of the Prism Element user that the API calls use to provision volumes.

        **Note:** Updates to this attribute forces new resource creation.
        """
elif False:
    KarbonClusterStorageClassConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonClusterStorageClassConfigArgs:
    def __init__(__self__, *,
                 volumes_config: pulumi.Input['KarbonClusterStorageClassConfigVolumesConfigArgs'],
                 name: Optional[pulumi.Input[str]] = None,
                 reclaim_policy: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: - (Required) The name of the storage class.
        :param pulumi.Input[str] reclaim_policy: Reclaim policy for persistent volumes provisioned using the specified storage class.
               * `volumes_config.#.file_system` - (Optional) Karbon uses either the ext4 or xfs file-system on the volume disk.
               * `volumes_config.#.flash_mode` - (Optional) Pins the persistent volumes to the flash tier in case of a `true` value.
               * `volumes_config.#.password` - (Required) The password of the Prism Element user that the API calls use to provision volumes.
               * `volumes_config.#.prism_element_cluster_uuid` - (Required) The universally unique identifier (UUID) of the Prism Element cluster.
               * `volumes_config.#.storage_container` - (Required) Name of the storage container the storage container uses to provision volumes.
               * `volumes_config.#.username` - (Required) Username of the Prism Element user that the API calls use to provision volumes.
               
               **Note:** Updates to this attribute forces new resource creation.
        """
        pulumi.set(__self__, "volumes_config", volumes_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if reclaim_policy is not None:
            pulumi.set(__self__, "reclaim_policy", reclaim_policy)

    @property
    @pulumi.getter(name="volumesConfig")
    def volumes_config(self) -> pulumi.Input['KarbonClusterStorageClassConfigVolumesConfigArgs']:
        return pulumi.get(self, "volumes_config")

    @volumes_config.setter
    def volumes_config(self, value: pulumi.Input['KarbonClusterStorageClassConfigVolumesConfigArgs']):
        pulumi.set(self, "volumes_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) The name of the storage class.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="reclaimPolicy")
    def reclaim_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Reclaim policy for persistent volumes provisioned using the specified storage class.
        * `volumes_config.#.file_system` - (Optional) Karbon uses either the ext4 or xfs file-system on the volume disk.
        * `volumes_config.#.flash_mode` - (Optional) Pins the persistent volumes to the flash tier in case of a `true` value.
        * `volumes_config.#.password` - (Required) The password of the Prism Element user that the API calls use to provision volumes.
        * `volumes_config.#.prism_element_cluster_uuid` - (Required) The universally unique identifier (UUID) of the Prism Element cluster.
        * `volumes_config.#.storage_container` - (Required) Name of the storage container the storage container uses to provision volumes.
        * `volumes_config.#.username` - (Required) Username of the Prism Element user that the API calls use to provision volumes.

        **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "reclaim_policy")

    @reclaim_policy.setter
    def reclaim_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reclaim_policy", value)


if not MYPY:
    class KarbonClusterStorageClassConfigVolumesConfigArgsDict(TypedDict):
        password: pulumi.Input[str]
        prism_element_cluster_uuid: pulumi.Input[str]
        storage_container: pulumi.Input[str]
        username: pulumi.Input[str]
        file_system: NotRequired[pulumi.Input[str]]
        flash_mode: NotRequired[pulumi.Input[bool]]
elif False:
    KarbonClusterStorageClassConfigVolumesConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonClusterStorageClassConfigVolumesConfigArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 prism_element_cluster_uuid: pulumi.Input[str],
                 storage_container: pulumi.Input[str],
                 username: pulumi.Input[str],
                 file_system: Optional[pulumi.Input[str]] = None,
                 flash_mode: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)
        pulumi.set(__self__, "storage_container", storage_container)
        pulumi.set(__self__, "username", username)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if flash_mode is not None:
            pulumi.set(__self__, "flash_mode", flash_mode)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "prism_element_cluster_uuid")

    @prism_element_cluster_uuid.setter
    def prism_element_cluster_uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "prism_element_cluster_uuid", value)

    @property
    @pulumi.getter(name="storageContainer")
    def storage_container(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage_container")

    @storage_container.setter
    def storage_container(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_container", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter(name="flashMode")
    def flash_mode(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flash_mode")

    @flash_mode.setter
    def flash_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flash_mode", value)


if not MYPY:
    class KarbonClusterWorkerNodePoolArgsDict(TypedDict):
        node_os_version: pulumi.Input[str]
        """
        - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        """
        num_instances: pulumi.Input[int]
        """
        - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        """
        ahv_config: NotRequired[pulumi.Input['KarbonClusterWorkerNodePoolAhvConfigArgsDict']]
        """
        - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
        * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
        * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
        * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
        * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
        * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
        """
        nodes: NotRequired[pulumi.Input[Sequence[pulumi.Input['KarbonClusterWorkerNodePoolNodeArgsDict']]]]
        """
        - List of the deployed nodes in the node pool.
        * `nodes.hostname`: - Hostname of the deployed node.
        * `nodes.ipv4_address`: - IP of the deployed node.
        """
elif False:
    KarbonClusterWorkerNodePoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonClusterWorkerNodePoolArgs:
    def __init__(__self__, *,
                 node_os_version: pulumi.Input[str],
                 num_instances: pulumi.Input[int],
                 ahv_config: Optional[pulumi.Input['KarbonClusterWorkerNodePoolAhvConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['KarbonClusterWorkerNodePoolNodeArgs']]]] = None):
        """
        :param pulumi.Input[str] node_os_version: - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        :param pulumi.Input[int] num_instances: - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        :param pulumi.Input['KarbonClusterWorkerNodePoolAhvConfigArgs'] ahv_config: - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
               * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
               * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
               * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
               * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
               * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        :param pulumi.Input[str] name: - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
        :param pulumi.Input[Sequence[pulumi.Input['KarbonClusterWorkerNodePoolNodeArgs']]] nodes: - List of the deployed nodes in the node pool.
               * `nodes.hostname`: - Hostname of the deployed node.
               * `nodes.ipv4_address`: - IP of the deployed node.
        """
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "num_instances", num_instances)
        if ahv_config is not None:
            pulumi.set(__self__, "ahv_config", ahv_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> pulumi.Input[str]:
        """
        - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "node_os_version")

    @node_os_version.setter
    def node_os_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_os_version", value)

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> pulumi.Input[int]:
        """
        - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        """
        return pulumi.get(self, "num_instances")

    @num_instances.setter
    def num_instances(self, value: pulumi.Input[int]):
        pulumi.set(self, "num_instances", value)

    @property
    @pulumi.getter(name="ahvConfig")
    def ahv_config(self) -> Optional[pulumi.Input['KarbonClusterWorkerNodePoolAhvConfigArgs']]:
        """
        - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
        * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
        * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
        * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
        * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
        * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "ahv_config")

    @ahv_config.setter
    def ahv_config(self, value: Optional[pulumi.Input['KarbonClusterWorkerNodePoolAhvConfigArgs']]):
        pulumi.set(self, "ahv_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KarbonClusterWorkerNodePoolNodeArgs']]]]:
        """
        - List of the deployed nodes in the node pool.
        * `nodes.hostname`: - Hostname of the deployed node.
        * `nodes.ipv4_address`: - IP of the deployed node.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KarbonClusterWorkerNodePoolNodeArgs']]]]):
        pulumi.set(self, "nodes", value)


if not MYPY:
    class KarbonClusterWorkerNodePoolAhvConfigArgsDict(TypedDict):
        network_uuid: pulumi.Input[str]
        prism_element_cluster_uuid: pulumi.Input[str]
        cpu: NotRequired[pulumi.Input[int]]
        disk_mib: NotRequired[pulumi.Input[int]]
        memory_mib: NotRequired[pulumi.Input[int]]
elif False:
    KarbonClusterWorkerNodePoolAhvConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonClusterWorkerNodePoolAhvConfigArgs:
    def __init__(__self__, *,
                 network_uuid: pulumi.Input[str],
                 prism_element_cluster_uuid: pulumi.Input[str],
                 cpu: Optional[pulumi.Input[int]] = None,
                 disk_mib: Optional[pulumi.Input[int]] = None,
                 memory_mib: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_mib is not None:
            pulumi.set(__self__, "disk_mib", disk_mib)
        if memory_mib is not None:
            pulumi.set(__self__, "memory_mib", memory_mib)

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "network_uuid")

    @network_uuid.setter
    def network_uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_uuid", value)

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "prism_element_cluster_uuid")

    @prism_element_cluster_uuid.setter
    def prism_element_cluster_uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "prism_element_cluster_uuid", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disk_mib")

    @disk_mib.setter
    def disk_mib(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_mib", value)

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "memory_mib")

    @memory_mib.setter
    def memory_mib(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_mib", value)


if not MYPY:
    class KarbonClusterWorkerNodePoolNodeArgsDict(TypedDict):
        hostname: NotRequired[pulumi.Input[str]]
        ipv4_address: NotRequired[pulumi.Input[str]]
elif False:
    KarbonClusterWorkerNodePoolNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonClusterWorkerNodePoolNodeArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None,
                 ipv4_address: Optional[pulumi.Input[str]] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_address", value)


if not MYPY:
    class KarbonWorkerNodepoolAhvConfigArgsDict(TypedDict):
        network_uuid: pulumi.Input[str]
        """
        - (Required) The UUID of the network for the VMs deployed with this resource configuration.
        """
        cpu: NotRequired[pulumi.Input[int]]
        """
        - (Required) The number of VCPUs allocated for each VM on the PE cluster.
        """
        disk_mib: NotRequired[pulumi.Input[int]]
        """
        - (Optional) Size of local storage for each VM on the PE cluster in MiB.
        """
        iscsi_network_uuid: NotRequired[pulumi.Input[str]]
        """
        VM network UUID for isolating iscsi data traffic.
        """
        memory_mib: NotRequired[pulumi.Input[int]]
        """
        - (Optional) Memory allocated for each VM on the PE cluster in MiB.
        """
        prism_element_cluster_uuid: NotRequired[pulumi.Input[str]]
        """
        - (Optional) The unique universal identifier (UUID) of the Prism Element
        """
elif False:
    KarbonWorkerNodepoolAhvConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonWorkerNodepoolAhvConfigArgs:
    def __init__(__self__, *,
                 network_uuid: pulumi.Input[str],
                 cpu: Optional[pulumi.Input[int]] = None,
                 disk_mib: Optional[pulumi.Input[int]] = None,
                 iscsi_network_uuid: Optional[pulumi.Input[str]] = None,
                 memory_mib: Optional[pulumi.Input[int]] = None,
                 prism_element_cluster_uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] network_uuid: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
        :param pulumi.Input[int] cpu: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
        :param pulumi.Input[int] disk_mib: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
        :param pulumi.Input[str] iscsi_network_uuid: VM network UUID for isolating iscsi data traffic.
        :param pulumi.Input[int] memory_mib: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
        :param pulumi.Input[str] prism_element_cluster_uuid: - (Optional) The unique universal identifier (UUID) of the Prism Element
        """
        pulumi.set(__self__, "network_uuid", network_uuid)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_mib is not None:
            pulumi.set(__self__, "disk_mib", disk_mib)
        if iscsi_network_uuid is not None:
            pulumi.set(__self__, "iscsi_network_uuid", iscsi_network_uuid)
        if memory_mib is not None:
            pulumi.set(__self__, "memory_mib", memory_mib)
        if prism_element_cluster_uuid is not None:
            pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> pulumi.Input[str]:
        """
        - (Required) The UUID of the network for the VMs deployed with this resource configuration.
        """
        return pulumi.get(self, "network_uuid")

    @network_uuid.setter
    def network_uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_uuid", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        - (Required) The number of VCPUs allocated for each VM on the PE cluster.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> Optional[pulumi.Input[int]]:
        """
        - (Optional) Size of local storage for each VM on the PE cluster in MiB.
        """
        return pulumi.get(self, "disk_mib")

    @disk_mib.setter
    def disk_mib(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_mib", value)

    @property
    @pulumi.getter(name="iscsiNetworkUuid")
    def iscsi_network_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        VM network UUID for isolating iscsi data traffic.
        """
        return pulumi.get(self, "iscsi_network_uuid")

    @iscsi_network_uuid.setter
    def iscsi_network_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iscsi_network_uuid", value)

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> Optional[pulumi.Input[int]]:
        """
        - (Optional) Memory allocated for each VM on the PE cluster in MiB.
        """
        return pulumi.get(self, "memory_mib")

    @memory_mib.setter
    def memory_mib(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_mib", value)

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) The unique universal identifier (UUID) of the Prism Element
        """
        return pulumi.get(self, "prism_element_cluster_uuid")

    @prism_element_cluster_uuid.setter
    def prism_element_cluster_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prism_element_cluster_uuid", value)


if not MYPY:
    class KarbonWorkerNodepoolNodeArgsDict(TypedDict):
        hostname: NotRequired[pulumi.Input[str]]
        """
        hostname of node
        """
        ipv4_address: NotRequired[pulumi.Input[str]]
        """
        ipv4 address of node
        """
elif False:
    KarbonWorkerNodepoolNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KarbonWorkerNodepoolNodeArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None,
                 ipv4_address: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] hostname: hostname of node
        :param pulumi.Input[str] ipv4_address: ipv4 address of node
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        hostname of node
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[str]]:
        """
        ipv4 address of node
        """
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_address", value)


if not MYPY:
    class NdbCloneActionargumentArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        - (Required) name of argument
        """
        value: pulumi.Input[str]
        """
        - (Required) value for argument
        """
elif False:
    NdbCloneActionargumentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneActionargumentArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: - (Required) name of argument
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Required) name of argument
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbCloneDatabaseNodeArgsDict(TypedDict):
        access_level: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        database_id: NotRequired[pulumi.Input[str]]
        database_status: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for clone
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        last modified date for clone
        """
        dbserver: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        dbserver_id: NotRequired[pulumi.Input[str]]
        """
        Specify if you want to create a database server. This value can be set to true or false as required.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        database instance description
        """
        id: NotRequired[pulumi.Input[str]]
        infos: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodeInfoArgsDict']]]]
        """
        info of clone
        """
        name: NotRequired[pulumi.Input[str]]
        """
        database instance name
        """
        primary: NotRequired[pulumi.Input[bool]]
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodePropertyArgsDict']]]]
        """
        List of all the properties
        """
        protection_domain_id: NotRequired[pulumi.Input[str]]
        protection_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodeProtectionDomainArgsDict']]]]
        software_installation_id: NotRequired[pulumi.Input[str]]
        status: NotRequired[pulumi.Input[str]]
        """
        status of clone
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodeTagArgsDict']]]]
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
elif False:
    NdbCloneDatabaseNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneDatabaseNodeArgs:
    def __init__(__self__, *,
                 access_level: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 database_id: Optional[pulumi.Input[str]] = None,
                 database_status: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 dbserver: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 dbserver_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodeInfoArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodePropertyArgs']]]] = None,
                 protection_domain_id: Optional[pulumi.Input[str]] = None,
                 protection_domains: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodeProtectionDomainArgs']]]] = None,
                 software_installation_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodeTagArgs']]]] = None):
        """
        :param pulumi.Input[str] date_created: date created for clone
        :param pulumi.Input[str] date_modified: last modified date for clone
        :param pulumi.Input[str] dbserver_id: Specify if you want to create a database server. This value can be set to true or false as required.
        :param pulumi.Input[str] description: database instance description
        :param pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodeInfoArgs']]] infos: info of clone
        :param pulumi.Input[str] name: database instance name
        :param pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodePropertyArgs']]] properties: List of all the properties
        :param pulumi.Input[str] status: status of clone
        :param pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodeTagArgs']]] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if dbserver is not None:
            pulumi.set(__self__, "dbserver", dbserver)
        if dbserver_id is not None:
            pulumi.set(__self__, "dbserver_id", dbserver_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if protection_domain_id is not None:
            pulumi.set(__self__, "protection_domain_id", protection_domain_id)
        if protection_domains is not None:
            pulumi.set(__self__, "protection_domains", protection_domains)
        if software_installation_id is not None:
            pulumi.set(__self__, "software_installation_id", software_installation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "access_level")

    @access_level.setter
    def access_level(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "access_level", value)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_id", value)

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_status")

    @database_status.setter
    def database_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_status", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def dbserver(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "dbserver")

    @dbserver.setter
    def dbserver(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "dbserver", value)

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specify if you want to create a database server. This value can be set to true or false as required.
        """
        return pulumi.get(self, "dbserver_id")

    @dbserver_id.setter
    def dbserver_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbserver_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        database instance description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodeInfoArgs']]]]:
        """
        info of clone
        """
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodeInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodePropertyArgs']]]]:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodePropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="protectionDomainId")
    def protection_domain_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protection_domain_id")

    @protection_domain_id.setter
    def protection_domain_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_domain_id", value)

    @property
    @pulumi.getter(name="protectionDomains")
    def protection_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodeProtectionDomainArgs']]]]:
        return pulumi.get(self, "protection_domains")

    @protection_domains.setter
    def protection_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodeProtectionDomainArgs']]]]):
        pulumi.set(self, "protection_domains", value)

    @property
    @pulumi.getter(name="softwareInstallationId")
    def software_installation_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "software_installation_id")

    @software_installation_id.setter
    def software_installation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "software_installation_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of clone
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodeTagArgs']]]]:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodeTagArgs']]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class NdbCloneDatabaseNodeInfoArgsDict(TypedDict):
        info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        info of clone
        """
        secure_info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    NdbCloneDatabaseNodeInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneDatabaseNodeInfoArgs:
    def __init__(__self__, *,
                 info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 secure_info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] info: info of clone
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        info of clone
        """
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "secure_info")

    @secure_info.setter
    def secure_info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secure_info", value)


if not MYPY:
    class NdbCloneDatabaseNodePropertyArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        database instance description
        """
        name: NotRequired[pulumi.Input[str]]
        """
        database instance name
        """
        ref_id: NotRequired[pulumi.Input[str]]
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbCloneDatabaseNodePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneDatabaseNodePropertyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: database instance description
        :param pulumi.Input[str] name: database instance name
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        database instance description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbCloneDatabaseNodeProtectionDomainArgsDict(TypedDict):
        assoc_entities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        cloud_id: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for clone
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        last modified date for clone
        """
        description: NotRequired[pulumi.Input[str]]
        """
        database instance description
        """
        era_created: NotRequired[pulumi.Input[bool]]
        id: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        """
        database instance name
        """
        owner_id: NotRequired[pulumi.Input[str]]
        primary_host: NotRequired[pulumi.Input[str]]
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodeProtectionDomainPropertyArgsDict']]]]
        """
        List of all the properties
        """
        status: NotRequired[pulumi.Input[str]]
        """
        status of clone
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type of clone
        """
elif False:
    NdbCloneDatabaseNodeProtectionDomainArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneDatabaseNodeProtectionDomainArgs:
    def __init__(__self__, *,
                 assoc_entities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cloud_id: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 era_created: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 primary_host: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodeProtectionDomainPropertyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] date_created: date created for clone
        :param pulumi.Input[str] date_modified: last modified date for clone
        :param pulumi.Input[str] description: database instance description
        :param pulumi.Input[str] name: database instance name
        :param pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodeProtectionDomainPropertyArgs']]] properties: List of all the properties
        :param pulumi.Input[str] status: status of clone
        :param pulumi.Input[str] type: type of clone
        """
        if assoc_entities is not None:
            pulumi.set(__self__, "assoc_entities", assoc_entities)
        if cloud_id is not None:
            pulumi.set(__self__, "cloud_id", cloud_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if era_created is not None:
            pulumi.set(__self__, "era_created", era_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if primary_host is not None:
            pulumi.set(__self__, "primary_host", primary_host)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assocEntities")
    def assoc_entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "assoc_entities")

    @assoc_entities.setter
    def assoc_entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "assoc_entities", value)

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_id")

    @cloud_id.setter
    def cloud_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_id", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        database instance description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="eraCreated")
    def era_created(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "era_created")

    @era_created.setter
    def era_created(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "era_created", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="primaryHost")
    def primary_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_host")

    @primary_host.setter
    def primary_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_host", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodeProtectionDomainPropertyArgs']]]]:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneDatabaseNodeProtectionDomainPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of clone
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type of clone
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NdbCloneDatabaseNodeProtectionDomainPropertyArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        database instance description
        """
        name: NotRequired[pulumi.Input[str]]
        """
        database instance name
        """
        ref_id: NotRequired[pulumi.Input[str]]
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbCloneDatabaseNodeProtectionDomainPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneDatabaseNodeProtectionDomainPropertyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: database instance description
        :param pulumi.Input[str] name: database instance name
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        database instance description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbCloneDatabaseNodeTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbCloneDatabaseNodeTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneDatabaseNodeTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbCloneInfoArgsDict(TypedDict):
        bpg_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigArgsDict']]]]
        secure_info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    NdbCloneInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneInfoArgs:
    def __init__(__self__, *,
                 bpg_configs: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigArgs']]]] = None,
                 secure_info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if bpg_configs is not None:
            pulumi.set(__self__, "bpg_configs", bpg_configs)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="bpgConfigs")
    def bpg_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigArgs']]]]:
        return pulumi.get(self, "bpg_configs")

    @bpg_configs.setter
    def bpg_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigArgs']]]]):
        pulumi.set(self, "bpg_configs", value)

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "secure_info")

    @secure_info.setter
    def secure_info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secure_info", value)


if not MYPY:
    class NdbCloneInfoBpgConfigArgsDict(TypedDict):
        bpg_db_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigBpgDbParamArgsDict']]]]
        storages: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigStorageArgsDict']]]]
        vm_properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigVmPropertyArgsDict']]]]
elif False:
    NdbCloneInfoBpgConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneInfoBpgConfigArgs:
    def __init__(__self__, *,
                 bpg_db_params: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigBpgDbParamArgs']]]] = None,
                 storages: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigStorageArgs']]]] = None,
                 vm_properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigVmPropertyArgs']]]] = None):
        if bpg_db_params is not None:
            pulumi.set(__self__, "bpg_db_params", bpg_db_params)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if vm_properties is not None:
            pulumi.set(__self__, "vm_properties", vm_properties)

    @property
    @pulumi.getter(name="bpgDbParams")
    def bpg_db_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigBpgDbParamArgs']]]]:
        return pulumi.get(self, "bpg_db_params")

    @bpg_db_params.setter
    def bpg_db_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigBpgDbParamArgs']]]]):
        pulumi.set(self, "bpg_db_params", value)

    @property
    @pulumi.getter
    def storages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigStorageArgs']]]]:
        return pulumi.get(self, "storages")

    @storages.setter
    def storages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigStorageArgs']]]]):
        pulumi.set(self, "storages", value)

    @property
    @pulumi.getter(name="vmProperties")
    def vm_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigVmPropertyArgs']]]]:
        return pulumi.get(self, "vm_properties")

    @vm_properties.setter
    def vm_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigVmPropertyArgs']]]]):
        pulumi.set(self, "vm_properties", value)


if not MYPY:
    class NdbCloneInfoBpgConfigBpgDbParamArgsDict(TypedDict):
        effective_cache_size: NotRequired[pulumi.Input[str]]
        maintenance_work_mem: NotRequired[pulumi.Input[str]]
        max_parallel_workers_per_gather: NotRequired[pulumi.Input[str]]
        max_worker_processes: NotRequired[pulumi.Input[str]]
        shared_buffers: NotRequired[pulumi.Input[str]]
        work_mem: NotRequired[pulumi.Input[str]]
elif False:
    NdbCloneInfoBpgConfigBpgDbParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneInfoBpgConfigBpgDbParamArgs:
    def __init__(__self__, *,
                 effective_cache_size: Optional[pulumi.Input[str]] = None,
                 maintenance_work_mem: Optional[pulumi.Input[str]] = None,
                 max_parallel_workers_per_gather: Optional[pulumi.Input[str]] = None,
                 max_worker_processes: Optional[pulumi.Input[str]] = None,
                 shared_buffers: Optional[pulumi.Input[str]] = None,
                 work_mem: Optional[pulumi.Input[str]] = None):
        if effective_cache_size is not None:
            pulumi.set(__self__, "effective_cache_size", effective_cache_size)
        if maintenance_work_mem is not None:
            pulumi.set(__self__, "maintenance_work_mem", maintenance_work_mem)
        if max_parallel_workers_per_gather is not None:
            pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if shared_buffers is not None:
            pulumi.set(__self__, "shared_buffers", shared_buffers)
        if work_mem is not None:
            pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="effectiveCacheSize")
    def effective_cache_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effective_cache_size")

    @effective_cache_size.setter
    def effective_cache_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effective_cache_size", value)

    @property
    @pulumi.getter(name="maintenanceWorkMem")
    def maintenance_work_mem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maintenance_work_mem")

    @maintenance_work_mem.setter
    def maintenance_work_mem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_work_mem", value)

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @max_parallel_workers_per_gather.setter
    def max_parallel_workers_per_gather(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_parallel_workers_per_gather", value)

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_worker_processes")

    @max_worker_processes.setter
    def max_worker_processes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_worker_processes", value)

    @property
    @pulumi.getter(name="sharedBuffers")
    def shared_buffers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shared_buffers")

    @shared_buffers.setter
    def shared_buffers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shared_buffers", value)

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "work_mem")

    @work_mem.setter
    def work_mem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_mem", value)


if not MYPY:
    class NdbCloneInfoBpgConfigStorageArgsDict(TypedDict):
        archive_storages: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigStorageArchiveStorageArgsDict']]]]
        data_disks: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigStorageDataDiskArgsDict']]]]
        log_disks: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigStorageLogDiskArgsDict']]]]
elif False:
    NdbCloneInfoBpgConfigStorageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneInfoBpgConfigStorageArgs:
    def __init__(__self__, *,
                 archive_storages: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigStorageArchiveStorageArgs']]]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigStorageDataDiskArgs']]]] = None,
                 log_disks: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigStorageLogDiskArgs']]]] = None):
        if archive_storages is not None:
            pulumi.set(__self__, "archive_storages", archive_storages)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if log_disks is not None:
            pulumi.set(__self__, "log_disks", log_disks)

    @property
    @pulumi.getter(name="archiveStorages")
    def archive_storages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigStorageArchiveStorageArgs']]]]:
        return pulumi.get(self, "archive_storages")

    @archive_storages.setter
    def archive_storages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigStorageArchiveStorageArgs']]]]):
        pulumi.set(self, "archive_storages", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigStorageDataDiskArgs']]]]:
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigStorageDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="logDisks")
    def log_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigStorageLogDiskArgs']]]]:
        return pulumi.get(self, "log_disks")

    @log_disks.setter
    def log_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneInfoBpgConfigStorageLogDiskArgs']]]]):
        pulumi.set(self, "log_disks", value)


if not MYPY:
    class NdbCloneInfoBpgConfigStorageArchiveStorageArgsDict(TypedDict):
        size: NotRequired[pulumi.Input[float]]
elif False:
    NdbCloneInfoBpgConfigStorageArchiveStorageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneInfoBpgConfigStorageArchiveStorageArgs:
    def __init__(__self__, *,
                 size: Optional[pulumi.Input[float]] = None):
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "size", value)


if not MYPY:
    class NdbCloneInfoBpgConfigStorageDataDiskArgsDict(TypedDict):
        count: NotRequired[pulumi.Input[float]]
elif False:
    NdbCloneInfoBpgConfigStorageDataDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneInfoBpgConfigStorageDataDiskArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[float]] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "count", value)


if not MYPY:
    class NdbCloneInfoBpgConfigStorageLogDiskArgsDict(TypedDict):
        count: NotRequired[pulumi.Input[float]]
        size: NotRequired[pulumi.Input[float]]
elif False:
    NdbCloneInfoBpgConfigStorageLogDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneInfoBpgConfigStorageLogDiskArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[float]] = None,
                 size: Optional[pulumi.Input[float]] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "size", value)


if not MYPY:
    class NdbCloneInfoBpgConfigVmPropertyArgsDict(TypedDict):
        dirty_background_ratio: NotRequired[pulumi.Input[float]]
        dirty_expire_centisecs: NotRequired[pulumi.Input[float]]
        dirty_ratio: NotRequired[pulumi.Input[float]]
        dirty_writeback_centisecs: NotRequired[pulumi.Input[float]]
        nr_hugepages: NotRequired[pulumi.Input[float]]
        overcommit_memory: NotRequired[pulumi.Input[float]]
        swappiness: NotRequired[pulumi.Input[float]]
elif False:
    NdbCloneInfoBpgConfigVmPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneInfoBpgConfigVmPropertyArgs:
    def __init__(__self__, *,
                 dirty_background_ratio: Optional[pulumi.Input[float]] = None,
                 dirty_expire_centisecs: Optional[pulumi.Input[float]] = None,
                 dirty_ratio: Optional[pulumi.Input[float]] = None,
                 dirty_writeback_centisecs: Optional[pulumi.Input[float]] = None,
                 nr_hugepages: Optional[pulumi.Input[float]] = None,
                 overcommit_memory: Optional[pulumi.Input[float]] = None,
                 swappiness: Optional[pulumi.Input[float]] = None):
        if dirty_background_ratio is not None:
            pulumi.set(__self__, "dirty_background_ratio", dirty_background_ratio)
        if dirty_expire_centisecs is not None:
            pulumi.set(__self__, "dirty_expire_centisecs", dirty_expire_centisecs)
        if dirty_ratio is not None:
            pulumi.set(__self__, "dirty_ratio", dirty_ratio)
        if dirty_writeback_centisecs is not None:
            pulumi.set(__self__, "dirty_writeback_centisecs", dirty_writeback_centisecs)
        if nr_hugepages is not None:
            pulumi.set(__self__, "nr_hugepages", nr_hugepages)
        if overcommit_memory is not None:
            pulumi.set(__self__, "overcommit_memory", overcommit_memory)
        if swappiness is not None:
            pulumi.set(__self__, "swappiness", swappiness)

    @property
    @pulumi.getter(name="dirtyBackgroundRatio")
    def dirty_background_ratio(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_background_ratio")

    @dirty_background_ratio.setter
    def dirty_background_ratio(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_background_ratio", value)

    @property
    @pulumi.getter(name="dirtyExpireCentisecs")
    def dirty_expire_centisecs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_expire_centisecs")

    @dirty_expire_centisecs.setter
    def dirty_expire_centisecs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_expire_centisecs", value)

    @property
    @pulumi.getter(name="dirtyRatio")
    def dirty_ratio(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_ratio")

    @dirty_ratio.setter
    def dirty_ratio(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_ratio", value)

    @property
    @pulumi.getter(name="dirtyWritebackCentisecs")
    def dirty_writeback_centisecs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_writeback_centisecs")

    @dirty_writeback_centisecs.setter
    def dirty_writeback_centisecs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_writeback_centisecs", value)

    @property
    @pulumi.getter(name="nrHugepages")
    def nr_hugepages(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "nr_hugepages")

    @nr_hugepages.setter
    def nr_hugepages(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "nr_hugepages", value)

    @property
    @pulumi.getter(name="overcommitMemory")
    def overcommit_memory(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "overcommit_memory")

    @overcommit_memory.setter
    def overcommit_memory(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "overcommit_memory", value)

    @property
    @pulumi.getter
    def swappiness(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "swappiness")

    @swappiness.setter
    def swappiness(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "swappiness", value)


if not MYPY:
    class NdbCloneLcmConfigArgsDict(TypedDict):
        database_lcm_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneLcmConfigDatabaseLcmConfigArgsDict']]]]
elif False:
    NdbCloneLcmConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneLcmConfigArgs:
    def __init__(__self__, *,
                 database_lcm_configs: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneLcmConfigDatabaseLcmConfigArgs']]]] = None):
        if database_lcm_configs is not None:
            pulumi.set(__self__, "database_lcm_configs", database_lcm_configs)

    @property
    @pulumi.getter(name="databaseLcmConfigs")
    def database_lcm_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneLcmConfigDatabaseLcmConfigArgs']]]]:
        return pulumi.get(self, "database_lcm_configs")

    @database_lcm_configs.setter
    def database_lcm_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneLcmConfigDatabaseLcmConfigArgs']]]]):
        pulumi.set(self, "database_lcm_configs", value)


if not MYPY:
    class NdbCloneLcmConfigDatabaseLcmConfigArgsDict(TypedDict):
        expiry_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneLcmConfigDatabaseLcmConfigExpiryDetailArgsDict']]]]
        refresh_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneLcmConfigDatabaseLcmConfigRefreshDetailArgsDict']]]]
elif False:
    NdbCloneLcmConfigDatabaseLcmConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneLcmConfigDatabaseLcmConfigArgs:
    def __init__(__self__, *,
                 expiry_details: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneLcmConfigDatabaseLcmConfigExpiryDetailArgs']]]] = None,
                 refresh_details: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneLcmConfigDatabaseLcmConfigRefreshDetailArgs']]]] = None):
        if expiry_details is not None:
            pulumi.set(__self__, "expiry_details", expiry_details)
        if refresh_details is not None:
            pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneLcmConfigDatabaseLcmConfigExpiryDetailArgs']]]]:
        return pulumi.get(self, "expiry_details")

    @expiry_details.setter
    def expiry_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneLcmConfigDatabaseLcmConfigExpiryDetailArgs']]]]):
        pulumi.set(self, "expiry_details", value)

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneLcmConfigDatabaseLcmConfigRefreshDetailArgs']]]]:
        return pulumi.get(self, "refresh_details")

    @refresh_details.setter
    def refresh_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneLcmConfigDatabaseLcmConfigRefreshDetailArgs']]]]):
        pulumi.set(self, "refresh_details", value)


if not MYPY:
    class NdbCloneLcmConfigDatabaseLcmConfigExpiryDetailArgsDict(TypedDict):
        expiry_date_timezone: pulumi.Input[str]
        delete_database: NotRequired[pulumi.Input[bool]]
        expire_in_days: NotRequired[pulumi.Input[int]]
elif False:
    NdbCloneLcmConfigDatabaseLcmConfigExpiryDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneLcmConfigDatabaseLcmConfigExpiryDetailArgs:
    def __init__(__self__, *,
                 expiry_date_timezone: pulumi.Input[str],
                 delete_database: Optional[pulumi.Input[bool]] = None,
                 expire_in_days: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        if delete_database is not None:
            pulumi.set(__self__, "delete_database", delete_database)
        if expire_in_days is not None:
            pulumi.set(__self__, "expire_in_days", expire_in_days)

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expiry_date_timezone")

    @expiry_date_timezone.setter
    def expiry_date_timezone(self, value: pulumi.Input[str]):
        pulumi.set(self, "expiry_date_timezone", value)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_database")

    @delete_database.setter
    def delete_database(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_database", value)

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "expire_in_days")

    @expire_in_days.setter
    def expire_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expire_in_days", value)


if not MYPY:
    class NdbCloneLcmConfigDatabaseLcmConfigRefreshDetailArgsDict(TypedDict):
        refresh_date_timezone: NotRequired[pulumi.Input[str]]
        refresh_in_days: NotRequired[pulumi.Input[int]]
        refresh_time: NotRequired[pulumi.Input[str]]
elif False:
    NdbCloneLcmConfigDatabaseLcmConfigRefreshDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneLcmConfigDatabaseLcmConfigRefreshDetailArgs:
    def __init__(__self__, *,
                 refresh_date_timezone: Optional[pulumi.Input[str]] = None,
                 refresh_in_days: Optional[pulumi.Input[int]] = None,
                 refresh_time: Optional[pulumi.Input[str]] = None):
        if refresh_date_timezone is not None:
            pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        if refresh_in_days is not None:
            pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        if refresh_time is not None:
            pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_date_timezone")

    @refresh_date_timezone.setter
    def refresh_date_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_date_timezone", value)

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_in_days")

    @refresh_in_days.setter
    def refresh_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_in_days", value)

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_time")

    @refresh_time.setter
    def refresh_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_time", value)


if not MYPY:
    class NdbCloneLinkedDatabaseArgsDict(TypedDict):
        database_name: NotRequired[pulumi.Input[str]]
        """
        database name
        """
        database_status: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for clone
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        last modified date for clone
        """
        description: NotRequired[pulumi.Input[str]]
        """
        database instance description
        """
        id: NotRequired[pulumi.Input[str]]
        infos: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneLinkedDatabaseInfoArgsDict']]]]
        """
        info of clone
        """
        metric: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        database instance name
        """
        parent_database_id: NotRequired[pulumi.Input[str]]
        parent_linked_database_id: NotRequired[pulumi.Input[str]]
        snapshot_id: NotRequired[pulumi.Input[str]]
        """
        snapshot id from where clone is created
        """
        status: NotRequired[pulumi.Input[str]]
        """
        status of clone
        """
        timezone: NotRequired[pulumi.Input[str]]
elif False:
    NdbCloneLinkedDatabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneLinkedDatabaseArgs:
    def __init__(__self__, *,
                 database_name: Optional[pulumi.Input[str]] = None,
                 database_status: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneLinkedDatabaseInfoArgs']]]] = None,
                 metric: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_database_id: Optional[pulumi.Input[str]] = None,
                 parent_linked_database_id: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] database_name: database name
        :param pulumi.Input[str] date_created: date created for clone
        :param pulumi.Input[str] date_modified: last modified date for clone
        :param pulumi.Input[str] description: database instance description
        :param pulumi.Input[Sequence[pulumi.Input['NdbCloneLinkedDatabaseInfoArgs']]] infos: info of clone
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metric: Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        :param pulumi.Input[str] name: database instance name
        :param pulumi.Input[str] snapshot_id: snapshot id from where clone is created
        :param pulumi.Input[str] status: status of clone
        """
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_database_id is not None:
            pulumi.set(__self__, "parent_database_id", parent_database_id)
        if parent_linked_database_id is not None:
            pulumi.set(__self__, "parent_linked_database_id", parent_linked_database_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        database name
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_status")

    @database_status.setter
    def database_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_status", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        database instance description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneLinkedDatabaseInfoArgs']]]]:
        """
        info of clone
        """
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneLinkedDatabaseInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parent_database_id")

    @parent_database_id.setter
    def parent_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_database_id", value)

    @property
    @pulumi.getter(name="parentLinkedDatabaseId")
    def parent_linked_database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parent_linked_database_id")

    @parent_linked_database_id.setter
    def parent_linked_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_linked_database_id", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        snapshot id from where clone is created
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of clone
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


if not MYPY:
    class NdbCloneLinkedDatabaseInfoArgsDict(TypedDict):
        info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        info of clone
        """
        secure_info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    NdbCloneLinkedDatabaseInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneLinkedDatabaseInfoArgs:
    def __init__(__self__, *,
                 info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 secure_info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] info: info of clone
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        info of clone
        """
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "secure_info")

    @secure_info.setter
    def secure_info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secure_info", value)


if not MYPY:
    class NdbCloneNodeArgsDict(TypedDict):
        compute_profile_id: NotRequired[pulumi.Input[str]]
        """
        specify compute profile id
        """
        dbserver_id: NotRequired[pulumi.Input[str]]
        """
        dberver id
        """
        network_profile_id: NotRequired[pulumi.Input[str]]
        """
        specify network profile id
        """
        new_db_server_time_zone: NotRequired[pulumi.Input[str]]
        """
        dbserver time zone
        """
        nx_cluster_id: NotRequired[pulumi.Input[str]]
        """
        cluster id
        """
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneNodePropertyArgsDict']]]]
        """
        properties of vm
        """
        vm_name: NotRequired[pulumi.Input[str]]
        """
        name for the database server VM.
        """
elif False:
    NdbCloneNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneNodeArgs:
    def __init__(__self__, *,
                 compute_profile_id: Optional[pulumi.Input[str]] = None,
                 dbserver_id: Optional[pulumi.Input[str]] = None,
                 network_profile_id: Optional[pulumi.Input[str]] = None,
                 new_db_server_time_zone: Optional[pulumi.Input[str]] = None,
                 nx_cluster_id: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneNodePropertyArgs']]]] = None,
                 vm_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] compute_profile_id: specify compute profile id
        :param pulumi.Input[str] dbserver_id: dberver id
        :param pulumi.Input[str] network_profile_id: specify network profile id
        :param pulumi.Input[str] new_db_server_time_zone: dbserver time zone
        :param pulumi.Input[str] nx_cluster_id: cluster id
        :param pulumi.Input[Sequence[pulumi.Input['NdbCloneNodePropertyArgs']]] properties: properties of vm
        :param pulumi.Input[str] vm_name: name for the database server VM.
        """
        if compute_profile_id is not None:
            pulumi.set(__self__, "compute_profile_id", compute_profile_id)
        if dbserver_id is not None:
            pulumi.set(__self__, "dbserver_id", dbserver_id)
        if network_profile_id is not None:
            pulumi.set(__self__, "network_profile_id", network_profile_id)
        if new_db_server_time_zone is not None:
            pulumi.set(__self__, "new_db_server_time_zone", new_db_server_time_zone)
        if nx_cluster_id is not None:
            pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if vm_name is not None:
            pulumi.set(__self__, "vm_name", vm_name)

    @property
    @pulumi.getter(name="computeProfileId")
    def compute_profile_id(self) -> Optional[pulumi.Input[str]]:
        """
        specify compute profile id
        """
        return pulumi.get(self, "compute_profile_id")

    @compute_profile_id.setter
    def compute_profile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compute_profile_id", value)

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> Optional[pulumi.Input[str]]:
        """
        dberver id
        """
        return pulumi.get(self, "dbserver_id")

    @dbserver_id.setter
    def dbserver_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbserver_id", value)

    @property
    @pulumi.getter(name="networkProfileId")
    def network_profile_id(self) -> Optional[pulumi.Input[str]]:
        """
        specify network profile id
        """
        return pulumi.get(self, "network_profile_id")

    @network_profile_id.setter
    def network_profile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_profile_id", value)

    @property
    @pulumi.getter(name="newDbServerTimeZone")
    def new_db_server_time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        dbserver time zone
        """
        return pulumi.get(self, "new_db_server_time_zone")

    @new_db_server_time_zone.setter
    def new_db_server_time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "new_db_server_time_zone", value)

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        cluster id
        """
        return pulumi.get(self, "nx_cluster_id")

    @nx_cluster_id.setter
    def nx_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nx_cluster_id", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneNodePropertyArgs']]]]:
        """
        properties of vm
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneNodePropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> Optional[pulumi.Input[str]]:
        """
        name for the database server VM.
        """
        return pulumi.get(self, "vm_name")

    @vm_name.setter
    def vm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_name", value)


if not MYPY:
    class NdbCloneNodePropertyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        database instance name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbCloneNodePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneNodePropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: database instance name
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbClonePostgresqlInfoArgsDict(TypedDict):
        db_password: pulumi.Input[str]
        """
        password of the postgres superuser.
        """
        vm_name: pulumi.Input[str]
        """
        name for the database server VM.
        """
        dbserver_description: NotRequired[pulumi.Input[str]]
        """
        description for the dbserver.
        """
        post_clone_cmd: NotRequired[pulumi.Input[str]]
        """
        OS command that you want to run after the instance is created.
        """
        pre_clone_cmd: NotRequired[pulumi.Input[str]]
        """
        OS command that you want to run before the instance is created.
        """
elif False:
    NdbClonePostgresqlInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClonePostgresqlInfoArgs:
    def __init__(__self__, *,
                 db_password: pulumi.Input[str],
                 vm_name: pulumi.Input[str],
                 dbserver_description: Optional[pulumi.Input[str]] = None,
                 post_clone_cmd: Optional[pulumi.Input[str]] = None,
                 pre_clone_cmd: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] db_password: password of the postgres superuser.
        :param pulumi.Input[str] vm_name: name for the database server VM.
        :param pulumi.Input[str] dbserver_description: description for the dbserver.
        :param pulumi.Input[str] post_clone_cmd: OS command that you want to run after the instance is created.
        :param pulumi.Input[str] pre_clone_cmd: OS command that you want to run before the instance is created.
        """
        pulumi.set(__self__, "db_password", db_password)
        pulumi.set(__self__, "vm_name", vm_name)
        if dbserver_description is not None:
            pulumi.set(__self__, "dbserver_description", dbserver_description)
        if post_clone_cmd is not None:
            pulumi.set(__self__, "post_clone_cmd", post_clone_cmd)
        if pre_clone_cmd is not None:
            pulumi.set(__self__, "pre_clone_cmd", pre_clone_cmd)

    @property
    @pulumi.getter(name="dbPassword")
    def db_password(self) -> pulumi.Input[str]:
        """
        password of the postgres superuser.
        """
        return pulumi.get(self, "db_password")

    @db_password.setter
    def db_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_password", value)

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> pulumi.Input[str]:
        """
        name for the database server VM.
        """
        return pulumi.get(self, "vm_name")

    @vm_name.setter
    def vm_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vm_name", value)

    @property
    @pulumi.getter(name="dbserverDescription")
    def dbserver_description(self) -> Optional[pulumi.Input[str]]:
        """
        description for the dbserver.
        """
        return pulumi.get(self, "dbserver_description")

    @dbserver_description.setter
    def dbserver_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbserver_description", value)

    @property
    @pulumi.getter(name="postCloneCmd")
    def post_clone_cmd(self) -> Optional[pulumi.Input[str]]:
        """
        OS command that you want to run after the instance is created.
        """
        return pulumi.get(self, "post_clone_cmd")

    @post_clone_cmd.setter
    def post_clone_cmd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_clone_cmd", value)

    @property
    @pulumi.getter(name="preCloneCmd")
    def pre_clone_cmd(self) -> Optional[pulumi.Input[str]]:
        """
        OS command that you want to run before the instance is created.
        """
        return pulumi.get(self, "pre_clone_cmd")

    @pre_clone_cmd.setter
    def pre_clone_cmd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_clone_cmd", value)


if not MYPY:
    class NdbClonePropertyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        database instance name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbClonePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClonePropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: database instance name
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbCloneTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbCloneTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbCloneTimeMachineArgsDict(TypedDict):
        access_level: NotRequired[pulumi.Input[str]]
        clone: NotRequired[pulumi.Input[bool]]
        """
        cloned or not
        """
        clones: NotRequired[pulumi.Input[str]]
        clustered: NotRequired[pulumi.Input[bool]]
        """
        clone will be clustered or not
        """
        database: NotRequired[pulumi.Input[str]]
        database_id: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for clone
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        last modified date for clone
        """
        description: NotRequired[pulumi.Input[str]]
        """
        database instance description
        """
        ea_status: NotRequired[pulumi.Input[str]]
        id: NotRequired[pulumi.Input[str]]
        metric: NotRequired[pulumi.Input[str]]
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        database instance name
        """
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachinePropertyArgsDict']]]]
        """
        List of all the properties
        """
        schedule_id: NotRequired[pulumi.Input[str]]
        schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleArgsDict']]]]
        scope: NotRequired[pulumi.Input[str]]
        sla_id: NotRequired[pulumi.Input[str]]
        sla_update_in_progress: NotRequired[pulumi.Input[bool]]
        sla_update_metadata: NotRequired[pulumi.Input[str]]
        slas: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineSlaArgsDict']]]]
        source_nx_clusters: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        status: NotRequired[pulumi.Input[str]]
        """
        status of clone
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineTagArgsDict']]]]
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type of clone
        """
elif False:
    NdbCloneTimeMachineArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneTimeMachineArgs:
    def __init__(__self__, *,
                 access_level: Optional[pulumi.Input[str]] = None,
                 clone: Optional[pulumi.Input[bool]] = None,
                 clones: Optional[pulumi.Input[str]] = None,
                 clustered: Optional[pulumi.Input[bool]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 database_id: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ea_status: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachinePropertyArgs']]]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleArgs']]]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 sla_id: Optional[pulumi.Input[str]] = None,
                 sla_update_in_progress: Optional[pulumi.Input[bool]] = None,
                 sla_update_metadata: Optional[pulumi.Input[str]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineSlaArgs']]]] = None,
                 source_nx_clusters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineTagArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] clone: cloned or not
        :param pulumi.Input[bool] clustered: clone will be clustered or not
        :param pulumi.Input[str] date_created: date created for clone
        :param pulumi.Input[str] date_modified: last modified date for clone
        :param pulumi.Input[str] description: database instance description
        :param pulumi.Input[str] metric: Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        :param pulumi.Input[str] name: database instance name
        :param pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachinePropertyArgs']]] properties: List of all the properties
        :param pulumi.Input[str] status: status of clone
        :param pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineTagArgs']]] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        :param pulumi.Input[str] type: type of clone
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if clone is not None:
            pulumi.set(__self__, "clone", clone)
        if clones is not None:
            pulumi.set(__self__, "clones", clones)
        if clustered is not None:
            pulumi.set(__self__, "clustered", clustered)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ea_status is not None:
            pulumi.set(__self__, "ea_status", ea_status)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)
        if sla_update_in_progress is not None:
            pulumi.set(__self__, "sla_update_in_progress", sla_update_in_progress)
        if sla_update_metadata is not None:
            pulumi.set(__self__, "sla_update_metadata", sla_update_metadata)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if source_nx_clusters is not None:
            pulumi.set(__self__, "source_nx_clusters", source_nx_clusters)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_level")

    @access_level.setter
    def access_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_level", value)

    @property
    @pulumi.getter
    def clone(self) -> Optional[pulumi.Input[bool]]:
        """
        cloned or not
        """
        return pulumi.get(self, "clone")

    @clone.setter
    def clone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "clone", value)

    @property
    @pulumi.getter
    def clones(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "clones")

    @clones.setter
    def clones(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clones", value)

    @property
    @pulumi.getter
    def clustered(self) -> Optional[pulumi.Input[bool]]:
        """
        clone will be clustered or not
        """
        return pulumi.get(self, "clustered")

    @clustered.setter
    def clustered(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "clustered", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_id", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        database instance description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="eaStatus")
    def ea_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ea_status")

    @ea_status.setter
    def ea_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ea_status", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachinePropertyArgs']]]]:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachinePropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_id", value)

    @property
    @pulumi.getter
    def schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleArgs']]]]:
        return pulumi.get(self, "schedules")

    @schedules.setter
    def schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleArgs']]]]):
        pulumi.set(self, "schedules", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sla_id")

    @sla_id.setter
    def sla_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_id", value)

    @property
    @pulumi.getter(name="slaUpdateInProgress")
    def sla_update_in_progress(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sla_update_in_progress")

    @sla_update_in_progress.setter
    def sla_update_in_progress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sla_update_in_progress", value)

    @property
    @pulumi.getter(name="slaUpdateMetadata")
    def sla_update_metadata(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sla_update_metadata")

    @sla_update_metadata.setter
    def sla_update_metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_update_metadata", value)

    @property
    @pulumi.getter
    def slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineSlaArgs']]]]:
        return pulumi.get(self, "slas")

    @slas.setter
    def slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineSlaArgs']]]]):
        pulumi.set(self, "slas", value)

    @property
    @pulumi.getter(name="sourceNxClusters")
    def source_nx_clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "source_nx_clusters")

    @source_nx_clusters.setter
    def source_nx_clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_nx_clusters", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of clone
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineTagArgs']]]]:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type of clone
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NdbCloneTimeMachinePropertyArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        database instance description
        """
        name: NotRequired[pulumi.Input[str]]
        """
        database instance name
        """
        ref_id: NotRequired[pulumi.Input[str]]
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbCloneTimeMachinePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneTimeMachinePropertyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: database instance description
        :param pulumi.Input[str] name: database instance name
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        database instance description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbCloneTimeMachineScheduleArgsDict(TypedDict):
        continuous_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleContinuousScheduleArgsDict']]]]
        daily_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleDailyScheduleArgsDict']]]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for clone
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        last modified date for clone
        """
        description: NotRequired[pulumi.Input[str]]
        """
        database instance description
        """
        global_policy: NotRequired[pulumi.Input[bool]]
        id: NotRequired[pulumi.Input[str]]
        monthly_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleMonthlyScheduleArgsDict']]]]
        name: NotRequired[pulumi.Input[str]]
        """
        database instance name
        """
        owner_id: NotRequired[pulumi.Input[str]]
        quartely_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleQuartelyScheduleArgsDict']]]]
        reference_count: NotRequired[pulumi.Input[int]]
        snapshot_time_of_days: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleSnapshotTimeOfDayArgsDict']]]]
        start_time: NotRequired[pulumi.Input[str]]
        system_policy: NotRequired[pulumi.Input[bool]]
        time_zone: NotRequired[pulumi.Input[str]]
        """
        timezone
        """
        unique_name: NotRequired[pulumi.Input[str]]
        weekly_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleWeeklyScheduleArgsDict']]]]
        yearly_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleYearlyScheduleArgsDict']]]]
elif False:
    NdbCloneTimeMachineScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneTimeMachineScheduleArgs:
    def __init__(__self__, *,
                 continuous_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleContinuousScheduleArgs']]]] = None,
                 daily_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleDailyScheduleArgs']]]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 global_policy: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 monthly_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleMonthlyScheduleArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 quartely_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleQuartelyScheduleArgs']]]] = None,
                 reference_count: Optional[pulumi.Input[int]] = None,
                 snapshot_time_of_days: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleSnapshotTimeOfDayArgs']]]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 system_policy: Optional[pulumi.Input[bool]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 unique_name: Optional[pulumi.Input[str]] = None,
                 weekly_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleWeeklyScheduleArgs']]]] = None,
                 yearly_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleYearlyScheduleArgs']]]] = None):
        """
        :param pulumi.Input[str] date_created: date created for clone
        :param pulumi.Input[str] date_modified: last modified date for clone
        :param pulumi.Input[str] description: database instance description
        :param pulumi.Input[str] name: database instance name
        :param pulumi.Input[str] time_zone: timezone
        """
        if continuous_schedules is not None:
            pulumi.set(__self__, "continuous_schedules", continuous_schedules)
        if daily_schedules is not None:
            pulumi.set(__self__, "daily_schedules", daily_schedules)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if global_policy is not None:
            pulumi.set(__self__, "global_policy", global_policy)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_schedules is not None:
            pulumi.set(__self__, "monthly_schedules", monthly_schedules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if quartely_schedules is not None:
            pulumi.set(__self__, "quartely_schedules", quartely_schedules)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if snapshot_time_of_days is not None:
            pulumi.set(__self__, "snapshot_time_of_days", snapshot_time_of_days)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if system_policy is not None:
            pulumi.set(__self__, "system_policy", system_policy)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_schedules is not None:
            pulumi.set(__self__, "weekly_schedules", weekly_schedules)
        if yearly_schedules is not None:
            pulumi.set(__self__, "yearly_schedules", yearly_schedules)

    @property
    @pulumi.getter(name="continuousSchedules")
    def continuous_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleContinuousScheduleArgs']]]]:
        return pulumi.get(self, "continuous_schedules")

    @continuous_schedules.setter
    def continuous_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleContinuousScheduleArgs']]]]):
        pulumi.set(self, "continuous_schedules", value)

    @property
    @pulumi.getter(name="dailySchedules")
    def daily_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleDailyScheduleArgs']]]]:
        return pulumi.get(self, "daily_schedules")

    @daily_schedules.setter
    def daily_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleDailyScheduleArgs']]]]):
        pulumi.set(self, "daily_schedules", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        database instance description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="globalPolicy")
    def global_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_policy")

    @global_policy.setter
    def global_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_policy", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="monthlySchedules")
    def monthly_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleMonthlyScheduleArgs']]]]:
        return pulumi.get(self, "monthly_schedules")

    @monthly_schedules.setter
    def monthly_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleMonthlyScheduleArgs']]]]):
        pulumi.set(self, "monthly_schedules", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="quartelySchedules")
    def quartely_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleQuartelyScheduleArgs']]]]:
        return pulumi.get(self, "quartely_schedules")

    @quartely_schedules.setter
    def quartely_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleQuartelyScheduleArgs']]]]):
        pulumi.set(self, "quartely_schedules", value)

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reference_count")

    @reference_count.setter
    def reference_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reference_count", value)

    @property
    @pulumi.getter(name="snapshotTimeOfDays")
    def snapshot_time_of_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleSnapshotTimeOfDayArgs']]]]:
        return pulumi.get(self, "snapshot_time_of_days")

    @snapshot_time_of_days.setter
    def snapshot_time_of_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleSnapshotTimeOfDayArgs']]]]):
        pulumi.set(self, "snapshot_time_of_days", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="systemPolicy")
    def system_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "system_policy")

    @system_policy.setter
    def system_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "system_policy", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        timezone
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unique_name")

    @unique_name.setter
    def unique_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_name", value)

    @property
    @pulumi.getter(name="weeklySchedules")
    def weekly_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleWeeklyScheduleArgs']]]]:
        return pulumi.get(self, "weekly_schedules")

    @weekly_schedules.setter
    def weekly_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleWeeklyScheduleArgs']]]]):
        pulumi.set(self, "weekly_schedules", value)

    @property
    @pulumi.getter(name="yearlySchedules")
    def yearly_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleYearlyScheduleArgs']]]]:
        return pulumi.get(self, "yearly_schedules")

    @yearly_schedules.setter
    def yearly_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbCloneTimeMachineScheduleYearlyScheduleArgs']]]]):
        pulumi.set(self, "yearly_schedules", value)


if not MYPY:
    class NdbCloneTimeMachineScheduleContinuousScheduleArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        log_backup_interval: NotRequired[pulumi.Input[int]]
        snapshots_per_day: NotRequired[pulumi.Input[int]]
elif False:
    NdbCloneTimeMachineScheduleContinuousScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneTimeMachineScheduleContinuousScheduleArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_backup_interval: Optional[pulumi.Input[int]] = None,
                 snapshots_per_day: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_backup_interval is not None:
            pulumi.set(__self__, "log_backup_interval", log_backup_interval)
        if snapshots_per_day is not None:
            pulumi.set(__self__, "snapshots_per_day", snapshots_per_day)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logBackupInterval")
    def log_backup_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "log_backup_interval")

    @log_backup_interval.setter
    def log_backup_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_backup_interval", value)

    @property
    @pulumi.getter(name="snapshotsPerDay")
    def snapshots_per_day(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "snapshots_per_day")

    @snapshots_per_day.setter
    def snapshots_per_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "snapshots_per_day", value)


if not MYPY:
    class NdbCloneTimeMachineScheduleDailyScheduleArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    NdbCloneTimeMachineScheduleDailyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneTimeMachineScheduleDailyScheduleArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbCloneTimeMachineScheduleMonthlyScheduleArgsDict(TypedDict):
        day_of_month: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    NdbCloneTimeMachineScheduleMonthlyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneTimeMachineScheduleMonthlyScheduleArgs:
    def __init__(__self__, *,
                 day_of_month: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbCloneTimeMachineScheduleQuartelyScheduleArgsDict(TypedDict):
        day_of_month: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
        start_month: NotRequired[pulumi.Input[str]]
        start_month_value: NotRequired[pulumi.Input[str]]
elif False:
    NdbCloneTimeMachineScheduleQuartelyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneTimeMachineScheduleQuartelyScheduleArgs:
    def __init__(__self__, *,
                 day_of_month: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 start_month: Optional[pulumi.Input[str]] = None,
                 start_month_value: Optional[pulumi.Input[str]] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if start_month is not None:
            pulumi.set(__self__, "start_month", start_month)
        if start_month_value is not None:
            pulumi.set(__self__, "start_month_value", start_month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="startMonth")
    def start_month(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_month")

    @start_month.setter
    def start_month(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_month", value)

    @property
    @pulumi.getter(name="startMonthValue")
    def start_month_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_month_value")

    @start_month_value.setter
    def start_month_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_month_value", value)


if not MYPY:
    class NdbCloneTimeMachineScheduleSnapshotTimeOfDayArgsDict(TypedDict):
        extra: NotRequired[pulumi.Input[bool]]
        hours: NotRequired[pulumi.Input[int]]
        minutes: NotRequired[pulumi.Input[int]]
        seconds: NotRequired[pulumi.Input[int]]
elif False:
    NdbCloneTimeMachineScheduleSnapshotTimeOfDayArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneTimeMachineScheduleSnapshotTimeOfDayArgs:
    def __init__(__self__, *,
                 extra: Optional[pulumi.Input[bool]] = None,
                 hours: Optional[pulumi.Input[int]] = None,
                 minutes: Optional[pulumi.Input[int]] = None,
                 seconds: Optional[pulumi.Input[int]] = None):
        if extra is not None:
            pulumi.set(__self__, "extra", extra)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def extra(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "extra")

    @extra.setter
    def extra(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extra", value)

    @property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hours", value)

    @property
    @pulumi.getter
    def minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minutes", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)


if not MYPY:
    class NdbCloneTimeMachineScheduleWeeklyScheduleArgsDict(TypedDict):
        day_of_week: NotRequired[pulumi.Input[str]]
        day_of_week_value: NotRequired[pulumi.Input[str]]
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    NdbCloneTimeMachineScheduleWeeklyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneTimeMachineScheduleWeeklyScheduleArgs:
    def __init__(__self__, *,
                 day_of_week: Optional[pulumi.Input[str]] = None,
                 day_of_week_value: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if day_of_week_value is not None:
            pulumi.set(__self__, "day_of_week_value", day_of_week_value)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week", value)

    @property
    @pulumi.getter(name="dayOfWeekValue")
    def day_of_week_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "day_of_week_value")

    @day_of_week_value.setter
    def day_of_week_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week_value", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbCloneTimeMachineScheduleYearlyScheduleArgsDict(TypedDict):
        day_of_month: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
        month: NotRequired[pulumi.Input[str]]
        month_value: NotRequired[pulumi.Input[str]]
elif False:
    NdbCloneTimeMachineScheduleYearlyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneTimeMachineScheduleYearlyScheduleArgs:
    def __init__(__self__, *,
                 day_of_month: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 month: Optional[pulumi.Input[str]] = None,
                 month_value: Optional[pulumi.Input[str]] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if month_value is not None:
            pulumi.set(__self__, "month_value", month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def month(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "month")

    @month.setter
    def month(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "month", value)

    @property
    @pulumi.getter(name="monthValue")
    def month_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "month_value")

    @month_value.setter
    def month_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "month_value", value)


if not MYPY:
    class NdbCloneTimeMachineSlaArgsDict(TypedDict):
        continuous_retention: NotRequired[pulumi.Input[int]]
        current_active_frequency: NotRequired[pulumi.Input[str]]
        daily_retention: NotRequired[pulumi.Input[int]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for clone
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        last modified date for clone
        """
        description: NotRequired[pulumi.Input[str]]
        """
        database instance description
        """
        id: NotRequired[pulumi.Input[str]]
        monthly_retention: NotRequired[pulumi.Input[int]]
        name: NotRequired[pulumi.Input[str]]
        """
        database instance name
        """
        owner_id: NotRequired[pulumi.Input[str]]
        pitr_enabled: NotRequired[pulumi.Input[bool]]
        quarterly_retention: NotRequired[pulumi.Input[int]]
        reference_count: NotRequired[pulumi.Input[int]]
        system_sla: NotRequired[pulumi.Input[bool]]
        unique_name: NotRequired[pulumi.Input[str]]
        weekly_retention: NotRequired[pulumi.Input[int]]
        yearly_retention: NotRequired[pulumi.Input[int]]
elif False:
    NdbCloneTimeMachineSlaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneTimeMachineSlaArgs:
    def __init__(__self__, *,
                 continuous_retention: Optional[pulumi.Input[int]] = None,
                 current_active_frequency: Optional[pulumi.Input[str]] = None,
                 daily_retention: Optional[pulumi.Input[int]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 monthly_retention: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 pitr_enabled: Optional[pulumi.Input[bool]] = None,
                 quarterly_retention: Optional[pulumi.Input[int]] = None,
                 reference_count: Optional[pulumi.Input[int]] = None,
                 system_sla: Optional[pulumi.Input[bool]] = None,
                 unique_name: Optional[pulumi.Input[str]] = None,
                 weekly_retention: Optional[pulumi.Input[int]] = None,
                 yearly_retention: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] date_created: date created for clone
        :param pulumi.Input[str] date_modified: last modified date for clone
        :param pulumi.Input[str] description: database instance description
        :param pulumi.Input[str] name: database instance name
        """
        if continuous_retention is not None:
            pulumi.set(__self__, "continuous_retention", continuous_retention)
        if current_active_frequency is not None:
            pulumi.set(__self__, "current_active_frequency", current_active_frequency)
        if daily_retention is not None:
            pulumi.set(__self__, "daily_retention", daily_retention)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_retention is not None:
            pulumi.set(__self__, "monthly_retention", monthly_retention)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if pitr_enabled is not None:
            pulumi.set(__self__, "pitr_enabled", pitr_enabled)
        if quarterly_retention is not None:
            pulumi.set(__self__, "quarterly_retention", quarterly_retention)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if system_sla is not None:
            pulumi.set(__self__, "system_sla", system_sla)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_retention is not None:
            pulumi.set(__self__, "weekly_retention", weekly_retention)
        if yearly_retention is not None:
            pulumi.set(__self__, "yearly_retention", yearly_retention)

    @property
    @pulumi.getter(name="continuousRetention")
    def continuous_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "continuous_retention")

    @continuous_retention.setter
    def continuous_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "continuous_retention", value)

    @property
    @pulumi.getter(name="currentActiveFrequency")
    def current_active_frequency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "current_active_frequency")

    @current_active_frequency.setter
    def current_active_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "current_active_frequency", value)

    @property
    @pulumi.getter(name="dailyRetention")
    def daily_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "daily_retention")

    @daily_retention.setter
    def daily_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "daily_retention", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        database instance description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="monthlyRetention")
    def monthly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "monthly_retention")

    @monthly_retention.setter
    def monthly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monthly_retention", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="pitrEnabled")
    def pitr_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pitr_enabled")

    @pitr_enabled.setter
    def pitr_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pitr_enabled", value)

    @property
    @pulumi.getter(name="quarterlyRetention")
    def quarterly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "quarterly_retention")

    @quarterly_retention.setter
    def quarterly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quarterly_retention", value)

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reference_count")

    @reference_count.setter
    def reference_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reference_count", value)

    @property
    @pulumi.getter(name="systemSla")
    def system_sla(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "system_sla")

    @system_sla.setter
    def system_sla(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "system_sla", value)

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unique_name")

    @unique_name.setter
    def unique_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_name", value)

    @property
    @pulumi.getter(name="weeklyRetention")
    def weekly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weekly_retention")

    @weekly_retention.setter
    def weekly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weekly_retention", value)

    @property
    @pulumi.getter(name="yearlyRetention")
    def yearly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "yearly_retention")

    @yearly_retention.setter
    def yearly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "yearly_retention", value)


if not MYPY:
    class NdbCloneTimeMachineTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbCloneTimeMachineTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbCloneTimeMachineTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbClusterAgentNetworkInfoArgsDict(TypedDict):
        dns: NotRequired[pulumi.Input[str]]
        """
        string of DNS servers(comma separted).
        """
        ntp: NotRequired[pulumi.Input[str]]
        """
        string of NTP servers(comma separted).
        """
elif False:
    NdbClusterAgentNetworkInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterAgentNetworkInfoArgs:
    def __init__(__self__, *,
                 dns: Optional[pulumi.Input[str]] = None,
                 ntp: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dns: string of DNS servers(comma separted).
        :param pulumi.Input[str] ntp: string of NTP servers(comma separted).
        """
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if ntp is not None:
            pulumi.set(__self__, "ntp", ntp)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input[str]]:
        """
        string of DNS servers(comma separted).
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter
    def ntp(self) -> Optional[pulumi.Input[str]]:
        """
        string of NTP servers(comma separted).
        """
        return pulumi.get(self, "ntp")

    @ntp.setter
    def ntp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp", value)


if not MYPY:
    class NdbClusterEntityCountArgsDict(TypedDict):
        db_servers: NotRequired[pulumi.Input[int]]
        engine_counts: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountArgsDict']]]]
elif False:
    NdbClusterEntityCountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterEntityCountArgs:
    def __init__(__self__, *,
                 db_servers: Optional[pulumi.Input[int]] = None,
                 engine_counts: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountArgs']]]] = None):
        if db_servers is not None:
            pulumi.set(__self__, "db_servers", db_servers)
        if engine_counts is not None:
            pulumi.set(__self__, "engine_counts", engine_counts)

    @property
    @pulumi.getter(name="dbServers")
    def db_servers(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "db_servers")

    @db_servers.setter
    def db_servers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "db_servers", value)

    @property
    @pulumi.getter(name="engineCounts")
    def engine_counts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountArgs']]]]:
        return pulumi.get(self, "engine_counts")

    @engine_counts.setter
    def engine_counts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountArgs']]]]):
        pulumi.set(self, "engine_counts", value)


if not MYPY:
    class NdbClusterEntityCountEngineCountArgsDict(TypedDict):
        mariadb_databases: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMariadbDatabaseArgsDict']]]]
        mongodb_databases: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMongodbDatabaseArgsDict']]]]
        mysql_databases: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMysqlDatabaseArgsDict']]]]
        oracle_databases: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountOracleDatabaseArgsDict']]]]
        postgres_databases: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountPostgresDatabaseArgsDict']]]]
        saphana_databases: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountSaphanaDatabaseArgsDict']]]]
        sqlserver_databases: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountSqlserverDatabaseArgsDict']]]]
elif False:
    NdbClusterEntityCountEngineCountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterEntityCountEngineCountArgs:
    def __init__(__self__, *,
                 mariadb_databases: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMariadbDatabaseArgs']]]] = None,
                 mongodb_databases: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMongodbDatabaseArgs']]]] = None,
                 mysql_databases: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMysqlDatabaseArgs']]]] = None,
                 oracle_databases: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountOracleDatabaseArgs']]]] = None,
                 postgres_databases: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountPostgresDatabaseArgs']]]] = None,
                 saphana_databases: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountSaphanaDatabaseArgs']]]] = None,
                 sqlserver_databases: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountSqlserverDatabaseArgs']]]] = None):
        if mariadb_databases is not None:
            pulumi.set(__self__, "mariadb_databases", mariadb_databases)
        if mongodb_databases is not None:
            pulumi.set(__self__, "mongodb_databases", mongodb_databases)
        if mysql_databases is not None:
            pulumi.set(__self__, "mysql_databases", mysql_databases)
        if oracle_databases is not None:
            pulumi.set(__self__, "oracle_databases", oracle_databases)
        if postgres_databases is not None:
            pulumi.set(__self__, "postgres_databases", postgres_databases)
        if saphana_databases is not None:
            pulumi.set(__self__, "saphana_databases", saphana_databases)
        if sqlserver_databases is not None:
            pulumi.set(__self__, "sqlserver_databases", sqlserver_databases)

    @property
    @pulumi.getter(name="mariadbDatabases")
    def mariadb_databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMariadbDatabaseArgs']]]]:
        return pulumi.get(self, "mariadb_databases")

    @mariadb_databases.setter
    def mariadb_databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMariadbDatabaseArgs']]]]):
        pulumi.set(self, "mariadb_databases", value)

    @property
    @pulumi.getter(name="mongodbDatabases")
    def mongodb_databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMongodbDatabaseArgs']]]]:
        return pulumi.get(self, "mongodb_databases")

    @mongodb_databases.setter
    def mongodb_databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMongodbDatabaseArgs']]]]):
        pulumi.set(self, "mongodb_databases", value)

    @property
    @pulumi.getter(name="mysqlDatabases")
    def mysql_databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMysqlDatabaseArgs']]]]:
        return pulumi.get(self, "mysql_databases")

    @mysql_databases.setter
    def mysql_databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMysqlDatabaseArgs']]]]):
        pulumi.set(self, "mysql_databases", value)

    @property
    @pulumi.getter(name="oracleDatabases")
    def oracle_databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountOracleDatabaseArgs']]]]:
        return pulumi.get(self, "oracle_databases")

    @oracle_databases.setter
    def oracle_databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountOracleDatabaseArgs']]]]):
        pulumi.set(self, "oracle_databases", value)

    @property
    @pulumi.getter(name="postgresDatabases")
    def postgres_databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountPostgresDatabaseArgs']]]]:
        return pulumi.get(self, "postgres_databases")

    @postgres_databases.setter
    def postgres_databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountPostgresDatabaseArgs']]]]):
        pulumi.set(self, "postgres_databases", value)

    @property
    @pulumi.getter(name="saphanaDatabases")
    def saphana_databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountSaphanaDatabaseArgs']]]]:
        return pulumi.get(self, "saphana_databases")

    @saphana_databases.setter
    def saphana_databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountSaphanaDatabaseArgs']]]]):
        pulumi.set(self, "saphana_databases", value)

    @property
    @pulumi.getter(name="sqlserverDatabases")
    def sqlserver_databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountSqlserverDatabaseArgs']]]]:
        return pulumi.get(self, "sqlserver_databases")

    @sqlserver_databases.setter
    def sqlserver_databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountSqlserverDatabaseArgs']]]]):
        pulumi.set(self, "sqlserver_databases", value)


if not MYPY:
    class NdbClusterEntityCountEngineCountMariadbDatabaseArgsDict(TypedDict):
        profiles: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMariadbDatabaseProfileArgsDict']]]]
        time_machines: NotRequired[pulumi.Input[int]]
elif False:
    NdbClusterEntityCountEngineCountMariadbDatabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterEntityCountEngineCountMariadbDatabaseArgs:
    def __init__(__self__, *,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMariadbDatabaseProfileArgs']]]] = None,
                 time_machines: Optional[pulumi.Input[int]] = None):
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if time_machines is not None:
            pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMariadbDatabaseProfileArgs']]]]:
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMariadbDatabaseProfileArgs']]]]):
        pulumi.set(self, "profiles", value)

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "time_machines")

    @time_machines.setter
    def time_machines(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_machines", value)


if not MYPY:
    class NdbClusterEntityCountEngineCountMariadbDatabaseProfileArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[int]]
        database_parameter: NotRequired[pulumi.Input[int]]
        network: NotRequired[pulumi.Input[int]]
        software: NotRequired[pulumi.Input[int]]
        storage: NotRequired[pulumi.Input[int]]
        windows_domain: NotRequired[pulumi.Input[int]]
elif False:
    NdbClusterEntityCountEngineCountMariadbDatabaseProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterEntityCountEngineCountMariadbDatabaseProfileArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[int]] = None,
                 database_parameter: Optional[pulumi.Input[int]] = None,
                 network: Optional[pulumi.Input[int]] = None,
                 software: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 windows_domain: Optional[pulumi.Input[int]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if database_parameter is not None:
            pulumi.set(__self__, "database_parameter", database_parameter)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if software is not None:
            pulumi.set(__self__, "software", software)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if windows_domain is not None:
            pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "database_parameter")

    @database_parameter.setter
    def database_parameter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "database_parameter", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def software(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "software")

    @software.setter
    def software(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "software", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "windows_domain")

    @windows_domain.setter
    def windows_domain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "windows_domain", value)


if not MYPY:
    class NdbClusterEntityCountEngineCountMongodbDatabaseArgsDict(TypedDict):
        profiles: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMongodbDatabaseProfileArgsDict']]]]
        time_machines: NotRequired[pulumi.Input[int]]
elif False:
    NdbClusterEntityCountEngineCountMongodbDatabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterEntityCountEngineCountMongodbDatabaseArgs:
    def __init__(__self__, *,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMongodbDatabaseProfileArgs']]]] = None,
                 time_machines: Optional[pulumi.Input[int]] = None):
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if time_machines is not None:
            pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMongodbDatabaseProfileArgs']]]]:
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMongodbDatabaseProfileArgs']]]]):
        pulumi.set(self, "profiles", value)

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "time_machines")

    @time_machines.setter
    def time_machines(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_machines", value)


if not MYPY:
    class NdbClusterEntityCountEngineCountMongodbDatabaseProfileArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[int]]
        database_parameter: NotRequired[pulumi.Input[int]]
        network: NotRequired[pulumi.Input[int]]
        software: NotRequired[pulumi.Input[int]]
        storage: NotRequired[pulumi.Input[int]]
        windows_domain: NotRequired[pulumi.Input[int]]
elif False:
    NdbClusterEntityCountEngineCountMongodbDatabaseProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterEntityCountEngineCountMongodbDatabaseProfileArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[int]] = None,
                 database_parameter: Optional[pulumi.Input[int]] = None,
                 network: Optional[pulumi.Input[int]] = None,
                 software: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 windows_domain: Optional[pulumi.Input[int]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if database_parameter is not None:
            pulumi.set(__self__, "database_parameter", database_parameter)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if software is not None:
            pulumi.set(__self__, "software", software)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if windows_domain is not None:
            pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "database_parameter")

    @database_parameter.setter
    def database_parameter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "database_parameter", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def software(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "software")

    @software.setter
    def software(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "software", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "windows_domain")

    @windows_domain.setter
    def windows_domain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "windows_domain", value)


if not MYPY:
    class NdbClusterEntityCountEngineCountMysqlDatabaseArgsDict(TypedDict):
        profiles: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMysqlDatabaseProfileArgsDict']]]]
        time_machines: NotRequired[pulumi.Input[int]]
elif False:
    NdbClusterEntityCountEngineCountMysqlDatabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterEntityCountEngineCountMysqlDatabaseArgs:
    def __init__(__self__, *,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMysqlDatabaseProfileArgs']]]] = None,
                 time_machines: Optional[pulumi.Input[int]] = None):
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if time_machines is not None:
            pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMysqlDatabaseProfileArgs']]]]:
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountMysqlDatabaseProfileArgs']]]]):
        pulumi.set(self, "profiles", value)

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "time_machines")

    @time_machines.setter
    def time_machines(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_machines", value)


if not MYPY:
    class NdbClusterEntityCountEngineCountMysqlDatabaseProfileArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[int]]
        database_parameter: NotRequired[pulumi.Input[int]]
        network: NotRequired[pulumi.Input[int]]
        software: NotRequired[pulumi.Input[int]]
        storage: NotRequired[pulumi.Input[int]]
        windows_domain: NotRequired[pulumi.Input[int]]
elif False:
    NdbClusterEntityCountEngineCountMysqlDatabaseProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterEntityCountEngineCountMysqlDatabaseProfileArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[int]] = None,
                 database_parameter: Optional[pulumi.Input[int]] = None,
                 network: Optional[pulumi.Input[int]] = None,
                 software: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 windows_domain: Optional[pulumi.Input[int]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if database_parameter is not None:
            pulumi.set(__self__, "database_parameter", database_parameter)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if software is not None:
            pulumi.set(__self__, "software", software)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if windows_domain is not None:
            pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "database_parameter")

    @database_parameter.setter
    def database_parameter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "database_parameter", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def software(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "software")

    @software.setter
    def software(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "software", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "windows_domain")

    @windows_domain.setter
    def windows_domain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "windows_domain", value)


if not MYPY:
    class NdbClusterEntityCountEngineCountOracleDatabaseArgsDict(TypedDict):
        profiles: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountOracleDatabaseProfileArgsDict']]]]
        time_machines: NotRequired[pulumi.Input[int]]
elif False:
    NdbClusterEntityCountEngineCountOracleDatabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterEntityCountEngineCountOracleDatabaseArgs:
    def __init__(__self__, *,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountOracleDatabaseProfileArgs']]]] = None,
                 time_machines: Optional[pulumi.Input[int]] = None):
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if time_machines is not None:
            pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountOracleDatabaseProfileArgs']]]]:
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountOracleDatabaseProfileArgs']]]]):
        pulumi.set(self, "profiles", value)

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "time_machines")

    @time_machines.setter
    def time_machines(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_machines", value)


if not MYPY:
    class NdbClusterEntityCountEngineCountOracleDatabaseProfileArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[int]]
        database_parameter: NotRequired[pulumi.Input[int]]
        network: NotRequired[pulumi.Input[int]]
        software: NotRequired[pulumi.Input[int]]
        storage: NotRequired[pulumi.Input[int]]
        windows_domain: NotRequired[pulumi.Input[int]]
elif False:
    NdbClusterEntityCountEngineCountOracleDatabaseProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterEntityCountEngineCountOracleDatabaseProfileArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[int]] = None,
                 database_parameter: Optional[pulumi.Input[int]] = None,
                 network: Optional[pulumi.Input[int]] = None,
                 software: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 windows_domain: Optional[pulumi.Input[int]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if database_parameter is not None:
            pulumi.set(__self__, "database_parameter", database_parameter)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if software is not None:
            pulumi.set(__self__, "software", software)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if windows_domain is not None:
            pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "database_parameter")

    @database_parameter.setter
    def database_parameter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "database_parameter", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def software(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "software")

    @software.setter
    def software(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "software", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "windows_domain")

    @windows_domain.setter
    def windows_domain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "windows_domain", value)


if not MYPY:
    class NdbClusterEntityCountEngineCountPostgresDatabaseArgsDict(TypedDict):
        profiles: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountPostgresDatabaseProfileArgsDict']]]]
        time_machines: NotRequired[pulumi.Input[int]]
elif False:
    NdbClusterEntityCountEngineCountPostgresDatabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterEntityCountEngineCountPostgresDatabaseArgs:
    def __init__(__self__, *,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountPostgresDatabaseProfileArgs']]]] = None,
                 time_machines: Optional[pulumi.Input[int]] = None):
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if time_machines is not None:
            pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountPostgresDatabaseProfileArgs']]]]:
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountPostgresDatabaseProfileArgs']]]]):
        pulumi.set(self, "profiles", value)

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "time_machines")

    @time_machines.setter
    def time_machines(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_machines", value)


if not MYPY:
    class NdbClusterEntityCountEngineCountPostgresDatabaseProfileArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[int]]
        database_parameter: NotRequired[pulumi.Input[int]]
        network: NotRequired[pulumi.Input[int]]
        software: NotRequired[pulumi.Input[int]]
        storage: NotRequired[pulumi.Input[int]]
        windows_domain: NotRequired[pulumi.Input[int]]
elif False:
    NdbClusterEntityCountEngineCountPostgresDatabaseProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterEntityCountEngineCountPostgresDatabaseProfileArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[int]] = None,
                 database_parameter: Optional[pulumi.Input[int]] = None,
                 network: Optional[pulumi.Input[int]] = None,
                 software: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 windows_domain: Optional[pulumi.Input[int]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if database_parameter is not None:
            pulumi.set(__self__, "database_parameter", database_parameter)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if software is not None:
            pulumi.set(__self__, "software", software)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if windows_domain is not None:
            pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "database_parameter")

    @database_parameter.setter
    def database_parameter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "database_parameter", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def software(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "software")

    @software.setter
    def software(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "software", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "windows_domain")

    @windows_domain.setter
    def windows_domain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "windows_domain", value)


if not MYPY:
    class NdbClusterEntityCountEngineCountSaphanaDatabaseArgsDict(TypedDict):
        profiles: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountSaphanaDatabaseProfileArgsDict']]]]
        time_machines: NotRequired[pulumi.Input[int]]
elif False:
    NdbClusterEntityCountEngineCountSaphanaDatabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterEntityCountEngineCountSaphanaDatabaseArgs:
    def __init__(__self__, *,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountSaphanaDatabaseProfileArgs']]]] = None,
                 time_machines: Optional[pulumi.Input[int]] = None):
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if time_machines is not None:
            pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountSaphanaDatabaseProfileArgs']]]]:
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountSaphanaDatabaseProfileArgs']]]]):
        pulumi.set(self, "profiles", value)

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "time_machines")

    @time_machines.setter
    def time_machines(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_machines", value)


if not MYPY:
    class NdbClusterEntityCountEngineCountSaphanaDatabaseProfileArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[int]]
        database_parameter: NotRequired[pulumi.Input[int]]
        network: NotRequired[pulumi.Input[int]]
        software: NotRequired[pulumi.Input[int]]
        storage: NotRequired[pulumi.Input[int]]
        windows_domain: NotRequired[pulumi.Input[int]]
elif False:
    NdbClusterEntityCountEngineCountSaphanaDatabaseProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterEntityCountEngineCountSaphanaDatabaseProfileArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[int]] = None,
                 database_parameter: Optional[pulumi.Input[int]] = None,
                 network: Optional[pulumi.Input[int]] = None,
                 software: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 windows_domain: Optional[pulumi.Input[int]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if database_parameter is not None:
            pulumi.set(__self__, "database_parameter", database_parameter)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if software is not None:
            pulumi.set(__self__, "software", software)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if windows_domain is not None:
            pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "database_parameter")

    @database_parameter.setter
    def database_parameter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "database_parameter", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def software(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "software")

    @software.setter
    def software(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "software", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "windows_domain")

    @windows_domain.setter
    def windows_domain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "windows_domain", value)


if not MYPY:
    class NdbClusterEntityCountEngineCountSqlserverDatabaseArgsDict(TypedDict):
        profiles: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountSqlserverDatabaseProfileArgsDict']]]]
        time_machines: NotRequired[pulumi.Input[int]]
elif False:
    NdbClusterEntityCountEngineCountSqlserverDatabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterEntityCountEngineCountSqlserverDatabaseArgs:
    def __init__(__self__, *,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountSqlserverDatabaseProfileArgs']]]] = None,
                 time_machines: Optional[pulumi.Input[int]] = None):
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if time_machines is not None:
            pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountSqlserverDatabaseProfileArgs']]]]:
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterEntityCountEngineCountSqlserverDatabaseProfileArgs']]]]):
        pulumi.set(self, "profiles", value)

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "time_machines")

    @time_machines.setter
    def time_machines(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_machines", value)


if not MYPY:
    class NdbClusterEntityCountEngineCountSqlserverDatabaseProfileArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[int]]
        database_parameter: NotRequired[pulumi.Input[int]]
        network: NotRequired[pulumi.Input[int]]
        software: NotRequired[pulumi.Input[int]]
        storage: NotRequired[pulumi.Input[int]]
        windows_domain: NotRequired[pulumi.Input[int]]
elif False:
    NdbClusterEntityCountEngineCountSqlserverDatabaseProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterEntityCountEngineCountSqlserverDatabaseProfileArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[int]] = None,
                 database_parameter: Optional[pulumi.Input[int]] = None,
                 network: Optional[pulumi.Input[int]] = None,
                 software: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 windows_domain: Optional[pulumi.Input[int]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if database_parameter is not None:
            pulumi.set(__self__, "database_parameter", database_parameter)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if software is not None:
            pulumi.set(__self__, "software", software)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if windows_domain is not None:
            pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "database_parameter")

    @database_parameter.setter
    def database_parameter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "database_parameter", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def software(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "software")

    @software.setter
    def software(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "software", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "windows_domain")

    @windows_domain.setter
    def windows_domain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "windows_domain", value)


if not MYPY:
    class NdbClusterNetworksInfoArgsDict(TypedDict):
        access_types: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        VLAN access types for which you want to configure network segmentation. Supports [PRISM, DSIP, DBSERVER ]. 
        Prism Element: Select this VLAN access type to configure a VLAN that the NDB agent VM can use to communicate with Prism.
        Prism iSCSI Data Service. Select this VLAN access type to configure a VLAN that the agent VM can use to make connection requests to the iSCSI data services IP.
        DBServer Access from NDB server. Select this VLAN access type to configure a VLAN that is used for communications between the NDB agent VM and the database server VM on the newly registered NDB server cluster.
        """
        network_infos: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbClusterNetworksInfoNetworkInfoArgsDict']]]]
        """
        network segmentation to segment the network traffic
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type of vlan. Supported [DHCP, Static, IPAM]
        """
elif False:
    NdbClusterNetworksInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterNetworksInfoArgs:
    def __init__(__self__, *,
                 access_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 network_infos: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterNetworksInfoNetworkInfoArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] access_types: VLAN access types for which you want to configure network segmentation. Supports [PRISM, DSIP, DBSERVER ]. 
               Prism Element: Select this VLAN access type to configure a VLAN that the NDB agent VM can use to communicate with Prism.
               Prism iSCSI Data Service. Select this VLAN access type to configure a VLAN that the agent VM can use to make connection requests to the iSCSI data services IP.
               DBServer Access from NDB server. Select this VLAN access type to configure a VLAN that is used for communications between the NDB agent VM and the database server VM on the newly registered NDB server cluster.
        :param pulumi.Input[Sequence[pulumi.Input['NdbClusterNetworksInfoNetworkInfoArgs']]] network_infos: network segmentation to segment the network traffic
        :param pulumi.Input[str] type: type of vlan. Supported [DHCP, Static, IPAM]
        """
        if access_types is not None:
            pulumi.set(__self__, "access_types", access_types)
        if network_infos is not None:
            pulumi.set(__self__, "network_infos", network_infos)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessTypes")
    def access_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        VLAN access types for which you want to configure network segmentation. Supports [PRISM, DSIP, DBSERVER ]. 
        Prism Element: Select this VLAN access type to configure a VLAN that the NDB agent VM can use to communicate with Prism.
        Prism iSCSI Data Service. Select this VLAN access type to configure a VLAN that the agent VM can use to make connection requests to the iSCSI data services IP.
        DBServer Access from NDB server. Select this VLAN access type to configure a VLAN that is used for communications between the NDB agent VM and the database server VM on the newly registered NDB server cluster.
        """
        return pulumi.get(self, "access_types")

    @access_types.setter
    def access_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "access_types", value)

    @property
    @pulumi.getter(name="networkInfos")
    def network_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterNetworksInfoNetworkInfoArgs']]]]:
        """
        network segmentation to segment the network traffic
        """
        return pulumi.get(self, "network_infos")

    @network_infos.setter
    def network_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbClusterNetworksInfoNetworkInfoArgs']]]]):
        pulumi.set(self, "network_infos", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type of vlan. Supported [DHCP, Static, IPAM]
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NdbClusterNetworksInfoNetworkInfoArgsDict(TypedDict):
        gateway: NotRequired[pulumi.Input[str]]
        """
        gateway of agent network
        """
        static_ip: NotRequired[pulumi.Input[str]]
        """
        static ip of agent network
        """
        subnet_mask: NotRequired[pulumi.Input[str]]
        """
        subnet mask of agent network
        """
        vlan_name: NotRequired[pulumi.Input[str]]
        """
        vlan name
        """
elif False:
    NdbClusterNetworksInfoNetworkInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterNetworksInfoNetworkInfoArgs:
    def __init__(__self__, *,
                 gateway: Optional[pulumi.Input[str]] = None,
                 static_ip: Optional[pulumi.Input[str]] = None,
                 subnet_mask: Optional[pulumi.Input[str]] = None,
                 vlan_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] gateway: gateway of agent network
        :param pulumi.Input[str] static_ip: static ip of agent network
        :param pulumi.Input[str] subnet_mask: subnet mask of agent network
        :param pulumi.Input[str] vlan_name: vlan name
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if static_ip is not None:
            pulumi.set(__self__, "static_ip", static_ip)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        gateway of agent network
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="staticIp")
    def static_ip(self) -> Optional[pulumi.Input[str]]:
        """
        static ip of agent network
        """
        return pulumi.get(self, "static_ip")

    @static_ip.setter
    def static_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "static_ip", value)

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[str]]:
        """
        subnet mask of agent network
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_mask", value)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[pulumi.Input[str]]:
        """
        vlan name
        """
        return pulumi.get(self, "vlan_name")

    @vlan_name.setter
    def vlan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_name", value)


if not MYPY:
    class NdbClusterPropertyArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        description of cluster
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the cluster to be registered
        """
        ref_id: NotRequired[pulumi.Input[str]]
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbClusterPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterPropertyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: description of cluster
        :param pulumi.Input[str] name: name of the cluster to be registered
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of cluster
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the cluster to be registered
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbClusterResourceConfigArgsDict(TypedDict):
        memory_threshold_percentage: NotRequired[pulumi.Input[float]]
        storage_threshold_percentage: NotRequired[pulumi.Input[float]]
elif False:
    NdbClusterResourceConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbClusterResourceConfigArgs:
    def __init__(__self__, *,
                 memory_threshold_percentage: Optional[pulumi.Input[float]] = None,
                 storage_threshold_percentage: Optional[pulumi.Input[float]] = None):
        if memory_threshold_percentage is not None:
            pulumi.set(__self__, "memory_threshold_percentage", memory_threshold_percentage)
        if storage_threshold_percentage is not None:
            pulumi.set(__self__, "storage_threshold_percentage", storage_threshold_percentage)

    @property
    @pulumi.getter(name="memoryThresholdPercentage")
    def memory_threshold_percentage(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "memory_threshold_percentage")

    @memory_threshold_percentage.setter
    def memory_threshold_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "memory_threshold_percentage", value)

    @property
    @pulumi.getter(name="storageThresholdPercentage")
    def storage_threshold_percentage(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "storage_threshold_percentage")

    @storage_threshold_percentage.setter
    def storage_threshold_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "storage_threshold_percentage", value)


if not MYPY:
    class NdbDatabaseActionargumentArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        - (Required) name of argument
        """
        value: pulumi.Input[str]
        """
        - (Required) value for argument
        """
elif False:
    NdbDatabaseActionargumentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseActionargumentArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: - (Required) name of argument
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Required) name of argument
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseClusterInfoArgsDict(TypedDict):
        cluster_ip_infos: pulumi.Input[Sequence[pulumi.Input['NdbDatabaseClusterInfoClusterIpInfoArgsDict']]]
elif False:
    NdbDatabaseClusterInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseClusterInfoArgs:
    def __init__(__self__, *,
                 cluster_ip_infos: pulumi.Input[Sequence[pulumi.Input['NdbDatabaseClusterInfoClusterIpInfoArgs']]]):
        pulumi.set(__self__, "cluster_ip_infos", cluster_ip_infos)

    @property
    @pulumi.getter(name="clusterIpInfos")
    def cluster_ip_infos(self) -> pulumi.Input[Sequence[pulumi.Input['NdbDatabaseClusterInfoClusterIpInfoArgs']]]:
        return pulumi.get(self, "cluster_ip_infos")

    @cluster_ip_infos.setter
    def cluster_ip_infos(self, value: pulumi.Input[Sequence[pulumi.Input['NdbDatabaseClusterInfoClusterIpInfoArgs']]]):
        pulumi.set(self, "cluster_ip_infos", value)


if not MYPY:
    class NdbDatabaseClusterInfoClusterIpInfoArgsDict(TypedDict):
        nx_cluster_id: pulumi.Input[str]
        """
        - (Optional) cluster id.
        """
        ip_infos: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseClusterInfoClusterIpInfoIpInfoArgsDict']]]]
        """
        - (Optional) IP infos for custom network profile.
        """
elif False:
    NdbDatabaseClusterInfoClusterIpInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseClusterInfoClusterIpInfoArgs:
    def __init__(__self__, *,
                 nx_cluster_id: pulumi.Input[str],
                 ip_infos: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseClusterInfoClusterIpInfoIpInfoArgs']]]] = None):
        """
        :param pulumi.Input[str] nx_cluster_id: - (Optional) cluster id.
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseClusterInfoClusterIpInfoIpInfoArgs']]] ip_infos: - (Optional) IP infos for custom network profile.
        """
        pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        if ip_infos is not None:
            pulumi.set(__self__, "ip_infos", ip_infos)

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> pulumi.Input[str]:
        """
        - (Optional) cluster id.
        """
        return pulumi.get(self, "nx_cluster_id")

    @nx_cluster_id.setter
    def nx_cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "nx_cluster_id", value)

    @property
    @pulumi.getter(name="ipInfos")
    def ip_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseClusterInfoClusterIpInfoIpInfoArgs']]]]:
        """
        - (Optional) IP infos for custom network profile.
        """
        return pulumi.get(self, "ip_infos")

    @ip_infos.setter
    def ip_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseClusterInfoClusterIpInfoIpInfoArgs']]]]):
        pulumi.set(self, "ip_infos", value)


if not MYPY:
    class NdbDatabaseClusterInfoClusterIpInfoIpInfoArgsDict(TypedDict):
        ip_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        ip_type: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseClusterInfoClusterIpInfoIpInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseClusterInfoClusterIpInfoIpInfoArgs:
    def __init__(__self__, *,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_type: Optional[pulumi.Input[str]] = None):
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ip_type is not None:
            pulumi.set(__self__, "ip_type", ip_type)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_addresses", value)

    @property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_type")

    @ip_type.setter
    def ip_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_type", value)


if not MYPY:
    class NdbDatabaseDatabaseNodeArgsDict(TypedDict):
        access_level: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        database_id: NotRequired[pulumi.Input[str]]
        database_status: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        date_modified: NotRequired[pulumi.Input[str]]
        dbserver: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        dbserver_id: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        """
        - (Optional) The description
        """
        id: NotRequired[pulumi.Input[str]]
        infos: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeInfoArgsDict']]]]
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) Name of the instance.
        """
        primary: NotRequired[pulumi.Input[bool]]
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodePropertyArgsDict']]]]
        """
        List of all the properties
        """
        protection_domain_id: NotRequired[pulumi.Input[str]]
        protection_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeProtectionDomainArgsDict']]]]
        software_installation_id: NotRequired[pulumi.Input[str]]
        status: NotRequired[pulumi.Input[str]]
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeTagArgsDict']]]]
        """
        - (Optional) tags
        """
elif False:
    NdbDatabaseDatabaseNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseDatabaseNodeArgs:
    def __init__(__self__, *,
                 access_level: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 database_id: Optional[pulumi.Input[str]] = None,
                 database_status: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 dbserver: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 dbserver_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeInfoArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodePropertyArgs']]]] = None,
                 protection_domain_id: Optional[pulumi.Input[str]] = None,
                 protection_domains: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeProtectionDomainArgs']]]] = None,
                 software_installation_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeTagArgs']]]] = None):
        """
        :param pulumi.Input[str] description: - (Optional) The description
        :param pulumi.Input[str] name: - (Required) Name of the instance.
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodePropertyArgs']]] properties: List of all the properties
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeTagArgs']]] tags: - (Optional) tags
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if dbserver is not None:
            pulumi.set(__self__, "dbserver", dbserver)
        if dbserver_id is not None:
            pulumi.set(__self__, "dbserver_id", dbserver_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if protection_domain_id is not None:
            pulumi.set(__self__, "protection_domain_id", protection_domain_id)
        if protection_domains is not None:
            pulumi.set(__self__, "protection_domains", protection_domains)
        if software_installation_id is not None:
            pulumi.set(__self__, "software_installation_id", software_installation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "access_level")

    @access_level.setter
    def access_level(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "access_level", value)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_id", value)

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_status")

    @database_status.setter
    def database_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_status", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def dbserver(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "dbserver")

    @dbserver.setter
    def dbserver(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "dbserver", value)

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dbserver_id")

    @dbserver_id.setter
    def dbserver_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbserver_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeInfoArgs']]]]:
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodePropertyArgs']]]]:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodePropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="protectionDomainId")
    def protection_domain_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protection_domain_id")

    @protection_domain_id.setter
    def protection_domain_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_domain_id", value)

    @property
    @pulumi.getter(name="protectionDomains")
    def protection_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeProtectionDomainArgs']]]]:
        return pulumi.get(self, "protection_domains")

    @protection_domains.setter
    def protection_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeProtectionDomainArgs']]]]):
        pulumi.set(self, "protection_domains", value)

    @property
    @pulumi.getter(name="softwareInstallationId")
    def software_installation_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "software_installation_id")

    @software_installation_id.setter
    def software_installation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "software_installation_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeTagArgs']]]]:
        """
        - (Optional) tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeTagArgs']]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class NdbDatabaseDatabaseNodeInfoArgsDict(TypedDict):
        info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        secure_info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    NdbDatabaseDatabaseNodeInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseDatabaseNodeInfoArgs:
    def __init__(__self__, *,
                 info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 secure_info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "secure_info")

    @secure_info.setter
    def secure_info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secure_info", value)


if not MYPY:
    class NdbDatabaseDatabaseNodePropertyArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        - (Optional) The description
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) Name of the instance.
        """
        ref_id: NotRequired[pulumi.Input[str]]
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbDatabaseDatabaseNodePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseDatabaseNodePropertyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: - (Optional) The description
        :param pulumi.Input[str] name: - (Required) Name of the instance.
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseDatabaseNodeProtectionDomainArgsDict(TypedDict):
        assoc_entities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        cloud_id: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        date_modified: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        """
        - (Optional) The description
        """
        era_created: NotRequired[pulumi.Input[bool]]
        id: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) Name of the instance.
        """
        owner_id: NotRequired[pulumi.Input[str]]
        primary_host: NotRequired[pulumi.Input[str]]
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeProtectionDomainPropertyArgsDict']]]]
        """
        List of all the properties
        """
        status: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseDatabaseNodeProtectionDomainArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseDatabaseNodeProtectionDomainArgs:
    def __init__(__self__, *,
                 assoc_entities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cloud_id: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 era_created: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 primary_host: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeProtectionDomainPropertyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: - (Optional) The description
        :param pulumi.Input[str] name: - (Required) Name of the instance.
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeProtectionDomainPropertyArgs']]] properties: List of all the properties
        """
        if assoc_entities is not None:
            pulumi.set(__self__, "assoc_entities", assoc_entities)
        if cloud_id is not None:
            pulumi.set(__self__, "cloud_id", cloud_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if era_created is not None:
            pulumi.set(__self__, "era_created", era_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if primary_host is not None:
            pulumi.set(__self__, "primary_host", primary_host)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assocEntities")
    def assoc_entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "assoc_entities")

    @assoc_entities.setter
    def assoc_entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "assoc_entities", value)

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_id")

    @cloud_id.setter
    def cloud_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_id", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="eraCreated")
    def era_created(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "era_created")

    @era_created.setter
    def era_created(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "era_created", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="primaryHost")
    def primary_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_host")

    @primary_host.setter
    def primary_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_host", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeProtectionDomainPropertyArgs']]]]:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeProtectionDomainPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NdbDatabaseDatabaseNodeProtectionDomainPropertyArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        - (Optional) The description
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) Name of the instance.
        """
        ref_id: NotRequired[pulumi.Input[str]]
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbDatabaseDatabaseNodeProtectionDomainPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseDatabaseNodeProtectionDomainPropertyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: - (Optional) The description
        :param pulumi.Input[str] name: - (Required) Name of the instance.
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseDatabaseNodeTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbDatabaseDatabaseNodeTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseDatabaseNodeTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseInfoArgsDict(TypedDict):
        bpg_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigArgsDict']]]]
        secure_info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    NdbDatabaseInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseInfoArgs:
    def __init__(__self__, *,
                 bpg_configs: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigArgs']]]] = None,
                 secure_info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if bpg_configs is not None:
            pulumi.set(__self__, "bpg_configs", bpg_configs)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="bpgConfigs")
    def bpg_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigArgs']]]]:
        return pulumi.get(self, "bpg_configs")

    @bpg_configs.setter
    def bpg_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigArgs']]]]):
        pulumi.set(self, "bpg_configs", value)

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "secure_info")

    @secure_info.setter
    def secure_info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secure_info", value)


if not MYPY:
    class NdbDatabaseInfoBpgConfigArgsDict(TypedDict):
        bpg_db_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigBpgDbParamArgsDict']]]]
        storages: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigStorageArgsDict']]]]
        vm_properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigVmPropertyArgsDict']]]]
elif False:
    NdbDatabaseInfoBpgConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseInfoBpgConfigArgs:
    def __init__(__self__, *,
                 bpg_db_params: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigBpgDbParamArgs']]]] = None,
                 storages: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigStorageArgs']]]] = None,
                 vm_properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigVmPropertyArgs']]]] = None):
        if bpg_db_params is not None:
            pulumi.set(__self__, "bpg_db_params", bpg_db_params)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if vm_properties is not None:
            pulumi.set(__self__, "vm_properties", vm_properties)

    @property
    @pulumi.getter(name="bpgDbParams")
    def bpg_db_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigBpgDbParamArgs']]]]:
        return pulumi.get(self, "bpg_db_params")

    @bpg_db_params.setter
    def bpg_db_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigBpgDbParamArgs']]]]):
        pulumi.set(self, "bpg_db_params", value)

    @property
    @pulumi.getter
    def storages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigStorageArgs']]]]:
        return pulumi.get(self, "storages")

    @storages.setter
    def storages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigStorageArgs']]]]):
        pulumi.set(self, "storages", value)

    @property
    @pulumi.getter(name="vmProperties")
    def vm_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigVmPropertyArgs']]]]:
        return pulumi.get(self, "vm_properties")

    @vm_properties.setter
    def vm_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigVmPropertyArgs']]]]):
        pulumi.set(self, "vm_properties", value)


if not MYPY:
    class NdbDatabaseInfoBpgConfigBpgDbParamArgsDict(TypedDict):
        effective_cache_size: NotRequired[pulumi.Input[str]]
        maintenance_work_mem: NotRequired[pulumi.Input[str]]
        max_parallel_workers_per_gather: NotRequired[pulumi.Input[str]]
        max_worker_processes: NotRequired[pulumi.Input[str]]
        shared_buffers: NotRequired[pulumi.Input[str]]
        work_mem: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseInfoBpgConfigBpgDbParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseInfoBpgConfigBpgDbParamArgs:
    def __init__(__self__, *,
                 effective_cache_size: Optional[pulumi.Input[str]] = None,
                 maintenance_work_mem: Optional[pulumi.Input[str]] = None,
                 max_parallel_workers_per_gather: Optional[pulumi.Input[str]] = None,
                 max_worker_processes: Optional[pulumi.Input[str]] = None,
                 shared_buffers: Optional[pulumi.Input[str]] = None,
                 work_mem: Optional[pulumi.Input[str]] = None):
        if effective_cache_size is not None:
            pulumi.set(__self__, "effective_cache_size", effective_cache_size)
        if maintenance_work_mem is not None:
            pulumi.set(__self__, "maintenance_work_mem", maintenance_work_mem)
        if max_parallel_workers_per_gather is not None:
            pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if shared_buffers is not None:
            pulumi.set(__self__, "shared_buffers", shared_buffers)
        if work_mem is not None:
            pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="effectiveCacheSize")
    def effective_cache_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effective_cache_size")

    @effective_cache_size.setter
    def effective_cache_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effective_cache_size", value)

    @property
    @pulumi.getter(name="maintenanceWorkMem")
    def maintenance_work_mem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maintenance_work_mem")

    @maintenance_work_mem.setter
    def maintenance_work_mem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_work_mem", value)

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @max_parallel_workers_per_gather.setter
    def max_parallel_workers_per_gather(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_parallel_workers_per_gather", value)

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_worker_processes")

    @max_worker_processes.setter
    def max_worker_processes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_worker_processes", value)

    @property
    @pulumi.getter(name="sharedBuffers")
    def shared_buffers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shared_buffers")

    @shared_buffers.setter
    def shared_buffers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shared_buffers", value)

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "work_mem")

    @work_mem.setter
    def work_mem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_mem", value)


if not MYPY:
    class NdbDatabaseInfoBpgConfigStorageArgsDict(TypedDict):
        archive_storages: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigStorageArchiveStorageArgsDict']]]]
        data_disks: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigStorageDataDiskArgsDict']]]]
        log_disks: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigStorageLogDiskArgsDict']]]]
elif False:
    NdbDatabaseInfoBpgConfigStorageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseInfoBpgConfigStorageArgs:
    def __init__(__self__, *,
                 archive_storages: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigStorageArchiveStorageArgs']]]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigStorageDataDiskArgs']]]] = None,
                 log_disks: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigStorageLogDiskArgs']]]] = None):
        if archive_storages is not None:
            pulumi.set(__self__, "archive_storages", archive_storages)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if log_disks is not None:
            pulumi.set(__self__, "log_disks", log_disks)

    @property
    @pulumi.getter(name="archiveStorages")
    def archive_storages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigStorageArchiveStorageArgs']]]]:
        return pulumi.get(self, "archive_storages")

    @archive_storages.setter
    def archive_storages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigStorageArchiveStorageArgs']]]]):
        pulumi.set(self, "archive_storages", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigStorageDataDiskArgs']]]]:
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigStorageDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="logDisks")
    def log_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigStorageLogDiskArgs']]]]:
        return pulumi.get(self, "log_disks")

    @log_disks.setter
    def log_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoBpgConfigStorageLogDiskArgs']]]]):
        pulumi.set(self, "log_disks", value)


if not MYPY:
    class NdbDatabaseInfoBpgConfigStorageArchiveStorageArgsDict(TypedDict):
        size: NotRequired[pulumi.Input[float]]
elif False:
    NdbDatabaseInfoBpgConfigStorageArchiveStorageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseInfoBpgConfigStorageArchiveStorageArgs:
    def __init__(__self__, *,
                 size: Optional[pulumi.Input[float]] = None):
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "size", value)


if not MYPY:
    class NdbDatabaseInfoBpgConfigStorageDataDiskArgsDict(TypedDict):
        count: NotRequired[pulumi.Input[float]]
elif False:
    NdbDatabaseInfoBpgConfigStorageDataDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseInfoBpgConfigStorageDataDiskArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[float]] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "count", value)


if not MYPY:
    class NdbDatabaseInfoBpgConfigStorageLogDiskArgsDict(TypedDict):
        count: NotRequired[pulumi.Input[float]]
        size: NotRequired[pulumi.Input[float]]
elif False:
    NdbDatabaseInfoBpgConfigStorageLogDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseInfoBpgConfigStorageLogDiskArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[float]] = None,
                 size: Optional[pulumi.Input[float]] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "size", value)


if not MYPY:
    class NdbDatabaseInfoBpgConfigVmPropertyArgsDict(TypedDict):
        dirty_background_ratio: NotRequired[pulumi.Input[float]]
        dirty_expire_centisecs: NotRequired[pulumi.Input[float]]
        dirty_ratio: NotRequired[pulumi.Input[float]]
        dirty_writeback_centisecs: NotRequired[pulumi.Input[float]]
        nr_hugepages: NotRequired[pulumi.Input[float]]
        overcommit_memory: NotRequired[pulumi.Input[float]]
        swappiness: NotRequired[pulumi.Input[float]]
elif False:
    NdbDatabaseInfoBpgConfigVmPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseInfoBpgConfigVmPropertyArgs:
    def __init__(__self__, *,
                 dirty_background_ratio: Optional[pulumi.Input[float]] = None,
                 dirty_expire_centisecs: Optional[pulumi.Input[float]] = None,
                 dirty_ratio: Optional[pulumi.Input[float]] = None,
                 dirty_writeback_centisecs: Optional[pulumi.Input[float]] = None,
                 nr_hugepages: Optional[pulumi.Input[float]] = None,
                 overcommit_memory: Optional[pulumi.Input[float]] = None,
                 swappiness: Optional[pulumi.Input[float]] = None):
        if dirty_background_ratio is not None:
            pulumi.set(__self__, "dirty_background_ratio", dirty_background_ratio)
        if dirty_expire_centisecs is not None:
            pulumi.set(__self__, "dirty_expire_centisecs", dirty_expire_centisecs)
        if dirty_ratio is not None:
            pulumi.set(__self__, "dirty_ratio", dirty_ratio)
        if dirty_writeback_centisecs is not None:
            pulumi.set(__self__, "dirty_writeback_centisecs", dirty_writeback_centisecs)
        if nr_hugepages is not None:
            pulumi.set(__self__, "nr_hugepages", nr_hugepages)
        if overcommit_memory is not None:
            pulumi.set(__self__, "overcommit_memory", overcommit_memory)
        if swappiness is not None:
            pulumi.set(__self__, "swappiness", swappiness)

    @property
    @pulumi.getter(name="dirtyBackgroundRatio")
    def dirty_background_ratio(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_background_ratio")

    @dirty_background_ratio.setter
    def dirty_background_ratio(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_background_ratio", value)

    @property
    @pulumi.getter(name="dirtyExpireCentisecs")
    def dirty_expire_centisecs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_expire_centisecs")

    @dirty_expire_centisecs.setter
    def dirty_expire_centisecs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_expire_centisecs", value)

    @property
    @pulumi.getter(name="dirtyRatio")
    def dirty_ratio(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_ratio")

    @dirty_ratio.setter
    def dirty_ratio(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_ratio", value)

    @property
    @pulumi.getter(name="dirtyWritebackCentisecs")
    def dirty_writeback_centisecs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_writeback_centisecs")

    @dirty_writeback_centisecs.setter
    def dirty_writeback_centisecs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_writeback_centisecs", value)

    @property
    @pulumi.getter(name="nrHugepages")
    def nr_hugepages(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "nr_hugepages")

    @nr_hugepages.setter
    def nr_hugepages(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "nr_hugepages", value)

    @property
    @pulumi.getter(name="overcommitMemory")
    def overcommit_memory(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "overcommit_memory")

    @overcommit_memory.setter
    def overcommit_memory(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "overcommit_memory", value)

    @property
    @pulumi.getter
    def swappiness(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "swappiness")

    @swappiness.setter
    def swappiness(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "swappiness", value)


if not MYPY:
    class NdbDatabaseLcmConfigArgsDict(TypedDict):
        expiry_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLcmConfigExpiryDetailArgsDict']]]]
        post_delete_commands: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLcmConfigPostDeleteCommandArgsDict']]]]
        pre_delete_commands: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLcmConfigPreDeleteCommandArgsDict']]]]
        refresh_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLcmConfigRefreshDetailArgsDict']]]]
elif False:
    NdbDatabaseLcmConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseLcmConfigArgs:
    def __init__(__self__, *,
                 expiry_details: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLcmConfigExpiryDetailArgs']]]] = None,
                 post_delete_commands: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLcmConfigPostDeleteCommandArgs']]]] = None,
                 pre_delete_commands: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLcmConfigPreDeleteCommandArgs']]]] = None,
                 refresh_details: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLcmConfigRefreshDetailArgs']]]] = None):
        if expiry_details is not None:
            pulumi.set(__self__, "expiry_details", expiry_details)
        if post_delete_commands is not None:
            pulumi.set(__self__, "post_delete_commands", post_delete_commands)
        if pre_delete_commands is not None:
            pulumi.set(__self__, "pre_delete_commands", pre_delete_commands)
        if refresh_details is not None:
            pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLcmConfigExpiryDetailArgs']]]]:
        return pulumi.get(self, "expiry_details")

    @expiry_details.setter
    def expiry_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLcmConfigExpiryDetailArgs']]]]):
        pulumi.set(self, "expiry_details", value)

    @property
    @pulumi.getter(name="postDeleteCommands")
    def post_delete_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLcmConfigPostDeleteCommandArgs']]]]:
        return pulumi.get(self, "post_delete_commands")

    @post_delete_commands.setter
    def post_delete_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLcmConfigPostDeleteCommandArgs']]]]):
        pulumi.set(self, "post_delete_commands", value)

    @property
    @pulumi.getter(name="preDeleteCommands")
    def pre_delete_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLcmConfigPreDeleteCommandArgs']]]]:
        return pulumi.get(self, "pre_delete_commands")

    @pre_delete_commands.setter
    def pre_delete_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLcmConfigPreDeleteCommandArgs']]]]):
        pulumi.set(self, "pre_delete_commands", value)

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLcmConfigRefreshDetailArgs']]]]:
        return pulumi.get(self, "refresh_details")

    @refresh_details.setter
    def refresh_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLcmConfigRefreshDetailArgs']]]]):
        pulumi.set(self, "refresh_details", value)


if not MYPY:
    class NdbDatabaseLcmConfigExpiryDetailArgsDict(TypedDict):
        delete_database: NotRequired[pulumi.Input[bool]]
        delete_time_machine: NotRequired[pulumi.Input[bool]]
        """
        - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        """
        delete_vm: NotRequired[pulumi.Input[bool]]
        effective_timestamp: NotRequired[pulumi.Input[str]]
        expire_in_days: NotRequired[pulumi.Input[int]]
        expiry_date_timezone: NotRequired[pulumi.Input[str]]
        expiry_timestamp: NotRequired[pulumi.Input[str]]
        remind_before_in_days: NotRequired[pulumi.Input[int]]
        user_created: NotRequired[pulumi.Input[bool]]
elif False:
    NdbDatabaseLcmConfigExpiryDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseLcmConfigExpiryDetailArgs:
    def __init__(__self__, *,
                 delete_database: Optional[pulumi.Input[bool]] = None,
                 delete_time_machine: Optional[pulumi.Input[bool]] = None,
                 delete_vm: Optional[pulumi.Input[bool]] = None,
                 effective_timestamp: Optional[pulumi.Input[str]] = None,
                 expire_in_days: Optional[pulumi.Input[int]] = None,
                 expiry_date_timezone: Optional[pulumi.Input[str]] = None,
                 expiry_timestamp: Optional[pulumi.Input[str]] = None,
                 remind_before_in_days: Optional[pulumi.Input[int]] = None,
                 user_created: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] delete_time_machine: - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        """
        if delete_database is not None:
            pulumi.set(__self__, "delete_database", delete_database)
        if delete_time_machine is not None:
            pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        if delete_vm is not None:
            pulumi.set(__self__, "delete_vm", delete_vm)
        if effective_timestamp is not None:
            pulumi.set(__self__, "effective_timestamp", effective_timestamp)
        if expire_in_days is not None:
            pulumi.set(__self__, "expire_in_days", expire_in_days)
        if expiry_date_timezone is not None:
            pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        if expiry_timestamp is not None:
            pulumi.set(__self__, "expiry_timestamp", expiry_timestamp)
        if remind_before_in_days is not None:
            pulumi.set(__self__, "remind_before_in_days", remind_before_in_days)
        if user_created is not None:
            pulumi.set(__self__, "user_created", user_created)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_database")

    @delete_database.setter
    def delete_database(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_database", value)

    @property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> Optional[pulumi.Input[bool]]:
        """
        - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        """
        return pulumi.get(self, "delete_time_machine")

    @delete_time_machine.setter
    def delete_time_machine(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_time_machine", value)

    @property
    @pulumi.getter(name="deleteVm")
    def delete_vm(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_vm")

    @delete_vm.setter
    def delete_vm(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_vm", value)

    @property
    @pulumi.getter(name="effectiveTimestamp")
    def effective_timestamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effective_timestamp")

    @effective_timestamp.setter
    def effective_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effective_timestamp", value)

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "expire_in_days")

    @expire_in_days.setter
    def expire_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expire_in_days", value)

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiry_date_timezone")

    @expiry_date_timezone.setter
    def expiry_date_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry_date_timezone", value)

    @property
    @pulumi.getter(name="expiryTimestamp")
    def expiry_timestamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiry_timestamp")

    @expiry_timestamp.setter
    def expiry_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry_timestamp", value)

    @property
    @pulumi.getter(name="remindBeforeInDays")
    def remind_before_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remind_before_in_days")

    @remind_before_in_days.setter
    def remind_before_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remind_before_in_days", value)

    @property
    @pulumi.getter(name="userCreated")
    def user_created(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "user_created")

    @user_created.setter
    def user_created(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_created", value)


if not MYPY:
    class NdbDatabaseLcmConfigPostDeleteCommandArgsDict(TypedDict):
        command: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseLcmConfigPostDeleteCommandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseLcmConfigPostDeleteCommandArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)


if not MYPY:
    class NdbDatabaseLcmConfigPreDeleteCommandArgsDict(TypedDict):
        command: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseLcmConfigPreDeleteCommandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseLcmConfigPreDeleteCommandArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)


if not MYPY:
    class NdbDatabaseLcmConfigRefreshDetailArgsDict(TypedDict):
        last_refresh_date: NotRequired[pulumi.Input[str]]
        next_refresh_date: NotRequired[pulumi.Input[str]]
        refresh_date_timezone: NotRequired[pulumi.Input[str]]
        refresh_in_days: NotRequired[pulumi.Input[int]]
        refresh_in_hours: NotRequired[pulumi.Input[int]]
        refresh_in_months: NotRequired[pulumi.Input[int]]
        refresh_time: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseLcmConfigRefreshDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseLcmConfigRefreshDetailArgs:
    def __init__(__self__, *,
                 last_refresh_date: Optional[pulumi.Input[str]] = None,
                 next_refresh_date: Optional[pulumi.Input[str]] = None,
                 refresh_date_timezone: Optional[pulumi.Input[str]] = None,
                 refresh_in_days: Optional[pulumi.Input[int]] = None,
                 refresh_in_hours: Optional[pulumi.Input[int]] = None,
                 refresh_in_months: Optional[pulumi.Input[int]] = None,
                 refresh_time: Optional[pulumi.Input[str]] = None):
        if last_refresh_date is not None:
            pulumi.set(__self__, "last_refresh_date", last_refresh_date)
        if next_refresh_date is not None:
            pulumi.set(__self__, "next_refresh_date", next_refresh_date)
        if refresh_date_timezone is not None:
            pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        if refresh_in_days is not None:
            pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        if refresh_in_hours is not None:
            pulumi.set(__self__, "refresh_in_hours", refresh_in_hours)
        if refresh_in_months is not None:
            pulumi.set(__self__, "refresh_in_months", refresh_in_months)
        if refresh_time is not None:
            pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="lastRefreshDate")
    def last_refresh_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_refresh_date")

    @last_refresh_date.setter
    def last_refresh_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_refresh_date", value)

    @property
    @pulumi.getter(name="nextRefreshDate")
    def next_refresh_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_refresh_date")

    @next_refresh_date.setter
    def next_refresh_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_refresh_date", value)

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_date_timezone")

    @refresh_date_timezone.setter
    def refresh_date_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_date_timezone", value)

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_in_days")

    @refresh_in_days.setter
    def refresh_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_in_days", value)

    @property
    @pulumi.getter(name="refreshInHours")
    def refresh_in_hours(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_in_hours")

    @refresh_in_hours.setter
    def refresh_in_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_in_hours", value)

    @property
    @pulumi.getter(name="refreshInMonths")
    def refresh_in_months(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_in_months")

    @refresh_in_months.setter
    def refresh_in_months(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_in_months", value)

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_time")

    @refresh_time.setter
    def refresh_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_time", value)


if not MYPY:
    class NdbDatabaseLinkedDatabaseArgsDict(TypedDict):
        database_name: NotRequired[pulumi.Input[str]]
        database_status: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        date_modified: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        """
        - (Optional) The description
        """
        id: NotRequired[pulumi.Input[str]]
        infos: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLinkedDatabaseInfoArgsDict']]]]
        metric: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) Name of the instance.
        """
        parent_database_id: NotRequired[pulumi.Input[str]]
        parent_linked_database_id: NotRequired[pulumi.Input[str]]
        snapshot_id: NotRequired[pulumi.Input[str]]
        status: NotRequired[pulumi.Input[str]]
        timezone: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseLinkedDatabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseLinkedDatabaseArgs:
    def __init__(__self__, *,
                 database_name: Optional[pulumi.Input[str]] = None,
                 database_status: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLinkedDatabaseInfoArgs']]]] = None,
                 metric: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_database_id: Optional[pulumi.Input[str]] = None,
                 parent_linked_database_id: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: - (Optional) The description
        :param pulumi.Input[str] name: - (Required) Name of the instance.
        """
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_database_id is not None:
            pulumi.set(__self__, "parent_database_id", parent_database_id)
        if parent_linked_database_id is not None:
            pulumi.set(__self__, "parent_linked_database_id", parent_linked_database_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_status")

    @database_status.setter
    def database_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_status", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLinkedDatabaseInfoArgs']]]]:
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLinkedDatabaseInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parent_database_id")

    @parent_database_id.setter
    def parent_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_database_id", value)

    @property
    @pulumi.getter(name="parentLinkedDatabaseId")
    def parent_linked_database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parent_linked_database_id")

    @parent_linked_database_id.setter
    def parent_linked_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_linked_database_id", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


if not MYPY:
    class NdbDatabaseLinkedDatabaseInfoArgsDict(TypedDict):
        info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        secure_info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    NdbDatabaseLinkedDatabaseInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseLinkedDatabaseInfoArgs:
    def __init__(__self__, *,
                 info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 secure_info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "secure_info")

    @secure_info.setter
    def secure_info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secure_info", value)


if not MYPY:
    class NdbDatabaseMaintenanceTasksArgsDict(TypedDict):
        maintenance_window_id: NotRequired[pulumi.Input[str]]
        tasks: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseMaintenanceTasksTaskArgsDict']]]]
elif False:
    NdbDatabaseMaintenanceTasksArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseMaintenanceTasksArgs:
    def __init__(__self__, *,
                 maintenance_window_id: Optional[pulumi.Input[str]] = None,
                 tasks: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseMaintenanceTasksTaskArgs']]]] = None):
        if maintenance_window_id is not None:
            pulumi.set(__self__, "maintenance_window_id", maintenance_window_id)
        if tasks is not None:
            pulumi.set(__self__, "tasks", tasks)

    @property
    @pulumi.getter(name="maintenanceWindowId")
    def maintenance_window_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maintenance_window_id")

    @maintenance_window_id.setter
    def maintenance_window_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_window_id", value)

    @property
    @pulumi.getter
    def tasks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseMaintenanceTasksTaskArgs']]]]:
        return pulumi.get(self, "tasks")

    @tasks.setter
    def tasks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseMaintenanceTasksTaskArgs']]]]):
        pulumi.set(self, "tasks", value)


if not MYPY:
    class NdbDatabaseMaintenanceTasksTaskArgsDict(TypedDict):
        post_command: NotRequired[pulumi.Input[str]]
        pre_command: NotRequired[pulumi.Input[str]]
        task_type: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseMaintenanceTasksTaskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseMaintenanceTasksTaskArgs:
    def __init__(__self__, *,
                 post_command: Optional[pulumi.Input[str]] = None,
                 pre_command: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        if post_command is not None:
            pulumi.set(__self__, "post_command", post_command)
        if pre_command is not None:
            pulumi.set(__self__, "pre_command", pre_command)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="postCommand")
    def post_command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "post_command")

    @post_command.setter
    def post_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_command", value)

    @property
    @pulumi.getter(name="preCommand")
    def pre_command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_command")

    @pre_command.setter
    def pre_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_command", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


if not MYPY:
    class NdbDatabaseNodeArgsDict(TypedDict):
        vmname: pulumi.Input[str]
        """
        - (Required) name of vm
        """
        computeprofileid: NotRequired[pulumi.Input[str]]
        """
        - (Optional) compute profile id
        """
        dbserverid: NotRequired[pulumi.Input[str]]
        """
        - (Optional) Database server ID required for existing VM
        """
        ip_infos: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseNodeIpInfoArgsDict']]]]
        """
        - (Optional) IP infos for custom network profile.
        """
        networkprofileid: NotRequired[pulumi.Input[str]]
        """
        - (Required) network profile ID
        """
        nx_cluster_id: NotRequired[pulumi.Input[str]]
        """
        - (Optional) cluster id.
        """
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseNodePropertyArgsDict']]]]
        """
        - (Optional) list of additional properties
        """
elif False:
    NdbDatabaseNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseNodeArgs:
    def __init__(__self__, *,
                 vmname: pulumi.Input[str],
                 computeprofileid: Optional[pulumi.Input[str]] = None,
                 dbserverid: Optional[pulumi.Input[str]] = None,
                 ip_infos: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseNodeIpInfoArgs']]]] = None,
                 networkprofileid: Optional[pulumi.Input[str]] = None,
                 nx_cluster_id: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseNodePropertyArgs']]]] = None):
        """
        :param pulumi.Input[str] vmname: - (Required) name of vm
        :param pulumi.Input[str] computeprofileid: - (Optional) compute profile id
        :param pulumi.Input[str] dbserverid: - (Optional) Database server ID required for existing VM
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseNodeIpInfoArgs']]] ip_infos: - (Optional) IP infos for custom network profile.
        :param pulumi.Input[str] networkprofileid: - (Required) network profile ID
        :param pulumi.Input[str] nx_cluster_id: - (Optional) cluster id.
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseNodePropertyArgs']]] properties: - (Optional) list of additional properties
        """
        pulumi.set(__self__, "vmname", vmname)
        if computeprofileid is not None:
            pulumi.set(__self__, "computeprofileid", computeprofileid)
        if dbserverid is not None:
            pulumi.set(__self__, "dbserverid", dbserverid)
        if ip_infos is not None:
            pulumi.set(__self__, "ip_infos", ip_infos)
        if networkprofileid is not None:
            pulumi.set(__self__, "networkprofileid", networkprofileid)
        if nx_cluster_id is not None:
            pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def vmname(self) -> pulumi.Input[str]:
        """
        - (Required) name of vm
        """
        return pulumi.get(self, "vmname")

    @vmname.setter
    def vmname(self, value: pulumi.Input[str]):
        pulumi.set(self, "vmname", value)

    @property
    @pulumi.getter
    def computeprofileid(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) compute profile id
        """
        return pulumi.get(self, "computeprofileid")

    @computeprofileid.setter
    def computeprofileid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "computeprofileid", value)

    @property
    @pulumi.getter
    def dbserverid(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) Database server ID required for existing VM
        """
        return pulumi.get(self, "dbserverid")

    @dbserverid.setter
    def dbserverid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbserverid", value)

    @property
    @pulumi.getter(name="ipInfos")
    def ip_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseNodeIpInfoArgs']]]]:
        """
        - (Optional) IP infos for custom network profile.
        """
        return pulumi.get(self, "ip_infos")

    @ip_infos.setter
    def ip_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseNodeIpInfoArgs']]]]):
        pulumi.set(self, "ip_infos", value)

    @property
    @pulumi.getter
    def networkprofileid(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) network profile ID
        """
        return pulumi.get(self, "networkprofileid")

    @networkprofileid.setter
    def networkprofileid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "networkprofileid", value)

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) cluster id.
        """
        return pulumi.get(self, "nx_cluster_id")

    @nx_cluster_id.setter
    def nx_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nx_cluster_id", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseNodePropertyArgs']]]]:
        """
        - (Optional) list of additional properties
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseNodePropertyArgs']]]]):
        pulumi.set(self, "properties", value)


if not MYPY:
    class NdbDatabaseNodeIpInfoArgsDict(TypedDict):
        ip_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        ip_type: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseNodeIpInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseNodeIpInfoArgs:
    def __init__(__self__, *,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_type: Optional[pulumi.Input[str]] = None):
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ip_type is not None:
            pulumi.set(__self__, "ip_type", ip_type)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_addresses", value)

    @property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_type")

    @ip_type.setter
    def ip_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_type", value)


if not MYPY:
    class NdbDatabaseNodePropertyArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        - (Required) Name of the instance.
        """
        value: pulumi.Input[str]
        """
        - (Required) value for argument
        """
elif False:
    NdbDatabaseNodePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseNodePropertyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: - (Required) Name of the instance.
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabasePostgresqlInfoArgsDict(TypedDict):
        database_names: pulumi.Input[str]
        """
        - (Required) name of initial database to be created
        """
        database_size: pulumi.Input[str]
        """
        - (Required) initial database size
        """
        db_password: pulumi.Input[str]
        """
        - (Required) database instance password
        """
        listener_port: pulumi.Input[str]
        """
        - (Required) listener port for database instance
        """
        allocate_pg_hugepage: NotRequired[pulumi.Input[bool]]
        """
        - (Optional) allocate huge page. Default: false
        """
        auth_method: NotRequired[pulumi.Input[str]]
        """
        - (Optional) auth methods. Default: md5
        """
        auto_tune_staging_drive: NotRequired[pulumi.Input[bool]]
        """
        - (Optional) enable auto tuning of staging drive. Default: false
        """
        cluster_database: NotRequired[pulumi.Input[bool]]
        """
        - (Optional) if clustered database. Default: false
        """
        ha_instance: NotRequired[pulumi.Input['NdbDatabasePostgresqlInfoHaInstanceArgsDict']]
        """
        - (Optional) High Availability instance
        """
        post_create_script: NotRequired[pulumi.Input[str]]
        """
        - (Optional) post instance create script
        """
        pre_create_script: NotRequired[pulumi.Input[str]]
        """
        - (Optional) pre instance create script
        """
elif False:
    NdbDatabasePostgresqlInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabasePostgresqlInfoArgs:
    def __init__(__self__, *,
                 database_names: pulumi.Input[str],
                 database_size: pulumi.Input[str],
                 db_password: pulumi.Input[str],
                 listener_port: pulumi.Input[str],
                 allocate_pg_hugepage: Optional[pulumi.Input[bool]] = None,
                 auth_method: Optional[pulumi.Input[str]] = None,
                 auto_tune_staging_drive: Optional[pulumi.Input[bool]] = None,
                 cluster_database: Optional[pulumi.Input[bool]] = None,
                 ha_instance: Optional[pulumi.Input['NdbDatabasePostgresqlInfoHaInstanceArgs']] = None,
                 post_create_script: Optional[pulumi.Input[str]] = None,
                 pre_create_script: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] database_names: - (Required) name of initial database to be created
        :param pulumi.Input[str] database_size: - (Required) initial database size
        :param pulumi.Input[str] db_password: - (Required) database instance password
        :param pulumi.Input[str] listener_port: - (Required) listener port for database instance
        :param pulumi.Input[bool] allocate_pg_hugepage: - (Optional) allocate huge page. Default: false
        :param pulumi.Input[str] auth_method: - (Optional) auth methods. Default: md5
        :param pulumi.Input[bool] auto_tune_staging_drive: - (Optional) enable auto tuning of staging drive. Default: false
        :param pulumi.Input[bool] cluster_database: - (Optional) if clustered database. Default: false
        :param pulumi.Input['NdbDatabasePostgresqlInfoHaInstanceArgs'] ha_instance: - (Optional) High Availability instance
        :param pulumi.Input[str] post_create_script: - (Optional) post instance create script
        :param pulumi.Input[str] pre_create_script: - (Optional) pre instance create script
        """
        pulumi.set(__self__, "database_names", database_names)
        pulumi.set(__self__, "database_size", database_size)
        pulumi.set(__self__, "db_password", db_password)
        pulumi.set(__self__, "listener_port", listener_port)
        if allocate_pg_hugepage is not None:
            pulumi.set(__self__, "allocate_pg_hugepage", allocate_pg_hugepage)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if auto_tune_staging_drive is not None:
            pulumi.set(__self__, "auto_tune_staging_drive", auto_tune_staging_drive)
        if cluster_database is not None:
            pulumi.set(__self__, "cluster_database", cluster_database)
        if ha_instance is not None:
            pulumi.set(__self__, "ha_instance", ha_instance)
        if post_create_script is not None:
            pulumi.set(__self__, "post_create_script", post_create_script)
        if pre_create_script is not None:
            pulumi.set(__self__, "pre_create_script", pre_create_script)

    @property
    @pulumi.getter(name="databaseNames")
    def database_names(self) -> pulumi.Input[str]:
        """
        - (Required) name of initial database to be created
        """
        return pulumi.get(self, "database_names")

    @database_names.setter
    def database_names(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_names", value)

    @property
    @pulumi.getter(name="databaseSize")
    def database_size(self) -> pulumi.Input[str]:
        """
        - (Required) initial database size
        """
        return pulumi.get(self, "database_size")

    @database_size.setter
    def database_size(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_size", value)

    @property
    @pulumi.getter(name="dbPassword")
    def db_password(self) -> pulumi.Input[str]:
        """
        - (Required) database instance password
        """
        return pulumi.get(self, "db_password")

    @db_password.setter
    def db_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_password", value)

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> pulumi.Input[str]:
        """
        - (Required) listener port for database instance
        """
        return pulumi.get(self, "listener_port")

    @listener_port.setter
    def listener_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "listener_port", value)

    @property
    @pulumi.getter(name="allocatePgHugepage")
    def allocate_pg_hugepage(self) -> Optional[pulumi.Input[bool]]:
        """
        - (Optional) allocate huge page. Default: false
        """
        return pulumi.get(self, "allocate_pg_hugepage")

    @allocate_pg_hugepage.setter
    def allocate_pg_hugepage(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allocate_pg_hugepage", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) auth methods. Default: md5
        """
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter(name="autoTuneStagingDrive")
    def auto_tune_staging_drive(self) -> Optional[pulumi.Input[bool]]:
        """
        - (Optional) enable auto tuning of staging drive. Default: false
        """
        return pulumi.get(self, "auto_tune_staging_drive")

    @auto_tune_staging_drive.setter
    def auto_tune_staging_drive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_tune_staging_drive", value)

    @property
    @pulumi.getter(name="clusterDatabase")
    def cluster_database(self) -> Optional[pulumi.Input[bool]]:
        """
        - (Optional) if clustered database. Default: false
        """
        return pulumi.get(self, "cluster_database")

    @cluster_database.setter
    def cluster_database(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cluster_database", value)

    @property
    @pulumi.getter(name="haInstance")
    def ha_instance(self) -> Optional[pulumi.Input['NdbDatabasePostgresqlInfoHaInstanceArgs']]:
        """
        - (Optional) High Availability instance
        """
        return pulumi.get(self, "ha_instance")

    @ha_instance.setter
    def ha_instance(self, value: Optional[pulumi.Input['NdbDatabasePostgresqlInfoHaInstanceArgs']]):
        pulumi.set(self, "ha_instance", value)

    @property
    @pulumi.getter(name="postCreateScript")
    def post_create_script(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) post instance create script
        """
        return pulumi.get(self, "post_create_script")

    @post_create_script.setter
    def post_create_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_create_script", value)

    @property
    @pulumi.getter(name="preCreateScript")
    def pre_create_script(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) pre instance create script
        """
        return pulumi.get(self, "pre_create_script")

    @pre_create_script.setter
    def pre_create_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_create_script", value)


if not MYPY:
    class NdbDatabasePostgresqlInfoHaInstanceArgsDict(TypedDict):
        cluster_name: pulumi.Input[str]
        """
        - (Required) cluster name
        """
        patroni_cluster_name: pulumi.Input[str]
        """
        - (Required) patroni cluster name
        """
        proxy_read_port: pulumi.Input[str]
        """
        -  (Required) proxy read port
        """
        proxy_write_port: pulumi.Input[str]
        """
        - (Required) proxy write port
        """
        archive_wal_expire_days: NotRequired[pulumi.Input[int]]
        """
        - (Optional) archive wal expire days. Default is set to -1
        """
        backup_policy: NotRequired[pulumi.Input[str]]
        """
        - (Optional) backup policy for instance. Default is "primary_only"
        """
        cluster_description: NotRequired[pulumi.Input[str]]
        deploy_haproxy: NotRequired[pulumi.Input[bool]]
        """
        - (Optional) HA proxy node. Default is set to false
        """
        enable_peer_auth: NotRequired[pulumi.Input[bool]]
        """
        - (Optional) enable peer auth . Default is set to false.
        """
        enable_synchronous_mode: NotRequired[pulumi.Input[bool]]
        """
        - (Optional) enable synchronous mode. Default is set to true
        """
        failover_mode: NotRequired[pulumi.Input[str]]
        """
        - (Optional) failover mode of nodes.
        """
        node_type: NotRequired[pulumi.Input[str]]
        """
        - (Optional) node type of instance. Default is set to database
        """
        provision_virtual_ip: NotRequired[pulumi.Input[bool]]
        """
        - (Optional) provisional virtual ip. Default is set to true
        """
elif False:
    NdbDatabasePostgresqlInfoHaInstanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabasePostgresqlInfoHaInstanceArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str],
                 patroni_cluster_name: pulumi.Input[str],
                 proxy_read_port: pulumi.Input[str],
                 proxy_write_port: pulumi.Input[str],
                 archive_wal_expire_days: Optional[pulumi.Input[int]] = None,
                 backup_policy: Optional[pulumi.Input[str]] = None,
                 cluster_description: Optional[pulumi.Input[str]] = None,
                 deploy_haproxy: Optional[pulumi.Input[bool]] = None,
                 enable_peer_auth: Optional[pulumi.Input[bool]] = None,
                 enable_synchronous_mode: Optional[pulumi.Input[bool]] = None,
                 failover_mode: Optional[pulumi.Input[str]] = None,
                 node_type: Optional[pulumi.Input[str]] = None,
                 provision_virtual_ip: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] cluster_name: - (Required) cluster name
        :param pulumi.Input[str] patroni_cluster_name: - (Required) patroni cluster name
        :param pulumi.Input[str] proxy_read_port: -  (Required) proxy read port
        :param pulumi.Input[str] proxy_write_port: - (Required) proxy write port
        :param pulumi.Input[int] archive_wal_expire_days: - (Optional) archive wal expire days. Default is set to -1
        :param pulumi.Input[str] backup_policy: - (Optional) backup policy for instance. Default is "primary_only"
        :param pulumi.Input[bool] deploy_haproxy: - (Optional) HA proxy node. Default is set to false
        :param pulumi.Input[bool] enable_peer_auth: - (Optional) enable peer auth . Default is set to false.
        :param pulumi.Input[bool] enable_synchronous_mode: - (Optional) enable synchronous mode. Default is set to true
        :param pulumi.Input[str] failover_mode: - (Optional) failover mode of nodes.
        :param pulumi.Input[str] node_type: - (Optional) node type of instance. Default is set to database
        :param pulumi.Input[bool] provision_virtual_ip: - (Optional) provisional virtual ip. Default is set to true
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "patroni_cluster_name", patroni_cluster_name)
        pulumi.set(__self__, "proxy_read_port", proxy_read_port)
        pulumi.set(__self__, "proxy_write_port", proxy_write_port)
        if archive_wal_expire_days is not None:
            pulumi.set(__self__, "archive_wal_expire_days", archive_wal_expire_days)
        if backup_policy is not None:
            pulumi.set(__self__, "backup_policy", backup_policy)
        if cluster_description is not None:
            pulumi.set(__self__, "cluster_description", cluster_description)
        if deploy_haproxy is not None:
            pulumi.set(__self__, "deploy_haproxy", deploy_haproxy)
        if enable_peer_auth is not None:
            pulumi.set(__self__, "enable_peer_auth", enable_peer_auth)
        if enable_synchronous_mode is not None:
            pulumi.set(__self__, "enable_synchronous_mode", enable_synchronous_mode)
        if failover_mode is not None:
            pulumi.set(__self__, "failover_mode", failover_mode)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if provision_virtual_ip is not None:
            pulumi.set(__self__, "provision_virtual_ip", provision_virtual_ip)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        - (Required) cluster name
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="patroniClusterName")
    def patroni_cluster_name(self) -> pulumi.Input[str]:
        """
        - (Required) patroni cluster name
        """
        return pulumi.get(self, "patroni_cluster_name")

    @patroni_cluster_name.setter
    def patroni_cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "patroni_cluster_name", value)

    @property
    @pulumi.getter(name="proxyReadPort")
    def proxy_read_port(self) -> pulumi.Input[str]:
        """
        -  (Required) proxy read port
        """
        return pulumi.get(self, "proxy_read_port")

    @proxy_read_port.setter
    def proxy_read_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "proxy_read_port", value)

    @property
    @pulumi.getter(name="proxyWritePort")
    def proxy_write_port(self) -> pulumi.Input[str]:
        """
        - (Required) proxy write port
        """
        return pulumi.get(self, "proxy_write_port")

    @proxy_write_port.setter
    def proxy_write_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "proxy_write_port", value)

    @property
    @pulumi.getter(name="archiveWalExpireDays")
    def archive_wal_expire_days(self) -> Optional[pulumi.Input[int]]:
        """
        - (Optional) archive wal expire days. Default is set to -1
        """
        return pulumi.get(self, "archive_wal_expire_days")

    @archive_wal_expire_days.setter
    def archive_wal_expire_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "archive_wal_expire_days", value)

    @property
    @pulumi.getter(name="backupPolicy")
    def backup_policy(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) backup policy for instance. Default is "primary_only"
        """
        return pulumi.get(self, "backup_policy")

    @backup_policy.setter
    def backup_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_policy", value)

    @property
    @pulumi.getter(name="clusterDescription")
    def cluster_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_description")

    @cluster_description.setter
    def cluster_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_description", value)

    @property
    @pulumi.getter(name="deployHaproxy")
    def deploy_haproxy(self) -> Optional[pulumi.Input[bool]]:
        """
        - (Optional) HA proxy node. Default is set to false
        """
        return pulumi.get(self, "deploy_haproxy")

    @deploy_haproxy.setter
    def deploy_haproxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deploy_haproxy", value)

    @property
    @pulumi.getter(name="enablePeerAuth")
    def enable_peer_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        - (Optional) enable peer auth . Default is set to false.
        """
        return pulumi.get(self, "enable_peer_auth")

    @enable_peer_auth.setter
    def enable_peer_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_peer_auth", value)

    @property
    @pulumi.getter(name="enableSynchronousMode")
    def enable_synchronous_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        - (Optional) enable synchronous mode. Default is set to true
        """
        return pulumi.get(self, "enable_synchronous_mode")

    @enable_synchronous_mode.setter
    def enable_synchronous_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_synchronous_mode", value)

    @property
    @pulumi.getter(name="failoverMode")
    def failover_mode(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) failover mode of nodes.
        """
        return pulumi.get(self, "failover_mode")

    @failover_mode.setter
    def failover_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failover_mode", value)

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) node type of instance. Default is set to database
        """
        return pulumi.get(self, "node_type")

    @node_type.setter
    def node_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type", value)

    @property
    @pulumi.getter(name="provisionVirtualIp")
    def provision_virtual_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        - (Optional) provisional virtual ip. Default is set to true
        """
        return pulumi.get(self, "provision_virtual_ip")

    @provision_virtual_ip.setter
    def provision_virtual_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provision_virtual_ip", value)


if not MYPY:
    class NdbDatabasePropertyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) Name of the instance.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbDatabasePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabasePropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: - (Required) Name of the instance.
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseRestoreDatabaseNodeArgsDict(TypedDict):
        access_level: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        database_id: NotRequired[pulumi.Input[str]]
        """
        database id
        """
        database_status: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        dbserver: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        dbserver_id: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        id: NotRequired[pulumi.Input[str]]
        infos: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodeInfoArgsDict']]]]
        """
        info of instance
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        primary: NotRequired[pulumi.Input[bool]]
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodePropertyArgsDict']]]]
        """
        properties of database created
        """
        protection_domain_id: NotRequired[pulumi.Input[str]]
        protection_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodeProtectionDomainArgsDict']]]]
        software_installation_id: NotRequired[pulumi.Input[str]]
        status: NotRequired[pulumi.Input[str]]
        """
        status of instance
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodeTagArgsDict']]]]
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
elif False:
    NdbDatabaseRestoreDatabaseNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreDatabaseNodeArgs:
    def __init__(__self__, *,
                 access_level: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 database_id: Optional[pulumi.Input[str]] = None,
                 database_status: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 dbserver: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 dbserver_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodeInfoArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodePropertyArgs']]]] = None,
                 protection_domain_id: Optional[pulumi.Input[str]] = None,
                 protection_domains: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodeProtectionDomainArgs']]]] = None,
                 software_installation_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodeTagArgs']]]] = None):
        """
        :param pulumi.Input[str] database_id: database id
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodeInfoArgs']]] infos: info of instance
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodePropertyArgs']]] properties: properties of database created
        :param pulumi.Input[str] status: status of instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodeTagArgs']]] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if dbserver is not None:
            pulumi.set(__self__, "dbserver", dbserver)
        if dbserver_id is not None:
            pulumi.set(__self__, "dbserver_id", dbserver_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if protection_domain_id is not None:
            pulumi.set(__self__, "protection_domain_id", protection_domain_id)
        if protection_domains is not None:
            pulumi.set(__self__, "protection_domains", protection_domains)
        if software_installation_id is not None:
            pulumi.set(__self__, "software_installation_id", software_installation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "access_level")

    @access_level.setter
    def access_level(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "access_level", value)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[pulumi.Input[str]]:
        """
        database id
        """
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_id", value)

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_status")

    @database_status.setter
    def database_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_status", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def dbserver(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "dbserver")

    @dbserver.setter
    def dbserver(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "dbserver", value)

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dbserver_id")

    @dbserver_id.setter
    def dbserver_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbserver_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodeInfoArgs']]]]:
        """
        info of instance
        """
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodeInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodePropertyArgs']]]]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodePropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="protectionDomainId")
    def protection_domain_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protection_domain_id")

    @protection_domain_id.setter
    def protection_domain_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_domain_id", value)

    @property
    @pulumi.getter(name="protectionDomains")
    def protection_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodeProtectionDomainArgs']]]]:
        return pulumi.get(self, "protection_domains")

    @protection_domains.setter
    def protection_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodeProtectionDomainArgs']]]]):
        pulumi.set(self, "protection_domains", value)

    @property
    @pulumi.getter(name="softwareInstallationId")
    def software_installation_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "software_installation_id")

    @software_installation_id.setter
    def software_installation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "software_installation_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodeTagArgs']]]]:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodeTagArgs']]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class NdbDatabaseRestoreDatabaseNodeInfoArgsDict(TypedDict):
        info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        info of instance
        """
        secure_info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    NdbDatabaseRestoreDatabaseNodeInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreDatabaseNodeInfoArgs:
    def __init__(__self__, *,
                 info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 secure_info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] info: info of instance
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        info of instance
        """
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "secure_info")

    @secure_info.setter
    def secure_info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secure_info", value)


if not MYPY:
    class NdbDatabaseRestoreDatabaseNodePropertyArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        ref_id: NotRequired[pulumi.Input[str]]
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseRestoreDatabaseNodePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreDatabaseNodePropertyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] name: Name of database instance
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseRestoreDatabaseNodeProtectionDomainArgsDict(TypedDict):
        assoc_entities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        cloud_id: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        era_created: NotRequired[pulumi.Input[bool]]
        id: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        owner_id: NotRequired[pulumi.Input[str]]
        primary_host: NotRequired[pulumi.Input[str]]
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodeProtectionDomainPropertyArgsDict']]]]
        """
        properties of database created
        """
        status: NotRequired[pulumi.Input[str]]
        """
        status of instance
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type of database
        """
elif False:
    NdbDatabaseRestoreDatabaseNodeProtectionDomainArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreDatabaseNodeProtectionDomainArgs:
    def __init__(__self__, *,
                 assoc_entities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cloud_id: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 era_created: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 primary_host: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodeProtectionDomainPropertyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodeProtectionDomainPropertyArgs']]] properties: properties of database created
        :param pulumi.Input[str] status: status of instance
        :param pulumi.Input[str] type: type of database
        """
        if assoc_entities is not None:
            pulumi.set(__self__, "assoc_entities", assoc_entities)
        if cloud_id is not None:
            pulumi.set(__self__, "cloud_id", cloud_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if era_created is not None:
            pulumi.set(__self__, "era_created", era_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if primary_host is not None:
            pulumi.set(__self__, "primary_host", primary_host)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assocEntities")
    def assoc_entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "assoc_entities")

    @assoc_entities.setter
    def assoc_entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "assoc_entities", value)

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_id")

    @cloud_id.setter
    def cloud_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_id", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="eraCreated")
    def era_created(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "era_created")

    @era_created.setter
    def era_created(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "era_created", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="primaryHost")
    def primary_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_host")

    @primary_host.setter
    def primary_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_host", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodeProtectionDomainPropertyArgs']]]]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreDatabaseNodeProtectionDomainPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type of database
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NdbDatabaseRestoreDatabaseNodeProtectionDomainPropertyArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        ref_id: NotRequired[pulumi.Input[str]]
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseRestoreDatabaseNodeProtectionDomainPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreDatabaseNodeProtectionDomainPropertyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] name: Name of database instance
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseRestoreDatabaseNodeTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseRestoreDatabaseNodeTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreDatabaseNodeTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseRestoreInfoArgsDict(TypedDict):
        bpg_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigArgsDict']]]]
        secure_info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    NdbDatabaseRestoreInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreInfoArgs:
    def __init__(__self__, *,
                 bpg_configs: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigArgs']]]] = None,
                 secure_info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if bpg_configs is not None:
            pulumi.set(__self__, "bpg_configs", bpg_configs)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="bpgConfigs")
    def bpg_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigArgs']]]]:
        return pulumi.get(self, "bpg_configs")

    @bpg_configs.setter
    def bpg_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigArgs']]]]):
        pulumi.set(self, "bpg_configs", value)

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "secure_info")

    @secure_info.setter
    def secure_info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secure_info", value)


if not MYPY:
    class NdbDatabaseRestoreInfoBpgConfigArgsDict(TypedDict):
        bpg_db_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigBpgDbParamArgsDict']]]]
        storages: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigStorageArgsDict']]]]
        vm_properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigVmPropertyArgsDict']]]]
elif False:
    NdbDatabaseRestoreInfoBpgConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreInfoBpgConfigArgs:
    def __init__(__self__, *,
                 bpg_db_params: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigBpgDbParamArgs']]]] = None,
                 storages: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigStorageArgs']]]] = None,
                 vm_properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigVmPropertyArgs']]]] = None):
        if bpg_db_params is not None:
            pulumi.set(__self__, "bpg_db_params", bpg_db_params)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if vm_properties is not None:
            pulumi.set(__self__, "vm_properties", vm_properties)

    @property
    @pulumi.getter(name="bpgDbParams")
    def bpg_db_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigBpgDbParamArgs']]]]:
        return pulumi.get(self, "bpg_db_params")

    @bpg_db_params.setter
    def bpg_db_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigBpgDbParamArgs']]]]):
        pulumi.set(self, "bpg_db_params", value)

    @property
    @pulumi.getter
    def storages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigStorageArgs']]]]:
        return pulumi.get(self, "storages")

    @storages.setter
    def storages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigStorageArgs']]]]):
        pulumi.set(self, "storages", value)

    @property
    @pulumi.getter(name="vmProperties")
    def vm_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigVmPropertyArgs']]]]:
        return pulumi.get(self, "vm_properties")

    @vm_properties.setter
    def vm_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigVmPropertyArgs']]]]):
        pulumi.set(self, "vm_properties", value)


if not MYPY:
    class NdbDatabaseRestoreInfoBpgConfigBpgDbParamArgsDict(TypedDict):
        effective_cache_size: NotRequired[pulumi.Input[str]]
        maintenance_work_mem: NotRequired[pulumi.Input[str]]
        max_parallel_workers_per_gather: NotRequired[pulumi.Input[str]]
        max_worker_processes: NotRequired[pulumi.Input[str]]
        shared_buffers: NotRequired[pulumi.Input[str]]
        work_mem: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseRestoreInfoBpgConfigBpgDbParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreInfoBpgConfigBpgDbParamArgs:
    def __init__(__self__, *,
                 effective_cache_size: Optional[pulumi.Input[str]] = None,
                 maintenance_work_mem: Optional[pulumi.Input[str]] = None,
                 max_parallel_workers_per_gather: Optional[pulumi.Input[str]] = None,
                 max_worker_processes: Optional[pulumi.Input[str]] = None,
                 shared_buffers: Optional[pulumi.Input[str]] = None,
                 work_mem: Optional[pulumi.Input[str]] = None):
        if effective_cache_size is not None:
            pulumi.set(__self__, "effective_cache_size", effective_cache_size)
        if maintenance_work_mem is not None:
            pulumi.set(__self__, "maintenance_work_mem", maintenance_work_mem)
        if max_parallel_workers_per_gather is not None:
            pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if shared_buffers is not None:
            pulumi.set(__self__, "shared_buffers", shared_buffers)
        if work_mem is not None:
            pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="effectiveCacheSize")
    def effective_cache_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effective_cache_size")

    @effective_cache_size.setter
    def effective_cache_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effective_cache_size", value)

    @property
    @pulumi.getter(name="maintenanceWorkMem")
    def maintenance_work_mem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maintenance_work_mem")

    @maintenance_work_mem.setter
    def maintenance_work_mem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_work_mem", value)

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @max_parallel_workers_per_gather.setter
    def max_parallel_workers_per_gather(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_parallel_workers_per_gather", value)

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_worker_processes")

    @max_worker_processes.setter
    def max_worker_processes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_worker_processes", value)

    @property
    @pulumi.getter(name="sharedBuffers")
    def shared_buffers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shared_buffers")

    @shared_buffers.setter
    def shared_buffers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shared_buffers", value)

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "work_mem")

    @work_mem.setter
    def work_mem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_mem", value)


if not MYPY:
    class NdbDatabaseRestoreInfoBpgConfigStorageArgsDict(TypedDict):
        archive_storages: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorageArgsDict']]]]
        data_disks: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigStorageDataDiskArgsDict']]]]
        log_disks: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigStorageLogDiskArgsDict']]]]
elif False:
    NdbDatabaseRestoreInfoBpgConfigStorageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreInfoBpgConfigStorageArgs:
    def __init__(__self__, *,
                 archive_storages: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorageArgs']]]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigStorageDataDiskArgs']]]] = None,
                 log_disks: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigStorageLogDiskArgs']]]] = None):
        if archive_storages is not None:
            pulumi.set(__self__, "archive_storages", archive_storages)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if log_disks is not None:
            pulumi.set(__self__, "log_disks", log_disks)

    @property
    @pulumi.getter(name="archiveStorages")
    def archive_storages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorageArgs']]]]:
        return pulumi.get(self, "archive_storages")

    @archive_storages.setter
    def archive_storages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorageArgs']]]]):
        pulumi.set(self, "archive_storages", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigStorageDataDiskArgs']]]]:
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigStorageDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="logDisks")
    def log_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigStorageLogDiskArgs']]]]:
        return pulumi.get(self, "log_disks")

    @log_disks.setter
    def log_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreInfoBpgConfigStorageLogDiskArgs']]]]):
        pulumi.set(self, "log_disks", value)


if not MYPY:
    class NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorageArgsDict(TypedDict):
        size: NotRequired[pulumi.Input[float]]
elif False:
    NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorageArgs:
    def __init__(__self__, *,
                 size: Optional[pulumi.Input[float]] = None):
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "size", value)


if not MYPY:
    class NdbDatabaseRestoreInfoBpgConfigStorageDataDiskArgsDict(TypedDict):
        count: NotRequired[pulumi.Input[float]]
elif False:
    NdbDatabaseRestoreInfoBpgConfigStorageDataDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreInfoBpgConfigStorageDataDiskArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[float]] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "count", value)


if not MYPY:
    class NdbDatabaseRestoreInfoBpgConfigStorageLogDiskArgsDict(TypedDict):
        count: NotRequired[pulumi.Input[float]]
        size: NotRequired[pulumi.Input[float]]
elif False:
    NdbDatabaseRestoreInfoBpgConfigStorageLogDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreInfoBpgConfigStorageLogDiskArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[float]] = None,
                 size: Optional[pulumi.Input[float]] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "size", value)


if not MYPY:
    class NdbDatabaseRestoreInfoBpgConfigVmPropertyArgsDict(TypedDict):
        dirty_background_ratio: NotRequired[pulumi.Input[float]]
        dirty_expire_centisecs: NotRequired[pulumi.Input[float]]
        dirty_ratio: NotRequired[pulumi.Input[float]]
        dirty_writeback_centisecs: NotRequired[pulumi.Input[float]]
        nr_hugepages: NotRequired[pulumi.Input[float]]
        overcommit_memory: NotRequired[pulumi.Input[float]]
        swappiness: NotRequired[pulumi.Input[float]]
elif False:
    NdbDatabaseRestoreInfoBpgConfigVmPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreInfoBpgConfigVmPropertyArgs:
    def __init__(__self__, *,
                 dirty_background_ratio: Optional[pulumi.Input[float]] = None,
                 dirty_expire_centisecs: Optional[pulumi.Input[float]] = None,
                 dirty_ratio: Optional[pulumi.Input[float]] = None,
                 dirty_writeback_centisecs: Optional[pulumi.Input[float]] = None,
                 nr_hugepages: Optional[pulumi.Input[float]] = None,
                 overcommit_memory: Optional[pulumi.Input[float]] = None,
                 swappiness: Optional[pulumi.Input[float]] = None):
        if dirty_background_ratio is not None:
            pulumi.set(__self__, "dirty_background_ratio", dirty_background_ratio)
        if dirty_expire_centisecs is not None:
            pulumi.set(__self__, "dirty_expire_centisecs", dirty_expire_centisecs)
        if dirty_ratio is not None:
            pulumi.set(__self__, "dirty_ratio", dirty_ratio)
        if dirty_writeback_centisecs is not None:
            pulumi.set(__self__, "dirty_writeback_centisecs", dirty_writeback_centisecs)
        if nr_hugepages is not None:
            pulumi.set(__self__, "nr_hugepages", nr_hugepages)
        if overcommit_memory is not None:
            pulumi.set(__self__, "overcommit_memory", overcommit_memory)
        if swappiness is not None:
            pulumi.set(__self__, "swappiness", swappiness)

    @property
    @pulumi.getter(name="dirtyBackgroundRatio")
    def dirty_background_ratio(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_background_ratio")

    @dirty_background_ratio.setter
    def dirty_background_ratio(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_background_ratio", value)

    @property
    @pulumi.getter(name="dirtyExpireCentisecs")
    def dirty_expire_centisecs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_expire_centisecs")

    @dirty_expire_centisecs.setter
    def dirty_expire_centisecs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_expire_centisecs", value)

    @property
    @pulumi.getter(name="dirtyRatio")
    def dirty_ratio(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_ratio")

    @dirty_ratio.setter
    def dirty_ratio(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_ratio", value)

    @property
    @pulumi.getter(name="dirtyWritebackCentisecs")
    def dirty_writeback_centisecs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_writeback_centisecs")

    @dirty_writeback_centisecs.setter
    def dirty_writeback_centisecs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_writeback_centisecs", value)

    @property
    @pulumi.getter(name="nrHugepages")
    def nr_hugepages(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "nr_hugepages")

    @nr_hugepages.setter
    def nr_hugepages(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "nr_hugepages", value)

    @property
    @pulumi.getter(name="overcommitMemory")
    def overcommit_memory(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "overcommit_memory")

    @overcommit_memory.setter
    def overcommit_memory(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "overcommit_memory", value)

    @property
    @pulumi.getter
    def swappiness(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "swappiness")

    @swappiness.setter
    def swappiness(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "swappiness", value)


if not MYPY:
    class NdbDatabaseRestoreLcmConfigArgsDict(TypedDict):
        expiry_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLcmConfigExpiryDetailArgsDict']]]]
        post_delete_commands: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLcmConfigPostDeleteCommandArgsDict']]]]
        pre_delete_commands: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLcmConfigPreDeleteCommandArgsDict']]]]
        refresh_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLcmConfigRefreshDetailArgsDict']]]]
elif False:
    NdbDatabaseRestoreLcmConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreLcmConfigArgs:
    def __init__(__self__, *,
                 expiry_details: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLcmConfigExpiryDetailArgs']]]] = None,
                 post_delete_commands: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLcmConfigPostDeleteCommandArgs']]]] = None,
                 pre_delete_commands: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLcmConfigPreDeleteCommandArgs']]]] = None,
                 refresh_details: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLcmConfigRefreshDetailArgs']]]] = None):
        if expiry_details is not None:
            pulumi.set(__self__, "expiry_details", expiry_details)
        if post_delete_commands is not None:
            pulumi.set(__self__, "post_delete_commands", post_delete_commands)
        if pre_delete_commands is not None:
            pulumi.set(__self__, "pre_delete_commands", pre_delete_commands)
        if refresh_details is not None:
            pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLcmConfigExpiryDetailArgs']]]]:
        return pulumi.get(self, "expiry_details")

    @expiry_details.setter
    def expiry_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLcmConfigExpiryDetailArgs']]]]):
        pulumi.set(self, "expiry_details", value)

    @property
    @pulumi.getter(name="postDeleteCommands")
    def post_delete_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLcmConfigPostDeleteCommandArgs']]]]:
        return pulumi.get(self, "post_delete_commands")

    @post_delete_commands.setter
    def post_delete_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLcmConfigPostDeleteCommandArgs']]]]):
        pulumi.set(self, "post_delete_commands", value)

    @property
    @pulumi.getter(name="preDeleteCommands")
    def pre_delete_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLcmConfigPreDeleteCommandArgs']]]]:
        return pulumi.get(self, "pre_delete_commands")

    @pre_delete_commands.setter
    def pre_delete_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLcmConfigPreDeleteCommandArgs']]]]):
        pulumi.set(self, "pre_delete_commands", value)

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLcmConfigRefreshDetailArgs']]]]:
        return pulumi.get(self, "refresh_details")

    @refresh_details.setter
    def refresh_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLcmConfigRefreshDetailArgs']]]]):
        pulumi.set(self, "refresh_details", value)


if not MYPY:
    class NdbDatabaseRestoreLcmConfigExpiryDetailArgsDict(TypedDict):
        delete_database: NotRequired[pulumi.Input[bool]]
        delete_time_machine: NotRequired[pulumi.Input[bool]]
        delete_vm: NotRequired[pulumi.Input[bool]]
        effective_timestamp: NotRequired[pulumi.Input[str]]
        expire_in_days: NotRequired[pulumi.Input[int]]
        expiry_date_timezone: NotRequired[pulumi.Input[str]]
        expiry_timestamp: NotRequired[pulumi.Input[str]]
        remind_before_in_days: NotRequired[pulumi.Input[int]]
        user_created: NotRequired[pulumi.Input[bool]]
elif False:
    NdbDatabaseRestoreLcmConfigExpiryDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreLcmConfigExpiryDetailArgs:
    def __init__(__self__, *,
                 delete_database: Optional[pulumi.Input[bool]] = None,
                 delete_time_machine: Optional[pulumi.Input[bool]] = None,
                 delete_vm: Optional[pulumi.Input[bool]] = None,
                 effective_timestamp: Optional[pulumi.Input[str]] = None,
                 expire_in_days: Optional[pulumi.Input[int]] = None,
                 expiry_date_timezone: Optional[pulumi.Input[str]] = None,
                 expiry_timestamp: Optional[pulumi.Input[str]] = None,
                 remind_before_in_days: Optional[pulumi.Input[int]] = None,
                 user_created: Optional[pulumi.Input[bool]] = None):
        if delete_database is not None:
            pulumi.set(__self__, "delete_database", delete_database)
        if delete_time_machine is not None:
            pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        if delete_vm is not None:
            pulumi.set(__self__, "delete_vm", delete_vm)
        if effective_timestamp is not None:
            pulumi.set(__self__, "effective_timestamp", effective_timestamp)
        if expire_in_days is not None:
            pulumi.set(__self__, "expire_in_days", expire_in_days)
        if expiry_date_timezone is not None:
            pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        if expiry_timestamp is not None:
            pulumi.set(__self__, "expiry_timestamp", expiry_timestamp)
        if remind_before_in_days is not None:
            pulumi.set(__self__, "remind_before_in_days", remind_before_in_days)
        if user_created is not None:
            pulumi.set(__self__, "user_created", user_created)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_database")

    @delete_database.setter
    def delete_database(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_database", value)

    @property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_time_machine")

    @delete_time_machine.setter
    def delete_time_machine(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_time_machine", value)

    @property
    @pulumi.getter(name="deleteVm")
    def delete_vm(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_vm")

    @delete_vm.setter
    def delete_vm(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_vm", value)

    @property
    @pulumi.getter(name="effectiveTimestamp")
    def effective_timestamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effective_timestamp")

    @effective_timestamp.setter
    def effective_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effective_timestamp", value)

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "expire_in_days")

    @expire_in_days.setter
    def expire_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expire_in_days", value)

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiry_date_timezone")

    @expiry_date_timezone.setter
    def expiry_date_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry_date_timezone", value)

    @property
    @pulumi.getter(name="expiryTimestamp")
    def expiry_timestamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiry_timestamp")

    @expiry_timestamp.setter
    def expiry_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry_timestamp", value)

    @property
    @pulumi.getter(name="remindBeforeInDays")
    def remind_before_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remind_before_in_days")

    @remind_before_in_days.setter
    def remind_before_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remind_before_in_days", value)

    @property
    @pulumi.getter(name="userCreated")
    def user_created(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "user_created")

    @user_created.setter
    def user_created(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_created", value)


if not MYPY:
    class NdbDatabaseRestoreLcmConfigPostDeleteCommandArgsDict(TypedDict):
        command: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseRestoreLcmConfigPostDeleteCommandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreLcmConfigPostDeleteCommandArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)


if not MYPY:
    class NdbDatabaseRestoreLcmConfigPreDeleteCommandArgsDict(TypedDict):
        command: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseRestoreLcmConfigPreDeleteCommandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreLcmConfigPreDeleteCommandArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)


if not MYPY:
    class NdbDatabaseRestoreLcmConfigRefreshDetailArgsDict(TypedDict):
        last_refresh_date: NotRequired[pulumi.Input[str]]
        next_refresh_date: NotRequired[pulumi.Input[str]]
        refresh_date_timezone: NotRequired[pulumi.Input[str]]
        refresh_in_days: NotRequired[pulumi.Input[int]]
        refresh_in_hours: NotRequired[pulumi.Input[int]]
        refresh_in_months: NotRequired[pulumi.Input[int]]
        refresh_time: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseRestoreLcmConfigRefreshDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreLcmConfigRefreshDetailArgs:
    def __init__(__self__, *,
                 last_refresh_date: Optional[pulumi.Input[str]] = None,
                 next_refresh_date: Optional[pulumi.Input[str]] = None,
                 refresh_date_timezone: Optional[pulumi.Input[str]] = None,
                 refresh_in_days: Optional[pulumi.Input[int]] = None,
                 refresh_in_hours: Optional[pulumi.Input[int]] = None,
                 refresh_in_months: Optional[pulumi.Input[int]] = None,
                 refresh_time: Optional[pulumi.Input[str]] = None):
        if last_refresh_date is not None:
            pulumi.set(__self__, "last_refresh_date", last_refresh_date)
        if next_refresh_date is not None:
            pulumi.set(__self__, "next_refresh_date", next_refresh_date)
        if refresh_date_timezone is not None:
            pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        if refresh_in_days is not None:
            pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        if refresh_in_hours is not None:
            pulumi.set(__self__, "refresh_in_hours", refresh_in_hours)
        if refresh_in_months is not None:
            pulumi.set(__self__, "refresh_in_months", refresh_in_months)
        if refresh_time is not None:
            pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="lastRefreshDate")
    def last_refresh_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_refresh_date")

    @last_refresh_date.setter
    def last_refresh_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_refresh_date", value)

    @property
    @pulumi.getter(name="nextRefreshDate")
    def next_refresh_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_refresh_date")

    @next_refresh_date.setter
    def next_refresh_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_refresh_date", value)

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_date_timezone")

    @refresh_date_timezone.setter
    def refresh_date_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_date_timezone", value)

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_in_days")

    @refresh_in_days.setter
    def refresh_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_in_days", value)

    @property
    @pulumi.getter(name="refreshInHours")
    def refresh_in_hours(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_in_hours")

    @refresh_in_hours.setter
    def refresh_in_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_in_hours", value)

    @property
    @pulumi.getter(name="refreshInMonths")
    def refresh_in_months(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_in_months")

    @refresh_in_months.setter
    def refresh_in_months(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_in_months", value)

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_time")

    @refresh_time.setter
    def refresh_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_time", value)


if not MYPY:
    class NdbDatabaseRestoreLinkedDatabaseArgsDict(TypedDict):
        database_name: NotRequired[pulumi.Input[str]]
        """
        name of database
        """
        database_status: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        id: NotRequired[pulumi.Input[str]]
        infos: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLinkedDatabaseInfoArgsDict']]]]
        """
        info of instance
        """
        metric: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        parent_database_id: NotRequired[pulumi.Input[str]]
        """
        parent database id
        """
        parent_linked_database_id: NotRequired[pulumi.Input[str]]
        snapshot_id: NotRequired[pulumi.Input[str]]
        """
        snapshot id from you want to use for restoring the instance
        """
        status: NotRequired[pulumi.Input[str]]
        """
        status of instance
        """
        timezone: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseRestoreLinkedDatabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreLinkedDatabaseArgs:
    def __init__(__self__, *,
                 database_name: Optional[pulumi.Input[str]] = None,
                 database_status: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLinkedDatabaseInfoArgs']]]] = None,
                 metric: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_database_id: Optional[pulumi.Input[str]] = None,
                 parent_linked_database_id: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] database_name: name of database
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLinkedDatabaseInfoArgs']]] infos: info of instance
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metric: Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[str] parent_database_id: parent database id
        :param pulumi.Input[str] snapshot_id: snapshot id from you want to use for restoring the instance
        :param pulumi.Input[str] status: status of instance
        """
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_database_id is not None:
            pulumi.set(__self__, "parent_database_id", parent_database_id)
        if parent_linked_database_id is not None:
            pulumi.set(__self__, "parent_linked_database_id", parent_linked_database_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of database
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_status")

    @database_status.setter
    def database_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_status", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLinkedDatabaseInfoArgs']]]]:
        """
        info of instance
        """
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreLinkedDatabaseInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> Optional[pulumi.Input[str]]:
        """
        parent database id
        """
        return pulumi.get(self, "parent_database_id")

    @parent_database_id.setter
    def parent_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_database_id", value)

    @property
    @pulumi.getter(name="parentLinkedDatabaseId")
    def parent_linked_database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parent_linked_database_id")

    @parent_linked_database_id.setter
    def parent_linked_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_linked_database_id", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        snapshot id from you want to use for restoring the instance
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


if not MYPY:
    class NdbDatabaseRestoreLinkedDatabaseInfoArgsDict(TypedDict):
        info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        info of instance
        """
        secure_info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    NdbDatabaseRestoreLinkedDatabaseInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreLinkedDatabaseInfoArgs:
    def __init__(__self__, *,
                 info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 secure_info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] info: info of instance
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        info of instance
        """
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "secure_info")

    @secure_info.setter
    def secure_info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secure_info", value)


if not MYPY:
    class NdbDatabaseRestorePropertyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseRestorePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestorePropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of database instance
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseRestoreTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseRestoreTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseRestoreTimeMachineArgsDict(TypedDict):
        access_level: NotRequired[pulumi.Input[str]]
        clone: NotRequired[pulumi.Input[bool]]
        """
        whether instance is cloned or not
        """
        clones: NotRequired[pulumi.Input[str]]
        clustered: NotRequired[pulumi.Input[bool]]
        database: NotRequired[pulumi.Input[str]]
        database_id: NotRequired[pulumi.Input[str]]
        """
        database id
        """
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        ea_status: NotRequired[pulumi.Input[str]]
        id: NotRequired[pulumi.Input[str]]
        metric: NotRequired[pulumi.Input[str]]
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachinePropertyArgsDict']]]]
        """
        properties of database created
        """
        schedule_id: NotRequired[pulumi.Input[str]]
        schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleArgsDict']]]]
        scope: NotRequired[pulumi.Input[str]]
        sla_id: NotRequired[pulumi.Input[str]]
        sla_update_in_progress: NotRequired[pulumi.Input[bool]]
        sla_update_metadata: NotRequired[pulumi.Input[str]]
        slas: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineSlaArgsDict']]]]
        source_nx_clusters: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        status: NotRequired[pulumi.Input[str]]
        """
        status of instance
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineTagArgsDict']]]]
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type of database
        """
elif False:
    NdbDatabaseRestoreTimeMachineArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreTimeMachineArgs:
    def __init__(__self__, *,
                 access_level: Optional[pulumi.Input[str]] = None,
                 clone: Optional[pulumi.Input[bool]] = None,
                 clones: Optional[pulumi.Input[str]] = None,
                 clustered: Optional[pulumi.Input[bool]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 database_id: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ea_status: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachinePropertyArgs']]]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleArgs']]]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 sla_id: Optional[pulumi.Input[str]] = None,
                 sla_update_in_progress: Optional[pulumi.Input[bool]] = None,
                 sla_update_metadata: Optional[pulumi.Input[str]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineSlaArgs']]]] = None,
                 source_nx_clusters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineTagArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] clone: whether instance is cloned or not
        :param pulumi.Input[str] database_id: database id
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] metric: Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachinePropertyArgs']]] properties: properties of database created
        :param pulumi.Input[str] status: status of instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineTagArgs']]] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        :param pulumi.Input[str] type: type of database
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if clone is not None:
            pulumi.set(__self__, "clone", clone)
        if clones is not None:
            pulumi.set(__self__, "clones", clones)
        if clustered is not None:
            pulumi.set(__self__, "clustered", clustered)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ea_status is not None:
            pulumi.set(__self__, "ea_status", ea_status)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)
        if sla_update_in_progress is not None:
            pulumi.set(__self__, "sla_update_in_progress", sla_update_in_progress)
        if sla_update_metadata is not None:
            pulumi.set(__self__, "sla_update_metadata", sla_update_metadata)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if source_nx_clusters is not None:
            pulumi.set(__self__, "source_nx_clusters", source_nx_clusters)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_level")

    @access_level.setter
    def access_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_level", value)

    @property
    @pulumi.getter
    def clone(self) -> Optional[pulumi.Input[bool]]:
        """
        whether instance is cloned or not
        """
        return pulumi.get(self, "clone")

    @clone.setter
    def clone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "clone", value)

    @property
    @pulumi.getter
    def clones(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "clones")

    @clones.setter
    def clones(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clones", value)

    @property
    @pulumi.getter
    def clustered(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "clustered")

    @clustered.setter
    def clustered(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "clustered", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[pulumi.Input[str]]:
        """
        database id
        """
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_id", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="eaStatus")
    def ea_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ea_status")

    @ea_status.setter
    def ea_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ea_status", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachinePropertyArgs']]]]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachinePropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_id", value)

    @property
    @pulumi.getter
    def schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleArgs']]]]:
        return pulumi.get(self, "schedules")

    @schedules.setter
    def schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleArgs']]]]):
        pulumi.set(self, "schedules", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sla_id")

    @sla_id.setter
    def sla_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_id", value)

    @property
    @pulumi.getter(name="slaUpdateInProgress")
    def sla_update_in_progress(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sla_update_in_progress")

    @sla_update_in_progress.setter
    def sla_update_in_progress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sla_update_in_progress", value)

    @property
    @pulumi.getter(name="slaUpdateMetadata")
    def sla_update_metadata(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sla_update_metadata")

    @sla_update_metadata.setter
    def sla_update_metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_update_metadata", value)

    @property
    @pulumi.getter
    def slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineSlaArgs']]]]:
        return pulumi.get(self, "slas")

    @slas.setter
    def slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineSlaArgs']]]]):
        pulumi.set(self, "slas", value)

    @property
    @pulumi.getter(name="sourceNxClusters")
    def source_nx_clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "source_nx_clusters")

    @source_nx_clusters.setter
    def source_nx_clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_nx_clusters", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineTagArgs']]]]:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type of database
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NdbDatabaseRestoreTimeMachinePropertyArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        ref_id: NotRequired[pulumi.Input[str]]
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseRestoreTimeMachinePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreTimeMachinePropertyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] name: Name of database instance
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseRestoreTimeMachineScheduleArgsDict(TypedDict):
        continuous_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleContinuousScheduleArgsDict']]]]
        daily_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleDailyScheduleArgsDict']]]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        global_policy: NotRequired[pulumi.Input[bool]]
        id: NotRequired[pulumi.Input[str]]
        monthly_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleMonthlyScheduleArgsDict']]]]
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        owner_id: NotRequired[pulumi.Input[str]]
        quartely_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleQuartelyScheduleArgsDict']]]]
        reference_count: NotRequired[pulumi.Input[int]]
        snapshot_time_of_days: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDayArgsDict']]]]
        start_time: NotRequired[pulumi.Input[str]]
        system_policy: NotRequired[pulumi.Input[bool]]
        time_zone: NotRequired[pulumi.Input[str]]
        """
        timezone on which instance is created xw
        """
        unique_name: NotRequired[pulumi.Input[str]]
        weekly_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleWeeklyScheduleArgsDict']]]]
        yearly_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleYearlyScheduleArgsDict']]]]
elif False:
    NdbDatabaseRestoreTimeMachineScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreTimeMachineScheduleArgs:
    def __init__(__self__, *,
                 continuous_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleContinuousScheduleArgs']]]] = None,
                 daily_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleDailyScheduleArgs']]]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 global_policy: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 monthly_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleMonthlyScheduleArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 quartely_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleQuartelyScheduleArgs']]]] = None,
                 reference_count: Optional[pulumi.Input[int]] = None,
                 snapshot_time_of_days: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDayArgs']]]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 system_policy: Optional[pulumi.Input[bool]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 unique_name: Optional[pulumi.Input[str]] = None,
                 weekly_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleWeeklyScheduleArgs']]]] = None,
                 yearly_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleYearlyScheduleArgs']]]] = None):
        """
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[str] time_zone: timezone on which instance is created xw
        """
        if continuous_schedules is not None:
            pulumi.set(__self__, "continuous_schedules", continuous_schedules)
        if daily_schedules is not None:
            pulumi.set(__self__, "daily_schedules", daily_schedules)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if global_policy is not None:
            pulumi.set(__self__, "global_policy", global_policy)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_schedules is not None:
            pulumi.set(__self__, "monthly_schedules", monthly_schedules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if quartely_schedules is not None:
            pulumi.set(__self__, "quartely_schedules", quartely_schedules)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if snapshot_time_of_days is not None:
            pulumi.set(__self__, "snapshot_time_of_days", snapshot_time_of_days)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if system_policy is not None:
            pulumi.set(__self__, "system_policy", system_policy)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_schedules is not None:
            pulumi.set(__self__, "weekly_schedules", weekly_schedules)
        if yearly_schedules is not None:
            pulumi.set(__self__, "yearly_schedules", yearly_schedules)

    @property
    @pulumi.getter(name="continuousSchedules")
    def continuous_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleContinuousScheduleArgs']]]]:
        return pulumi.get(self, "continuous_schedules")

    @continuous_schedules.setter
    def continuous_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleContinuousScheduleArgs']]]]):
        pulumi.set(self, "continuous_schedules", value)

    @property
    @pulumi.getter(name="dailySchedules")
    def daily_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleDailyScheduleArgs']]]]:
        return pulumi.get(self, "daily_schedules")

    @daily_schedules.setter
    def daily_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleDailyScheduleArgs']]]]):
        pulumi.set(self, "daily_schedules", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="globalPolicy")
    def global_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_policy")

    @global_policy.setter
    def global_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_policy", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="monthlySchedules")
    def monthly_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleMonthlyScheduleArgs']]]]:
        return pulumi.get(self, "monthly_schedules")

    @monthly_schedules.setter
    def monthly_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleMonthlyScheduleArgs']]]]):
        pulumi.set(self, "monthly_schedules", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="quartelySchedules")
    def quartely_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleQuartelyScheduleArgs']]]]:
        return pulumi.get(self, "quartely_schedules")

    @quartely_schedules.setter
    def quartely_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleQuartelyScheduleArgs']]]]):
        pulumi.set(self, "quartely_schedules", value)

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reference_count")

    @reference_count.setter
    def reference_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reference_count", value)

    @property
    @pulumi.getter(name="snapshotTimeOfDays")
    def snapshot_time_of_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDayArgs']]]]:
        return pulumi.get(self, "snapshot_time_of_days")

    @snapshot_time_of_days.setter
    def snapshot_time_of_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDayArgs']]]]):
        pulumi.set(self, "snapshot_time_of_days", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="systemPolicy")
    def system_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "system_policy")

    @system_policy.setter
    def system_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "system_policy", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        timezone on which instance is created xw
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unique_name")

    @unique_name.setter
    def unique_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_name", value)

    @property
    @pulumi.getter(name="weeklySchedules")
    def weekly_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleWeeklyScheduleArgs']]]]:
        return pulumi.get(self, "weekly_schedules")

    @weekly_schedules.setter
    def weekly_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleWeeklyScheduleArgs']]]]):
        pulumi.set(self, "weekly_schedules", value)

    @property
    @pulumi.getter(name="yearlySchedules")
    def yearly_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleYearlyScheduleArgs']]]]:
        return pulumi.get(self, "yearly_schedules")

    @yearly_schedules.setter
    def yearly_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseRestoreTimeMachineScheduleYearlyScheduleArgs']]]]):
        pulumi.set(self, "yearly_schedules", value)


if not MYPY:
    class NdbDatabaseRestoreTimeMachineScheduleContinuousScheduleArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        log_backup_interval: NotRequired[pulumi.Input[int]]
        snapshots_per_day: NotRequired[pulumi.Input[int]]
elif False:
    NdbDatabaseRestoreTimeMachineScheduleContinuousScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreTimeMachineScheduleContinuousScheduleArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_backup_interval: Optional[pulumi.Input[int]] = None,
                 snapshots_per_day: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_backup_interval is not None:
            pulumi.set(__self__, "log_backup_interval", log_backup_interval)
        if snapshots_per_day is not None:
            pulumi.set(__self__, "snapshots_per_day", snapshots_per_day)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logBackupInterval")
    def log_backup_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "log_backup_interval")

    @log_backup_interval.setter
    def log_backup_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_backup_interval", value)

    @property
    @pulumi.getter(name="snapshotsPerDay")
    def snapshots_per_day(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "snapshots_per_day")

    @snapshots_per_day.setter
    def snapshots_per_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "snapshots_per_day", value)


if not MYPY:
    class NdbDatabaseRestoreTimeMachineScheduleDailyScheduleArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    NdbDatabaseRestoreTimeMachineScheduleDailyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreTimeMachineScheduleDailyScheduleArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbDatabaseRestoreTimeMachineScheduleMonthlyScheduleArgsDict(TypedDict):
        day_of_month: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    NdbDatabaseRestoreTimeMachineScheduleMonthlyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreTimeMachineScheduleMonthlyScheduleArgs:
    def __init__(__self__, *,
                 day_of_month: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbDatabaseRestoreTimeMachineScheduleQuartelyScheduleArgsDict(TypedDict):
        day_of_month: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
        start_month: NotRequired[pulumi.Input[str]]
        start_month_value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseRestoreTimeMachineScheduleQuartelyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreTimeMachineScheduleQuartelyScheduleArgs:
    def __init__(__self__, *,
                 day_of_month: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 start_month: Optional[pulumi.Input[str]] = None,
                 start_month_value: Optional[pulumi.Input[str]] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if start_month is not None:
            pulumi.set(__self__, "start_month", start_month)
        if start_month_value is not None:
            pulumi.set(__self__, "start_month_value", start_month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="startMonth")
    def start_month(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_month")

    @start_month.setter
    def start_month(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_month", value)

    @property
    @pulumi.getter(name="startMonthValue")
    def start_month_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_month_value")

    @start_month_value.setter
    def start_month_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_month_value", value)


if not MYPY:
    class NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDayArgsDict(TypedDict):
        extra: NotRequired[pulumi.Input[bool]]
        hours: NotRequired[pulumi.Input[int]]
        minutes: NotRequired[pulumi.Input[int]]
        seconds: NotRequired[pulumi.Input[int]]
elif False:
    NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDayArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDayArgs:
    def __init__(__self__, *,
                 extra: Optional[pulumi.Input[bool]] = None,
                 hours: Optional[pulumi.Input[int]] = None,
                 minutes: Optional[pulumi.Input[int]] = None,
                 seconds: Optional[pulumi.Input[int]] = None):
        if extra is not None:
            pulumi.set(__self__, "extra", extra)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def extra(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "extra")

    @extra.setter
    def extra(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extra", value)

    @property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hours", value)

    @property
    @pulumi.getter
    def minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minutes", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)


if not MYPY:
    class NdbDatabaseRestoreTimeMachineScheduleWeeklyScheduleArgsDict(TypedDict):
        day_of_week: NotRequired[pulumi.Input[str]]
        day_of_week_value: NotRequired[pulumi.Input[str]]
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    NdbDatabaseRestoreTimeMachineScheduleWeeklyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreTimeMachineScheduleWeeklyScheduleArgs:
    def __init__(__self__, *,
                 day_of_week: Optional[pulumi.Input[str]] = None,
                 day_of_week_value: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if day_of_week_value is not None:
            pulumi.set(__self__, "day_of_week_value", day_of_week_value)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week", value)

    @property
    @pulumi.getter(name="dayOfWeekValue")
    def day_of_week_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "day_of_week_value")

    @day_of_week_value.setter
    def day_of_week_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week_value", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbDatabaseRestoreTimeMachineScheduleYearlyScheduleArgsDict(TypedDict):
        day_of_month: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
        month: NotRequired[pulumi.Input[str]]
        month_value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseRestoreTimeMachineScheduleYearlyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreTimeMachineScheduleYearlyScheduleArgs:
    def __init__(__self__, *,
                 day_of_month: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 month: Optional[pulumi.Input[str]] = None,
                 month_value: Optional[pulumi.Input[str]] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if month_value is not None:
            pulumi.set(__self__, "month_value", month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def month(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "month")

    @month.setter
    def month(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "month", value)

    @property
    @pulumi.getter(name="monthValue")
    def month_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "month_value")

    @month_value.setter
    def month_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "month_value", value)


if not MYPY:
    class NdbDatabaseRestoreTimeMachineSlaArgsDict(TypedDict):
        continuous_retention: NotRequired[pulumi.Input[int]]
        current_active_frequency: NotRequired[pulumi.Input[str]]
        daily_retention: NotRequired[pulumi.Input[int]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        id: NotRequired[pulumi.Input[str]]
        monthly_retention: NotRequired[pulumi.Input[int]]
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        owner_id: NotRequired[pulumi.Input[str]]
        pitr_enabled: NotRequired[pulumi.Input[bool]]
        quarterly_retention: NotRequired[pulumi.Input[int]]
        reference_count: NotRequired[pulumi.Input[int]]
        system_sla: NotRequired[pulumi.Input[bool]]
        unique_name: NotRequired[pulumi.Input[str]]
        weekly_retention: NotRequired[pulumi.Input[int]]
        yearly_retention: NotRequired[pulumi.Input[int]]
elif False:
    NdbDatabaseRestoreTimeMachineSlaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreTimeMachineSlaArgs:
    def __init__(__self__, *,
                 continuous_retention: Optional[pulumi.Input[int]] = None,
                 current_active_frequency: Optional[pulumi.Input[str]] = None,
                 daily_retention: Optional[pulumi.Input[int]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 monthly_retention: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 pitr_enabled: Optional[pulumi.Input[bool]] = None,
                 quarterly_retention: Optional[pulumi.Input[int]] = None,
                 reference_count: Optional[pulumi.Input[int]] = None,
                 system_sla: Optional[pulumi.Input[bool]] = None,
                 unique_name: Optional[pulumi.Input[str]] = None,
                 weekly_retention: Optional[pulumi.Input[int]] = None,
                 yearly_retention: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] name: Name of database instance
        """
        if continuous_retention is not None:
            pulumi.set(__self__, "continuous_retention", continuous_retention)
        if current_active_frequency is not None:
            pulumi.set(__self__, "current_active_frequency", current_active_frequency)
        if daily_retention is not None:
            pulumi.set(__self__, "daily_retention", daily_retention)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_retention is not None:
            pulumi.set(__self__, "monthly_retention", monthly_retention)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if pitr_enabled is not None:
            pulumi.set(__self__, "pitr_enabled", pitr_enabled)
        if quarterly_retention is not None:
            pulumi.set(__self__, "quarterly_retention", quarterly_retention)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if system_sla is not None:
            pulumi.set(__self__, "system_sla", system_sla)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_retention is not None:
            pulumi.set(__self__, "weekly_retention", weekly_retention)
        if yearly_retention is not None:
            pulumi.set(__self__, "yearly_retention", yearly_retention)

    @property
    @pulumi.getter(name="continuousRetention")
    def continuous_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "continuous_retention")

    @continuous_retention.setter
    def continuous_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "continuous_retention", value)

    @property
    @pulumi.getter(name="currentActiveFrequency")
    def current_active_frequency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "current_active_frequency")

    @current_active_frequency.setter
    def current_active_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "current_active_frequency", value)

    @property
    @pulumi.getter(name="dailyRetention")
    def daily_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "daily_retention")

    @daily_retention.setter
    def daily_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "daily_retention", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="monthlyRetention")
    def monthly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "monthly_retention")

    @monthly_retention.setter
    def monthly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monthly_retention", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="pitrEnabled")
    def pitr_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pitr_enabled")

    @pitr_enabled.setter
    def pitr_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pitr_enabled", value)

    @property
    @pulumi.getter(name="quarterlyRetention")
    def quarterly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "quarterly_retention")

    @quarterly_retention.setter
    def quarterly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quarterly_retention", value)

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reference_count")

    @reference_count.setter
    def reference_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reference_count", value)

    @property
    @pulumi.getter(name="systemSla")
    def system_sla(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "system_sla")

    @system_sla.setter
    def system_sla(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "system_sla", value)

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unique_name")

    @unique_name.setter
    def unique_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_name", value)

    @property
    @pulumi.getter(name="weeklyRetention")
    def weekly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weekly_retention")

    @weekly_retention.setter
    def weekly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weekly_retention", value)

    @property
    @pulumi.getter(name="yearlyRetention")
    def yearly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "yearly_retention")

    @yearly_retention.setter
    def yearly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "yearly_retention", value)


if not MYPY:
    class NdbDatabaseRestoreTimeMachineTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseRestoreTimeMachineTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseRestoreTimeMachineTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseScaleDatabaseNodeArgsDict(TypedDict):
        access_level: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        database_id: NotRequired[pulumi.Input[str]]
        database_status: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        dbserver: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        dbserver_id: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        id: NotRequired[pulumi.Input[str]]
        infos: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodeInfoArgsDict']]]]
        """
        info of instance
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        primary: NotRequired[pulumi.Input[bool]]
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodePropertyArgsDict']]]]
        """
        properties of database created
        """
        protection_domain_id: NotRequired[pulumi.Input[str]]
        protection_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodeProtectionDomainArgsDict']]]]
        software_installation_id: NotRequired[pulumi.Input[str]]
        status: NotRequired[pulumi.Input[str]]
        """
        status of instance
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodeTagArgsDict']]]]
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
elif False:
    NdbDatabaseScaleDatabaseNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleDatabaseNodeArgs:
    def __init__(__self__, *,
                 access_level: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 database_id: Optional[pulumi.Input[str]] = None,
                 database_status: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 dbserver: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 dbserver_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodeInfoArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodePropertyArgs']]]] = None,
                 protection_domain_id: Optional[pulumi.Input[str]] = None,
                 protection_domains: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodeProtectionDomainArgs']]]] = None,
                 software_installation_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodeTagArgs']]]] = None):
        """
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodeInfoArgs']]] infos: info of instance
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodePropertyArgs']]] properties: properties of database created
        :param pulumi.Input[str] status: status of instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodeTagArgs']]] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if dbserver is not None:
            pulumi.set(__self__, "dbserver", dbserver)
        if dbserver_id is not None:
            pulumi.set(__self__, "dbserver_id", dbserver_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if protection_domain_id is not None:
            pulumi.set(__self__, "protection_domain_id", protection_domain_id)
        if protection_domains is not None:
            pulumi.set(__self__, "protection_domains", protection_domains)
        if software_installation_id is not None:
            pulumi.set(__self__, "software_installation_id", software_installation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "access_level")

    @access_level.setter
    def access_level(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "access_level", value)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_id", value)

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_status")

    @database_status.setter
    def database_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_status", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def dbserver(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "dbserver")

    @dbserver.setter
    def dbserver(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "dbserver", value)

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dbserver_id")

    @dbserver_id.setter
    def dbserver_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbserver_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodeInfoArgs']]]]:
        """
        info of instance
        """
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodeInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodePropertyArgs']]]]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodePropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="protectionDomainId")
    def protection_domain_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protection_domain_id")

    @protection_domain_id.setter
    def protection_domain_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_domain_id", value)

    @property
    @pulumi.getter(name="protectionDomains")
    def protection_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodeProtectionDomainArgs']]]]:
        return pulumi.get(self, "protection_domains")

    @protection_domains.setter
    def protection_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodeProtectionDomainArgs']]]]):
        pulumi.set(self, "protection_domains", value)

    @property
    @pulumi.getter(name="softwareInstallationId")
    def software_installation_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "software_installation_id")

    @software_installation_id.setter
    def software_installation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "software_installation_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodeTagArgs']]]]:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodeTagArgs']]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class NdbDatabaseScaleDatabaseNodeInfoArgsDict(TypedDict):
        info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        info of instance
        """
        secure_info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    NdbDatabaseScaleDatabaseNodeInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleDatabaseNodeInfoArgs:
    def __init__(__self__, *,
                 info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 secure_info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] info: info of instance
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        info of instance
        """
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "secure_info")

    @secure_info.setter
    def secure_info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secure_info", value)


if not MYPY:
    class NdbDatabaseScaleDatabaseNodePropertyArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        ref_id: NotRequired[pulumi.Input[str]]
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseScaleDatabaseNodePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleDatabaseNodePropertyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] name: Name of database instance
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseScaleDatabaseNodeProtectionDomainArgsDict(TypedDict):
        assoc_entities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        cloud_id: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        era_created: NotRequired[pulumi.Input[bool]]
        id: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        owner_id: NotRequired[pulumi.Input[str]]
        primary_host: NotRequired[pulumi.Input[str]]
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodeProtectionDomainPropertyArgsDict']]]]
        """
        properties of database created
        """
        status: NotRequired[pulumi.Input[str]]
        """
        status of instance
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type of database
        """
elif False:
    NdbDatabaseScaleDatabaseNodeProtectionDomainArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleDatabaseNodeProtectionDomainArgs:
    def __init__(__self__, *,
                 assoc_entities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cloud_id: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 era_created: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 primary_host: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodeProtectionDomainPropertyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodeProtectionDomainPropertyArgs']]] properties: properties of database created
        :param pulumi.Input[str] status: status of instance
        :param pulumi.Input[str] type: type of database
        """
        if assoc_entities is not None:
            pulumi.set(__self__, "assoc_entities", assoc_entities)
        if cloud_id is not None:
            pulumi.set(__self__, "cloud_id", cloud_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if era_created is not None:
            pulumi.set(__self__, "era_created", era_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if primary_host is not None:
            pulumi.set(__self__, "primary_host", primary_host)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assocEntities")
    def assoc_entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "assoc_entities")

    @assoc_entities.setter
    def assoc_entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "assoc_entities", value)

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_id")

    @cloud_id.setter
    def cloud_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_id", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="eraCreated")
    def era_created(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "era_created")

    @era_created.setter
    def era_created(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "era_created", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="primaryHost")
    def primary_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_host")

    @primary_host.setter
    def primary_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_host", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodeProtectionDomainPropertyArgs']]]]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleDatabaseNodeProtectionDomainPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type of database
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NdbDatabaseScaleDatabaseNodeProtectionDomainPropertyArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        ref_id: NotRequired[pulumi.Input[str]]
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseScaleDatabaseNodeProtectionDomainPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleDatabaseNodeProtectionDomainPropertyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] name: Name of database instance
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseScaleDatabaseNodeTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseScaleDatabaseNodeTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleDatabaseNodeTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseScaleInfoArgsDict(TypedDict):
        bpg_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigArgsDict']]]]
        secure_info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    NdbDatabaseScaleInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleInfoArgs:
    def __init__(__self__, *,
                 bpg_configs: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigArgs']]]] = None,
                 secure_info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if bpg_configs is not None:
            pulumi.set(__self__, "bpg_configs", bpg_configs)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="bpgConfigs")
    def bpg_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigArgs']]]]:
        return pulumi.get(self, "bpg_configs")

    @bpg_configs.setter
    def bpg_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigArgs']]]]):
        pulumi.set(self, "bpg_configs", value)

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "secure_info")

    @secure_info.setter
    def secure_info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secure_info", value)


if not MYPY:
    class NdbDatabaseScaleInfoBpgConfigArgsDict(TypedDict):
        bpg_db_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigBpgDbParamArgsDict']]]]
        storages: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigStorageArgsDict']]]]
        vm_properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigVmPropertyArgsDict']]]]
elif False:
    NdbDatabaseScaleInfoBpgConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleInfoBpgConfigArgs:
    def __init__(__self__, *,
                 bpg_db_params: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigBpgDbParamArgs']]]] = None,
                 storages: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigStorageArgs']]]] = None,
                 vm_properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigVmPropertyArgs']]]] = None):
        if bpg_db_params is not None:
            pulumi.set(__self__, "bpg_db_params", bpg_db_params)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if vm_properties is not None:
            pulumi.set(__self__, "vm_properties", vm_properties)

    @property
    @pulumi.getter(name="bpgDbParams")
    def bpg_db_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigBpgDbParamArgs']]]]:
        return pulumi.get(self, "bpg_db_params")

    @bpg_db_params.setter
    def bpg_db_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigBpgDbParamArgs']]]]):
        pulumi.set(self, "bpg_db_params", value)

    @property
    @pulumi.getter
    def storages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigStorageArgs']]]]:
        return pulumi.get(self, "storages")

    @storages.setter
    def storages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigStorageArgs']]]]):
        pulumi.set(self, "storages", value)

    @property
    @pulumi.getter(name="vmProperties")
    def vm_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigVmPropertyArgs']]]]:
        return pulumi.get(self, "vm_properties")

    @vm_properties.setter
    def vm_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigVmPropertyArgs']]]]):
        pulumi.set(self, "vm_properties", value)


if not MYPY:
    class NdbDatabaseScaleInfoBpgConfigBpgDbParamArgsDict(TypedDict):
        effective_cache_size: NotRequired[pulumi.Input[str]]
        maintenance_work_mem: NotRequired[pulumi.Input[str]]
        max_parallel_workers_per_gather: NotRequired[pulumi.Input[str]]
        max_worker_processes: NotRequired[pulumi.Input[str]]
        shared_buffers: NotRequired[pulumi.Input[str]]
        work_mem: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseScaleInfoBpgConfigBpgDbParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleInfoBpgConfigBpgDbParamArgs:
    def __init__(__self__, *,
                 effective_cache_size: Optional[pulumi.Input[str]] = None,
                 maintenance_work_mem: Optional[pulumi.Input[str]] = None,
                 max_parallel_workers_per_gather: Optional[pulumi.Input[str]] = None,
                 max_worker_processes: Optional[pulumi.Input[str]] = None,
                 shared_buffers: Optional[pulumi.Input[str]] = None,
                 work_mem: Optional[pulumi.Input[str]] = None):
        if effective_cache_size is not None:
            pulumi.set(__self__, "effective_cache_size", effective_cache_size)
        if maintenance_work_mem is not None:
            pulumi.set(__self__, "maintenance_work_mem", maintenance_work_mem)
        if max_parallel_workers_per_gather is not None:
            pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if shared_buffers is not None:
            pulumi.set(__self__, "shared_buffers", shared_buffers)
        if work_mem is not None:
            pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="effectiveCacheSize")
    def effective_cache_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effective_cache_size")

    @effective_cache_size.setter
    def effective_cache_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effective_cache_size", value)

    @property
    @pulumi.getter(name="maintenanceWorkMem")
    def maintenance_work_mem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maintenance_work_mem")

    @maintenance_work_mem.setter
    def maintenance_work_mem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_work_mem", value)

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @max_parallel_workers_per_gather.setter
    def max_parallel_workers_per_gather(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_parallel_workers_per_gather", value)

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_worker_processes")

    @max_worker_processes.setter
    def max_worker_processes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_worker_processes", value)

    @property
    @pulumi.getter(name="sharedBuffers")
    def shared_buffers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shared_buffers")

    @shared_buffers.setter
    def shared_buffers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shared_buffers", value)

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "work_mem")

    @work_mem.setter
    def work_mem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_mem", value)


if not MYPY:
    class NdbDatabaseScaleInfoBpgConfigStorageArgsDict(TypedDict):
        archive_storages: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigStorageArchiveStorageArgsDict']]]]
        data_disks: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigStorageDataDiskArgsDict']]]]
        log_disks: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigStorageLogDiskArgsDict']]]]
elif False:
    NdbDatabaseScaleInfoBpgConfigStorageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleInfoBpgConfigStorageArgs:
    def __init__(__self__, *,
                 archive_storages: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigStorageArchiveStorageArgs']]]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigStorageDataDiskArgs']]]] = None,
                 log_disks: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigStorageLogDiskArgs']]]] = None):
        if archive_storages is not None:
            pulumi.set(__self__, "archive_storages", archive_storages)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if log_disks is not None:
            pulumi.set(__self__, "log_disks", log_disks)

    @property
    @pulumi.getter(name="archiveStorages")
    def archive_storages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigStorageArchiveStorageArgs']]]]:
        return pulumi.get(self, "archive_storages")

    @archive_storages.setter
    def archive_storages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigStorageArchiveStorageArgs']]]]):
        pulumi.set(self, "archive_storages", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigStorageDataDiskArgs']]]]:
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigStorageDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="logDisks")
    def log_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigStorageLogDiskArgs']]]]:
        return pulumi.get(self, "log_disks")

    @log_disks.setter
    def log_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleInfoBpgConfigStorageLogDiskArgs']]]]):
        pulumi.set(self, "log_disks", value)


if not MYPY:
    class NdbDatabaseScaleInfoBpgConfigStorageArchiveStorageArgsDict(TypedDict):
        size: NotRequired[pulumi.Input[float]]
elif False:
    NdbDatabaseScaleInfoBpgConfigStorageArchiveStorageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleInfoBpgConfigStorageArchiveStorageArgs:
    def __init__(__self__, *,
                 size: Optional[pulumi.Input[float]] = None):
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "size", value)


if not MYPY:
    class NdbDatabaseScaleInfoBpgConfigStorageDataDiskArgsDict(TypedDict):
        count: NotRequired[pulumi.Input[float]]
elif False:
    NdbDatabaseScaleInfoBpgConfigStorageDataDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleInfoBpgConfigStorageDataDiskArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[float]] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "count", value)


if not MYPY:
    class NdbDatabaseScaleInfoBpgConfigStorageLogDiskArgsDict(TypedDict):
        count: NotRequired[pulumi.Input[float]]
        size: NotRequired[pulumi.Input[float]]
elif False:
    NdbDatabaseScaleInfoBpgConfigStorageLogDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleInfoBpgConfigStorageLogDiskArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[float]] = None,
                 size: Optional[pulumi.Input[float]] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "size", value)


if not MYPY:
    class NdbDatabaseScaleInfoBpgConfigVmPropertyArgsDict(TypedDict):
        dirty_background_ratio: NotRequired[pulumi.Input[float]]
        dirty_expire_centisecs: NotRequired[pulumi.Input[float]]
        dirty_ratio: NotRequired[pulumi.Input[float]]
        dirty_writeback_centisecs: NotRequired[pulumi.Input[float]]
        nr_hugepages: NotRequired[pulumi.Input[float]]
        overcommit_memory: NotRequired[pulumi.Input[float]]
        swappiness: NotRequired[pulumi.Input[float]]
elif False:
    NdbDatabaseScaleInfoBpgConfigVmPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleInfoBpgConfigVmPropertyArgs:
    def __init__(__self__, *,
                 dirty_background_ratio: Optional[pulumi.Input[float]] = None,
                 dirty_expire_centisecs: Optional[pulumi.Input[float]] = None,
                 dirty_ratio: Optional[pulumi.Input[float]] = None,
                 dirty_writeback_centisecs: Optional[pulumi.Input[float]] = None,
                 nr_hugepages: Optional[pulumi.Input[float]] = None,
                 overcommit_memory: Optional[pulumi.Input[float]] = None,
                 swappiness: Optional[pulumi.Input[float]] = None):
        if dirty_background_ratio is not None:
            pulumi.set(__self__, "dirty_background_ratio", dirty_background_ratio)
        if dirty_expire_centisecs is not None:
            pulumi.set(__self__, "dirty_expire_centisecs", dirty_expire_centisecs)
        if dirty_ratio is not None:
            pulumi.set(__self__, "dirty_ratio", dirty_ratio)
        if dirty_writeback_centisecs is not None:
            pulumi.set(__self__, "dirty_writeback_centisecs", dirty_writeback_centisecs)
        if nr_hugepages is not None:
            pulumi.set(__self__, "nr_hugepages", nr_hugepages)
        if overcommit_memory is not None:
            pulumi.set(__self__, "overcommit_memory", overcommit_memory)
        if swappiness is not None:
            pulumi.set(__self__, "swappiness", swappiness)

    @property
    @pulumi.getter(name="dirtyBackgroundRatio")
    def dirty_background_ratio(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_background_ratio")

    @dirty_background_ratio.setter
    def dirty_background_ratio(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_background_ratio", value)

    @property
    @pulumi.getter(name="dirtyExpireCentisecs")
    def dirty_expire_centisecs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_expire_centisecs")

    @dirty_expire_centisecs.setter
    def dirty_expire_centisecs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_expire_centisecs", value)

    @property
    @pulumi.getter(name="dirtyRatio")
    def dirty_ratio(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_ratio")

    @dirty_ratio.setter
    def dirty_ratio(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_ratio", value)

    @property
    @pulumi.getter(name="dirtyWritebackCentisecs")
    def dirty_writeback_centisecs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_writeback_centisecs")

    @dirty_writeback_centisecs.setter
    def dirty_writeback_centisecs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_writeback_centisecs", value)

    @property
    @pulumi.getter(name="nrHugepages")
    def nr_hugepages(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "nr_hugepages")

    @nr_hugepages.setter
    def nr_hugepages(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "nr_hugepages", value)

    @property
    @pulumi.getter(name="overcommitMemory")
    def overcommit_memory(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "overcommit_memory")

    @overcommit_memory.setter
    def overcommit_memory(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "overcommit_memory", value)

    @property
    @pulumi.getter
    def swappiness(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "swappiness")

    @swappiness.setter
    def swappiness(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "swappiness", value)


if not MYPY:
    class NdbDatabaseScaleLcmConfigArgsDict(TypedDict):
        expiry_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLcmConfigExpiryDetailArgsDict']]]]
        post_delete_commands: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLcmConfigPostDeleteCommandArgsDict']]]]
        pre_delete_commands: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLcmConfigPreDeleteCommandArgsDict']]]]
        refresh_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLcmConfigRefreshDetailArgsDict']]]]
elif False:
    NdbDatabaseScaleLcmConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleLcmConfigArgs:
    def __init__(__self__, *,
                 expiry_details: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLcmConfigExpiryDetailArgs']]]] = None,
                 post_delete_commands: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLcmConfigPostDeleteCommandArgs']]]] = None,
                 pre_delete_commands: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLcmConfigPreDeleteCommandArgs']]]] = None,
                 refresh_details: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLcmConfigRefreshDetailArgs']]]] = None):
        if expiry_details is not None:
            pulumi.set(__self__, "expiry_details", expiry_details)
        if post_delete_commands is not None:
            pulumi.set(__self__, "post_delete_commands", post_delete_commands)
        if pre_delete_commands is not None:
            pulumi.set(__self__, "pre_delete_commands", pre_delete_commands)
        if refresh_details is not None:
            pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLcmConfigExpiryDetailArgs']]]]:
        return pulumi.get(self, "expiry_details")

    @expiry_details.setter
    def expiry_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLcmConfigExpiryDetailArgs']]]]):
        pulumi.set(self, "expiry_details", value)

    @property
    @pulumi.getter(name="postDeleteCommands")
    def post_delete_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLcmConfigPostDeleteCommandArgs']]]]:
        return pulumi.get(self, "post_delete_commands")

    @post_delete_commands.setter
    def post_delete_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLcmConfigPostDeleteCommandArgs']]]]):
        pulumi.set(self, "post_delete_commands", value)

    @property
    @pulumi.getter(name="preDeleteCommands")
    def pre_delete_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLcmConfigPreDeleteCommandArgs']]]]:
        return pulumi.get(self, "pre_delete_commands")

    @pre_delete_commands.setter
    def pre_delete_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLcmConfigPreDeleteCommandArgs']]]]):
        pulumi.set(self, "pre_delete_commands", value)

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLcmConfigRefreshDetailArgs']]]]:
        return pulumi.get(self, "refresh_details")

    @refresh_details.setter
    def refresh_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLcmConfigRefreshDetailArgs']]]]):
        pulumi.set(self, "refresh_details", value)


if not MYPY:
    class NdbDatabaseScaleLcmConfigExpiryDetailArgsDict(TypedDict):
        delete_database: NotRequired[pulumi.Input[bool]]
        delete_time_machine: NotRequired[pulumi.Input[bool]]
        delete_vm: NotRequired[pulumi.Input[bool]]
        effective_timestamp: NotRequired[pulumi.Input[str]]
        expire_in_days: NotRequired[pulumi.Input[int]]
        expiry_date_timezone: NotRequired[pulumi.Input[str]]
        expiry_timestamp: NotRequired[pulumi.Input[str]]
        remind_before_in_days: NotRequired[pulumi.Input[int]]
        user_created: NotRequired[pulumi.Input[bool]]
elif False:
    NdbDatabaseScaleLcmConfigExpiryDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleLcmConfigExpiryDetailArgs:
    def __init__(__self__, *,
                 delete_database: Optional[pulumi.Input[bool]] = None,
                 delete_time_machine: Optional[pulumi.Input[bool]] = None,
                 delete_vm: Optional[pulumi.Input[bool]] = None,
                 effective_timestamp: Optional[pulumi.Input[str]] = None,
                 expire_in_days: Optional[pulumi.Input[int]] = None,
                 expiry_date_timezone: Optional[pulumi.Input[str]] = None,
                 expiry_timestamp: Optional[pulumi.Input[str]] = None,
                 remind_before_in_days: Optional[pulumi.Input[int]] = None,
                 user_created: Optional[pulumi.Input[bool]] = None):
        if delete_database is not None:
            pulumi.set(__self__, "delete_database", delete_database)
        if delete_time_machine is not None:
            pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        if delete_vm is not None:
            pulumi.set(__self__, "delete_vm", delete_vm)
        if effective_timestamp is not None:
            pulumi.set(__self__, "effective_timestamp", effective_timestamp)
        if expire_in_days is not None:
            pulumi.set(__self__, "expire_in_days", expire_in_days)
        if expiry_date_timezone is not None:
            pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        if expiry_timestamp is not None:
            pulumi.set(__self__, "expiry_timestamp", expiry_timestamp)
        if remind_before_in_days is not None:
            pulumi.set(__self__, "remind_before_in_days", remind_before_in_days)
        if user_created is not None:
            pulumi.set(__self__, "user_created", user_created)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_database")

    @delete_database.setter
    def delete_database(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_database", value)

    @property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_time_machine")

    @delete_time_machine.setter
    def delete_time_machine(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_time_machine", value)

    @property
    @pulumi.getter(name="deleteVm")
    def delete_vm(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_vm")

    @delete_vm.setter
    def delete_vm(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_vm", value)

    @property
    @pulumi.getter(name="effectiveTimestamp")
    def effective_timestamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effective_timestamp")

    @effective_timestamp.setter
    def effective_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effective_timestamp", value)

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "expire_in_days")

    @expire_in_days.setter
    def expire_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expire_in_days", value)

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiry_date_timezone")

    @expiry_date_timezone.setter
    def expiry_date_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry_date_timezone", value)

    @property
    @pulumi.getter(name="expiryTimestamp")
    def expiry_timestamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiry_timestamp")

    @expiry_timestamp.setter
    def expiry_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry_timestamp", value)

    @property
    @pulumi.getter(name="remindBeforeInDays")
    def remind_before_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remind_before_in_days")

    @remind_before_in_days.setter
    def remind_before_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remind_before_in_days", value)

    @property
    @pulumi.getter(name="userCreated")
    def user_created(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "user_created")

    @user_created.setter
    def user_created(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_created", value)


if not MYPY:
    class NdbDatabaseScaleLcmConfigPostDeleteCommandArgsDict(TypedDict):
        command: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseScaleLcmConfigPostDeleteCommandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleLcmConfigPostDeleteCommandArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)


if not MYPY:
    class NdbDatabaseScaleLcmConfigPreDeleteCommandArgsDict(TypedDict):
        command: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseScaleLcmConfigPreDeleteCommandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleLcmConfigPreDeleteCommandArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)


if not MYPY:
    class NdbDatabaseScaleLcmConfigRefreshDetailArgsDict(TypedDict):
        last_refresh_date: NotRequired[pulumi.Input[str]]
        next_refresh_date: NotRequired[pulumi.Input[str]]
        refresh_date_timezone: NotRequired[pulumi.Input[str]]
        refresh_in_days: NotRequired[pulumi.Input[int]]
        refresh_in_hours: NotRequired[pulumi.Input[int]]
        refresh_in_months: NotRequired[pulumi.Input[int]]
        refresh_time: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseScaleLcmConfigRefreshDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleLcmConfigRefreshDetailArgs:
    def __init__(__self__, *,
                 last_refresh_date: Optional[pulumi.Input[str]] = None,
                 next_refresh_date: Optional[pulumi.Input[str]] = None,
                 refresh_date_timezone: Optional[pulumi.Input[str]] = None,
                 refresh_in_days: Optional[pulumi.Input[int]] = None,
                 refresh_in_hours: Optional[pulumi.Input[int]] = None,
                 refresh_in_months: Optional[pulumi.Input[int]] = None,
                 refresh_time: Optional[pulumi.Input[str]] = None):
        if last_refresh_date is not None:
            pulumi.set(__self__, "last_refresh_date", last_refresh_date)
        if next_refresh_date is not None:
            pulumi.set(__self__, "next_refresh_date", next_refresh_date)
        if refresh_date_timezone is not None:
            pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        if refresh_in_days is not None:
            pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        if refresh_in_hours is not None:
            pulumi.set(__self__, "refresh_in_hours", refresh_in_hours)
        if refresh_in_months is not None:
            pulumi.set(__self__, "refresh_in_months", refresh_in_months)
        if refresh_time is not None:
            pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="lastRefreshDate")
    def last_refresh_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_refresh_date")

    @last_refresh_date.setter
    def last_refresh_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_refresh_date", value)

    @property
    @pulumi.getter(name="nextRefreshDate")
    def next_refresh_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_refresh_date")

    @next_refresh_date.setter
    def next_refresh_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_refresh_date", value)

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_date_timezone")

    @refresh_date_timezone.setter
    def refresh_date_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_date_timezone", value)

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_in_days")

    @refresh_in_days.setter
    def refresh_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_in_days", value)

    @property
    @pulumi.getter(name="refreshInHours")
    def refresh_in_hours(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_in_hours")

    @refresh_in_hours.setter
    def refresh_in_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_in_hours", value)

    @property
    @pulumi.getter(name="refreshInMonths")
    def refresh_in_months(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_in_months")

    @refresh_in_months.setter
    def refresh_in_months(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_in_months", value)

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_time")

    @refresh_time.setter
    def refresh_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_time", value)


if not MYPY:
    class NdbDatabaseScaleLinkedDatabaseArgsDict(TypedDict):
        database_name: NotRequired[pulumi.Input[str]]
        """
        name of database
        """
        database_status: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        id: NotRequired[pulumi.Input[str]]
        infos: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLinkedDatabaseInfoArgsDict']]]]
        """
        info of instance
        """
        metric: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        parent_database_id: NotRequired[pulumi.Input[str]]
        """
        parent database id
        """
        parent_linked_database_id: NotRequired[pulumi.Input[str]]
        snapshot_id: NotRequired[pulumi.Input[str]]
        status: NotRequired[pulumi.Input[str]]
        """
        status of instance
        """
        timezone: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseScaleLinkedDatabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleLinkedDatabaseArgs:
    def __init__(__self__, *,
                 database_name: Optional[pulumi.Input[str]] = None,
                 database_status: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLinkedDatabaseInfoArgs']]]] = None,
                 metric: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_database_id: Optional[pulumi.Input[str]] = None,
                 parent_linked_database_id: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] database_name: name of database
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLinkedDatabaseInfoArgs']]] infos: info of instance
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metric: Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[str] parent_database_id: parent database id
        :param pulumi.Input[str] status: status of instance
        """
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_database_id is not None:
            pulumi.set(__self__, "parent_database_id", parent_database_id)
        if parent_linked_database_id is not None:
            pulumi.set(__self__, "parent_linked_database_id", parent_linked_database_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of database
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_status")

    @database_status.setter
    def database_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_status", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLinkedDatabaseInfoArgs']]]]:
        """
        info of instance
        """
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleLinkedDatabaseInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> Optional[pulumi.Input[str]]:
        """
        parent database id
        """
        return pulumi.get(self, "parent_database_id")

    @parent_database_id.setter
    def parent_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_database_id", value)

    @property
    @pulumi.getter(name="parentLinkedDatabaseId")
    def parent_linked_database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parent_linked_database_id")

    @parent_linked_database_id.setter
    def parent_linked_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_linked_database_id", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


if not MYPY:
    class NdbDatabaseScaleLinkedDatabaseInfoArgsDict(TypedDict):
        info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        info of instance
        """
        secure_info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    NdbDatabaseScaleLinkedDatabaseInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleLinkedDatabaseInfoArgs:
    def __init__(__self__, *,
                 info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 secure_info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] info: info of instance
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        info of instance
        """
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "secure_info")

    @secure_info.setter
    def secure_info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secure_info", value)


if not MYPY:
    class NdbDatabaseScalePropertyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseScalePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScalePropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of database instance
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseScaleTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseScaleTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseScaleTimeMachineArgsDict(TypedDict):
        access_level: NotRequired[pulumi.Input[str]]
        clone: NotRequired[pulumi.Input[bool]]
        """
        whether instance is cloned or not
        """
        clones: NotRequired[pulumi.Input[str]]
        clustered: NotRequired[pulumi.Input[bool]]
        database: NotRequired[pulumi.Input[str]]
        database_id: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        ea_status: NotRequired[pulumi.Input[str]]
        id: NotRequired[pulumi.Input[str]]
        metric: NotRequired[pulumi.Input[str]]
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachinePropertyArgsDict']]]]
        """
        properties of database created
        """
        schedule_id: NotRequired[pulumi.Input[str]]
        schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleArgsDict']]]]
        scope: NotRequired[pulumi.Input[str]]
        sla_id: NotRequired[pulumi.Input[str]]
        sla_update_in_progress: NotRequired[pulumi.Input[bool]]
        sla_update_metadata: NotRequired[pulumi.Input[str]]
        slas: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineSlaArgsDict']]]]
        source_nx_clusters: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        status: NotRequired[pulumi.Input[str]]
        """
        status of instance
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineTagArgsDict']]]]
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type of database
        """
elif False:
    NdbDatabaseScaleTimeMachineArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleTimeMachineArgs:
    def __init__(__self__, *,
                 access_level: Optional[pulumi.Input[str]] = None,
                 clone: Optional[pulumi.Input[bool]] = None,
                 clones: Optional[pulumi.Input[str]] = None,
                 clustered: Optional[pulumi.Input[bool]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 database_id: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ea_status: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachinePropertyArgs']]]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleArgs']]]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 sla_id: Optional[pulumi.Input[str]] = None,
                 sla_update_in_progress: Optional[pulumi.Input[bool]] = None,
                 sla_update_metadata: Optional[pulumi.Input[str]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineSlaArgs']]]] = None,
                 source_nx_clusters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineTagArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] clone: whether instance is cloned or not
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] metric: Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachinePropertyArgs']]] properties: properties of database created
        :param pulumi.Input[str] status: status of instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineTagArgs']]] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        :param pulumi.Input[str] type: type of database
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if clone is not None:
            pulumi.set(__self__, "clone", clone)
        if clones is not None:
            pulumi.set(__self__, "clones", clones)
        if clustered is not None:
            pulumi.set(__self__, "clustered", clustered)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ea_status is not None:
            pulumi.set(__self__, "ea_status", ea_status)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)
        if sla_update_in_progress is not None:
            pulumi.set(__self__, "sla_update_in_progress", sla_update_in_progress)
        if sla_update_metadata is not None:
            pulumi.set(__self__, "sla_update_metadata", sla_update_metadata)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if source_nx_clusters is not None:
            pulumi.set(__self__, "source_nx_clusters", source_nx_clusters)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_level")

    @access_level.setter
    def access_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_level", value)

    @property
    @pulumi.getter
    def clone(self) -> Optional[pulumi.Input[bool]]:
        """
        whether instance is cloned or not
        """
        return pulumi.get(self, "clone")

    @clone.setter
    def clone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "clone", value)

    @property
    @pulumi.getter
    def clones(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "clones")

    @clones.setter
    def clones(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clones", value)

    @property
    @pulumi.getter
    def clustered(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "clustered")

    @clustered.setter
    def clustered(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "clustered", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_id", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="eaStatus")
    def ea_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ea_status")

    @ea_status.setter
    def ea_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ea_status", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachinePropertyArgs']]]]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachinePropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_id", value)

    @property
    @pulumi.getter
    def schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleArgs']]]]:
        return pulumi.get(self, "schedules")

    @schedules.setter
    def schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleArgs']]]]):
        pulumi.set(self, "schedules", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sla_id")

    @sla_id.setter
    def sla_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_id", value)

    @property
    @pulumi.getter(name="slaUpdateInProgress")
    def sla_update_in_progress(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sla_update_in_progress")

    @sla_update_in_progress.setter
    def sla_update_in_progress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sla_update_in_progress", value)

    @property
    @pulumi.getter(name="slaUpdateMetadata")
    def sla_update_metadata(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sla_update_metadata")

    @sla_update_metadata.setter
    def sla_update_metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_update_metadata", value)

    @property
    @pulumi.getter
    def slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineSlaArgs']]]]:
        return pulumi.get(self, "slas")

    @slas.setter
    def slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineSlaArgs']]]]):
        pulumi.set(self, "slas", value)

    @property
    @pulumi.getter(name="sourceNxClusters")
    def source_nx_clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "source_nx_clusters")

    @source_nx_clusters.setter
    def source_nx_clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_nx_clusters", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineTagArgs']]]]:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type of database
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NdbDatabaseScaleTimeMachinePropertyArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        ref_id: NotRequired[pulumi.Input[str]]
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseScaleTimeMachinePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleTimeMachinePropertyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] name: Name of database instance
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseScaleTimeMachineScheduleArgsDict(TypedDict):
        continuous_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleContinuousScheduleArgsDict']]]]
        daily_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleDailyScheduleArgsDict']]]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        global_policy: NotRequired[pulumi.Input[bool]]
        id: NotRequired[pulumi.Input[str]]
        monthly_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleMonthlyScheduleArgsDict']]]]
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        owner_id: NotRequired[pulumi.Input[str]]
        quartely_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleQuartelyScheduleArgsDict']]]]
        reference_count: NotRequired[pulumi.Input[int]]
        snapshot_time_of_days: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDayArgsDict']]]]
        start_time: NotRequired[pulumi.Input[str]]
        system_policy: NotRequired[pulumi.Input[bool]]
        time_zone: NotRequired[pulumi.Input[str]]
        """
        timezone on which instance is created xw
        """
        unique_name: NotRequired[pulumi.Input[str]]
        weekly_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleWeeklyScheduleArgsDict']]]]
        yearly_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleYearlyScheduleArgsDict']]]]
elif False:
    NdbDatabaseScaleTimeMachineScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleTimeMachineScheduleArgs:
    def __init__(__self__, *,
                 continuous_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleContinuousScheduleArgs']]]] = None,
                 daily_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleDailyScheduleArgs']]]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 global_policy: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 monthly_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleMonthlyScheduleArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 quartely_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleQuartelyScheduleArgs']]]] = None,
                 reference_count: Optional[pulumi.Input[int]] = None,
                 snapshot_time_of_days: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDayArgs']]]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 system_policy: Optional[pulumi.Input[bool]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 unique_name: Optional[pulumi.Input[str]] = None,
                 weekly_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleWeeklyScheduleArgs']]]] = None,
                 yearly_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleYearlyScheduleArgs']]]] = None):
        """
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[str] time_zone: timezone on which instance is created xw
        """
        if continuous_schedules is not None:
            pulumi.set(__self__, "continuous_schedules", continuous_schedules)
        if daily_schedules is not None:
            pulumi.set(__self__, "daily_schedules", daily_schedules)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if global_policy is not None:
            pulumi.set(__self__, "global_policy", global_policy)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_schedules is not None:
            pulumi.set(__self__, "monthly_schedules", monthly_schedules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if quartely_schedules is not None:
            pulumi.set(__self__, "quartely_schedules", quartely_schedules)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if snapshot_time_of_days is not None:
            pulumi.set(__self__, "snapshot_time_of_days", snapshot_time_of_days)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if system_policy is not None:
            pulumi.set(__self__, "system_policy", system_policy)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_schedules is not None:
            pulumi.set(__self__, "weekly_schedules", weekly_schedules)
        if yearly_schedules is not None:
            pulumi.set(__self__, "yearly_schedules", yearly_schedules)

    @property
    @pulumi.getter(name="continuousSchedules")
    def continuous_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleContinuousScheduleArgs']]]]:
        return pulumi.get(self, "continuous_schedules")

    @continuous_schedules.setter
    def continuous_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleContinuousScheduleArgs']]]]):
        pulumi.set(self, "continuous_schedules", value)

    @property
    @pulumi.getter(name="dailySchedules")
    def daily_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleDailyScheduleArgs']]]]:
        return pulumi.get(self, "daily_schedules")

    @daily_schedules.setter
    def daily_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleDailyScheduleArgs']]]]):
        pulumi.set(self, "daily_schedules", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="globalPolicy")
    def global_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_policy")

    @global_policy.setter
    def global_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_policy", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="monthlySchedules")
    def monthly_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleMonthlyScheduleArgs']]]]:
        return pulumi.get(self, "monthly_schedules")

    @monthly_schedules.setter
    def monthly_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleMonthlyScheduleArgs']]]]):
        pulumi.set(self, "monthly_schedules", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="quartelySchedules")
    def quartely_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleQuartelyScheduleArgs']]]]:
        return pulumi.get(self, "quartely_schedules")

    @quartely_schedules.setter
    def quartely_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleQuartelyScheduleArgs']]]]):
        pulumi.set(self, "quartely_schedules", value)

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reference_count")

    @reference_count.setter
    def reference_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reference_count", value)

    @property
    @pulumi.getter(name="snapshotTimeOfDays")
    def snapshot_time_of_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDayArgs']]]]:
        return pulumi.get(self, "snapshot_time_of_days")

    @snapshot_time_of_days.setter
    def snapshot_time_of_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDayArgs']]]]):
        pulumi.set(self, "snapshot_time_of_days", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="systemPolicy")
    def system_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "system_policy")

    @system_policy.setter
    def system_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "system_policy", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        timezone on which instance is created xw
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unique_name")

    @unique_name.setter
    def unique_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_name", value)

    @property
    @pulumi.getter(name="weeklySchedules")
    def weekly_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleWeeklyScheduleArgs']]]]:
        return pulumi.get(self, "weekly_schedules")

    @weekly_schedules.setter
    def weekly_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleWeeklyScheduleArgs']]]]):
        pulumi.set(self, "weekly_schedules", value)

    @property
    @pulumi.getter(name="yearlySchedules")
    def yearly_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleYearlyScheduleArgs']]]]:
        return pulumi.get(self, "yearly_schedules")

    @yearly_schedules.setter
    def yearly_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseScaleTimeMachineScheduleYearlyScheduleArgs']]]]):
        pulumi.set(self, "yearly_schedules", value)


if not MYPY:
    class NdbDatabaseScaleTimeMachineScheduleContinuousScheduleArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        log_backup_interval: NotRequired[pulumi.Input[int]]
        snapshots_per_day: NotRequired[pulumi.Input[int]]
elif False:
    NdbDatabaseScaleTimeMachineScheduleContinuousScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleTimeMachineScheduleContinuousScheduleArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_backup_interval: Optional[pulumi.Input[int]] = None,
                 snapshots_per_day: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_backup_interval is not None:
            pulumi.set(__self__, "log_backup_interval", log_backup_interval)
        if snapshots_per_day is not None:
            pulumi.set(__self__, "snapshots_per_day", snapshots_per_day)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logBackupInterval")
    def log_backup_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "log_backup_interval")

    @log_backup_interval.setter
    def log_backup_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_backup_interval", value)

    @property
    @pulumi.getter(name="snapshotsPerDay")
    def snapshots_per_day(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "snapshots_per_day")

    @snapshots_per_day.setter
    def snapshots_per_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "snapshots_per_day", value)


if not MYPY:
    class NdbDatabaseScaleTimeMachineScheduleDailyScheduleArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    NdbDatabaseScaleTimeMachineScheduleDailyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleTimeMachineScheduleDailyScheduleArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbDatabaseScaleTimeMachineScheduleMonthlyScheduleArgsDict(TypedDict):
        day_of_month: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    NdbDatabaseScaleTimeMachineScheduleMonthlyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleTimeMachineScheduleMonthlyScheduleArgs:
    def __init__(__self__, *,
                 day_of_month: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbDatabaseScaleTimeMachineScheduleQuartelyScheduleArgsDict(TypedDict):
        day_of_month: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
        start_month: NotRequired[pulumi.Input[str]]
        start_month_value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseScaleTimeMachineScheduleQuartelyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleTimeMachineScheduleQuartelyScheduleArgs:
    def __init__(__self__, *,
                 day_of_month: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 start_month: Optional[pulumi.Input[str]] = None,
                 start_month_value: Optional[pulumi.Input[str]] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if start_month is not None:
            pulumi.set(__self__, "start_month", start_month)
        if start_month_value is not None:
            pulumi.set(__self__, "start_month_value", start_month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="startMonth")
    def start_month(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_month")

    @start_month.setter
    def start_month(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_month", value)

    @property
    @pulumi.getter(name="startMonthValue")
    def start_month_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_month_value")

    @start_month_value.setter
    def start_month_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_month_value", value)


if not MYPY:
    class NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDayArgsDict(TypedDict):
        extra: NotRequired[pulumi.Input[bool]]
        hours: NotRequired[pulumi.Input[int]]
        minutes: NotRequired[pulumi.Input[int]]
        seconds: NotRequired[pulumi.Input[int]]
elif False:
    NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDayArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDayArgs:
    def __init__(__self__, *,
                 extra: Optional[pulumi.Input[bool]] = None,
                 hours: Optional[pulumi.Input[int]] = None,
                 minutes: Optional[pulumi.Input[int]] = None,
                 seconds: Optional[pulumi.Input[int]] = None):
        if extra is not None:
            pulumi.set(__self__, "extra", extra)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def extra(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "extra")

    @extra.setter
    def extra(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extra", value)

    @property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hours", value)

    @property
    @pulumi.getter
    def minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minutes", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)


if not MYPY:
    class NdbDatabaseScaleTimeMachineScheduleWeeklyScheduleArgsDict(TypedDict):
        day_of_week: NotRequired[pulumi.Input[str]]
        day_of_week_value: NotRequired[pulumi.Input[str]]
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    NdbDatabaseScaleTimeMachineScheduleWeeklyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleTimeMachineScheduleWeeklyScheduleArgs:
    def __init__(__self__, *,
                 day_of_week: Optional[pulumi.Input[str]] = None,
                 day_of_week_value: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if day_of_week_value is not None:
            pulumi.set(__self__, "day_of_week_value", day_of_week_value)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week", value)

    @property
    @pulumi.getter(name="dayOfWeekValue")
    def day_of_week_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "day_of_week_value")

    @day_of_week_value.setter
    def day_of_week_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week_value", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbDatabaseScaleTimeMachineScheduleYearlyScheduleArgsDict(TypedDict):
        day_of_month: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
        month: NotRequired[pulumi.Input[str]]
        month_value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseScaleTimeMachineScheduleYearlyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleTimeMachineScheduleYearlyScheduleArgs:
    def __init__(__self__, *,
                 day_of_month: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 month: Optional[pulumi.Input[str]] = None,
                 month_value: Optional[pulumi.Input[str]] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if month_value is not None:
            pulumi.set(__self__, "month_value", month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def month(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "month")

    @month.setter
    def month(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "month", value)

    @property
    @pulumi.getter(name="monthValue")
    def month_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "month_value")

    @month_value.setter
    def month_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "month_value", value)


if not MYPY:
    class NdbDatabaseScaleTimeMachineSlaArgsDict(TypedDict):
        continuous_retention: NotRequired[pulumi.Input[int]]
        current_active_frequency: NotRequired[pulumi.Input[str]]
        daily_retention: NotRequired[pulumi.Input[int]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        id: NotRequired[pulumi.Input[str]]
        monthly_retention: NotRequired[pulumi.Input[int]]
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        owner_id: NotRequired[pulumi.Input[str]]
        pitr_enabled: NotRequired[pulumi.Input[bool]]
        quarterly_retention: NotRequired[pulumi.Input[int]]
        reference_count: NotRequired[pulumi.Input[int]]
        system_sla: NotRequired[pulumi.Input[bool]]
        unique_name: NotRequired[pulumi.Input[str]]
        weekly_retention: NotRequired[pulumi.Input[int]]
        yearly_retention: NotRequired[pulumi.Input[int]]
elif False:
    NdbDatabaseScaleTimeMachineSlaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleTimeMachineSlaArgs:
    def __init__(__self__, *,
                 continuous_retention: Optional[pulumi.Input[int]] = None,
                 current_active_frequency: Optional[pulumi.Input[str]] = None,
                 daily_retention: Optional[pulumi.Input[int]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 monthly_retention: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 pitr_enabled: Optional[pulumi.Input[bool]] = None,
                 quarterly_retention: Optional[pulumi.Input[int]] = None,
                 reference_count: Optional[pulumi.Input[int]] = None,
                 system_sla: Optional[pulumi.Input[bool]] = None,
                 unique_name: Optional[pulumi.Input[str]] = None,
                 weekly_retention: Optional[pulumi.Input[int]] = None,
                 yearly_retention: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] name: Name of database instance
        """
        if continuous_retention is not None:
            pulumi.set(__self__, "continuous_retention", continuous_retention)
        if current_active_frequency is not None:
            pulumi.set(__self__, "current_active_frequency", current_active_frequency)
        if daily_retention is not None:
            pulumi.set(__self__, "daily_retention", daily_retention)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_retention is not None:
            pulumi.set(__self__, "monthly_retention", monthly_retention)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if pitr_enabled is not None:
            pulumi.set(__self__, "pitr_enabled", pitr_enabled)
        if quarterly_retention is not None:
            pulumi.set(__self__, "quarterly_retention", quarterly_retention)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if system_sla is not None:
            pulumi.set(__self__, "system_sla", system_sla)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_retention is not None:
            pulumi.set(__self__, "weekly_retention", weekly_retention)
        if yearly_retention is not None:
            pulumi.set(__self__, "yearly_retention", yearly_retention)

    @property
    @pulumi.getter(name="continuousRetention")
    def continuous_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "continuous_retention")

    @continuous_retention.setter
    def continuous_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "continuous_retention", value)

    @property
    @pulumi.getter(name="currentActiveFrequency")
    def current_active_frequency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "current_active_frequency")

    @current_active_frequency.setter
    def current_active_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "current_active_frequency", value)

    @property
    @pulumi.getter(name="dailyRetention")
    def daily_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "daily_retention")

    @daily_retention.setter
    def daily_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "daily_retention", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="monthlyRetention")
    def monthly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "monthly_retention")

    @monthly_retention.setter
    def monthly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monthly_retention", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="pitrEnabled")
    def pitr_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pitr_enabled")

    @pitr_enabled.setter
    def pitr_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pitr_enabled", value)

    @property
    @pulumi.getter(name="quarterlyRetention")
    def quarterly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "quarterly_retention")

    @quarterly_retention.setter
    def quarterly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quarterly_retention", value)

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reference_count")

    @reference_count.setter
    def reference_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reference_count", value)

    @property
    @pulumi.getter(name="systemSla")
    def system_sla(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "system_sla")

    @system_sla.setter
    def system_sla(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "system_sla", value)

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unique_name")

    @unique_name.setter
    def unique_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_name", value)

    @property
    @pulumi.getter(name="weeklyRetention")
    def weekly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weekly_retention")

    @weekly_retention.setter
    def weekly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weekly_retention", value)

    @property
    @pulumi.getter(name="yearlyRetention")
    def yearly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "yearly_retention")

    @yearly_retention.setter
    def yearly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "yearly_retention", value)


if not MYPY:
    class NdbDatabaseScaleTimeMachineTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseScaleTimeMachineTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseScaleTimeMachineTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseSnapshotLcmConfigArgsDict(TypedDict):
        expiry_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseSnapshotLcmConfigExpiryDetailArgsDict']]]]
        post_delete_commands: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseSnapshotLcmConfigPostDeleteCommandArgsDict']]]]
        pre_delete_commands: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseSnapshotLcmConfigPreDeleteCommandArgsDict']]]]
        refresh_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseSnapshotLcmConfigRefreshDetailArgsDict']]]]
elif False:
    NdbDatabaseSnapshotLcmConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseSnapshotLcmConfigArgs:
    def __init__(__self__, *,
                 expiry_details: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseSnapshotLcmConfigExpiryDetailArgs']]]] = None,
                 post_delete_commands: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseSnapshotLcmConfigPostDeleteCommandArgs']]]] = None,
                 pre_delete_commands: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseSnapshotLcmConfigPreDeleteCommandArgs']]]] = None,
                 refresh_details: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseSnapshotLcmConfigRefreshDetailArgs']]]] = None):
        if expiry_details is not None:
            pulumi.set(__self__, "expiry_details", expiry_details)
        if post_delete_commands is not None:
            pulumi.set(__self__, "post_delete_commands", post_delete_commands)
        if pre_delete_commands is not None:
            pulumi.set(__self__, "pre_delete_commands", pre_delete_commands)
        if refresh_details is not None:
            pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseSnapshotLcmConfigExpiryDetailArgs']]]]:
        return pulumi.get(self, "expiry_details")

    @expiry_details.setter
    def expiry_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseSnapshotLcmConfigExpiryDetailArgs']]]]):
        pulumi.set(self, "expiry_details", value)

    @property
    @pulumi.getter(name="postDeleteCommands")
    def post_delete_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseSnapshotLcmConfigPostDeleteCommandArgs']]]]:
        return pulumi.get(self, "post_delete_commands")

    @post_delete_commands.setter
    def post_delete_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseSnapshotLcmConfigPostDeleteCommandArgs']]]]):
        pulumi.set(self, "post_delete_commands", value)

    @property
    @pulumi.getter(name="preDeleteCommands")
    def pre_delete_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseSnapshotLcmConfigPreDeleteCommandArgs']]]]:
        return pulumi.get(self, "pre_delete_commands")

    @pre_delete_commands.setter
    def pre_delete_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseSnapshotLcmConfigPreDeleteCommandArgs']]]]):
        pulumi.set(self, "pre_delete_commands", value)

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseSnapshotLcmConfigRefreshDetailArgs']]]]:
        return pulumi.get(self, "refresh_details")

    @refresh_details.setter
    def refresh_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseSnapshotLcmConfigRefreshDetailArgs']]]]):
        pulumi.set(self, "refresh_details", value)


if not MYPY:
    class NdbDatabaseSnapshotLcmConfigExpiryDetailArgsDict(TypedDict):
        delete_database: NotRequired[pulumi.Input[bool]]
        delete_time_machine: NotRequired[pulumi.Input[bool]]
        delete_vm: NotRequired[pulumi.Input[bool]]
        effective_timestamp: NotRequired[pulumi.Input[str]]
        expire_in_days: NotRequired[pulumi.Input[int]]
        expiry_date_timezone: NotRequired[pulumi.Input[str]]
        """
        Default is set to Asia/Calcutta
        """
        expiry_timestamp: NotRequired[pulumi.Input[str]]
        remind_before_in_days: NotRequired[pulumi.Input[int]]
        user_created: NotRequired[pulumi.Input[bool]]
elif False:
    NdbDatabaseSnapshotLcmConfigExpiryDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseSnapshotLcmConfigExpiryDetailArgs:
    def __init__(__self__, *,
                 delete_database: Optional[pulumi.Input[bool]] = None,
                 delete_time_machine: Optional[pulumi.Input[bool]] = None,
                 delete_vm: Optional[pulumi.Input[bool]] = None,
                 effective_timestamp: Optional[pulumi.Input[str]] = None,
                 expire_in_days: Optional[pulumi.Input[int]] = None,
                 expiry_date_timezone: Optional[pulumi.Input[str]] = None,
                 expiry_timestamp: Optional[pulumi.Input[str]] = None,
                 remind_before_in_days: Optional[pulumi.Input[int]] = None,
                 user_created: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] expiry_date_timezone: Default is set to Asia/Calcutta
        """
        if delete_database is not None:
            pulumi.set(__self__, "delete_database", delete_database)
        if delete_time_machine is not None:
            pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        if delete_vm is not None:
            pulumi.set(__self__, "delete_vm", delete_vm)
        if effective_timestamp is not None:
            pulumi.set(__self__, "effective_timestamp", effective_timestamp)
        if expire_in_days is not None:
            pulumi.set(__self__, "expire_in_days", expire_in_days)
        if expiry_date_timezone is not None:
            pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        if expiry_timestamp is not None:
            pulumi.set(__self__, "expiry_timestamp", expiry_timestamp)
        if remind_before_in_days is not None:
            pulumi.set(__self__, "remind_before_in_days", remind_before_in_days)
        if user_created is not None:
            pulumi.set(__self__, "user_created", user_created)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_database")

    @delete_database.setter
    def delete_database(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_database", value)

    @property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_time_machine")

    @delete_time_machine.setter
    def delete_time_machine(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_time_machine", value)

    @property
    @pulumi.getter(name="deleteVm")
    def delete_vm(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_vm")

    @delete_vm.setter
    def delete_vm(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_vm", value)

    @property
    @pulumi.getter(name="effectiveTimestamp")
    def effective_timestamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effective_timestamp")

    @effective_timestamp.setter
    def effective_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effective_timestamp", value)

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "expire_in_days")

    @expire_in_days.setter
    def expire_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expire_in_days", value)

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> Optional[pulumi.Input[str]]:
        """
        Default is set to Asia/Calcutta
        """
        return pulumi.get(self, "expiry_date_timezone")

    @expiry_date_timezone.setter
    def expiry_date_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry_date_timezone", value)

    @property
    @pulumi.getter(name="expiryTimestamp")
    def expiry_timestamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiry_timestamp")

    @expiry_timestamp.setter
    def expiry_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry_timestamp", value)

    @property
    @pulumi.getter(name="remindBeforeInDays")
    def remind_before_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remind_before_in_days")

    @remind_before_in_days.setter
    def remind_before_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remind_before_in_days", value)

    @property
    @pulumi.getter(name="userCreated")
    def user_created(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "user_created")

    @user_created.setter
    def user_created(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_created", value)


if not MYPY:
    class NdbDatabaseSnapshotLcmConfigPostDeleteCommandArgsDict(TypedDict):
        command: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseSnapshotLcmConfigPostDeleteCommandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseSnapshotLcmConfigPostDeleteCommandArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)


if not MYPY:
    class NdbDatabaseSnapshotLcmConfigPreDeleteCommandArgsDict(TypedDict):
        command: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseSnapshotLcmConfigPreDeleteCommandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseSnapshotLcmConfigPreDeleteCommandArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)


if not MYPY:
    class NdbDatabaseSnapshotLcmConfigRefreshDetailArgsDict(TypedDict):
        last_refresh_date: NotRequired[pulumi.Input[str]]
        next_refresh_date: NotRequired[pulumi.Input[str]]
        refresh_date_timezone: NotRequired[pulumi.Input[str]]
        refresh_in_days: NotRequired[pulumi.Input[int]]
        refresh_in_hours: NotRequired[pulumi.Input[int]]
        refresh_in_months: NotRequired[pulumi.Input[int]]
        refresh_time: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseSnapshotLcmConfigRefreshDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseSnapshotLcmConfigRefreshDetailArgs:
    def __init__(__self__, *,
                 last_refresh_date: Optional[pulumi.Input[str]] = None,
                 next_refresh_date: Optional[pulumi.Input[str]] = None,
                 refresh_date_timezone: Optional[pulumi.Input[str]] = None,
                 refresh_in_days: Optional[pulumi.Input[int]] = None,
                 refresh_in_hours: Optional[pulumi.Input[int]] = None,
                 refresh_in_months: Optional[pulumi.Input[int]] = None,
                 refresh_time: Optional[pulumi.Input[str]] = None):
        if last_refresh_date is not None:
            pulumi.set(__self__, "last_refresh_date", last_refresh_date)
        if next_refresh_date is not None:
            pulumi.set(__self__, "next_refresh_date", next_refresh_date)
        if refresh_date_timezone is not None:
            pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        if refresh_in_days is not None:
            pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        if refresh_in_hours is not None:
            pulumi.set(__self__, "refresh_in_hours", refresh_in_hours)
        if refresh_in_months is not None:
            pulumi.set(__self__, "refresh_in_months", refresh_in_months)
        if refresh_time is not None:
            pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="lastRefreshDate")
    def last_refresh_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_refresh_date")

    @last_refresh_date.setter
    def last_refresh_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_refresh_date", value)

    @property
    @pulumi.getter(name="nextRefreshDate")
    def next_refresh_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_refresh_date")

    @next_refresh_date.setter
    def next_refresh_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_refresh_date", value)

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_date_timezone")

    @refresh_date_timezone.setter
    def refresh_date_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_date_timezone", value)

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_in_days")

    @refresh_in_days.setter
    def refresh_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_in_days", value)

    @property
    @pulumi.getter(name="refreshInHours")
    def refresh_in_hours(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_in_hours")

    @refresh_in_hours.setter
    def refresh_in_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_in_hours", value)

    @property
    @pulumi.getter(name="refreshInMonths")
    def refresh_in_months(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_in_months")

    @refresh_in_months.setter
    def refresh_in_months(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_in_months", value)

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_time")

    @refresh_time.setter
    def refresh_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_time", value)


if not MYPY:
    class NdbDatabaseSnapshotPropertyArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        description of snapshot
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Snapshot name. Default value is era_manual_snapshot.
        """
        ref_id: NotRequired[pulumi.Input[str]]
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseSnapshotPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseSnapshotPropertyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: description of snapshot
        :param pulumi.Input[str] name: Snapshot name. Default value is era_manual_snapshot.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of snapshot
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Snapshot name. Default value is era_manual_snapshot.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseSnapshotTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseSnapshotTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseSnapshotTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbDatabaseTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseTimeMachineArgsDict(TypedDict):
        access_level: NotRequired[pulumi.Input[str]]
        clone: NotRequired[pulumi.Input[bool]]
        clones: NotRequired[pulumi.Input[str]]
        clustered: NotRequired[pulumi.Input[bool]]
        """
        - (Optional) If clustered database. Default: false
        """
        database: NotRequired[pulumi.Input[str]]
        database_id: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        date_modified: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        """
        - (Optional) The description
        """
        ea_status: NotRequired[pulumi.Input[str]]
        id: NotRequired[pulumi.Input[str]]
        metric: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) Name of the instance.
        """
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachinePropertyArgsDict']]]]
        """
        List of all the properties
        """
        schedule_id: NotRequired[pulumi.Input[str]]
        schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleArgsDict']]]]
        """
        - (Optional) schedule for snapshots
        """
        scope: NotRequired[pulumi.Input[str]]
        sla_id: NotRequired[pulumi.Input[str]]
        sla_update_in_progress: NotRequired[pulumi.Input[bool]]
        sla_update_metadata: NotRequired[pulumi.Input[str]]
        slas: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineSlaArgsDict']]]]
        source_nx_clusters: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        status: NotRequired[pulumi.Input[str]]
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineTagArgsDict']]]]
        """
        - (Optional) tags
        """
        type: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseTimeMachineArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimeMachineArgs:
    def __init__(__self__, *,
                 access_level: Optional[pulumi.Input[str]] = None,
                 clone: Optional[pulumi.Input[bool]] = None,
                 clones: Optional[pulumi.Input[str]] = None,
                 clustered: Optional[pulumi.Input[bool]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 database_id: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ea_status: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachinePropertyArgs']]]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleArgs']]]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 sla_id: Optional[pulumi.Input[str]] = None,
                 sla_update_in_progress: Optional[pulumi.Input[bool]] = None,
                 sla_update_metadata: Optional[pulumi.Input[str]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineSlaArgs']]]] = None,
                 source_nx_clusters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineTagArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] clustered: - (Optional) If clustered database. Default: false
        :param pulumi.Input[str] description: - (Optional) The description
        :param pulumi.Input[str] name: - (Required) Name of the instance.
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachinePropertyArgs']]] properties: List of all the properties
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleArgs']]] schedules: - (Optional) schedule for snapshots
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineTagArgs']]] tags: - (Optional) tags
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if clone is not None:
            pulumi.set(__self__, "clone", clone)
        if clones is not None:
            pulumi.set(__self__, "clones", clones)
        if clustered is not None:
            pulumi.set(__self__, "clustered", clustered)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ea_status is not None:
            pulumi.set(__self__, "ea_status", ea_status)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)
        if sla_update_in_progress is not None:
            pulumi.set(__self__, "sla_update_in_progress", sla_update_in_progress)
        if sla_update_metadata is not None:
            pulumi.set(__self__, "sla_update_metadata", sla_update_metadata)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if source_nx_clusters is not None:
            pulumi.set(__self__, "source_nx_clusters", source_nx_clusters)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_level")

    @access_level.setter
    def access_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_level", value)

    @property
    @pulumi.getter
    def clone(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "clone")

    @clone.setter
    def clone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "clone", value)

    @property
    @pulumi.getter
    def clones(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "clones")

    @clones.setter
    def clones(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clones", value)

    @property
    @pulumi.getter
    def clustered(self) -> Optional[pulumi.Input[bool]]:
        """
        - (Optional) If clustered database. Default: false
        """
        return pulumi.get(self, "clustered")

    @clustered.setter
    def clustered(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "clustered", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_id", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="eaStatus")
    def ea_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ea_status")

    @ea_status.setter
    def ea_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ea_status", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachinePropertyArgs']]]]:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachinePropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_id", value)

    @property
    @pulumi.getter
    def schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleArgs']]]]:
        """
        - (Optional) schedule for snapshots
        """
        return pulumi.get(self, "schedules")

    @schedules.setter
    def schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleArgs']]]]):
        pulumi.set(self, "schedules", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sla_id")

    @sla_id.setter
    def sla_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_id", value)

    @property
    @pulumi.getter(name="slaUpdateInProgress")
    def sla_update_in_progress(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sla_update_in_progress")

    @sla_update_in_progress.setter
    def sla_update_in_progress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sla_update_in_progress", value)

    @property
    @pulumi.getter(name="slaUpdateMetadata")
    def sla_update_metadata(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sla_update_metadata")

    @sla_update_metadata.setter
    def sla_update_metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_update_metadata", value)

    @property
    @pulumi.getter
    def slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineSlaArgs']]]]:
        return pulumi.get(self, "slas")

    @slas.setter
    def slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineSlaArgs']]]]):
        pulumi.set(self, "slas", value)

    @property
    @pulumi.getter(name="sourceNxClusters")
    def source_nx_clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "source_nx_clusters")

    @source_nx_clusters.setter
    def source_nx_clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_nx_clusters", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineTagArgs']]]]:
        """
        - (Optional) tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NdbDatabaseTimeMachinePropertyArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        - (Optional) The description
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) Name of the instance.
        """
        ref_id: NotRequired[pulumi.Input[str]]
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbDatabaseTimeMachinePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimeMachinePropertyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: - (Optional) The description
        :param pulumi.Input[str] name: - (Required) Name of the instance.
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseTimeMachineScheduleArgsDict(TypedDict):
        continuous_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleContinuousScheduleArgsDict']]]]
        daily_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleDailyScheduleArgsDict']]]]
        date_created: NotRequired[pulumi.Input[str]]
        date_modified: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        """
        - (Optional) The description
        """
        global_policy: NotRequired[pulumi.Input[bool]]
        id: NotRequired[pulumi.Input[str]]
        monthly_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleMonthlyScheduleArgsDict']]]]
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) Name of the instance.
        """
        owner_id: NotRequired[pulumi.Input[str]]
        quartely_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleQuartelyScheduleArgsDict']]]]
        reference_count: NotRequired[pulumi.Input[int]]
        snapshot_time_of_days: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleSnapshotTimeOfDayArgsDict']]]]
        start_time: NotRequired[pulumi.Input[str]]
        system_policy: NotRequired[pulumi.Input[bool]]
        time_zone: NotRequired[pulumi.Input[str]]
        unique_name: NotRequired[pulumi.Input[str]]
        weekly_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleWeeklyScheduleArgsDict']]]]
        yearly_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleYearlyScheduleArgsDict']]]]
elif False:
    NdbDatabaseTimeMachineScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimeMachineScheduleArgs:
    def __init__(__self__, *,
                 continuous_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleContinuousScheduleArgs']]]] = None,
                 daily_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleDailyScheduleArgs']]]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 global_policy: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 monthly_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleMonthlyScheduleArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 quartely_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleQuartelyScheduleArgs']]]] = None,
                 reference_count: Optional[pulumi.Input[int]] = None,
                 snapshot_time_of_days: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleSnapshotTimeOfDayArgs']]]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 system_policy: Optional[pulumi.Input[bool]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 unique_name: Optional[pulumi.Input[str]] = None,
                 weekly_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleWeeklyScheduleArgs']]]] = None,
                 yearly_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleYearlyScheduleArgs']]]] = None):
        """
        :param pulumi.Input[str] description: - (Optional) The description
        :param pulumi.Input[str] name: - (Required) Name of the instance.
        """
        if continuous_schedules is not None:
            pulumi.set(__self__, "continuous_schedules", continuous_schedules)
        if daily_schedules is not None:
            pulumi.set(__self__, "daily_schedules", daily_schedules)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if global_policy is not None:
            pulumi.set(__self__, "global_policy", global_policy)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_schedules is not None:
            pulumi.set(__self__, "monthly_schedules", monthly_schedules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if quartely_schedules is not None:
            pulumi.set(__self__, "quartely_schedules", quartely_schedules)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if snapshot_time_of_days is not None:
            pulumi.set(__self__, "snapshot_time_of_days", snapshot_time_of_days)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if system_policy is not None:
            pulumi.set(__self__, "system_policy", system_policy)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_schedules is not None:
            pulumi.set(__self__, "weekly_schedules", weekly_schedules)
        if yearly_schedules is not None:
            pulumi.set(__self__, "yearly_schedules", yearly_schedules)

    @property
    @pulumi.getter(name="continuousSchedules")
    def continuous_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleContinuousScheduleArgs']]]]:
        return pulumi.get(self, "continuous_schedules")

    @continuous_schedules.setter
    def continuous_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleContinuousScheduleArgs']]]]):
        pulumi.set(self, "continuous_schedules", value)

    @property
    @pulumi.getter(name="dailySchedules")
    def daily_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleDailyScheduleArgs']]]]:
        return pulumi.get(self, "daily_schedules")

    @daily_schedules.setter
    def daily_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleDailyScheduleArgs']]]]):
        pulumi.set(self, "daily_schedules", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="globalPolicy")
    def global_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_policy")

    @global_policy.setter
    def global_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_policy", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="monthlySchedules")
    def monthly_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleMonthlyScheduleArgs']]]]:
        return pulumi.get(self, "monthly_schedules")

    @monthly_schedules.setter
    def monthly_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleMonthlyScheduleArgs']]]]):
        pulumi.set(self, "monthly_schedules", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="quartelySchedules")
    def quartely_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleQuartelyScheduleArgs']]]]:
        return pulumi.get(self, "quartely_schedules")

    @quartely_schedules.setter
    def quartely_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleQuartelyScheduleArgs']]]]):
        pulumi.set(self, "quartely_schedules", value)

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reference_count")

    @reference_count.setter
    def reference_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reference_count", value)

    @property
    @pulumi.getter(name="snapshotTimeOfDays")
    def snapshot_time_of_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleSnapshotTimeOfDayArgs']]]]:
        return pulumi.get(self, "snapshot_time_of_days")

    @snapshot_time_of_days.setter
    def snapshot_time_of_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleSnapshotTimeOfDayArgs']]]]):
        pulumi.set(self, "snapshot_time_of_days", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="systemPolicy")
    def system_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "system_policy")

    @system_policy.setter
    def system_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "system_policy", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unique_name")

    @unique_name.setter
    def unique_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_name", value)

    @property
    @pulumi.getter(name="weeklySchedules")
    def weekly_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleWeeklyScheduleArgs']]]]:
        return pulumi.get(self, "weekly_schedules")

    @weekly_schedules.setter
    def weekly_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleWeeklyScheduleArgs']]]]):
        pulumi.set(self, "weekly_schedules", value)

    @property
    @pulumi.getter(name="yearlySchedules")
    def yearly_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleYearlyScheduleArgs']]]]:
        return pulumi.get(self, "yearly_schedules")

    @yearly_schedules.setter
    def yearly_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineScheduleYearlyScheduleArgs']]]]):
        pulumi.set(self, "yearly_schedules", value)


if not MYPY:
    class NdbDatabaseTimeMachineScheduleContinuousScheduleArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        log_backup_interval: NotRequired[pulumi.Input[int]]
        snapshots_per_day: NotRequired[pulumi.Input[int]]
elif False:
    NdbDatabaseTimeMachineScheduleContinuousScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimeMachineScheduleContinuousScheduleArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_backup_interval: Optional[pulumi.Input[int]] = None,
                 snapshots_per_day: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_backup_interval is not None:
            pulumi.set(__self__, "log_backup_interval", log_backup_interval)
        if snapshots_per_day is not None:
            pulumi.set(__self__, "snapshots_per_day", snapshots_per_day)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logBackupInterval")
    def log_backup_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "log_backup_interval")

    @log_backup_interval.setter
    def log_backup_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_backup_interval", value)

    @property
    @pulumi.getter(name="snapshotsPerDay")
    def snapshots_per_day(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "snapshots_per_day")

    @snapshots_per_day.setter
    def snapshots_per_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "snapshots_per_day", value)


if not MYPY:
    class NdbDatabaseTimeMachineScheduleDailyScheduleArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    NdbDatabaseTimeMachineScheduleDailyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimeMachineScheduleDailyScheduleArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbDatabaseTimeMachineScheduleMonthlyScheduleArgsDict(TypedDict):
        day_of_month: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    NdbDatabaseTimeMachineScheduleMonthlyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimeMachineScheduleMonthlyScheduleArgs:
    def __init__(__self__, *,
                 day_of_month: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbDatabaseTimeMachineScheduleQuartelyScheduleArgsDict(TypedDict):
        day_of_month: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
        start_month: NotRequired[pulumi.Input[str]]
        start_month_value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseTimeMachineScheduleQuartelyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimeMachineScheduleQuartelyScheduleArgs:
    def __init__(__self__, *,
                 day_of_month: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 start_month: Optional[pulumi.Input[str]] = None,
                 start_month_value: Optional[pulumi.Input[str]] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if start_month is not None:
            pulumi.set(__self__, "start_month", start_month)
        if start_month_value is not None:
            pulumi.set(__self__, "start_month_value", start_month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="startMonth")
    def start_month(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_month")

    @start_month.setter
    def start_month(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_month", value)

    @property
    @pulumi.getter(name="startMonthValue")
    def start_month_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_month_value")

    @start_month_value.setter
    def start_month_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_month_value", value)


if not MYPY:
    class NdbDatabaseTimeMachineScheduleSnapshotTimeOfDayArgsDict(TypedDict):
        extra: NotRequired[pulumi.Input[bool]]
        hours: NotRequired[pulumi.Input[int]]
        """
        - (Required) hours
        """
        minutes: NotRequired[pulumi.Input[int]]
        """
        - (Required) minutes
        """
        seconds: NotRequired[pulumi.Input[int]]
        """
        - (Required) seconds
        """
elif False:
    NdbDatabaseTimeMachineScheduleSnapshotTimeOfDayArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimeMachineScheduleSnapshotTimeOfDayArgs:
    def __init__(__self__, *,
                 extra: Optional[pulumi.Input[bool]] = None,
                 hours: Optional[pulumi.Input[int]] = None,
                 minutes: Optional[pulumi.Input[int]] = None,
                 seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] hours: - (Required) hours
        :param pulumi.Input[int] minutes: - (Required) minutes
        :param pulumi.Input[int] seconds: - (Required) seconds
        """
        if extra is not None:
            pulumi.set(__self__, "extra", extra)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def extra(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "extra")

    @extra.setter
    def extra(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extra", value)

    @property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input[int]]:
        """
        - (Required) hours
        """
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hours", value)

    @property
    @pulumi.getter
    def minutes(self) -> Optional[pulumi.Input[int]]:
        """
        - (Required) minutes
        """
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minutes", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        """
        - (Required) seconds
        """
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)


if not MYPY:
    class NdbDatabaseTimeMachineScheduleWeeklyScheduleArgsDict(TypedDict):
        day_of_week: NotRequired[pulumi.Input[str]]
        day_of_week_value: NotRequired[pulumi.Input[str]]
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    NdbDatabaseTimeMachineScheduleWeeklyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimeMachineScheduleWeeklyScheduleArgs:
    def __init__(__self__, *,
                 day_of_week: Optional[pulumi.Input[str]] = None,
                 day_of_week_value: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if day_of_week_value is not None:
            pulumi.set(__self__, "day_of_week_value", day_of_week_value)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week", value)

    @property
    @pulumi.getter(name="dayOfWeekValue")
    def day_of_week_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "day_of_week_value")

    @day_of_week_value.setter
    def day_of_week_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week_value", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbDatabaseTimeMachineScheduleYearlyScheduleArgsDict(TypedDict):
        day_of_month: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
        month: NotRequired[pulumi.Input[str]]
        """
        - (Required) month for snapshot
        """
        month_value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDatabaseTimeMachineScheduleYearlyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimeMachineScheduleYearlyScheduleArgs:
    def __init__(__self__, *,
                 day_of_month: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 month: Optional[pulumi.Input[str]] = None,
                 month_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] month: - (Required) month for snapshot
        """
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if month_value is not None:
            pulumi.set(__self__, "month_value", month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def month(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) month for snapshot
        """
        return pulumi.get(self, "month")

    @month.setter
    def month(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "month", value)

    @property
    @pulumi.getter(name="monthValue")
    def month_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "month_value")

    @month_value.setter
    def month_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "month_value", value)


if not MYPY:
    class NdbDatabaseTimeMachineSlaArgsDict(TypedDict):
        continuous_retention: NotRequired[pulumi.Input[int]]
        current_active_frequency: NotRequired[pulumi.Input[str]]
        daily_retention: NotRequired[pulumi.Input[int]]
        date_created: NotRequired[pulumi.Input[str]]
        date_modified: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        """
        - (Optional) The description
        """
        id: NotRequired[pulumi.Input[str]]
        monthly_retention: NotRequired[pulumi.Input[int]]
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) Name of the instance.
        """
        owner_id: NotRequired[pulumi.Input[str]]
        pitr_enabled: NotRequired[pulumi.Input[bool]]
        quarterly_retention: NotRequired[pulumi.Input[int]]
        reference_count: NotRequired[pulumi.Input[int]]
        system_sla: NotRequired[pulumi.Input[bool]]
        unique_name: NotRequired[pulumi.Input[str]]
        weekly_retention: NotRequired[pulumi.Input[int]]
        yearly_retention: NotRequired[pulumi.Input[int]]
elif False:
    NdbDatabaseTimeMachineSlaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimeMachineSlaArgs:
    def __init__(__self__, *,
                 continuous_retention: Optional[pulumi.Input[int]] = None,
                 current_active_frequency: Optional[pulumi.Input[str]] = None,
                 daily_retention: Optional[pulumi.Input[int]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 monthly_retention: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 pitr_enabled: Optional[pulumi.Input[bool]] = None,
                 quarterly_retention: Optional[pulumi.Input[int]] = None,
                 reference_count: Optional[pulumi.Input[int]] = None,
                 system_sla: Optional[pulumi.Input[bool]] = None,
                 unique_name: Optional[pulumi.Input[str]] = None,
                 weekly_retention: Optional[pulumi.Input[int]] = None,
                 yearly_retention: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] description: - (Optional) The description
        :param pulumi.Input[str] name: - (Required) Name of the instance.
        """
        if continuous_retention is not None:
            pulumi.set(__self__, "continuous_retention", continuous_retention)
        if current_active_frequency is not None:
            pulumi.set(__self__, "current_active_frequency", current_active_frequency)
        if daily_retention is not None:
            pulumi.set(__self__, "daily_retention", daily_retention)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_retention is not None:
            pulumi.set(__self__, "monthly_retention", monthly_retention)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if pitr_enabled is not None:
            pulumi.set(__self__, "pitr_enabled", pitr_enabled)
        if quarterly_retention is not None:
            pulumi.set(__self__, "quarterly_retention", quarterly_retention)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if system_sla is not None:
            pulumi.set(__self__, "system_sla", system_sla)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_retention is not None:
            pulumi.set(__self__, "weekly_retention", weekly_retention)
        if yearly_retention is not None:
            pulumi.set(__self__, "yearly_retention", yearly_retention)

    @property
    @pulumi.getter(name="continuousRetention")
    def continuous_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "continuous_retention")

    @continuous_retention.setter
    def continuous_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "continuous_retention", value)

    @property
    @pulumi.getter(name="currentActiveFrequency")
    def current_active_frequency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "current_active_frequency")

    @current_active_frequency.setter
    def current_active_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "current_active_frequency", value)

    @property
    @pulumi.getter(name="dailyRetention")
    def daily_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "daily_retention")

    @daily_retention.setter
    def daily_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "daily_retention", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="monthlyRetention")
    def monthly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "monthly_retention")

    @monthly_retention.setter
    def monthly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monthly_retention", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="pitrEnabled")
    def pitr_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pitr_enabled")

    @pitr_enabled.setter
    def pitr_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pitr_enabled", value)

    @property
    @pulumi.getter(name="quarterlyRetention")
    def quarterly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "quarterly_retention")

    @quarterly_retention.setter
    def quarterly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quarterly_retention", value)

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reference_count")

    @reference_count.setter
    def reference_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reference_count", value)

    @property
    @pulumi.getter(name="systemSla")
    def system_sla(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "system_sla")

    @system_sla.setter
    def system_sla(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "system_sla", value)

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unique_name")

    @unique_name.setter
    def unique_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_name", value)

    @property
    @pulumi.getter(name="weeklyRetention")
    def weekly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weekly_retention")

    @weekly_retention.setter
    def weekly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weekly_retention", value)

    @property
    @pulumi.getter(name="yearlyRetention")
    def yearly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "yearly_retention")

    @yearly_retention.setter
    def yearly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "yearly_retention", value)


if not MYPY:
    class NdbDatabaseTimeMachineTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbDatabaseTimeMachineTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimeMachineTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDatabaseTimemachineinfoArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        - (Required) name of time machine
        """
        schedule: pulumi.Input['NdbDatabaseTimemachineinfoScheduleArgsDict']
        """
        - (Optional) schedule for snapshots
        """
        autotunelogdrive: NotRequired[pulumi.Input[bool]]
        """
        - (Optional) enable auto tune log drive. Default: true
        """
        description: NotRequired[pulumi.Input[str]]
        """
        - (Optional) description of time machine
        """
        sla_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimemachineinfoSlaDetailArgsDict']]]]
        """
        -  (optional) SLA details for HA instance
        """
        slaid: NotRequired[pulumi.Input[str]]
        """
        - (Optional) SLA ID for single instance
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimemachineinfoTagArgsDict']]]]
        """
        - (Optional) tags
        """
elif False:
    NdbDatabaseTimemachineinfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimemachineinfoArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 schedule: pulumi.Input['NdbDatabaseTimemachineinfoScheduleArgs'],
                 autotunelogdrive: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 sla_details: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimemachineinfoSlaDetailArgs']]]] = None,
                 slaid: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimemachineinfoTagArgs']]]] = None):
        """
        :param pulumi.Input[str] name: - (Required) name of time machine
        :param pulumi.Input['NdbDatabaseTimemachineinfoScheduleArgs'] schedule: - (Optional) schedule for snapshots
        :param pulumi.Input[bool] autotunelogdrive: - (Optional) enable auto tune log drive. Default: true
        :param pulumi.Input[str] description: - (Optional) description of time machine
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimemachineinfoSlaDetailArgs']]] sla_details: -  (optional) SLA details for HA instance
        :param pulumi.Input[str] slaid: - (Optional) SLA ID for single instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimemachineinfoTagArgs']]] tags: - (Optional) tags
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schedule", schedule)
        if autotunelogdrive is not None:
            pulumi.set(__self__, "autotunelogdrive", autotunelogdrive)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if sla_details is not None:
            pulumi.set(__self__, "sla_details", sla_details)
        if slaid is not None:
            pulumi.set(__self__, "slaid", slaid)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Required) name of time machine
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input['NdbDatabaseTimemachineinfoScheduleArgs']:
        """
        - (Optional) schedule for snapshots
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input['NdbDatabaseTimemachineinfoScheduleArgs']):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def autotunelogdrive(self) -> Optional[pulumi.Input[bool]]:
        """
        - (Optional) enable auto tune log drive. Default: true
        """
        return pulumi.get(self, "autotunelogdrive")

    @autotunelogdrive.setter
    def autotunelogdrive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autotunelogdrive", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) description of time machine
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="slaDetails")
    def sla_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimemachineinfoSlaDetailArgs']]]]:
        """
        -  (optional) SLA details for HA instance
        """
        return pulumi.get(self, "sla_details")

    @sla_details.setter
    def sla_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimemachineinfoSlaDetailArgs']]]]):
        pulumi.set(self, "sla_details", value)

    @property
    @pulumi.getter
    def slaid(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) SLA ID for single instance
        """
        return pulumi.get(self, "slaid")

    @slaid.setter
    def slaid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slaid", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimemachineinfoTagArgs']]]]:
        """
        - (Optional) tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimemachineinfoTagArgs']]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class NdbDatabaseTimemachineinfoScheduleArgsDict(TypedDict):
        continuousschedule: NotRequired[pulumi.Input['NdbDatabaseTimemachineinfoScheduleContinuousscheduleArgsDict']]
        """
        - (Optional) snapshot freq and log config
        """
        monthlyschedule: NotRequired[pulumi.Input['NdbDatabaseTimemachineinfoScheduleMonthlyscheduleArgsDict']]
        """
        - (Optional) monthly snapshot config
        """
        quartelyschedule: NotRequired[pulumi.Input['NdbDatabaseTimemachineinfoScheduleQuartelyscheduleArgsDict']]
        """
        - (Optional) quaterly snapshot config
        """
        snapshottimeofday: NotRequired[pulumi.Input['NdbDatabaseTimemachineinfoScheduleSnapshottimeofdayArgsDict']]
        """
        - (Optional) daily snapshot config
        """
        weeklyschedule: NotRequired[pulumi.Input['NdbDatabaseTimemachineinfoScheduleWeeklyscheduleArgsDict']]
        """
        - (Optional) weekly snapshot config
        """
        yearlyschedule: NotRequired[pulumi.Input['NdbDatabaseTimemachineinfoScheduleYearlyscheduleArgsDict']]
        """
        - (Optional) yearly snapshot config
        """
elif False:
    NdbDatabaseTimemachineinfoScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimemachineinfoScheduleArgs:
    def __init__(__self__, *,
                 continuousschedule: Optional[pulumi.Input['NdbDatabaseTimemachineinfoScheduleContinuousscheduleArgs']] = None,
                 monthlyschedule: Optional[pulumi.Input['NdbDatabaseTimemachineinfoScheduleMonthlyscheduleArgs']] = None,
                 quartelyschedule: Optional[pulumi.Input['NdbDatabaseTimemachineinfoScheduleQuartelyscheduleArgs']] = None,
                 snapshottimeofday: Optional[pulumi.Input['NdbDatabaseTimemachineinfoScheduleSnapshottimeofdayArgs']] = None,
                 weeklyschedule: Optional[pulumi.Input['NdbDatabaseTimemachineinfoScheduleWeeklyscheduleArgs']] = None,
                 yearlyschedule: Optional[pulumi.Input['NdbDatabaseTimemachineinfoScheduleYearlyscheduleArgs']] = None):
        """
        :param pulumi.Input['NdbDatabaseTimemachineinfoScheduleContinuousscheduleArgs'] continuousschedule: - (Optional) snapshot freq and log config
        :param pulumi.Input['NdbDatabaseTimemachineinfoScheduleMonthlyscheduleArgs'] monthlyschedule: - (Optional) monthly snapshot config
        :param pulumi.Input['NdbDatabaseTimemachineinfoScheduleQuartelyscheduleArgs'] quartelyschedule: - (Optional) quaterly snapshot config
        :param pulumi.Input['NdbDatabaseTimemachineinfoScheduleSnapshottimeofdayArgs'] snapshottimeofday: - (Optional) daily snapshot config
        :param pulumi.Input['NdbDatabaseTimemachineinfoScheduleWeeklyscheduleArgs'] weeklyschedule: - (Optional) weekly snapshot config
        :param pulumi.Input['NdbDatabaseTimemachineinfoScheduleYearlyscheduleArgs'] yearlyschedule: - (Optional) yearly snapshot config
        """
        if continuousschedule is not None:
            pulumi.set(__self__, "continuousschedule", continuousschedule)
        if monthlyschedule is not None:
            pulumi.set(__self__, "monthlyschedule", monthlyschedule)
        if quartelyschedule is not None:
            pulumi.set(__self__, "quartelyschedule", quartelyschedule)
        if snapshottimeofday is not None:
            pulumi.set(__self__, "snapshottimeofday", snapshottimeofday)
        if weeklyschedule is not None:
            pulumi.set(__self__, "weeklyschedule", weeklyschedule)
        if yearlyschedule is not None:
            pulumi.set(__self__, "yearlyschedule", yearlyschedule)

    @property
    @pulumi.getter
    def continuousschedule(self) -> Optional[pulumi.Input['NdbDatabaseTimemachineinfoScheduleContinuousscheduleArgs']]:
        """
        - (Optional) snapshot freq and log config
        """
        return pulumi.get(self, "continuousschedule")

    @continuousschedule.setter
    def continuousschedule(self, value: Optional[pulumi.Input['NdbDatabaseTimemachineinfoScheduleContinuousscheduleArgs']]):
        pulumi.set(self, "continuousschedule", value)

    @property
    @pulumi.getter
    def monthlyschedule(self) -> Optional[pulumi.Input['NdbDatabaseTimemachineinfoScheduleMonthlyscheduleArgs']]:
        """
        - (Optional) monthly snapshot config
        """
        return pulumi.get(self, "monthlyschedule")

    @monthlyschedule.setter
    def monthlyschedule(self, value: Optional[pulumi.Input['NdbDatabaseTimemachineinfoScheduleMonthlyscheduleArgs']]):
        pulumi.set(self, "monthlyschedule", value)

    @property
    @pulumi.getter
    def quartelyschedule(self) -> Optional[pulumi.Input['NdbDatabaseTimemachineinfoScheduleQuartelyscheduleArgs']]:
        """
        - (Optional) quaterly snapshot config
        """
        return pulumi.get(self, "quartelyschedule")

    @quartelyschedule.setter
    def quartelyschedule(self, value: Optional[pulumi.Input['NdbDatabaseTimemachineinfoScheduleQuartelyscheduleArgs']]):
        pulumi.set(self, "quartelyschedule", value)

    @property
    @pulumi.getter
    def snapshottimeofday(self) -> Optional[pulumi.Input['NdbDatabaseTimemachineinfoScheduleSnapshottimeofdayArgs']]:
        """
        - (Optional) daily snapshot config
        """
        return pulumi.get(self, "snapshottimeofday")

    @snapshottimeofday.setter
    def snapshottimeofday(self, value: Optional[pulumi.Input['NdbDatabaseTimemachineinfoScheduleSnapshottimeofdayArgs']]):
        pulumi.set(self, "snapshottimeofday", value)

    @property
    @pulumi.getter
    def weeklyschedule(self) -> Optional[pulumi.Input['NdbDatabaseTimemachineinfoScheduleWeeklyscheduleArgs']]:
        """
        - (Optional) weekly snapshot config
        """
        return pulumi.get(self, "weeklyschedule")

    @weeklyschedule.setter
    def weeklyschedule(self, value: Optional[pulumi.Input['NdbDatabaseTimemachineinfoScheduleWeeklyscheduleArgs']]):
        pulumi.set(self, "weeklyschedule", value)

    @property
    @pulumi.getter
    def yearlyschedule(self) -> Optional[pulumi.Input['NdbDatabaseTimemachineinfoScheduleYearlyscheduleArgs']]:
        """
        - (Optional) yearly snapshot config
        """
        return pulumi.get(self, "yearlyschedule")

    @yearlyschedule.setter
    def yearlyschedule(self, value: Optional[pulumi.Input['NdbDatabaseTimemachineinfoScheduleYearlyscheduleArgs']]):
        pulumi.set(self, "yearlyschedule", value)


if not MYPY:
    class NdbDatabaseTimemachineinfoScheduleContinuousscheduleArgsDict(TypedDict):
        enabled: pulumi.Input[bool]
        """
        - (Required) to enable
        """
        logbackupinterval: pulumi.Input[int]
        """
        - (Required) log catchup interval for database
        """
        snapshotsperday: pulumi.Input[int]
        """
        - (Required) num of snapshots per day
        """
elif False:
    NdbDatabaseTimemachineinfoScheduleContinuousscheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimemachineinfoScheduleContinuousscheduleArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 logbackupinterval: pulumi.Input[int],
                 snapshotsperday: pulumi.Input[int]):
        """
        :param pulumi.Input[bool] enabled: - (Required) to enable
        :param pulumi.Input[int] logbackupinterval: - (Required) log catchup interval for database
        :param pulumi.Input[int] snapshotsperday: - (Required) num of snapshots per day
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "logbackupinterval", logbackupinterval)
        pulumi.set(__self__, "snapshotsperday", snapshotsperday)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        - (Required) to enable
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def logbackupinterval(self) -> pulumi.Input[int]:
        """
        - (Required) log catchup interval for database
        """
        return pulumi.get(self, "logbackupinterval")

    @logbackupinterval.setter
    def logbackupinterval(self, value: pulumi.Input[int]):
        pulumi.set(self, "logbackupinterval", value)

    @property
    @pulumi.getter
    def snapshotsperday(self) -> pulumi.Input[int]:
        """
        - (Required) num of snapshots per day
        """
        return pulumi.get(self, "snapshotsperday")

    @snapshotsperday.setter
    def snapshotsperday(self, value: pulumi.Input[int]):
        pulumi.set(self, "snapshotsperday", value)


if not MYPY:
    class NdbDatabaseTimemachineinfoScheduleMonthlyscheduleArgsDict(TypedDict):
        dayofmonth: pulumi.Input[int]
        """
        - (Required) day of month to take snapshot
        """
        enabled: pulumi.Input[bool]
        """
        - (Required) to enable
        """
elif False:
    NdbDatabaseTimemachineinfoScheduleMonthlyscheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimemachineinfoScheduleMonthlyscheduleArgs:
    def __init__(__self__, *,
                 dayofmonth: pulumi.Input[int],
                 enabled: pulumi.Input[bool]):
        """
        :param pulumi.Input[int] dayofmonth: - (Required) day of month to take snapshot
        :param pulumi.Input[bool] enabled: - (Required) to enable
        """
        pulumi.set(__self__, "dayofmonth", dayofmonth)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def dayofmonth(self) -> pulumi.Input[int]:
        """
        - (Required) day of month to take snapshot
        """
        return pulumi.get(self, "dayofmonth")

    @dayofmonth.setter
    def dayofmonth(self, value: pulumi.Input[int]):
        pulumi.set(self, "dayofmonth", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        - (Required) to enable
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbDatabaseTimemachineinfoScheduleQuartelyscheduleArgsDict(TypedDict):
        dayofmonth: pulumi.Input[int]
        """
        - (Required) month's day for snapshot
        """
        enabled: pulumi.Input[bool]
        """
        - (Required) to enable
        """
        startmonth: pulumi.Input[str]
        """
        - (Required) quarter start month
        """
elif False:
    NdbDatabaseTimemachineinfoScheduleQuartelyscheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimemachineinfoScheduleQuartelyscheduleArgs:
    def __init__(__self__, *,
                 dayofmonth: pulumi.Input[int],
                 enabled: pulumi.Input[bool],
                 startmonth: pulumi.Input[str]):
        """
        :param pulumi.Input[int] dayofmonth: - (Required) month's day for snapshot
        :param pulumi.Input[bool] enabled: - (Required) to enable
        :param pulumi.Input[str] startmonth: - (Required) quarter start month
        """
        pulumi.set(__self__, "dayofmonth", dayofmonth)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "startmonth", startmonth)

    @property
    @pulumi.getter
    def dayofmonth(self) -> pulumi.Input[int]:
        """
        - (Required) month's day for snapshot
        """
        return pulumi.get(self, "dayofmonth")

    @dayofmonth.setter
    def dayofmonth(self, value: pulumi.Input[int]):
        pulumi.set(self, "dayofmonth", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        - (Required) to enable
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def startmonth(self) -> pulumi.Input[str]:
        """
        - (Required) quarter start month
        """
        return pulumi.get(self, "startmonth")

    @startmonth.setter
    def startmonth(self, value: pulumi.Input[str]):
        pulumi.set(self, "startmonth", value)


if not MYPY:
    class NdbDatabaseTimemachineinfoScheduleSnapshottimeofdayArgsDict(TypedDict):
        hours: pulumi.Input[int]
        """
        - (Required) hours
        """
        minutes: pulumi.Input[int]
        """
        - (Required) minutes
        """
        seconds: pulumi.Input[int]
        """
        - (Required) seconds
        """
elif False:
    NdbDatabaseTimemachineinfoScheduleSnapshottimeofdayArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimemachineinfoScheduleSnapshottimeofdayArgs:
    def __init__(__self__, *,
                 hours: pulumi.Input[int],
                 minutes: pulumi.Input[int],
                 seconds: pulumi.Input[int]):
        """
        :param pulumi.Input[int] hours: - (Required) hours
        :param pulumi.Input[int] minutes: - (Required) minutes
        :param pulumi.Input[int] seconds: - (Required) seconds
        """
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)
        pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def hours(self) -> pulumi.Input[int]:
        """
        - (Required) hours
        """
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: pulumi.Input[int]):
        pulumi.set(self, "hours", value)

    @property
    @pulumi.getter
    def minutes(self) -> pulumi.Input[int]:
        """
        - (Required) minutes
        """
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "minutes", value)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[int]:
        """
        - (Required) seconds
        """
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "seconds", value)


if not MYPY:
    class NdbDatabaseTimemachineinfoScheduleWeeklyscheduleArgsDict(TypedDict):
        dayofweek: pulumi.Input[str]
        """
        - (Required) day of week to take snaphsot. Eg. "WEDNESDAY"
        """
        enabled: pulumi.Input[bool]
        """
        - (Required) to enable
        """
elif False:
    NdbDatabaseTimemachineinfoScheduleWeeklyscheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimemachineinfoScheduleWeeklyscheduleArgs:
    def __init__(__self__, *,
                 dayofweek: pulumi.Input[str],
                 enabled: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] dayofweek: - (Required) day of week to take snaphsot. Eg. "WEDNESDAY"
        :param pulumi.Input[bool] enabled: - (Required) to enable
        """
        pulumi.set(__self__, "dayofweek", dayofweek)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def dayofweek(self) -> pulumi.Input[str]:
        """
        - (Required) day of week to take snaphsot. Eg. "WEDNESDAY"
        """
        return pulumi.get(self, "dayofweek")

    @dayofweek.setter
    def dayofweek(self, value: pulumi.Input[str]):
        pulumi.set(self, "dayofweek", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        - (Required) to enable
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbDatabaseTimemachineinfoScheduleYearlyscheduleArgsDict(TypedDict):
        dayofmonth: pulumi.Input[int]
        """
        - (Required) day of month to take snapshot
        """
        enabled: pulumi.Input[bool]
        """
        - (Required) to enable
        """
        month: pulumi.Input[str]
        """
        - (Required) month for snapshot
        """
elif False:
    NdbDatabaseTimemachineinfoScheduleYearlyscheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimemachineinfoScheduleYearlyscheduleArgs:
    def __init__(__self__, *,
                 dayofmonth: pulumi.Input[int],
                 enabled: pulumi.Input[bool],
                 month: pulumi.Input[str]):
        """
        :param pulumi.Input[int] dayofmonth: - (Required) day of month to take snapshot
        :param pulumi.Input[bool] enabled: - (Required) to enable
        :param pulumi.Input[str] month: - (Required) month for snapshot
        """
        pulumi.set(__self__, "dayofmonth", dayofmonth)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "month", month)

    @property
    @pulumi.getter
    def dayofmonth(self) -> pulumi.Input[int]:
        """
        - (Required) day of month to take snapshot
        """
        return pulumi.get(self, "dayofmonth")

    @dayofmonth.setter
    def dayofmonth(self, value: pulumi.Input[int]):
        pulumi.set(self, "dayofmonth", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        - (Required) to enable
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def month(self) -> pulumi.Input[str]:
        """
        - (Required) month for snapshot
        """
        return pulumi.get(self, "month")

    @month.setter
    def month(self, value: pulumi.Input[str]):
        pulumi.set(self, "month", value)


if not MYPY:
    class NdbDatabaseTimemachineinfoSlaDetailArgsDict(TypedDict):
        primary_slas: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimemachineinfoSlaDetailPrimarySlaArgsDict']]]]
        """
        - (Required) primary sla details
        * `primary_sla.sla_id` :- (Required) sla id
        * `primary_sla.nx_cluster_ids` -: (Optioanl) cluster ids
        """
elif False:
    NdbDatabaseTimemachineinfoSlaDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimemachineinfoSlaDetailArgs:
    def __init__(__self__, *,
                 primary_slas: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimemachineinfoSlaDetailPrimarySlaArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimemachineinfoSlaDetailPrimarySlaArgs']]] primary_slas: - (Required) primary sla details
               * `primary_sla.sla_id` :- (Required) sla id
               * `primary_sla.nx_cluster_ids` -: (Optioanl) cluster ids
        """
        if primary_slas is not None:
            pulumi.set(__self__, "primary_slas", primary_slas)

    @property
    @pulumi.getter(name="primarySlas")
    def primary_slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimemachineinfoSlaDetailPrimarySlaArgs']]]]:
        """
        - (Required) primary sla details
        * `primary_sla.sla_id` :- (Required) sla id
        * `primary_sla.nx_cluster_ids` -: (Optioanl) cluster ids
        """
        return pulumi.get(self, "primary_slas")

    @primary_slas.setter
    def primary_slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimemachineinfoSlaDetailPrimarySlaArgs']]]]):
        pulumi.set(self, "primary_slas", value)


if not MYPY:
    class NdbDatabaseTimemachineinfoSlaDetailPrimarySlaArgsDict(TypedDict):
        sla_id: pulumi.Input[str]
        """
        description of SLA ID.
        """
        nx_cluster_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    NdbDatabaseTimemachineinfoSlaDetailPrimarySlaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimemachineinfoSlaDetailPrimarySlaArgs:
    def __init__(__self__, *,
                 sla_id: pulumi.Input[str],
                 nx_cluster_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] sla_id: description of SLA ID.
        """
        pulumi.set(__self__, "sla_id", sla_id)
        if nx_cluster_ids is not None:
            pulumi.set(__self__, "nx_cluster_ids", nx_cluster_ids)

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> pulumi.Input[str]:
        """
        description of SLA ID.
        """
        return pulumi.get(self, "sla_id")

    @sla_id.setter
    def sla_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sla_id", value)

    @property
    @pulumi.getter(name="nxClusterIds")
    def nx_cluster_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "nx_cluster_ids")

    @nx_cluster_ids.setter
    def nx_cluster_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nx_cluster_ids", value)


if not MYPY:
    class NdbDatabaseTimemachineinfoTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbDatabaseTimemachineinfoTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDatabaseTimemachineinfoTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDbserverVmCredentialArgsDict(TypedDict):
        password: pulumi.Input[str]
        username: pulumi.Input[str]
        label: NotRequired[pulumi.Input[str]]
elif False:
    NdbDbserverVmCredentialArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDbserverVmCredentialArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str],
                 label: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)


if not MYPY:
    class NdbDbserverVmMaintenanceTasksArgsDict(TypedDict):
        maintenance_window_id: NotRequired[pulumi.Input[str]]
        """
        Associate an existing maintenance window id. NDB starts OS patching or database patching as per the schedule defined in the maintenance window.
        """
        tasks: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbDbserverVmMaintenanceTasksTaskArgsDict']]]]
        """
        Tasks for the maintenance.
        * `tasks.task_type`: use this option if you want NDB to perform database patching or OS patching automatically. Supports [ OS_PATCHING, DB_PATCHING ].
        * `tasks.pre_command`: add pre (operating system and database patching) commands.
        * `tasks.post_command`:add post (operating system and database patching) commands.
        """
elif False:
    NdbDbserverVmMaintenanceTasksArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDbserverVmMaintenanceTasksArgs:
    def __init__(__self__, *,
                 maintenance_window_id: Optional[pulumi.Input[str]] = None,
                 tasks: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDbserverVmMaintenanceTasksTaskArgs']]]] = None):
        """
        :param pulumi.Input[str] maintenance_window_id: Associate an existing maintenance window id. NDB starts OS patching or database patching as per the schedule defined in the maintenance window.
        :param pulumi.Input[Sequence[pulumi.Input['NdbDbserverVmMaintenanceTasksTaskArgs']]] tasks: Tasks for the maintenance.
               * `tasks.task_type`: use this option if you want NDB to perform database patching or OS patching automatically. Supports [ OS_PATCHING, DB_PATCHING ].
               * `tasks.pre_command`: add pre (operating system and database patching) commands.
               * `tasks.post_command`:add post (operating system and database patching) commands.
        """
        if maintenance_window_id is not None:
            pulumi.set(__self__, "maintenance_window_id", maintenance_window_id)
        if tasks is not None:
            pulumi.set(__self__, "tasks", tasks)

    @property
    @pulumi.getter(name="maintenanceWindowId")
    def maintenance_window_id(self) -> Optional[pulumi.Input[str]]:
        """
        Associate an existing maintenance window id. NDB starts OS patching or database patching as per the schedule defined in the maintenance window.
        """
        return pulumi.get(self, "maintenance_window_id")

    @maintenance_window_id.setter
    def maintenance_window_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_window_id", value)

    @property
    @pulumi.getter
    def tasks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDbserverVmMaintenanceTasksTaskArgs']]]]:
        """
        Tasks for the maintenance.
        * `tasks.task_type`: use this option if you want NDB to perform database patching or OS patching automatically. Supports [ OS_PATCHING, DB_PATCHING ].
        * `tasks.pre_command`: add pre (operating system and database patching) commands.
        * `tasks.post_command`:add post (operating system and database patching) commands.
        """
        return pulumi.get(self, "tasks")

    @tasks.setter
    def tasks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDbserverVmMaintenanceTasksTaskArgs']]]]):
        pulumi.set(self, "tasks", value)


if not MYPY:
    class NdbDbserverVmMaintenanceTasksTaskArgsDict(TypedDict):
        post_command: NotRequired[pulumi.Input[str]]
        pre_command: NotRequired[pulumi.Input[str]]
        task_type: NotRequired[pulumi.Input[str]]
elif False:
    NdbDbserverVmMaintenanceTasksTaskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDbserverVmMaintenanceTasksTaskArgs:
    def __init__(__self__, *,
                 post_command: Optional[pulumi.Input[str]] = None,
                 pre_command: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        if post_command is not None:
            pulumi.set(__self__, "post_command", post_command)
        if pre_command is not None:
            pulumi.set(__self__, "pre_command", pre_command)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="postCommand")
    def post_command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "post_command")

    @post_command.setter
    def post_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_command", value)

    @property
    @pulumi.getter(name="preCommand")
    def pre_command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_command")

    @pre_command.setter
    def pre_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_command", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


if not MYPY:
    class NdbDbserverVmPostgresDatabaseArgsDict(TypedDict):
        vm_name: pulumi.Input[str]
        """
        name for the database server VM.
        """
        client_public_key: NotRequired[pulumi.Input[str]]
        """
        use SSH public keys to access the database server VM.
        """
elif False:
    NdbDbserverVmPostgresDatabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDbserverVmPostgresDatabaseArgs:
    def __init__(__self__, *,
                 vm_name: pulumi.Input[str],
                 client_public_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] vm_name: name for the database server VM.
        :param pulumi.Input[str] client_public_key: use SSH public keys to access the database server VM.
        """
        pulumi.set(__self__, "vm_name", vm_name)
        if client_public_key is not None:
            pulumi.set(__self__, "client_public_key", client_public_key)

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> pulumi.Input[str]:
        """
        name for the database server VM.
        """
        return pulumi.get(self, "vm_name")

    @vm_name.setter
    def vm_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vm_name", value)

    @property
    @pulumi.getter(name="clientPublicKey")
    def client_public_key(self) -> Optional[pulumi.Input[str]]:
        """
        use SSH public keys to access the database server VM.
        """
        return pulumi.get(self, "client_public_key")

    @client_public_key.setter
    def client_public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_public_key", value)


if not MYPY:
    class NdbDbserverVmPropertyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        name of the dbserver vm
        """
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDbserverVmPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDbserverVmPropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: name of the dbserver vm
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the dbserver vm
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbDbserverVmTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbDbserverVmTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbDbserverVmTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbLinkedDatabasesInfoArgsDict(TypedDict):
        infos: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbLinkedDatabasesInfoInfoArgsDict']]]]
        secure_info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    NdbLinkedDatabasesInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbLinkedDatabasesInfoArgs:
    def __init__(__self__, *,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['NdbLinkedDatabasesInfoInfoArgs']]]] = None,
                 secure_info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbLinkedDatabasesInfoInfoArgs']]]]:
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbLinkedDatabasesInfoInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "secure_info")

    @secure_info.setter
    def secure_info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secure_info", value)


if not MYPY:
    class NdbLinkedDatabasesInfoInfoArgsDict(TypedDict):
        created_by: NotRequired[pulumi.Input[str]]
elif False:
    NdbLinkedDatabasesInfoInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbLinkedDatabasesInfoInfoArgs:
    def __init__(__self__, *,
                 created_by: Optional[pulumi.Input[str]] = None):
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)


if not MYPY:
    class NdbMaintenanceTaskEntityTaskAssociationArgsDict(TypedDict):
        access_level: NotRequired[pulumi.Input[str]]
        """
        access level of tasks
        """
        date_created: NotRequired[pulumi.Input[str]]
        """
        created date of task
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        modified date of task
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description of maintenance window
        """
        entity: NotRequired[pulumi.Input[str]]
        entity_id: NotRequired[pulumi.Input[str]]
        """
        entity id
        """
        entity_type: NotRequired[pulumi.Input[str]]
        """
        type of the entity. i.e. DBSERVER
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of maintenance window
        """
        maintenance_window_id: NotRequired[pulumi.Input[str]]
        """
        maintenance window id which has to be associated
        """
        maintenance_window_owner_id: NotRequired[pulumi.Input[str]]
        """
        maintenance window owner id
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of of maintenance window
        """
        owner_id: NotRequired[pulumi.Input[str]]
        """
        owner id of task
        """
        payloads: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceTaskEntityTaskAssociationPayloadArgsDict']]]]
        """
        list of pre post commands of OS or DB task
        """
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceTaskEntityTaskAssociationPropertyArgsDict']]]]
        """
        properties of task
        """
        status: NotRequired[pulumi.Input[str]]
        """
        status of task
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceTaskEntityTaskAssociationTagArgsDict']]]]
        """
        tags of task
        """
        task_type: NotRequired[pulumi.Input[str]]
        """
        type of the task. OS or DB
        """
elif False:
    NdbMaintenanceTaskEntityTaskAssociationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbMaintenanceTaskEntityTaskAssociationArgs:
    def __init__(__self__, *,
                 access_level: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 entity: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 maintenance_window_id: Optional[pulumi.Input[str]] = None,
                 maintenance_window_owner_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 payloads: Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceTaskEntityTaskAssociationPayloadArgs']]]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceTaskEntityTaskAssociationPropertyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceTaskEntityTaskAssociationTagArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_level: access level of tasks
        :param pulumi.Input[str] date_created: created date of task
        :param pulumi.Input[str] date_modified: modified date of task
        :param pulumi.Input[str] description: description of maintenance window
        :param pulumi.Input[str] entity_id: entity id
        :param pulumi.Input[str] entity_type: type of the entity. i.e. DBSERVER
        :param pulumi.Input[str] id: id of maintenance window
        :param pulumi.Input[str] maintenance_window_id: maintenance window id which has to be associated
        :param pulumi.Input[str] maintenance_window_owner_id: maintenance window owner id
        :param pulumi.Input[str] name: name of of maintenance window
        :param pulumi.Input[str] owner_id: owner id of task
        :param pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceTaskEntityTaskAssociationPayloadArgs']]] payloads: list of pre post commands of OS or DB task
        :param pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceTaskEntityTaskAssociationPropertyArgs']]] properties: properties of task
        :param pulumi.Input[str] status: status of task
        :param pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceTaskEntityTaskAssociationTagArgs']]] tags: tags of task
        :param pulumi.Input[str] task_type: type of the task. OS or DB
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entity is not None:
            pulumi.set(__self__, "entity", entity)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if maintenance_window_id is not None:
            pulumi.set(__self__, "maintenance_window_id", maintenance_window_id)
        if maintenance_window_owner_id is not None:
            pulumi.set(__self__, "maintenance_window_owner_id", maintenance_window_owner_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if payloads is not None:
            pulumi.set(__self__, "payloads", payloads)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[pulumi.Input[str]]:
        """
        access level of tasks
        """
        return pulumi.get(self, "access_level")

    @access_level.setter
    def access_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_level", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        created date of task
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        modified date of task
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of maintenance window
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def entity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity")

    @entity.setter
    def entity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        entity id
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the entity. i.e. DBSERVER
        """
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of maintenance window
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="maintenanceWindowId")
    def maintenance_window_id(self) -> Optional[pulumi.Input[str]]:
        """
        maintenance window id which has to be associated
        """
        return pulumi.get(self, "maintenance_window_id")

    @maintenance_window_id.setter
    def maintenance_window_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_window_id", value)

    @property
    @pulumi.getter(name="maintenanceWindowOwnerId")
    def maintenance_window_owner_id(self) -> Optional[pulumi.Input[str]]:
        """
        maintenance window owner id
        """
        return pulumi.get(self, "maintenance_window_owner_id")

    @maintenance_window_owner_id.setter
    def maintenance_window_owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_window_owner_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of of maintenance window
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        """
        owner id of task
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter
    def payloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceTaskEntityTaskAssociationPayloadArgs']]]]:
        """
        list of pre post commands of OS or DB task
        """
        return pulumi.get(self, "payloads")

    @payloads.setter
    def payloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceTaskEntityTaskAssociationPayloadArgs']]]]):
        pulumi.set(self, "payloads", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceTaskEntityTaskAssociationPropertyArgs']]]]:
        """
        properties of task
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceTaskEntityTaskAssociationPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of task
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceTaskEntityTaskAssociationTagArgs']]]]:
        """
        tags of task
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceTaskEntityTaskAssociationTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the task. OS or DB
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


if not MYPY:
    class NdbMaintenanceTaskEntityTaskAssociationPayloadArgsDict(TypedDict):
        pre_post_commands: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommandArgsDict']]]]
        """
        Pre Post command of Task
        """
elif False:
    NdbMaintenanceTaskEntityTaskAssociationPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbMaintenanceTaskEntityTaskAssociationPayloadArgs:
    def __init__(__self__, *,
                 pre_post_commands: Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommandArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommandArgs']]] pre_post_commands: Pre Post command of Task
        """
        if pre_post_commands is not None:
            pulumi.set(__self__, "pre_post_commands", pre_post_commands)

    @property
    @pulumi.getter(name="prePostCommands")
    def pre_post_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommandArgs']]]]:
        """
        Pre Post command of Task
        """
        return pulumi.get(self, "pre_post_commands")

    @pre_post_commands.setter
    def pre_post_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommandArgs']]]]):
        pulumi.set(self, "pre_post_commands", value)


if not MYPY:
    class NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommandArgsDict(TypedDict):
        post_command: NotRequired[pulumi.Input[str]]
        """
        post command of task
        """
        pre_command: NotRequired[pulumi.Input[str]]
        """
        pre command of task
        """
elif False:
    NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommandArgs:
    def __init__(__self__, *,
                 post_command: Optional[pulumi.Input[str]] = None,
                 pre_command: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] post_command: post command of task
        :param pulumi.Input[str] pre_command: pre command of task
        """
        if post_command is not None:
            pulumi.set(__self__, "post_command", post_command)
        if pre_command is not None:
            pulumi.set(__self__, "pre_command", pre_command)

    @property
    @pulumi.getter(name="postCommand")
    def post_command(self) -> Optional[pulumi.Input[str]]:
        """
        post command of task
        """
        return pulumi.get(self, "post_command")

    @post_command.setter
    def post_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_command", value)

    @property
    @pulumi.getter(name="preCommand")
    def pre_command(self) -> Optional[pulumi.Input[str]]:
        """
        pre command of task
        """
        return pulumi.get(self, "pre_command")

    @pre_command.setter
    def pre_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_command", value)


if not MYPY:
    class NdbMaintenanceTaskEntityTaskAssociationPropertyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        name of of maintenance window
        """
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbMaintenanceTaskEntityTaskAssociationPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbMaintenanceTaskEntityTaskAssociationPropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: name of of maintenance window
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of of maintenance window
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbMaintenanceTaskEntityTaskAssociationTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        """
        entity id
        """
        entity_type: NotRequired[pulumi.Input[str]]
        """
        type of the entity. i.e. DBSERVER
        """
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbMaintenanceTaskEntityTaskAssociationTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbMaintenanceTaskEntityTaskAssociationTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] entity_id: entity id
        :param pulumi.Input[str] entity_type: type of the entity. i.e. DBSERVER
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        entity id
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the entity. i.e. DBSERVER
        """
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbMaintenanceTaskTaskArgsDict(TypedDict):
        post_command: NotRequired[pulumi.Input[str]]
        """
        command that you want to run after patching the OS/DB
        """
        pre_command: NotRequired[pulumi.Input[str]]
        """
        command that you want to run before patching the OS/DB
        """
        task_type: NotRequired[pulumi.Input[str]]
        """
        type of task. Supports [ "OS_PATCHING", "DB_PATCHING" ]
        """
elif False:
    NdbMaintenanceTaskTaskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbMaintenanceTaskTaskArgs:
    def __init__(__self__, *,
                 post_command: Optional[pulumi.Input[str]] = None,
                 pre_command: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] post_command: command that you want to run after patching the OS/DB
        :param pulumi.Input[str] pre_command: command that you want to run before patching the OS/DB
        :param pulumi.Input[str] task_type: type of task. Supports [ "OS_PATCHING", "DB_PATCHING" ]
        """
        if post_command is not None:
            pulumi.set(__self__, "post_command", post_command)
        if pre_command is not None:
            pulumi.set(__self__, "pre_command", pre_command)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="postCommand")
    def post_command(self) -> Optional[pulumi.Input[str]]:
        """
        command that you want to run after patching the OS/DB
        """
        return pulumi.get(self, "post_command")

    @post_command.setter
    def post_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_command", value)

    @property
    @pulumi.getter(name="preCommand")
    def pre_command(self) -> Optional[pulumi.Input[str]]:
        """
        command that you want to run before patching the OS/DB
        """
        return pulumi.get(self, "pre_command")

    @pre_command.setter
    def pre_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_command", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of task. Supports [ "OS_PATCHING", "DB_PATCHING" ]
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


if not MYPY:
    class NdbMaintenanceWindowEntityTaskAssocArgsDict(TypedDict):
        access_level: NotRequired[pulumi.Input[str]]
        """
        access level
        """
        date_created: NotRequired[pulumi.Input[str]]
        """
        created date of maintenance window
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        modified date of maintenance window
        """
        description: NotRequired[pulumi.Input[str]]
        """
        Description for maintenance window
        """
        entity: NotRequired[pulumi.Input[str]]
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        id: NotRequired[pulumi.Input[str]]
        maintenance_window_id: NotRequired[pulumi.Input[str]]
        maintenance_window_owner_id: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        """
        Name for the maintenance window.
        """
        owner_id: NotRequired[pulumi.Input[str]]
        """
        owner id of maintenance window
        """
        payloads: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceWindowEntityTaskAssocPayloadArgsDict']]]]
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceWindowEntityTaskAssocPropertyArgsDict']]]]
        """
        properties of maintenance window
        """
        status: NotRequired[pulumi.Input[str]]
        """
        status of maintennace window
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceWindowEntityTaskAssocTagArgsDict']]]]
        """
        tags of maintenance window
        """
        task_type: NotRequired[pulumi.Input[str]]
elif False:
    NdbMaintenanceWindowEntityTaskAssocArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbMaintenanceWindowEntityTaskAssocArgs:
    def __init__(__self__, *,
                 access_level: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 entity: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 maintenance_window_id: Optional[pulumi.Input[str]] = None,
                 maintenance_window_owner_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 payloads: Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceWindowEntityTaskAssocPayloadArgs']]]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceWindowEntityTaskAssocPropertyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceWindowEntityTaskAssocTagArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_level: access level
        :param pulumi.Input[str] date_created: created date of maintenance window
        :param pulumi.Input[str] date_modified: modified date of maintenance window
        :param pulumi.Input[str] description: Description for maintenance window
        :param pulumi.Input[str] name: Name for the maintenance window.
        :param pulumi.Input[str] owner_id: owner id of maintenance window
        :param pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceWindowEntityTaskAssocPropertyArgs']]] properties: properties of maintenance window
        :param pulumi.Input[str] status: status of maintennace window
        :param pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceWindowEntityTaskAssocTagArgs']]] tags: tags of maintenance window
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entity is not None:
            pulumi.set(__self__, "entity", entity)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if maintenance_window_id is not None:
            pulumi.set(__self__, "maintenance_window_id", maintenance_window_id)
        if maintenance_window_owner_id is not None:
            pulumi.set(__self__, "maintenance_window_owner_id", maintenance_window_owner_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if payloads is not None:
            pulumi.set(__self__, "payloads", payloads)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[pulumi.Input[str]]:
        """
        access level
        """
        return pulumi.get(self, "access_level")

    @access_level.setter
    def access_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_level", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        created date of maintenance window
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        modified date of maintenance window
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for maintenance window
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def entity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity")

    @entity.setter
    def entity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="maintenanceWindowId")
    def maintenance_window_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maintenance_window_id")

    @maintenance_window_id.setter
    def maintenance_window_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_window_id", value)

    @property
    @pulumi.getter(name="maintenanceWindowOwnerId")
    def maintenance_window_owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maintenance_window_owner_id")

    @maintenance_window_owner_id.setter
    def maintenance_window_owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_window_owner_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name for the maintenance window.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        """
        owner id of maintenance window
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter
    def payloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceWindowEntityTaskAssocPayloadArgs']]]]:
        return pulumi.get(self, "payloads")

    @payloads.setter
    def payloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceWindowEntityTaskAssocPayloadArgs']]]]):
        pulumi.set(self, "payloads", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceWindowEntityTaskAssocPropertyArgs']]]]:
        """
        properties of maintenance window
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceWindowEntityTaskAssocPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of maintennace window
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceWindowEntityTaskAssocTagArgs']]]]:
        """
        tags of maintenance window
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceWindowEntityTaskAssocTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


if not MYPY:
    class NdbMaintenanceWindowEntityTaskAssocPayloadArgsDict(TypedDict):
        pre_post_commands: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommandArgsDict']]]]
elif False:
    NdbMaintenanceWindowEntityTaskAssocPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbMaintenanceWindowEntityTaskAssocPayloadArgs:
    def __init__(__self__, *,
                 pre_post_commands: Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommandArgs']]]] = None):
        if pre_post_commands is not None:
            pulumi.set(__self__, "pre_post_commands", pre_post_commands)

    @property
    @pulumi.getter(name="prePostCommands")
    def pre_post_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommandArgs']]]]:
        return pulumi.get(self, "pre_post_commands")

    @pre_post_commands.setter
    def pre_post_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommandArgs']]]]):
        pulumi.set(self, "pre_post_commands", value)


if not MYPY:
    class NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommandArgsDict(TypedDict):
        post_command: NotRequired[pulumi.Input[str]]
        pre_command: NotRequired[pulumi.Input[str]]
elif False:
    NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommandArgs:
    def __init__(__self__, *,
                 post_command: Optional[pulumi.Input[str]] = None,
                 pre_command: Optional[pulumi.Input[str]] = None):
        if post_command is not None:
            pulumi.set(__self__, "post_command", post_command)
        if pre_command is not None:
            pulumi.set(__self__, "pre_command", pre_command)

    @property
    @pulumi.getter(name="postCommand")
    def post_command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "post_command")

    @post_command.setter
    def post_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_command", value)

    @property
    @pulumi.getter(name="preCommand")
    def pre_command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_command")

    @pre_command.setter
    def pre_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_command", value)


if not MYPY:
    class NdbMaintenanceWindowEntityTaskAssocPropertyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name for the maintenance window.
        """
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbMaintenanceWindowEntityTaskAssocPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbMaintenanceWindowEntityTaskAssocPropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name for the maintenance window.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name for the maintenance window.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbMaintenanceWindowEntityTaskAssocTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbMaintenanceWindowEntityTaskAssocTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbMaintenanceWindowEntityTaskAssocTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbMaintenanceWindowPropertyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name for the maintenance window.
        """
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbMaintenanceWindowPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbMaintenanceWindowPropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name for the maintenance window.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name for the maintenance window.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbMaintenanceWindowScheduleArgsDict(TypedDict):
        day_of_week: NotRequired[pulumi.Input[str]]
        """
        Day of the week to trigger maintenance window. Supports [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]
        """
        duration: NotRequired[pulumi.Input[int]]
        """
        duration in hours. Default is 2
        """
        hour: NotRequired[pulumi.Input[int]]
        minute: NotRequired[pulumi.Input[int]]
        recurrence: NotRequired[pulumi.Input[str]]
        """
        Supported values [ MONTHLY, WEEKLY ]
        """
        start_time: NotRequired[pulumi.Input[str]]
        """
        start time for maintenance window to trigger
        """
        threshold: NotRequired[pulumi.Input[str]]
        timezone: NotRequired[pulumi.Input[str]]
        """
        timezone . Default is Asia/Calcutta .
        """
        week_of_month: NotRequired[pulumi.Input[int]]
        """
        week of the month. Supports [1, 2, 3, 4] .
        """
elif False:
    NdbMaintenanceWindowScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbMaintenanceWindowScheduleArgs:
    def __init__(__self__, *,
                 day_of_week: Optional[pulumi.Input[str]] = None,
                 duration: Optional[pulumi.Input[int]] = None,
                 hour: Optional[pulumi.Input[int]] = None,
                 minute: Optional[pulumi.Input[int]] = None,
                 recurrence: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 threshold: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 week_of_month: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] day_of_week: Day of the week to trigger maintenance window. Supports [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]
        :param pulumi.Input[int] duration: duration in hours. Default is 2
        :param pulumi.Input[str] recurrence: Supported values [ MONTHLY, WEEKLY ]
        :param pulumi.Input[str] start_time: start time for maintenance window to trigger
        :param pulumi.Input[str] timezone: timezone . Default is Asia/Calcutta .
        :param pulumi.Input[int] week_of_month: week of the month. Supports [1, 2, 3, 4] .
        """
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if hour is not None:
            pulumi.set(__self__, "hour", hour)
        if minute is not None:
            pulumi.set(__self__, "minute", minute)
        if recurrence is not None:
            pulumi.set(__self__, "recurrence", recurrence)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if week_of_month is not None:
            pulumi.set(__self__, "week_of_month", week_of_month)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[pulumi.Input[str]]:
        """
        Day of the week to trigger maintenance window. Supports [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]
        """
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[int]]:
        """
        duration in hours. Default is 2
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def hour(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hour")

    @hour.setter
    def hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hour", value)

    @property
    @pulumi.getter
    def minute(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "minute")

    @minute.setter
    def minute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minute", value)

    @property
    @pulumi.getter
    def recurrence(self) -> Optional[pulumi.Input[str]]:
        """
        Supported values [ MONTHLY, WEEKLY ]
        """
        return pulumi.get(self, "recurrence")

    @recurrence.setter
    def recurrence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recurrence", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        start time for maintenance window to trigger
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        timezone . Default is Asia/Calcutta .
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="weekOfMonth")
    def week_of_month(self) -> Optional[pulumi.Input[int]]:
        """
        week of the month. Supports [1, 2, 3, 4] .
        """
        return pulumi.get(self, "week_of_month")

    @week_of_month.setter
    def week_of_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "week_of_month", value)


if not MYPY:
    class NdbMaintenanceWindowTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbMaintenanceWindowTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbMaintenanceWindowTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbNetworkIpPoolArgsDict(TypedDict):
        addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbNetworkIpPoolAddressArgsDict']]]]
        end_ip: NotRequired[pulumi.Input[str]]
        """
        ending IP address range for new database servers
        """
        id: NotRequired[pulumi.Input[str]]
        modified_by: NotRequired[pulumi.Input[str]]
        start_ip: NotRequired[pulumi.Input[str]]
        """
        starting IP address range for new database servers
        """
elif False:
    NdbNetworkIpPoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbNetworkIpPoolArgs:
    def __init__(__self__, *,
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input['NdbNetworkIpPoolAddressArgs']]]] = None,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 modified_by: Optional[pulumi.Input[str]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_ip: ending IP address range for new database servers
        :param pulumi.Input[str] start_ip: starting IP address range for new database servers
        """
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if modified_by is not None:
            pulumi.set(__self__, "modified_by", modified_by)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbNetworkIpPoolAddressArgs']]]]:
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbNetworkIpPoolAddressArgs']]]]):
        pulumi.set(self, "addresses", value)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        ending IP address range for new database servers
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "modified_by")

    @modified_by.setter
    def modified_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modified_by", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        starting IP address range for new database servers
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


if not MYPY:
    class NdbNetworkIpPoolAddressArgsDict(TypedDict):
        ip: NotRequired[pulumi.Input[str]]
        status: NotRequired[pulumi.Input[str]]
elif False:
    NdbNetworkIpPoolAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbNetworkIpPoolAddressArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class NdbNetworkPropertiesMapArgsDict(TypedDict):
        vlan_gateway: NotRequired[pulumi.Input[str]]
        vlan_primary_dns: NotRequired[pulumi.Input[str]]
        vlan_secondary_dns: NotRequired[pulumi.Input[str]]
        vlan_subnet_mask: NotRequired[pulumi.Input[str]]
elif False:
    NdbNetworkPropertiesMapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbNetworkPropertiesMapArgs:
    def __init__(__self__, *,
                 vlan_gateway: Optional[pulumi.Input[str]] = None,
                 vlan_primary_dns: Optional[pulumi.Input[str]] = None,
                 vlan_secondary_dns: Optional[pulumi.Input[str]] = None,
                 vlan_subnet_mask: Optional[pulumi.Input[str]] = None):
        if vlan_gateway is not None:
            pulumi.set(__self__, "vlan_gateway", vlan_gateway)
        if vlan_primary_dns is not None:
            pulumi.set(__self__, "vlan_primary_dns", vlan_primary_dns)
        if vlan_secondary_dns is not None:
            pulumi.set(__self__, "vlan_secondary_dns", vlan_secondary_dns)
        if vlan_subnet_mask is not None:
            pulumi.set(__self__, "vlan_subnet_mask", vlan_subnet_mask)

    @property
    @pulumi.getter(name="vlanGateway")
    def vlan_gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_gateway")

    @vlan_gateway.setter
    def vlan_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_gateway", value)

    @property
    @pulumi.getter(name="vlanPrimaryDns")
    def vlan_primary_dns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_primary_dns")

    @vlan_primary_dns.setter
    def vlan_primary_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_primary_dns", value)

    @property
    @pulumi.getter(name="vlanSecondaryDns")
    def vlan_secondary_dns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_secondary_dns")

    @vlan_secondary_dns.setter
    def vlan_secondary_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_secondary_dns", value)

    @property
    @pulumi.getter(name="vlanSubnetMask")
    def vlan_subnet_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_subnet_mask")

    @vlan_subnet_mask.setter
    def vlan_subnet_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_subnet_mask", value)


if not MYPY:
    class NdbNetworkPropertyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the vlan to be attached in NDB
        """
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbNetworkPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbNetworkPropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the vlan to be attached in NDB
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the vlan to be attached in NDB
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbProfileClusterAvailabilityArgsDict(TypedDict):
        date_created: NotRequired[pulumi.Input[str]]
        date_modified: NotRequired[pulumi.Input[str]]
        nx_cluster_id: NotRequired[pulumi.Input[str]]
        """
        cluster on which profile created
        """
        owner_id: NotRequired[pulumi.Input[str]]
        profile_id: NotRequired[pulumi.Input[str]]
        status: NotRequired[pulumi.Input[str]]
        """
        status of profile
        """
elif False:
    NdbProfileClusterAvailabilityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbProfileClusterAvailabilityArgs:
    def __init__(__self__, *,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 nx_cluster_id: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 profile_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] nx_cluster_id: cluster on which profile created
        :param pulumi.Input[str] status: status of profile
        """
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if nx_cluster_id is not None:
            pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if profile_id is not None:
            pulumi.set(__self__, "profile_id", profile_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        cluster on which profile created
        """
        return pulumi.get(self, "nx_cluster_id")

    @nx_cluster_id.setter
    def nx_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nx_cluster_id", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile_id")

    @profile_id.setter
    def profile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of profile
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class NdbProfileComputeProfileArgsDict(TypedDict):
        core_per_cpu: NotRequired[pulumi.Input[str]]
        """
        number of cores per vCPU for the database server VM.
        """
        cpus: NotRequired[pulumi.Input[str]]
        """
        number of vCPUs for the database server VM.
        """
        memory_size: NotRequired[pulumi.Input[str]]
        """
        amount of memory for the database server VM.
        """
elif False:
    NdbProfileComputeProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbProfileComputeProfileArgs:
    def __init__(__self__, *,
                 core_per_cpu: Optional[pulumi.Input[str]] = None,
                 cpus: Optional[pulumi.Input[str]] = None,
                 memory_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] core_per_cpu: number of cores per vCPU for the database server VM.
        :param pulumi.Input[str] cpus: number of vCPUs for the database server VM.
        :param pulumi.Input[str] memory_size: amount of memory for the database server VM.
        """
        if core_per_cpu is not None:
            pulumi.set(__self__, "core_per_cpu", core_per_cpu)
        if cpus is not None:
            pulumi.set(__self__, "cpus", cpus)
        if memory_size is not None:
            pulumi.set(__self__, "memory_size", memory_size)

    @property
    @pulumi.getter(name="corePerCpu")
    def core_per_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        number of cores per vCPU for the database server VM.
        """
        return pulumi.get(self, "core_per_cpu")

    @core_per_cpu.setter
    def core_per_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "core_per_cpu", value)

    @property
    @pulumi.getter
    def cpus(self) -> Optional[pulumi.Input[str]]:
        """
        number of vCPUs for the database server VM.
        """
        return pulumi.get(self, "cpus")

    @cpus.setter
    def cpus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpus", value)

    @property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> Optional[pulumi.Input[str]]:
        """
        amount of memory for the database server VM.
        """
        return pulumi.get(self, "memory_size")

    @memory_size.setter
    def memory_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_size", value)


if not MYPY:
    class NdbProfileDatabaseParameterProfileArgsDict(TypedDict):
        postgres_databases: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbProfileDatabaseParameterProfilePostgresDatabaseArgsDict']]]]
        """
        Database parameters suuported for postgress.
        * `postgres_database.max_connections`: (Optional) Determines the maximum number of concurrent connections to the database server. The default is set to 100
        * `postgres_database.max_replication_slots`: (Optional) Specifies the maximum number of replication slots that the server can support. The default is zero. wal_level must be set to archive or higher to allow replication slots to be used. Setting it to a lower value than the number of currently existing replication slots will prevent the server from starting.
        * `postgres_database.effective_io_concurrency`: (Optional) Sets the number of concurrent disk I/O operations that PostgreSQL expects can be executed simultaneously. Raising this value will increase the number of I/O operations that any individual PostgreSQL session attempts to initiate in parallel.
        * `postgres_database.timezone`: (Optional) Sets the time zone for displaying and interpreting time stamps. Defult is UTC .
        * `postgres_database.max_prepared_transactions`: (Optional) Sets the maximum number of transactions that can be in the prepared state simultaneously. Setting this parameter to zero (which is the default) disables the prepared-transaction feature.
        * `postgres_database.max_locks_per_transaction`: (Optional) This parameter controls the average number of object locks allocated for each transaction; individual transactions can lock more objects as long as the locks of all transactions fit in the lock table. Default is 64.
        * `postgres_database.max_wal_senders`: (Optional) Specifies the maximum number of concurrent connections from standby servers or streaming base backup clients (i.e., the maximum number of simultaneously running WAL sender processes). The default is 10.
        * `postgres_database.max_worker_processes`: (Optional) Sets the maximum number of background processes that the system can support. The default is 8.
        * `postgres_database.min_wal_size`: (Optional) As long as WAL disk usage stays below this setting, old WAL files are always recycled for future use at a checkpoint, rather than removed. This can be used to ensure that enough WAL space is reserved to handle spikes in WAL usage, for example when running large batch jobs. The default is 80 MB.
        * `postgres_database.max_wal_size`: (Optional) Maximum size to let the WAL grow to between automatic WAL checkpoints. The default is 1 GB
        * `postgres_database.checkpoint_timeout`: (Optional) Sets the maximum time between automatic WAL checkpoints . High Value gives Good Performance, but takes More Recovery Time, Reboot time. can reduce the I/O load on your system, especially when using large values for shared_buffers. Default is 5min
        * `postgres_database.autovacuum`: (Optional) Controls whether the server should run the autovacuum launcher daemon. This is on by default; however, track_counts must also be enabled for autovacuum to work.
        * `postgres_database.checkpoint_completion_target`: (Optional)
        Specifies the target of checkpoint completion, as a fraction of total time between checkpoints. Time spent flushing dirty buffers during checkpoint, as fraction of checkpoint interval . Formula - (checkpoint_timeout - 2min) / checkpoint_timeout. The default is 0.5.
        * `postgres_database.autovacuum_freeze_max_age`: (Optional) Age at which to autovacuum a table to prevent transaction ID wraparound. Default is 200000000
        * `postgres_database.autovacuum_vacuum_threshold`: (Optional) Min number of row updates before vacuum. Minimum number of tuple updates or deletes prior to vacuum. Take value in KB. Default is 50 .
        * `postgres_database.autovacuum_vacuum_scale_factor`: (Optional) Number of tuple updates or deletes prior to vacuum as a fraction of reltuples. Default is 0.2
        * `postgres_database.autovacuum_work_mem`: (Optional) Sets the maximum memory to be used by each autovacuum worker process. Unit is in KB. Default is -1
        * `postgres_database.autovacuum_max_workers`: (Optional) Sets the maximum number of simultaneously running autovacuum worker processes. Default is 3
        * `postgres_database.autovacuum_vacuum_cost_delay`: (Optional) Vacuum cost delay in milliseconds, for autovacuum. Specifies the cost delay value that will be used in automatic VACUUM operation. Default is 2ms
        * `postgres_database.wal_buffers`: (Optional)
        Sets the number of disk-page buffers in shared memory for WAL. The amount of shared memory used for WAL data that has not yet been written to disk. The default is -1.
        * `postgres_database.synchronous_commit`: (Optional) Sets the current transaction's synchronization level. Specifies whether transaction commit will wait for WAL records to be written to disk before the command returns a success indication to the client. Default is on.
        * `postgres_database.random_page_cost`: (Optional) Sets the planner's estimate of the cost of a nonsequentially fetched disk page. Sets the planner's estimate of the cost of a non-sequentially-fetched disk page. The default is 4.0.
        * `postgres_database.wal_keep_segments`: (Optional) Sets the number of WAL files held for standby servers, Specifies the minimum number of past log file segments kept in the pg_wal directory. Default is 700 .
        """
elif False:
    NdbProfileDatabaseParameterProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbProfileDatabaseParameterProfileArgs:
    def __init__(__self__, *,
                 postgres_databases: Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileDatabaseParameterProfilePostgresDatabaseArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['NdbProfileDatabaseParameterProfilePostgresDatabaseArgs']]] postgres_databases: Database parameters suuported for postgress.
               * `postgres_database.max_connections`: (Optional) Determines the maximum number of concurrent connections to the database server. The default is set to 100
               * `postgres_database.max_replication_slots`: (Optional) Specifies the maximum number of replication slots that the server can support. The default is zero. wal_level must be set to archive or higher to allow replication slots to be used. Setting it to a lower value than the number of currently existing replication slots will prevent the server from starting.
               * `postgres_database.effective_io_concurrency`: (Optional) Sets the number of concurrent disk I/O operations that PostgreSQL expects can be executed simultaneously. Raising this value will increase the number of I/O operations that any individual PostgreSQL session attempts to initiate in parallel.
               * `postgres_database.timezone`: (Optional) Sets the time zone for displaying and interpreting time stamps. Defult is UTC .
               * `postgres_database.max_prepared_transactions`: (Optional) Sets the maximum number of transactions that can be in the prepared state simultaneously. Setting this parameter to zero (which is the default) disables the prepared-transaction feature.
               * `postgres_database.max_locks_per_transaction`: (Optional) This parameter controls the average number of object locks allocated for each transaction; individual transactions can lock more objects as long as the locks of all transactions fit in the lock table. Default is 64.
               * `postgres_database.max_wal_senders`: (Optional) Specifies the maximum number of concurrent connections from standby servers or streaming base backup clients (i.e., the maximum number of simultaneously running WAL sender processes). The default is 10.
               * `postgres_database.max_worker_processes`: (Optional) Sets the maximum number of background processes that the system can support. The default is 8.
               * `postgres_database.min_wal_size`: (Optional) As long as WAL disk usage stays below this setting, old WAL files are always recycled for future use at a checkpoint, rather than removed. This can be used to ensure that enough WAL space is reserved to handle spikes in WAL usage, for example when running large batch jobs. The default is 80 MB.
               * `postgres_database.max_wal_size`: (Optional) Maximum size to let the WAL grow to between automatic WAL checkpoints. The default is 1 GB
               * `postgres_database.checkpoint_timeout`: (Optional) Sets the maximum time between automatic WAL checkpoints . High Value gives Good Performance, but takes More Recovery Time, Reboot time. can reduce the I/O load on your system, especially when using large values for shared_buffers. Default is 5min
               * `postgres_database.autovacuum`: (Optional) Controls whether the server should run the autovacuum launcher daemon. This is on by default; however, track_counts must also be enabled for autovacuum to work.
               * `postgres_database.checkpoint_completion_target`: (Optional)
               Specifies the target of checkpoint completion, as a fraction of total time between checkpoints. Time spent flushing dirty buffers during checkpoint, as fraction of checkpoint interval . Formula - (checkpoint_timeout - 2min) / checkpoint_timeout. The default is 0.5.
               * `postgres_database.autovacuum_freeze_max_age`: (Optional) Age at which to autovacuum a table to prevent transaction ID wraparound. Default is 200000000
               * `postgres_database.autovacuum_vacuum_threshold`: (Optional) Min number of row updates before vacuum. Minimum number of tuple updates or deletes prior to vacuum. Take value in KB. Default is 50 .
               * `postgres_database.autovacuum_vacuum_scale_factor`: (Optional) Number of tuple updates or deletes prior to vacuum as a fraction of reltuples. Default is 0.2
               * `postgres_database.autovacuum_work_mem`: (Optional) Sets the maximum memory to be used by each autovacuum worker process. Unit is in KB. Default is -1
               * `postgres_database.autovacuum_max_workers`: (Optional) Sets the maximum number of simultaneously running autovacuum worker processes. Default is 3
               * `postgres_database.autovacuum_vacuum_cost_delay`: (Optional) Vacuum cost delay in milliseconds, for autovacuum. Specifies the cost delay value that will be used in automatic VACUUM operation. Default is 2ms
               * `postgres_database.wal_buffers`: (Optional)
               Sets the number of disk-page buffers in shared memory for WAL. The amount of shared memory used for WAL data that has not yet been written to disk. The default is -1.
               * `postgres_database.synchronous_commit`: (Optional) Sets the current transaction's synchronization level. Specifies whether transaction commit will wait for WAL records to be written to disk before the command returns a success indication to the client. Default is on.
               * `postgres_database.random_page_cost`: (Optional) Sets the planner's estimate of the cost of a nonsequentially fetched disk page. Sets the planner's estimate of the cost of a non-sequentially-fetched disk page. The default is 4.0.
               * `postgres_database.wal_keep_segments`: (Optional) Sets the number of WAL files held for standby servers, Specifies the minimum number of past log file segments kept in the pg_wal directory. Default is 700 .
        """
        if postgres_databases is not None:
            pulumi.set(__self__, "postgres_databases", postgres_databases)

    @property
    @pulumi.getter(name="postgresDatabases")
    def postgres_databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileDatabaseParameterProfilePostgresDatabaseArgs']]]]:
        """
        Database parameters suuported for postgress.
        * `postgres_database.max_connections`: (Optional) Determines the maximum number of concurrent connections to the database server. The default is set to 100
        * `postgres_database.max_replication_slots`: (Optional) Specifies the maximum number of replication slots that the server can support. The default is zero. wal_level must be set to archive or higher to allow replication slots to be used. Setting it to a lower value than the number of currently existing replication slots will prevent the server from starting.
        * `postgres_database.effective_io_concurrency`: (Optional) Sets the number of concurrent disk I/O operations that PostgreSQL expects can be executed simultaneously. Raising this value will increase the number of I/O operations that any individual PostgreSQL session attempts to initiate in parallel.
        * `postgres_database.timezone`: (Optional) Sets the time zone for displaying and interpreting time stamps. Defult is UTC .
        * `postgres_database.max_prepared_transactions`: (Optional) Sets the maximum number of transactions that can be in the prepared state simultaneously. Setting this parameter to zero (which is the default) disables the prepared-transaction feature.
        * `postgres_database.max_locks_per_transaction`: (Optional) This parameter controls the average number of object locks allocated for each transaction; individual transactions can lock more objects as long as the locks of all transactions fit in the lock table. Default is 64.
        * `postgres_database.max_wal_senders`: (Optional) Specifies the maximum number of concurrent connections from standby servers or streaming base backup clients (i.e., the maximum number of simultaneously running WAL sender processes). The default is 10.
        * `postgres_database.max_worker_processes`: (Optional) Sets the maximum number of background processes that the system can support. The default is 8.
        * `postgres_database.min_wal_size`: (Optional) As long as WAL disk usage stays below this setting, old WAL files are always recycled for future use at a checkpoint, rather than removed. This can be used to ensure that enough WAL space is reserved to handle spikes in WAL usage, for example when running large batch jobs. The default is 80 MB.
        * `postgres_database.max_wal_size`: (Optional) Maximum size to let the WAL grow to between automatic WAL checkpoints. The default is 1 GB
        * `postgres_database.checkpoint_timeout`: (Optional) Sets the maximum time between automatic WAL checkpoints . High Value gives Good Performance, but takes More Recovery Time, Reboot time. can reduce the I/O load on your system, especially when using large values for shared_buffers. Default is 5min
        * `postgres_database.autovacuum`: (Optional) Controls whether the server should run the autovacuum launcher daemon. This is on by default; however, track_counts must also be enabled for autovacuum to work.
        * `postgres_database.checkpoint_completion_target`: (Optional)
        Specifies the target of checkpoint completion, as a fraction of total time between checkpoints. Time spent flushing dirty buffers during checkpoint, as fraction of checkpoint interval . Formula - (checkpoint_timeout - 2min) / checkpoint_timeout. The default is 0.5.
        * `postgres_database.autovacuum_freeze_max_age`: (Optional) Age at which to autovacuum a table to prevent transaction ID wraparound. Default is 200000000
        * `postgres_database.autovacuum_vacuum_threshold`: (Optional) Min number of row updates before vacuum. Minimum number of tuple updates or deletes prior to vacuum. Take value in KB. Default is 50 .
        * `postgres_database.autovacuum_vacuum_scale_factor`: (Optional) Number of tuple updates or deletes prior to vacuum as a fraction of reltuples. Default is 0.2
        * `postgres_database.autovacuum_work_mem`: (Optional) Sets the maximum memory to be used by each autovacuum worker process. Unit is in KB. Default is -1
        * `postgres_database.autovacuum_max_workers`: (Optional) Sets the maximum number of simultaneously running autovacuum worker processes. Default is 3
        * `postgres_database.autovacuum_vacuum_cost_delay`: (Optional) Vacuum cost delay in milliseconds, for autovacuum. Specifies the cost delay value that will be used in automatic VACUUM operation. Default is 2ms
        * `postgres_database.wal_buffers`: (Optional)
        Sets the number of disk-page buffers in shared memory for WAL. The amount of shared memory used for WAL data that has not yet been written to disk. The default is -1.
        * `postgres_database.synchronous_commit`: (Optional) Sets the current transaction's synchronization level. Specifies whether transaction commit will wait for WAL records to be written to disk before the command returns a success indication to the client. Default is on.
        * `postgres_database.random_page_cost`: (Optional) Sets the planner's estimate of the cost of a nonsequentially fetched disk page. Sets the planner's estimate of the cost of a non-sequentially-fetched disk page. The default is 4.0.
        * `postgres_database.wal_keep_segments`: (Optional) Sets the number of WAL files held for standby servers, Specifies the minimum number of past log file segments kept in the pg_wal directory. Default is 700 .
        """
        return pulumi.get(self, "postgres_databases")

    @postgres_databases.setter
    def postgres_databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileDatabaseParameterProfilePostgresDatabaseArgs']]]]):
        pulumi.set(self, "postgres_databases", value)


if not MYPY:
    class NdbProfileDatabaseParameterProfilePostgresDatabaseArgsDict(TypedDict):
        autovacuum: NotRequired[pulumi.Input[str]]
        autovacuum_freeze_max_age: NotRequired[pulumi.Input[str]]
        autovacuum_max_workers: NotRequired[pulumi.Input[str]]
        autovacuum_vacuum_cost_delay: NotRequired[pulumi.Input[str]]
        autovacuum_vacuum_scale_factor: NotRequired[pulumi.Input[str]]
        autovacuum_vacuum_threshold: NotRequired[pulumi.Input[str]]
        autovacuum_work_mem: NotRequired[pulumi.Input[str]]
        checkpoint_completion_target: NotRequired[pulumi.Input[str]]
        checkpoint_timeout: NotRequired[pulumi.Input[str]]
        effective_io_concurrency: NotRequired[pulumi.Input[str]]
        max_connections: NotRequired[pulumi.Input[str]]
        max_locks_per_transaction: NotRequired[pulumi.Input[str]]
        max_prepared_transactions: NotRequired[pulumi.Input[str]]
        max_replication_slots: NotRequired[pulumi.Input[str]]
        max_wal_senders: NotRequired[pulumi.Input[str]]
        max_wal_size: NotRequired[pulumi.Input[str]]
        max_worker_processes: NotRequired[pulumi.Input[str]]
        min_wal_size: NotRequired[pulumi.Input[str]]
        random_page_cost: NotRequired[pulumi.Input[str]]
        synchronous_commit: NotRequired[pulumi.Input[str]]
        timezone: NotRequired[pulumi.Input[str]]
        wal_buffers: NotRequired[pulumi.Input[str]]
        wal_keep_segments: NotRequired[pulumi.Input[str]]
elif False:
    NdbProfileDatabaseParameterProfilePostgresDatabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbProfileDatabaseParameterProfilePostgresDatabaseArgs:
    def __init__(__self__, *,
                 autovacuum: Optional[pulumi.Input[str]] = None,
                 autovacuum_freeze_max_age: Optional[pulumi.Input[str]] = None,
                 autovacuum_max_workers: Optional[pulumi.Input[str]] = None,
                 autovacuum_vacuum_cost_delay: Optional[pulumi.Input[str]] = None,
                 autovacuum_vacuum_scale_factor: Optional[pulumi.Input[str]] = None,
                 autovacuum_vacuum_threshold: Optional[pulumi.Input[str]] = None,
                 autovacuum_work_mem: Optional[pulumi.Input[str]] = None,
                 checkpoint_completion_target: Optional[pulumi.Input[str]] = None,
                 checkpoint_timeout: Optional[pulumi.Input[str]] = None,
                 effective_io_concurrency: Optional[pulumi.Input[str]] = None,
                 max_connections: Optional[pulumi.Input[str]] = None,
                 max_locks_per_transaction: Optional[pulumi.Input[str]] = None,
                 max_prepared_transactions: Optional[pulumi.Input[str]] = None,
                 max_replication_slots: Optional[pulumi.Input[str]] = None,
                 max_wal_senders: Optional[pulumi.Input[str]] = None,
                 max_wal_size: Optional[pulumi.Input[str]] = None,
                 max_worker_processes: Optional[pulumi.Input[str]] = None,
                 min_wal_size: Optional[pulumi.Input[str]] = None,
                 random_page_cost: Optional[pulumi.Input[str]] = None,
                 synchronous_commit: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 wal_buffers: Optional[pulumi.Input[str]] = None,
                 wal_keep_segments: Optional[pulumi.Input[str]] = None):
        if autovacuum is not None:
            pulumi.set(__self__, "autovacuum", autovacuum)
        if autovacuum_freeze_max_age is not None:
            pulumi.set(__self__, "autovacuum_freeze_max_age", autovacuum_freeze_max_age)
        if autovacuum_max_workers is not None:
            pulumi.set(__self__, "autovacuum_max_workers", autovacuum_max_workers)
        if autovacuum_vacuum_cost_delay is not None:
            pulumi.set(__self__, "autovacuum_vacuum_cost_delay", autovacuum_vacuum_cost_delay)
        if autovacuum_vacuum_scale_factor is not None:
            pulumi.set(__self__, "autovacuum_vacuum_scale_factor", autovacuum_vacuum_scale_factor)
        if autovacuum_vacuum_threshold is not None:
            pulumi.set(__self__, "autovacuum_vacuum_threshold", autovacuum_vacuum_threshold)
        if autovacuum_work_mem is not None:
            pulumi.set(__self__, "autovacuum_work_mem", autovacuum_work_mem)
        if checkpoint_completion_target is not None:
            pulumi.set(__self__, "checkpoint_completion_target", checkpoint_completion_target)
        if checkpoint_timeout is not None:
            pulumi.set(__self__, "checkpoint_timeout", checkpoint_timeout)
        if effective_io_concurrency is not None:
            pulumi.set(__self__, "effective_io_concurrency", effective_io_concurrency)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if max_locks_per_transaction is not None:
            pulumi.set(__self__, "max_locks_per_transaction", max_locks_per_transaction)
        if max_prepared_transactions is not None:
            pulumi.set(__self__, "max_prepared_transactions", max_prepared_transactions)
        if max_replication_slots is not None:
            pulumi.set(__self__, "max_replication_slots", max_replication_slots)
        if max_wal_senders is not None:
            pulumi.set(__self__, "max_wal_senders", max_wal_senders)
        if max_wal_size is not None:
            pulumi.set(__self__, "max_wal_size", max_wal_size)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if min_wal_size is not None:
            pulumi.set(__self__, "min_wal_size", min_wal_size)
        if random_page_cost is not None:
            pulumi.set(__self__, "random_page_cost", random_page_cost)
        if synchronous_commit is not None:
            pulumi.set(__self__, "synchronous_commit", synchronous_commit)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if wal_buffers is not None:
            pulumi.set(__self__, "wal_buffers", wal_buffers)
        if wal_keep_segments is not None:
            pulumi.set(__self__, "wal_keep_segments", wal_keep_segments)

    @property
    @pulumi.getter
    def autovacuum(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum")

    @autovacuum.setter
    def autovacuum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum", value)

    @property
    @pulumi.getter(name="autovacuumFreezeMaxAge")
    def autovacuum_freeze_max_age(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_freeze_max_age")

    @autovacuum_freeze_max_age.setter
    def autovacuum_freeze_max_age(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_freeze_max_age", value)

    @property
    @pulumi.getter(name="autovacuumMaxWorkers")
    def autovacuum_max_workers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_max_workers")

    @autovacuum_max_workers.setter
    def autovacuum_max_workers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_max_workers", value)

    @property
    @pulumi.getter(name="autovacuumVacuumCostDelay")
    def autovacuum_vacuum_cost_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_vacuum_cost_delay")

    @autovacuum_vacuum_cost_delay.setter
    def autovacuum_vacuum_cost_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_vacuum_cost_delay", value)

    @property
    @pulumi.getter(name="autovacuumVacuumScaleFactor")
    def autovacuum_vacuum_scale_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_vacuum_scale_factor")

    @autovacuum_vacuum_scale_factor.setter
    def autovacuum_vacuum_scale_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_vacuum_scale_factor", value)

    @property
    @pulumi.getter(name="autovacuumVacuumThreshold")
    def autovacuum_vacuum_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_vacuum_threshold")

    @autovacuum_vacuum_threshold.setter
    def autovacuum_vacuum_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_vacuum_threshold", value)

    @property
    @pulumi.getter(name="autovacuumWorkMem")
    def autovacuum_work_mem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autovacuum_work_mem")

    @autovacuum_work_mem.setter
    def autovacuum_work_mem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autovacuum_work_mem", value)

    @property
    @pulumi.getter(name="checkpointCompletionTarget")
    def checkpoint_completion_target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "checkpoint_completion_target")

    @checkpoint_completion_target.setter
    def checkpoint_completion_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checkpoint_completion_target", value)

    @property
    @pulumi.getter(name="checkpointTimeout")
    def checkpoint_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "checkpoint_timeout")

    @checkpoint_timeout.setter
    def checkpoint_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checkpoint_timeout", value)

    @property
    @pulumi.getter(name="effectiveIoConcurrency")
    def effective_io_concurrency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effective_io_concurrency")

    @effective_io_concurrency.setter
    def effective_io_concurrency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effective_io_concurrency", value)

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_connections")

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_connections", value)

    @property
    @pulumi.getter(name="maxLocksPerTransaction")
    def max_locks_per_transaction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_locks_per_transaction")

    @max_locks_per_transaction.setter
    def max_locks_per_transaction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_locks_per_transaction", value)

    @property
    @pulumi.getter(name="maxPreparedTransactions")
    def max_prepared_transactions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_prepared_transactions")

    @max_prepared_transactions.setter
    def max_prepared_transactions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_prepared_transactions", value)

    @property
    @pulumi.getter(name="maxReplicationSlots")
    def max_replication_slots(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_replication_slots")

    @max_replication_slots.setter
    def max_replication_slots(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_replication_slots", value)

    @property
    @pulumi.getter(name="maxWalSenders")
    def max_wal_senders(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_wal_senders")

    @max_wal_senders.setter
    def max_wal_senders(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_wal_senders", value)

    @property
    @pulumi.getter(name="maxWalSize")
    def max_wal_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_wal_size")

    @max_wal_size.setter
    def max_wal_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_wal_size", value)

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_worker_processes")

    @max_worker_processes.setter
    def max_worker_processes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_worker_processes", value)

    @property
    @pulumi.getter(name="minWalSize")
    def min_wal_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min_wal_size")

    @min_wal_size.setter
    def min_wal_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_wal_size", value)

    @property
    @pulumi.getter(name="randomPageCost")
    def random_page_cost(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "random_page_cost")

    @random_page_cost.setter
    def random_page_cost(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "random_page_cost", value)

    @property
    @pulumi.getter(name="synchronousCommit")
    def synchronous_commit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "synchronous_commit")

    @synchronous_commit.setter
    def synchronous_commit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "synchronous_commit", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="walBuffers")
    def wal_buffers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wal_buffers")

    @wal_buffers.setter
    def wal_buffers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wal_buffers", value)

    @property
    @pulumi.getter(name="walKeepSegments")
    def wal_keep_segments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wal_keep_segments")

    @wal_keep_segments.setter
    def wal_keep_segments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wal_keep_segments", value)


if not MYPY:
    class NdbProfileNetworkProfileArgsDict(TypedDict):
        topology: pulumi.Input[str]
        """
        Topology supported for network profile. Allowed values are "cluster" and "single"
        """
        postgres_databases: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbProfileNetworkProfilePostgresDatabaseArgsDict']]]]
        """
        Postgres Info to create network profile

        * `postgres_database.single_instance`: (Optional) Info for postgres database to create single instance network profile.
        * `postgres_database.single_instance.vlan_name`: (Required) specify the VLAN to provide the IP address used to connect the database from the public network.
        * `postgres_database.single_instance.enable_ip_address_selection`: (Optional) If Advanced Network Segmentation is enabled, then this vLAN needs to be a static vLAN and needs to be true.

        * `postgres_database.ha_instance`: (Optional) Info for craeting Network profile for HA instance
        * `postgres_database.ha_instance.vlan_name`: (Required) specify the VLANs for network
        * `postgres_database.ha_instance.cluster_name`: (Required) specify the cluster name associated with given VLANs
        * `postgres_database.ha_instance.cluster_id`: (Optional) specify the cluster ids associated with given VLANs
        * `postgres_database.ha_instance.num_of_clusters`: (Required) number of cluster attached to network profile
        """
        version_cluster_associations: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbProfileNetworkProfileVersionClusterAssociationArgsDict']]]]
        """
        cluster associated with VLAN. this is used with Single instance for postgres database.
        * `version_cluster_association.nx_cluster_id`: (Required) cluster id for associated VLAN.
        """
elif False:
    NdbProfileNetworkProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbProfileNetworkProfileArgs:
    def __init__(__self__, *,
                 topology: pulumi.Input[str],
                 postgres_databases: Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileNetworkProfilePostgresDatabaseArgs']]]] = None,
                 version_cluster_associations: Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileNetworkProfileVersionClusterAssociationArgs']]]] = None):
        """
        :param pulumi.Input[str] topology: Topology supported for network profile. Allowed values are "cluster" and "single"
        :param pulumi.Input[Sequence[pulumi.Input['NdbProfileNetworkProfilePostgresDatabaseArgs']]] postgres_databases: Postgres Info to create network profile
               
               * `postgres_database.single_instance`: (Optional) Info for postgres database to create single instance network profile.
               * `postgres_database.single_instance.vlan_name`: (Required) specify the VLAN to provide the IP address used to connect the database from the public network.
               * `postgres_database.single_instance.enable_ip_address_selection`: (Optional) If Advanced Network Segmentation is enabled, then this vLAN needs to be a static vLAN and needs to be true.
               
               * `postgres_database.ha_instance`: (Optional) Info for craeting Network profile for HA instance
               * `postgres_database.ha_instance.vlan_name`: (Required) specify the VLANs for network
               * `postgres_database.ha_instance.cluster_name`: (Required) specify the cluster name associated with given VLANs
               * `postgres_database.ha_instance.cluster_id`: (Optional) specify the cluster ids associated with given VLANs
               * `postgres_database.ha_instance.num_of_clusters`: (Required) number of cluster attached to network profile
        :param pulumi.Input[Sequence[pulumi.Input['NdbProfileNetworkProfileVersionClusterAssociationArgs']]] version_cluster_associations: cluster associated with VLAN. this is used with Single instance for postgres database.
               * `version_cluster_association.nx_cluster_id`: (Required) cluster id for associated VLAN.
        """
        pulumi.set(__self__, "topology", topology)
        if postgres_databases is not None:
            pulumi.set(__self__, "postgres_databases", postgres_databases)
        if version_cluster_associations is not None:
            pulumi.set(__self__, "version_cluster_associations", version_cluster_associations)

    @property
    @pulumi.getter
    def topology(self) -> pulumi.Input[str]:
        """
        Topology supported for network profile. Allowed values are "cluster" and "single"
        """
        return pulumi.get(self, "topology")

    @topology.setter
    def topology(self, value: pulumi.Input[str]):
        pulumi.set(self, "topology", value)

    @property
    @pulumi.getter(name="postgresDatabases")
    def postgres_databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileNetworkProfilePostgresDatabaseArgs']]]]:
        """
        Postgres Info to create network profile

        * `postgres_database.single_instance`: (Optional) Info for postgres database to create single instance network profile.
        * `postgres_database.single_instance.vlan_name`: (Required) specify the VLAN to provide the IP address used to connect the database from the public network.
        * `postgres_database.single_instance.enable_ip_address_selection`: (Optional) If Advanced Network Segmentation is enabled, then this vLAN needs to be a static vLAN and needs to be true.

        * `postgres_database.ha_instance`: (Optional) Info for craeting Network profile for HA instance
        * `postgres_database.ha_instance.vlan_name`: (Required) specify the VLANs for network
        * `postgres_database.ha_instance.cluster_name`: (Required) specify the cluster name associated with given VLANs
        * `postgres_database.ha_instance.cluster_id`: (Optional) specify the cluster ids associated with given VLANs
        * `postgres_database.ha_instance.num_of_clusters`: (Required) number of cluster attached to network profile
        """
        return pulumi.get(self, "postgres_databases")

    @postgres_databases.setter
    def postgres_databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileNetworkProfilePostgresDatabaseArgs']]]]):
        pulumi.set(self, "postgres_databases", value)

    @property
    @pulumi.getter(name="versionClusterAssociations")
    def version_cluster_associations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileNetworkProfileVersionClusterAssociationArgs']]]]:
        """
        cluster associated with VLAN. this is used with Single instance for postgres database.
        * `version_cluster_association.nx_cluster_id`: (Required) cluster id for associated VLAN.
        """
        return pulumi.get(self, "version_cluster_associations")

    @version_cluster_associations.setter
    def version_cluster_associations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileNetworkProfileVersionClusterAssociationArgs']]]]):
        pulumi.set(self, "version_cluster_associations", value)


if not MYPY:
    class NdbProfileNetworkProfilePostgresDatabaseArgsDict(TypedDict):
        ha_instances: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbProfileNetworkProfilePostgresDatabaseHaInstanceArgsDict']]]]
        single_instances: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbProfileNetworkProfilePostgresDatabaseSingleInstanceArgsDict']]]]
elif False:
    NdbProfileNetworkProfilePostgresDatabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbProfileNetworkProfilePostgresDatabaseArgs:
    def __init__(__self__, *,
                 ha_instances: Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileNetworkProfilePostgresDatabaseHaInstanceArgs']]]] = None,
                 single_instances: Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileNetworkProfilePostgresDatabaseSingleInstanceArgs']]]] = None):
        if ha_instances is not None:
            pulumi.set(__self__, "ha_instances", ha_instances)
        if single_instances is not None:
            pulumi.set(__self__, "single_instances", single_instances)

    @property
    @pulumi.getter(name="haInstances")
    def ha_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileNetworkProfilePostgresDatabaseHaInstanceArgs']]]]:
        return pulumi.get(self, "ha_instances")

    @ha_instances.setter
    def ha_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileNetworkProfilePostgresDatabaseHaInstanceArgs']]]]):
        pulumi.set(self, "ha_instances", value)

    @property
    @pulumi.getter(name="singleInstances")
    def single_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileNetworkProfilePostgresDatabaseSingleInstanceArgs']]]]:
        return pulumi.get(self, "single_instances")

    @single_instances.setter
    def single_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileNetworkProfilePostgresDatabaseSingleInstanceArgs']]]]):
        pulumi.set(self, "single_instances", value)


if not MYPY:
    class NdbProfileNetworkProfilePostgresDatabaseHaInstanceArgsDict(TypedDict):
        cluster_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        cluster_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        num_of_clusters: NotRequired[pulumi.Input[str]]
        vlan_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    NdbProfileNetworkProfilePostgresDatabaseHaInstanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbProfileNetworkProfilePostgresDatabaseHaInstanceArgs:
    def __init__(__self__, *,
                 cluster_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cluster_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 num_of_clusters: Optional[pulumi.Input[str]] = None,
                 vlan_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if cluster_ids is not None:
            pulumi.set(__self__, "cluster_ids", cluster_ids)
        if cluster_names is not None:
            pulumi.set(__self__, "cluster_names", cluster_names)
        if num_of_clusters is not None:
            pulumi.set(__self__, "num_of_clusters", num_of_clusters)
        if vlan_names is not None:
            pulumi.set(__self__, "vlan_names", vlan_names)

    @property
    @pulumi.getter(name="clusterIds")
    def cluster_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cluster_ids")

    @cluster_ids.setter
    def cluster_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cluster_ids", value)

    @property
    @pulumi.getter(name="clusterNames")
    def cluster_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cluster_names")

    @cluster_names.setter
    def cluster_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cluster_names", value)

    @property
    @pulumi.getter(name="numOfClusters")
    def num_of_clusters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "num_of_clusters")

    @num_of_clusters.setter
    def num_of_clusters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "num_of_clusters", value)

    @property
    @pulumi.getter(name="vlanNames")
    def vlan_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "vlan_names")

    @vlan_names.setter
    def vlan_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vlan_names", value)


if not MYPY:
    class NdbProfileNetworkProfilePostgresDatabaseSingleInstanceArgsDict(TypedDict):
        enable_ip_address_selection: NotRequired[pulumi.Input[str]]
        vlan_name: NotRequired[pulumi.Input[str]]
elif False:
    NdbProfileNetworkProfilePostgresDatabaseSingleInstanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbProfileNetworkProfilePostgresDatabaseSingleInstanceArgs:
    def __init__(__self__, *,
                 enable_ip_address_selection: Optional[pulumi.Input[str]] = None,
                 vlan_name: Optional[pulumi.Input[str]] = None):
        if enable_ip_address_selection is not None:
            pulumi.set(__self__, "enable_ip_address_selection", enable_ip_address_selection)
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="enableIpAddressSelection")
    def enable_ip_address_selection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_ip_address_selection")

    @enable_ip_address_selection.setter
    def enable_ip_address_selection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_ip_address_selection", value)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_name")

    @vlan_name.setter
    def vlan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_name", value)


if not MYPY:
    class NdbProfileNetworkProfileVersionClusterAssociationArgsDict(TypedDict):
        nx_cluster_id: pulumi.Input[str]
        """
        cluster on which profile created
        """
elif False:
    NdbProfileNetworkProfileVersionClusterAssociationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbProfileNetworkProfileVersionClusterAssociationArgs:
    def __init__(__self__, *,
                 nx_cluster_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] nx_cluster_id: cluster on which profile created
        """
        pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> pulumi.Input[str]:
        """
        cluster on which profile created
        """
        return pulumi.get(self, "nx_cluster_id")

    @nx_cluster_id.setter
    def nx_cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "nx_cluster_id", value)


if not MYPY:
    class NdbProfileSoftwareProfileArgsDict(TypedDict):
        topology: pulumi.Input[str]
        """
        Topology of software profile. Allowed values are "cluster" and "single"
        """
        available_cluster_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        specify Nutanix clusters where this profile is available.
        """
        postgres_databases: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbProfileSoftwareProfilePostgresDatabaseArgsDict']]]]
        """
        Software profile info about postgres database.
        * `postgres_database.source_dbserver_id`: source dbserver id where postgress software will be installed.
        * `postgres_database.base_profile_version_name`: name for the software profile version.
        * `postgres_database.base_profile_version_description`: description for the software profile version.
        * `postgres_database.os_notes`: a note to provide additional information about the operating system
        * `postgres_database.db_software_notes`: a note to provide additional information about the database software.
        """
elif False:
    NdbProfileSoftwareProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbProfileSoftwareProfileArgs:
    def __init__(__self__, *,
                 topology: pulumi.Input[str],
                 available_cluster_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 postgres_databases: Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileSoftwareProfilePostgresDatabaseArgs']]]] = None):
        """
        :param pulumi.Input[str] topology: Topology of software profile. Allowed values are "cluster" and "single"
        :param pulumi.Input[Sequence[pulumi.Input[str]]] available_cluster_ids: specify Nutanix clusters where this profile is available.
        :param pulumi.Input[Sequence[pulumi.Input['NdbProfileSoftwareProfilePostgresDatabaseArgs']]] postgres_databases: Software profile info about postgres database.
               * `postgres_database.source_dbserver_id`: source dbserver id where postgress software will be installed.
               * `postgres_database.base_profile_version_name`: name for the software profile version.
               * `postgres_database.base_profile_version_description`: description for the software profile version.
               * `postgres_database.os_notes`: a note to provide additional information about the operating system
               * `postgres_database.db_software_notes`: a note to provide additional information about the database software.
        """
        pulumi.set(__self__, "topology", topology)
        if available_cluster_ids is not None:
            pulumi.set(__self__, "available_cluster_ids", available_cluster_ids)
        if postgres_databases is not None:
            pulumi.set(__self__, "postgres_databases", postgres_databases)

    @property
    @pulumi.getter
    def topology(self) -> pulumi.Input[str]:
        """
        Topology of software profile. Allowed values are "cluster" and "single"
        """
        return pulumi.get(self, "topology")

    @topology.setter
    def topology(self, value: pulumi.Input[str]):
        pulumi.set(self, "topology", value)

    @property
    @pulumi.getter(name="availableClusterIds")
    def available_cluster_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        specify Nutanix clusters where this profile is available.
        """
        return pulumi.get(self, "available_cluster_ids")

    @available_cluster_ids.setter
    def available_cluster_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "available_cluster_ids", value)

    @property
    @pulumi.getter(name="postgresDatabases")
    def postgres_databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileSoftwareProfilePostgresDatabaseArgs']]]]:
        """
        Software profile info about postgres database.
        * `postgres_database.source_dbserver_id`: source dbserver id where postgress software will be installed.
        * `postgres_database.base_profile_version_name`: name for the software profile version.
        * `postgres_database.base_profile_version_description`: description for the software profile version.
        * `postgres_database.os_notes`: a note to provide additional information about the operating system
        * `postgres_database.db_software_notes`: a note to provide additional information about the database software.
        """
        return pulumi.get(self, "postgres_databases")

    @postgres_databases.setter
    def postgres_databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileSoftwareProfilePostgresDatabaseArgs']]]]):
        pulumi.set(self, "postgres_databases", value)


if not MYPY:
    class NdbProfileSoftwareProfilePostgresDatabaseArgsDict(TypedDict):
        base_profile_version_description: NotRequired[pulumi.Input[str]]
        base_profile_version_name: NotRequired[pulumi.Input[str]]
        db_software_notes: NotRequired[pulumi.Input[str]]
        os_notes: NotRequired[pulumi.Input[str]]
        source_dbserver_id: NotRequired[pulumi.Input[str]]
elif False:
    NdbProfileSoftwareProfilePostgresDatabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbProfileSoftwareProfilePostgresDatabaseArgs:
    def __init__(__self__, *,
                 base_profile_version_description: Optional[pulumi.Input[str]] = None,
                 base_profile_version_name: Optional[pulumi.Input[str]] = None,
                 db_software_notes: Optional[pulumi.Input[str]] = None,
                 os_notes: Optional[pulumi.Input[str]] = None,
                 source_dbserver_id: Optional[pulumi.Input[str]] = None):
        if base_profile_version_description is not None:
            pulumi.set(__self__, "base_profile_version_description", base_profile_version_description)
        if base_profile_version_name is not None:
            pulumi.set(__self__, "base_profile_version_name", base_profile_version_name)
        if db_software_notes is not None:
            pulumi.set(__self__, "db_software_notes", db_software_notes)
        if os_notes is not None:
            pulumi.set(__self__, "os_notes", os_notes)
        if source_dbserver_id is not None:
            pulumi.set(__self__, "source_dbserver_id", source_dbserver_id)

    @property
    @pulumi.getter(name="baseProfileVersionDescription")
    def base_profile_version_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "base_profile_version_description")

    @base_profile_version_description.setter
    def base_profile_version_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_profile_version_description", value)

    @property
    @pulumi.getter(name="baseProfileVersionName")
    def base_profile_version_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "base_profile_version_name")

    @base_profile_version_name.setter
    def base_profile_version_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_profile_version_name", value)

    @property
    @pulumi.getter(name="dbSoftwareNotes")
    def db_software_notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "db_software_notes")

    @db_software_notes.setter
    def db_software_notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_software_notes", value)

    @property
    @pulumi.getter(name="osNotes")
    def os_notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os_notes")

    @os_notes.setter
    def os_notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_notes", value)

    @property
    @pulumi.getter(name="sourceDbserverId")
    def source_dbserver_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_dbserver_id")

    @source_dbserver_id.setter
    def source_dbserver_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_dbserver_id", value)


if not MYPY:
    class NdbProfileVersionArgsDict(TypedDict):
        db_version: NotRequired[pulumi.Input[str]]
        deprecated: NotRequired[pulumi.Input[bool]]
        description: NotRequired[pulumi.Input[str]]
        """
        Description of profile
        """
        engine_type: NotRequired[pulumi.Input[str]]
        """
        Engine Type of database
        """
        id: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        """
        Name of profile
        """
        owner: NotRequired[pulumi.Input[str]]
        """
        owner  of profile
        """
        profile_id: NotRequired[pulumi.Input[str]]
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbProfileVersionPropertyArgsDict']]]]
        properties_map: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        published: NotRequired[pulumi.Input[bool]]
        """
        Publish for all users
        """
        status: NotRequired[pulumi.Input[str]]
        """
        status of profile
        """
        system_profile: NotRequired[pulumi.Input[bool]]
        topology: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        version: NotRequired[pulumi.Input[str]]
        version_cluster_associations: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbProfileVersionVersionClusterAssociationArgsDict']]]]
        """
        cluster associated with VLAN. this is used with Single instance for postgres database.
        * `version_cluster_association.nx_cluster_id`: (Required) cluster id for associated VLAN.
        """
elif False:
    NdbProfileVersionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbProfileVersionArgs:
    def __init__(__self__, *,
                 db_version: Optional[pulumi.Input[str]] = None,
                 deprecated: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 engine_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 profile_id: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileVersionPropertyArgs']]]] = None,
                 properties_map: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 published: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 system_profile: Optional[pulumi.Input[bool]] = None,
                 topology: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 version_cluster_associations: Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileVersionVersionClusterAssociationArgs']]]] = None):
        """
        :param pulumi.Input[str] description: Description of profile
        :param pulumi.Input[str] engine_type: Engine Type of database
        :param pulumi.Input[str] name: Name of profile
        :param pulumi.Input[str] owner: owner  of profile
        :param pulumi.Input[bool] published: Publish for all users
        :param pulumi.Input[str] status: status of profile
        :param pulumi.Input[Sequence[pulumi.Input['NdbProfileVersionVersionClusterAssociationArgs']]] version_cluster_associations: cluster associated with VLAN. this is used with Single instance for postgres database.
               * `version_cluster_association.nx_cluster_id`: (Required) cluster id for associated VLAN.
        """
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if deprecated is not None:
            pulumi.set(__self__, "deprecated", deprecated)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine_type is not None:
            pulumi.set(__self__, "engine_type", engine_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if profile_id is not None:
            pulumi.set(__self__, "profile_id", profile_id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if properties_map is not None:
            pulumi.set(__self__, "properties_map", properties_map)
        if published is not None:
            pulumi.set(__self__, "published", published)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_profile is not None:
            pulumi.set(__self__, "system_profile", system_profile)
        if topology is not None:
            pulumi.set(__self__, "topology", topology)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_cluster_associations is not None:
            pulumi.set(__self__, "version_cluster_associations", version_cluster_associations)

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "db_version")

    @db_version.setter
    def db_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_version", value)

    @property
    @pulumi.getter
    def deprecated(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "deprecated")

    @deprecated.setter
    def deprecated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deprecated", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of profile
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> Optional[pulumi.Input[str]]:
        """
        Engine Type of database
        """
        return pulumi.get(self, "engine_type")

    @engine_type.setter
    def engine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of profile
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        owner  of profile
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile_id")

    @profile_id.setter
    def profile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_id", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileVersionPropertyArgs']]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileVersionPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="propertiesMap")
    def properties_map(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties_map")

    @properties_map.setter
    def properties_map(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties_map", value)

    @property
    @pulumi.getter
    def published(self) -> Optional[pulumi.Input[bool]]:
        """
        Publish for all users
        """
        return pulumi.get(self, "published")

    @published.setter
    def published(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "published", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of profile
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="systemProfile")
    def system_profile(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "system_profile")

    @system_profile.setter
    def system_profile(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "system_profile", value)

    @property
    @pulumi.getter
    def topology(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology")

    @topology.setter
    def topology(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="versionClusterAssociations")
    def version_cluster_associations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileVersionVersionClusterAssociationArgs']]]]:
        """
        cluster associated with VLAN. this is used with Single instance for postgres database.
        * `version_cluster_association.nx_cluster_id`: (Required) cluster id for associated VLAN.
        """
        return pulumi.get(self, "version_cluster_associations")

    @version_cluster_associations.setter
    def version_cluster_associations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileVersionVersionClusterAssociationArgs']]]]):
        pulumi.set(self, "version_cluster_associations", value)


if not MYPY:
    class NdbProfileVersionPropertyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of profile
        """
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbProfileVersionPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbProfileVersionPropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of profile
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of profile
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbProfileVersionVersionClusterAssociationArgsDict(TypedDict):
        date_created: NotRequired[pulumi.Input[str]]
        date_modified: NotRequired[pulumi.Input[str]]
        nx_cluster_id: NotRequired[pulumi.Input[str]]
        """
        cluster on which profile created
        """
        optimized_for_provisioning: NotRequired[pulumi.Input[bool]]
        owner_id: NotRequired[pulumi.Input[str]]
        profile_version_id: NotRequired[pulumi.Input[str]]
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbProfileVersionVersionClusterAssociationPropertyArgsDict']]]]
        status: NotRequired[pulumi.Input[str]]
        """
        status of profile
        """
elif False:
    NdbProfileVersionVersionClusterAssociationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbProfileVersionVersionClusterAssociationArgs:
    def __init__(__self__, *,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 nx_cluster_id: Optional[pulumi.Input[str]] = None,
                 optimized_for_provisioning: Optional[pulumi.Input[bool]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 profile_version_id: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileVersionVersionClusterAssociationPropertyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] nx_cluster_id: cluster on which profile created
        :param pulumi.Input[str] status: status of profile
        """
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if nx_cluster_id is not None:
            pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        if optimized_for_provisioning is not None:
            pulumi.set(__self__, "optimized_for_provisioning", optimized_for_provisioning)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if profile_version_id is not None:
            pulumi.set(__self__, "profile_version_id", profile_version_id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        cluster on which profile created
        """
        return pulumi.get(self, "nx_cluster_id")

    @nx_cluster_id.setter
    def nx_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nx_cluster_id", value)

    @property
    @pulumi.getter(name="optimizedForProvisioning")
    def optimized_for_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optimized_for_provisioning")

    @optimized_for_provisioning.setter
    def optimized_for_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optimized_for_provisioning", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="profileVersionId")
    def profile_version_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile_version_id")

    @profile_version_id.setter
    def profile_version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_version_id", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileVersionVersionClusterAssociationPropertyArgs']]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbProfileVersionVersionClusterAssociationPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of profile
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class NdbProfileVersionVersionClusterAssociationPropertyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of profile
        """
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbProfileVersionVersionClusterAssociationPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbProfileVersionVersionClusterAssociationPropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of profile
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of profile
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbRegisterDatabaseActionargumentArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        - (Required) name of argument
        """
        value: pulumi.Input[str]
        """
        - (Required) value for argument
        """
elif False:
    NdbRegisterDatabaseActionargumentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseActionargumentArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: - (Required) name of argument
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Required) name of argument
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbRegisterDatabaseDatabaseNodeArgsDict(TypedDict):
        access_level: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        database_id: NotRequired[pulumi.Input[str]]
        database_status: NotRequired[pulumi.Input[str]]
        """
        status of database
        """
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        dbserver: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        dbserver_id: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        """
        description
        """
        id: NotRequired[pulumi.Input[str]]
        infos: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodeInfoArgsDict']]]]
        """
        info of instance
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        primary: NotRequired[pulumi.Input[bool]]
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodePropertyArgsDict']]]]
        """
        properties of database created
        """
        protection_domain_id: NotRequired[pulumi.Input[str]]
        protection_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodeProtectionDomainArgsDict']]]]
        software_installation_id: NotRequired[pulumi.Input[str]]
        status: NotRequired[pulumi.Input[str]]
        """
        status of instance
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodeTagArgsDict']]]]
        """
        tags
        """
elif False:
    NdbRegisterDatabaseDatabaseNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseDatabaseNodeArgs:
    def __init__(__self__, *,
                 access_level: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 database_id: Optional[pulumi.Input[str]] = None,
                 database_status: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 dbserver: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 dbserver_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodeInfoArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodePropertyArgs']]]] = None,
                 protection_domain_id: Optional[pulumi.Input[str]] = None,
                 protection_domains: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodeProtectionDomainArgs']]]] = None,
                 software_installation_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodeTagArgs']]]] = None):
        """
        :param pulumi.Input[str] database_status: status of database
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description
        :param pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodeInfoArgs']]] infos: info of instance
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodePropertyArgs']]] properties: properties of database created
        :param pulumi.Input[str] status: status of instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodeTagArgs']]] tags: tags
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if dbserver is not None:
            pulumi.set(__self__, "dbserver", dbserver)
        if dbserver_id is not None:
            pulumi.set(__self__, "dbserver_id", dbserver_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if protection_domain_id is not None:
            pulumi.set(__self__, "protection_domain_id", protection_domain_id)
        if protection_domains is not None:
            pulumi.set(__self__, "protection_domains", protection_domains)
        if software_installation_id is not None:
            pulumi.set(__self__, "software_installation_id", software_installation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "access_level")

    @access_level.setter
    def access_level(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "access_level", value)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_id", value)

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[pulumi.Input[str]]:
        """
        status of database
        """
        return pulumi.get(self, "database_status")

    @database_status.setter
    def database_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_status", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def dbserver(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "dbserver")

    @dbserver.setter
    def dbserver(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "dbserver", value)

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dbserver_id")

    @dbserver_id.setter
    def dbserver_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbserver_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodeInfoArgs']]]]:
        """
        info of instance
        """
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodeInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodePropertyArgs']]]]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodePropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="protectionDomainId")
    def protection_domain_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protection_domain_id")

    @protection_domain_id.setter
    def protection_domain_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_domain_id", value)

    @property
    @pulumi.getter(name="protectionDomains")
    def protection_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodeProtectionDomainArgs']]]]:
        return pulumi.get(self, "protection_domains")

    @protection_domains.setter
    def protection_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodeProtectionDomainArgs']]]]):
        pulumi.set(self, "protection_domains", value)

    @property
    @pulumi.getter(name="softwareInstallationId")
    def software_installation_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "software_installation_id")

    @software_installation_id.setter
    def software_installation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "software_installation_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodeTagArgs']]]]:
        """
        tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodeTagArgs']]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class NdbRegisterDatabaseDatabaseNodeInfoArgsDict(TypedDict):
        info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        info of instance
        """
        secure_info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    NdbRegisterDatabaseDatabaseNodeInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseDatabaseNodeInfoArgs:
    def __init__(__self__, *,
                 info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 secure_info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] info: info of instance
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        info of instance
        """
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "secure_info")

    @secure_info.setter
    def secure_info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secure_info", value)


if not MYPY:
    class NdbRegisterDatabaseDatabaseNodePropertyArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        description
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        ref_id: NotRequired[pulumi.Input[str]]
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbRegisterDatabaseDatabaseNodePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseDatabaseNodePropertyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: description
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbRegisterDatabaseDatabaseNodeProtectionDomainArgsDict(TypedDict):
        assoc_entities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        cloud_id: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description
        """
        era_created: NotRequired[pulumi.Input[bool]]
        id: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        owner_id: NotRequired[pulumi.Input[str]]
        primary_host: NotRequired[pulumi.Input[str]]
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodeProtectionDomainPropertyArgsDict']]]]
        """
        properties of database created
        """
        status: NotRequired[pulumi.Input[str]]
        """
        status of instance
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type of database
        """
elif False:
    NdbRegisterDatabaseDatabaseNodeProtectionDomainArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseDatabaseNodeProtectionDomainArgs:
    def __init__(__self__, *,
                 assoc_entities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cloud_id: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 era_created: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 primary_host: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodeProtectionDomainPropertyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodeProtectionDomainPropertyArgs']]] properties: properties of database created
        :param pulumi.Input[str] status: status of instance
        :param pulumi.Input[str] type: type of database
        """
        if assoc_entities is not None:
            pulumi.set(__self__, "assoc_entities", assoc_entities)
        if cloud_id is not None:
            pulumi.set(__self__, "cloud_id", cloud_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if era_created is not None:
            pulumi.set(__self__, "era_created", era_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if primary_host is not None:
            pulumi.set(__self__, "primary_host", primary_host)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assocEntities")
    def assoc_entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "assoc_entities")

    @assoc_entities.setter
    def assoc_entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "assoc_entities", value)

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_id")

    @cloud_id.setter
    def cloud_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_id", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="eraCreated")
    def era_created(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "era_created")

    @era_created.setter
    def era_created(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "era_created", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="primaryHost")
    def primary_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_host")

    @primary_host.setter
    def primary_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_host", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodeProtectionDomainPropertyArgs']]]]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseDatabaseNodeProtectionDomainPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type of database
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NdbRegisterDatabaseDatabaseNodeProtectionDomainPropertyArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        description
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        ref_id: NotRequired[pulumi.Input[str]]
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbRegisterDatabaseDatabaseNodeProtectionDomainPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseDatabaseNodeProtectionDomainPropertyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: description
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbRegisterDatabaseDatabaseNodeTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbRegisterDatabaseDatabaseNodeTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseDatabaseNodeTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbRegisterDatabaseInfoArgsDict(TypedDict):
        bpg_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigArgsDict']]]]
        secure_info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    NdbRegisterDatabaseInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseInfoArgs:
    def __init__(__self__, *,
                 bpg_configs: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigArgs']]]] = None,
                 secure_info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if bpg_configs is not None:
            pulumi.set(__self__, "bpg_configs", bpg_configs)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="bpgConfigs")
    def bpg_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigArgs']]]]:
        return pulumi.get(self, "bpg_configs")

    @bpg_configs.setter
    def bpg_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigArgs']]]]):
        pulumi.set(self, "bpg_configs", value)

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "secure_info")

    @secure_info.setter
    def secure_info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secure_info", value)


if not MYPY:
    class NdbRegisterDatabaseInfoBpgConfigArgsDict(TypedDict):
        bpg_db_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigBpgDbParamArgsDict']]]]
        storages: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigStorageArgsDict']]]]
        vm_properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigVmPropertyArgsDict']]]]
elif False:
    NdbRegisterDatabaseInfoBpgConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseInfoBpgConfigArgs:
    def __init__(__self__, *,
                 bpg_db_params: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigBpgDbParamArgs']]]] = None,
                 storages: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigStorageArgs']]]] = None,
                 vm_properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigVmPropertyArgs']]]] = None):
        if bpg_db_params is not None:
            pulumi.set(__self__, "bpg_db_params", bpg_db_params)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if vm_properties is not None:
            pulumi.set(__self__, "vm_properties", vm_properties)

    @property
    @pulumi.getter(name="bpgDbParams")
    def bpg_db_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigBpgDbParamArgs']]]]:
        return pulumi.get(self, "bpg_db_params")

    @bpg_db_params.setter
    def bpg_db_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigBpgDbParamArgs']]]]):
        pulumi.set(self, "bpg_db_params", value)

    @property
    @pulumi.getter
    def storages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigStorageArgs']]]]:
        return pulumi.get(self, "storages")

    @storages.setter
    def storages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigStorageArgs']]]]):
        pulumi.set(self, "storages", value)

    @property
    @pulumi.getter(name="vmProperties")
    def vm_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigVmPropertyArgs']]]]:
        return pulumi.get(self, "vm_properties")

    @vm_properties.setter
    def vm_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigVmPropertyArgs']]]]):
        pulumi.set(self, "vm_properties", value)


if not MYPY:
    class NdbRegisterDatabaseInfoBpgConfigBpgDbParamArgsDict(TypedDict):
        effective_cache_size: NotRequired[pulumi.Input[str]]
        maintenance_work_mem: NotRequired[pulumi.Input[str]]
        max_parallel_workers_per_gather: NotRequired[pulumi.Input[str]]
        max_worker_processes: NotRequired[pulumi.Input[str]]
        shared_buffers: NotRequired[pulumi.Input[str]]
        work_mem: NotRequired[pulumi.Input[str]]
elif False:
    NdbRegisterDatabaseInfoBpgConfigBpgDbParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseInfoBpgConfigBpgDbParamArgs:
    def __init__(__self__, *,
                 effective_cache_size: Optional[pulumi.Input[str]] = None,
                 maintenance_work_mem: Optional[pulumi.Input[str]] = None,
                 max_parallel_workers_per_gather: Optional[pulumi.Input[str]] = None,
                 max_worker_processes: Optional[pulumi.Input[str]] = None,
                 shared_buffers: Optional[pulumi.Input[str]] = None,
                 work_mem: Optional[pulumi.Input[str]] = None):
        if effective_cache_size is not None:
            pulumi.set(__self__, "effective_cache_size", effective_cache_size)
        if maintenance_work_mem is not None:
            pulumi.set(__self__, "maintenance_work_mem", maintenance_work_mem)
        if max_parallel_workers_per_gather is not None:
            pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if shared_buffers is not None:
            pulumi.set(__self__, "shared_buffers", shared_buffers)
        if work_mem is not None:
            pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="effectiveCacheSize")
    def effective_cache_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effective_cache_size")

    @effective_cache_size.setter
    def effective_cache_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effective_cache_size", value)

    @property
    @pulumi.getter(name="maintenanceWorkMem")
    def maintenance_work_mem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maintenance_work_mem")

    @maintenance_work_mem.setter
    def maintenance_work_mem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_work_mem", value)

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @max_parallel_workers_per_gather.setter
    def max_parallel_workers_per_gather(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_parallel_workers_per_gather", value)

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_worker_processes")

    @max_worker_processes.setter
    def max_worker_processes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_worker_processes", value)

    @property
    @pulumi.getter(name="sharedBuffers")
    def shared_buffers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shared_buffers")

    @shared_buffers.setter
    def shared_buffers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shared_buffers", value)

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "work_mem")

    @work_mem.setter
    def work_mem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_mem", value)


if not MYPY:
    class NdbRegisterDatabaseInfoBpgConfigStorageArgsDict(TypedDict):
        archive_storages: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorageArgsDict']]]]
        data_disks: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigStorageDataDiskArgsDict']]]]
        log_disks: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigStorageLogDiskArgsDict']]]]
elif False:
    NdbRegisterDatabaseInfoBpgConfigStorageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseInfoBpgConfigStorageArgs:
    def __init__(__self__, *,
                 archive_storages: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorageArgs']]]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigStorageDataDiskArgs']]]] = None,
                 log_disks: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigStorageLogDiskArgs']]]] = None):
        if archive_storages is not None:
            pulumi.set(__self__, "archive_storages", archive_storages)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if log_disks is not None:
            pulumi.set(__self__, "log_disks", log_disks)

    @property
    @pulumi.getter(name="archiveStorages")
    def archive_storages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorageArgs']]]]:
        return pulumi.get(self, "archive_storages")

    @archive_storages.setter
    def archive_storages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorageArgs']]]]):
        pulumi.set(self, "archive_storages", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigStorageDataDiskArgs']]]]:
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigStorageDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="logDisks")
    def log_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigStorageLogDiskArgs']]]]:
        return pulumi.get(self, "log_disks")

    @log_disks.setter
    def log_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseInfoBpgConfigStorageLogDiskArgs']]]]):
        pulumi.set(self, "log_disks", value)


if not MYPY:
    class NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorageArgsDict(TypedDict):
        size: NotRequired[pulumi.Input[float]]
elif False:
    NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorageArgs:
    def __init__(__self__, *,
                 size: Optional[pulumi.Input[float]] = None):
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "size", value)


if not MYPY:
    class NdbRegisterDatabaseInfoBpgConfigStorageDataDiskArgsDict(TypedDict):
        count: NotRequired[pulumi.Input[float]]
elif False:
    NdbRegisterDatabaseInfoBpgConfigStorageDataDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseInfoBpgConfigStorageDataDiskArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[float]] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "count", value)


if not MYPY:
    class NdbRegisterDatabaseInfoBpgConfigStorageLogDiskArgsDict(TypedDict):
        count: NotRequired[pulumi.Input[float]]
        size: NotRequired[pulumi.Input[float]]
elif False:
    NdbRegisterDatabaseInfoBpgConfigStorageLogDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseInfoBpgConfigStorageLogDiskArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[float]] = None,
                 size: Optional[pulumi.Input[float]] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "size", value)


if not MYPY:
    class NdbRegisterDatabaseInfoBpgConfigVmPropertyArgsDict(TypedDict):
        dirty_background_ratio: NotRequired[pulumi.Input[float]]
        dirty_expire_centisecs: NotRequired[pulumi.Input[float]]
        dirty_ratio: NotRequired[pulumi.Input[float]]
        dirty_writeback_centisecs: NotRequired[pulumi.Input[float]]
        nr_hugepages: NotRequired[pulumi.Input[float]]
        overcommit_memory: NotRequired[pulumi.Input[float]]
        swappiness: NotRequired[pulumi.Input[float]]
elif False:
    NdbRegisterDatabaseInfoBpgConfigVmPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseInfoBpgConfigVmPropertyArgs:
    def __init__(__self__, *,
                 dirty_background_ratio: Optional[pulumi.Input[float]] = None,
                 dirty_expire_centisecs: Optional[pulumi.Input[float]] = None,
                 dirty_ratio: Optional[pulumi.Input[float]] = None,
                 dirty_writeback_centisecs: Optional[pulumi.Input[float]] = None,
                 nr_hugepages: Optional[pulumi.Input[float]] = None,
                 overcommit_memory: Optional[pulumi.Input[float]] = None,
                 swappiness: Optional[pulumi.Input[float]] = None):
        if dirty_background_ratio is not None:
            pulumi.set(__self__, "dirty_background_ratio", dirty_background_ratio)
        if dirty_expire_centisecs is not None:
            pulumi.set(__self__, "dirty_expire_centisecs", dirty_expire_centisecs)
        if dirty_ratio is not None:
            pulumi.set(__self__, "dirty_ratio", dirty_ratio)
        if dirty_writeback_centisecs is not None:
            pulumi.set(__self__, "dirty_writeback_centisecs", dirty_writeback_centisecs)
        if nr_hugepages is not None:
            pulumi.set(__self__, "nr_hugepages", nr_hugepages)
        if overcommit_memory is not None:
            pulumi.set(__self__, "overcommit_memory", overcommit_memory)
        if swappiness is not None:
            pulumi.set(__self__, "swappiness", swappiness)

    @property
    @pulumi.getter(name="dirtyBackgroundRatio")
    def dirty_background_ratio(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_background_ratio")

    @dirty_background_ratio.setter
    def dirty_background_ratio(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_background_ratio", value)

    @property
    @pulumi.getter(name="dirtyExpireCentisecs")
    def dirty_expire_centisecs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_expire_centisecs")

    @dirty_expire_centisecs.setter
    def dirty_expire_centisecs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_expire_centisecs", value)

    @property
    @pulumi.getter(name="dirtyRatio")
    def dirty_ratio(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_ratio")

    @dirty_ratio.setter
    def dirty_ratio(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_ratio", value)

    @property
    @pulumi.getter(name="dirtyWritebackCentisecs")
    def dirty_writeback_centisecs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_writeback_centisecs")

    @dirty_writeback_centisecs.setter
    def dirty_writeback_centisecs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_writeback_centisecs", value)

    @property
    @pulumi.getter(name="nrHugepages")
    def nr_hugepages(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "nr_hugepages")

    @nr_hugepages.setter
    def nr_hugepages(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "nr_hugepages", value)

    @property
    @pulumi.getter(name="overcommitMemory")
    def overcommit_memory(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "overcommit_memory")

    @overcommit_memory.setter
    def overcommit_memory(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "overcommit_memory", value)

    @property
    @pulumi.getter
    def swappiness(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "swappiness")

    @swappiness.setter
    def swappiness(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "swappiness", value)


if not MYPY:
    class NdbRegisterDatabaseLcmConfigArgsDict(TypedDict):
        expiry_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLcmConfigExpiryDetailArgsDict']]]]
        post_delete_commands: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLcmConfigPostDeleteCommandArgsDict']]]]
        pre_delete_commands: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLcmConfigPreDeleteCommandArgsDict']]]]
        refresh_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLcmConfigRefreshDetailArgsDict']]]]
elif False:
    NdbRegisterDatabaseLcmConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseLcmConfigArgs:
    def __init__(__self__, *,
                 expiry_details: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLcmConfigExpiryDetailArgs']]]] = None,
                 post_delete_commands: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLcmConfigPostDeleteCommandArgs']]]] = None,
                 pre_delete_commands: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLcmConfigPreDeleteCommandArgs']]]] = None,
                 refresh_details: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLcmConfigRefreshDetailArgs']]]] = None):
        if expiry_details is not None:
            pulumi.set(__self__, "expiry_details", expiry_details)
        if post_delete_commands is not None:
            pulumi.set(__self__, "post_delete_commands", post_delete_commands)
        if pre_delete_commands is not None:
            pulumi.set(__self__, "pre_delete_commands", pre_delete_commands)
        if refresh_details is not None:
            pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLcmConfigExpiryDetailArgs']]]]:
        return pulumi.get(self, "expiry_details")

    @expiry_details.setter
    def expiry_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLcmConfigExpiryDetailArgs']]]]):
        pulumi.set(self, "expiry_details", value)

    @property
    @pulumi.getter(name="postDeleteCommands")
    def post_delete_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLcmConfigPostDeleteCommandArgs']]]]:
        return pulumi.get(self, "post_delete_commands")

    @post_delete_commands.setter
    def post_delete_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLcmConfigPostDeleteCommandArgs']]]]):
        pulumi.set(self, "post_delete_commands", value)

    @property
    @pulumi.getter(name="preDeleteCommands")
    def pre_delete_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLcmConfigPreDeleteCommandArgs']]]]:
        return pulumi.get(self, "pre_delete_commands")

    @pre_delete_commands.setter
    def pre_delete_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLcmConfigPreDeleteCommandArgs']]]]):
        pulumi.set(self, "pre_delete_commands", value)

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLcmConfigRefreshDetailArgs']]]]:
        return pulumi.get(self, "refresh_details")

    @refresh_details.setter
    def refresh_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLcmConfigRefreshDetailArgs']]]]):
        pulumi.set(self, "refresh_details", value)


if not MYPY:
    class NdbRegisterDatabaseLcmConfigExpiryDetailArgsDict(TypedDict):
        delete_database: NotRequired[pulumi.Input[bool]]
        delete_time_machine: NotRequired[pulumi.Input[bool]]
        """
        - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        """
        delete_vm: NotRequired[pulumi.Input[bool]]
        effective_timestamp: NotRequired[pulumi.Input[str]]
        expire_in_days: NotRequired[pulumi.Input[int]]
        expiry_date_timezone: NotRequired[pulumi.Input[str]]
        expiry_timestamp: NotRequired[pulumi.Input[str]]
        remind_before_in_days: NotRequired[pulumi.Input[int]]
        user_created: NotRequired[pulumi.Input[bool]]
elif False:
    NdbRegisterDatabaseLcmConfigExpiryDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseLcmConfigExpiryDetailArgs:
    def __init__(__self__, *,
                 delete_database: Optional[pulumi.Input[bool]] = None,
                 delete_time_machine: Optional[pulumi.Input[bool]] = None,
                 delete_vm: Optional[pulumi.Input[bool]] = None,
                 effective_timestamp: Optional[pulumi.Input[str]] = None,
                 expire_in_days: Optional[pulumi.Input[int]] = None,
                 expiry_date_timezone: Optional[pulumi.Input[str]] = None,
                 expiry_timestamp: Optional[pulumi.Input[str]] = None,
                 remind_before_in_days: Optional[pulumi.Input[int]] = None,
                 user_created: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] delete_time_machine: - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        """
        if delete_database is not None:
            pulumi.set(__self__, "delete_database", delete_database)
        if delete_time_machine is not None:
            pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        if delete_vm is not None:
            pulumi.set(__self__, "delete_vm", delete_vm)
        if effective_timestamp is not None:
            pulumi.set(__self__, "effective_timestamp", effective_timestamp)
        if expire_in_days is not None:
            pulumi.set(__self__, "expire_in_days", expire_in_days)
        if expiry_date_timezone is not None:
            pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        if expiry_timestamp is not None:
            pulumi.set(__self__, "expiry_timestamp", expiry_timestamp)
        if remind_before_in_days is not None:
            pulumi.set(__self__, "remind_before_in_days", remind_before_in_days)
        if user_created is not None:
            pulumi.set(__self__, "user_created", user_created)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_database")

    @delete_database.setter
    def delete_database(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_database", value)

    @property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> Optional[pulumi.Input[bool]]:
        """
        - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        """
        return pulumi.get(self, "delete_time_machine")

    @delete_time_machine.setter
    def delete_time_machine(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_time_machine", value)

    @property
    @pulumi.getter(name="deleteVm")
    def delete_vm(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_vm")

    @delete_vm.setter
    def delete_vm(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_vm", value)

    @property
    @pulumi.getter(name="effectiveTimestamp")
    def effective_timestamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effective_timestamp")

    @effective_timestamp.setter
    def effective_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effective_timestamp", value)

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "expire_in_days")

    @expire_in_days.setter
    def expire_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expire_in_days", value)

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiry_date_timezone")

    @expiry_date_timezone.setter
    def expiry_date_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry_date_timezone", value)

    @property
    @pulumi.getter(name="expiryTimestamp")
    def expiry_timestamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiry_timestamp")

    @expiry_timestamp.setter
    def expiry_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry_timestamp", value)

    @property
    @pulumi.getter(name="remindBeforeInDays")
    def remind_before_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remind_before_in_days")

    @remind_before_in_days.setter
    def remind_before_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remind_before_in_days", value)

    @property
    @pulumi.getter(name="userCreated")
    def user_created(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "user_created")

    @user_created.setter
    def user_created(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_created", value)


if not MYPY:
    class NdbRegisterDatabaseLcmConfigPostDeleteCommandArgsDict(TypedDict):
        command: NotRequired[pulumi.Input[str]]
elif False:
    NdbRegisterDatabaseLcmConfigPostDeleteCommandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseLcmConfigPostDeleteCommandArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)


if not MYPY:
    class NdbRegisterDatabaseLcmConfigPreDeleteCommandArgsDict(TypedDict):
        command: NotRequired[pulumi.Input[str]]
elif False:
    NdbRegisterDatabaseLcmConfigPreDeleteCommandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseLcmConfigPreDeleteCommandArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)


if not MYPY:
    class NdbRegisterDatabaseLcmConfigRefreshDetailArgsDict(TypedDict):
        last_refresh_date: NotRequired[pulumi.Input[str]]
        next_refresh_date: NotRequired[pulumi.Input[str]]
        refresh_date_timezone: NotRequired[pulumi.Input[str]]
        refresh_in_days: NotRequired[pulumi.Input[int]]
        refresh_in_hours: NotRequired[pulumi.Input[int]]
        refresh_in_months: NotRequired[pulumi.Input[int]]
        refresh_time: NotRequired[pulumi.Input[str]]
elif False:
    NdbRegisterDatabaseLcmConfigRefreshDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseLcmConfigRefreshDetailArgs:
    def __init__(__self__, *,
                 last_refresh_date: Optional[pulumi.Input[str]] = None,
                 next_refresh_date: Optional[pulumi.Input[str]] = None,
                 refresh_date_timezone: Optional[pulumi.Input[str]] = None,
                 refresh_in_days: Optional[pulumi.Input[int]] = None,
                 refresh_in_hours: Optional[pulumi.Input[int]] = None,
                 refresh_in_months: Optional[pulumi.Input[int]] = None,
                 refresh_time: Optional[pulumi.Input[str]] = None):
        if last_refresh_date is not None:
            pulumi.set(__self__, "last_refresh_date", last_refresh_date)
        if next_refresh_date is not None:
            pulumi.set(__self__, "next_refresh_date", next_refresh_date)
        if refresh_date_timezone is not None:
            pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        if refresh_in_days is not None:
            pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        if refresh_in_hours is not None:
            pulumi.set(__self__, "refresh_in_hours", refresh_in_hours)
        if refresh_in_months is not None:
            pulumi.set(__self__, "refresh_in_months", refresh_in_months)
        if refresh_time is not None:
            pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="lastRefreshDate")
    def last_refresh_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_refresh_date")

    @last_refresh_date.setter
    def last_refresh_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_refresh_date", value)

    @property
    @pulumi.getter(name="nextRefreshDate")
    def next_refresh_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_refresh_date")

    @next_refresh_date.setter
    def next_refresh_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_refresh_date", value)

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_date_timezone")

    @refresh_date_timezone.setter
    def refresh_date_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_date_timezone", value)

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_in_days")

    @refresh_in_days.setter
    def refresh_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_in_days", value)

    @property
    @pulumi.getter(name="refreshInHours")
    def refresh_in_hours(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_in_hours")

    @refresh_in_hours.setter
    def refresh_in_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_in_hours", value)

    @property
    @pulumi.getter(name="refreshInMonths")
    def refresh_in_months(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_in_months")

    @refresh_in_months.setter
    def refresh_in_months(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_in_months", value)

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_time")

    @refresh_time.setter
    def refresh_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_time", value)


if not MYPY:
    class NdbRegisterDatabaseLinkedDatabaseArgsDict(TypedDict):
        database_name: NotRequired[pulumi.Input[str]]
        """
        name of database
        """
        database_status: NotRequired[pulumi.Input[str]]
        """
        status of database
        """
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description
        """
        id: NotRequired[pulumi.Input[str]]
        infos: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLinkedDatabaseInfoArgsDict']]]]
        """
        info of instance
        """
        metric: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        parent_database_id: NotRequired[pulumi.Input[str]]
        """
        parent database id
        """
        parent_linked_database_id: NotRequired[pulumi.Input[str]]
        snapshot_id: NotRequired[pulumi.Input[str]]
        status: NotRequired[pulumi.Input[str]]
        """
        status of instance
        """
        timezone: NotRequired[pulumi.Input[str]]
elif False:
    NdbRegisterDatabaseLinkedDatabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseLinkedDatabaseArgs:
    def __init__(__self__, *,
                 database_name: Optional[pulumi.Input[str]] = None,
                 database_status: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLinkedDatabaseInfoArgs']]]] = None,
                 metric: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_database_id: Optional[pulumi.Input[str]] = None,
                 parent_linked_database_id: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] database_name: name of database
        :param pulumi.Input[str] database_status: status of database
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description
        :param pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLinkedDatabaseInfoArgs']]] infos: info of instance
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metric: Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[str] parent_database_id: parent database id
        :param pulumi.Input[str] status: status of instance
        """
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_database_id is not None:
            pulumi.set(__self__, "parent_database_id", parent_database_id)
        if parent_linked_database_id is not None:
            pulumi.set(__self__, "parent_linked_database_id", parent_linked_database_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of database
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[pulumi.Input[str]]:
        """
        status of database
        """
        return pulumi.get(self, "database_status")

    @database_status.setter
    def database_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_status", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLinkedDatabaseInfoArgs']]]]:
        """
        info of instance
        """
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseLinkedDatabaseInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> Optional[pulumi.Input[str]]:
        """
        parent database id
        """
        return pulumi.get(self, "parent_database_id")

    @parent_database_id.setter
    def parent_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_database_id", value)

    @property
    @pulumi.getter(name="parentLinkedDatabaseId")
    def parent_linked_database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parent_linked_database_id")

    @parent_linked_database_id.setter
    def parent_linked_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_linked_database_id", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


if not MYPY:
    class NdbRegisterDatabaseLinkedDatabaseInfoArgsDict(TypedDict):
        info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        info of instance
        """
        secure_info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    NdbRegisterDatabaseLinkedDatabaseInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseLinkedDatabaseInfoArgs:
    def __init__(__self__, *,
                 info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 secure_info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] info: info of instance
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        info of instance
        """
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "secure_info")

    @secure_info.setter
    def secure_info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secure_info", value)


if not MYPY:
    class NdbRegisterDatabasePostgressInfoArgsDict(TypedDict):
        db_name: pulumi.Input[str]
        """
        name of the database server VM on which the instance you want to register is running.
        """
        db_password: pulumi.Input[str]
        """
        database password
        """
        listener_port: pulumi.Input[str]
        """
        listner port of database
        """
        postgres_software_home: pulumi.Input[str]
        """
        path to the PostgreSQL home directory in which the PostgreSQL software is installed.
        """
        allow_multiple_databases: NotRequired[pulumi.Input[bool]]
        """
        allow multiple databases. Default is true
        """
        backup_policy: NotRequired[pulumi.Input[str]]
        """
        backup policy of database. Default is prefer_secondary.
        """
        db_user: NotRequired[pulumi.Input[str]]
        """
        username of the NDB drive user account that has sudo access.
        """
        software_home: NotRequired[pulumi.Input[str]]
        """
        path to the directory in which the PostgreSQL software is installed.
        """
        switch_log: NotRequired[pulumi.Input[bool]]
        """
        switch log of database. Default is true
        """
        vm_ip: NotRequired[pulumi.Input[str]]
        """
        VM IP of the database server VM on which the instance you want to register is running.
        """
elif False:
    NdbRegisterDatabasePostgressInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabasePostgressInfoArgs:
    def __init__(__self__, *,
                 db_name: pulumi.Input[str],
                 db_password: pulumi.Input[str],
                 listener_port: pulumi.Input[str],
                 postgres_software_home: pulumi.Input[str],
                 allow_multiple_databases: Optional[pulumi.Input[bool]] = None,
                 backup_policy: Optional[pulumi.Input[str]] = None,
                 db_user: Optional[pulumi.Input[str]] = None,
                 software_home: Optional[pulumi.Input[str]] = None,
                 switch_log: Optional[pulumi.Input[bool]] = None,
                 vm_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] db_name: name of the database server VM on which the instance you want to register is running.
        :param pulumi.Input[str] db_password: database password
        :param pulumi.Input[str] listener_port: listner port of database
        :param pulumi.Input[str] postgres_software_home: path to the PostgreSQL home directory in which the PostgreSQL software is installed.
        :param pulumi.Input[bool] allow_multiple_databases: allow multiple databases. Default is true
        :param pulumi.Input[str] backup_policy: backup policy of database. Default is prefer_secondary.
        :param pulumi.Input[str] db_user: username of the NDB drive user account that has sudo access.
        :param pulumi.Input[str] software_home: path to the directory in which the PostgreSQL software is installed.
        :param pulumi.Input[bool] switch_log: switch log of database. Default is true
        :param pulumi.Input[str] vm_ip: VM IP of the database server VM on which the instance you want to register is running.
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "db_password", db_password)
        pulumi.set(__self__, "listener_port", listener_port)
        pulumi.set(__self__, "postgres_software_home", postgres_software_home)
        if allow_multiple_databases is not None:
            pulumi.set(__self__, "allow_multiple_databases", allow_multiple_databases)
        if backup_policy is not None:
            pulumi.set(__self__, "backup_policy", backup_policy)
        if db_user is not None:
            pulumi.set(__self__, "db_user", db_user)
        if software_home is not None:
            pulumi.set(__self__, "software_home", software_home)
        if switch_log is not None:
            pulumi.set(__self__, "switch_log", switch_log)
        if vm_ip is not None:
            pulumi.set(__self__, "vm_ip", vm_ip)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Input[str]:
        """
        name of the database server VM on which the instance you want to register is running.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter(name="dbPassword")
    def db_password(self) -> pulumi.Input[str]:
        """
        database password
        """
        return pulumi.get(self, "db_password")

    @db_password.setter
    def db_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_password", value)

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> pulumi.Input[str]:
        """
        listner port of database
        """
        return pulumi.get(self, "listener_port")

    @listener_port.setter
    def listener_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "listener_port", value)

    @property
    @pulumi.getter(name="postgresSoftwareHome")
    def postgres_software_home(self) -> pulumi.Input[str]:
        """
        path to the PostgreSQL home directory in which the PostgreSQL software is installed.
        """
        return pulumi.get(self, "postgres_software_home")

    @postgres_software_home.setter
    def postgres_software_home(self, value: pulumi.Input[str]):
        pulumi.set(self, "postgres_software_home", value)

    @property
    @pulumi.getter(name="allowMultipleDatabases")
    def allow_multiple_databases(self) -> Optional[pulumi.Input[bool]]:
        """
        allow multiple databases. Default is true
        """
        return pulumi.get(self, "allow_multiple_databases")

    @allow_multiple_databases.setter
    def allow_multiple_databases(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_multiple_databases", value)

    @property
    @pulumi.getter(name="backupPolicy")
    def backup_policy(self) -> Optional[pulumi.Input[str]]:
        """
        backup policy of database. Default is prefer_secondary.
        """
        return pulumi.get(self, "backup_policy")

    @backup_policy.setter
    def backup_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_policy", value)

    @property
    @pulumi.getter(name="dbUser")
    def db_user(self) -> Optional[pulumi.Input[str]]:
        """
        username of the NDB drive user account that has sudo access.
        """
        return pulumi.get(self, "db_user")

    @db_user.setter
    def db_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_user", value)

    @property
    @pulumi.getter(name="softwareHome")
    def software_home(self) -> Optional[pulumi.Input[str]]:
        """
        path to the directory in which the PostgreSQL software is installed.
        """
        return pulumi.get(self, "software_home")

    @software_home.setter
    def software_home(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "software_home", value)

    @property
    @pulumi.getter(name="switchLog")
    def switch_log(self) -> Optional[pulumi.Input[bool]]:
        """
        switch log of database. Default is true
        """
        return pulumi.get(self, "switch_log")

    @switch_log.setter
    def switch_log(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switch_log", value)

    @property
    @pulumi.getter(name="vmIp")
    def vm_ip(self) -> Optional[pulumi.Input[str]]:
        """
        VM IP of the database server VM on which the instance you want to register is running.
        """
        return pulumi.get(self, "vm_ip")

    @vm_ip.setter
    def vm_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_ip", value)


if not MYPY:
    class NdbRegisterDatabasePropertyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbRegisterDatabasePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabasePropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbRegisterDatabaseTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbRegisterDatabaseTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineArgsDict(TypedDict):
        access_level: NotRequired[pulumi.Input[str]]
        clone: NotRequired[pulumi.Input[bool]]
        """
        whether instance is cloned or not
        """
        clones: NotRequired[pulumi.Input[str]]
        clustered: NotRequired[pulumi.Input[bool]]
        """
        clustered or not. Default is false
        """
        database: NotRequired[pulumi.Input[str]]
        database_id: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description
        """
        ea_status: NotRequired[pulumi.Input[str]]
        id: NotRequired[pulumi.Input[str]]
        metric: NotRequired[pulumi.Input[str]]
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachinePropertyArgsDict']]]]
        """
        properties of database created
        """
        schedule_id: NotRequired[pulumi.Input[str]]
        schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleArgsDict']]]]
        """
        - (Optional) schedule for snapshots
        """
        scope: NotRequired[pulumi.Input[str]]
        sla_id: NotRequired[pulumi.Input[str]]
        sla_update_in_progress: NotRequired[pulumi.Input[bool]]
        sla_update_metadata: NotRequired[pulumi.Input[str]]
        slas: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineSlaArgsDict']]]]
        source_nx_clusters: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        status: NotRequired[pulumi.Input[str]]
        """
        status of instance
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineTagArgsDict']]]]
        """
        tags
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type of database
        """
elif False:
    NdbRegisterDatabaseTimeMachineArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineArgs:
    def __init__(__self__, *,
                 access_level: Optional[pulumi.Input[str]] = None,
                 clone: Optional[pulumi.Input[bool]] = None,
                 clones: Optional[pulumi.Input[str]] = None,
                 clustered: Optional[pulumi.Input[bool]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 database_id: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ea_status: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachinePropertyArgs']]]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleArgs']]]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 sla_id: Optional[pulumi.Input[str]] = None,
                 sla_update_in_progress: Optional[pulumi.Input[bool]] = None,
                 sla_update_metadata: Optional[pulumi.Input[str]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineSlaArgs']]]] = None,
                 source_nx_clusters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineTagArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] clone: whether instance is cloned or not
        :param pulumi.Input[bool] clustered: clustered or not. Default is false
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description
        :param pulumi.Input[str] metric: Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachinePropertyArgs']]] properties: properties of database created
        :param pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleArgs']]] schedules: - (Optional) schedule for snapshots
        :param pulumi.Input[str] status: status of instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineTagArgs']]] tags: tags
        :param pulumi.Input[str] type: type of database
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if clone is not None:
            pulumi.set(__self__, "clone", clone)
        if clones is not None:
            pulumi.set(__self__, "clones", clones)
        if clustered is not None:
            pulumi.set(__self__, "clustered", clustered)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ea_status is not None:
            pulumi.set(__self__, "ea_status", ea_status)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)
        if sla_update_in_progress is not None:
            pulumi.set(__self__, "sla_update_in_progress", sla_update_in_progress)
        if sla_update_metadata is not None:
            pulumi.set(__self__, "sla_update_metadata", sla_update_metadata)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if source_nx_clusters is not None:
            pulumi.set(__self__, "source_nx_clusters", source_nx_clusters)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_level")

    @access_level.setter
    def access_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_level", value)

    @property
    @pulumi.getter
    def clone(self) -> Optional[pulumi.Input[bool]]:
        """
        whether instance is cloned or not
        """
        return pulumi.get(self, "clone")

    @clone.setter
    def clone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "clone", value)

    @property
    @pulumi.getter
    def clones(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "clones")

    @clones.setter
    def clones(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clones", value)

    @property
    @pulumi.getter
    def clustered(self) -> Optional[pulumi.Input[bool]]:
        """
        clustered or not. Default is false
        """
        return pulumi.get(self, "clustered")

    @clustered.setter
    def clustered(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "clustered", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_id", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="eaStatus")
    def ea_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ea_status")

    @ea_status.setter
    def ea_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ea_status", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachinePropertyArgs']]]]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachinePropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_id", value)

    @property
    @pulumi.getter
    def schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleArgs']]]]:
        """
        - (Optional) schedule for snapshots
        """
        return pulumi.get(self, "schedules")

    @schedules.setter
    def schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleArgs']]]]):
        pulumi.set(self, "schedules", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sla_id")

    @sla_id.setter
    def sla_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_id", value)

    @property
    @pulumi.getter(name="slaUpdateInProgress")
    def sla_update_in_progress(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sla_update_in_progress")

    @sla_update_in_progress.setter
    def sla_update_in_progress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sla_update_in_progress", value)

    @property
    @pulumi.getter(name="slaUpdateMetadata")
    def sla_update_metadata(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sla_update_metadata")

    @sla_update_metadata.setter
    def sla_update_metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_update_metadata", value)

    @property
    @pulumi.getter
    def slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineSlaArgs']]]]:
        return pulumi.get(self, "slas")

    @slas.setter
    def slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineSlaArgs']]]]):
        pulumi.set(self, "slas", value)

    @property
    @pulumi.getter(name="sourceNxClusters")
    def source_nx_clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "source_nx_clusters")

    @source_nx_clusters.setter
    def source_nx_clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_nx_clusters", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineTagArgs']]]]:
        """
        tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type of database
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineInfoArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        - (Required) name of time machine
        """
        schedule: pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleArgsDict']
        """
        - (Optional) schedule for snapshots
        """
        autotunelogdrive: NotRequired[pulumi.Input[bool]]
        """
        - (Optional) enable auto tune log drive. Default: true
        """
        description: NotRequired[pulumi.Input[str]]
        """
        - (Optional) description of time machine
        """
        sla_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoSlaDetailArgsDict']]]]
        """
        -  (optional) SLA details for HA instance
        """
        slaid: NotRequired[pulumi.Input[str]]
        """
        - (Optional) SLA ID for single instance
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoTagArgsDict']]]]
        """
        - (Optional) tags
        """
elif False:
    NdbRegisterDatabaseTimeMachineInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineInfoArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 schedule: pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleArgs'],
                 autotunelogdrive: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 sla_details: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoSlaDetailArgs']]]] = None,
                 slaid: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoTagArgs']]]] = None):
        """
        :param pulumi.Input[str] name: - (Required) name of time machine
        :param pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleArgs'] schedule: - (Optional) schedule for snapshots
        :param pulumi.Input[bool] autotunelogdrive: - (Optional) enable auto tune log drive. Default: true
        :param pulumi.Input[str] description: - (Optional) description of time machine
        :param pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoSlaDetailArgs']]] sla_details: -  (optional) SLA details for HA instance
        :param pulumi.Input[str] slaid: - (Optional) SLA ID for single instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoTagArgs']]] tags: - (Optional) tags
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schedule", schedule)
        if autotunelogdrive is not None:
            pulumi.set(__self__, "autotunelogdrive", autotunelogdrive)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if sla_details is not None:
            pulumi.set(__self__, "sla_details", sla_details)
        if slaid is not None:
            pulumi.set(__self__, "slaid", slaid)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Required) name of time machine
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleArgs']:
        """
        - (Optional) schedule for snapshots
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleArgs']):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def autotunelogdrive(self) -> Optional[pulumi.Input[bool]]:
        """
        - (Optional) enable auto tune log drive. Default: true
        """
        return pulumi.get(self, "autotunelogdrive")

    @autotunelogdrive.setter
    def autotunelogdrive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autotunelogdrive", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) description of time machine
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="slaDetails")
    def sla_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoSlaDetailArgs']]]]:
        """
        -  (optional) SLA details for HA instance
        """
        return pulumi.get(self, "sla_details")

    @sla_details.setter
    def sla_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoSlaDetailArgs']]]]):
        pulumi.set(self, "sla_details", value)

    @property
    @pulumi.getter
    def slaid(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) SLA ID for single instance
        """
        return pulumi.get(self, "slaid")

    @slaid.setter
    def slaid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slaid", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoTagArgs']]]]:
        """
        - (Optional) tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoTagArgs']]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineInfoScheduleArgsDict(TypedDict):
        continuousschedule: NotRequired[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleContinuousscheduleArgsDict']]
        """
        - (Optional) snapshot freq and log config
        """
        monthlyschedule: NotRequired[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyscheduleArgsDict']]
        """
        - (Optional) monthly snapshot config
        """
        quartelyschedule: NotRequired[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyscheduleArgsDict']]
        """
        - (Optional) quaterly snapshot config
        """
        snapshottimeofday: NotRequired[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofdayArgsDict']]
        """
        - (Optional) daily snapshot config
        """
        weeklyschedule: NotRequired[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyscheduleArgsDict']]
        """
        - (Optional) weekly snapshot config
        """
        yearlyschedule: NotRequired[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleYearlyscheduleArgsDict']]
        """
        - (Optional) yearly snapshot config
        """
elif False:
    NdbRegisterDatabaseTimeMachineInfoScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineInfoScheduleArgs:
    def __init__(__self__, *,
                 continuousschedule: Optional[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleContinuousscheduleArgs']] = None,
                 monthlyschedule: Optional[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyscheduleArgs']] = None,
                 quartelyschedule: Optional[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyscheduleArgs']] = None,
                 snapshottimeofday: Optional[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofdayArgs']] = None,
                 weeklyschedule: Optional[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyscheduleArgs']] = None,
                 yearlyschedule: Optional[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleYearlyscheduleArgs']] = None):
        """
        :param pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleContinuousscheduleArgs'] continuousschedule: - (Optional) snapshot freq and log config
        :param pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyscheduleArgs'] monthlyschedule: - (Optional) monthly snapshot config
        :param pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyscheduleArgs'] quartelyschedule: - (Optional) quaterly snapshot config
        :param pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofdayArgs'] snapshottimeofday: - (Optional) daily snapshot config
        :param pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyscheduleArgs'] weeklyschedule: - (Optional) weekly snapshot config
        :param pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleYearlyscheduleArgs'] yearlyschedule: - (Optional) yearly snapshot config
        """
        if continuousschedule is not None:
            pulumi.set(__self__, "continuousschedule", continuousschedule)
        if monthlyschedule is not None:
            pulumi.set(__self__, "monthlyschedule", monthlyschedule)
        if quartelyschedule is not None:
            pulumi.set(__self__, "quartelyschedule", quartelyschedule)
        if snapshottimeofday is not None:
            pulumi.set(__self__, "snapshottimeofday", snapshottimeofday)
        if weeklyschedule is not None:
            pulumi.set(__self__, "weeklyschedule", weeklyschedule)
        if yearlyschedule is not None:
            pulumi.set(__self__, "yearlyschedule", yearlyschedule)

    @property
    @pulumi.getter
    def continuousschedule(self) -> Optional[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleContinuousscheduleArgs']]:
        """
        - (Optional) snapshot freq and log config
        """
        return pulumi.get(self, "continuousschedule")

    @continuousschedule.setter
    def continuousschedule(self, value: Optional[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleContinuousscheduleArgs']]):
        pulumi.set(self, "continuousschedule", value)

    @property
    @pulumi.getter
    def monthlyschedule(self) -> Optional[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyscheduleArgs']]:
        """
        - (Optional) monthly snapshot config
        """
        return pulumi.get(self, "monthlyschedule")

    @monthlyschedule.setter
    def monthlyschedule(self, value: Optional[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyscheduleArgs']]):
        pulumi.set(self, "monthlyschedule", value)

    @property
    @pulumi.getter
    def quartelyschedule(self) -> Optional[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyscheduleArgs']]:
        """
        - (Optional) quaterly snapshot config
        """
        return pulumi.get(self, "quartelyschedule")

    @quartelyschedule.setter
    def quartelyschedule(self, value: Optional[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyscheduleArgs']]):
        pulumi.set(self, "quartelyschedule", value)

    @property
    @pulumi.getter
    def snapshottimeofday(self) -> Optional[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofdayArgs']]:
        """
        - (Optional) daily snapshot config
        """
        return pulumi.get(self, "snapshottimeofday")

    @snapshottimeofday.setter
    def snapshottimeofday(self, value: Optional[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofdayArgs']]):
        pulumi.set(self, "snapshottimeofday", value)

    @property
    @pulumi.getter
    def weeklyschedule(self) -> Optional[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyscheduleArgs']]:
        """
        - (Optional) weekly snapshot config
        """
        return pulumi.get(self, "weeklyschedule")

    @weeklyschedule.setter
    def weeklyschedule(self, value: Optional[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyscheduleArgs']]):
        pulumi.set(self, "weeklyschedule", value)

    @property
    @pulumi.getter
    def yearlyschedule(self) -> Optional[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleYearlyscheduleArgs']]:
        """
        - (Optional) yearly snapshot config
        """
        return pulumi.get(self, "yearlyschedule")

    @yearlyschedule.setter
    def yearlyschedule(self, value: Optional[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoScheduleYearlyscheduleArgs']]):
        pulumi.set(self, "yearlyschedule", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineInfoScheduleContinuousscheduleArgsDict(TypedDict):
        enabled: pulumi.Input[bool]
        logbackupinterval: pulumi.Input[int]
        snapshotsperday: pulumi.Input[int]
elif False:
    NdbRegisterDatabaseTimeMachineInfoScheduleContinuousscheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineInfoScheduleContinuousscheduleArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 logbackupinterval: pulumi.Input[int],
                 snapshotsperday: pulumi.Input[int]):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "logbackupinterval", logbackupinterval)
        pulumi.set(__self__, "snapshotsperday", snapshotsperday)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def logbackupinterval(self) -> pulumi.Input[int]:
        return pulumi.get(self, "logbackupinterval")

    @logbackupinterval.setter
    def logbackupinterval(self, value: pulumi.Input[int]):
        pulumi.set(self, "logbackupinterval", value)

    @property
    @pulumi.getter
    def snapshotsperday(self) -> pulumi.Input[int]:
        return pulumi.get(self, "snapshotsperday")

    @snapshotsperday.setter
    def snapshotsperday(self, value: pulumi.Input[int]):
        pulumi.set(self, "snapshotsperday", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyscheduleArgsDict(TypedDict):
        dayofmonth: pulumi.Input[int]
        enabled: pulumi.Input[bool]
elif False:
    NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyscheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyscheduleArgs:
    def __init__(__self__, *,
                 dayofmonth: pulumi.Input[int],
                 enabled: pulumi.Input[bool]):
        pulumi.set(__self__, "dayofmonth", dayofmonth)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def dayofmonth(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dayofmonth")

    @dayofmonth.setter
    def dayofmonth(self, value: pulumi.Input[int]):
        pulumi.set(self, "dayofmonth", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyscheduleArgsDict(TypedDict):
        dayofmonth: pulumi.Input[int]
        enabled: pulumi.Input[bool]
        startmonth: pulumi.Input[str]
elif False:
    NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyscheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyscheduleArgs:
    def __init__(__self__, *,
                 dayofmonth: pulumi.Input[int],
                 enabled: pulumi.Input[bool],
                 startmonth: pulumi.Input[str]):
        pulumi.set(__self__, "dayofmonth", dayofmonth)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "startmonth", startmonth)

    @property
    @pulumi.getter
    def dayofmonth(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dayofmonth")

    @dayofmonth.setter
    def dayofmonth(self, value: pulumi.Input[int]):
        pulumi.set(self, "dayofmonth", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def startmonth(self) -> pulumi.Input[str]:
        return pulumi.get(self, "startmonth")

    @startmonth.setter
    def startmonth(self, value: pulumi.Input[str]):
        pulumi.set(self, "startmonth", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofdayArgsDict(TypedDict):
        hours: pulumi.Input[int]
        minutes: pulumi.Input[int]
        seconds: pulumi.Input[int]
elif False:
    NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofdayArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofdayArgs:
    def __init__(__self__, *,
                 hours: pulumi.Input[int],
                 minutes: pulumi.Input[int],
                 seconds: pulumi.Input[int]):
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)
        pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def hours(self) -> pulumi.Input[int]:
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: pulumi.Input[int]):
        pulumi.set(self, "hours", value)

    @property
    @pulumi.getter
    def minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "minutes", value)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[int]:
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "seconds", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyscheduleArgsDict(TypedDict):
        dayofweek: pulumi.Input[str]
        enabled: pulumi.Input[bool]
elif False:
    NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyscheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyscheduleArgs:
    def __init__(__self__, *,
                 dayofweek: pulumi.Input[str],
                 enabled: pulumi.Input[bool]):
        pulumi.set(__self__, "dayofweek", dayofweek)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def dayofweek(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dayofweek")

    @dayofweek.setter
    def dayofweek(self, value: pulumi.Input[str]):
        pulumi.set(self, "dayofweek", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineInfoScheduleYearlyscheduleArgsDict(TypedDict):
        dayofmonth: pulumi.Input[int]
        enabled: pulumi.Input[bool]
        month: pulumi.Input[str]
elif False:
    NdbRegisterDatabaseTimeMachineInfoScheduleYearlyscheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineInfoScheduleYearlyscheduleArgs:
    def __init__(__self__, *,
                 dayofmonth: pulumi.Input[int],
                 enabled: pulumi.Input[bool],
                 month: pulumi.Input[str]):
        pulumi.set(__self__, "dayofmonth", dayofmonth)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "month", month)

    @property
    @pulumi.getter
    def dayofmonth(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dayofmonth")

    @dayofmonth.setter
    def dayofmonth(self, value: pulumi.Input[int]):
        pulumi.set(self, "dayofmonth", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def month(self) -> pulumi.Input[str]:
        return pulumi.get(self, "month")

    @month.setter
    def month(self, value: pulumi.Input[str]):
        pulumi.set(self, "month", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineInfoSlaDetailArgsDict(TypedDict):
        primary_slas: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySlaArgsDict']]]]
        """
        - (Required) primary sla details
        * `primary_sla.sla_id` :- (Required) sla id
        * `primary_sla.nx_cluster_ids` -: (Optioanl) cluster ids
        """
elif False:
    NdbRegisterDatabaseTimeMachineInfoSlaDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineInfoSlaDetailArgs:
    def __init__(__self__, *,
                 primary_slas: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySlaArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySlaArgs']]] primary_slas: - (Required) primary sla details
               * `primary_sla.sla_id` :- (Required) sla id
               * `primary_sla.nx_cluster_ids` -: (Optioanl) cluster ids
        """
        if primary_slas is not None:
            pulumi.set(__self__, "primary_slas", primary_slas)

    @property
    @pulumi.getter(name="primarySlas")
    def primary_slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySlaArgs']]]]:
        """
        - (Required) primary sla details
        * `primary_sla.sla_id` :- (Required) sla id
        * `primary_sla.nx_cluster_ids` -: (Optioanl) cluster ids
        """
        return pulumi.get(self, "primary_slas")

    @primary_slas.setter
    def primary_slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySlaArgs']]]]):
        pulumi.set(self, "primary_slas", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySlaArgsDict(TypedDict):
        sla_id: pulumi.Input[str]
        """
        description of SLA ID.
        """
        nx_cluster_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySlaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySlaArgs:
    def __init__(__self__, *,
                 sla_id: pulumi.Input[str],
                 nx_cluster_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] sla_id: description of SLA ID.
        """
        pulumi.set(__self__, "sla_id", sla_id)
        if nx_cluster_ids is not None:
            pulumi.set(__self__, "nx_cluster_ids", nx_cluster_ids)

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> pulumi.Input[str]:
        """
        description of SLA ID.
        """
        return pulumi.get(self, "sla_id")

    @sla_id.setter
    def sla_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sla_id", value)

    @property
    @pulumi.getter(name="nxClusterIds")
    def nx_cluster_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "nx_cluster_ids")

    @nx_cluster_ids.setter
    def nx_cluster_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nx_cluster_ids", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineInfoTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbRegisterDatabaseTimeMachineInfoTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineInfoTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachinePropertyArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        description
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        ref_id: NotRequired[pulumi.Input[str]]
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbRegisterDatabaseTimeMachinePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachinePropertyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: description
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineScheduleArgsDict(TypedDict):
        continuous_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleContinuousScheduleArgsDict']]]]
        daily_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleDailyScheduleArgsDict']]]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description
        """
        global_policy: NotRequired[pulumi.Input[bool]]
        id: NotRequired[pulumi.Input[str]]
        monthly_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleMonthlyScheduleArgsDict']]]]
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        owner_id: NotRequired[pulumi.Input[str]]
        quartely_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleQuartelyScheduleArgsDict']]]]
        reference_count: NotRequired[pulumi.Input[int]]
        snapshot_time_of_days: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDayArgsDict']]]]
        start_time: NotRequired[pulumi.Input[str]]
        system_policy: NotRequired[pulumi.Input[bool]]
        time_zone: NotRequired[pulumi.Input[str]]
        """
        timezone on which instance is created xw
        """
        unique_name: NotRequired[pulumi.Input[str]]
        weekly_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleWeeklyScheduleArgsDict']]]]
        yearly_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleYearlyScheduleArgsDict']]]]
elif False:
    NdbRegisterDatabaseTimeMachineScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineScheduleArgs:
    def __init__(__self__, *,
                 continuous_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleContinuousScheduleArgs']]]] = None,
                 daily_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleDailyScheduleArgs']]]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 global_policy: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 monthly_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleMonthlyScheduleArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 quartely_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleQuartelyScheduleArgs']]]] = None,
                 reference_count: Optional[pulumi.Input[int]] = None,
                 snapshot_time_of_days: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDayArgs']]]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 system_policy: Optional[pulumi.Input[bool]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 unique_name: Optional[pulumi.Input[str]] = None,
                 weekly_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleWeeklyScheduleArgs']]]] = None,
                 yearly_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleYearlyScheduleArgs']]]] = None):
        """
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[str] time_zone: timezone on which instance is created xw
        """
        if continuous_schedules is not None:
            pulumi.set(__self__, "continuous_schedules", continuous_schedules)
        if daily_schedules is not None:
            pulumi.set(__self__, "daily_schedules", daily_schedules)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if global_policy is not None:
            pulumi.set(__self__, "global_policy", global_policy)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_schedules is not None:
            pulumi.set(__self__, "monthly_schedules", monthly_schedules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if quartely_schedules is not None:
            pulumi.set(__self__, "quartely_schedules", quartely_schedules)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if snapshot_time_of_days is not None:
            pulumi.set(__self__, "snapshot_time_of_days", snapshot_time_of_days)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if system_policy is not None:
            pulumi.set(__self__, "system_policy", system_policy)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_schedules is not None:
            pulumi.set(__self__, "weekly_schedules", weekly_schedules)
        if yearly_schedules is not None:
            pulumi.set(__self__, "yearly_schedules", yearly_schedules)

    @property
    @pulumi.getter(name="continuousSchedules")
    def continuous_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleContinuousScheduleArgs']]]]:
        return pulumi.get(self, "continuous_schedules")

    @continuous_schedules.setter
    def continuous_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleContinuousScheduleArgs']]]]):
        pulumi.set(self, "continuous_schedules", value)

    @property
    @pulumi.getter(name="dailySchedules")
    def daily_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleDailyScheduleArgs']]]]:
        return pulumi.get(self, "daily_schedules")

    @daily_schedules.setter
    def daily_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleDailyScheduleArgs']]]]):
        pulumi.set(self, "daily_schedules", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="globalPolicy")
    def global_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_policy")

    @global_policy.setter
    def global_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_policy", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="monthlySchedules")
    def monthly_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleMonthlyScheduleArgs']]]]:
        return pulumi.get(self, "monthly_schedules")

    @monthly_schedules.setter
    def monthly_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleMonthlyScheduleArgs']]]]):
        pulumi.set(self, "monthly_schedules", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="quartelySchedules")
    def quartely_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleQuartelyScheduleArgs']]]]:
        return pulumi.get(self, "quartely_schedules")

    @quartely_schedules.setter
    def quartely_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleQuartelyScheduleArgs']]]]):
        pulumi.set(self, "quartely_schedules", value)

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reference_count")

    @reference_count.setter
    def reference_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reference_count", value)

    @property
    @pulumi.getter(name="snapshotTimeOfDays")
    def snapshot_time_of_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDayArgs']]]]:
        return pulumi.get(self, "snapshot_time_of_days")

    @snapshot_time_of_days.setter
    def snapshot_time_of_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDayArgs']]]]):
        pulumi.set(self, "snapshot_time_of_days", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="systemPolicy")
    def system_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "system_policy")

    @system_policy.setter
    def system_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "system_policy", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        timezone on which instance is created xw
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unique_name")

    @unique_name.setter
    def unique_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_name", value)

    @property
    @pulumi.getter(name="weeklySchedules")
    def weekly_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleWeeklyScheduleArgs']]]]:
        return pulumi.get(self, "weekly_schedules")

    @weekly_schedules.setter
    def weekly_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleWeeklyScheduleArgs']]]]):
        pulumi.set(self, "weekly_schedules", value)

    @property
    @pulumi.getter(name="yearlySchedules")
    def yearly_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleYearlyScheduleArgs']]]]:
        return pulumi.get(self, "yearly_schedules")

    @yearly_schedules.setter
    def yearly_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbRegisterDatabaseTimeMachineScheduleYearlyScheduleArgs']]]]):
        pulumi.set(self, "yearly_schedules", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineScheduleContinuousScheduleArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        log_backup_interval: NotRequired[pulumi.Input[int]]
        snapshots_per_day: NotRequired[pulumi.Input[int]]
elif False:
    NdbRegisterDatabaseTimeMachineScheduleContinuousScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineScheduleContinuousScheduleArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_backup_interval: Optional[pulumi.Input[int]] = None,
                 snapshots_per_day: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_backup_interval is not None:
            pulumi.set(__self__, "log_backup_interval", log_backup_interval)
        if snapshots_per_day is not None:
            pulumi.set(__self__, "snapshots_per_day", snapshots_per_day)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logBackupInterval")
    def log_backup_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "log_backup_interval")

    @log_backup_interval.setter
    def log_backup_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_backup_interval", value)

    @property
    @pulumi.getter(name="snapshotsPerDay")
    def snapshots_per_day(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "snapshots_per_day")

    @snapshots_per_day.setter
    def snapshots_per_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "snapshots_per_day", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineScheduleDailyScheduleArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    NdbRegisterDatabaseTimeMachineScheduleDailyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineScheduleDailyScheduleArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineScheduleMonthlyScheduleArgsDict(TypedDict):
        day_of_month: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    NdbRegisterDatabaseTimeMachineScheduleMonthlyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineScheduleMonthlyScheduleArgs:
    def __init__(__self__, *,
                 day_of_month: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineScheduleQuartelyScheduleArgsDict(TypedDict):
        day_of_month: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
        start_month: NotRequired[pulumi.Input[str]]
        start_month_value: NotRequired[pulumi.Input[str]]
elif False:
    NdbRegisterDatabaseTimeMachineScheduleQuartelyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineScheduleQuartelyScheduleArgs:
    def __init__(__self__, *,
                 day_of_month: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 start_month: Optional[pulumi.Input[str]] = None,
                 start_month_value: Optional[pulumi.Input[str]] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if start_month is not None:
            pulumi.set(__self__, "start_month", start_month)
        if start_month_value is not None:
            pulumi.set(__self__, "start_month_value", start_month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="startMonth")
    def start_month(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_month")

    @start_month.setter
    def start_month(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_month", value)

    @property
    @pulumi.getter(name="startMonthValue")
    def start_month_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_month_value")

    @start_month_value.setter
    def start_month_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_month_value", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDayArgsDict(TypedDict):
        extra: NotRequired[pulumi.Input[bool]]
        hours: NotRequired[pulumi.Input[int]]
        minutes: NotRequired[pulumi.Input[int]]
        seconds: NotRequired[pulumi.Input[int]]
elif False:
    NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDayArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDayArgs:
    def __init__(__self__, *,
                 extra: Optional[pulumi.Input[bool]] = None,
                 hours: Optional[pulumi.Input[int]] = None,
                 minutes: Optional[pulumi.Input[int]] = None,
                 seconds: Optional[pulumi.Input[int]] = None):
        if extra is not None:
            pulumi.set(__self__, "extra", extra)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def extra(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "extra")

    @extra.setter
    def extra(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extra", value)

    @property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hours", value)

    @property
    @pulumi.getter
    def minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minutes", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineScheduleWeeklyScheduleArgsDict(TypedDict):
        day_of_week: NotRequired[pulumi.Input[str]]
        day_of_week_value: NotRequired[pulumi.Input[str]]
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    NdbRegisterDatabaseTimeMachineScheduleWeeklyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineScheduleWeeklyScheduleArgs:
    def __init__(__self__, *,
                 day_of_week: Optional[pulumi.Input[str]] = None,
                 day_of_week_value: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if day_of_week_value is not None:
            pulumi.set(__self__, "day_of_week_value", day_of_week_value)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week", value)

    @property
    @pulumi.getter(name="dayOfWeekValue")
    def day_of_week_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "day_of_week_value")

    @day_of_week_value.setter
    def day_of_week_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week_value", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineScheduleYearlyScheduleArgsDict(TypedDict):
        day_of_month: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
        month: NotRequired[pulumi.Input[str]]
        month_value: NotRequired[pulumi.Input[str]]
elif False:
    NdbRegisterDatabaseTimeMachineScheduleYearlyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineScheduleYearlyScheduleArgs:
    def __init__(__self__, *,
                 day_of_month: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 month: Optional[pulumi.Input[str]] = None,
                 month_value: Optional[pulumi.Input[str]] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if month_value is not None:
            pulumi.set(__self__, "month_value", month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def month(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "month")

    @month.setter
    def month(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "month", value)

    @property
    @pulumi.getter(name="monthValue")
    def month_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "month_value")

    @month_value.setter
    def month_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "month_value", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineSlaArgsDict(TypedDict):
        continuous_retention: NotRequired[pulumi.Input[int]]
        current_active_frequency: NotRequired[pulumi.Input[str]]
        daily_retention: NotRequired[pulumi.Input[int]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description
        """
        id: NotRequired[pulumi.Input[str]]
        monthly_retention: NotRequired[pulumi.Input[int]]
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        owner_id: NotRequired[pulumi.Input[str]]
        pitr_enabled: NotRequired[pulumi.Input[bool]]
        quarterly_retention: NotRequired[pulumi.Input[int]]
        reference_count: NotRequired[pulumi.Input[int]]
        system_sla: NotRequired[pulumi.Input[bool]]
        unique_name: NotRequired[pulumi.Input[str]]
        weekly_retention: NotRequired[pulumi.Input[int]]
        yearly_retention: NotRequired[pulumi.Input[int]]
elif False:
    NdbRegisterDatabaseTimeMachineSlaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineSlaArgs:
    def __init__(__self__, *,
                 continuous_retention: Optional[pulumi.Input[int]] = None,
                 current_active_frequency: Optional[pulumi.Input[str]] = None,
                 daily_retention: Optional[pulumi.Input[int]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 monthly_retention: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 pitr_enabled: Optional[pulumi.Input[bool]] = None,
                 quarterly_retention: Optional[pulumi.Input[int]] = None,
                 reference_count: Optional[pulumi.Input[int]] = None,
                 system_sla: Optional[pulumi.Input[bool]] = None,
                 unique_name: Optional[pulumi.Input[str]] = None,
                 weekly_retention: Optional[pulumi.Input[int]] = None,
                 yearly_retention: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description
        :param pulumi.Input[str] name: Name of database instance
        """
        if continuous_retention is not None:
            pulumi.set(__self__, "continuous_retention", continuous_retention)
        if current_active_frequency is not None:
            pulumi.set(__self__, "current_active_frequency", current_active_frequency)
        if daily_retention is not None:
            pulumi.set(__self__, "daily_retention", daily_retention)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_retention is not None:
            pulumi.set(__self__, "monthly_retention", monthly_retention)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if pitr_enabled is not None:
            pulumi.set(__self__, "pitr_enabled", pitr_enabled)
        if quarterly_retention is not None:
            pulumi.set(__self__, "quarterly_retention", quarterly_retention)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if system_sla is not None:
            pulumi.set(__self__, "system_sla", system_sla)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_retention is not None:
            pulumi.set(__self__, "weekly_retention", weekly_retention)
        if yearly_retention is not None:
            pulumi.set(__self__, "yearly_retention", yearly_retention)

    @property
    @pulumi.getter(name="continuousRetention")
    def continuous_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "continuous_retention")

    @continuous_retention.setter
    def continuous_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "continuous_retention", value)

    @property
    @pulumi.getter(name="currentActiveFrequency")
    def current_active_frequency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "current_active_frequency")

    @current_active_frequency.setter
    def current_active_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "current_active_frequency", value)

    @property
    @pulumi.getter(name="dailyRetention")
    def daily_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "daily_retention")

    @daily_retention.setter
    def daily_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "daily_retention", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="monthlyRetention")
    def monthly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "monthly_retention")

    @monthly_retention.setter
    def monthly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monthly_retention", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="pitrEnabled")
    def pitr_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pitr_enabled")

    @pitr_enabled.setter
    def pitr_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pitr_enabled", value)

    @property
    @pulumi.getter(name="quarterlyRetention")
    def quarterly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "quarterly_retention")

    @quarterly_retention.setter
    def quarterly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quarterly_retention", value)

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reference_count")

    @reference_count.setter
    def reference_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reference_count", value)

    @property
    @pulumi.getter(name="systemSla")
    def system_sla(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "system_sla")

    @system_sla.setter
    def system_sla(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "system_sla", value)

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unique_name")

    @unique_name.setter
    def unique_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_name", value)

    @property
    @pulumi.getter(name="weeklyRetention")
    def weekly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weekly_retention")

    @weekly_retention.setter
    def weekly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weekly_retention", value)

    @property
    @pulumi.getter(name="yearlyRetention")
    def yearly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "yearly_retention")

    @yearly_retention.setter
    def yearly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "yearly_retention", value)


if not MYPY:
    class NdbRegisterDatabaseTimeMachineTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
        """
        - (Required) value for argument
        """
elif False:
    NdbRegisterDatabaseTimeMachineTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDatabaseTimeMachineTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbRegisterDbserverCredentialArgsDict(TypedDict):
        password: pulumi.Input[str]
        """
        password of the NDB drive user account. Conflicts with ssh_key.
        """
        username: pulumi.Input[str]
        """
        username of the NDB drive user account that has sudo access
        """
        label: NotRequired[pulumi.Input[str]]
elif False:
    NdbRegisterDbserverCredentialArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDbserverCredentialArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str],
                 label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password: password of the NDB drive user account. Conflicts with ssh_key.
        :param pulumi.Input[str] username: username of the NDB drive user account that has sudo access
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        password of the NDB drive user account. Conflicts with ssh_key.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        username of the NDB drive user account that has sudo access
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)


if not MYPY:
    class NdbRegisterDbserverPostgresDatabaseArgsDict(TypedDict):
        listener_port: NotRequired[pulumi.Input[str]]
        """
        listener port of db server
        """
        postgres_software_home: NotRequired[pulumi.Input[str]]
        """
        path to the PostgreSQL home directory in which the PostgreSQL software is installed
        """
elif False:
    NdbRegisterDbserverPostgresDatabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDbserverPostgresDatabaseArgs:
    def __init__(__self__, *,
                 listener_port: Optional[pulumi.Input[str]] = None,
                 postgres_software_home: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] listener_port: listener port of db server
        :param pulumi.Input[str] postgres_software_home: path to the PostgreSQL home directory in which the PostgreSQL software is installed
        """
        if listener_port is not None:
            pulumi.set(__self__, "listener_port", listener_port)
        if postgres_software_home is not None:
            pulumi.set(__self__, "postgres_software_home", postgres_software_home)

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> Optional[pulumi.Input[str]]:
        """
        listener port of db server
        """
        return pulumi.get(self, "listener_port")

    @listener_port.setter
    def listener_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listener_port", value)

    @property
    @pulumi.getter(name="postgresSoftwareHome")
    def postgres_software_home(self) -> Optional[pulumi.Input[str]]:
        """
        path to the PostgreSQL home directory in which the PostgreSQL software is installed
        """
        return pulumi.get(self, "postgres_software_home")

    @postgres_software_home.setter
    def postgres_software_home(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postgres_software_home", value)


if not MYPY:
    class NdbRegisterDbserverPropertyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of db server vm. Should be used in Update Method only.
        """
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbRegisterDbserverPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDbserverPropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of db server vm. Should be used in Update Method only.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of db server vm. Should be used in Update Method only.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbRegisterDbserverTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbRegisterDbserverTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbRegisterDbserverTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbScaleDatabaseDatabaseNodeArgsDict(TypedDict):
        access_level: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        database_id: NotRequired[pulumi.Input[str]]
        database_status: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        dbserver: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        dbserver_id: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        id: NotRequired[pulumi.Input[str]]
        infos: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodeInfoArgsDict']]]]
        """
        info of instance
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        primary: NotRequired[pulumi.Input[bool]]
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodePropertyArgsDict']]]]
        """
        properties of database created
        """
        protection_domain_id: NotRequired[pulumi.Input[str]]
        protection_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodeProtectionDomainArgsDict']]]]
        software_installation_id: NotRequired[pulumi.Input[str]]
        status: NotRequired[pulumi.Input[str]]
        """
        status of instance
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodeTagArgsDict']]]]
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
elif False:
    NdbScaleDatabaseDatabaseNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseDatabaseNodeArgs:
    def __init__(__self__, *,
                 access_level: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 database_id: Optional[pulumi.Input[str]] = None,
                 database_status: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 dbserver: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 dbserver_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodeInfoArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodePropertyArgs']]]] = None,
                 protection_domain_id: Optional[pulumi.Input[str]] = None,
                 protection_domains: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodeProtectionDomainArgs']]]] = None,
                 software_installation_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodeTagArgs']]]] = None):
        """
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodeInfoArgs']]] infos: info of instance
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodePropertyArgs']]] properties: properties of database created
        :param pulumi.Input[str] status: status of instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodeTagArgs']]] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if dbserver is not None:
            pulumi.set(__self__, "dbserver", dbserver)
        if dbserver_id is not None:
            pulumi.set(__self__, "dbserver_id", dbserver_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if protection_domain_id is not None:
            pulumi.set(__self__, "protection_domain_id", protection_domain_id)
        if protection_domains is not None:
            pulumi.set(__self__, "protection_domains", protection_domains)
        if software_installation_id is not None:
            pulumi.set(__self__, "software_installation_id", software_installation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "access_level")

    @access_level.setter
    def access_level(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "access_level", value)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_id", value)

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_status")

    @database_status.setter
    def database_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_status", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def dbserver(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "dbserver")

    @dbserver.setter
    def dbserver(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "dbserver", value)

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dbserver_id")

    @dbserver_id.setter
    def dbserver_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbserver_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodeInfoArgs']]]]:
        """
        info of instance
        """
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodeInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodePropertyArgs']]]]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodePropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="protectionDomainId")
    def protection_domain_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protection_domain_id")

    @protection_domain_id.setter
    def protection_domain_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_domain_id", value)

    @property
    @pulumi.getter(name="protectionDomains")
    def protection_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodeProtectionDomainArgs']]]]:
        return pulumi.get(self, "protection_domains")

    @protection_domains.setter
    def protection_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodeProtectionDomainArgs']]]]):
        pulumi.set(self, "protection_domains", value)

    @property
    @pulumi.getter(name="softwareInstallationId")
    def software_installation_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "software_installation_id")

    @software_installation_id.setter
    def software_installation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "software_installation_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodeTagArgs']]]]:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodeTagArgs']]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class NdbScaleDatabaseDatabaseNodeInfoArgsDict(TypedDict):
        info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        info of instance
        """
        secure_info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    NdbScaleDatabaseDatabaseNodeInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseDatabaseNodeInfoArgs:
    def __init__(__self__, *,
                 info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 secure_info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] info: info of instance
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        info of instance
        """
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "secure_info")

    @secure_info.setter
    def secure_info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secure_info", value)


if not MYPY:
    class NdbScaleDatabaseDatabaseNodePropertyArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        ref_id: NotRequired[pulumi.Input[str]]
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbScaleDatabaseDatabaseNodePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseDatabaseNodePropertyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] name: Name of database instance
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbScaleDatabaseDatabaseNodeProtectionDomainArgsDict(TypedDict):
        assoc_entities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        cloud_id: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        era_created: NotRequired[pulumi.Input[bool]]
        id: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        owner_id: NotRequired[pulumi.Input[str]]
        primary_host: NotRequired[pulumi.Input[str]]
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodeProtectionDomainPropertyArgsDict']]]]
        """
        properties of database created
        """
        status: NotRequired[pulumi.Input[str]]
        """
        status of instance
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type of database
        """
elif False:
    NdbScaleDatabaseDatabaseNodeProtectionDomainArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseDatabaseNodeProtectionDomainArgs:
    def __init__(__self__, *,
                 assoc_entities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cloud_id: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 era_created: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 primary_host: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodeProtectionDomainPropertyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodeProtectionDomainPropertyArgs']]] properties: properties of database created
        :param pulumi.Input[str] status: status of instance
        :param pulumi.Input[str] type: type of database
        """
        if assoc_entities is not None:
            pulumi.set(__self__, "assoc_entities", assoc_entities)
        if cloud_id is not None:
            pulumi.set(__self__, "cloud_id", cloud_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if era_created is not None:
            pulumi.set(__self__, "era_created", era_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if primary_host is not None:
            pulumi.set(__self__, "primary_host", primary_host)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assocEntities")
    def assoc_entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "assoc_entities")

    @assoc_entities.setter
    def assoc_entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "assoc_entities", value)

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_id")

    @cloud_id.setter
    def cloud_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_id", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="eraCreated")
    def era_created(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "era_created")

    @era_created.setter
    def era_created(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "era_created", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="primaryHost")
    def primary_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_host")

    @primary_host.setter
    def primary_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_host", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodeProtectionDomainPropertyArgs']]]]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseDatabaseNodeProtectionDomainPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type of database
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NdbScaleDatabaseDatabaseNodeProtectionDomainPropertyArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        ref_id: NotRequired[pulumi.Input[str]]
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbScaleDatabaseDatabaseNodeProtectionDomainPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseDatabaseNodeProtectionDomainPropertyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] name: Name of database instance
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbScaleDatabaseDatabaseNodeTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbScaleDatabaseDatabaseNodeTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseDatabaseNodeTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbScaleDatabaseInfoArgsDict(TypedDict):
        bpg_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigArgsDict']]]]
        secure_info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    NdbScaleDatabaseInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseInfoArgs:
    def __init__(__self__, *,
                 bpg_configs: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigArgs']]]] = None,
                 secure_info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if bpg_configs is not None:
            pulumi.set(__self__, "bpg_configs", bpg_configs)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="bpgConfigs")
    def bpg_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigArgs']]]]:
        return pulumi.get(self, "bpg_configs")

    @bpg_configs.setter
    def bpg_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigArgs']]]]):
        pulumi.set(self, "bpg_configs", value)

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "secure_info")

    @secure_info.setter
    def secure_info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secure_info", value)


if not MYPY:
    class NdbScaleDatabaseInfoBpgConfigArgsDict(TypedDict):
        bpg_db_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigBpgDbParamArgsDict']]]]
        storages: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigStorageArgsDict']]]]
        vm_properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigVmPropertyArgsDict']]]]
elif False:
    NdbScaleDatabaseInfoBpgConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseInfoBpgConfigArgs:
    def __init__(__self__, *,
                 bpg_db_params: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigBpgDbParamArgs']]]] = None,
                 storages: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigStorageArgs']]]] = None,
                 vm_properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigVmPropertyArgs']]]] = None):
        if bpg_db_params is not None:
            pulumi.set(__self__, "bpg_db_params", bpg_db_params)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if vm_properties is not None:
            pulumi.set(__self__, "vm_properties", vm_properties)

    @property
    @pulumi.getter(name="bpgDbParams")
    def bpg_db_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigBpgDbParamArgs']]]]:
        return pulumi.get(self, "bpg_db_params")

    @bpg_db_params.setter
    def bpg_db_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigBpgDbParamArgs']]]]):
        pulumi.set(self, "bpg_db_params", value)

    @property
    @pulumi.getter
    def storages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigStorageArgs']]]]:
        return pulumi.get(self, "storages")

    @storages.setter
    def storages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigStorageArgs']]]]):
        pulumi.set(self, "storages", value)

    @property
    @pulumi.getter(name="vmProperties")
    def vm_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigVmPropertyArgs']]]]:
        return pulumi.get(self, "vm_properties")

    @vm_properties.setter
    def vm_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigVmPropertyArgs']]]]):
        pulumi.set(self, "vm_properties", value)


if not MYPY:
    class NdbScaleDatabaseInfoBpgConfigBpgDbParamArgsDict(TypedDict):
        effective_cache_size: NotRequired[pulumi.Input[str]]
        maintenance_work_mem: NotRequired[pulumi.Input[str]]
        max_parallel_workers_per_gather: NotRequired[pulumi.Input[str]]
        max_worker_processes: NotRequired[pulumi.Input[str]]
        shared_buffers: NotRequired[pulumi.Input[str]]
        work_mem: NotRequired[pulumi.Input[str]]
elif False:
    NdbScaleDatabaseInfoBpgConfigBpgDbParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseInfoBpgConfigBpgDbParamArgs:
    def __init__(__self__, *,
                 effective_cache_size: Optional[pulumi.Input[str]] = None,
                 maintenance_work_mem: Optional[pulumi.Input[str]] = None,
                 max_parallel_workers_per_gather: Optional[pulumi.Input[str]] = None,
                 max_worker_processes: Optional[pulumi.Input[str]] = None,
                 shared_buffers: Optional[pulumi.Input[str]] = None,
                 work_mem: Optional[pulumi.Input[str]] = None):
        if effective_cache_size is not None:
            pulumi.set(__self__, "effective_cache_size", effective_cache_size)
        if maintenance_work_mem is not None:
            pulumi.set(__self__, "maintenance_work_mem", maintenance_work_mem)
        if max_parallel_workers_per_gather is not None:
            pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if shared_buffers is not None:
            pulumi.set(__self__, "shared_buffers", shared_buffers)
        if work_mem is not None:
            pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="effectiveCacheSize")
    def effective_cache_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effective_cache_size")

    @effective_cache_size.setter
    def effective_cache_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effective_cache_size", value)

    @property
    @pulumi.getter(name="maintenanceWorkMem")
    def maintenance_work_mem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maintenance_work_mem")

    @maintenance_work_mem.setter
    def maintenance_work_mem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_work_mem", value)

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @max_parallel_workers_per_gather.setter
    def max_parallel_workers_per_gather(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_parallel_workers_per_gather", value)

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_worker_processes")

    @max_worker_processes.setter
    def max_worker_processes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_worker_processes", value)

    @property
    @pulumi.getter(name="sharedBuffers")
    def shared_buffers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shared_buffers")

    @shared_buffers.setter
    def shared_buffers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shared_buffers", value)

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "work_mem")

    @work_mem.setter
    def work_mem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_mem", value)


if not MYPY:
    class NdbScaleDatabaseInfoBpgConfigStorageArgsDict(TypedDict):
        archive_storages: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigStorageArchiveStorageArgsDict']]]]
        data_disks: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigStorageDataDiskArgsDict']]]]
        log_disks: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigStorageLogDiskArgsDict']]]]
elif False:
    NdbScaleDatabaseInfoBpgConfigStorageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseInfoBpgConfigStorageArgs:
    def __init__(__self__, *,
                 archive_storages: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigStorageArchiveStorageArgs']]]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigStorageDataDiskArgs']]]] = None,
                 log_disks: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigStorageLogDiskArgs']]]] = None):
        if archive_storages is not None:
            pulumi.set(__self__, "archive_storages", archive_storages)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if log_disks is not None:
            pulumi.set(__self__, "log_disks", log_disks)

    @property
    @pulumi.getter(name="archiveStorages")
    def archive_storages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigStorageArchiveStorageArgs']]]]:
        return pulumi.get(self, "archive_storages")

    @archive_storages.setter
    def archive_storages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigStorageArchiveStorageArgs']]]]):
        pulumi.set(self, "archive_storages", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigStorageDataDiskArgs']]]]:
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigStorageDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="logDisks")
    def log_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigStorageLogDiskArgs']]]]:
        return pulumi.get(self, "log_disks")

    @log_disks.setter
    def log_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseInfoBpgConfigStorageLogDiskArgs']]]]):
        pulumi.set(self, "log_disks", value)


if not MYPY:
    class NdbScaleDatabaseInfoBpgConfigStorageArchiveStorageArgsDict(TypedDict):
        size: NotRequired[pulumi.Input[float]]
elif False:
    NdbScaleDatabaseInfoBpgConfigStorageArchiveStorageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseInfoBpgConfigStorageArchiveStorageArgs:
    def __init__(__self__, *,
                 size: Optional[pulumi.Input[float]] = None):
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "size", value)


if not MYPY:
    class NdbScaleDatabaseInfoBpgConfigStorageDataDiskArgsDict(TypedDict):
        count: NotRequired[pulumi.Input[float]]
elif False:
    NdbScaleDatabaseInfoBpgConfigStorageDataDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseInfoBpgConfigStorageDataDiskArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[float]] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "count", value)


if not MYPY:
    class NdbScaleDatabaseInfoBpgConfigStorageLogDiskArgsDict(TypedDict):
        count: NotRequired[pulumi.Input[float]]
        size: NotRequired[pulumi.Input[float]]
elif False:
    NdbScaleDatabaseInfoBpgConfigStorageLogDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseInfoBpgConfigStorageLogDiskArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[float]] = None,
                 size: Optional[pulumi.Input[float]] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "size", value)


if not MYPY:
    class NdbScaleDatabaseInfoBpgConfigVmPropertyArgsDict(TypedDict):
        dirty_background_ratio: NotRequired[pulumi.Input[float]]
        dirty_expire_centisecs: NotRequired[pulumi.Input[float]]
        dirty_ratio: NotRequired[pulumi.Input[float]]
        dirty_writeback_centisecs: NotRequired[pulumi.Input[float]]
        nr_hugepages: NotRequired[pulumi.Input[float]]
        overcommit_memory: NotRequired[pulumi.Input[float]]
        swappiness: NotRequired[pulumi.Input[float]]
elif False:
    NdbScaleDatabaseInfoBpgConfigVmPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseInfoBpgConfigVmPropertyArgs:
    def __init__(__self__, *,
                 dirty_background_ratio: Optional[pulumi.Input[float]] = None,
                 dirty_expire_centisecs: Optional[pulumi.Input[float]] = None,
                 dirty_ratio: Optional[pulumi.Input[float]] = None,
                 dirty_writeback_centisecs: Optional[pulumi.Input[float]] = None,
                 nr_hugepages: Optional[pulumi.Input[float]] = None,
                 overcommit_memory: Optional[pulumi.Input[float]] = None,
                 swappiness: Optional[pulumi.Input[float]] = None):
        if dirty_background_ratio is not None:
            pulumi.set(__self__, "dirty_background_ratio", dirty_background_ratio)
        if dirty_expire_centisecs is not None:
            pulumi.set(__self__, "dirty_expire_centisecs", dirty_expire_centisecs)
        if dirty_ratio is not None:
            pulumi.set(__self__, "dirty_ratio", dirty_ratio)
        if dirty_writeback_centisecs is not None:
            pulumi.set(__self__, "dirty_writeback_centisecs", dirty_writeback_centisecs)
        if nr_hugepages is not None:
            pulumi.set(__self__, "nr_hugepages", nr_hugepages)
        if overcommit_memory is not None:
            pulumi.set(__self__, "overcommit_memory", overcommit_memory)
        if swappiness is not None:
            pulumi.set(__self__, "swappiness", swappiness)

    @property
    @pulumi.getter(name="dirtyBackgroundRatio")
    def dirty_background_ratio(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_background_ratio")

    @dirty_background_ratio.setter
    def dirty_background_ratio(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_background_ratio", value)

    @property
    @pulumi.getter(name="dirtyExpireCentisecs")
    def dirty_expire_centisecs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_expire_centisecs")

    @dirty_expire_centisecs.setter
    def dirty_expire_centisecs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_expire_centisecs", value)

    @property
    @pulumi.getter(name="dirtyRatio")
    def dirty_ratio(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_ratio")

    @dirty_ratio.setter
    def dirty_ratio(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_ratio", value)

    @property
    @pulumi.getter(name="dirtyWritebackCentisecs")
    def dirty_writeback_centisecs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dirty_writeback_centisecs")

    @dirty_writeback_centisecs.setter
    def dirty_writeback_centisecs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dirty_writeback_centisecs", value)

    @property
    @pulumi.getter(name="nrHugepages")
    def nr_hugepages(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "nr_hugepages")

    @nr_hugepages.setter
    def nr_hugepages(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "nr_hugepages", value)

    @property
    @pulumi.getter(name="overcommitMemory")
    def overcommit_memory(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "overcommit_memory")

    @overcommit_memory.setter
    def overcommit_memory(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "overcommit_memory", value)

    @property
    @pulumi.getter
    def swappiness(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "swappiness")

    @swappiness.setter
    def swappiness(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "swappiness", value)


if not MYPY:
    class NdbScaleDatabaseLcmConfigArgsDict(TypedDict):
        expiry_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLcmConfigExpiryDetailArgsDict']]]]
        post_delete_commands: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLcmConfigPostDeleteCommandArgsDict']]]]
        pre_delete_commands: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLcmConfigPreDeleteCommandArgsDict']]]]
        refresh_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLcmConfigRefreshDetailArgsDict']]]]
elif False:
    NdbScaleDatabaseLcmConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseLcmConfigArgs:
    def __init__(__self__, *,
                 expiry_details: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLcmConfigExpiryDetailArgs']]]] = None,
                 post_delete_commands: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLcmConfigPostDeleteCommandArgs']]]] = None,
                 pre_delete_commands: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLcmConfigPreDeleteCommandArgs']]]] = None,
                 refresh_details: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLcmConfigRefreshDetailArgs']]]] = None):
        if expiry_details is not None:
            pulumi.set(__self__, "expiry_details", expiry_details)
        if post_delete_commands is not None:
            pulumi.set(__self__, "post_delete_commands", post_delete_commands)
        if pre_delete_commands is not None:
            pulumi.set(__self__, "pre_delete_commands", pre_delete_commands)
        if refresh_details is not None:
            pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLcmConfigExpiryDetailArgs']]]]:
        return pulumi.get(self, "expiry_details")

    @expiry_details.setter
    def expiry_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLcmConfigExpiryDetailArgs']]]]):
        pulumi.set(self, "expiry_details", value)

    @property
    @pulumi.getter(name="postDeleteCommands")
    def post_delete_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLcmConfigPostDeleteCommandArgs']]]]:
        return pulumi.get(self, "post_delete_commands")

    @post_delete_commands.setter
    def post_delete_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLcmConfigPostDeleteCommandArgs']]]]):
        pulumi.set(self, "post_delete_commands", value)

    @property
    @pulumi.getter(name="preDeleteCommands")
    def pre_delete_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLcmConfigPreDeleteCommandArgs']]]]:
        return pulumi.get(self, "pre_delete_commands")

    @pre_delete_commands.setter
    def pre_delete_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLcmConfigPreDeleteCommandArgs']]]]):
        pulumi.set(self, "pre_delete_commands", value)

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLcmConfigRefreshDetailArgs']]]]:
        return pulumi.get(self, "refresh_details")

    @refresh_details.setter
    def refresh_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLcmConfigRefreshDetailArgs']]]]):
        pulumi.set(self, "refresh_details", value)


if not MYPY:
    class NdbScaleDatabaseLcmConfigExpiryDetailArgsDict(TypedDict):
        delete_database: NotRequired[pulumi.Input[bool]]
        delete_time_machine: NotRequired[pulumi.Input[bool]]
        delete_vm: NotRequired[pulumi.Input[bool]]
        effective_timestamp: NotRequired[pulumi.Input[str]]
        expire_in_days: NotRequired[pulumi.Input[int]]
        expiry_date_timezone: NotRequired[pulumi.Input[str]]
        expiry_timestamp: NotRequired[pulumi.Input[str]]
        remind_before_in_days: NotRequired[pulumi.Input[int]]
        user_created: NotRequired[pulumi.Input[bool]]
elif False:
    NdbScaleDatabaseLcmConfigExpiryDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseLcmConfigExpiryDetailArgs:
    def __init__(__self__, *,
                 delete_database: Optional[pulumi.Input[bool]] = None,
                 delete_time_machine: Optional[pulumi.Input[bool]] = None,
                 delete_vm: Optional[pulumi.Input[bool]] = None,
                 effective_timestamp: Optional[pulumi.Input[str]] = None,
                 expire_in_days: Optional[pulumi.Input[int]] = None,
                 expiry_date_timezone: Optional[pulumi.Input[str]] = None,
                 expiry_timestamp: Optional[pulumi.Input[str]] = None,
                 remind_before_in_days: Optional[pulumi.Input[int]] = None,
                 user_created: Optional[pulumi.Input[bool]] = None):
        if delete_database is not None:
            pulumi.set(__self__, "delete_database", delete_database)
        if delete_time_machine is not None:
            pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        if delete_vm is not None:
            pulumi.set(__self__, "delete_vm", delete_vm)
        if effective_timestamp is not None:
            pulumi.set(__self__, "effective_timestamp", effective_timestamp)
        if expire_in_days is not None:
            pulumi.set(__self__, "expire_in_days", expire_in_days)
        if expiry_date_timezone is not None:
            pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        if expiry_timestamp is not None:
            pulumi.set(__self__, "expiry_timestamp", expiry_timestamp)
        if remind_before_in_days is not None:
            pulumi.set(__self__, "remind_before_in_days", remind_before_in_days)
        if user_created is not None:
            pulumi.set(__self__, "user_created", user_created)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_database")

    @delete_database.setter
    def delete_database(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_database", value)

    @property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_time_machine")

    @delete_time_machine.setter
    def delete_time_machine(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_time_machine", value)

    @property
    @pulumi.getter(name="deleteVm")
    def delete_vm(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_vm")

    @delete_vm.setter
    def delete_vm(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_vm", value)

    @property
    @pulumi.getter(name="effectiveTimestamp")
    def effective_timestamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effective_timestamp")

    @effective_timestamp.setter
    def effective_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effective_timestamp", value)

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "expire_in_days")

    @expire_in_days.setter
    def expire_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expire_in_days", value)

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiry_date_timezone")

    @expiry_date_timezone.setter
    def expiry_date_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry_date_timezone", value)

    @property
    @pulumi.getter(name="expiryTimestamp")
    def expiry_timestamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiry_timestamp")

    @expiry_timestamp.setter
    def expiry_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry_timestamp", value)

    @property
    @pulumi.getter(name="remindBeforeInDays")
    def remind_before_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remind_before_in_days")

    @remind_before_in_days.setter
    def remind_before_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remind_before_in_days", value)

    @property
    @pulumi.getter(name="userCreated")
    def user_created(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "user_created")

    @user_created.setter
    def user_created(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_created", value)


if not MYPY:
    class NdbScaleDatabaseLcmConfigPostDeleteCommandArgsDict(TypedDict):
        command: NotRequired[pulumi.Input[str]]
elif False:
    NdbScaleDatabaseLcmConfigPostDeleteCommandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseLcmConfigPostDeleteCommandArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)


if not MYPY:
    class NdbScaleDatabaseLcmConfigPreDeleteCommandArgsDict(TypedDict):
        command: NotRequired[pulumi.Input[str]]
elif False:
    NdbScaleDatabaseLcmConfigPreDeleteCommandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseLcmConfigPreDeleteCommandArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)


if not MYPY:
    class NdbScaleDatabaseLcmConfigRefreshDetailArgsDict(TypedDict):
        last_refresh_date: NotRequired[pulumi.Input[str]]
        next_refresh_date: NotRequired[pulumi.Input[str]]
        refresh_date_timezone: NotRequired[pulumi.Input[str]]
        refresh_in_days: NotRequired[pulumi.Input[int]]
        refresh_in_hours: NotRequired[pulumi.Input[int]]
        refresh_in_months: NotRequired[pulumi.Input[int]]
        refresh_time: NotRequired[pulumi.Input[str]]
elif False:
    NdbScaleDatabaseLcmConfigRefreshDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseLcmConfigRefreshDetailArgs:
    def __init__(__self__, *,
                 last_refresh_date: Optional[pulumi.Input[str]] = None,
                 next_refresh_date: Optional[pulumi.Input[str]] = None,
                 refresh_date_timezone: Optional[pulumi.Input[str]] = None,
                 refresh_in_days: Optional[pulumi.Input[int]] = None,
                 refresh_in_hours: Optional[pulumi.Input[int]] = None,
                 refresh_in_months: Optional[pulumi.Input[int]] = None,
                 refresh_time: Optional[pulumi.Input[str]] = None):
        if last_refresh_date is not None:
            pulumi.set(__self__, "last_refresh_date", last_refresh_date)
        if next_refresh_date is not None:
            pulumi.set(__self__, "next_refresh_date", next_refresh_date)
        if refresh_date_timezone is not None:
            pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        if refresh_in_days is not None:
            pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        if refresh_in_hours is not None:
            pulumi.set(__self__, "refresh_in_hours", refresh_in_hours)
        if refresh_in_months is not None:
            pulumi.set(__self__, "refresh_in_months", refresh_in_months)
        if refresh_time is not None:
            pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="lastRefreshDate")
    def last_refresh_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_refresh_date")

    @last_refresh_date.setter
    def last_refresh_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_refresh_date", value)

    @property
    @pulumi.getter(name="nextRefreshDate")
    def next_refresh_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_refresh_date")

    @next_refresh_date.setter
    def next_refresh_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_refresh_date", value)

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_date_timezone")

    @refresh_date_timezone.setter
    def refresh_date_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_date_timezone", value)

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_in_days")

    @refresh_in_days.setter
    def refresh_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_in_days", value)

    @property
    @pulumi.getter(name="refreshInHours")
    def refresh_in_hours(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_in_hours")

    @refresh_in_hours.setter
    def refresh_in_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_in_hours", value)

    @property
    @pulumi.getter(name="refreshInMonths")
    def refresh_in_months(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_in_months")

    @refresh_in_months.setter
    def refresh_in_months(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_in_months", value)

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_time")

    @refresh_time.setter
    def refresh_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_time", value)


if not MYPY:
    class NdbScaleDatabaseLinkedDatabaseArgsDict(TypedDict):
        database_name: NotRequired[pulumi.Input[str]]
        """
        name of database
        """
        database_status: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        id: NotRequired[pulumi.Input[str]]
        infos: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLinkedDatabaseInfoArgsDict']]]]
        """
        info of instance
        """
        metric: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        parent_database_id: NotRequired[pulumi.Input[str]]
        """
        parent database id
        """
        parent_linked_database_id: NotRequired[pulumi.Input[str]]
        snapshot_id: NotRequired[pulumi.Input[str]]
        status: NotRequired[pulumi.Input[str]]
        """
        status of instance
        """
        timezone: NotRequired[pulumi.Input[str]]
elif False:
    NdbScaleDatabaseLinkedDatabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseLinkedDatabaseArgs:
    def __init__(__self__, *,
                 database_name: Optional[pulumi.Input[str]] = None,
                 database_status: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLinkedDatabaseInfoArgs']]]] = None,
                 metric: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_database_id: Optional[pulumi.Input[str]] = None,
                 parent_linked_database_id: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] database_name: name of database
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLinkedDatabaseInfoArgs']]] infos: info of instance
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metric: Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[str] parent_database_id: parent database id
        :param pulumi.Input[str] status: status of instance
        """
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_database_id is not None:
            pulumi.set(__self__, "parent_database_id", parent_database_id)
        if parent_linked_database_id is not None:
            pulumi.set(__self__, "parent_linked_database_id", parent_linked_database_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of database
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_status")

    @database_status.setter
    def database_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_status", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLinkedDatabaseInfoArgs']]]]:
        """
        info of instance
        """
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseLinkedDatabaseInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> Optional[pulumi.Input[str]]:
        """
        parent database id
        """
        return pulumi.get(self, "parent_database_id")

    @parent_database_id.setter
    def parent_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_database_id", value)

    @property
    @pulumi.getter(name="parentLinkedDatabaseId")
    def parent_linked_database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parent_linked_database_id")

    @parent_linked_database_id.setter
    def parent_linked_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_linked_database_id", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


if not MYPY:
    class NdbScaleDatabaseLinkedDatabaseInfoArgsDict(TypedDict):
        info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        info of instance
        """
        secure_info: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    NdbScaleDatabaseLinkedDatabaseInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseLinkedDatabaseInfoArgs:
    def __init__(__self__, *,
                 info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 secure_info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] info: info of instance
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        info of instance
        """
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "secure_info")

    @secure_info.setter
    def secure_info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secure_info", value)


if not MYPY:
    class NdbScaleDatabasePropertyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbScaleDatabasePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabasePropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of database instance
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbScaleDatabaseTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbScaleDatabaseTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbScaleDatabaseTimeMachineArgsDict(TypedDict):
        access_level: NotRequired[pulumi.Input[str]]
        clone: NotRequired[pulumi.Input[bool]]
        """
        whether instance is cloned or not
        """
        clones: NotRequired[pulumi.Input[str]]
        clustered: NotRequired[pulumi.Input[bool]]
        database: NotRequired[pulumi.Input[str]]
        database_id: NotRequired[pulumi.Input[str]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        ea_status: NotRequired[pulumi.Input[str]]
        id: NotRequired[pulumi.Input[str]]
        metric: NotRequired[pulumi.Input[str]]
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachinePropertyArgsDict']]]]
        """
        properties of database created
        """
        schedule_id: NotRequired[pulumi.Input[str]]
        schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleArgsDict']]]]
        scope: NotRequired[pulumi.Input[str]]
        sla_id: NotRequired[pulumi.Input[str]]
        sla_update_in_progress: NotRequired[pulumi.Input[bool]]
        sla_update_metadata: NotRequired[pulumi.Input[str]]
        slas: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineSlaArgsDict']]]]
        source_nx_clusters: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        status: NotRequired[pulumi.Input[str]]
        """
        status of instance
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineTagArgsDict']]]]
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type of database
        """
elif False:
    NdbScaleDatabaseTimeMachineArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseTimeMachineArgs:
    def __init__(__self__, *,
                 access_level: Optional[pulumi.Input[str]] = None,
                 clone: Optional[pulumi.Input[bool]] = None,
                 clones: Optional[pulumi.Input[str]] = None,
                 clustered: Optional[pulumi.Input[bool]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 database_id: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ea_status: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachinePropertyArgs']]]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleArgs']]]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 sla_id: Optional[pulumi.Input[str]] = None,
                 sla_update_in_progress: Optional[pulumi.Input[bool]] = None,
                 sla_update_metadata: Optional[pulumi.Input[str]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineSlaArgs']]]] = None,
                 source_nx_clusters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineTagArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] clone: whether instance is cloned or not
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] metric: Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachinePropertyArgs']]] properties: properties of database created
        :param pulumi.Input[str] status: status of instance
        :param pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineTagArgs']]] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        :param pulumi.Input[str] type: type of database
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if clone is not None:
            pulumi.set(__self__, "clone", clone)
        if clones is not None:
            pulumi.set(__self__, "clones", clones)
        if clustered is not None:
            pulumi.set(__self__, "clustered", clustered)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ea_status is not None:
            pulumi.set(__self__, "ea_status", ea_status)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)
        if sla_update_in_progress is not None:
            pulumi.set(__self__, "sla_update_in_progress", sla_update_in_progress)
        if sla_update_metadata is not None:
            pulumi.set(__self__, "sla_update_metadata", sla_update_metadata)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if source_nx_clusters is not None:
            pulumi.set(__self__, "source_nx_clusters", source_nx_clusters)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_level")

    @access_level.setter
    def access_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_level", value)

    @property
    @pulumi.getter
    def clone(self) -> Optional[pulumi.Input[bool]]:
        """
        whether instance is cloned or not
        """
        return pulumi.get(self, "clone")

    @clone.setter
    def clone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "clone", value)

    @property
    @pulumi.getter
    def clones(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "clones")

    @clones.setter
    def clones(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clones", value)

    @property
    @pulumi.getter
    def clustered(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "clustered")

    @clustered.setter
    def clustered(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "clustered", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_id", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="eaStatus")
    def ea_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ea_status")

    @ea_status.setter
    def ea_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ea_status", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachinePropertyArgs']]]]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachinePropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_id", value)

    @property
    @pulumi.getter
    def schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleArgs']]]]:
        return pulumi.get(self, "schedules")

    @schedules.setter
    def schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleArgs']]]]):
        pulumi.set(self, "schedules", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sla_id")

    @sla_id.setter
    def sla_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_id", value)

    @property
    @pulumi.getter(name="slaUpdateInProgress")
    def sla_update_in_progress(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sla_update_in_progress")

    @sla_update_in_progress.setter
    def sla_update_in_progress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sla_update_in_progress", value)

    @property
    @pulumi.getter(name="slaUpdateMetadata")
    def sla_update_metadata(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sla_update_metadata")

    @sla_update_metadata.setter
    def sla_update_metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_update_metadata", value)

    @property
    @pulumi.getter
    def slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineSlaArgs']]]]:
        return pulumi.get(self, "slas")

    @slas.setter
    def slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineSlaArgs']]]]):
        pulumi.set(self, "slas", value)

    @property
    @pulumi.getter(name="sourceNxClusters")
    def source_nx_clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "source_nx_clusters")

    @source_nx_clusters.setter
    def source_nx_clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_nx_clusters", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineTagArgs']]]]:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type of database
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NdbScaleDatabaseTimeMachinePropertyArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        ref_id: NotRequired[pulumi.Input[str]]
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbScaleDatabaseTimeMachinePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseTimeMachinePropertyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] name: Name of database instance
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbScaleDatabaseTimeMachineScheduleArgsDict(TypedDict):
        continuous_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleContinuousScheduleArgsDict']]]]
        daily_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleDailyScheduleArgsDict']]]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        global_policy: NotRequired[pulumi.Input[bool]]
        id: NotRequired[pulumi.Input[str]]
        monthly_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleMonthlyScheduleArgsDict']]]]
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        owner_id: NotRequired[pulumi.Input[str]]
        quartely_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleQuartelyScheduleArgsDict']]]]
        reference_count: NotRequired[pulumi.Input[int]]
        snapshot_time_of_days: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDayArgsDict']]]]
        start_time: NotRequired[pulumi.Input[str]]
        system_policy: NotRequired[pulumi.Input[bool]]
        time_zone: NotRequired[pulumi.Input[str]]
        """
        timezone on which instance is created xw
        """
        unique_name: NotRequired[pulumi.Input[str]]
        weekly_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleWeeklyScheduleArgsDict']]]]
        yearly_schedules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleYearlyScheduleArgsDict']]]]
elif False:
    NdbScaleDatabaseTimeMachineScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseTimeMachineScheduleArgs:
    def __init__(__self__, *,
                 continuous_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleContinuousScheduleArgs']]]] = None,
                 daily_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleDailyScheduleArgs']]]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 global_policy: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 monthly_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleMonthlyScheduleArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 quartely_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleQuartelyScheduleArgs']]]] = None,
                 reference_count: Optional[pulumi.Input[int]] = None,
                 snapshot_time_of_days: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDayArgs']]]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 system_policy: Optional[pulumi.Input[bool]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 unique_name: Optional[pulumi.Input[str]] = None,
                 weekly_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleWeeklyScheduleArgs']]]] = None,
                 yearly_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleYearlyScheduleArgs']]]] = None):
        """
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] name: Name of database instance
        :param pulumi.Input[str] time_zone: timezone on which instance is created xw
        """
        if continuous_schedules is not None:
            pulumi.set(__self__, "continuous_schedules", continuous_schedules)
        if daily_schedules is not None:
            pulumi.set(__self__, "daily_schedules", daily_schedules)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if global_policy is not None:
            pulumi.set(__self__, "global_policy", global_policy)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_schedules is not None:
            pulumi.set(__self__, "monthly_schedules", monthly_schedules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if quartely_schedules is not None:
            pulumi.set(__self__, "quartely_schedules", quartely_schedules)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if snapshot_time_of_days is not None:
            pulumi.set(__self__, "snapshot_time_of_days", snapshot_time_of_days)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if system_policy is not None:
            pulumi.set(__self__, "system_policy", system_policy)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_schedules is not None:
            pulumi.set(__self__, "weekly_schedules", weekly_schedules)
        if yearly_schedules is not None:
            pulumi.set(__self__, "yearly_schedules", yearly_schedules)

    @property
    @pulumi.getter(name="continuousSchedules")
    def continuous_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleContinuousScheduleArgs']]]]:
        return pulumi.get(self, "continuous_schedules")

    @continuous_schedules.setter
    def continuous_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleContinuousScheduleArgs']]]]):
        pulumi.set(self, "continuous_schedules", value)

    @property
    @pulumi.getter(name="dailySchedules")
    def daily_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleDailyScheduleArgs']]]]:
        return pulumi.get(self, "daily_schedules")

    @daily_schedules.setter
    def daily_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleDailyScheduleArgs']]]]):
        pulumi.set(self, "daily_schedules", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="globalPolicy")
    def global_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_policy")

    @global_policy.setter
    def global_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_policy", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="monthlySchedules")
    def monthly_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleMonthlyScheduleArgs']]]]:
        return pulumi.get(self, "monthly_schedules")

    @monthly_schedules.setter
    def monthly_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleMonthlyScheduleArgs']]]]):
        pulumi.set(self, "monthly_schedules", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="quartelySchedules")
    def quartely_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleQuartelyScheduleArgs']]]]:
        return pulumi.get(self, "quartely_schedules")

    @quartely_schedules.setter
    def quartely_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleQuartelyScheduleArgs']]]]):
        pulumi.set(self, "quartely_schedules", value)

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reference_count")

    @reference_count.setter
    def reference_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reference_count", value)

    @property
    @pulumi.getter(name="snapshotTimeOfDays")
    def snapshot_time_of_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDayArgs']]]]:
        return pulumi.get(self, "snapshot_time_of_days")

    @snapshot_time_of_days.setter
    def snapshot_time_of_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDayArgs']]]]):
        pulumi.set(self, "snapshot_time_of_days", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="systemPolicy")
    def system_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "system_policy")

    @system_policy.setter
    def system_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "system_policy", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        timezone on which instance is created xw
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unique_name")

    @unique_name.setter
    def unique_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_name", value)

    @property
    @pulumi.getter(name="weeklySchedules")
    def weekly_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleWeeklyScheduleArgs']]]]:
        return pulumi.get(self, "weekly_schedules")

    @weekly_schedules.setter
    def weekly_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleWeeklyScheduleArgs']]]]):
        pulumi.set(self, "weekly_schedules", value)

    @property
    @pulumi.getter(name="yearlySchedules")
    def yearly_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleYearlyScheduleArgs']]]]:
        return pulumi.get(self, "yearly_schedules")

    @yearly_schedules.setter
    def yearly_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbScaleDatabaseTimeMachineScheduleYearlyScheduleArgs']]]]):
        pulumi.set(self, "yearly_schedules", value)


if not MYPY:
    class NdbScaleDatabaseTimeMachineScheduleContinuousScheduleArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        log_backup_interval: NotRequired[pulumi.Input[int]]
        snapshots_per_day: NotRequired[pulumi.Input[int]]
elif False:
    NdbScaleDatabaseTimeMachineScheduleContinuousScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseTimeMachineScheduleContinuousScheduleArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_backup_interval: Optional[pulumi.Input[int]] = None,
                 snapshots_per_day: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_backup_interval is not None:
            pulumi.set(__self__, "log_backup_interval", log_backup_interval)
        if snapshots_per_day is not None:
            pulumi.set(__self__, "snapshots_per_day", snapshots_per_day)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logBackupInterval")
    def log_backup_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "log_backup_interval")

    @log_backup_interval.setter
    def log_backup_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_backup_interval", value)

    @property
    @pulumi.getter(name="snapshotsPerDay")
    def snapshots_per_day(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "snapshots_per_day")

    @snapshots_per_day.setter
    def snapshots_per_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "snapshots_per_day", value)


if not MYPY:
    class NdbScaleDatabaseTimeMachineScheduleDailyScheduleArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    NdbScaleDatabaseTimeMachineScheduleDailyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseTimeMachineScheduleDailyScheduleArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbScaleDatabaseTimeMachineScheduleMonthlyScheduleArgsDict(TypedDict):
        day_of_month: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    NdbScaleDatabaseTimeMachineScheduleMonthlyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseTimeMachineScheduleMonthlyScheduleArgs:
    def __init__(__self__, *,
                 day_of_month: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbScaleDatabaseTimeMachineScheduleQuartelyScheduleArgsDict(TypedDict):
        day_of_month: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
        start_month: NotRequired[pulumi.Input[str]]
        start_month_value: NotRequired[pulumi.Input[str]]
elif False:
    NdbScaleDatabaseTimeMachineScheduleQuartelyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseTimeMachineScheduleQuartelyScheduleArgs:
    def __init__(__self__, *,
                 day_of_month: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 start_month: Optional[pulumi.Input[str]] = None,
                 start_month_value: Optional[pulumi.Input[str]] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if start_month is not None:
            pulumi.set(__self__, "start_month", start_month)
        if start_month_value is not None:
            pulumi.set(__self__, "start_month_value", start_month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="startMonth")
    def start_month(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_month")

    @start_month.setter
    def start_month(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_month", value)

    @property
    @pulumi.getter(name="startMonthValue")
    def start_month_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_month_value")

    @start_month_value.setter
    def start_month_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_month_value", value)


if not MYPY:
    class NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDayArgsDict(TypedDict):
        extra: NotRequired[pulumi.Input[bool]]
        hours: NotRequired[pulumi.Input[int]]
        minutes: NotRequired[pulumi.Input[int]]
        seconds: NotRequired[pulumi.Input[int]]
elif False:
    NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDayArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDayArgs:
    def __init__(__self__, *,
                 extra: Optional[pulumi.Input[bool]] = None,
                 hours: Optional[pulumi.Input[int]] = None,
                 minutes: Optional[pulumi.Input[int]] = None,
                 seconds: Optional[pulumi.Input[int]] = None):
        if extra is not None:
            pulumi.set(__self__, "extra", extra)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def extra(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "extra")

    @extra.setter
    def extra(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extra", value)

    @property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hours", value)

    @property
    @pulumi.getter
    def minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minutes", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)


if not MYPY:
    class NdbScaleDatabaseTimeMachineScheduleWeeklyScheduleArgsDict(TypedDict):
        day_of_week: NotRequired[pulumi.Input[str]]
        day_of_week_value: NotRequired[pulumi.Input[str]]
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    NdbScaleDatabaseTimeMachineScheduleWeeklyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseTimeMachineScheduleWeeklyScheduleArgs:
    def __init__(__self__, *,
                 day_of_week: Optional[pulumi.Input[str]] = None,
                 day_of_week_value: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if day_of_week_value is not None:
            pulumi.set(__self__, "day_of_week_value", day_of_week_value)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week", value)

    @property
    @pulumi.getter(name="dayOfWeekValue")
    def day_of_week_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "day_of_week_value")

    @day_of_week_value.setter
    def day_of_week_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week_value", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NdbScaleDatabaseTimeMachineScheduleYearlyScheduleArgsDict(TypedDict):
        day_of_month: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
        month: NotRequired[pulumi.Input[str]]
        month_value: NotRequired[pulumi.Input[str]]
elif False:
    NdbScaleDatabaseTimeMachineScheduleYearlyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseTimeMachineScheduleYearlyScheduleArgs:
    def __init__(__self__, *,
                 day_of_month: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 month: Optional[pulumi.Input[str]] = None,
                 month_value: Optional[pulumi.Input[str]] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if month_value is not None:
            pulumi.set(__self__, "month_value", month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def month(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "month")

    @month.setter
    def month(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "month", value)

    @property
    @pulumi.getter(name="monthValue")
    def month_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "month_value")

    @month_value.setter
    def month_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "month_value", value)


if not MYPY:
    class NdbScaleDatabaseTimeMachineSlaArgsDict(TypedDict):
        continuous_retention: NotRequired[pulumi.Input[int]]
        current_active_frequency: NotRequired[pulumi.Input[str]]
        daily_retention: NotRequired[pulumi.Input[int]]
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created for db instance
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified for instance
        """
        description: NotRequired[pulumi.Input[str]]
        """
        description of database instance
        """
        id: NotRequired[pulumi.Input[str]]
        monthly_retention: NotRequired[pulumi.Input[int]]
        name: NotRequired[pulumi.Input[str]]
        """
        Name of database instance
        """
        owner_id: NotRequired[pulumi.Input[str]]
        pitr_enabled: NotRequired[pulumi.Input[bool]]
        quarterly_retention: NotRequired[pulumi.Input[int]]
        reference_count: NotRequired[pulumi.Input[int]]
        system_sla: NotRequired[pulumi.Input[bool]]
        unique_name: NotRequired[pulumi.Input[str]]
        weekly_retention: NotRequired[pulumi.Input[int]]
        yearly_retention: NotRequired[pulumi.Input[int]]
elif False:
    NdbScaleDatabaseTimeMachineSlaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseTimeMachineSlaArgs:
    def __init__(__self__, *,
                 continuous_retention: Optional[pulumi.Input[int]] = None,
                 current_active_frequency: Optional[pulumi.Input[str]] = None,
                 daily_retention: Optional[pulumi.Input[int]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 monthly_retention: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 pitr_enabled: Optional[pulumi.Input[bool]] = None,
                 quarterly_retention: Optional[pulumi.Input[int]] = None,
                 reference_count: Optional[pulumi.Input[int]] = None,
                 system_sla: Optional[pulumi.Input[bool]] = None,
                 unique_name: Optional[pulumi.Input[str]] = None,
                 weekly_retention: Optional[pulumi.Input[int]] = None,
                 yearly_retention: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] date_created: date created for db instance
        :param pulumi.Input[str] date_modified: date modified for instance
        :param pulumi.Input[str] description: description of database instance
        :param pulumi.Input[str] name: Name of database instance
        """
        if continuous_retention is not None:
            pulumi.set(__self__, "continuous_retention", continuous_retention)
        if current_active_frequency is not None:
            pulumi.set(__self__, "current_active_frequency", current_active_frequency)
        if daily_retention is not None:
            pulumi.set(__self__, "daily_retention", daily_retention)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_retention is not None:
            pulumi.set(__self__, "monthly_retention", monthly_retention)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if pitr_enabled is not None:
            pulumi.set(__self__, "pitr_enabled", pitr_enabled)
        if quarterly_retention is not None:
            pulumi.set(__self__, "quarterly_retention", quarterly_retention)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if system_sla is not None:
            pulumi.set(__self__, "system_sla", system_sla)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_retention is not None:
            pulumi.set(__self__, "weekly_retention", weekly_retention)
        if yearly_retention is not None:
            pulumi.set(__self__, "yearly_retention", yearly_retention)

    @property
    @pulumi.getter(name="continuousRetention")
    def continuous_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "continuous_retention")

    @continuous_retention.setter
    def continuous_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "continuous_retention", value)

    @property
    @pulumi.getter(name="currentActiveFrequency")
    def current_active_frequency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "current_active_frequency")

    @current_active_frequency.setter
    def current_active_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "current_active_frequency", value)

    @property
    @pulumi.getter(name="dailyRetention")
    def daily_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "daily_retention")

    @daily_retention.setter
    def daily_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "daily_retention", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="monthlyRetention")
    def monthly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "monthly_retention")

    @monthly_retention.setter
    def monthly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monthly_retention", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="pitrEnabled")
    def pitr_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pitr_enabled")

    @pitr_enabled.setter
    def pitr_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pitr_enabled", value)

    @property
    @pulumi.getter(name="quarterlyRetention")
    def quarterly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "quarterly_retention")

    @quarterly_retention.setter
    def quarterly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quarterly_retention", value)

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reference_count")

    @reference_count.setter
    def reference_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reference_count", value)

    @property
    @pulumi.getter(name="systemSla")
    def system_sla(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "system_sla")

    @system_sla.setter
    def system_sla(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "system_sla", value)

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unique_name")

    @unique_name.setter
    def unique_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_name", value)

    @property
    @pulumi.getter(name="weeklyRetention")
    def weekly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weekly_retention")

    @weekly_retention.setter
    def weekly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weekly_retention", value)

    @property
    @pulumi.getter(name="yearlyRetention")
    def yearly_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "yearly_retention")

    @yearly_retention.setter
    def yearly_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "yearly_retention", value)


if not MYPY:
    class NdbScaleDatabaseTimeMachineTagArgsDict(TypedDict):
        entity_id: NotRequired[pulumi.Input[str]]
        entity_type: NotRequired[pulumi.Input[str]]
        tag_id: NotRequired[pulumi.Input[str]]
        tag_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbScaleDatabaseTimeMachineTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbScaleDatabaseTimeMachineTagArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbSoftwareVersionProfilePostgresDatabaseArgsDict(TypedDict):
        db_software_notes: NotRequired[pulumi.Input[str]]
        """
        db software notes
        """
        os_notes: NotRequired[pulumi.Input[str]]
        """
        os notes for software profile
        """
        source_dbserver_id: NotRequired[pulumi.Input[str]]
        """
        source dbserver id
        """
elif False:
    NdbSoftwareVersionProfilePostgresDatabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbSoftwareVersionProfilePostgresDatabaseArgs:
    def __init__(__self__, *,
                 db_software_notes: Optional[pulumi.Input[str]] = None,
                 os_notes: Optional[pulumi.Input[str]] = None,
                 source_dbserver_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] db_software_notes: db software notes
        :param pulumi.Input[str] os_notes: os notes for software profile
        :param pulumi.Input[str] source_dbserver_id: source dbserver id
        """
        if db_software_notes is not None:
            pulumi.set(__self__, "db_software_notes", db_software_notes)
        if os_notes is not None:
            pulumi.set(__self__, "os_notes", os_notes)
        if source_dbserver_id is not None:
            pulumi.set(__self__, "source_dbserver_id", source_dbserver_id)

    @property
    @pulumi.getter(name="dbSoftwareNotes")
    def db_software_notes(self) -> Optional[pulumi.Input[str]]:
        """
        db software notes
        """
        return pulumi.get(self, "db_software_notes")

    @db_software_notes.setter
    def db_software_notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_software_notes", value)

    @property
    @pulumi.getter(name="osNotes")
    def os_notes(self) -> Optional[pulumi.Input[str]]:
        """
        os notes for software profile
        """
        return pulumi.get(self, "os_notes")

    @os_notes.setter
    def os_notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_notes", value)

    @property
    @pulumi.getter(name="sourceDbserverId")
    def source_dbserver_id(self) -> Optional[pulumi.Input[str]]:
        """
        source dbserver id
        """
        return pulumi.get(self, "source_dbserver_id")

    @source_dbserver_id.setter
    def source_dbserver_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_dbserver_id", value)


if not MYPY:
    class NdbSoftwareVersionProfilePropertyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of profile
        """
        secure: NotRequired[pulumi.Input[bool]]
        """
        secure or not
        """
        value: NotRequired[pulumi.Input[str]]
        """
        value of property
        """
elif False:
    NdbSoftwareVersionProfilePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbSoftwareVersionProfilePropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of profile
        :param pulumi.Input[bool] secure: secure or not
        :param pulumi.Input[str] value: value of property
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of profile
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        """
        secure or not
        """
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        value of property
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbSoftwareVersionProfileVersionClusterAssociationArgsDict(TypedDict):
        date_created: NotRequired[pulumi.Input[str]]
        """
        date created of profile
        """
        date_modified: NotRequired[pulumi.Input[str]]
        """
        date modified of profile
        """
        nx_cluster_id: NotRequired[pulumi.Input[str]]
        """
        nutanix cluster id
        """
        optimized_for_provisioning: NotRequired[pulumi.Input[bool]]
        """
        version optimized for provisioning
        """
        owner_id: NotRequired[pulumi.Input[str]]
        """
        owner id
        """
        profile_version_id: NotRequired[pulumi.Input[str]]
        """
        profile version id
        """
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbSoftwareVersionProfileVersionClusterAssociationPropertyArgsDict']]]]
        """
        properties of software profile
        """
        status: NotRequired[pulumi.Input[str]]
        """
        status of profile. Allowed Values are "deprecated", "published", "unpublished"
        """
elif False:
    NdbSoftwareVersionProfileVersionClusterAssociationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbSoftwareVersionProfileVersionClusterAssociationArgs:
    def __init__(__self__, *,
                 date_created: Optional[pulumi.Input[str]] = None,
                 date_modified: Optional[pulumi.Input[str]] = None,
                 nx_cluster_id: Optional[pulumi.Input[str]] = None,
                 optimized_for_provisioning: Optional[pulumi.Input[bool]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 profile_version_id: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbSoftwareVersionProfileVersionClusterAssociationPropertyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] date_created: date created of profile
        :param pulumi.Input[str] date_modified: date modified of profile
        :param pulumi.Input[str] nx_cluster_id: nutanix cluster id
        :param pulumi.Input[bool] optimized_for_provisioning: version optimized for provisioning
        :param pulumi.Input[str] owner_id: owner id
        :param pulumi.Input[str] profile_version_id: profile version id
        :param pulumi.Input[Sequence[pulumi.Input['NdbSoftwareVersionProfileVersionClusterAssociationPropertyArgs']]] properties: properties of software profile
        :param pulumi.Input[str] status: status of profile. Allowed Values are "deprecated", "published", "unpublished"
        """
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if nx_cluster_id is not None:
            pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        if optimized_for_provisioning is not None:
            pulumi.set(__self__, "optimized_for_provisioning", optimized_for_provisioning)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if profile_version_id is not None:
            pulumi.set(__self__, "profile_version_id", profile_version_id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        date created of profile
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[str]]:
        """
        date modified of profile
        """
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_modified", value)

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        nutanix cluster id
        """
        return pulumi.get(self, "nx_cluster_id")

    @nx_cluster_id.setter
    def nx_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nx_cluster_id", value)

    @property
    @pulumi.getter(name="optimizedForProvisioning")
    def optimized_for_provisioning(self) -> Optional[pulumi.Input[bool]]:
        """
        version optimized for provisioning
        """
        return pulumi.get(self, "optimized_for_provisioning")

    @optimized_for_provisioning.setter
    def optimized_for_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optimized_for_provisioning", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        """
        owner id
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="profileVersionId")
    def profile_version_id(self) -> Optional[pulumi.Input[str]]:
        """
        profile version id
        """
        return pulumi.get(self, "profile_version_id")

    @profile_version_id.setter
    def profile_version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_version_id", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbSoftwareVersionProfileVersionClusterAssociationPropertyArgs']]]]:
        """
        properties of software profile
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbSoftwareVersionProfileVersionClusterAssociationPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of profile. Allowed Values are "deprecated", "published", "unpublished"
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class NdbSoftwareVersionProfileVersionClusterAssociationPropertyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of profile
        """
        secure: NotRequired[pulumi.Input[bool]]
        """
        secure or not
        """
        value: NotRequired[pulumi.Input[str]]
        """
        value of property
        """
elif False:
    NdbSoftwareVersionProfileVersionClusterAssociationPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbSoftwareVersionProfileVersionClusterAssociationPropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of profile
        :param pulumi.Input[bool] secure: secure or not
        :param pulumi.Input[str] value: value of property
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of profile
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        """
        secure or not
        """
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        value of property
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NdbStretchedVlanMetadataArgsDict(TypedDict):
        gateway: NotRequired[pulumi.Input[str]]
        subnet_mask: NotRequired[pulumi.Input[str]]
elif False:
    NdbStretchedVlanMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbStretchedVlanMetadataArgs:
    def __init__(__self__, *,
                 gateway: Optional[pulumi.Input[str]] = None,
                 subnet_mask: Optional[pulumi.Input[str]] = None):
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_mask", value)


if not MYPY:
    class NdbStretchedVlanVlansListArgsDict(TypedDict):
        cluster_id: NotRequired[pulumi.Input[str]]
        """
        cluster id where network is present
        """
        id: NotRequired[pulumi.Input[str]]
        """
        network id
        """
        managed: NotRequired[pulumi.Input[bool]]
        """
        network managed by NDB or not
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name for the stretched VLAN
        """
        properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbStretchedVlanVlansListPropertyArgsDict']]]]
        """
        properties of network
        """
        properties_maps: NotRequired[pulumi.Input[Sequence[pulumi.Input['NdbStretchedVlanVlansListPropertiesMapArgsDict']]]]
        """
        properties map of network
        """
        stretched_vlan_id: NotRequired[pulumi.Input[str]]
        """
        stretched vlan id
        """
        type: NotRequired[pulumi.Input[str]]
        """
        type of vlan. static VLANs that are managed in NDB can be added to a stretched VLAN.
        """
elif False:
    NdbStretchedVlanVlansListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbStretchedVlanVlansListArgs:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 managed: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbStretchedVlanVlansListPropertyArgs']]]] = None,
                 properties_maps: Optional[pulumi.Input[Sequence[pulumi.Input['NdbStretchedVlanVlansListPropertiesMapArgs']]]] = None,
                 stretched_vlan_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cluster_id: cluster id where network is present
        :param pulumi.Input[str] id: network id
        :param pulumi.Input[bool] managed: network managed by NDB or not
        :param pulumi.Input[str] name: name for the stretched VLAN
        :param pulumi.Input[Sequence[pulumi.Input['NdbStretchedVlanVlansListPropertyArgs']]] properties: properties of network
        :param pulumi.Input[Sequence[pulumi.Input['NdbStretchedVlanVlansListPropertiesMapArgs']]] properties_maps: properties map of network
        :param pulumi.Input[str] stretched_vlan_id: stretched vlan id
        :param pulumi.Input[str] type: type of vlan. static VLANs that are managed in NDB can be added to a stretched VLAN.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if managed is not None:
            pulumi.set(__self__, "managed", managed)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if properties_maps is not None:
            pulumi.set(__self__, "properties_maps", properties_maps)
        if stretched_vlan_id is not None:
            pulumi.set(__self__, "stretched_vlan_id", stretched_vlan_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        cluster id where network is present
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        network id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def managed(self) -> Optional[pulumi.Input[bool]]:
        """
        network managed by NDB or not
        """
        return pulumi.get(self, "managed")

    @managed.setter
    def managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "managed", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name for the stretched VLAN
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbStretchedVlanVlansListPropertyArgs']]]]:
        """
        properties of network
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbStretchedVlanVlansListPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="propertiesMaps")
    def properties_maps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbStretchedVlanVlansListPropertiesMapArgs']]]]:
        """
        properties map of network
        """
        return pulumi.get(self, "properties_maps")

    @properties_maps.setter
    def properties_maps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbStretchedVlanVlansListPropertiesMapArgs']]]]):
        pulumi.set(self, "properties_maps", value)

    @property
    @pulumi.getter(name="stretchedVlanId")
    def stretched_vlan_id(self) -> Optional[pulumi.Input[str]]:
        """
        stretched vlan id
        """
        return pulumi.get(self, "stretched_vlan_id")

    @stretched_vlan_id.setter
    def stretched_vlan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stretched_vlan_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type of vlan. static VLANs that are managed in NDB can be added to a stretched VLAN.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NdbStretchedVlanVlansListPropertiesMapArgsDict(TypedDict):
        vlan_gateway: NotRequired[pulumi.Input[str]]
        """
        gateway of vlan
        """
        vlan_primary_dns: NotRequired[pulumi.Input[str]]
        """
        primary dns of vlan
        """
        vlan_secondary_dns: NotRequired[pulumi.Input[str]]
        """
        secondary dns of vlan
        """
        vlan_subnet_mask: NotRequired[pulumi.Input[str]]
        """
        subnet mask of vlan
        """
elif False:
    NdbStretchedVlanVlansListPropertiesMapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbStretchedVlanVlansListPropertiesMapArgs:
    def __init__(__self__, *,
                 vlan_gateway: Optional[pulumi.Input[str]] = None,
                 vlan_primary_dns: Optional[pulumi.Input[str]] = None,
                 vlan_secondary_dns: Optional[pulumi.Input[str]] = None,
                 vlan_subnet_mask: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] vlan_gateway: gateway of vlan
        :param pulumi.Input[str] vlan_primary_dns: primary dns of vlan
        :param pulumi.Input[str] vlan_secondary_dns: secondary dns of vlan
        :param pulumi.Input[str] vlan_subnet_mask: subnet mask of vlan
        """
        if vlan_gateway is not None:
            pulumi.set(__self__, "vlan_gateway", vlan_gateway)
        if vlan_primary_dns is not None:
            pulumi.set(__self__, "vlan_primary_dns", vlan_primary_dns)
        if vlan_secondary_dns is not None:
            pulumi.set(__self__, "vlan_secondary_dns", vlan_secondary_dns)
        if vlan_subnet_mask is not None:
            pulumi.set(__self__, "vlan_subnet_mask", vlan_subnet_mask)

    @property
    @pulumi.getter(name="vlanGateway")
    def vlan_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        gateway of vlan
        """
        return pulumi.get(self, "vlan_gateway")

    @vlan_gateway.setter
    def vlan_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_gateway", value)

    @property
    @pulumi.getter(name="vlanPrimaryDns")
    def vlan_primary_dns(self) -> Optional[pulumi.Input[str]]:
        """
        primary dns of vlan
        """
        return pulumi.get(self, "vlan_primary_dns")

    @vlan_primary_dns.setter
    def vlan_primary_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_primary_dns", value)

    @property
    @pulumi.getter(name="vlanSecondaryDns")
    def vlan_secondary_dns(self) -> Optional[pulumi.Input[str]]:
        """
        secondary dns of vlan
        """
        return pulumi.get(self, "vlan_secondary_dns")

    @vlan_secondary_dns.setter
    def vlan_secondary_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_secondary_dns", value)

    @property
    @pulumi.getter(name="vlanSubnetMask")
    def vlan_subnet_mask(self) -> Optional[pulumi.Input[str]]:
        """
        subnet mask of vlan
        """
        return pulumi.get(self, "vlan_subnet_mask")

    @vlan_subnet_mask.setter
    def vlan_subnet_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_subnet_mask", value)


if not MYPY:
    class NdbStretchedVlanVlansListPropertyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        name for the stretched VLAN
        """
        secure: NotRequired[pulumi.Input[bool]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    NdbStretchedVlanVlansListPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NdbStretchedVlanVlansListPropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: name for the stretched VLAN
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name for the stretched VLAN
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NetworkSecurityRuleAdRuleInboundAllowListArgsDict(TypedDict):
        address_group_inclusion_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionListArgsDict']]]]
        expiration_time: NotRequired[pulumi.Input[str]]
        filter_kind_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        filter_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListFilterParamArgsDict']]]]
        filter_type: NotRequired[pulumi.Input[str]]
        icmp_type_code_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeListArgsDict']]]]
        ip_subnet: NotRequired[pulumi.Input[str]]
        ip_subnet_prefix_length: NotRequired[pulumi.Input[str]]
        network_function_chain_reference: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        peer_specification_type: NotRequired[pulumi.Input[str]]
        protocol: NotRequired[pulumi.Input[str]]
        service_group_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListServiceGroupListArgsDict']]]]
        tcp_port_range_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeListArgsDict']]]]
        udp_port_range_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeListArgsDict']]]]
elif False:
    NetworkSecurityRuleAdRuleInboundAllowListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAdRuleInboundAllowListArgs:
    def __init__(__self__, *,
                 address_group_inclusion_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionListArgs']]]] = None,
                 expiration_time: Optional[pulumi.Input[str]] = None,
                 filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 filter_params: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListFilterParamArgs']]]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 icmp_type_code_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeListArgs']]]] = None,
                 ip_subnet: Optional[pulumi.Input[str]] = None,
                 ip_subnet_prefix_length: Optional[pulumi.Input[str]] = None,
                 network_function_chain_reference: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 peer_specification_type: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 service_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListServiceGroupListArgs']]]] = None,
                 tcp_port_range_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeListArgs']]]] = None,
                 udp_port_range_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeListArgs']]]] = None):
        if address_group_inclusion_lists is not None:
            pulumi.set(__self__, "address_group_inclusion_lists", address_group_inclusion_lists)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if filter_kind_lists is not None:
            pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        if filter_params is not None:
            pulumi.set(__self__, "filter_params", filter_params)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if icmp_type_code_lists is not None:
            pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        if ip_subnet is not None:
            pulumi.set(__self__, "ip_subnet", ip_subnet)
        if ip_subnet_prefix_length is not None:
            pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        if network_function_chain_reference is not None:
            pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if peer_specification_type is not None:
            pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_group_lists is not None:
            pulumi.set(__self__, "service_group_lists", service_group_lists)
        if tcp_port_range_lists is not None:
            pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        if udp_port_range_lists is not None:
            pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="addressGroupInclusionLists")
    def address_group_inclusion_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionListArgs']]]]:
        return pulumi.get(self, "address_group_inclusion_lists")

    @address_group_inclusion_lists.setter
    def address_group_inclusion_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionListArgs']]]]):
        pulumi.set(self, "address_group_inclusion_lists", value)

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiration_time")

    @expiration_time.setter
    def expiration_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration_time", value)

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_kind_lists")

    @filter_kind_lists.setter
    def filter_kind_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_kind_lists", value)

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListFilterParamArgs']]]]:
        return pulumi.get(self, "filter_params")

    @filter_params.setter
    def filter_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListFilterParamArgs']]]]):
        pulumi.set(self, "filter_params", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeListArgs']]]]:
        return pulumi.get(self, "icmp_type_code_lists")

    @icmp_type_code_lists.setter
    def icmp_type_code_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeListArgs']]]]):
        pulumi.set(self, "icmp_type_code_lists", value)

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_subnet")

    @ip_subnet.setter
    def ip_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_subnet", value)

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @ip_subnet_prefix_length.setter
    def ip_subnet_prefix_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_subnet_prefix_length", value)

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "network_function_chain_reference")

    @network_function_chain_reference.setter
    def network_function_chain_reference(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "network_function_chain_reference", value)

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer_specification_type")

    @peer_specification_type.setter
    def peer_specification_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_specification_type", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="serviceGroupLists")
    def service_group_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListServiceGroupListArgs']]]]:
        return pulumi.get(self, "service_group_lists")

    @service_group_lists.setter
    def service_group_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListServiceGroupListArgs']]]]):
        pulumi.set(self, "service_group_lists", value)

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeListArgs']]]]:
        return pulumi.get(self, "tcp_port_range_lists")

    @tcp_port_range_lists.setter
    def tcp_port_range_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeListArgs']]]]):
        pulumi.set(self, "tcp_port_range_lists", value)

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeListArgs']]]]:
        return pulumi.get(self, "udp_port_range_lists")

    @udp_port_range_lists.setter
    def udp_port_range_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeListArgs']]]]):
        pulumi.set(self, "udp_port_range_lists", value)


if not MYPY:
    class NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionListArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name (Default value: project)(Required).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) The name for the network_security_rule.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        - the UUID(Required).
        """
elif False:
    NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionListArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: - The kind name (Default value: project)(Required).
        :param pulumi.Input[str] name: - (Required) The name for the network_security_rule.
        :param pulumi.Input[str] uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class NetworkSecurityRuleAdRuleInboundAllowListFilterParamArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        - (Required) The name for the network_security_rule.
        """
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
elif False:
    NetworkSecurityRuleAdRuleInboundAllowListFilterParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAdRuleInboundAllowListFilterParamArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeListArgsDict(TypedDict):
        code: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeListArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NetworkSecurityRuleAdRuleInboundAllowListServiceGroupListArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name (Default value: project)(Required).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) The name for the network_security_rule.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        - the UUID(Required).
        """
elif False:
    NetworkSecurityRuleAdRuleInboundAllowListServiceGroupListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAdRuleInboundAllowListServiceGroupListArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: - The kind name (Default value: project)(Required).
        :param pulumi.Input[str] name: - (Required) The name for the network_security_rule.
        :param pulumi.Input[str] uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeListArgsDict(TypedDict):
        end_port: NotRequired[pulumi.Input[int]]
        start_port: NotRequired[pulumi.Input[int]]
elif False:
    NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeListArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


if not MYPY:
    class NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeListArgsDict(TypedDict):
        end_port: NotRequired[pulumi.Input[int]]
        start_port: NotRequired[pulumi.Input[int]]
elif False:
    NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeListArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


if not MYPY:
    class NetworkSecurityRuleAdRuleOutboundAllowListArgsDict(TypedDict):
        address_group_inclusion_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListArgsDict']]]]
        expiration_time: NotRequired[pulumi.Input[str]]
        filter_kind_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        filter_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListFilterParamArgsDict']]]]
        filter_type: NotRequired[pulumi.Input[str]]
        icmp_type_code_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeListArgsDict']]]]
        ip_subnet: NotRequired[pulumi.Input[str]]
        ip_subnet_prefix_length: NotRequired[pulumi.Input[str]]
        network_function_chain_reference: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        peer_specification_type: NotRequired[pulumi.Input[str]]
        protocol: NotRequired[pulumi.Input[str]]
        service_group_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListArgsDict']]]]
        tcp_port_range_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeListArgsDict']]]]
        udp_port_range_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeListArgsDict']]]]
elif False:
    NetworkSecurityRuleAdRuleOutboundAllowListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAdRuleOutboundAllowListArgs:
    def __init__(__self__, *,
                 address_group_inclusion_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListArgs']]]] = None,
                 expiration_time: Optional[pulumi.Input[str]] = None,
                 filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 filter_params: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListFilterParamArgs']]]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 icmp_type_code_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeListArgs']]]] = None,
                 ip_subnet: Optional[pulumi.Input[str]] = None,
                 ip_subnet_prefix_length: Optional[pulumi.Input[str]] = None,
                 network_function_chain_reference: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 peer_specification_type: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 service_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListArgs']]]] = None,
                 tcp_port_range_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeListArgs']]]] = None,
                 udp_port_range_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeListArgs']]]] = None):
        if address_group_inclusion_lists is not None:
            pulumi.set(__self__, "address_group_inclusion_lists", address_group_inclusion_lists)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if filter_kind_lists is not None:
            pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        if filter_params is not None:
            pulumi.set(__self__, "filter_params", filter_params)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if icmp_type_code_lists is not None:
            pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        if ip_subnet is not None:
            pulumi.set(__self__, "ip_subnet", ip_subnet)
        if ip_subnet_prefix_length is not None:
            pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        if network_function_chain_reference is not None:
            pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if peer_specification_type is not None:
            pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_group_lists is not None:
            pulumi.set(__self__, "service_group_lists", service_group_lists)
        if tcp_port_range_lists is not None:
            pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        if udp_port_range_lists is not None:
            pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="addressGroupInclusionLists")
    def address_group_inclusion_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListArgs']]]]:
        return pulumi.get(self, "address_group_inclusion_lists")

    @address_group_inclusion_lists.setter
    def address_group_inclusion_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListArgs']]]]):
        pulumi.set(self, "address_group_inclusion_lists", value)

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiration_time")

    @expiration_time.setter
    def expiration_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration_time", value)

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_kind_lists")

    @filter_kind_lists.setter
    def filter_kind_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_kind_lists", value)

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListFilterParamArgs']]]]:
        return pulumi.get(self, "filter_params")

    @filter_params.setter
    def filter_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListFilterParamArgs']]]]):
        pulumi.set(self, "filter_params", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeListArgs']]]]:
        return pulumi.get(self, "icmp_type_code_lists")

    @icmp_type_code_lists.setter
    def icmp_type_code_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeListArgs']]]]):
        pulumi.set(self, "icmp_type_code_lists", value)

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_subnet")

    @ip_subnet.setter
    def ip_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_subnet", value)

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @ip_subnet_prefix_length.setter
    def ip_subnet_prefix_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_subnet_prefix_length", value)

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "network_function_chain_reference")

    @network_function_chain_reference.setter
    def network_function_chain_reference(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "network_function_chain_reference", value)

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer_specification_type")

    @peer_specification_type.setter
    def peer_specification_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_specification_type", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="serviceGroupLists")
    def service_group_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListArgs']]]]:
        return pulumi.get(self, "service_group_lists")

    @service_group_lists.setter
    def service_group_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListArgs']]]]):
        pulumi.set(self, "service_group_lists", value)

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeListArgs']]]]:
        return pulumi.get(self, "tcp_port_range_lists")

    @tcp_port_range_lists.setter
    def tcp_port_range_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeListArgs']]]]):
        pulumi.set(self, "tcp_port_range_lists", value)

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeListArgs']]]]:
        return pulumi.get(self, "udp_port_range_lists")

    @udp_port_range_lists.setter
    def udp_port_range_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeListArgs']]]]):
        pulumi.set(self, "udp_port_range_lists", value)


if not MYPY:
    class NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name (Default value: project)(Required).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) The name for the network_security_rule.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        - the UUID(Required).
        """
elif False:
    NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: - The kind name (Default value: project)(Required).
        :param pulumi.Input[str] name: - (Required) The name for the network_security_rule.
        :param pulumi.Input[str] uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class NetworkSecurityRuleAdRuleOutboundAllowListFilterParamArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        - (Required) The name for the network_security_rule.
        """
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
elif False:
    NetworkSecurityRuleAdRuleOutboundAllowListFilterParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAdRuleOutboundAllowListFilterParamArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeListArgsDict(TypedDict):
        code: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeListArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name (Default value: project)(Required).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) The name for the network_security_rule.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        - the UUID(Required).
        """
elif False:
    NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: - The kind name (Default value: project)(Required).
        :param pulumi.Input[str] name: - (Required) The name for the network_security_rule.
        :param pulumi.Input[str] uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeListArgsDict(TypedDict):
        end_port: NotRequired[pulumi.Input[int]]
        start_port: NotRequired[pulumi.Input[int]]
elif False:
    NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeListArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


if not MYPY:
    class NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeListArgsDict(TypedDict):
        end_port: NotRequired[pulumi.Input[int]]
        start_port: NotRequired[pulumi.Input[int]]
elif False:
    NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeListArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


if not MYPY:
    class NetworkSecurityRuleAdRuleTargetGroupFilterParamArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        - (Required) The name for the network_security_rule.
        """
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
elif False:
    NetworkSecurityRuleAdRuleTargetGroupFilterParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class NetworkSecurityRuleAppRuleInboundAllowListArgsDict(TypedDict):
        address_group_inclusion_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionListArgsDict']]]]
        expiration_time: NotRequired[pulumi.Input[str]]
        filter_kind_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        filter_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListFilterParamArgsDict']]]]
        filter_type: NotRequired[pulumi.Input[str]]
        icmp_type_code_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeListArgsDict']]]]
        ip_subnet: NotRequired[pulumi.Input[str]]
        ip_subnet_prefix_length: NotRequired[pulumi.Input[str]]
        network_function_chain_reference: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        peer_specification_type: NotRequired[pulumi.Input[str]]
        protocol: NotRequired[pulumi.Input[str]]
        service_group_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListServiceGroupListArgsDict']]]]
        tcp_port_range_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeListArgsDict']]]]
        udp_port_range_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeListArgsDict']]]]
elif False:
    NetworkSecurityRuleAppRuleInboundAllowListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAppRuleInboundAllowListArgs:
    def __init__(__self__, *,
                 address_group_inclusion_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionListArgs']]]] = None,
                 expiration_time: Optional[pulumi.Input[str]] = None,
                 filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 filter_params: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListFilterParamArgs']]]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 icmp_type_code_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeListArgs']]]] = None,
                 ip_subnet: Optional[pulumi.Input[str]] = None,
                 ip_subnet_prefix_length: Optional[pulumi.Input[str]] = None,
                 network_function_chain_reference: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 peer_specification_type: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 service_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListServiceGroupListArgs']]]] = None,
                 tcp_port_range_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeListArgs']]]] = None,
                 udp_port_range_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeListArgs']]]] = None):
        if address_group_inclusion_lists is not None:
            pulumi.set(__self__, "address_group_inclusion_lists", address_group_inclusion_lists)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if filter_kind_lists is not None:
            pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        if filter_params is not None:
            pulumi.set(__self__, "filter_params", filter_params)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if icmp_type_code_lists is not None:
            pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        if ip_subnet is not None:
            pulumi.set(__self__, "ip_subnet", ip_subnet)
        if ip_subnet_prefix_length is not None:
            pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        if network_function_chain_reference is not None:
            pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if peer_specification_type is not None:
            pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_group_lists is not None:
            pulumi.set(__self__, "service_group_lists", service_group_lists)
        if tcp_port_range_lists is not None:
            pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        if udp_port_range_lists is not None:
            pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="addressGroupInclusionLists")
    def address_group_inclusion_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionListArgs']]]]:
        return pulumi.get(self, "address_group_inclusion_lists")

    @address_group_inclusion_lists.setter
    def address_group_inclusion_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionListArgs']]]]):
        pulumi.set(self, "address_group_inclusion_lists", value)

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiration_time")

    @expiration_time.setter
    def expiration_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration_time", value)

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_kind_lists")

    @filter_kind_lists.setter
    def filter_kind_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_kind_lists", value)

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListFilterParamArgs']]]]:
        return pulumi.get(self, "filter_params")

    @filter_params.setter
    def filter_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListFilterParamArgs']]]]):
        pulumi.set(self, "filter_params", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeListArgs']]]]:
        return pulumi.get(self, "icmp_type_code_lists")

    @icmp_type_code_lists.setter
    def icmp_type_code_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeListArgs']]]]):
        pulumi.set(self, "icmp_type_code_lists", value)

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_subnet")

    @ip_subnet.setter
    def ip_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_subnet", value)

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @ip_subnet_prefix_length.setter
    def ip_subnet_prefix_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_subnet_prefix_length", value)

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "network_function_chain_reference")

    @network_function_chain_reference.setter
    def network_function_chain_reference(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "network_function_chain_reference", value)

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer_specification_type")

    @peer_specification_type.setter
    def peer_specification_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_specification_type", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="serviceGroupLists")
    def service_group_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListServiceGroupListArgs']]]]:
        return pulumi.get(self, "service_group_lists")

    @service_group_lists.setter
    def service_group_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListServiceGroupListArgs']]]]):
        pulumi.set(self, "service_group_lists", value)

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeListArgs']]]]:
        return pulumi.get(self, "tcp_port_range_lists")

    @tcp_port_range_lists.setter
    def tcp_port_range_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeListArgs']]]]):
        pulumi.set(self, "tcp_port_range_lists", value)

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeListArgs']]]]:
        return pulumi.get(self, "udp_port_range_lists")

    @udp_port_range_lists.setter
    def udp_port_range_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeListArgs']]]]):
        pulumi.set(self, "udp_port_range_lists", value)


if not MYPY:
    class NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionListArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name (Default value: project)(Required).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) The name for the network_security_rule.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        - the UUID(Required).
        """
elif False:
    NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionListArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: - The kind name (Default value: project)(Required).
        :param pulumi.Input[str] name: - (Required) The name for the network_security_rule.
        :param pulumi.Input[str] uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class NetworkSecurityRuleAppRuleInboundAllowListFilterParamArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        - (Required) The name for the network_security_rule.
        """
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
elif False:
    NetworkSecurityRuleAppRuleInboundAllowListFilterParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAppRuleInboundAllowListFilterParamArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeListArgsDict(TypedDict):
        code: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeListArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NetworkSecurityRuleAppRuleInboundAllowListServiceGroupListArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name (Default value: project)(Required).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) The name for the network_security_rule.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        - the UUID(Required).
        """
elif False:
    NetworkSecurityRuleAppRuleInboundAllowListServiceGroupListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAppRuleInboundAllowListServiceGroupListArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: - The kind name (Default value: project)(Required).
        :param pulumi.Input[str] name: - (Required) The name for the network_security_rule.
        :param pulumi.Input[str] uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeListArgsDict(TypedDict):
        end_port: NotRequired[pulumi.Input[int]]
        start_port: NotRequired[pulumi.Input[int]]
elif False:
    NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeListArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


if not MYPY:
    class NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeListArgsDict(TypedDict):
        end_port: NotRequired[pulumi.Input[int]]
        start_port: NotRequired[pulumi.Input[int]]
elif False:
    NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeListArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


if not MYPY:
    class NetworkSecurityRuleAppRuleOutboundAllowListArgsDict(TypedDict):
        address_group_inclusion_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionListArgsDict']]]]
        expiration_time: NotRequired[pulumi.Input[str]]
        filter_kind_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        filter_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListFilterParamArgsDict']]]]
        filter_type: NotRequired[pulumi.Input[str]]
        icmp_type_code_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeListArgsDict']]]]
        ip_subnet: NotRequired[pulumi.Input[str]]
        ip_subnet_prefix_length: NotRequired[pulumi.Input[str]]
        network_function_chain_reference: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        peer_specification_type: NotRequired[pulumi.Input[str]]
        protocol: NotRequired[pulumi.Input[str]]
        service_group_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupListArgsDict']]]]
        tcp_port_range_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeListArgsDict']]]]
        udp_port_range_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeListArgsDict']]]]
elif False:
    NetworkSecurityRuleAppRuleOutboundAllowListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAppRuleOutboundAllowListArgs:
    def __init__(__self__, *,
                 address_group_inclusion_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionListArgs']]]] = None,
                 expiration_time: Optional[pulumi.Input[str]] = None,
                 filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 filter_params: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListFilterParamArgs']]]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 icmp_type_code_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeListArgs']]]] = None,
                 ip_subnet: Optional[pulumi.Input[str]] = None,
                 ip_subnet_prefix_length: Optional[pulumi.Input[str]] = None,
                 network_function_chain_reference: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 peer_specification_type: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 service_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupListArgs']]]] = None,
                 tcp_port_range_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeListArgs']]]] = None,
                 udp_port_range_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeListArgs']]]] = None):
        if address_group_inclusion_lists is not None:
            pulumi.set(__self__, "address_group_inclusion_lists", address_group_inclusion_lists)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if filter_kind_lists is not None:
            pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        if filter_params is not None:
            pulumi.set(__self__, "filter_params", filter_params)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if icmp_type_code_lists is not None:
            pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        if ip_subnet is not None:
            pulumi.set(__self__, "ip_subnet", ip_subnet)
        if ip_subnet_prefix_length is not None:
            pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        if network_function_chain_reference is not None:
            pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if peer_specification_type is not None:
            pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_group_lists is not None:
            pulumi.set(__self__, "service_group_lists", service_group_lists)
        if tcp_port_range_lists is not None:
            pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        if udp_port_range_lists is not None:
            pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="addressGroupInclusionLists")
    def address_group_inclusion_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionListArgs']]]]:
        return pulumi.get(self, "address_group_inclusion_lists")

    @address_group_inclusion_lists.setter
    def address_group_inclusion_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionListArgs']]]]):
        pulumi.set(self, "address_group_inclusion_lists", value)

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiration_time")

    @expiration_time.setter
    def expiration_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration_time", value)

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_kind_lists")

    @filter_kind_lists.setter
    def filter_kind_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_kind_lists", value)

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListFilterParamArgs']]]]:
        return pulumi.get(self, "filter_params")

    @filter_params.setter
    def filter_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListFilterParamArgs']]]]):
        pulumi.set(self, "filter_params", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeListArgs']]]]:
        return pulumi.get(self, "icmp_type_code_lists")

    @icmp_type_code_lists.setter
    def icmp_type_code_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeListArgs']]]]):
        pulumi.set(self, "icmp_type_code_lists", value)

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_subnet")

    @ip_subnet.setter
    def ip_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_subnet", value)

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @ip_subnet_prefix_length.setter
    def ip_subnet_prefix_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_subnet_prefix_length", value)

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "network_function_chain_reference")

    @network_function_chain_reference.setter
    def network_function_chain_reference(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "network_function_chain_reference", value)

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer_specification_type")

    @peer_specification_type.setter
    def peer_specification_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_specification_type", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="serviceGroupLists")
    def service_group_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupListArgs']]]]:
        return pulumi.get(self, "service_group_lists")

    @service_group_lists.setter
    def service_group_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupListArgs']]]]):
        pulumi.set(self, "service_group_lists", value)

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeListArgs']]]]:
        return pulumi.get(self, "tcp_port_range_lists")

    @tcp_port_range_lists.setter
    def tcp_port_range_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeListArgs']]]]):
        pulumi.set(self, "tcp_port_range_lists", value)

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeListArgs']]]]:
        return pulumi.get(self, "udp_port_range_lists")

    @udp_port_range_lists.setter
    def udp_port_range_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeListArgs']]]]):
        pulumi.set(self, "udp_port_range_lists", value)


if not MYPY:
    class NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionListArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name (Default value: project)(Required).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) The name for the network_security_rule.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        - the UUID(Required).
        """
elif False:
    NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionListArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: - The kind name (Default value: project)(Required).
        :param pulumi.Input[str] name: - (Required) The name for the network_security_rule.
        :param pulumi.Input[str] uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class NetworkSecurityRuleAppRuleOutboundAllowListFilterParamArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        - (Required) The name for the network_security_rule.
        """
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
elif False:
    NetworkSecurityRuleAppRuleOutboundAllowListFilterParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAppRuleOutboundAllowListFilterParamArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeListArgsDict(TypedDict):
        code: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeListArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupListArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name (Default value: project)(Required).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) The name for the network_security_rule.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        - the UUID(Required).
        """
elif False:
    NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupListArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: - The kind name (Default value: project)(Required).
        :param pulumi.Input[str] name: - (Required) The name for the network_security_rule.
        :param pulumi.Input[str] uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeListArgsDict(TypedDict):
        end_port: NotRequired[pulumi.Input[int]]
        start_port: NotRequired[pulumi.Input[int]]
elif False:
    NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeListArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


if not MYPY:
    class NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeListArgsDict(TypedDict):
        end_port: NotRequired[pulumi.Input[int]]
        start_port: NotRequired[pulumi.Input[int]]
elif False:
    NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeListArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


if not MYPY:
    class NetworkSecurityRuleAppRuleTargetGroupFilterParamArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        - (Required) The name for the network_security_rule.
        """
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
elif False:
    NetworkSecurityRuleAppRuleTargetGroupFilterParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleAppRuleTargetGroupFilterParamArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class NetworkSecurityRuleCategoryArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) The name for the network_security_rule.
        """
        value: NotRequired[pulumi.Input[str]]
elif False:
    NetworkSecurityRuleCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleCategoryArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: - (Required) The name for the network_security_rule.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        - (Required) The name for the network_security_rule.
        """
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
elif False:
    NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        - (Required) The name for the network_security_rule.
        """
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
elif False:
    NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class PbrDestinationArgsDict(TypedDict):
        address_type: NotRequired[pulumi.Input[str]]
        prefix_length: NotRequired[pulumi.Input[int]]
        subnet_ip: NotRequired[pulumi.Input[str]]
elif False:
    PbrDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PbrDestinationArgs:
    def __init__(__self__, *,
                 address_type: Optional[pulumi.Input[str]] = None,
                 prefix_length: Optional[pulumi.Input[int]] = None,
                 subnet_ip: Optional[pulumi.Input[str]] = None):
        if address_type is not None:
            pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address_type")

    @address_type.setter
    def address_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_type", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix_length", value)

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_ip")

    @subnet_ip.setter
    def subnet_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_ip", value)


if not MYPY:
    class PbrProtocolParametersArgsDict(TypedDict):
        icmp: NotRequired[pulumi.Input['PbrProtocolParametersIcmpArgsDict']]
        protocol_number: NotRequired[pulumi.Input[str]]
        tcp: NotRequired[pulumi.Input['PbrProtocolParametersTcpArgsDict']]
        udp: NotRequired[pulumi.Input['PbrProtocolParametersUdpArgsDict']]
elif False:
    PbrProtocolParametersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PbrProtocolParametersArgs:
    def __init__(__self__, *,
                 icmp: Optional[pulumi.Input['PbrProtocolParametersIcmpArgs']] = None,
                 protocol_number: Optional[pulumi.Input[str]] = None,
                 tcp: Optional[pulumi.Input['PbrProtocolParametersTcpArgs']] = None,
                 udp: Optional[pulumi.Input['PbrProtocolParametersUdpArgs']] = None):
        if icmp is not None:
            pulumi.set(__self__, "icmp", icmp)
        if protocol_number is not None:
            pulumi.set(__self__, "protocol_number", protocol_number)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @property
    @pulumi.getter
    def icmp(self) -> Optional[pulumi.Input['PbrProtocolParametersIcmpArgs']]:
        return pulumi.get(self, "icmp")

    @icmp.setter
    def icmp(self, value: Optional[pulumi.Input['PbrProtocolParametersIcmpArgs']]):
        pulumi.set(self, "icmp", value)

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol_number")

    @protocol_number.setter
    def protocol_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_number", value)

    @property
    @pulumi.getter
    def tcp(self) -> Optional[pulumi.Input['PbrProtocolParametersTcpArgs']]:
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: Optional[pulumi.Input['PbrProtocolParametersTcpArgs']]):
        pulumi.set(self, "tcp", value)

    @property
    @pulumi.getter
    def udp(self) -> Optional[pulumi.Input['PbrProtocolParametersUdpArgs']]:
        return pulumi.get(self, "udp")

    @udp.setter
    def udp(self, value: Optional[pulumi.Input['PbrProtocolParametersUdpArgs']]):
        pulumi.set(self, "udp", value)


if not MYPY:
    class PbrProtocolParametersIcmpArgsDict(TypedDict):
        icmp_code: pulumi.Input[int]
        icmp_type: pulumi.Input[int]
elif False:
    PbrProtocolParametersIcmpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PbrProtocolParametersIcmpArgs:
    def __init__(__self__, *,
                 icmp_code: pulumi.Input[int],
                 icmp_type: pulumi.Input[int]):
        pulumi.set(__self__, "icmp_code", icmp_code)
        pulumi.set(__self__, "icmp_type", icmp_type)

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> pulumi.Input[int]:
        return pulumi.get(self, "icmp_code")

    @icmp_code.setter
    def icmp_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "icmp_code", value)

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> pulumi.Input[int]:
        return pulumi.get(self, "icmp_type")

    @icmp_type.setter
    def icmp_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "icmp_type", value)


if not MYPY:
    class PbrProtocolParametersTcpArgsDict(TypedDict):
        destination_port_range_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['PbrProtocolParametersTcpDestinationPortRangeListArgsDict']]]]
        source_port_range_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['PbrProtocolParametersTcpSourcePortRangeListArgsDict']]]]
elif False:
    PbrProtocolParametersTcpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PbrProtocolParametersTcpArgs:
    def __init__(__self__, *,
                 destination_port_range_lists: Optional[pulumi.Input[Sequence[pulumi.Input['PbrProtocolParametersTcpDestinationPortRangeListArgs']]]] = None,
                 source_port_range_lists: Optional[pulumi.Input[Sequence[pulumi.Input['PbrProtocolParametersTcpSourcePortRangeListArgs']]]] = None):
        if destination_port_range_lists is not None:
            pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        if source_port_range_lists is not None:
            pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PbrProtocolParametersTcpDestinationPortRangeListArgs']]]]:
        return pulumi.get(self, "destination_port_range_lists")

    @destination_port_range_lists.setter
    def destination_port_range_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PbrProtocolParametersTcpDestinationPortRangeListArgs']]]]):
        pulumi.set(self, "destination_port_range_lists", value)

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PbrProtocolParametersTcpSourcePortRangeListArgs']]]]:
        return pulumi.get(self, "source_port_range_lists")

    @source_port_range_lists.setter
    def source_port_range_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PbrProtocolParametersTcpSourcePortRangeListArgs']]]]):
        pulumi.set(self, "source_port_range_lists", value)


if not MYPY:
    class PbrProtocolParametersTcpDestinationPortRangeListArgsDict(TypedDict):
        end_port: NotRequired[pulumi.Input[int]]
        start_port: NotRequired[pulumi.Input[int]]
elif False:
    PbrProtocolParametersTcpDestinationPortRangeListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PbrProtocolParametersTcpDestinationPortRangeListArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


if not MYPY:
    class PbrProtocolParametersTcpSourcePortRangeListArgsDict(TypedDict):
        end_port: NotRequired[pulumi.Input[int]]
        start_port: NotRequired[pulumi.Input[int]]
elif False:
    PbrProtocolParametersTcpSourcePortRangeListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PbrProtocolParametersTcpSourcePortRangeListArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


if not MYPY:
    class PbrProtocolParametersUdpArgsDict(TypedDict):
        destination_port_range_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['PbrProtocolParametersUdpDestinationPortRangeListArgsDict']]]]
        source_port_range_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['PbrProtocolParametersUdpSourcePortRangeListArgsDict']]]]
elif False:
    PbrProtocolParametersUdpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PbrProtocolParametersUdpArgs:
    def __init__(__self__, *,
                 destination_port_range_lists: Optional[pulumi.Input[Sequence[pulumi.Input['PbrProtocolParametersUdpDestinationPortRangeListArgs']]]] = None,
                 source_port_range_lists: Optional[pulumi.Input[Sequence[pulumi.Input['PbrProtocolParametersUdpSourcePortRangeListArgs']]]] = None):
        if destination_port_range_lists is not None:
            pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        if source_port_range_lists is not None:
            pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PbrProtocolParametersUdpDestinationPortRangeListArgs']]]]:
        return pulumi.get(self, "destination_port_range_lists")

    @destination_port_range_lists.setter
    def destination_port_range_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PbrProtocolParametersUdpDestinationPortRangeListArgs']]]]):
        pulumi.set(self, "destination_port_range_lists", value)

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PbrProtocolParametersUdpSourcePortRangeListArgs']]]]:
        return pulumi.get(self, "source_port_range_lists")

    @source_port_range_lists.setter
    def source_port_range_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PbrProtocolParametersUdpSourcePortRangeListArgs']]]]):
        pulumi.set(self, "source_port_range_lists", value)


if not MYPY:
    class PbrProtocolParametersUdpDestinationPortRangeListArgsDict(TypedDict):
        end_port: NotRequired[pulumi.Input[int]]
        start_port: NotRequired[pulumi.Input[int]]
elif False:
    PbrProtocolParametersUdpDestinationPortRangeListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PbrProtocolParametersUdpDestinationPortRangeListArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


if not MYPY:
    class PbrProtocolParametersUdpSourcePortRangeListArgsDict(TypedDict):
        end_port: NotRequired[pulumi.Input[int]]
        start_port: NotRequired[pulumi.Input[int]]
elif False:
    PbrProtocolParametersUdpSourcePortRangeListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PbrProtocolParametersUdpSourcePortRangeListArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


if not MYPY:
    class PbrSourceArgsDict(TypedDict):
        address_type: NotRequired[pulumi.Input[str]]
        prefix_length: NotRequired[pulumi.Input[int]]
        subnet_ip: NotRequired[pulumi.Input[str]]
elif False:
    PbrSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PbrSourceArgs:
    def __init__(__self__, *,
                 address_type: Optional[pulumi.Input[str]] = None,
                 prefix_length: Optional[pulumi.Input[int]] = None,
                 subnet_ip: Optional[pulumi.Input[str]] = None):
        if address_type is not None:
            pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address_type")

    @address_type.setter
    def address_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_type", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix_length", value)

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_ip")

    @subnet_ip.setter
    def subnet_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_ip", value)


if not MYPY:
    class ProjectAccountReferenceListArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        (Required) the UUID.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the project.
        """
elif False:
    ProjectAccountReferenceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectAccountReferenceListArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: (Required) the UUID.
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ProjectAcpArgsDict(TypedDict):
        role_reference: pulumi.Input['ProjectAcpRoleReferenceArgsDict']
        """
        Reference to role.
        """
        context_filter_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['ProjectAcpContextFilterListArgsDict']]]]
        """
        The list of context filters. These are OR filters. The scope-expression-list defines the context, and the filter works in conjunction with the entity-expression-list.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        A description for project.
        """
        metadata: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the project.
        """
        user_group_reference_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['ProjectAcpUserGroupReferenceListArgsDict']]]]
        """
        List of Reference of users groups.
        """
        user_reference_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['ProjectAcpUserReferenceListArgsDict']]]]
        """
        List of Reference of users.
        """
elif False:
    ProjectAcpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectAcpArgs:
    def __init__(__self__, *,
                 role_reference: pulumi.Input['ProjectAcpRoleReferenceArgs'],
                 context_filter_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAcpContextFilterListArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 user_group_reference_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAcpUserGroupReferenceListArgs']]]] = None,
                 user_reference_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAcpUserReferenceListArgs']]]] = None):
        """
        :param pulumi.Input['ProjectAcpRoleReferenceArgs'] role_reference: Reference to role.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectAcpContextFilterListArgs']]] context_filter_lists: The list of context filters. These are OR filters. The scope-expression-list defines the context, and the filter works in conjunction with the entity-expression-list.
        :param pulumi.Input[str] description: A description for project.
        :param pulumi.Input[str] name: The name for the project.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectAcpUserGroupReferenceListArgs']]] user_group_reference_lists: List of Reference of users groups.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectAcpUserReferenceListArgs']]] user_reference_lists: List of Reference of users.
        """
        pulumi.set(__self__, "role_reference", role_reference)
        if context_filter_lists is not None:
            pulumi.set(__self__, "context_filter_lists", context_filter_lists)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if user_group_reference_lists is not None:
            pulumi.set(__self__, "user_group_reference_lists", user_group_reference_lists)
        if user_reference_lists is not None:
            pulumi.set(__self__, "user_reference_lists", user_reference_lists)

    @property
    @pulumi.getter(name="roleReference")
    def role_reference(self) -> pulumi.Input['ProjectAcpRoleReferenceArgs']:
        """
        Reference to role.
        """
        return pulumi.get(self, "role_reference")

    @role_reference.setter
    def role_reference(self, value: pulumi.Input['ProjectAcpRoleReferenceArgs']):
        pulumi.set(self, "role_reference", value)

    @property
    @pulumi.getter(name="contextFilterLists")
    def context_filter_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAcpContextFilterListArgs']]]]:
        """
        The list of context filters. These are OR filters. The scope-expression-list defines the context, and the filter works in conjunction with the entity-expression-list.
        """
        return pulumi.get(self, "context_filter_lists")

    @context_filter_lists.setter
    def context_filter_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAcpContextFilterListArgs']]]]):
        pulumi.set(self, "context_filter_lists", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description for project.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="userGroupReferenceLists")
    def user_group_reference_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAcpUserGroupReferenceListArgs']]]]:
        """
        List of Reference of users groups.
        """
        return pulumi.get(self, "user_group_reference_lists")

    @user_group_reference_lists.setter
    def user_group_reference_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAcpUserGroupReferenceListArgs']]]]):
        pulumi.set(self, "user_group_reference_lists", value)

    @property
    @pulumi.getter(name="userReferenceLists")
    def user_reference_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAcpUserReferenceListArgs']]]]:
        """
        List of Reference of users.
        """
        return pulumi.get(self, "user_reference_lists")

    @user_reference_lists.setter
    def user_reference_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAcpUserReferenceListArgs']]]]):
        pulumi.set(self, "user_reference_lists", value)


if not MYPY:
    class ProjectAcpContextFilterListArgsDict(TypedDict):
        entity_filter_expression_lists: pulumi.Input[Sequence[pulumi.Input['ProjectAcpContextFilterListEntityFilterExpressionListArgsDict']]]
        """
        (Required) A list of Entity filter expressions.
        """
        scope_filter_expression_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['ProjectAcpContextFilterListScopeFilterExpressionListArgsDict']]]]
        """
        - (Optional) Filter the scope of an Access Control Policy.
        """
elif False:
    ProjectAcpContextFilterListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectAcpContextFilterListArgs:
    def __init__(__self__, *,
                 entity_filter_expression_lists: pulumi.Input[Sequence[pulumi.Input['ProjectAcpContextFilterListEntityFilterExpressionListArgs']]],
                 scope_filter_expression_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAcpContextFilterListScopeFilterExpressionListArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ProjectAcpContextFilterListEntityFilterExpressionListArgs']]] entity_filter_expression_lists: (Required) A list of Entity filter expressions.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectAcpContextFilterListScopeFilterExpressionListArgs']]] scope_filter_expression_lists: - (Optional) Filter the scope of an Access Control Policy.
        """
        pulumi.set(__self__, "entity_filter_expression_lists", entity_filter_expression_lists)
        if scope_filter_expression_lists is not None:
            pulumi.set(__self__, "scope_filter_expression_lists", scope_filter_expression_lists)

    @property
    @pulumi.getter(name="entityFilterExpressionLists")
    def entity_filter_expression_lists(self) -> pulumi.Input[Sequence[pulumi.Input['ProjectAcpContextFilterListEntityFilterExpressionListArgs']]]:
        """
        (Required) A list of Entity filter expressions.
        """
        return pulumi.get(self, "entity_filter_expression_lists")

    @entity_filter_expression_lists.setter
    def entity_filter_expression_lists(self, value: pulumi.Input[Sequence[pulumi.Input['ProjectAcpContextFilterListEntityFilterExpressionListArgs']]]):
        pulumi.set(self, "entity_filter_expression_lists", value)

    @property
    @pulumi.getter(name="scopeFilterExpressionLists")
    def scope_filter_expression_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAcpContextFilterListScopeFilterExpressionListArgs']]]]:
        """
        - (Optional) Filter the scope of an Access Control Policy.
        """
        return pulumi.get(self, "scope_filter_expression_lists")

    @scope_filter_expression_lists.setter
    def scope_filter_expression_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAcpContextFilterListScopeFilterExpressionListArgs']]]]):
        pulumi.set(self, "scope_filter_expression_lists", value)


if not MYPY:
    class ProjectAcpContextFilterListEntityFilterExpressionListArgsDict(TypedDict):
        operator: pulumi.Input[str]
        """
        - (Required) The operator in the filter expression.
        """
        right_hand_side: pulumi.Input['ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideArgsDict']
        """
        - (Required) The right hand side (RHS) of an scope expression.
        """
        left_hand_side_entity_type: NotRequired[pulumi.Input[str]]
        """
        - (Optional)  The LHS of the filter expression - the entity type.
        """
elif False:
    ProjectAcpContextFilterListEntityFilterExpressionListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectAcpContextFilterListEntityFilterExpressionListArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 right_hand_side: pulumi.Input['ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideArgs'],
                 left_hand_side_entity_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] operator: - (Required) The operator in the filter expression.
        :param pulumi.Input['ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideArgs'] right_hand_side: - (Required) The right hand side (RHS) of an scope expression.
        :param pulumi.Input[str] left_hand_side_entity_type: - (Optional)  The LHS of the filter expression - the entity type.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "right_hand_side", right_hand_side)
        if left_hand_side_entity_type is not None:
            pulumi.set(__self__, "left_hand_side_entity_type", left_hand_side_entity_type)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        - (Required) The operator in the filter expression.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="rightHandSide")
    def right_hand_side(self) -> pulumi.Input['ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideArgs']:
        """
        - (Required) The right hand side (RHS) of an scope expression.
        """
        return pulumi.get(self, "right_hand_side")

    @right_hand_side.setter
    def right_hand_side(self, value: pulumi.Input['ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideArgs']):
        pulumi.set(self, "right_hand_side", value)

    @property
    @pulumi.getter(name="leftHandSideEntityType")
    def left_hand_side_entity_type(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional)  The LHS of the filter expression - the entity type.
        """
        return pulumi.get(self, "left_hand_side_entity_type")

    @left_hand_side_entity_type.setter
    def left_hand_side_entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "left_hand_side_entity_type", value)


if not MYPY:
    class ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideArgsDict(TypedDict):
        categories: NotRequired[pulumi.Input['ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgsDict']]
        """
        - (Optional) The category values represented as a dictionary of key > list of values.
        """
        collection: NotRequired[pulumi.Input[str]]
        """
        - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        uuid_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        - (Optional) The explicit list of UUIDs for the given kind.
        """
elif False:
    ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideArgs:
    def __init__(__self__, *,
                 categories: Optional[pulumi.Input['ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgs']] = None,
                 collection: Optional[pulumi.Input[str]] = None,
                 uuid_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgs'] categories: - (Optional) The category values represented as a dictionary of key > list of values.
        :param pulumi.Input[str] collection: - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] uuid_lists: - (Optional) The explicit list of UUIDs for the given kind.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if uuid_lists is not None:
            pulumi.set(__self__, "uuid_lists", uuid_lists)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input['ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgs']]:
        """
        - (Optional) The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input['ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgs']]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def collection(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        return pulumi.get(self, "collection")

    @collection.setter
    def collection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collection", value)

    @property
    @pulumi.getter(name="uuidLists")
    def uuid_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - (Optional) The explicit list of UUIDs for the given kind.
        """
        return pulumi.get(self, "uuid_lists")

    @uuid_lists.setter
    def uuid_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "uuid_lists", value)


if not MYPY:
    class ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the project.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        value of the key.
        """
elif False:
    ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        value of the key.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class ProjectAcpContextFilterListScopeFilterExpressionListArgsDict(TypedDict):
        left_hand_side: pulumi.Input[str]
        """
        - (Optional)  The LHS of the filter expression - the scope type.
        """
        operator: pulumi.Input[str]
        """
        - (Required) The operator in the filter expression.
        """
        right_hand_side: pulumi.Input['ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideArgsDict']
        """
        - (Required) The right hand side (RHS) of an scope expression.
        """
elif False:
    ProjectAcpContextFilterListScopeFilterExpressionListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectAcpContextFilterListScopeFilterExpressionListArgs:
    def __init__(__self__, *,
                 left_hand_side: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 right_hand_side: pulumi.Input['ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideArgs']):
        """
        :param pulumi.Input[str] left_hand_side: - (Optional)  The LHS of the filter expression - the scope type.
        :param pulumi.Input[str] operator: - (Required) The operator in the filter expression.
        :param pulumi.Input['ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideArgs'] right_hand_side: - (Required) The right hand side (RHS) of an scope expression.
        """
        pulumi.set(__self__, "left_hand_side", left_hand_side)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "right_hand_side", right_hand_side)

    @property
    @pulumi.getter(name="leftHandSide")
    def left_hand_side(self) -> pulumi.Input[str]:
        """
        - (Optional)  The LHS of the filter expression - the scope type.
        """
        return pulumi.get(self, "left_hand_side")

    @left_hand_side.setter
    def left_hand_side(self, value: pulumi.Input[str]):
        pulumi.set(self, "left_hand_side", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        - (Required) The operator in the filter expression.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="rightHandSide")
    def right_hand_side(self) -> pulumi.Input['ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideArgs']:
        """
        - (Required) The right hand side (RHS) of an scope expression.
        """
        return pulumi.get(self, "right_hand_side")

    @right_hand_side.setter
    def right_hand_side(self, value: pulumi.Input['ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideArgs']):
        pulumi.set(self, "right_hand_side", value)


if not MYPY:
    class ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideArgsDict(TypedDict):
        categories: NotRequired[pulumi.Input['ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgsDict']]
        """
        - (Optional) The category values represented as a dictionary of key > list of values.
        """
        collection: NotRequired[pulumi.Input[str]]
        """
        - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        uuid_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        - (Optional) The explicit list of UUIDs for the given kind.
        """
elif False:
    ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideArgs:
    def __init__(__self__, *,
                 categories: Optional[pulumi.Input['ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgs']] = None,
                 collection: Optional[pulumi.Input[str]] = None,
                 uuid_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgs'] categories: - (Optional) The category values represented as a dictionary of key > list of values.
        :param pulumi.Input[str] collection: - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] uuid_lists: - (Optional) The explicit list of UUIDs for the given kind.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if uuid_lists is not None:
            pulumi.set(__self__, "uuid_lists", uuid_lists)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input['ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgs']]:
        """
        - (Optional) The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input['ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgs']]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def collection(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        return pulumi.get(self, "collection")

    @collection.setter
    def collection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collection", value)

    @property
    @pulumi.getter(name="uuidLists")
    def uuid_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - (Optional) The explicit list of UUIDs for the given kind.
        """
        return pulumi.get(self, "uuid_lists")

    @uuid_lists.setter
    def uuid_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "uuid_lists", value)


if not MYPY:
    class ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the project.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        value of the key.
        """
elif False:
    ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        value of the key.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class ProjectAcpRoleReferenceArgsDict(TypedDict):
        kind: pulumi.Input[str]
        """
        (Required) The kind name (Default value: `project`).
        """
        uuid: pulumi.Input[str]
        """
        (Required) the UUID.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the project.
        """
elif False:
    ProjectAcpRoleReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectAcpRoleReferenceArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 uuid: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] uuid: (Required) the UUID.
        :param pulumi.Input[str] name: The name for the project.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "uuid", uuid)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ProjectAcpUserGroupReferenceListArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        (Required) the UUID.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the project.
        """
elif False:
    ProjectAcpUserGroupReferenceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectAcpUserGroupReferenceListArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: (Required) the UUID.
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ProjectAcpUserReferenceListArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        (Required) the UUID.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the project.
        """
elif False:
    ProjectAcpUserReferenceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectAcpUserReferenceListArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: (Required) the UUID.
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ProjectCategoryArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the project.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        value of the key.
        """
elif False:
    ProjectCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectCategoryArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name for the project.
        :param pulumi.Input[str] value: value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ProjectClusterReferenceListArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        (Required) the UUID.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the project.
        """
elif False:
    ProjectClusterReferenceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectClusterReferenceListArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: (Required) the UUID.
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ProjectDefaultEnvironmentReferenceArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        (Required) the UUID.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the project.
        """
elif False:
    ProjectDefaultEnvironmentReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectDefaultEnvironmentReferenceArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: (Required) the UUID.
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ProjectDefaultSubnetReferenceArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        (Required) the UUID.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the project.
        """
elif False:
    ProjectDefaultSubnetReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectDefaultSubnetReferenceArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: (Required) the UUID.
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ProjectEnvironmentReferenceListArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        (Required) the UUID.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the project.
        """
elif False:
    ProjectEnvironmentReferenceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectEnvironmentReferenceListArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: (Required) the UUID.
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ProjectExternalNetworkListArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        (Required) the UUID.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the project.
        """
elif False:
    ProjectExternalNetworkListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectExternalNetworkListArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: (Required) the UUID.
        :param pulumi.Input[str] name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ProjectExternalUserGroupReferenceListArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        (Required) the UUID.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the project.
        """
elif False:
    ProjectExternalUserGroupReferenceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectExternalUserGroupReferenceListArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: (Required) the UUID.
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ProjectResourceDomainArgsDict(TypedDict):
        resources: pulumi.Input[Sequence[pulumi.Input['ProjectResourceDomainResourceArgsDict']]]
elif False:
    ProjectResourceDomainArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectResourceDomainArgs:
    def __init__(__self__, *,
                 resources: pulumi.Input[Sequence[pulumi.Input['ProjectResourceDomainResourceArgs']]]):
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Input[Sequence[pulumi.Input['ProjectResourceDomainResourceArgs']]]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input[Sequence[pulumi.Input['ProjectResourceDomainResourceArgs']]]):
        pulumi.set(self, "resources", value)


if not MYPY:
    class ProjectResourceDomainResourceArgsDict(TypedDict):
        limit: pulumi.Input[int]
        resource_type: pulumi.Input[str]
        units: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[int]]
        """
        value of the key.
        """
elif False:
    ProjectResourceDomainResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectResourceDomainResourceArgs:
    def __init__(__self__, *,
                 limit: pulumi.Input[int],
                 resource_type: pulumi.Input[str],
                 units: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] value: value of the key.
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "resource_type", resource_type)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "units", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        """
        value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ProjectSubnetReferenceListArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        (Required) the UUID.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the project.
        """
elif False:
    ProjectSubnetReferenceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectSubnetReferenceListArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: (Required) the UUID.
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ProjectTunnelReferenceListArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        (Required) the UUID.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the project.
        """
elif False:
    ProjectTunnelReferenceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectTunnelReferenceListArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: (Required) the UUID.
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ProjectUserGroupListArgsDict(TypedDict):
        directory_service_ous: NotRequired[pulumi.Input[Sequence[pulumi.Input['ProjectUserGroupListDirectoryServiceOusArgsDict']]]]
        directory_service_user_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['ProjectUserGroupListDirectoryServiceUserGroupArgsDict']]]]
        metadata: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        saml_user_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['ProjectUserGroupListSamlUserGroupArgsDict']]]]
elif False:
    ProjectUserGroupListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectUserGroupListArgs:
    def __init__(__self__, *,
                 directory_service_ous: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectUserGroupListDirectoryServiceOusArgs']]]] = None,
                 directory_service_user_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectUserGroupListDirectoryServiceUserGroupArgs']]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 saml_user_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectUserGroupListSamlUserGroupArgs']]]] = None):
        if directory_service_ous is not None:
            pulumi.set(__self__, "directory_service_ous", directory_service_ous)
        if directory_service_user_groups is not None:
            pulumi.set(__self__, "directory_service_user_groups", directory_service_user_groups)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if saml_user_groups is not None:
            pulumi.set(__self__, "saml_user_groups", saml_user_groups)

    @property
    @pulumi.getter(name="directoryServiceOus")
    def directory_service_ous(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectUserGroupListDirectoryServiceOusArgs']]]]:
        return pulumi.get(self, "directory_service_ous")

    @directory_service_ous.setter
    def directory_service_ous(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectUserGroupListDirectoryServiceOusArgs']]]]):
        pulumi.set(self, "directory_service_ous", value)

    @property
    @pulumi.getter(name="directoryServiceUserGroups")
    def directory_service_user_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectUserGroupListDirectoryServiceUserGroupArgs']]]]:
        return pulumi.get(self, "directory_service_user_groups")

    @directory_service_user_groups.setter
    def directory_service_user_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectUserGroupListDirectoryServiceUserGroupArgs']]]]):
        pulumi.set(self, "directory_service_user_groups", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="samlUserGroups")
    def saml_user_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectUserGroupListSamlUserGroupArgs']]]]:
        return pulumi.get(self, "saml_user_groups")

    @saml_user_groups.setter
    def saml_user_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectUserGroupListSamlUserGroupArgs']]]]):
        pulumi.set(self, "saml_user_groups", value)


if not MYPY:
    class ProjectUserGroupListDirectoryServiceOusArgsDict(TypedDict):
        distinguished_name: pulumi.Input[str]
elif False:
    ProjectUserGroupListDirectoryServiceOusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectUserGroupListDirectoryServiceOusArgs:
    def __init__(__self__, *,
                 distinguished_name: pulumi.Input[str]):
        pulumi.set(__self__, "distinguished_name", distinguished_name)

    @property
    @pulumi.getter(name="distinguishedName")
    def distinguished_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "distinguished_name")

    @distinguished_name.setter
    def distinguished_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "distinguished_name", value)


if not MYPY:
    class ProjectUserGroupListDirectoryServiceUserGroupArgsDict(TypedDict):
        distinguished_name: pulumi.Input[str]
elif False:
    ProjectUserGroupListDirectoryServiceUserGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectUserGroupListDirectoryServiceUserGroupArgs:
    def __init__(__self__, *,
                 distinguished_name: pulumi.Input[str]):
        pulumi.set(__self__, "distinguished_name", distinguished_name)

    @property
    @pulumi.getter(name="distinguishedName")
    def distinguished_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "distinguished_name")

    @distinguished_name.setter
    def distinguished_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "distinguished_name", value)


if not MYPY:
    class ProjectUserGroupListSamlUserGroupArgsDict(TypedDict):
        idp_uuid: pulumi.Input[str]
        name: pulumi.Input[str]
        """
        The name for the project.
        """
elif False:
    ProjectUserGroupListSamlUserGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectUserGroupListSamlUserGroupArgs:
    def __init__(__self__, *,
                 idp_uuid: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name for the project.
        """
        pulumi.set(__self__, "idp_uuid", idp_uuid)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="idpUuid")
    def idp_uuid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "idp_uuid")

    @idp_uuid.setter
    def idp_uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "idp_uuid", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ProjectUserListArgsDict(TypedDict):
        directory_service_user: NotRequired[pulumi.Input['ProjectUserListDirectoryServiceUserArgsDict']]
        identity_provider_user: NotRequired[pulumi.Input['ProjectUserListIdentityProviderUserArgsDict']]
        metadata: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    ProjectUserListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectUserListArgs:
    def __init__(__self__, *,
                 directory_service_user: Optional[pulumi.Input['ProjectUserListDirectoryServiceUserArgs']] = None,
                 identity_provider_user: Optional[pulumi.Input['ProjectUserListIdentityProviderUserArgs']] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if directory_service_user is not None:
            pulumi.set(__self__, "directory_service_user", directory_service_user)
        if identity_provider_user is not None:
            pulumi.set(__self__, "identity_provider_user", identity_provider_user)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter(name="directoryServiceUser")
    def directory_service_user(self) -> Optional[pulumi.Input['ProjectUserListDirectoryServiceUserArgs']]:
        return pulumi.get(self, "directory_service_user")

    @directory_service_user.setter
    def directory_service_user(self, value: Optional[pulumi.Input['ProjectUserListDirectoryServiceUserArgs']]):
        pulumi.set(self, "directory_service_user", value)

    @property
    @pulumi.getter(name="identityProviderUser")
    def identity_provider_user(self) -> Optional[pulumi.Input['ProjectUserListIdentityProviderUserArgs']]:
        return pulumi.get(self, "identity_provider_user")

    @identity_provider_user.setter
    def identity_provider_user(self, value: Optional[pulumi.Input['ProjectUserListIdentityProviderUserArgs']]):
        pulumi.set(self, "identity_provider_user", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)


if not MYPY:
    class ProjectUserListDirectoryServiceUserArgsDict(TypedDict):
        directory_service_reference: pulumi.Input['ProjectUserListDirectoryServiceUserDirectoryServiceReferenceArgsDict']
        default_user_principal_name: NotRequired[pulumi.Input[str]]
        user_principal_name: NotRequired[pulumi.Input[str]]
elif False:
    ProjectUserListDirectoryServiceUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectUserListDirectoryServiceUserArgs:
    def __init__(__self__, *,
                 directory_service_reference: pulumi.Input['ProjectUserListDirectoryServiceUserDirectoryServiceReferenceArgs'],
                 default_user_principal_name: Optional[pulumi.Input[str]] = None,
                 user_principal_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "directory_service_reference", directory_service_reference)
        if default_user_principal_name is not None:
            pulumi.set(__self__, "default_user_principal_name", default_user_principal_name)
        if user_principal_name is not None:
            pulumi.set(__self__, "user_principal_name", user_principal_name)

    @property
    @pulumi.getter(name="directoryServiceReference")
    def directory_service_reference(self) -> pulumi.Input['ProjectUserListDirectoryServiceUserDirectoryServiceReferenceArgs']:
        return pulumi.get(self, "directory_service_reference")

    @directory_service_reference.setter
    def directory_service_reference(self, value: pulumi.Input['ProjectUserListDirectoryServiceUserDirectoryServiceReferenceArgs']):
        pulumi.set(self, "directory_service_reference", value)

    @property
    @pulumi.getter(name="defaultUserPrincipalName")
    def default_user_principal_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_user_principal_name")

    @default_user_principal_name.setter
    def default_user_principal_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_user_principal_name", value)

    @property
    @pulumi.getter(name="userPrincipalName")
    def user_principal_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_principal_name")

    @user_principal_name.setter
    def user_principal_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_principal_name", value)


if not MYPY:
    class ProjectUserListDirectoryServiceUserDirectoryServiceReferenceArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        (Required) the UUID.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the project.
        """
elif False:
    ProjectUserListDirectoryServiceUserDirectoryServiceReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectUserListDirectoryServiceUserDirectoryServiceReferenceArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: (Required) the UUID.
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ProjectUserListIdentityProviderUserArgsDict(TypedDict):
        identity_provider_reference: pulumi.Input['ProjectUserListIdentityProviderUserIdentityProviderReferenceArgsDict']
        username: NotRequired[pulumi.Input[str]]
elif False:
    ProjectUserListIdentityProviderUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectUserListIdentityProviderUserArgs:
    def __init__(__self__, *,
                 identity_provider_reference: pulumi.Input['ProjectUserListIdentityProviderUserIdentityProviderReferenceArgs'],
                 username: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "identity_provider_reference", identity_provider_reference)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="identityProviderReference")
    def identity_provider_reference(self) -> pulumi.Input['ProjectUserListIdentityProviderUserIdentityProviderReferenceArgs']:
        return pulumi.get(self, "identity_provider_reference")

    @identity_provider_reference.setter
    def identity_provider_reference(self, value: pulumi.Input['ProjectUserListIdentityProviderUserIdentityProviderReferenceArgs']):
        pulumi.set(self, "identity_provider_reference", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class ProjectUserListIdentityProviderUserIdentityProviderReferenceArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        (Required) the UUID.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the project.
        """
elif False:
    ProjectUserListIdentityProviderUserIdentityProviderReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectUserListIdentityProviderUserIdentityProviderReferenceArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: (Required) the UUID.
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ProjectUserReferenceListArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        (Required) the UUID.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the project.
        """
elif False:
    ProjectUserReferenceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectUserReferenceListArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: (Required) the UUID.
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ProjectVpcReferenceListArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        (Required) the UUID.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the project.
        """
elif False:
    ProjectVpcReferenceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectVpcReferenceListArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: (Required) the UUID.
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ProtectionRuleAvailabilityZoneConnectivityListArgsDict(TypedDict):
        destination_availability_zone_index: NotRequired[pulumi.Input[int]]
        snapshot_schedule_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgsDict']]]]
        source_availability_zone_index: NotRequired[pulumi.Input[int]]
elif False:
    ProtectionRuleAvailabilityZoneConnectivityListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProtectionRuleAvailabilityZoneConnectivityListArgs:
    def __init__(__self__, *,
                 destination_availability_zone_index: Optional[pulumi.Input[int]] = None,
                 snapshot_schedule_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs']]]] = None,
                 source_availability_zone_index: Optional[pulumi.Input[int]] = None):
        if destination_availability_zone_index is not None:
            pulumi.set(__self__, "destination_availability_zone_index", destination_availability_zone_index)
        if snapshot_schedule_lists is not None:
            pulumi.set(__self__, "snapshot_schedule_lists", snapshot_schedule_lists)
        if source_availability_zone_index is not None:
            pulumi.set(__self__, "source_availability_zone_index", source_availability_zone_index)

    @property
    @pulumi.getter(name="destinationAvailabilityZoneIndex")
    def destination_availability_zone_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "destination_availability_zone_index")

    @destination_availability_zone_index.setter
    def destination_availability_zone_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "destination_availability_zone_index", value)

    @property
    @pulumi.getter(name="snapshotScheduleLists")
    def snapshot_schedule_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs']]]]:
        return pulumi.get(self, "snapshot_schedule_lists")

    @snapshot_schedule_lists.setter
    def snapshot_schedule_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs']]]]):
        pulumi.set(self, "snapshot_schedule_lists", value)

    @property
    @pulumi.getter(name="sourceAvailabilityZoneIndex")
    def source_availability_zone_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "source_availability_zone_index")

    @source_availability_zone_index.setter
    def source_availability_zone_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_availability_zone_index", value)


if not MYPY:
    class ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgsDict(TypedDict):
        recovery_point_objective_secs: pulumi.Input[int]
        auto_suspend_timeout_secs: NotRequired[pulumi.Input[int]]
        local_snapshot_retention_policy: NotRequired[pulumi.Input['ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgsDict']]
        remote_snapshot_retention_policy: NotRequired[pulumi.Input['ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyArgsDict']]
        snapshot_type: NotRequired[pulumi.Input[str]]
elif False:
    ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs:
    def __init__(__self__, *,
                 recovery_point_objective_secs: pulumi.Input[int],
                 auto_suspend_timeout_secs: Optional[pulumi.Input[int]] = None,
                 local_snapshot_retention_policy: Optional[pulumi.Input['ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs']] = None,
                 remote_snapshot_retention_policy: Optional[pulumi.Input['ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyArgs']] = None,
                 snapshot_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "recovery_point_objective_secs", recovery_point_objective_secs)
        if auto_suspend_timeout_secs is not None:
            pulumi.set(__self__, "auto_suspend_timeout_secs", auto_suspend_timeout_secs)
        if local_snapshot_retention_policy is not None:
            pulumi.set(__self__, "local_snapshot_retention_policy", local_snapshot_retention_policy)
        if remote_snapshot_retention_policy is not None:
            pulumi.set(__self__, "remote_snapshot_retention_policy", remote_snapshot_retention_policy)
        if snapshot_type is not None:
            pulumi.set(__self__, "snapshot_type", snapshot_type)

    @property
    @pulumi.getter(name="recoveryPointObjectiveSecs")
    def recovery_point_objective_secs(self) -> pulumi.Input[int]:
        return pulumi.get(self, "recovery_point_objective_secs")

    @recovery_point_objective_secs.setter
    def recovery_point_objective_secs(self, value: pulumi.Input[int]):
        pulumi.set(self, "recovery_point_objective_secs", value)

    @property
    @pulumi.getter(name="autoSuspendTimeoutSecs")
    def auto_suspend_timeout_secs(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_suspend_timeout_secs")

    @auto_suspend_timeout_secs.setter
    def auto_suspend_timeout_secs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_suspend_timeout_secs", value)

    @property
    @pulumi.getter(name="localSnapshotRetentionPolicy")
    def local_snapshot_retention_policy(self) -> Optional[pulumi.Input['ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs']]:
        return pulumi.get(self, "local_snapshot_retention_policy")

    @local_snapshot_retention_policy.setter
    def local_snapshot_retention_policy(self, value: Optional[pulumi.Input['ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs']]):
        pulumi.set(self, "local_snapshot_retention_policy", value)

    @property
    @pulumi.getter(name="remoteSnapshotRetentionPolicy")
    def remote_snapshot_retention_policy(self) -> Optional[pulumi.Input['ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyArgs']]:
        return pulumi.get(self, "remote_snapshot_retention_policy")

    @remote_snapshot_retention_policy.setter
    def remote_snapshot_retention_policy(self, value: Optional[pulumi.Input['ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyArgs']]):
        pulumi.set(self, "remote_snapshot_retention_policy", value)

    @property
    @pulumi.getter(name="snapshotType")
    def snapshot_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_type")

    @snapshot_type.setter
    def snapshot_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_type", value)


if not MYPY:
    class ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgsDict(TypedDict):
        num_snapshots: NotRequired[pulumi.Input[int]]
        rollup_retention_policy_multiple: NotRequired[pulumi.Input[int]]
        rollup_retention_policy_snapshot_interval_type: NotRequired[pulumi.Input[str]]
elif False:
    ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyArgs:
    def __init__(__self__, *,
                 num_snapshots: Optional[pulumi.Input[int]] = None,
                 rollup_retention_policy_multiple: Optional[pulumi.Input[int]] = None,
                 rollup_retention_policy_snapshot_interval_type: Optional[pulumi.Input[str]] = None):
        if num_snapshots is not None:
            pulumi.set(__self__, "num_snapshots", num_snapshots)
        if rollup_retention_policy_multiple is not None:
            pulumi.set(__self__, "rollup_retention_policy_multiple", rollup_retention_policy_multiple)
        if rollup_retention_policy_snapshot_interval_type is not None:
            pulumi.set(__self__, "rollup_retention_policy_snapshot_interval_type", rollup_retention_policy_snapshot_interval_type)

    @property
    @pulumi.getter(name="numSnapshots")
    def num_snapshots(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "num_snapshots")

    @num_snapshots.setter
    def num_snapshots(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_snapshots", value)

    @property
    @pulumi.getter(name="rollupRetentionPolicyMultiple")
    def rollup_retention_policy_multiple(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rollup_retention_policy_multiple")

    @rollup_retention_policy_multiple.setter
    def rollup_retention_policy_multiple(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rollup_retention_policy_multiple", value)

    @property
    @pulumi.getter(name="rollupRetentionPolicySnapshotIntervalType")
    def rollup_retention_policy_snapshot_interval_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rollup_retention_policy_snapshot_interval_type")

    @rollup_retention_policy_snapshot_interval_type.setter
    def rollup_retention_policy_snapshot_interval_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rollup_retention_policy_snapshot_interval_type", value)


if not MYPY:
    class ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyArgsDict(TypedDict):
        num_snapshots: NotRequired[pulumi.Input[int]]
        rollup_retention_policy_multiple: NotRequired[pulumi.Input[int]]
        rollup_retention_policy_snapshot_interval_type: NotRequired[pulumi.Input[str]]
elif False:
    ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyArgs:
    def __init__(__self__, *,
                 num_snapshots: Optional[pulumi.Input[int]] = None,
                 rollup_retention_policy_multiple: Optional[pulumi.Input[int]] = None,
                 rollup_retention_policy_snapshot_interval_type: Optional[pulumi.Input[str]] = None):
        if num_snapshots is not None:
            pulumi.set(__self__, "num_snapshots", num_snapshots)
        if rollup_retention_policy_multiple is not None:
            pulumi.set(__self__, "rollup_retention_policy_multiple", rollup_retention_policy_multiple)
        if rollup_retention_policy_snapshot_interval_type is not None:
            pulumi.set(__self__, "rollup_retention_policy_snapshot_interval_type", rollup_retention_policy_snapshot_interval_type)

    @property
    @pulumi.getter(name="numSnapshots")
    def num_snapshots(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "num_snapshots")

    @num_snapshots.setter
    def num_snapshots(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_snapshots", value)

    @property
    @pulumi.getter(name="rollupRetentionPolicyMultiple")
    def rollup_retention_policy_multiple(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rollup_retention_policy_multiple")

    @rollup_retention_policy_multiple.setter
    def rollup_retention_policy_multiple(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rollup_retention_policy_multiple", value)

    @property
    @pulumi.getter(name="rollupRetentionPolicySnapshotIntervalType")
    def rollup_retention_policy_snapshot_interval_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rollup_retention_policy_snapshot_interval_type")

    @rollup_retention_policy_snapshot_interval_type.setter
    def rollup_retention_policy_snapshot_interval_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rollup_retention_policy_snapshot_interval_type", value)


if not MYPY:
    class ProtectionRuleCategoryArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the protection rule.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        value of the key.
        """
elif False:
    ProtectionRuleCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProtectionRuleCategoryArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name for the protection rule.
        :param pulumi.Input[str] value: value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the protection rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ProtectionRuleCategoryFilterArgsDict(TypedDict):
        kind_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        params: NotRequired[pulumi.Input[Sequence[pulumi.Input['ProtectionRuleCategoryFilterParamArgsDict']]]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    ProtectionRuleCategoryFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProtectionRuleCategoryFilterArgs:
    def __init__(__self__, *,
                 kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 params: Optional[pulumi.Input[Sequence[pulumi.Input['ProtectionRuleCategoryFilterParamArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if kind_lists is not None:
            pulumi.set(__self__, "kind_lists", kind_lists)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="kindLists")
    def kind_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "kind_lists")

    @kind_lists.setter
    def kind_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kind_lists", value)

    @property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProtectionRuleCategoryFilterParamArgs']]]]:
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProtectionRuleCategoryFilterParamArgs']]]]):
        pulumi.set(self, "params", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ProtectionRuleCategoryFilterParamArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The name for the protection rule.
        """
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
elif False:
    ProtectionRuleCategoryFilterParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProtectionRuleCategoryFilterParamArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: The name for the protection rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the protection rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class ProtectionRuleOrderedAvailabilityZoneListArgsDict(TypedDict):
        availability_zone_url: NotRequired[pulumi.Input[str]]
        cluster_uuid: NotRequired[pulumi.Input[str]]
elif False:
    ProtectionRuleOrderedAvailabilityZoneListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProtectionRuleOrderedAvailabilityZoneListArgs:
    def __init__(__self__, *,
                 availability_zone_url: Optional[pulumi.Input[str]] = None,
                 cluster_uuid: Optional[pulumi.Input[str]] = None):
        if availability_zone_url is not None:
            pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        if cluster_uuid is not None:
            pulumi.set(__self__, "cluster_uuid", cluster_uuid)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "availability_zone_url")

    @availability_zone_url.setter
    def availability_zone_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone_url", value)

    @property
    @pulumi.getter(name="clusterUuid")
    def cluster_uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_uuid")

    @cluster_uuid.setter
    def cluster_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_uuid", value)


if not MYPY:
    class ProtectionRuleOwnerReferenceArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the protection rule.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        (Required) the UUID.
        """
elif False:
    ProtectionRuleOwnerReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProtectionRuleOwnerReferenceArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the protection rule.
        :param pulumi.Input[str] uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the protection rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class ProtectionRuleProjectReferenceArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the protection rule.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        (Required) the UUID.
        """
elif False:
    ProtectionRuleProjectReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProtectionRuleProjectReferenceArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the protection rule.
        :param pulumi.Input[str] uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the protection rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class RecoveryPlanCategoryArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the Recovery Plan.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        value of the key.
        """
elif False:
    RecoveryPlanCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanCategoryArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name for the Recovery Plan.
        :param pulumi.Input[str] value: value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class RecoveryPlanOwnerReferenceArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the Recovery Plan.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        (Required) the UUID.
        """
elif False:
    RecoveryPlanOwnerReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanOwnerReferenceArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the Recovery Plan.
        :param pulumi.Input[str] uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class RecoveryPlanParametersArgsDict(TypedDict):
        floating_ip_assignment_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListArgsDict']]]]
        network_mapping_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListArgsDict']]]]
elif False:
    RecoveryPlanParametersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersArgs:
    def __init__(__self__, *,
                 floating_ip_assignment_lists: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListArgs']]]] = None,
                 network_mapping_lists: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListArgs']]]] = None):
        if floating_ip_assignment_lists is not None:
            pulumi.set(__self__, "floating_ip_assignment_lists", floating_ip_assignment_lists)
        if network_mapping_lists is not None:
            pulumi.set(__self__, "network_mapping_lists", network_mapping_lists)

    @property
    @pulumi.getter(name="floatingIpAssignmentLists")
    def floating_ip_assignment_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListArgs']]]]:
        return pulumi.get(self, "floating_ip_assignment_lists")

    @floating_ip_assignment_lists.setter
    def floating_ip_assignment_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListArgs']]]]):
        pulumi.set(self, "floating_ip_assignment_lists", value)

    @property
    @pulumi.getter(name="networkMappingLists")
    def network_mapping_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListArgs']]]]:
        return pulumi.get(self, "network_mapping_lists")

    @network_mapping_lists.setter
    def network_mapping_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListArgs']]]]):
        pulumi.set(self, "network_mapping_lists", value)


if not MYPY:
    class RecoveryPlanParametersFloatingIpAssignmentListArgsDict(TypedDict):
        availability_zone_url: pulumi.Input[str]
        vm_ip_assignment_lists: pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListArgsDict']]]
elif False:
    RecoveryPlanParametersFloatingIpAssignmentListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersFloatingIpAssignmentListArgs:
    def __init__(__self__, *,
                 availability_zone_url: pulumi.Input[str],
                 vm_ip_assignment_lists: pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListArgs']]]):
        pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        pulumi.set(__self__, "vm_ip_assignment_lists", vm_ip_assignment_lists)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "availability_zone_url")

    @availability_zone_url.setter
    def availability_zone_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "availability_zone_url", value)

    @property
    @pulumi.getter(name="vmIpAssignmentLists")
    def vm_ip_assignment_lists(self) -> pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListArgs']]]:
        return pulumi.get(self, "vm_ip_assignment_lists")

    @vm_ip_assignment_lists.setter
    def vm_ip_assignment_lists(self, value: pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListArgs']]]):
        pulumi.set(self, "vm_ip_assignment_lists", value)


if not MYPY:
    class RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListArgsDict(TypedDict):
        vm_nic_information: pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformationArgsDict']
        vm_reference: pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReferenceArgsDict']
        recovery_floating_ip_config: NotRequired[pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigArgsDict']]
        test_floating_ip_config: NotRequired[pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigArgsDict']]
elif False:
    RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListArgs:
    def __init__(__self__, *,
                 vm_nic_information: pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformationArgs'],
                 vm_reference: pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReferenceArgs'],
                 recovery_floating_ip_config: Optional[pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigArgs']] = None,
                 test_floating_ip_config: Optional[pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigArgs']] = None):
        pulumi.set(__self__, "vm_nic_information", vm_nic_information)
        pulumi.set(__self__, "vm_reference", vm_reference)
        if recovery_floating_ip_config is not None:
            pulumi.set(__self__, "recovery_floating_ip_config", recovery_floating_ip_config)
        if test_floating_ip_config is not None:
            pulumi.set(__self__, "test_floating_ip_config", test_floating_ip_config)

    @property
    @pulumi.getter(name="vmNicInformation")
    def vm_nic_information(self) -> pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformationArgs']:
        return pulumi.get(self, "vm_nic_information")

    @vm_nic_information.setter
    def vm_nic_information(self, value: pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformationArgs']):
        pulumi.set(self, "vm_nic_information", value)

    @property
    @pulumi.getter(name="vmReference")
    def vm_reference(self) -> pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReferenceArgs']:
        return pulumi.get(self, "vm_reference")

    @vm_reference.setter
    def vm_reference(self, value: pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReferenceArgs']):
        pulumi.set(self, "vm_reference", value)

    @property
    @pulumi.getter(name="recoveryFloatingIpConfig")
    def recovery_floating_ip_config(self) -> Optional[pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigArgs']]:
        return pulumi.get(self, "recovery_floating_ip_config")

    @recovery_floating_ip_config.setter
    def recovery_floating_ip_config(self, value: Optional[pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigArgs']]):
        pulumi.set(self, "recovery_floating_ip_config", value)

    @property
    @pulumi.getter(name="testFloatingIpConfig")
    def test_floating_ip_config(self) -> Optional[pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigArgs']]:
        return pulumi.get(self, "test_floating_ip_config")

    @test_floating_ip_config.setter
    def test_floating_ip_config(self, value: Optional[pulumi.Input['RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigArgs']]):
        pulumi.set(self, "test_floating_ip_config", value)


if not MYPY:
    class RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigArgsDict(TypedDict):
        ip: NotRequired[pulumi.Input[str]]
        should_allocate_dynamically: NotRequired[pulumi.Input[bool]]
elif False:
    RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None,
                 should_allocate_dynamically: Optional[pulumi.Input[bool]] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if should_allocate_dynamically is not None:
            pulumi.set(__self__, "should_allocate_dynamically", should_allocate_dynamically)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="shouldAllocateDynamically")
    def should_allocate_dynamically(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "should_allocate_dynamically")

    @should_allocate_dynamically.setter
    def should_allocate_dynamically(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_allocate_dynamically", value)


if not MYPY:
    class RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigArgsDict(TypedDict):
        ip: NotRequired[pulumi.Input[str]]
        should_allocate_dynamically: NotRequired[pulumi.Input[bool]]
elif False:
    RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None,
                 should_allocate_dynamically: Optional[pulumi.Input[bool]] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if should_allocate_dynamically is not None:
            pulumi.set(__self__, "should_allocate_dynamically", should_allocate_dynamically)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="shouldAllocateDynamically")
    def should_allocate_dynamically(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "should_allocate_dynamically")

    @should_allocate_dynamically.setter
    def should_allocate_dynamically(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_allocate_dynamically", value)


if not MYPY:
    class RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformationArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        (Required) the UUID.
        """
        ip: NotRequired[pulumi.Input[str]]
elif False:
    RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformationArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "uuid", uuid)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


if not MYPY:
    class RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReferenceArgsDict(TypedDict):
        kind: pulumi.Input[str]
        """
        (Required) The kind name (Default value: `project`).
        """
        uuid: pulumi.Input[str]
        """
        (Required) the UUID.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the Recovery Plan.
        """
elif False:
    RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReferenceArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 uuid: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] uuid: (Required) the UUID.
        :param pulumi.Input[str] name: The name for the Recovery Plan.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "uuid", uuid)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class RecoveryPlanParametersNetworkMappingListArgsDict(TypedDict):
        are_networks_stretched: NotRequired[pulumi.Input[bool]]
        availability_zone_network_mapping_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListArgsDict']]]]
elif False:
    RecoveryPlanParametersNetworkMappingListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersNetworkMappingListArgs:
    def __init__(__self__, *,
                 are_networks_stretched: Optional[pulumi.Input[bool]] = None,
                 availability_zone_network_mapping_lists: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListArgs']]]] = None):
        if are_networks_stretched is not None:
            pulumi.set(__self__, "are_networks_stretched", are_networks_stretched)
        if availability_zone_network_mapping_lists is not None:
            pulumi.set(__self__, "availability_zone_network_mapping_lists", availability_zone_network_mapping_lists)

    @property
    @pulumi.getter(name="areNetworksStretched")
    def are_networks_stretched(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "are_networks_stretched")

    @are_networks_stretched.setter
    def are_networks_stretched(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "are_networks_stretched", value)

    @property
    @pulumi.getter(name="availabilityZoneNetworkMappingLists")
    def availability_zone_network_mapping_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListArgs']]]]:
        return pulumi.get(self, "availability_zone_network_mapping_lists")

    @availability_zone_network_mapping_lists.setter
    def availability_zone_network_mapping_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListArgs']]]]):
        pulumi.set(self, "availability_zone_network_mapping_lists", value)


if not MYPY:
    class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListArgsDict(TypedDict):
        availability_zone_url: NotRequired[pulumi.Input[str]]
        cluster_reference_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListArgsDict']]]]
        recovery_ip_assignment_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListArgsDict']]]]
        recovery_network: NotRequired[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkArgsDict']]
        test_ip_assignment_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListArgsDict']]]]
        test_network: NotRequired[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkArgsDict']]
elif False:
    RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListArgs:
    def __init__(__self__, *,
                 availability_zone_url: Optional[pulumi.Input[str]] = None,
                 cluster_reference_lists: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListArgs']]]] = None,
                 recovery_ip_assignment_lists: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListArgs']]]] = None,
                 recovery_network: Optional[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkArgs']] = None,
                 test_ip_assignment_lists: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListArgs']]]] = None,
                 test_network: Optional[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkArgs']] = None):
        if availability_zone_url is not None:
            pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        if cluster_reference_lists is not None:
            pulumi.set(__self__, "cluster_reference_lists", cluster_reference_lists)
        if recovery_ip_assignment_lists is not None:
            pulumi.set(__self__, "recovery_ip_assignment_lists", recovery_ip_assignment_lists)
        if recovery_network is not None:
            pulumi.set(__self__, "recovery_network", recovery_network)
        if test_ip_assignment_lists is not None:
            pulumi.set(__self__, "test_ip_assignment_lists", test_ip_assignment_lists)
        if test_network is not None:
            pulumi.set(__self__, "test_network", test_network)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "availability_zone_url")

    @availability_zone_url.setter
    def availability_zone_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone_url", value)

    @property
    @pulumi.getter(name="clusterReferenceLists")
    def cluster_reference_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListArgs']]]]:
        return pulumi.get(self, "cluster_reference_lists")

    @cluster_reference_lists.setter
    def cluster_reference_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListArgs']]]]):
        pulumi.set(self, "cluster_reference_lists", value)

    @property
    @pulumi.getter(name="recoveryIpAssignmentLists")
    def recovery_ip_assignment_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListArgs']]]]:
        return pulumi.get(self, "recovery_ip_assignment_lists")

    @recovery_ip_assignment_lists.setter
    def recovery_ip_assignment_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListArgs']]]]):
        pulumi.set(self, "recovery_ip_assignment_lists", value)

    @property
    @pulumi.getter(name="recoveryNetwork")
    def recovery_network(self) -> Optional[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkArgs']]:
        return pulumi.get(self, "recovery_network")

    @recovery_network.setter
    def recovery_network(self, value: Optional[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkArgs']]):
        pulumi.set(self, "recovery_network", value)

    @property
    @pulumi.getter(name="testIpAssignmentLists")
    def test_ip_assignment_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListArgs']]]]:
        return pulumi.get(self, "test_ip_assignment_lists")

    @test_ip_assignment_lists.setter
    def test_ip_assignment_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListArgs']]]]):
        pulumi.set(self, "test_ip_assignment_lists", value)

    @property
    @pulumi.getter(name="testNetwork")
    def test_network(self) -> Optional[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkArgs']]:
        return pulumi.get(self, "test_network")

    @test_network.setter
    def test_network(self, value: Optional[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkArgs']]):
        pulumi.set(self, "test_network", value)


if not MYPY:
    class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListArgsDict(TypedDict):
        kind: pulumi.Input[str]
        """
        (Required) The kind name (Default value: `project`).
        """
        uuid: pulumi.Input[str]
        """
        (Required) the UUID.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the Recovery Plan.
        """
elif False:
    RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 uuid: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] uuid: (Required) the UUID.
        :param pulumi.Input[str] name: The name for the Recovery Plan.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "uuid", uuid)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListArgsDict(TypedDict):
        ip_config_lists: pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListArgsDict']]]
        vm_reference: pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceArgsDict']
elif False:
    RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListArgs:
    def __init__(__self__, *,
                 ip_config_lists: pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListArgs']]],
                 vm_reference: pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceArgs']):
        pulumi.set(__self__, "ip_config_lists", ip_config_lists)
        pulumi.set(__self__, "vm_reference", vm_reference)

    @property
    @pulumi.getter(name="ipConfigLists")
    def ip_config_lists(self) -> pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListArgs']]]:
        return pulumi.get(self, "ip_config_lists")

    @ip_config_lists.setter
    def ip_config_lists(self, value: pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListArgs']]]):
        pulumi.set(self, "ip_config_lists", value)

    @property
    @pulumi.getter(name="vmReference")
    def vm_reference(self) -> pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceArgs']:
        return pulumi.get(self, "vm_reference")

    @vm_reference.setter
    def vm_reference(self, value: pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceArgs']):
        pulumi.set(self, "vm_reference", value)


if not MYPY:
    class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListArgsDict(TypedDict):
        ip_address: pulumi.Input[str]
elif False:
    RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListArgs:
    def __init__(__self__, *,
                 ip_address: pulumi.Input[str]):
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_address", value)


if not MYPY:
    class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceArgsDict(TypedDict):
        kind: pulumi.Input[str]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the Recovery Plan.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        (Required) the UUID.
        """
elif False:
    RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the Recovery Plan.
        :param pulumi.Input[str] uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the Recovery Plan.
        """
        subnet_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListArgsDict']]]]
        use_vpc_reference: NotRequired[pulumi.Input[bool]]
        virtual_network_reference: NotRequired[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceArgsDict']]
        vpc_reference: NotRequired[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceArgsDict']]
elif False:
    RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 subnet_lists: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListArgs']]]] = None,
                 use_vpc_reference: Optional[pulumi.Input[bool]] = None,
                 virtual_network_reference: Optional[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceArgs']] = None,
                 vpc_reference: Optional[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceArgs']] = None):
        """
        :param pulumi.Input[str] name: The name for the Recovery Plan.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet_lists is not None:
            pulumi.set(__self__, "subnet_lists", subnet_lists)
        if use_vpc_reference is not None:
            pulumi.set(__self__, "use_vpc_reference", use_vpc_reference)
        if virtual_network_reference is not None:
            pulumi.set(__self__, "virtual_network_reference", virtual_network_reference)
        if vpc_reference is not None:
            pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="subnetLists")
    def subnet_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListArgs']]]]:
        return pulumi.get(self, "subnet_lists")

    @subnet_lists.setter
    def subnet_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListArgs']]]]):
        pulumi.set(self, "subnet_lists", value)

    @property
    @pulumi.getter(name="useVpcReference")
    def use_vpc_reference(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vpc_reference")

    @use_vpc_reference.setter
    def use_vpc_reference(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vpc_reference", value)

    @property
    @pulumi.getter(name="virtualNetworkReference")
    def virtual_network_reference(self) -> Optional[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceArgs']]:
        return pulumi.get(self, "virtual_network_reference")

    @virtual_network_reference.setter
    def virtual_network_reference(self, value: Optional[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceArgs']]):
        pulumi.set(self, "virtual_network_reference", value)

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Optional[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceArgs']]:
        return pulumi.get(self, "vpc_reference")

    @vpc_reference.setter
    def vpc_reference(self, value: Optional[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceArgs']]):
        pulumi.set(self, "vpc_reference", value)


if not MYPY:
    class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListArgsDict(TypedDict):
        gateway_ip: pulumi.Input[str]
        prefix_length: pulumi.Input[int]
        external_connectivity_state: NotRequired[pulumi.Input[str]]
elif False:
    RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListArgs:
    def __init__(__self__, *,
                 gateway_ip: pulumi.Input[str],
                 prefix_length: pulumi.Input[int],
                 external_connectivity_state: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "prefix_length", prefix_length)
        if external_connectivity_state is not None:
            pulumi.set(__self__, "external_connectivity_state", external_connectivity_state)

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gateway_ip")

    @gateway_ip.setter
    def gateway_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway_ip", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> pulumi.Input[int]:
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "prefix_length", value)

    @property
    @pulumi.getter(name="externalConnectivityState")
    def external_connectivity_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_connectivity_state")

    @external_connectivity_state.setter
    def external_connectivity_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_connectivity_state", value)


if not MYPY:
    class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the Recovery Plan.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        (Required) the UUID.
        """
elif False:
    RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the Recovery Plan.
        :param pulumi.Input[str] uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the Recovery Plan.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        (Required) the UUID.
        """
elif False:
    RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the Recovery Plan.
        :param pulumi.Input[str] uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListArgsDict(TypedDict):
        ip_config_lists: pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListArgsDict']]]
        vm_reference: pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceArgsDict']
elif False:
    RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListArgs:
    def __init__(__self__, *,
                 ip_config_lists: pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListArgs']]],
                 vm_reference: pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceArgs']):
        pulumi.set(__self__, "ip_config_lists", ip_config_lists)
        pulumi.set(__self__, "vm_reference", vm_reference)

    @property
    @pulumi.getter(name="ipConfigLists")
    def ip_config_lists(self) -> pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListArgs']]]:
        return pulumi.get(self, "ip_config_lists")

    @ip_config_lists.setter
    def ip_config_lists(self, value: pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListArgs']]]):
        pulumi.set(self, "ip_config_lists", value)

    @property
    @pulumi.getter(name="vmReference")
    def vm_reference(self) -> pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceArgs']:
        return pulumi.get(self, "vm_reference")

    @vm_reference.setter
    def vm_reference(self, value: pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceArgs']):
        pulumi.set(self, "vm_reference", value)


if not MYPY:
    class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListArgsDict(TypedDict):
        ip_address: pulumi.Input[str]
elif False:
    RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListArgs:
    def __init__(__self__, *,
                 ip_address: pulumi.Input[str]):
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_address", value)


if not MYPY:
    class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceArgsDict(TypedDict):
        kind: pulumi.Input[str]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the Recovery Plan.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        (Required) the UUID.
        """
elif False:
    RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the Recovery Plan.
        :param pulumi.Input[str] uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the Recovery Plan.
        """
        subnet_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListArgsDict']]]]
        use_vpc_reference: NotRequired[pulumi.Input[bool]]
        virtual_network_reference: NotRequired[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceArgsDict']]
        vpc_reference: NotRequired[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceArgsDict']]
elif False:
    RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 subnet_lists: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListArgs']]]] = None,
                 use_vpc_reference: Optional[pulumi.Input[bool]] = None,
                 virtual_network_reference: Optional[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceArgs']] = None,
                 vpc_reference: Optional[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceArgs']] = None):
        """
        :param pulumi.Input[str] name: The name for the Recovery Plan.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet_lists is not None:
            pulumi.set(__self__, "subnet_lists", subnet_lists)
        if use_vpc_reference is not None:
            pulumi.set(__self__, "use_vpc_reference", use_vpc_reference)
        if virtual_network_reference is not None:
            pulumi.set(__self__, "virtual_network_reference", virtual_network_reference)
        if vpc_reference is not None:
            pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="subnetLists")
    def subnet_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListArgs']]]]:
        return pulumi.get(self, "subnet_lists")

    @subnet_lists.setter
    def subnet_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListArgs']]]]):
        pulumi.set(self, "subnet_lists", value)

    @property
    @pulumi.getter(name="useVpcReference")
    def use_vpc_reference(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vpc_reference")

    @use_vpc_reference.setter
    def use_vpc_reference(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vpc_reference", value)

    @property
    @pulumi.getter(name="virtualNetworkReference")
    def virtual_network_reference(self) -> Optional[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceArgs']]:
        return pulumi.get(self, "virtual_network_reference")

    @virtual_network_reference.setter
    def virtual_network_reference(self, value: Optional[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceArgs']]):
        pulumi.set(self, "virtual_network_reference", value)

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Optional[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceArgs']]:
        return pulumi.get(self, "vpc_reference")

    @vpc_reference.setter
    def vpc_reference(self, value: Optional[pulumi.Input['RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceArgs']]):
        pulumi.set(self, "vpc_reference", value)


if not MYPY:
    class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListArgsDict(TypedDict):
        gateway_ip: pulumi.Input[str]
        prefix_length: pulumi.Input[int]
        external_connectivity_state: NotRequired[pulumi.Input[str]]
elif False:
    RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListArgs:
    def __init__(__self__, *,
                 gateway_ip: pulumi.Input[str],
                 prefix_length: pulumi.Input[int],
                 external_connectivity_state: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "prefix_length", prefix_length)
        if external_connectivity_state is not None:
            pulumi.set(__self__, "external_connectivity_state", external_connectivity_state)

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gateway_ip")

    @gateway_ip.setter
    def gateway_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway_ip", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> pulumi.Input[int]:
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "prefix_length", value)

    @property
    @pulumi.getter(name="externalConnectivityState")
    def external_connectivity_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_connectivity_state")

    @external_connectivity_state.setter
    def external_connectivity_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_connectivity_state", value)


if not MYPY:
    class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the Recovery Plan.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        (Required) the UUID.
        """
elif False:
    RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the Recovery Plan.
        :param pulumi.Input[str] uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the Recovery Plan.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        (Required) the UUID.
        """
elif False:
    RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the Recovery Plan.
        :param pulumi.Input[str] uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class RecoveryPlanProjectReferenceArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        (Required) The kind name (Default value: `project`).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the Recovery Plan.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        (Required) the UUID.
        """
elif False:
    RecoveryPlanProjectReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanProjectReferenceArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: (Required) The kind name (Default value: `project`).
        :param pulumi.Input[str] name: The name for the Recovery Plan.
        :param pulumi.Input[str] uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class RecoveryPlanStageListArgsDict(TypedDict):
        stage_work: pulumi.Input['RecoveryPlanStageListStageWorkArgsDict']
        delay_time_secs: NotRequired[pulumi.Input[int]]
        stage_uuid: NotRequired[pulumi.Input[str]]
elif False:
    RecoveryPlanStageListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanStageListArgs:
    def __init__(__self__, *,
                 stage_work: pulumi.Input['RecoveryPlanStageListStageWorkArgs'],
                 delay_time_secs: Optional[pulumi.Input[int]] = None,
                 stage_uuid: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "stage_work", stage_work)
        if delay_time_secs is not None:
            pulumi.set(__self__, "delay_time_secs", delay_time_secs)
        if stage_uuid is not None:
            pulumi.set(__self__, "stage_uuid", stage_uuid)

    @property
    @pulumi.getter(name="stageWork")
    def stage_work(self) -> pulumi.Input['RecoveryPlanStageListStageWorkArgs']:
        return pulumi.get(self, "stage_work")

    @stage_work.setter
    def stage_work(self, value: pulumi.Input['RecoveryPlanStageListStageWorkArgs']):
        pulumi.set(self, "stage_work", value)

    @property
    @pulumi.getter(name="delayTimeSecs")
    def delay_time_secs(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "delay_time_secs")

    @delay_time_secs.setter
    def delay_time_secs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delay_time_secs", value)

    @property
    @pulumi.getter(name="stageUuid")
    def stage_uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stage_uuid")

    @stage_uuid.setter
    def stage_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stage_uuid", value)


if not MYPY:
    class RecoveryPlanStageListStageWorkArgsDict(TypedDict):
        recover_entities: NotRequired[pulumi.Input['RecoveryPlanStageListStageWorkRecoverEntitiesArgsDict']]
elif False:
    RecoveryPlanStageListStageWorkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanStageListStageWorkArgs:
    def __init__(__self__, *,
                 recover_entities: Optional[pulumi.Input['RecoveryPlanStageListStageWorkRecoverEntitiesArgs']] = None):
        if recover_entities is not None:
            pulumi.set(__self__, "recover_entities", recover_entities)

    @property
    @pulumi.getter(name="recoverEntities")
    def recover_entities(self) -> Optional[pulumi.Input['RecoveryPlanStageListStageWorkRecoverEntitiesArgs']]:
        return pulumi.get(self, "recover_entities")

    @recover_entities.setter
    def recover_entities(self, value: Optional[pulumi.Input['RecoveryPlanStageListStageWorkRecoverEntitiesArgs']]):
        pulumi.set(self, "recover_entities", value)


if not MYPY:
    class RecoveryPlanStageListStageWorkRecoverEntitiesArgsDict(TypedDict):
        entity_info_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListArgsDict']]]]
elif False:
    RecoveryPlanStageListStageWorkRecoverEntitiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanStageListStageWorkRecoverEntitiesArgs:
    def __init__(__self__, *,
                 entity_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListArgs']]]] = None):
        if entity_info_lists is not None:
            pulumi.set(__self__, "entity_info_lists", entity_info_lists)

    @property
    @pulumi.getter(name="entityInfoLists")
    def entity_info_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListArgs']]]]:
        return pulumi.get(self, "entity_info_lists")

    @entity_info_lists.setter
    def entity_info_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListArgs']]]]):
        pulumi.set(self, "entity_info_lists", value)


if not MYPY:
    class RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListArgsDict(TypedDict):
        any_entity_reference_kind: NotRequired[pulumi.Input[str]]
        any_entity_reference_name: NotRequired[pulumi.Input[str]]
        any_entity_reference_uuid: NotRequired[pulumi.Input[str]]
        categories: NotRequired[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategoryArgsDict']]]]
        script_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptListArgsDict']]]]
elif False:
    RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListArgs:
    def __init__(__self__, *,
                 any_entity_reference_kind: Optional[pulumi.Input[str]] = None,
                 any_entity_reference_name: Optional[pulumi.Input[str]] = None,
                 any_entity_reference_uuid: Optional[pulumi.Input[str]] = None,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategoryArgs']]]] = None,
                 script_lists: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptListArgs']]]] = None):
        if any_entity_reference_kind is not None:
            pulumi.set(__self__, "any_entity_reference_kind", any_entity_reference_kind)
        if any_entity_reference_name is not None:
            pulumi.set(__self__, "any_entity_reference_name", any_entity_reference_name)
        if any_entity_reference_uuid is not None:
            pulumi.set(__self__, "any_entity_reference_uuid", any_entity_reference_uuid)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if script_lists is not None:
            pulumi.set(__self__, "script_lists", script_lists)

    @property
    @pulumi.getter(name="anyEntityReferenceKind")
    def any_entity_reference_kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "any_entity_reference_kind")

    @any_entity_reference_kind.setter
    def any_entity_reference_kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "any_entity_reference_kind", value)

    @property
    @pulumi.getter(name="anyEntityReferenceName")
    def any_entity_reference_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "any_entity_reference_name")

    @any_entity_reference_name.setter
    def any_entity_reference_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "any_entity_reference_name", value)

    @property
    @pulumi.getter(name="anyEntityReferenceUuid")
    def any_entity_reference_uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "any_entity_reference_uuid")

    @any_entity_reference_uuid.setter
    def any_entity_reference_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "any_entity_reference_uuid", value)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategoryArgs']]]]:
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategoryArgs']]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter(name="scriptLists")
    def script_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptListArgs']]]]:
        return pulumi.get(self, "script_lists")

    @script_lists.setter
    def script_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptListArgs']]]]):
        pulumi.set(self, "script_lists", value)


if not MYPY:
    class RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategoryArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the Recovery Plan.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        value of the key.
        """
elif False:
    RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategoryArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name for the Recovery Plan.
        :param pulumi.Input[str] value: value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptListArgsDict(TypedDict):
        enable_script_exec: pulumi.Input[bool]
        timeout: NotRequired[pulumi.Input[str]]
elif False:
    RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptListArgs:
    def __init__(__self__, *,
                 enable_script_exec: pulumi.Input[bool],
                 timeout: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enable_script_exec", enable_script_exec)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="enableScriptExec")
    def enable_script_exec(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_script_exec")

    @enable_script_exec.setter
    def enable_script_exec(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_script_exec", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)


if not MYPY:
    class RoleCategoryArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        - (Optional) Name of the role.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        - value of the key.
        """
elif False:
    RoleCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RoleCategoryArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: - (Optional) Name of the role.
        :param pulumi.Input[str] value: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) Name of the role.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class RoleOwnerReferenceArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name (Default value: project)(Required).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Optional) Name of the role.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        - the UUID(Required).
        """
elif False:
    RoleOwnerReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RoleOwnerReferenceArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: - The kind name (Default value: project)(Required).
        :param pulumi.Input[str] name: - (Optional) Name of the role.
        :param pulumi.Input[str] uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) Name of the role.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class RolePermissionReferenceListArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        - the UUID(Required).
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name (Default value: project)(Required).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Optional) Name of the role.
        """
elif False:
    RolePermissionReferenceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RolePermissionReferenceListArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: - the UUID(Required).
        :param pulumi.Input[str] kind: - The kind name (Default value: project)(Required).
        :param pulumi.Input[str] name: - (Optional) Name of the role.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) Name of the role.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class RoleProjectReferenceArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name (Default value: project)(Required).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Optional) Name of the role.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        - the UUID(Required).
        """
elif False:
    RoleProjectReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RoleProjectReferenceArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: - The kind name (Default value: project)(Required).
        :param pulumi.Input[str] name: - (Optional) Name of the role.
        :param pulumi.Input[str] uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) Name of the role.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class ServiceGroupServiceListArgsDict(TypedDict):
        icmp_type_code_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceGroupServiceListIcmpTypeCodeListArgsDict']]]]
        """
        - (Optional) ICMP type code list
        """
        protocol: NotRequired[pulumi.Input[str]]
        """
        - (Optional) The UserPrincipalName of the user from the directory service.
        """
        tcp_port_range_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceGroupServiceListTcpPortRangeListArgsDict']]]]
        """
        - (Optional) TCP Port range list
        """
        udp_port_range_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceGroupServiceListUdpPortRangeListArgsDict']]]]
        """
        - (Optional) UDP port range list
        """
elif False:
    ServiceGroupServiceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceGroupServiceListArgs:
    def __init__(__self__, *,
                 icmp_type_code_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceGroupServiceListIcmpTypeCodeListArgs']]]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 tcp_port_range_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceGroupServiceListTcpPortRangeListArgs']]]] = None,
                 udp_port_range_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceGroupServiceListUdpPortRangeListArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ServiceGroupServiceListIcmpTypeCodeListArgs']]] icmp_type_code_lists: - (Optional) ICMP type code list
        :param pulumi.Input[str] protocol: - (Optional) The UserPrincipalName of the user from the directory service.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceGroupServiceListTcpPortRangeListArgs']]] tcp_port_range_lists: - (Optional) TCP Port range list
        :param pulumi.Input[Sequence[pulumi.Input['ServiceGroupServiceListUdpPortRangeListArgs']]] udp_port_range_lists: - (Optional) UDP port range list
        """
        if icmp_type_code_lists is not None:
            pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if tcp_port_range_lists is not None:
            pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        if udp_port_range_lists is not None:
            pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceGroupServiceListIcmpTypeCodeListArgs']]]]:
        """
        - (Optional) ICMP type code list
        """
        return pulumi.get(self, "icmp_type_code_lists")

    @icmp_type_code_lists.setter
    def icmp_type_code_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceGroupServiceListIcmpTypeCodeListArgs']]]]):
        pulumi.set(self, "icmp_type_code_lists", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) The UserPrincipalName of the user from the directory service.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceGroupServiceListTcpPortRangeListArgs']]]]:
        """
        - (Optional) TCP Port range list
        """
        return pulumi.get(self, "tcp_port_range_lists")

    @tcp_port_range_lists.setter
    def tcp_port_range_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceGroupServiceListTcpPortRangeListArgs']]]]):
        pulumi.set(self, "tcp_port_range_lists", value)

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceGroupServiceListUdpPortRangeListArgs']]]]:
        """
        - (Optional) UDP port range list
        """
        return pulumi.get(self, "udp_port_range_lists")

    @udp_port_range_lists.setter
    def udp_port_range_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceGroupServiceListUdpPortRangeListArgs']]]]):
        pulumi.set(self, "udp_port_range_lists", value)


if not MYPY:
    class ServiceGroupServiceListIcmpTypeCodeListArgsDict(TypedDict):
        code: NotRequired[pulumi.Input[str]]
        """
        - (Optional) Code as text
        """
        type: NotRequired[pulumi.Input[str]]
        """
        - (Optional) Type as text
        """
elif False:
    ServiceGroupServiceListIcmpTypeCodeListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceGroupServiceListIcmpTypeCodeListArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] code: - (Optional) Code as text
        :param pulumi.Input[str] type: - (Optional) Type as text
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) Code as text
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) Type as text
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ServiceGroupServiceListTcpPortRangeListArgsDict(TypedDict):
        end_port: NotRequired[pulumi.Input[int]]
        start_port: NotRequired[pulumi.Input[int]]
elif False:
    ServiceGroupServiceListTcpPortRangeListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceGroupServiceListTcpPortRangeListArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


if not MYPY:
    class ServiceGroupServiceListUdpPortRangeListArgsDict(TypedDict):
        end_port: NotRequired[pulumi.Input[int]]
        start_port: NotRequired[pulumi.Input[int]]
elif False:
    ServiceGroupServiceListUdpPortRangeListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceGroupServiceListUdpPortRangeListArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


if not MYPY:
    class StaticRoutesDefaultRouteNexthopArgsDict(TypedDict):
        external_subnet_reference_uuid: NotRequired[pulumi.Input[str]]
        """
        Reference to a subnet.
        """
elif False:
    StaticRoutesDefaultRouteNexthopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StaticRoutesDefaultRouteNexthopArgs:
    def __init__(__self__, *,
                 external_subnet_reference_uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] external_subnet_reference_uuid: Reference to a subnet.
        """
        if external_subnet_reference_uuid is not None:
            pulumi.set(__self__, "external_subnet_reference_uuid", external_subnet_reference_uuid)

    @property
    @pulumi.getter(name="externalSubnetReferenceUuid")
    def external_subnet_reference_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a subnet.
        """
        return pulumi.get(self, "external_subnet_reference_uuid")

    @external_subnet_reference_uuid.setter
    def external_subnet_reference_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_subnet_reference_uuid", value)


if not MYPY:
    class StaticRoutesStaticRoutesListArgsDict(TypedDict):
        destination: pulumi.Input[str]
        """
        Destination ip with prefix.
        """
        external_subnet_reference_uuid: NotRequired[pulumi.Input[str]]
        """
        Reference to a subnet. Supported with 2022.x .
        """
        vpn_connection_reference_uuid: NotRequired[pulumi.Input[str]]
        """
        Reference to a vpn connection.
        """
elif False:
    StaticRoutesStaticRoutesListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StaticRoutesStaticRoutesListArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input[str],
                 external_subnet_reference_uuid: Optional[pulumi.Input[str]] = None,
                 vpn_connection_reference_uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] destination: Destination ip with prefix.
        :param pulumi.Input[str] external_subnet_reference_uuid: Reference to a subnet. Supported with 2022.x .
        :param pulumi.Input[str] vpn_connection_reference_uuid: Reference to a vpn connection.
        """
        pulumi.set(__self__, "destination", destination)
        if external_subnet_reference_uuid is not None:
            pulumi.set(__self__, "external_subnet_reference_uuid", external_subnet_reference_uuid)
        if vpn_connection_reference_uuid is not None:
            pulumi.set(__self__, "vpn_connection_reference_uuid", vpn_connection_reference_uuid)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input[str]:
        """
        Destination ip with prefix.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="externalSubnetReferenceUuid")
    def external_subnet_reference_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a subnet. Supported with 2022.x .
        """
        return pulumi.get(self, "external_subnet_reference_uuid")

    @external_subnet_reference_uuid.setter
    def external_subnet_reference_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_subnet_reference_uuid", value)

    @property
    @pulumi.getter(name="vpnConnectionReferenceUuid")
    def vpn_connection_reference_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a vpn connection.
        """
        return pulumi.get(self, "vpn_connection_reference_uuid")

    @vpn_connection_reference_uuid.setter
    def vpn_connection_reference_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_connection_reference_uuid", value)


if not MYPY:
    class SubnetCategoryArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        - (Optional) Subnet name (Readonly).
        """
        value: NotRequired[pulumi.Input[str]]
        """
        - value of the key.
        """
elif False:
    SubnetCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SubnetCategoryArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: - (Optional) Subnet name (Readonly).
        :param pulumi.Input[str] value: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) Subnet name (Readonly).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserAccessControlPolicyReferenceListArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - the name(Optional).
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        - the UUID(Required).
        """
elif False:
    UserAccessControlPolicyReferenceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserAccessControlPolicyReferenceListArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: - The kind name. (Default depends on the resource you are referencing)
        :param pulumi.Input[str] name: - the name(Optional).
        :param pulumi.Input[str] uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class UserCategoryArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        - the name(Optional).
        """
        value: NotRequired[pulumi.Input[str]]
        """
        - value of the key.
        """
elif False:
    UserCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserCategoryArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: - the name(Optional).
        :param pulumi.Input[str] value: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserDirectoryServiceUserArgsDict(TypedDict):
        directory_service_reference: pulumi.Input['UserDirectoryServiceUserDirectoryServiceReferenceArgsDict']
        """
        - (Optional) The reference to a directory service. See #reference for to look the supported attributes.
        """
        default_user_principal_name: NotRequired[pulumi.Input[str]]
        user_principal_name: NotRequired[pulumi.Input[str]]
        """
        - (Optional) The UserPrincipalName of the user from the directory service.
        """
elif False:
    UserDirectoryServiceUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserDirectoryServiceUserArgs:
    def __init__(__self__, *,
                 directory_service_reference: pulumi.Input['UserDirectoryServiceUserDirectoryServiceReferenceArgs'],
                 default_user_principal_name: Optional[pulumi.Input[str]] = None,
                 user_principal_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['UserDirectoryServiceUserDirectoryServiceReferenceArgs'] directory_service_reference: - (Optional) The reference to a directory service. See #reference for to look the supported attributes.
        :param pulumi.Input[str] user_principal_name: - (Optional) The UserPrincipalName of the user from the directory service.
        """
        pulumi.set(__self__, "directory_service_reference", directory_service_reference)
        if default_user_principal_name is not None:
            pulumi.set(__self__, "default_user_principal_name", default_user_principal_name)
        if user_principal_name is not None:
            pulumi.set(__self__, "user_principal_name", user_principal_name)

    @property
    @pulumi.getter(name="directoryServiceReference")
    def directory_service_reference(self) -> pulumi.Input['UserDirectoryServiceUserDirectoryServiceReferenceArgs']:
        """
        - (Optional) The reference to a directory service. See #reference for to look the supported attributes.
        """
        return pulumi.get(self, "directory_service_reference")

    @directory_service_reference.setter
    def directory_service_reference(self, value: pulumi.Input['UserDirectoryServiceUserDirectoryServiceReferenceArgs']):
        pulumi.set(self, "directory_service_reference", value)

    @property
    @pulumi.getter(name="defaultUserPrincipalName")
    def default_user_principal_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_user_principal_name")

    @default_user_principal_name.setter
    def default_user_principal_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_user_principal_name", value)

    @property
    @pulumi.getter(name="userPrincipalName")
    def user_principal_name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) The UserPrincipalName of the user from the directory service.
        """
        return pulumi.get(self, "user_principal_name")

    @user_principal_name.setter
    def user_principal_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_principal_name", value)


if not MYPY:
    class UserDirectoryServiceUserDirectoryServiceReferenceArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        - the UUID(Required).
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - the name(Optional).
        """
elif False:
    UserDirectoryServiceUserDirectoryServiceReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserDirectoryServiceUserDirectoryServiceReferenceArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: - the UUID(Required).
        :param pulumi.Input[str] kind: - The kind name. (Default depends on the resource you are referencing)
        :param pulumi.Input[str] name: - the name(Optional).
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class UserGroupsCategoryArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        - subnet name.
        """
        value: NotRequired[pulumi.Input[str]]
elif False:
    UserGroupsCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserGroupsCategoryArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: - subnet name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - subnet name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class UserGroupsDirectoryServiceOusArgsDict(TypedDict):
        distinguished_name: pulumi.Input[str]
        """
        - (Required) The Distinguished name for the user group.
        """
elif False:
    UserGroupsDirectoryServiceOusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserGroupsDirectoryServiceOusArgs:
    def __init__(__self__, *,
                 distinguished_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] distinguished_name: - (Required) The Distinguished name for the user group.
        """
        pulumi.set(__self__, "distinguished_name", distinguished_name)

    @property
    @pulumi.getter(name="distinguishedName")
    def distinguished_name(self) -> pulumi.Input[str]:
        """
        - (Required) The Distinguished name for the user group.
        """
        return pulumi.get(self, "distinguished_name")

    @distinguished_name.setter
    def distinguished_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "distinguished_name", value)


if not MYPY:
    class UserGroupsDirectoryServiceUserGroupArgsDict(TypedDict):
        distinguished_name: pulumi.Input[str]
        """
        - (Required) The Distinguished name for the user group.
        """
elif False:
    UserGroupsDirectoryServiceUserGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserGroupsDirectoryServiceUserGroupArgs:
    def __init__(__self__, *,
                 distinguished_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] distinguished_name: - (Required) The Distinguished name for the user group.
        """
        pulumi.set(__self__, "distinguished_name", distinguished_name)

    @property
    @pulumi.getter(name="distinguishedName")
    def distinguished_name(self) -> pulumi.Input[str]:
        """
        - (Required) The Distinguished name for the user group.
        """
        return pulumi.get(self, "distinguished_name")

    @distinguished_name.setter
    def distinguished_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "distinguished_name", value)


if not MYPY:
    class UserGroupsSamlUserGroupArgsDict(TypedDict):
        idp_uuid: pulumi.Input[str]
        """
        - (Required) The UUID of the Identity Provider that the group belongs to.
        """
        name: pulumi.Input[str]
        """
        - (Required) The name of the SAML group which the IDP provides.
        """
elif False:
    UserGroupsSamlUserGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserGroupsSamlUserGroupArgs:
    def __init__(__self__, *,
                 idp_uuid: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] idp_uuid: - (Required) The UUID of the Identity Provider that the group belongs to.
        :param pulumi.Input[str] name: - (Required) The name of the SAML group which the IDP provides.
        """
        pulumi.set(__self__, "idp_uuid", idp_uuid)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="idpUuid")
    def idp_uuid(self) -> pulumi.Input[str]:
        """
        - (Required) The UUID of the Identity Provider that the group belongs to.
        """
        return pulumi.get(self, "idp_uuid")

    @idp_uuid.setter
    def idp_uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "idp_uuid", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Required) The name of the SAML group which the IDP provides.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class UserIdentityProviderUserArgsDict(TypedDict):
        identity_provider_reference: pulumi.Input['UserIdentityProviderUserIdentityProviderReferenceArgsDict']
        """
        - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.
        """
        username: NotRequired[pulumi.Input[str]]
        """
        - (Optional) The username from identity provider. Name ID for SAML Identity Provider.
        """
elif False:
    UserIdentityProviderUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserIdentityProviderUserArgs:
    def __init__(__self__, *,
                 identity_provider_reference: pulumi.Input['UserIdentityProviderUserIdentityProviderReferenceArgs'],
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['UserIdentityProviderUserIdentityProviderReferenceArgs'] identity_provider_reference: - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.
        :param pulumi.Input[str] username: - (Optional) The username from identity provider. Name ID for SAML Identity Provider.
        """
        pulumi.set(__self__, "identity_provider_reference", identity_provider_reference)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="identityProviderReference")
    def identity_provider_reference(self) -> pulumi.Input['UserIdentityProviderUserIdentityProviderReferenceArgs']:
        """
        - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.
        """
        return pulumi.get(self, "identity_provider_reference")

    @identity_provider_reference.setter
    def identity_provider_reference(self, value: pulumi.Input['UserIdentityProviderUserIdentityProviderReferenceArgs']):
        pulumi.set(self, "identity_provider_reference", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) The username from identity provider. Name ID for SAML Identity Provider.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class UserIdentityProviderUserIdentityProviderReferenceArgsDict(TypedDict):
        uuid: pulumi.Input[str]
        """
        - the UUID(Required).
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - the name(Optional).
        """
elif False:
    UserIdentityProviderUserIdentityProviderReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserIdentityProviderUserIdentityProviderReferenceArgs:
    def __init__(__self__, *,
                 uuid: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uuid: - the UUID(Required).
        :param pulumi.Input[str] kind: - The kind name. (Default depends on the resource you are referencing)
        :param pulumi.Input[str] name: - the name(Optional).
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class UserProjectReferenceListArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - the name(Optional).
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        - the UUID(Required).
        """
elif False:
    UserProjectReferenceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserProjectReferenceListArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: - The kind name. (Default depends on the resource you are referencing)
        :param pulumi.Input[str] name: - the name(Optional).
        :param pulumi.Input[str] uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class VirtualMachineCategoryArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) The name for the vm.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        - value of the key.
        """
elif False:
    VirtualMachineCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VirtualMachineCategoryArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: - (Required) The name for the vm.
        :param pulumi.Input[str] value: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) The name for the vm.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VirtualMachineDiskListArgsDict(TypedDict):
        data_source_reference: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Reference to a data source.

        The disk_size (the disk size_mib and the disk_size_bytes attributes) is only honored by creating an empty disk. When you are creating from an image, the size is ignored and the disk becomes the size of the image from which it was cloned. In VM creation, you can't set either disk size_mib or disk_size_bytes when you set data_source_reference but, you can update the disk_size after creation (second apply).
        """
        device_properties: NotRequired[pulumi.Input['VirtualMachineDiskListDevicePropertiesArgsDict']]
        """
        Properties to a device.
        """
        disk_size_bytes: NotRequired[pulumi.Input[int]]
        """
        Size of the disk in Bytes.
        """
        disk_size_mib: NotRequired[pulumi.Input[int]]
        """
        Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.
        """
        storage_config: NotRequired[pulumi.Input['VirtualMachineDiskListStorageConfigArgsDict']]
        uuid: NotRequired[pulumi.Input[str]]
        """
        - (Optional) The device ID which is used to uniquely identify this particular disk.
        """
        volume_group_reference: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    VirtualMachineDiskListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VirtualMachineDiskListArgs:
    def __init__(__self__, *,
                 data_source_reference: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 device_properties: Optional[pulumi.Input['VirtualMachineDiskListDevicePropertiesArgs']] = None,
                 disk_size_bytes: Optional[pulumi.Input[int]] = None,
                 disk_size_mib: Optional[pulumi.Input[int]] = None,
                 storage_config: Optional[pulumi.Input['VirtualMachineDiskListStorageConfigArgs']] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 volume_group_reference: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] data_source_reference: Reference to a data source.
               
               The disk_size (the disk size_mib and the disk_size_bytes attributes) is only honored by creating an empty disk. When you are creating from an image, the size is ignored and the disk becomes the size of the image from which it was cloned. In VM creation, you can't set either disk size_mib or disk_size_bytes when you set data_source_reference but, you can update the disk_size after creation (second apply).
        :param pulumi.Input['VirtualMachineDiskListDevicePropertiesArgs'] device_properties: Properties to a device.
        :param pulumi.Input[int] disk_size_bytes: Size of the disk in Bytes.
        :param pulumi.Input[int] disk_size_mib: Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.
        :param pulumi.Input[str] uuid: - (Optional) The device ID which is used to uniquely identify this particular disk.
        """
        if data_source_reference is not None:
            pulumi.set(__self__, "data_source_reference", data_source_reference)
        if device_properties is not None:
            pulumi.set(__self__, "device_properties", device_properties)
        if disk_size_bytes is not None:
            pulumi.set(__self__, "disk_size_bytes", disk_size_bytes)
        if disk_size_mib is not None:
            pulumi.set(__self__, "disk_size_mib", disk_size_mib)
        if storage_config is not None:
            pulumi.set(__self__, "storage_config", storage_config)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if volume_group_reference is not None:
            pulumi.set(__self__, "volume_group_reference", volume_group_reference)

    @property
    @pulumi.getter(name="dataSourceReference")
    def data_source_reference(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Reference to a data source.

        The disk_size (the disk size_mib and the disk_size_bytes attributes) is only honored by creating an empty disk. When you are creating from an image, the size is ignored and the disk becomes the size of the image from which it was cloned. In VM creation, you can't set either disk size_mib or disk_size_bytes when you set data_source_reference but, you can update the disk_size after creation (second apply).
        """
        return pulumi.get(self, "data_source_reference")

    @data_source_reference.setter
    def data_source_reference(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "data_source_reference", value)

    @property
    @pulumi.getter(name="deviceProperties")
    def device_properties(self) -> Optional[pulumi.Input['VirtualMachineDiskListDevicePropertiesArgs']]:
        """
        Properties to a device.
        """
        return pulumi.get(self, "device_properties")

    @device_properties.setter
    def device_properties(self, value: Optional[pulumi.Input['VirtualMachineDiskListDevicePropertiesArgs']]):
        pulumi.set(self, "device_properties", value)

    @property
    @pulumi.getter(name="diskSizeBytes")
    def disk_size_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        Size of the disk in Bytes.
        """
        return pulumi.get(self, "disk_size_bytes")

    @disk_size_bytes.setter
    def disk_size_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size_bytes", value)

    @property
    @pulumi.getter(name="diskSizeMib")
    def disk_size_mib(self) -> Optional[pulumi.Input[int]]:
        """
        Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.
        """
        return pulumi.get(self, "disk_size_mib")

    @disk_size_mib.setter
    def disk_size_mib(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size_mib", value)

    @property
    @pulumi.getter(name="storageConfig")
    def storage_config(self) -> Optional[pulumi.Input['VirtualMachineDiskListStorageConfigArgs']]:
        return pulumi.get(self, "storage_config")

    @storage_config.setter
    def storage_config(self, value: Optional[pulumi.Input['VirtualMachineDiskListStorageConfigArgs']]):
        pulumi.set(self, "storage_config", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) The device ID which is used to uniquely identify this particular disk.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="volumeGroupReference")
    def volume_group_reference(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "volume_group_reference")

    @volume_group_reference.setter
    def volume_group_reference(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "volume_group_reference", value)


if not MYPY:
    class VirtualMachineDiskListDevicePropertiesArgsDict(TypedDict):
        device_type: NotRequired[pulumi.Input[str]]
        """
        - A Disk type (default: DISK).
        """
        disk_address: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        - Address of disk to boot from.
        """
elif False:
    VirtualMachineDiskListDevicePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VirtualMachineDiskListDevicePropertiesArgs:
    def __init__(__self__, *,
                 device_type: Optional[pulumi.Input[str]] = None,
                 disk_address: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] device_type: - A Disk type (default: DISK).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] disk_address: - Address of disk to boot from.
        """
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if disk_address is not None:
            pulumi.set(__self__, "disk_address", disk_address)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        """
        - A Disk type (default: DISK).
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="diskAddress")
    def disk_address(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        - Address of disk to boot from.
        """
        return pulumi.get(self, "disk_address")

    @disk_address.setter
    def disk_address(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "disk_address", value)


if not MYPY:
    class VirtualMachineDiskListStorageConfigArgsDict(TypedDict):
        flash_mode: NotRequired[pulumi.Input[str]]
        """
        - State of the storage policy to pin virtual disks to the hot tier. When specified as a VM attribute, the storage policy applies to all virtual disks of the VM unless overridden by the same attribute specified for a virtual disk.
        """
        storage_container_references: NotRequired[pulumi.Input[Sequence[pulumi.Input['VirtualMachineDiskListStorageConfigStorageContainerReferenceArgsDict']]]]
        """
        - Reference to a kind. Either one of (kind, uuid) or url needs to be specified. Requires Prism Central / AOS 5.17+.
        * `storage_container_reference.#.url`: - GET query on the URL will provide information on the source.
        * `storage_container_reference.#.kind`: - kind of the container reference
        * `storage_container_reference.#.name`: - name of the container reference
        * `storage_container_reference.#.uuid`: - uiid of the container reference
        """
elif False:
    VirtualMachineDiskListStorageConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VirtualMachineDiskListStorageConfigArgs:
    def __init__(__self__, *,
                 flash_mode: Optional[pulumi.Input[str]] = None,
                 storage_container_references: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualMachineDiskListStorageConfigStorageContainerReferenceArgs']]]] = None):
        """
        :param pulumi.Input[str] flash_mode: - State of the storage policy to pin virtual disks to the hot tier. When specified as a VM attribute, the storage policy applies to all virtual disks of the VM unless overridden by the same attribute specified for a virtual disk.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualMachineDiskListStorageConfigStorageContainerReferenceArgs']]] storage_container_references: - Reference to a kind. Either one of (kind, uuid) or url needs to be specified. Requires Prism Central / AOS 5.17+.
               * `storage_container_reference.#.url`: - GET query on the URL will provide information on the source.
               * `storage_container_reference.#.kind`: - kind of the container reference
               * `storage_container_reference.#.name`: - name of the container reference
               * `storage_container_reference.#.uuid`: - uiid of the container reference
        """
        if flash_mode is not None:
            pulumi.set(__self__, "flash_mode", flash_mode)
        if storage_container_references is not None:
            pulumi.set(__self__, "storage_container_references", storage_container_references)

    @property
    @pulumi.getter(name="flashMode")
    def flash_mode(self) -> Optional[pulumi.Input[str]]:
        """
        - State of the storage policy to pin virtual disks to the hot tier. When specified as a VM attribute, the storage policy applies to all virtual disks of the VM unless overridden by the same attribute specified for a virtual disk.
        """
        return pulumi.get(self, "flash_mode")

    @flash_mode.setter
    def flash_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flash_mode", value)

    @property
    @pulumi.getter(name="storageContainerReferences")
    def storage_container_references(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualMachineDiskListStorageConfigStorageContainerReferenceArgs']]]]:
        """
        - Reference to a kind. Either one of (kind, uuid) or url needs to be specified. Requires Prism Central / AOS 5.17+.
        * `storage_container_reference.#.url`: - GET query on the URL will provide information on the source.
        * `storage_container_reference.#.kind`: - kind of the container reference
        * `storage_container_reference.#.name`: - name of the container reference
        * `storage_container_reference.#.uuid`: - uiid of the container reference
        """
        return pulumi.get(self, "storage_container_references")

    @storage_container_references.setter
    def storage_container_references(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualMachineDiskListStorageConfigStorageContainerReferenceArgs']]]]):
        pulumi.set(self, "storage_container_references", value)


if not MYPY:
    class VirtualMachineDiskListStorageConfigStorageContainerReferenceArgsDict(TypedDict):
        kind: NotRequired[pulumi.Input[str]]
        """
        - The kind name (Default value: project)(Required).
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (Required) The name for the vm.
        """
        url: NotRequired[pulumi.Input[str]]
        uuid: NotRequired[pulumi.Input[str]]
        """
        - the UUID(Required).
        """
elif False:
    VirtualMachineDiskListStorageConfigStorageContainerReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VirtualMachineDiskListStorageConfigStorageContainerReferenceArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: - The kind name (Default value: project)(Required).
        :param pulumi.Input[str] name: - (Required) The name for the vm.
        :param pulumi.Input[str] uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Required) The name for the vm.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class VirtualMachineGpuListArgsDict(TypedDict):
        device_id: NotRequired[pulumi.Input[int]]
        """
        - (Computed) The device ID of the GPU.
        """
        fraction: NotRequired[pulumi.Input[int]]
        """
        Fraction of the physical GPU assigned.
        """
        frame_buffer_size_mib: NotRequired[pulumi.Input[int]]
        """
        - (ReadOnly) GPU frame buffer size in MiB.
        """
        guest_driver_version: NotRequired[pulumi.Input[str]]
        """
        - (ReadOnly) Last determined guest driver version.
        """
        mode: NotRequired[pulumi.Input[str]]
        """
        - (Optional) The mode of this GPU.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        - (ReadOnly) Name of the GPU resource.
        """
        num_virtual_display_heads: NotRequired[pulumi.Input[int]]
        """
        - (ReadOnly) Number of supported virtual display heads.
        """
        pci_address: NotRequired[pulumi.Input[str]]
        """
        GPU {segment:bus:device:function} (sbdf) address if assigned.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        - (ReadOnly) UUID of the GPU.
        """
        vendor: NotRequired[pulumi.Input[str]]
        """
        - (Optional) The vendor of the GPU.
        """
elif False:
    VirtualMachineGpuListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VirtualMachineGpuListArgs:
    def __init__(__self__, *,
                 device_id: Optional[pulumi.Input[int]] = None,
                 fraction: Optional[pulumi.Input[int]] = None,
                 frame_buffer_size_mib: Optional[pulumi.Input[int]] = None,
                 guest_driver_version: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 num_virtual_display_heads: Optional[pulumi.Input[int]] = None,
                 pci_address: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vendor: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] device_id: - (Computed) The device ID of the GPU.
        :param pulumi.Input[int] fraction: Fraction of the physical GPU assigned.
        :param pulumi.Input[int] frame_buffer_size_mib: - (ReadOnly) GPU frame buffer size in MiB.
        :param pulumi.Input[str] guest_driver_version: - (ReadOnly) Last determined guest driver version.
        :param pulumi.Input[str] mode: - (Optional) The mode of this GPU.
        :param pulumi.Input[str] name: - (ReadOnly) Name of the GPU resource.
        :param pulumi.Input[int] num_virtual_display_heads: - (ReadOnly) Number of supported virtual display heads.
        :param pulumi.Input[str] pci_address: GPU {segment:bus:device:function} (sbdf) address if assigned.
        :param pulumi.Input[str] uuid: - (ReadOnly) UUID of the GPU.
        :param pulumi.Input[str] vendor: - (Optional) The vendor of the GPU.
        """
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if fraction is not None:
            pulumi.set(__self__, "fraction", fraction)
        if frame_buffer_size_mib is not None:
            pulumi.set(__self__, "frame_buffer_size_mib", frame_buffer_size_mib)
        if guest_driver_version is not None:
            pulumi.set(__self__, "guest_driver_version", guest_driver_version)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if num_virtual_display_heads is not None:
            pulumi.set(__self__, "num_virtual_display_heads", num_virtual_display_heads)
        if pci_address is not None:
            pulumi.set(__self__, "pci_address", pci_address)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[int]]:
        """
        - (Computed) The device ID of the GPU.
        """
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_id", value)

    @property
    @pulumi.getter
    def fraction(self) -> Optional[pulumi.Input[int]]:
        """
        Fraction of the physical GPU assigned.
        """
        return pulumi.get(self, "fraction")

    @fraction.setter
    def fraction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fraction", value)

    @property
    @pulumi.getter(name="frameBufferSizeMib")
    def frame_buffer_size_mib(self) -> Optional[pulumi.Input[int]]:
        """
        - (ReadOnly) GPU frame buffer size in MiB.
        """
        return pulumi.get(self, "frame_buffer_size_mib")

    @frame_buffer_size_mib.setter
    def frame_buffer_size_mib(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frame_buffer_size_mib", value)

    @property
    @pulumi.getter(name="guestDriverVersion")
    def guest_driver_version(self) -> Optional[pulumi.Input[str]]:
        """
        - (ReadOnly) Last determined guest driver version.
        """
        return pulumi.get(self, "guest_driver_version")

    @guest_driver_version.setter
    def guest_driver_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "guest_driver_version", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) The mode of this GPU.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (ReadOnly) Name of the GPU resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="numVirtualDisplayHeads")
    def num_virtual_display_heads(self) -> Optional[pulumi.Input[int]]:
        """
        - (ReadOnly) Number of supported virtual display heads.
        """
        return pulumi.get(self, "num_virtual_display_heads")

    @num_virtual_display_heads.setter
    def num_virtual_display_heads(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_virtual_display_heads", value)

    @property
    @pulumi.getter(name="pciAddress")
    def pci_address(self) -> Optional[pulumi.Input[str]]:
        """
        GPU {segment:bus:device:function} (sbdf) address if assigned.
        """
        return pulumi.get(self, "pci_address")

    @pci_address.setter
    def pci_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pci_address", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - (ReadOnly) UUID of the GPU.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vendor(self) -> Optional[pulumi.Input[str]]:
        """
        - (Optional) The vendor of the GPU.
        """
        return pulumi.get(self, "vendor")

    @vendor.setter
    def vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor", value)


if not MYPY:
    class VirtualMachineNicListArgsDict(TypedDict):
        ip_endpoint_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['VirtualMachineNicListIpEndpointListArgsDict']]]]
        """
        - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
        """
        is_connected: NotRequired[pulumi.Input[str]]
        """
        - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
        mac_address: NotRequired[pulumi.Input[str]]
        """
        - The MAC address for the adapter.
        """
        model: NotRequired[pulumi.Input[str]]
        """
        - The model of this NIC. (Options : VIRTIO , E1000).
        """
        network_function_chain_reference: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        - The reference to a network_function_chain.
        """
        network_function_nic_type: NotRequired[pulumi.Input[str]]
        """
        - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
        """
        nic_type: NotRequired[pulumi.Input[str]]
        """
        - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
        """
        num_queues: NotRequired[pulumi.Input[int]]
        """
        - The number of tx/rx queue pairs for this NIC.
        """
        subnet_name: NotRequired[pulumi.Input[str]]
        """
        - The name of the subnet reference to.
        """
        subnet_uuid: NotRequired[pulumi.Input[str]]
        """
        - The reference to a subnet.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
        """
elif False:
    VirtualMachineNicListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VirtualMachineNicListArgs:
    def __init__(__self__, *,
                 ip_endpoint_lists: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualMachineNicListIpEndpointListArgs']]]] = None,
                 is_connected: Optional[pulumi.Input[str]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 network_function_chain_reference: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 network_function_nic_type: Optional[pulumi.Input[str]] = None,
                 nic_type: Optional[pulumi.Input[str]] = None,
                 num_queues: Optional[pulumi.Input[int]] = None,
                 subnet_name: Optional[pulumi.Input[str]] = None,
                 subnet_uuid: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VirtualMachineNicListIpEndpointListArgs']]] ip_endpoint_lists: - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
        :param pulumi.Input[str] is_connected: - Indicates whether the serial port connection is connected or not (`true` or `false`).
        :param pulumi.Input[str] mac_address: - The MAC address for the adapter.
        :param pulumi.Input[str] model: - The model of this NIC. (Options : VIRTIO , E1000).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] network_function_chain_reference: - The reference to a network_function_chain.
        :param pulumi.Input[str] network_function_nic_type: - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
        :param pulumi.Input[str] nic_type: - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
        :param pulumi.Input[int] num_queues: - The number of tx/rx queue pairs for this NIC.
        :param pulumi.Input[str] subnet_name: - The name of the subnet reference to.
        :param pulumi.Input[str] subnet_uuid: - The reference to a subnet.
        :param pulumi.Input[str] uuid: - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
        """
        if ip_endpoint_lists is not None:
            pulumi.set(__self__, "ip_endpoint_lists", ip_endpoint_lists)
        if is_connected is not None:
            pulumi.set(__self__, "is_connected", is_connected)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if network_function_chain_reference is not None:
            pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if network_function_nic_type is not None:
            pulumi.set(__self__, "network_function_nic_type", network_function_nic_type)
        if nic_type is not None:
            pulumi.set(__self__, "nic_type", nic_type)
        if num_queues is not None:
            pulumi.set(__self__, "num_queues", num_queues)
        if subnet_name is not None:
            pulumi.set(__self__, "subnet_name", subnet_name)
        if subnet_uuid is not None:
            pulumi.set(__self__, "subnet_uuid", subnet_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="ipEndpointLists")
    def ip_endpoint_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualMachineNicListIpEndpointListArgs']]]]:
        """
        - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
        """
        return pulumi.get(self, "ip_endpoint_lists")

    @ip_endpoint_lists.setter
    def ip_endpoint_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualMachineNicListIpEndpointListArgs']]]]):
        pulumi.set(self, "ip_endpoint_lists", value)

    @property
    @pulumi.getter(name="isConnected")
    def is_connected(self) -> Optional[pulumi.Input[str]]:
        """
        - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
        return pulumi.get(self, "is_connected")

    @is_connected.setter
    def is_connected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_connected", value)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[str]]:
        """
        - The MAC address for the adapter.
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        """
        - The model of this NIC. (Options : VIRTIO , E1000).
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        - The reference to a network_function_chain.
        """
        return pulumi.get(self, "network_function_chain_reference")

    @network_function_chain_reference.setter
    def network_function_chain_reference(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "network_function_chain_reference", value)

    @property
    @pulumi.getter(name="networkFunctionNicType")
    def network_function_nic_type(self) -> Optional[pulumi.Input[str]]:
        """
        - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
        """
        return pulumi.get(self, "network_function_nic_type")

    @network_function_nic_type.setter
    def network_function_nic_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_function_nic_type", value)

    @property
    @pulumi.getter(name="nicType")
    def nic_type(self) -> Optional[pulumi.Input[str]]:
        """
        - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
        """
        return pulumi.get(self, "nic_type")

    @nic_type.setter
    def nic_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nic_type", value)

    @property
    @pulumi.getter(name="numQueues")
    def num_queues(self) -> Optional[pulumi.Input[int]]:
        """
        - The number of tx/rx queue pairs for this NIC.
        """
        return pulumi.get(self, "num_queues")

    @num_queues.setter
    def num_queues(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_queues", value)

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        - The name of the subnet reference to.
        """
        return pulumi.get(self, "subnet_name")

    @subnet_name.setter
    def subnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_name", value)

    @property
    @pulumi.getter(name="subnetUuid")
    def subnet_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - The reference to a subnet.
        """
        return pulumi.get(self, "subnet_uuid")

    @subnet_uuid.setter
    def subnet_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class VirtualMachineNicListIpEndpointListArgsDict(TypedDict):
        ip: NotRequired[pulumi.Input[str]]
        """
        - Address string.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
        """
elif False:
    VirtualMachineNicListIpEndpointListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VirtualMachineNicListIpEndpointListArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip: - Address string.
        :param pulumi.Input[str] type: - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        - Address string.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class VirtualMachineNicListStatusArgsDict(TypedDict):
        floating_ip: NotRequired[pulumi.Input[str]]
        """
        -  The Floating IP associated with the vnic. (Only in `nic_list_status`)
        """
        ip_endpoint_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['VirtualMachineNicListStatusIpEndpointListArgsDict']]]]
        """
        - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
        """
        is_connected: NotRequired[pulumi.Input[str]]
        """
        - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
        mac_address: NotRequired[pulumi.Input[str]]
        """
        - The MAC address for the adapter.
        """
        model: NotRequired[pulumi.Input[str]]
        """
        - The model of this NIC. (Options : VIRTIO , E1000).
        """
        network_function_chain_reference: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        - The reference to a network_function_chain.
        """
        network_function_nic_type: NotRequired[pulumi.Input[str]]
        """
        - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
        """
        nic_type: NotRequired[pulumi.Input[str]]
        """
        - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
        """
        num_queues: NotRequired[pulumi.Input[int]]
        """
        - The number of tx/rx queue pairs for this NIC.
        """
        subnet_name: NotRequired[pulumi.Input[str]]
        """
        - The name of the subnet reference to.
        """
        subnet_uuid: NotRequired[pulumi.Input[str]]
        """
        - The reference to a subnet.
        """
        uuid: NotRequired[pulumi.Input[str]]
        """
        - the UUID(Required).
        """
elif False:
    VirtualMachineNicListStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VirtualMachineNicListStatusArgs:
    def __init__(__self__, *,
                 floating_ip: Optional[pulumi.Input[str]] = None,
                 ip_endpoint_lists: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualMachineNicListStatusIpEndpointListArgs']]]] = None,
                 is_connected: Optional[pulumi.Input[str]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 network_function_chain_reference: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 network_function_nic_type: Optional[pulumi.Input[str]] = None,
                 nic_type: Optional[pulumi.Input[str]] = None,
                 num_queues: Optional[pulumi.Input[int]] = None,
                 subnet_name: Optional[pulumi.Input[str]] = None,
                 subnet_uuid: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] floating_ip: -  The Floating IP associated with the vnic. (Only in `nic_list_status`)
        :param pulumi.Input[Sequence[pulumi.Input['VirtualMachineNicListStatusIpEndpointListArgs']]] ip_endpoint_lists: - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
        :param pulumi.Input[str] is_connected: - Indicates whether the serial port connection is connected or not (`true` or `false`).
        :param pulumi.Input[str] mac_address: - The MAC address for the adapter.
        :param pulumi.Input[str] model: - The model of this NIC. (Options : VIRTIO , E1000).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] network_function_chain_reference: - The reference to a network_function_chain.
        :param pulumi.Input[str] network_function_nic_type: - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
        :param pulumi.Input[str] nic_type: - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
        :param pulumi.Input[int] num_queues: - The number of tx/rx queue pairs for this NIC.
        :param pulumi.Input[str] subnet_name: - The name of the subnet reference to.
        :param pulumi.Input[str] subnet_uuid: - The reference to a subnet.
        :param pulumi.Input[str] uuid: - the UUID(Required).
        """
        if floating_ip is not None:
            pulumi.set(__self__, "floating_ip", floating_ip)
        if ip_endpoint_lists is not None:
            pulumi.set(__self__, "ip_endpoint_lists", ip_endpoint_lists)
        if is_connected is not None:
            pulumi.set(__self__, "is_connected", is_connected)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if network_function_chain_reference is not None:
            pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if network_function_nic_type is not None:
            pulumi.set(__self__, "network_function_nic_type", network_function_nic_type)
        if nic_type is not None:
            pulumi.set(__self__, "nic_type", nic_type)
        if num_queues is not None:
            pulumi.set(__self__, "num_queues", num_queues)
        if subnet_name is not None:
            pulumi.set(__self__, "subnet_name", subnet_name)
        if subnet_uuid is not None:
            pulumi.set(__self__, "subnet_uuid", subnet_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> Optional[pulumi.Input[str]]:
        """
        -  The Floating IP associated with the vnic. (Only in `nic_list_status`)
        """
        return pulumi.get(self, "floating_ip")

    @floating_ip.setter
    def floating_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "floating_ip", value)

    @property
    @pulumi.getter(name="ipEndpointLists")
    def ip_endpoint_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualMachineNicListStatusIpEndpointListArgs']]]]:
        """
        - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
        """
        return pulumi.get(self, "ip_endpoint_lists")

    @ip_endpoint_lists.setter
    def ip_endpoint_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualMachineNicListStatusIpEndpointListArgs']]]]):
        pulumi.set(self, "ip_endpoint_lists", value)

    @property
    @pulumi.getter(name="isConnected")
    def is_connected(self) -> Optional[pulumi.Input[str]]:
        """
        - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
        return pulumi.get(self, "is_connected")

    @is_connected.setter
    def is_connected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_connected", value)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[str]]:
        """
        - The MAC address for the adapter.
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        """
        - The model of this NIC. (Options : VIRTIO , E1000).
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        - The reference to a network_function_chain.
        """
        return pulumi.get(self, "network_function_chain_reference")

    @network_function_chain_reference.setter
    def network_function_chain_reference(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "network_function_chain_reference", value)

    @property
    @pulumi.getter(name="networkFunctionNicType")
    def network_function_nic_type(self) -> Optional[pulumi.Input[str]]:
        """
        - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
        """
        return pulumi.get(self, "network_function_nic_type")

    @network_function_nic_type.setter
    def network_function_nic_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_function_nic_type", value)

    @property
    @pulumi.getter(name="nicType")
    def nic_type(self) -> Optional[pulumi.Input[str]]:
        """
        - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
        """
        return pulumi.get(self, "nic_type")

    @nic_type.setter
    def nic_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nic_type", value)

    @property
    @pulumi.getter(name="numQueues")
    def num_queues(self) -> Optional[pulumi.Input[int]]:
        """
        - The number of tx/rx queue pairs for this NIC.
        """
        return pulumi.get(self, "num_queues")

    @num_queues.setter
    def num_queues(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_queues", value)

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        - The name of the subnet reference to.
        """
        return pulumi.get(self, "subnet_name")

    @subnet_name.setter
    def subnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_name", value)

    @property
    @pulumi.getter(name="subnetUuid")
    def subnet_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - The reference to a subnet.
        """
        return pulumi.get(self, "subnet_uuid")

    @subnet_uuid.setter
    def subnet_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class VirtualMachineNicListStatusIpEndpointListArgsDict(TypedDict):
        ip: NotRequired[pulumi.Input[str]]
        """
        - Address string.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
        """
elif False:
    VirtualMachineNicListStatusIpEndpointListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VirtualMachineNicListStatusIpEndpointListArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip: - Address string.
        :param pulumi.Input[str] type: - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        - Address string.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class VirtualMachineSerialPortListArgsDict(TypedDict):
        index: NotRequired[pulumi.Input[int]]
        """
        - Index of the serial port (int).
        """
        is_connected: NotRequired[pulumi.Input[bool]]
        """
        - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
elif False:
    VirtualMachineSerialPortListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VirtualMachineSerialPortListArgs:
    def __init__(__self__, *,
                 index: Optional[pulumi.Input[int]] = None,
                 is_connected: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] index: - Index of the serial port (int).
        :param pulumi.Input[bool] is_connected: - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
        if index is not None:
            pulumi.set(__self__, "index", index)
        if is_connected is not None:
            pulumi.set(__self__, "is_connected", is_connected)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        """
        - Index of the serial port (int).
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="isConnected")
    def is_connected(self) -> Optional[pulumi.Input[bool]]:
        """
        - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
        return pulumi.get(self, "is_connected")

    @is_connected.setter
    def is_connected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_connected", value)


if not MYPY:
    class VpcCommonDomainNameServerIpListArgsDict(TypedDict):
        ip: NotRequired[pulumi.Input[str]]
        """
        ip address.
        """
elif False:
    VpcCommonDomainNameServerIpListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpcCommonDomainNameServerIpListArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip: ip address.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        ip address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


if not MYPY:
    class VpcExternalSubnetListStatusArgsDict(TypedDict):
        external_subnet_reference: pulumi.Input[Mapping[str, pulumi.Input[str]]]
        active_gateway_node: NotRequired[pulumi.Input['VpcExternalSubnetListStatusActiveGatewayNodeArgsDict']]
        external_ip_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    VpcExternalSubnetListStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpcExternalSubnetListStatusArgs:
    def __init__(__self__, *,
                 external_subnet_reference: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 active_gateway_node: Optional[pulumi.Input['VpcExternalSubnetListStatusActiveGatewayNodeArgs']] = None,
                 external_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        if active_gateway_node is not None:
            pulumi.set(__self__, "active_gateway_node", active_gateway_node)
        if external_ip_lists is not None:
            pulumi.set(__self__, "external_ip_lists", external_ip_lists)

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        return pulumi.get(self, "external_subnet_reference")

    @external_subnet_reference.setter
    def external_subnet_reference(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "external_subnet_reference", value)

    @property
    @pulumi.getter(name="activeGatewayNode")
    def active_gateway_node(self) -> Optional[pulumi.Input['VpcExternalSubnetListStatusActiveGatewayNodeArgs']]:
        return pulumi.get(self, "active_gateway_node")

    @active_gateway_node.setter
    def active_gateway_node(self, value: Optional[pulumi.Input['VpcExternalSubnetListStatusActiveGatewayNodeArgs']]):
        pulumi.set(self, "active_gateway_node", value)

    @property
    @pulumi.getter(name="externalIpLists")
    def external_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "external_ip_lists")

    @external_ip_lists.setter
    def external_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_ip_lists", value)


if not MYPY:
    class VpcExternalSubnetListStatusActiveGatewayNodeArgsDict(TypedDict):
        host_reference: pulumi.Input[Mapping[str, pulumi.Input[str]]]
        ip_address: NotRequired[pulumi.Input[str]]
elif False:
    VpcExternalSubnetListStatusActiveGatewayNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpcExternalSubnetListStatusActiveGatewayNodeArgs:
    def __init__(__self__, *,
                 host_reference: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 ip_address: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "host_reference", host_reference)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="hostReference")
    def host_reference(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        return pulumi.get(self, "host_reference")

    @host_reference.setter
    def host_reference(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "host_reference", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)


if not MYPY:
    class VpcExternallyRoutablePrefixListArgsDict(TypedDict):
        ip: pulumi.Input[str]
        """
        ip address.
        """
        prefix_length: pulumi.Input[int]
        """
        prefix length.
        """
elif False:
    VpcExternallyRoutablePrefixListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpcExternallyRoutablePrefixListArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 prefix_length: pulumi.Input[int]):
        """
        :param pulumi.Input[str] ip: ip address.
        :param pulumi.Input[int] prefix_length: prefix length.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        """
        ip address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> pulumi.Input[int]:
        """
        prefix length.
        """
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "prefix_length", value)


if not MYPY:
    class GetAccessControlPoliciesMetadataArgsDict(TypedDict):
        filter: str
        kind: str
        """
        - The kind name (Default value: project)(Required).
        """
        length: int
        offset: int
        sort_attribute: str
        sort_order: str
elif False:
    GetAccessControlPoliciesMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAccessControlPoliciesMetadataArgs:
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: str):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: str):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: int):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: int):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @sort_attribute.setter
    def sort_attribute(self, value: str):
        pulumi.set(self, "sort_attribute", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: str):
        pulumi.set(self, "sort_order", value)


if not MYPY:
    class GetAccessControlPolicyCategoryArgsDict(TypedDict):
        name: str
        """
        - the name(Optional).
        """
        value: str
        """
        - value of the key.
        """
elif False:
    GetAccessControlPolicyCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAccessControlPolicyCategoryArgs:
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name(Optional).
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetAddressGroupsMetadataArgsDict(TypedDict):
        filter: str
        """
        (Optional) Filter in FIQL Syntax
        """
        kind: str
        length: int
        """
        (Optional) Integer
        """
        offset: int
        """
        (Optional) Integer
        """
        sort_attribute: str
        """
        (Optional) attribute to sort
        """
        sort_order: str
        """
        (Optional) order of sorting
        """
elif False:
    GetAddressGroupsMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAddressGroupsMetadataArgs:
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        """
        :param str filter: (Optional) Filter in FIQL Syntax
        :param int length: (Optional) Integer
        :param int offset: (Optional) Integer
        :param str sort_attribute: (Optional) attribute to sort
        :param str sort_order: (Optional) order of sorting
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        """
        (Optional) Filter in FIQL Syntax
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: str):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: str):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def length(self) -> int:
        """
        (Optional) Integer
        """
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: int):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        (Optional) Integer
        """
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: int):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        """
        (Optional) attribute to sort
        """
        return pulumi.get(self, "sort_attribute")

    @sort_attribute.setter
    def sort_attribute(self, value: str):
        pulumi.set(self, "sort_attribute", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        """
        (Optional) order of sorting
        """
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: str):
        pulumi.set(self, "sort_order", value)


if not MYPY:
    class GetAssertHelperCheckArgsDict(TypedDict):
        condition: bool
        error_message: str
elif False:
    GetAssertHelperCheckArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAssertHelperCheckArgs:
    def __init__(__self__, *,
                 condition: bool,
                 error_message: str):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "error_message", error_message)

    @property
    @pulumi.getter
    def condition(self) -> bool:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: bool):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: str):
        pulumi.set(self, "error_message", value)


if not MYPY:
    class GetClusterCategoryArgsDict(TypedDict):
        name: str
        """
        - the key name.
        """
        value: str
        """
        - value of the key.
        """
elif False:
    GetClusterCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetClusterCategoryArgs:
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the key name.
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the key name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetFloatingIpsMetadataArgsDict(TypedDict):
        filter: str
        kind: str
        """
        - The kind name (Default value: project).
        """
        length: int
        offset: int
        sort_attribute: str
        sort_order: str
        total_matches: int
elif False:
    GetFloatingIpsMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetFloatingIpsMetadataArgs:
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str,
                 total_matches: int):
        """
        :param str kind: - The kind name (Default value: project).
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)
        pulumi.set(__self__, "total_matches", total_matches)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: str):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: str):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: int):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: int):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @sort_attribute.setter
    def sort_attribute(self, value: str):
        pulumi.set(self, "sort_attribute", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: str):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="totalMatches")
    def total_matches(self) -> int:
        return pulumi.get(self, "total_matches")

    @total_matches.setter
    def total_matches(self, value: int):
        pulumi.set(self, "total_matches", value)


if not MYPY:
    class GetFoundationCentralClusterDetailsClusterStatusArgsDict(TypedDict):
        aggregate_percent_complete: float
        """
        Overall progress percentage including imaging and cluster creation.
        """
        cluster_creation_started: bool
        """
        Denotes whether cluster creation has started in a phoenix workflow. For foundation workflows, this field will be same as intent_picked_up.
        """
        cluster_progress_details: Sequence['GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailArgsDict']
        """
        Denotes the progress status of cluster creation.
        """
        current_foundation_ip: str
        """
        Current IP address of the coordinating foundation node.
        """
        foundation_session_id: str
        """
        Foundation session id for cluster creation.
        """
        imaging_stopped: bool
        """
        Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.
        """
        intent_picked_up: bool
        """
        Denotes whether the remote nodes has picked up the cluster creation intent.
        """
        node_progress_details: Sequence['GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailArgsDict']
        """
        List of progress details of each node.
        """
elif False:
    GetFoundationCentralClusterDetailsClusterStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetFoundationCentralClusterDetailsClusterStatusArgs:
    def __init__(__self__, *,
                 aggregate_percent_complete: float,
                 cluster_creation_started: bool,
                 cluster_progress_details: Sequence['GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailArgs'],
                 current_foundation_ip: str,
                 foundation_session_id: str,
                 imaging_stopped: bool,
                 intent_picked_up: bool,
                 node_progress_details: Sequence['GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailArgs']):
        """
        :param float aggregate_percent_complete: Overall progress percentage including imaging and cluster creation.
        :param bool cluster_creation_started: Denotes whether cluster creation has started in a phoenix workflow. For foundation workflows, this field will be same as intent_picked_up.
        :param Sequence['GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailArgs'] cluster_progress_details: Denotes the progress status of cluster creation.
        :param str current_foundation_ip: Current IP address of the coordinating foundation node.
        :param str foundation_session_id: Foundation session id for cluster creation.
        :param bool imaging_stopped: Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.
        :param bool intent_picked_up: Denotes whether the remote nodes has picked up the cluster creation intent.
        :param Sequence['GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailArgs'] node_progress_details: List of progress details of each node.
        """
        pulumi.set(__self__, "aggregate_percent_complete", aggregate_percent_complete)
        pulumi.set(__self__, "cluster_creation_started", cluster_creation_started)
        pulumi.set(__self__, "cluster_progress_details", cluster_progress_details)
        pulumi.set(__self__, "current_foundation_ip", current_foundation_ip)
        pulumi.set(__self__, "foundation_session_id", foundation_session_id)
        pulumi.set(__self__, "imaging_stopped", imaging_stopped)
        pulumi.set(__self__, "intent_picked_up", intent_picked_up)
        pulumi.set(__self__, "node_progress_details", node_progress_details)

    @property
    @pulumi.getter(name="aggregatePercentComplete")
    def aggregate_percent_complete(self) -> float:
        """
        Overall progress percentage including imaging and cluster creation.
        """
        return pulumi.get(self, "aggregate_percent_complete")

    @aggregate_percent_complete.setter
    def aggregate_percent_complete(self, value: float):
        pulumi.set(self, "aggregate_percent_complete", value)

    @property
    @pulumi.getter(name="clusterCreationStarted")
    def cluster_creation_started(self) -> bool:
        """
        Denotes whether cluster creation has started in a phoenix workflow. For foundation workflows, this field will be same as intent_picked_up.
        """
        return pulumi.get(self, "cluster_creation_started")

    @cluster_creation_started.setter
    def cluster_creation_started(self, value: bool):
        pulumi.set(self, "cluster_creation_started", value)

    @property
    @pulumi.getter(name="clusterProgressDetails")
    def cluster_progress_details(self) -> Sequence['GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailArgs']:
        """
        Denotes the progress status of cluster creation.
        """
        return pulumi.get(self, "cluster_progress_details")

    @cluster_progress_details.setter
    def cluster_progress_details(self, value: Sequence['GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailArgs']):
        pulumi.set(self, "cluster_progress_details", value)

    @property
    @pulumi.getter(name="currentFoundationIp")
    def current_foundation_ip(self) -> str:
        """
        Current IP address of the coordinating foundation node.
        """
        return pulumi.get(self, "current_foundation_ip")

    @current_foundation_ip.setter
    def current_foundation_ip(self, value: str):
        pulumi.set(self, "current_foundation_ip", value)

    @property
    @pulumi.getter(name="foundationSessionId")
    def foundation_session_id(self) -> str:
        """
        Foundation session id for cluster creation.
        """
        return pulumi.get(self, "foundation_session_id")

    @foundation_session_id.setter
    def foundation_session_id(self, value: str):
        pulumi.set(self, "foundation_session_id", value)

    @property
    @pulumi.getter(name="imagingStopped")
    def imaging_stopped(self) -> bool:
        """
        Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.
        """
        return pulumi.get(self, "imaging_stopped")

    @imaging_stopped.setter
    def imaging_stopped(self, value: bool):
        pulumi.set(self, "imaging_stopped", value)

    @property
    @pulumi.getter(name="intentPickedUp")
    def intent_picked_up(self) -> bool:
        """
        Denotes whether the remote nodes has picked up the cluster creation intent.
        """
        return pulumi.get(self, "intent_picked_up")

    @intent_picked_up.setter
    def intent_picked_up(self, value: bool):
        pulumi.set(self, "intent_picked_up", value)

    @property
    @pulumi.getter(name="nodeProgressDetails")
    def node_progress_details(self) -> Sequence['GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailArgs']:
        """
        List of progress details of each node.
        """
        return pulumi.get(self, "node_progress_details")

    @node_progress_details.setter
    def node_progress_details(self, value: Sequence['GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailArgs']):
        pulumi.set(self, "node_progress_details", value)


if not MYPY:
    class GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailArgsDict(TypedDict):
        cluster_name: str
        """
        Cluster name.
        """
        message_lists: Sequence[str]
        """
        List of messages for the client based on process state.
        """
        percent_complete: float
        """
        Percent completion of cluster creation process.
        """
        status: str
        """
        Current status of cluster creation process.
        """
elif False:
    GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailArgs:
    def __init__(__self__, *,
                 cluster_name: str,
                 message_lists: Sequence[str],
                 percent_complete: float,
                 status: str):
        """
        :param str cluster_name: Cluster name.
        :param Sequence[str] message_lists: List of messages for the client based on process state.
        :param float percent_complete: Percent completion of cluster creation process.
        :param str status: Current status of cluster creation process.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "message_lists", message_lists)
        pulumi.set(__self__, "percent_complete", percent_complete)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: str):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="messageLists")
    def message_lists(self) -> Sequence[str]:
        """
        List of messages for the client based on process state.
        """
        return pulumi.get(self, "message_lists")

    @message_lists.setter
    def message_lists(self, value: Sequence[str]):
        pulumi.set(self, "message_lists", value)

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> float:
        """
        Percent completion of cluster creation process.
        """
        return pulumi.get(self, "percent_complete")

    @percent_complete.setter
    def percent_complete(self, value: float):
        pulumi.set(self, "percent_complete", value)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Current status of cluster creation process.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: str):
        pulumi.set(self, "status", value)


if not MYPY:
    class GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailArgsDict(TypedDict):
        imaged_node_uuid: str
        """
        UUID of the node.
        """
        imaging_stopped: bool
        """
        Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.
        """
        intent_picked_up: bool
        """
        Denotes whether the remote nodes has picked up the cluster creation intent.
        """
        message_lists: Sequence[str]
        """
        List of messages for the client based on process state.
        """
        percent_complete: float
        """
        Percent completion of cluster creation process.
        """
        status: str
        """
        Current status of cluster creation process.
        """
elif False:
    GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailArgs:
    def __init__(__self__, *,
                 imaged_node_uuid: str,
                 imaging_stopped: bool,
                 intent_picked_up: bool,
                 message_lists: Sequence[str],
                 percent_complete: float,
                 status: str):
        """
        :param str imaged_node_uuid: UUID of the node.
        :param bool imaging_stopped: Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.
        :param bool intent_picked_up: Denotes whether the remote nodes has picked up the cluster creation intent.
        :param Sequence[str] message_lists: List of messages for the client based on process state.
        :param float percent_complete: Percent completion of cluster creation process.
        :param str status: Current status of cluster creation process.
        """
        pulumi.set(__self__, "imaged_node_uuid", imaged_node_uuid)
        pulumi.set(__self__, "imaging_stopped", imaging_stopped)
        pulumi.set(__self__, "intent_picked_up", intent_picked_up)
        pulumi.set(__self__, "message_lists", message_lists)
        pulumi.set(__self__, "percent_complete", percent_complete)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="imagedNodeUuid")
    def imaged_node_uuid(self) -> str:
        """
        UUID of the node.
        """
        return pulumi.get(self, "imaged_node_uuid")

    @imaged_node_uuid.setter
    def imaged_node_uuid(self, value: str):
        pulumi.set(self, "imaged_node_uuid", value)

    @property
    @pulumi.getter(name="imagingStopped")
    def imaging_stopped(self) -> bool:
        """
        Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.
        """
        return pulumi.get(self, "imaging_stopped")

    @imaging_stopped.setter
    def imaging_stopped(self, value: bool):
        pulumi.set(self, "imaging_stopped", value)

    @property
    @pulumi.getter(name="intentPickedUp")
    def intent_picked_up(self) -> bool:
        """
        Denotes whether the remote nodes has picked up the cluster creation intent.
        """
        return pulumi.get(self, "intent_picked_up")

    @intent_picked_up.setter
    def intent_picked_up(self, value: bool):
        pulumi.set(self, "intent_picked_up", value)

    @property
    @pulumi.getter(name="messageLists")
    def message_lists(self) -> Sequence[str]:
        """
        List of messages for the client based on process state.
        """
        return pulumi.get(self, "message_lists")

    @message_lists.setter
    def message_lists(self, value: Sequence[str]):
        pulumi.set(self, "message_lists", value)

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> float:
        """
        Percent completion of cluster creation process.
        """
        return pulumi.get(self, "percent_complete")

    @percent_complete.setter
    def percent_complete(self, value: float):
        pulumi.set(self, "percent_complete", value)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Current status of cluster creation process.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: str):
        pulumi.set(self, "status", value)


if not MYPY:
    class GetFoundationCentralClusterDetailsCommonNetworkSettingsArgsDict(TypedDict):
        cvm_dns_servers: Sequence[str]
        """
        List of dns servers for the cvms in the cluster.
        """
        cvm_ntp_servers: Sequence[str]
        """
        List of ntp servers for the cvms in the cluster.
        """
        hypervisor_dns_servers: Sequence[str]
        """
        List of dns servers for the hypervisors in the cluster.
        """
        hypervisor_ntp_servers: Sequence[str]
        """
        List of ntp servers for the hypervisors in the cluster.
        """
elif False:
    GetFoundationCentralClusterDetailsCommonNetworkSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetFoundationCentralClusterDetailsCommonNetworkSettingsArgs:
    def __init__(__self__, *,
                 cvm_dns_servers: Sequence[str],
                 cvm_ntp_servers: Sequence[str],
                 hypervisor_dns_servers: Sequence[str],
                 hypervisor_ntp_servers: Sequence[str]):
        """
        :param Sequence[str] cvm_dns_servers: List of dns servers for the cvms in the cluster.
        :param Sequence[str] cvm_ntp_servers: List of ntp servers for the cvms in the cluster.
        :param Sequence[str] hypervisor_dns_servers: List of dns servers for the hypervisors in the cluster.
        :param Sequence[str] hypervisor_ntp_servers: List of ntp servers for the hypervisors in the cluster.
        """
        pulumi.set(__self__, "cvm_dns_servers", cvm_dns_servers)
        pulumi.set(__self__, "cvm_ntp_servers", cvm_ntp_servers)
        pulumi.set(__self__, "hypervisor_dns_servers", hypervisor_dns_servers)
        pulumi.set(__self__, "hypervisor_ntp_servers", hypervisor_ntp_servers)

    @property
    @pulumi.getter(name="cvmDnsServers")
    def cvm_dns_servers(self) -> Sequence[str]:
        """
        List of dns servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_dns_servers")

    @cvm_dns_servers.setter
    def cvm_dns_servers(self, value: Sequence[str]):
        pulumi.set(self, "cvm_dns_servers", value)

    @property
    @pulumi.getter(name="cvmNtpServers")
    def cvm_ntp_servers(self) -> Sequence[str]:
        """
        List of ntp servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_ntp_servers")

    @cvm_ntp_servers.setter
    def cvm_ntp_servers(self, value: Sequence[str]):
        pulumi.set(self, "cvm_ntp_servers", value)

    @property
    @pulumi.getter(name="hypervisorDnsServers")
    def hypervisor_dns_servers(self) -> Sequence[str]:
        """
        List of dns servers for the hypervisors in the cluster.
        """
        return pulumi.get(self, "hypervisor_dns_servers")

    @hypervisor_dns_servers.setter
    def hypervisor_dns_servers(self, value: Sequence[str]):
        pulumi.set(self, "hypervisor_dns_servers", value)

    @property
    @pulumi.getter(name="hypervisorNtpServers")
    def hypervisor_ntp_servers(self) -> Sequence[str]:
        """
        List of ntp servers for the hypervisors in the cluster.
        """
        return pulumi.get(self, "hypervisor_ntp_servers")

    @hypervisor_ntp_servers.setter
    def hypervisor_ntp_servers(self, value: Sequence[str]):
        pulumi.set(self, "hypervisor_ntp_servers", value)


if not MYPY:
    class GetFoundationCentralImagedClustersListFiltersArgsDict(TypedDict):
        archived: NotRequired[bool]
        """
        True if the cluster creation request is archived, False otherwise
        """
elif False:
    GetFoundationCentralImagedClustersListFiltersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetFoundationCentralImagedClustersListFiltersArgs:
    def __init__(__self__, *,
                 archived: Optional[bool] = None):
        """
        :param bool archived: True if the cluster creation request is archived, False otherwise
        """
        if archived is not None:
            pulumi.set(__self__, "archived", archived)

    @property
    @pulumi.getter
    def archived(self) -> Optional[bool]:
        """
        True if the cluster creation request is archived, False otherwise
        """
        return pulumi.get(self, "archived")

    @archived.setter
    def archived(self, value: Optional[bool]):
        pulumi.set(self, "archived", value)


if not MYPY:
    class GetFoundationCentralImagedNodesListFiltersArgsDict(TypedDict):
        node_state: NotRequired[str]
        """
        Specifies whether the node is discovering, available or unavailable for cluster creation.
        """
elif False:
    GetFoundationCentralImagedNodesListFiltersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetFoundationCentralImagedNodesListFiltersArgs:
    def __init__(__self__, *,
                 node_state: Optional[str] = None):
        """
        :param str node_state: Specifies whether the node is discovering, available or unavailable for cluster creation.
        """
        if node_state is not None:
            pulumi.set(__self__, "node_state", node_state)

    @property
    @pulumi.getter(name="nodeState")
    def node_state(self) -> Optional[str]:
        """
        Specifies whether the node is discovering, available or unavailable for cluster creation.
        """
        return pulumi.get(self, "node_state")

    @node_state.setter
    def node_state(self, value: Optional[str]):
        pulumi.set(self, "node_state", value)


if not MYPY:
    class GetFoundationCentralListApiKeysMetadataArgsDict(TypedDict):
        length: int
        """
        The number of records retrieved.
        """
        offset: int
        """
        Offset from the start of the object list.
        """
        total_matches: int
        """
        Total matches found.
        """
elif False:
    GetFoundationCentralListApiKeysMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetFoundationCentralListApiKeysMetadataArgs:
    def __init__(__self__, *,
                 length: int,
                 offset: int,
                 total_matches: int):
        """
        :param int length: The number of records retrieved.
        :param int offset: Offset from the start of the object list.
        :param int total_matches: Total matches found.
        """
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "total_matches", total_matches)

    @property
    @pulumi.getter
    def length(self) -> int:
        """
        The number of records retrieved.
        """
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: int):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        Offset from the start of the object list.
        """
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: int):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter(name="totalMatches")
    def total_matches(self) -> int:
        """
        Total matches found.
        """
        return pulumi.get(self, "total_matches")

    @total_matches.setter
    def total_matches(self, value: int):
        pulumi.set(self, "total_matches", value)


if not MYPY:
    class GetHostCategoryArgsDict(TypedDict):
        name: str
        """
        - the key name.
        """
        value: str
        """
        - value of the key.
        """
elif False:
    GetHostCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetHostCategoryArgs:
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the key name.
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the key name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetImageCategoryArgsDict(TypedDict):
        name: str
        """
        - the name.
        """
        value: str
elif False:
    GetImageCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImageCategoryArgs:
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetNdbCloneFilterArgsDict(TypedDict):
        any_status: NotRequired[str]
        """
        Get entity(s) if it satisfies query criteria irrespective of status (retrieve even deleted). Default is false
        """
        detailed: NotRequired[str]
        """
        Load entities with complete details. Default is false
        """
        load_dbserver_cluster: NotRequired[str]
        """
        Load cluster info. Default is false
        """
        timezone: NotRequired[str]
        """
        Default is UTC
        """
elif False:
    GetNdbCloneFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetNdbCloneFilterArgs:
    def __init__(__self__, *,
                 any_status: Optional[str] = None,
                 detailed: Optional[str] = None,
                 load_dbserver_cluster: Optional[str] = None,
                 timezone: Optional[str] = None):
        """
        :param str any_status: Get entity(s) if it satisfies query criteria irrespective of status (retrieve even deleted). Default is false
        :param str detailed: Load entities with complete details. Default is false
        :param str load_dbserver_cluster: Load cluster info. Default is false
        :param str timezone: Default is UTC
        """
        if any_status is not None:
            pulumi.set(__self__, "any_status", any_status)
        if detailed is not None:
            pulumi.set(__self__, "detailed", detailed)
        if load_dbserver_cluster is not None:
            pulumi.set(__self__, "load_dbserver_cluster", load_dbserver_cluster)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="anyStatus")
    def any_status(self) -> Optional[str]:
        """
        Get entity(s) if it satisfies query criteria irrespective of status (retrieve even deleted). Default is false
        """
        return pulumi.get(self, "any_status")

    @any_status.setter
    def any_status(self, value: Optional[str]):
        pulumi.set(self, "any_status", value)

    @property
    @pulumi.getter
    def detailed(self) -> Optional[str]:
        """
        Load entities with complete details. Default is false
        """
        return pulumi.get(self, "detailed")

    @detailed.setter
    def detailed(self, value: Optional[str]):
        pulumi.set(self, "detailed", value)

    @property
    @pulumi.getter(name="loadDbserverCluster")
    def load_dbserver_cluster(self) -> Optional[str]:
        """
        Load cluster info. Default is false
        """
        return pulumi.get(self, "load_dbserver_cluster")

    @load_dbserver_cluster.setter
    def load_dbserver_cluster(self, value: Optional[str]):
        pulumi.set(self, "load_dbserver_cluster", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        Default is UTC
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[str]):
        pulumi.set(self, "timezone", value)


if not MYPY:
    class GetNdbCloneTagArgsDict(TypedDict):
        entity_id: str
        entity_type: str
        tag_id: str
        tag_name: str
        value: str
elif False:
    GetNdbCloneTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetNdbCloneTagArgs:
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: str):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: str):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: str):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: str):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetNdbClonesFilterArgsDict(TypedDict):
        any_status: NotRequired[str]
        """
        Get entity(s) if it satisfies query criteria irrespective of status (retrieve even deleted). Default is false
        """
        detailed: NotRequired[str]
        """
        Load entities with complete details. Default is false
        """
        load_dbserver_cluster: NotRequired[str]
        """
        Load cluster info. Default is false
        """
        order_by_dbserver_cluster: NotRequired[str]
        """
        Sorted by dbserver cluster. Default is false
        """
        order_by_dbserver_logical_cluster: NotRequired[str]
        """
        Sorted by dbserver logical cluster.  Default is false
        """
        timezone: NotRequired[str]
        """
        Default is UTC
        """
elif False:
    GetNdbClonesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetNdbClonesFilterArgs:
    def __init__(__self__, *,
                 any_status: Optional[str] = None,
                 detailed: Optional[str] = None,
                 load_dbserver_cluster: Optional[str] = None,
                 order_by_dbserver_cluster: Optional[str] = None,
                 order_by_dbserver_logical_cluster: Optional[str] = None,
                 timezone: Optional[str] = None):
        """
        :param str any_status: Get entity(s) if it satisfies query criteria irrespective of status (retrieve even deleted). Default is false
        :param str detailed: Load entities with complete details. Default is false
        :param str load_dbserver_cluster: Load cluster info. Default is false
        :param str order_by_dbserver_cluster: Sorted by dbserver cluster. Default is false
        :param str order_by_dbserver_logical_cluster: Sorted by dbserver logical cluster.  Default is false
        :param str timezone: Default is UTC
        """
        if any_status is not None:
            pulumi.set(__self__, "any_status", any_status)
        if detailed is not None:
            pulumi.set(__self__, "detailed", detailed)
        if load_dbserver_cluster is not None:
            pulumi.set(__self__, "load_dbserver_cluster", load_dbserver_cluster)
        if order_by_dbserver_cluster is not None:
            pulumi.set(__self__, "order_by_dbserver_cluster", order_by_dbserver_cluster)
        if order_by_dbserver_logical_cluster is not None:
            pulumi.set(__self__, "order_by_dbserver_logical_cluster", order_by_dbserver_logical_cluster)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="anyStatus")
    def any_status(self) -> Optional[str]:
        """
        Get entity(s) if it satisfies query criteria irrespective of status (retrieve even deleted). Default is false
        """
        return pulumi.get(self, "any_status")

    @any_status.setter
    def any_status(self, value: Optional[str]):
        pulumi.set(self, "any_status", value)

    @property
    @pulumi.getter
    def detailed(self) -> Optional[str]:
        """
        Load entities with complete details. Default is false
        """
        return pulumi.get(self, "detailed")

    @detailed.setter
    def detailed(self, value: Optional[str]):
        pulumi.set(self, "detailed", value)

    @property
    @pulumi.getter(name="loadDbserverCluster")
    def load_dbserver_cluster(self) -> Optional[str]:
        """
        Load cluster info. Default is false
        """
        return pulumi.get(self, "load_dbserver_cluster")

    @load_dbserver_cluster.setter
    def load_dbserver_cluster(self, value: Optional[str]):
        pulumi.set(self, "load_dbserver_cluster", value)

    @property
    @pulumi.getter(name="orderByDbserverCluster")
    def order_by_dbserver_cluster(self) -> Optional[str]:
        """
        Sorted by dbserver cluster. Default is false
        """
        return pulumi.get(self, "order_by_dbserver_cluster")

    @order_by_dbserver_cluster.setter
    def order_by_dbserver_cluster(self, value: Optional[str]):
        pulumi.set(self, "order_by_dbserver_cluster", value)

    @property
    @pulumi.getter(name="orderByDbserverLogicalCluster")
    def order_by_dbserver_logical_cluster(self) -> Optional[str]:
        """
        Sorted by dbserver logical cluster.  Default is false
        """
        return pulumi.get(self, "order_by_dbserver_logical_cluster")

    @order_by_dbserver_logical_cluster.setter
    def order_by_dbserver_logical_cluster(self, value: Optional[str]):
        pulumi.set(self, "order_by_dbserver_logical_cluster", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        Default is UTC
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[str]):
        pulumi.set(self, "timezone", value)


if not MYPY:
    class GetNdbDatabaseTagArgsDict(TypedDict):
        entity_id: str
        entity_type: str
        tag_id: str
        tag_name: str
        value: str
elif False:
    GetNdbDatabaseTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetNdbDatabaseTagArgs:
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: str):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: str):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: str):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: str):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetNdbDbserverTagArgsDict(TypedDict):
        entity_id: str
        entity_type: str
        tag_id: str
        tag_name: str
        value: str
elif False:
    GetNdbDbserverTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetNdbDbserverTagArgs:
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: str):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: str):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: str):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: str):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetNdbMaintenanceWindowTagArgsDict(TypedDict):
        entity_id: str
        entity_type: str
        tag_id: str
        tag_name: str
        value: str
elif False:
    GetNdbMaintenanceWindowTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetNdbMaintenanceWindowTagArgs:
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: str):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: str):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: str):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: str):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetNdbSnapshotFilterArgsDict(TypedDict):
        load_replicated_child_snapshots: NotRequired[str]
        """
        load child snapshots. Default is false
        """
        timezone: NotRequired[str]
        """
        Default is UTC
        """
elif False:
    GetNdbSnapshotFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetNdbSnapshotFilterArgs:
    def __init__(__self__, *,
                 load_replicated_child_snapshots: Optional[str] = None,
                 timezone: Optional[str] = None):
        """
        :param str load_replicated_child_snapshots: load child snapshots. Default is false
        :param str timezone: Default is UTC
        """
        if load_replicated_child_snapshots is not None:
            pulumi.set(__self__, "load_replicated_child_snapshots", load_replicated_child_snapshots)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="loadReplicatedChildSnapshots")
    def load_replicated_child_snapshots(self) -> Optional[str]:
        """
        load child snapshots. Default is false
        """
        return pulumi.get(self, "load_replicated_child_snapshots")

    @load_replicated_child_snapshots.setter
    def load_replicated_child_snapshots(self, value: Optional[str]):
        pulumi.set(self, "load_replicated_child_snapshots", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        Default is UTC
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[str]):
        pulumi.set(self, "timezone", value)


if not MYPY:
    class GetNdbSnapshotTagArgsDict(TypedDict):
        entity_id: str
        entity_type: str
        tag_id: str
        tag_name: str
        value: str
elif False:
    GetNdbSnapshotTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetNdbSnapshotTagArgs:
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: str):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: str):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: str):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: str):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetNdbSnapshotsFilterArgsDict(TypedDict):
        time_machine_id: NotRequired[str]
        """
        Fetches all the snapshots for a given time machine
        """
elif False:
    GetNdbSnapshotsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetNdbSnapshotsFilterArgs:
    def __init__(__self__, *,
                 time_machine_id: Optional[str] = None):
        """
        :param str time_machine_id: Fetches all the snapshots for a given time machine
        """
        if time_machine_id is not None:
            pulumi.set(__self__, "time_machine_id", time_machine_id)

    @property
    @pulumi.getter(name="timeMachineId")
    def time_machine_id(self) -> Optional[str]:
        """
        Fetches all the snapshots for a given time machine
        """
        return pulumi.get(self, "time_machine_id")

    @time_machine_id.setter
    def time_machine_id(self, value: Optional[str]):
        pulumi.set(self, "time_machine_id", value)


if not MYPY:
    class GetNdbTimeMachineTagArgsDict(TypedDict):
        entity_id: str
        entity_type: str
        tag_id: str
        tag_name: str
        value: str
elif False:
    GetNdbTimeMachineTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetNdbTimeMachineTagArgs:
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: str):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: str):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: str):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: str):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetNetworkSecurityRuleCategoryArgsDict(TypedDict):
        name: str
        """
        - the name.
        """
        value: str
        """
        - value of the key.
        """
elif False:
    GetNetworkSecurityRuleCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetNetworkSecurityRuleCategoryArgs:
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name.
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetPbrsMetadataArgsDict(TypedDict):
        filter: str
        kind: str
        """
        - The kind name (Default value: project).
        """
        length: int
        offset: int
        sort_attribute: str
        sort_order: str
        total_matches: int
elif False:
    GetPbrsMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetPbrsMetadataArgs:
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str,
                 total_matches: int):
        """
        :param str kind: - The kind name (Default value: project).
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)
        pulumi.set(__self__, "total_matches", total_matches)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: str):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: str):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: int):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: int):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @sort_attribute.setter
    def sort_attribute(self, value: str):
        pulumi.set(self, "sort_attribute", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: str):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="totalMatches")
    def total_matches(self) -> int:
        return pulumi.get(self, "total_matches")

    @total_matches.setter
    def total_matches(self, value: int):
        pulumi.set(self, "total_matches", value)


if not MYPY:
    class GetPermissionCategoryArgsDict(TypedDict):
        name: str
        """
        the name.
        """
        value: str
        """
        value of the key.
        """
elif False:
    GetPermissionCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetPermissionCategoryArgs:
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetPermissionsMetadataArgsDict(TypedDict):
        filter: str
        kind: str
        """
        (Required) The kind name (Default value: `project`).
        """
        length: int
        offset: int
        sort_attribute: str
        sort_order: str
elif False:
    GetPermissionsMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetPermissionsMetadataArgs:
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: str):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: str):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: int):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: int):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @sort_attribute.setter
    def sort_attribute(self, value: str):
        pulumi.set(self, "sort_attribute", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: str):
        pulumi.set(self, "sort_order", value)


if not MYPY:
    class GetProjectCategoryArgsDict(TypedDict):
        name: str
        """
        the name.
        """
        value: str
        """
        value of the key.
        """
elif False:
    GetProjectCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetProjectCategoryArgs:
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetProjectExternalUserGroupReferenceListArgsDict(TypedDict):
        kind: str
        """
        (Required) The kind name (Default value: `project`).
        """
        name: str
        """
        the name.
        """
        uuid: str
        """
        (Required) the UUID.
        """
elif False:
    GetProjectExternalUserGroupReferenceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetProjectExternalUserGroupReferenceListArgs:
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: str):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: str):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class GetProjectSubnetReferenceListArgsDict(TypedDict):
        kind: str
        """
        (Required) The kind name (Default value: `project`).
        """
        name: str
        """
        the name.
        """
        uuid: str
        """
        (Required) the UUID.
        """
elif False:
    GetProjectSubnetReferenceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetProjectSubnetReferenceListArgs:
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: str):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: str):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class GetProjectUserReferenceListArgsDict(TypedDict):
        kind: str
        """
        (Required) The kind name (Default value: `project`).
        """
        name: str
        """
        the name.
        """
        uuid: str
        """
        (Required) the UUID.
        """
elif False:
    GetProjectUserReferenceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetProjectUserReferenceListArgs:
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: str):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: str):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class GetProtectionRuleCategoryArgsDict(TypedDict):
        name: str
        """
        (Optional) the name.
        """
        value: str
        """
        value of the key.
        """
elif False:
    GetProtectionRuleCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetProtectionRuleCategoryArgs:
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: (Optional) the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetRecoveryPlanCategoryArgsDict(TypedDict):
        name: str
        """
        (Optional) the name.
        """
        value: str
        """
        value of the key.
        """
elif False:
    GetRecoveryPlanCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetRecoveryPlanCategoryArgs:
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: (Optional) the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetRoleCategoryArgsDict(TypedDict):
        name: str
        """
        - the name(Optional).
        """
        value: str
        """
        - value of the key.
        """
elif False:
    GetRoleCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetRoleCategoryArgs:
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name(Optional).
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetRolesMetadataArgsDict(TypedDict):
        filter: str
        kind: str
        """
        - The kind name (Default value: project)(Required).
        """
        length: int
        offset: int
        sort_attribute: str
        sort_order: str
elif False:
    GetRolesMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetRolesMetadataArgs:
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: str):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: str):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: int):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: int):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @sort_attribute.setter
    def sort_attribute(self, value: str):
        pulumi.set(self, "sort_attribute", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: str):
        pulumi.set(self, "sort_order", value)


if not MYPY:
    class GetServiceGroupsMetadataArgsDict(TypedDict):
        filter: str
        kind: str
        length: int
        offset: int
        sort_attribute: str
        sort_order: str
elif False:
    GetServiceGroupsMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetServiceGroupsMetadataArgs:
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: str):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: str):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: int):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: int):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @sort_attribute.setter
    def sort_attribute(self, value: str):
        pulumi.set(self, "sort_attribute", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: str):
        pulumi.set(self, "sort_order", value)


if not MYPY:
    class GetSubnetAdditionalFilterArgsDict(TypedDict):
        name: str
        """
        - the name(Optional).
        """
        values: Sequence[str]
elif False:
    GetSubnetAdditionalFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSubnetAdditionalFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name(Optional).
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetSubnetCategoryArgsDict(TypedDict):
        name: str
        """
        - the name(Optional).
        """
        value: str
        """
        - value of the key.
        """
elif False:
    GetSubnetCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSubnetCategoryArgs:
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name(Optional).
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetSubnetsMetadataArgsDict(TypedDict):
        filter: str
        kind: str
        """
        The kind name (Default value: project.
        """
        length: int
        offset: int
        sort_attribute: str
        sort_order: str
elif False:
    GetSubnetsMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSubnetsMetadataArgs:
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        """
        :param str kind: The kind name (Default value: project.
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: str):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        The kind name (Default value: project.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: str):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: int):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: int):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @sort_attribute.setter
    def sort_attribute(self, value: str):
        pulumi.set(self, "sort_attribute", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: str):
        pulumi.set(self, "sort_order", value)


if not MYPY:
    class GetUserCategoryArgsDict(TypedDict):
        name: str
        """
        - (Optional) The name for the user
        """
        value: str
        """
        - value of the key.
        """
elif False:
    GetUserCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetUserCategoryArgs:
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - (Optional) The name for the user
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Optional) The name for the user
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetUserGroupCategoryArgsDict(TypedDict):
        name: str
        """
        - the name(Optional).
        """
        value: str
        """
        - value of the key.
        """
elif False:
    GetUserGroupCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetUserGroupCategoryArgs:
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name(Optional).
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetUserGroupsMetadataArgsDict(TypedDict):
        filter: str
        kind: str
        length: int
        offset: int
        sort_attribute: str
        sort_order: str
elif False:
    GetUserGroupsMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetUserGroupsMetadataArgs:
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: str):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: str):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: int):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: int):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @sort_attribute.setter
    def sort_attribute(self, value: str):
        pulumi.set(self, "sort_attribute", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: str):
        pulumi.set(self, "sort_order", value)


if not MYPY:
    class GetUsersMetadataArgsDict(TypedDict):
        filter: str
        kind: str
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        length: int
        offset: int
        sort_attribute: str
        sort_order: str
elif False:
    GetUsersMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetUsersMetadataArgs:
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: str):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: str):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: int):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: int):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @sort_attribute.setter
    def sort_attribute(self, value: str):
        pulumi.set(self, "sort_attribute", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: str):
        pulumi.set(self, "sort_order", value)


if not MYPY:
    class GetVirtualMachineCategoryArgsDict(TypedDict):
        name: str
        """
        - the name.
        """
        value: str
        """
        - value of the key.
        """
elif False:
    GetVirtualMachineCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetVirtualMachineCategoryArgs:
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name.
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetVpcsMetadataArgsDict(TypedDict):
        filter: str
        kind: str
        """
        - The kind name (Default value: project).
        """
        length: int
        offset: int
        sort_attribute: str
        sort_order: str
        total_matches: int
elif False:
    GetVpcsMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetVpcsMetadataArgs:
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str,
                 total_matches: int):
        """
        :param str kind: - The kind name (Default value: project).
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)
        pulumi.set(__self__, "total_matches", total_matches)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: str):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: str):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: int):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: int):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @sort_attribute.setter
    def sort_attribute(self, value: str):
        pulumi.set(self, "sort_attribute", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: str):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="totalMatches")
    def total_matches(self) -> int:
        return pulumi.get(self, "total_matches")

    @total_matches.setter
    def total_matches(self, value: int):
        pulumi.set(self, "total_matches", value)


