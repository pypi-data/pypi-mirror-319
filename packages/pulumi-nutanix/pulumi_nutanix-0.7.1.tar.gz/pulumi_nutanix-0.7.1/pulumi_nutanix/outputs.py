# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'AccessControlPolicyCategory',
    'AccessControlPolicyContextFilterList',
    'AccessControlPolicyContextFilterListEntityFilterExpressionList',
    'AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide',
    'AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories',
    'AccessControlPolicyContextFilterListScopeFilterExpressionList',
    'AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide',
    'AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories',
    'AccessControlPolicyOwnerReference',
    'AccessControlPolicyRoleReference',
    'AccessControlPolicyUserGroupReferenceList',
    'AccessControlPolicyUserReferenceList',
    'AddressGroupIpAddressBlockList',
    'FoundationCentralImageClusterClusterStatus',
    'FoundationCentralImageClusterClusterStatusClusterProgressDetail',
    'FoundationCentralImageClusterClusterStatusNodeProgressDetail',
    'FoundationCentralImageClusterCommonNetworkSettings',
    'FoundationCentralImageClusterFoundationInitConfig',
    'FoundationCentralImageClusterFoundationInitConfigBlock',
    'FoundationCentralImageClusterFoundationInitConfigBlockNode',
    'FoundationCentralImageClusterFoundationInitConfigCluster',
    'FoundationCentralImageClusterFoundationInitConfigHypervisorIso',
    'FoundationCentralImageClusterFoundationInitConfigNosPackageUrl',
    'FoundationCentralImageClusterHypervisorIsoDetails',
    'FoundationCentralImageClusterNodeList',
    'FoundationImageNodesBlock',
    'FoundationImageNodesBlockNode',
    'FoundationImageNodesBlockNodeUcsmParams',
    'FoundationImageNodesBlockNodeVswitch',
    'FoundationImageNodesCluster',
    'FoundationImageNodesClusterUrl',
    'FoundationImageNodesEosMetadata',
    'FoundationImageNodesFcSettings',
    'FoundationImageNodesFcSettingsFcMetadata',
    'FoundationImageNodesHypervisorIso',
    'FoundationImageNodesHypervisorIsoEsx',
    'FoundationImageNodesHypervisorIsoHyperv',
    'FoundationImageNodesHypervisorIsoKvm',
    'FoundationImageNodesHypervisorIsoXen',
    'FoundationImageNodesTests',
    'FoundationIpmiConfigBlock',
    'FoundationIpmiConfigBlockNode',
    'ImageCategory',
    'ImageClusterReference',
    'ImageCurrentClusterReferenceList',
    'KarbonClusterActivePassiveConfig',
    'KarbonClusterCniConfig',
    'KarbonClusterCniConfigCalicoConfig',
    'KarbonClusterCniConfigCalicoConfigIpPoolConfig',
    'KarbonClusterCniConfigFlannelConfig',
    'KarbonClusterEtcdNodePool',
    'KarbonClusterEtcdNodePoolAhvConfig',
    'KarbonClusterEtcdNodePoolNode',
    'KarbonClusterExternalLbConfig',
    'KarbonClusterExternalLbConfigMasterNodesConfig',
    'KarbonClusterMasterNodePool',
    'KarbonClusterMasterNodePoolAhvConfig',
    'KarbonClusterMasterNodePoolNode',
    'KarbonClusterPrivateRegistry',
    'KarbonClusterSingleMasterConfig',
    'KarbonClusterStorageClassConfig',
    'KarbonClusterStorageClassConfigVolumesConfig',
    'KarbonClusterWorkerNodePool',
    'KarbonClusterWorkerNodePoolAhvConfig',
    'KarbonClusterWorkerNodePoolNode',
    'KarbonWorkerNodepoolAhvConfig',
    'KarbonWorkerNodepoolNode',
    'NdbCloneActionargument',
    'NdbCloneDatabaseNode',
    'NdbCloneDatabaseNodeInfo',
    'NdbCloneDatabaseNodeProperty',
    'NdbCloneDatabaseNodeProtectionDomain',
    'NdbCloneDatabaseNodeProtectionDomainProperty',
    'NdbCloneDatabaseNodeTag',
    'NdbCloneInfo',
    'NdbCloneInfoBpgConfig',
    'NdbCloneInfoBpgConfigBpgDbParam',
    'NdbCloneInfoBpgConfigStorage',
    'NdbCloneInfoBpgConfigStorageArchiveStorage',
    'NdbCloneInfoBpgConfigStorageDataDisk',
    'NdbCloneInfoBpgConfigStorageLogDisk',
    'NdbCloneInfoBpgConfigVmProperty',
    'NdbCloneLcmConfig',
    'NdbCloneLcmConfigDatabaseLcmConfig',
    'NdbCloneLcmConfigDatabaseLcmConfigExpiryDetail',
    'NdbCloneLcmConfigDatabaseLcmConfigRefreshDetail',
    'NdbCloneLinkedDatabase',
    'NdbCloneLinkedDatabaseInfo',
    'NdbCloneNode',
    'NdbCloneNodeProperty',
    'NdbClonePostgresqlInfo',
    'NdbCloneProperty',
    'NdbCloneTag',
    'NdbCloneTimeMachine',
    'NdbCloneTimeMachineProperty',
    'NdbCloneTimeMachineSchedule',
    'NdbCloneTimeMachineScheduleContinuousSchedule',
    'NdbCloneTimeMachineScheduleDailySchedule',
    'NdbCloneTimeMachineScheduleMonthlySchedule',
    'NdbCloneTimeMachineScheduleQuartelySchedule',
    'NdbCloneTimeMachineScheduleSnapshotTimeOfDay',
    'NdbCloneTimeMachineScheduleWeeklySchedule',
    'NdbCloneTimeMachineScheduleYearlySchedule',
    'NdbCloneTimeMachineSla',
    'NdbCloneTimeMachineTag',
    'NdbClusterAgentNetworkInfo',
    'NdbClusterEntityCount',
    'NdbClusterEntityCountEngineCount',
    'NdbClusterEntityCountEngineCountMariadbDatabase',
    'NdbClusterEntityCountEngineCountMariadbDatabaseProfile',
    'NdbClusterEntityCountEngineCountMongodbDatabase',
    'NdbClusterEntityCountEngineCountMongodbDatabaseProfile',
    'NdbClusterEntityCountEngineCountMysqlDatabase',
    'NdbClusterEntityCountEngineCountMysqlDatabaseProfile',
    'NdbClusterEntityCountEngineCountOracleDatabase',
    'NdbClusterEntityCountEngineCountOracleDatabaseProfile',
    'NdbClusterEntityCountEngineCountPostgresDatabase',
    'NdbClusterEntityCountEngineCountPostgresDatabaseProfile',
    'NdbClusterEntityCountEngineCountSaphanaDatabase',
    'NdbClusterEntityCountEngineCountSaphanaDatabaseProfile',
    'NdbClusterEntityCountEngineCountSqlserverDatabase',
    'NdbClusterEntityCountEngineCountSqlserverDatabaseProfile',
    'NdbClusterNetworksInfo',
    'NdbClusterNetworksInfoNetworkInfo',
    'NdbClusterProperty',
    'NdbClusterResourceConfig',
    'NdbDatabaseActionargument',
    'NdbDatabaseClusterInfo',
    'NdbDatabaseClusterInfoClusterIpInfo',
    'NdbDatabaseClusterInfoClusterIpInfoIpInfo',
    'NdbDatabaseDatabaseNode',
    'NdbDatabaseDatabaseNodeInfo',
    'NdbDatabaseDatabaseNodeProperty',
    'NdbDatabaseDatabaseNodeProtectionDomain',
    'NdbDatabaseDatabaseNodeProtectionDomainProperty',
    'NdbDatabaseDatabaseNodeTag',
    'NdbDatabaseInfo',
    'NdbDatabaseInfoBpgConfig',
    'NdbDatabaseInfoBpgConfigBpgDbParam',
    'NdbDatabaseInfoBpgConfigStorage',
    'NdbDatabaseInfoBpgConfigStorageArchiveStorage',
    'NdbDatabaseInfoBpgConfigStorageDataDisk',
    'NdbDatabaseInfoBpgConfigStorageLogDisk',
    'NdbDatabaseInfoBpgConfigVmProperty',
    'NdbDatabaseLcmConfig',
    'NdbDatabaseLcmConfigExpiryDetail',
    'NdbDatabaseLcmConfigPostDeleteCommand',
    'NdbDatabaseLcmConfigPreDeleteCommand',
    'NdbDatabaseLcmConfigRefreshDetail',
    'NdbDatabaseLinkedDatabase',
    'NdbDatabaseLinkedDatabaseInfo',
    'NdbDatabaseMaintenanceTasks',
    'NdbDatabaseMaintenanceTasksTask',
    'NdbDatabaseNode',
    'NdbDatabaseNodeIpInfo',
    'NdbDatabaseNodeProperty',
    'NdbDatabasePostgresqlInfo',
    'NdbDatabasePostgresqlInfoHaInstance',
    'NdbDatabaseProperty',
    'NdbDatabaseRestoreDatabaseNode',
    'NdbDatabaseRestoreDatabaseNodeInfo',
    'NdbDatabaseRestoreDatabaseNodeProperty',
    'NdbDatabaseRestoreDatabaseNodeProtectionDomain',
    'NdbDatabaseRestoreDatabaseNodeProtectionDomainProperty',
    'NdbDatabaseRestoreDatabaseNodeTag',
    'NdbDatabaseRestoreInfo',
    'NdbDatabaseRestoreInfoBpgConfig',
    'NdbDatabaseRestoreInfoBpgConfigBpgDbParam',
    'NdbDatabaseRestoreInfoBpgConfigStorage',
    'NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorage',
    'NdbDatabaseRestoreInfoBpgConfigStorageDataDisk',
    'NdbDatabaseRestoreInfoBpgConfigStorageLogDisk',
    'NdbDatabaseRestoreInfoBpgConfigVmProperty',
    'NdbDatabaseRestoreLcmConfig',
    'NdbDatabaseRestoreLcmConfigExpiryDetail',
    'NdbDatabaseRestoreLcmConfigPostDeleteCommand',
    'NdbDatabaseRestoreLcmConfigPreDeleteCommand',
    'NdbDatabaseRestoreLcmConfigRefreshDetail',
    'NdbDatabaseRestoreLinkedDatabase',
    'NdbDatabaseRestoreLinkedDatabaseInfo',
    'NdbDatabaseRestoreProperty',
    'NdbDatabaseRestoreTag',
    'NdbDatabaseRestoreTimeMachine',
    'NdbDatabaseRestoreTimeMachineProperty',
    'NdbDatabaseRestoreTimeMachineSchedule',
    'NdbDatabaseRestoreTimeMachineScheduleContinuousSchedule',
    'NdbDatabaseRestoreTimeMachineScheduleDailySchedule',
    'NdbDatabaseRestoreTimeMachineScheduleMonthlySchedule',
    'NdbDatabaseRestoreTimeMachineScheduleQuartelySchedule',
    'NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDay',
    'NdbDatabaseRestoreTimeMachineScheduleWeeklySchedule',
    'NdbDatabaseRestoreTimeMachineScheduleYearlySchedule',
    'NdbDatabaseRestoreTimeMachineSla',
    'NdbDatabaseRestoreTimeMachineTag',
    'NdbDatabaseScaleDatabaseNode',
    'NdbDatabaseScaleDatabaseNodeInfo',
    'NdbDatabaseScaleDatabaseNodeProperty',
    'NdbDatabaseScaleDatabaseNodeProtectionDomain',
    'NdbDatabaseScaleDatabaseNodeProtectionDomainProperty',
    'NdbDatabaseScaleDatabaseNodeTag',
    'NdbDatabaseScaleInfo',
    'NdbDatabaseScaleInfoBpgConfig',
    'NdbDatabaseScaleInfoBpgConfigBpgDbParam',
    'NdbDatabaseScaleInfoBpgConfigStorage',
    'NdbDatabaseScaleInfoBpgConfigStorageArchiveStorage',
    'NdbDatabaseScaleInfoBpgConfigStorageDataDisk',
    'NdbDatabaseScaleInfoBpgConfigStorageLogDisk',
    'NdbDatabaseScaleInfoBpgConfigVmProperty',
    'NdbDatabaseScaleLcmConfig',
    'NdbDatabaseScaleLcmConfigExpiryDetail',
    'NdbDatabaseScaleLcmConfigPostDeleteCommand',
    'NdbDatabaseScaleLcmConfigPreDeleteCommand',
    'NdbDatabaseScaleLcmConfigRefreshDetail',
    'NdbDatabaseScaleLinkedDatabase',
    'NdbDatabaseScaleLinkedDatabaseInfo',
    'NdbDatabaseScaleProperty',
    'NdbDatabaseScaleTag',
    'NdbDatabaseScaleTimeMachine',
    'NdbDatabaseScaleTimeMachineProperty',
    'NdbDatabaseScaleTimeMachineSchedule',
    'NdbDatabaseScaleTimeMachineScheduleContinuousSchedule',
    'NdbDatabaseScaleTimeMachineScheduleDailySchedule',
    'NdbDatabaseScaleTimeMachineScheduleMonthlySchedule',
    'NdbDatabaseScaleTimeMachineScheduleQuartelySchedule',
    'NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDay',
    'NdbDatabaseScaleTimeMachineScheduleWeeklySchedule',
    'NdbDatabaseScaleTimeMachineScheduleYearlySchedule',
    'NdbDatabaseScaleTimeMachineSla',
    'NdbDatabaseScaleTimeMachineTag',
    'NdbDatabaseSnapshotLcmConfig',
    'NdbDatabaseSnapshotLcmConfigExpiryDetail',
    'NdbDatabaseSnapshotLcmConfigPostDeleteCommand',
    'NdbDatabaseSnapshotLcmConfigPreDeleteCommand',
    'NdbDatabaseSnapshotLcmConfigRefreshDetail',
    'NdbDatabaseSnapshotProperty',
    'NdbDatabaseSnapshotTag',
    'NdbDatabaseTag',
    'NdbDatabaseTimeMachine',
    'NdbDatabaseTimeMachineProperty',
    'NdbDatabaseTimeMachineSchedule',
    'NdbDatabaseTimeMachineScheduleContinuousSchedule',
    'NdbDatabaseTimeMachineScheduleDailySchedule',
    'NdbDatabaseTimeMachineScheduleMonthlySchedule',
    'NdbDatabaseTimeMachineScheduleQuartelySchedule',
    'NdbDatabaseTimeMachineScheduleSnapshotTimeOfDay',
    'NdbDatabaseTimeMachineScheduleWeeklySchedule',
    'NdbDatabaseTimeMachineScheduleYearlySchedule',
    'NdbDatabaseTimeMachineSla',
    'NdbDatabaseTimeMachineTag',
    'NdbDatabaseTimemachineinfo',
    'NdbDatabaseTimemachineinfoSchedule',
    'NdbDatabaseTimemachineinfoScheduleContinuousschedule',
    'NdbDatabaseTimemachineinfoScheduleMonthlyschedule',
    'NdbDatabaseTimemachineinfoScheduleQuartelyschedule',
    'NdbDatabaseTimemachineinfoScheduleSnapshottimeofday',
    'NdbDatabaseTimemachineinfoScheduleWeeklyschedule',
    'NdbDatabaseTimemachineinfoScheduleYearlyschedule',
    'NdbDatabaseTimemachineinfoSlaDetail',
    'NdbDatabaseTimemachineinfoSlaDetailPrimarySla',
    'NdbDatabaseTimemachineinfoTag',
    'NdbDbserverVmCredential',
    'NdbDbserverVmMaintenanceTasks',
    'NdbDbserverVmMaintenanceTasksTask',
    'NdbDbserverVmPostgresDatabase',
    'NdbDbserverVmProperty',
    'NdbDbserverVmTag',
    'NdbLinkedDatabasesInfo',
    'NdbLinkedDatabasesInfoInfo',
    'NdbMaintenanceTaskEntityTaskAssociation',
    'NdbMaintenanceTaskEntityTaskAssociationPayload',
    'NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommand',
    'NdbMaintenanceTaskEntityTaskAssociationProperty',
    'NdbMaintenanceTaskEntityTaskAssociationTag',
    'NdbMaintenanceTaskTask',
    'NdbMaintenanceWindowEntityTaskAssoc',
    'NdbMaintenanceWindowEntityTaskAssocPayload',
    'NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand',
    'NdbMaintenanceWindowEntityTaskAssocProperty',
    'NdbMaintenanceWindowEntityTaskAssocTag',
    'NdbMaintenanceWindowProperty',
    'NdbMaintenanceWindowSchedule',
    'NdbMaintenanceWindowTag',
    'NdbNetworkIpPool',
    'NdbNetworkIpPoolAddress',
    'NdbNetworkPropertiesMap',
    'NdbNetworkProperty',
    'NdbProfileClusterAvailability',
    'NdbProfileComputeProfile',
    'NdbProfileDatabaseParameterProfile',
    'NdbProfileDatabaseParameterProfilePostgresDatabase',
    'NdbProfileNetworkProfile',
    'NdbProfileNetworkProfilePostgresDatabase',
    'NdbProfileNetworkProfilePostgresDatabaseHaInstance',
    'NdbProfileNetworkProfilePostgresDatabaseSingleInstance',
    'NdbProfileNetworkProfileVersionClusterAssociation',
    'NdbProfileSoftwareProfile',
    'NdbProfileSoftwareProfilePostgresDatabase',
    'NdbProfileVersion',
    'NdbProfileVersionProperty',
    'NdbProfileVersionVersionClusterAssociation',
    'NdbProfileVersionVersionClusterAssociationProperty',
    'NdbRegisterDatabaseActionargument',
    'NdbRegisterDatabaseDatabaseNode',
    'NdbRegisterDatabaseDatabaseNodeInfo',
    'NdbRegisterDatabaseDatabaseNodeProperty',
    'NdbRegisterDatabaseDatabaseNodeProtectionDomain',
    'NdbRegisterDatabaseDatabaseNodeProtectionDomainProperty',
    'NdbRegisterDatabaseDatabaseNodeTag',
    'NdbRegisterDatabaseInfo',
    'NdbRegisterDatabaseInfoBpgConfig',
    'NdbRegisterDatabaseInfoBpgConfigBpgDbParam',
    'NdbRegisterDatabaseInfoBpgConfigStorage',
    'NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorage',
    'NdbRegisterDatabaseInfoBpgConfigStorageDataDisk',
    'NdbRegisterDatabaseInfoBpgConfigStorageLogDisk',
    'NdbRegisterDatabaseInfoBpgConfigVmProperty',
    'NdbRegisterDatabaseLcmConfig',
    'NdbRegisterDatabaseLcmConfigExpiryDetail',
    'NdbRegisterDatabaseLcmConfigPostDeleteCommand',
    'NdbRegisterDatabaseLcmConfigPreDeleteCommand',
    'NdbRegisterDatabaseLcmConfigRefreshDetail',
    'NdbRegisterDatabaseLinkedDatabase',
    'NdbRegisterDatabaseLinkedDatabaseInfo',
    'NdbRegisterDatabasePostgressInfo',
    'NdbRegisterDatabaseProperty',
    'NdbRegisterDatabaseTag',
    'NdbRegisterDatabaseTimeMachine',
    'NdbRegisterDatabaseTimeMachineInfo',
    'NdbRegisterDatabaseTimeMachineInfoSchedule',
    'NdbRegisterDatabaseTimeMachineInfoScheduleContinuousschedule',
    'NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyschedule',
    'NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyschedule',
    'NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofday',
    'NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyschedule',
    'NdbRegisterDatabaseTimeMachineInfoScheduleYearlyschedule',
    'NdbRegisterDatabaseTimeMachineInfoSlaDetail',
    'NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySla',
    'NdbRegisterDatabaseTimeMachineInfoTag',
    'NdbRegisterDatabaseTimeMachineProperty',
    'NdbRegisterDatabaseTimeMachineSchedule',
    'NdbRegisterDatabaseTimeMachineScheduleContinuousSchedule',
    'NdbRegisterDatabaseTimeMachineScheduleDailySchedule',
    'NdbRegisterDatabaseTimeMachineScheduleMonthlySchedule',
    'NdbRegisterDatabaseTimeMachineScheduleQuartelySchedule',
    'NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDay',
    'NdbRegisterDatabaseTimeMachineScheduleWeeklySchedule',
    'NdbRegisterDatabaseTimeMachineScheduleYearlySchedule',
    'NdbRegisterDatabaseTimeMachineSla',
    'NdbRegisterDatabaseTimeMachineTag',
    'NdbRegisterDbserverCredential',
    'NdbRegisterDbserverPostgresDatabase',
    'NdbRegisterDbserverProperty',
    'NdbRegisterDbserverTag',
    'NdbScaleDatabaseDatabaseNode',
    'NdbScaleDatabaseDatabaseNodeInfo',
    'NdbScaleDatabaseDatabaseNodeProperty',
    'NdbScaleDatabaseDatabaseNodeProtectionDomain',
    'NdbScaleDatabaseDatabaseNodeProtectionDomainProperty',
    'NdbScaleDatabaseDatabaseNodeTag',
    'NdbScaleDatabaseInfo',
    'NdbScaleDatabaseInfoBpgConfig',
    'NdbScaleDatabaseInfoBpgConfigBpgDbParam',
    'NdbScaleDatabaseInfoBpgConfigStorage',
    'NdbScaleDatabaseInfoBpgConfigStorageArchiveStorage',
    'NdbScaleDatabaseInfoBpgConfigStorageDataDisk',
    'NdbScaleDatabaseInfoBpgConfigStorageLogDisk',
    'NdbScaleDatabaseInfoBpgConfigVmProperty',
    'NdbScaleDatabaseLcmConfig',
    'NdbScaleDatabaseLcmConfigExpiryDetail',
    'NdbScaleDatabaseLcmConfigPostDeleteCommand',
    'NdbScaleDatabaseLcmConfigPreDeleteCommand',
    'NdbScaleDatabaseLcmConfigRefreshDetail',
    'NdbScaleDatabaseLinkedDatabase',
    'NdbScaleDatabaseLinkedDatabaseInfo',
    'NdbScaleDatabaseProperty',
    'NdbScaleDatabaseTag',
    'NdbScaleDatabaseTimeMachine',
    'NdbScaleDatabaseTimeMachineProperty',
    'NdbScaleDatabaseTimeMachineSchedule',
    'NdbScaleDatabaseTimeMachineScheduleContinuousSchedule',
    'NdbScaleDatabaseTimeMachineScheduleDailySchedule',
    'NdbScaleDatabaseTimeMachineScheduleMonthlySchedule',
    'NdbScaleDatabaseTimeMachineScheduleQuartelySchedule',
    'NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDay',
    'NdbScaleDatabaseTimeMachineScheduleWeeklySchedule',
    'NdbScaleDatabaseTimeMachineScheduleYearlySchedule',
    'NdbScaleDatabaseTimeMachineSla',
    'NdbScaleDatabaseTimeMachineTag',
    'NdbSoftwareVersionProfilePostgresDatabase',
    'NdbSoftwareVersionProfileProperty',
    'NdbSoftwareVersionProfileVersionClusterAssociation',
    'NdbSoftwareVersionProfileVersionClusterAssociationProperty',
    'NdbStretchedVlanMetadata',
    'NdbStretchedVlanVlansList',
    'NdbStretchedVlanVlansListPropertiesMap',
    'NdbStretchedVlanVlansListProperty',
    'NetworkSecurityRuleAdRuleInboundAllowList',
    'NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList',
    'NetworkSecurityRuleAdRuleInboundAllowListFilterParam',
    'NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList',
    'NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList',
    'NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList',
    'NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList',
    'NetworkSecurityRuleAdRuleOutboundAllowList',
    'NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList',
    'NetworkSecurityRuleAdRuleOutboundAllowListFilterParam',
    'NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList',
    'NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList',
    'NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList',
    'NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList',
    'NetworkSecurityRuleAdRuleTargetGroupFilterParam',
    'NetworkSecurityRuleAppRuleInboundAllowList',
    'NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList',
    'NetworkSecurityRuleAppRuleInboundAllowListFilterParam',
    'NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList',
    'NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList',
    'NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList',
    'NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList',
    'NetworkSecurityRuleAppRuleOutboundAllowList',
    'NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList',
    'NetworkSecurityRuleAppRuleOutboundAllowListFilterParam',
    'NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList',
    'NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList',
    'NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList',
    'NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList',
    'NetworkSecurityRuleAppRuleTargetGroupFilterParam',
    'NetworkSecurityRuleCategory',
    'NetworkSecurityRuleIsolationRuleFirstEntityFilterParam',
    'NetworkSecurityRuleIsolationRuleSecondEntityFilterParam',
    'PbrDestination',
    'PbrProtocolParameters',
    'PbrProtocolParametersIcmp',
    'PbrProtocolParametersTcp',
    'PbrProtocolParametersTcpDestinationPortRangeList',
    'PbrProtocolParametersTcpSourcePortRangeList',
    'PbrProtocolParametersUdp',
    'PbrProtocolParametersUdpDestinationPortRangeList',
    'PbrProtocolParametersUdpSourcePortRangeList',
    'PbrSource',
    'ProjectAccountReferenceList',
    'ProjectAcp',
    'ProjectAcpContextFilterList',
    'ProjectAcpContextFilterListEntityFilterExpressionList',
    'ProjectAcpContextFilterListEntityFilterExpressionListRightHandSide',
    'ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategories',
    'ProjectAcpContextFilterListScopeFilterExpressionList',
    'ProjectAcpContextFilterListScopeFilterExpressionListRightHandSide',
    'ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategories',
    'ProjectAcpRoleReference',
    'ProjectAcpUserGroupReferenceList',
    'ProjectAcpUserReferenceList',
    'ProjectCategory',
    'ProjectClusterReferenceList',
    'ProjectDefaultEnvironmentReference',
    'ProjectDefaultSubnetReference',
    'ProjectEnvironmentReferenceList',
    'ProjectExternalNetworkList',
    'ProjectExternalUserGroupReferenceList',
    'ProjectResourceDomain',
    'ProjectResourceDomainResource',
    'ProjectSubnetReferenceList',
    'ProjectTunnelReferenceList',
    'ProjectUserGroupList',
    'ProjectUserGroupListDirectoryServiceOus',
    'ProjectUserGroupListDirectoryServiceUserGroup',
    'ProjectUserGroupListSamlUserGroup',
    'ProjectUserList',
    'ProjectUserListDirectoryServiceUser',
    'ProjectUserListDirectoryServiceUserDirectoryServiceReference',
    'ProjectUserListIdentityProviderUser',
    'ProjectUserListIdentityProviderUserIdentityProviderReference',
    'ProjectUserReferenceList',
    'ProjectVpcReferenceList',
    'ProtectionRuleAvailabilityZoneConnectivityList',
    'ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList',
    'ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy',
    'ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy',
    'ProtectionRuleCategory',
    'ProtectionRuleCategoryFilter',
    'ProtectionRuleCategoryFilterParam',
    'ProtectionRuleOrderedAvailabilityZoneList',
    'ProtectionRuleOwnerReference',
    'ProtectionRuleProjectReference',
    'RecoveryPlanCategory',
    'RecoveryPlanOwnerReference',
    'RecoveryPlanParameters',
    'RecoveryPlanParametersFloatingIpAssignmentList',
    'RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList',
    'RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig',
    'RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig',
    'RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation',
    'RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference',
    'RecoveryPlanParametersNetworkMappingList',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference',
    'RecoveryPlanProjectReference',
    'RecoveryPlanStageList',
    'RecoveryPlanStageListStageWork',
    'RecoveryPlanStageListStageWorkRecoverEntities',
    'RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList',
    'RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory',
    'RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList',
    'RoleCategory',
    'RoleOwnerReference',
    'RolePermissionReferenceList',
    'RoleProjectReference',
    'ServiceGroupServiceList',
    'ServiceGroupServiceListIcmpTypeCodeList',
    'ServiceGroupServiceListTcpPortRangeList',
    'ServiceGroupServiceListUdpPortRangeList',
    'StaticRoutesDefaultRouteNexthop',
    'StaticRoutesStaticRoutesList',
    'SubnetCategory',
    'UserAccessControlPolicyReferenceList',
    'UserCategory',
    'UserDirectoryServiceUser',
    'UserDirectoryServiceUserDirectoryServiceReference',
    'UserGroupsCategory',
    'UserGroupsDirectoryServiceOus',
    'UserGroupsDirectoryServiceUserGroup',
    'UserGroupsSamlUserGroup',
    'UserIdentityProviderUser',
    'UserIdentityProviderUserIdentityProviderReference',
    'UserProjectReferenceList',
    'VirtualMachineCategory',
    'VirtualMachineDiskList',
    'VirtualMachineDiskListDeviceProperties',
    'VirtualMachineDiskListStorageConfig',
    'VirtualMachineDiskListStorageConfigStorageContainerReference',
    'VirtualMachineGpuList',
    'VirtualMachineNicList',
    'VirtualMachineNicListIpEndpointList',
    'VirtualMachineNicListStatus',
    'VirtualMachineNicListStatusIpEndpointList',
    'VirtualMachineSerialPortList',
    'VpcCommonDomainNameServerIpList',
    'VpcExternalSubnetListStatus',
    'VpcExternalSubnetListStatusActiveGatewayNode',
    'VpcExternallyRoutablePrefixList',
    'GetAccessControlPoliciesEntityResult',
    'GetAccessControlPoliciesEntityCategoryResult',
    'GetAccessControlPoliciesEntityContextFilterListResult',
    'GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListResult',
    'GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideResult',
    'GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategoryResult',
    'GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListResult',
    'GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideResult',
    'GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategoryResult',
    'GetAccessControlPoliciesEntityRoleReferenceResult',
    'GetAccessControlPoliciesEntityUserGroupReferenceListResult',
    'GetAccessControlPoliciesEntityUserReferenceListResult',
    'GetAccessControlPoliciesMetadataResult',
    'GetAccessControlPolicyCategoryResult',
    'GetAccessControlPolicyContextFilterListResult',
    'GetAccessControlPolicyContextFilterListEntityFilterExpressionListResult',
    'GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideResult',
    'GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoryResult',
    'GetAccessControlPolicyContextFilterListScopeFilterExpressionListResult',
    'GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideResult',
    'GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoryResult',
    'GetAccessControlPolicyRoleReferenceResult',
    'GetAccessControlPolicyUserGroupReferenceListResult',
    'GetAccessControlPolicyUserReferenceListResult',
    'GetAddressGroupIpAddressBlockListResult',
    'GetAddressGroupsEntityResult',
    'GetAddressGroupsEntityAddressGroupResult',
    'GetAddressGroupsEntityAddressGroupIpAddressBlockListResult',
    'GetAddressGroupsEntityAssociatedPoliciesListResult',
    'GetAddressGroupsMetadataResult',
    'GetAssertHelperCheckResult',
    'GetClusterAuthorizedPublicKeyListResult',
    'GetClusterCaCertificateListResult',
    'GetClusterCategoryResult',
    'GetClusterHttpProxyListResult',
    'GetClusterHttpProxyWhitelistResult',
    'GetClusterManagementServerListResult',
    'GetClusterNodeResult',
    'GetClustersEntityResult',
    'GetClustersEntityAuthorizedPublicKeyListResult',
    'GetClustersEntityCaCertificateListResult',
    'GetClustersEntityCategoryResult',
    'GetClustersEntityHttpProxyListResult',
    'GetClustersEntityHttpProxyWhitelistResult',
    'GetClustersEntityManagementServerListResult',
    'GetClustersEntityNodeResult',
    'GetFloatingIpSpecResult',
    'GetFloatingIpSpecResourceResult',
    'GetFloatingIpStatusResult',
    'GetFloatingIpStatusExecutionContextResult',
    'GetFloatingIpStatusResourceResult',
    'GetFloatingIpsEntityResult',
    'GetFloatingIpsEntitySpecResult',
    'GetFloatingIpsEntitySpecResourceResult',
    'GetFloatingIpsEntityStatusResult',
    'GetFloatingIpsEntityStatusExecutionContextResult',
    'GetFloatingIpsEntityStatusResourceResult',
    'GetFloatingIpsMetadataResult',
    'GetFoundationCentralClusterDetailsClusterStatusResult',
    'GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailResult',
    'GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailResult',
    'GetFoundationCentralClusterDetailsCommonNetworkSettingsResult',
    'GetFoundationCentralClusterDetailsFoundationInitConfigResult',
    'GetFoundationCentralClusterDetailsFoundationInitConfigBlockResult',
    'GetFoundationCentralClusterDetailsFoundationInitConfigBlockNodeResult',
    'GetFoundationCentralClusterDetailsFoundationInitConfigClusterResult',
    'GetFoundationCentralClusterDetailsFoundationInitConfigHypervisorIsoResult',
    'GetFoundationCentralClusterDetailsFoundationInitConfigNosPackageUrlResult',
    'GetFoundationCentralImagedClustersListFiltersResult',
    'GetFoundationCentralImagedClustersListImagedClusterResult',
    'GetFoundationCentralImagedClustersListImagedClusterClusterStatusResult',
    'GetFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetailResult',
    'GetFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetailResult',
    'GetFoundationCentralImagedClustersListImagedClusterCommonNetworkSettingsResult',
    'GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigResult',
    'GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockResult',
    'GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockNodeResult',
    'GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigClusterResult',
    'GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigHypervisorIsoResult',
    'GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigNosPackageUrlResult',
    'GetFoundationCentralImagedClustersListMetadataResult',
    'GetFoundationCentralImagedNodesListFiltersResult',
    'GetFoundationCentralImagedNodesListImagedNodeResult',
    'GetFoundationCentralImagedNodesListMetadataResult',
    'GetFoundationCentralListApiKeysApiKeyResult',
    'GetFoundationCentralListApiKeysMetadataResult',
    'GetFoundationDiscoverNodesEntityResult',
    'GetFoundationDiscoverNodesEntityNodeResult',
    'GetFoundationHypervisorIsosEsxResult',
    'GetFoundationHypervisorIsosHypervResult',
    'GetFoundationHypervisorIsosKvmResult',
    'GetFoundationHypervisorIsosLinuxResult',
    'GetFoundationHypervisorIsosXenResult',
    'GetFoundationNodeNetworkDetailsNodeResult',
    'GetHostCategoryResult',
    'GetHostGpuListResult',
    'GetHostHostDisksReferenceListResult',
    'GetHostsEntityResult',
    'GetHostsEntityCategoryResult',
    'GetHostsEntityGpuListResult',
    'GetHostsEntityHostDisksReferenceListResult',
    'GetImageCategoryResult',
    'GetImageClusterReferenceResult',
    'GetImageCurrentClusterReferenceListResult',
    'GetKarbonClusterEtcdNodePoolResult',
    'GetKarbonClusterEtcdNodePoolAhvConfigResult',
    'GetKarbonClusterEtcdNodePoolNodeResult',
    'GetKarbonClusterMasterNodePoolResult',
    'GetKarbonClusterMasterNodePoolAhvConfigResult',
    'GetKarbonClusterMasterNodePoolNodeResult',
    'GetKarbonClusterWorkerNodePoolResult',
    'GetKarbonClusterWorkerNodePoolAhvConfigResult',
    'GetKarbonClusterWorkerNodePoolNodeResult',
    'GetKarbonClustersClusterResult',
    'GetKarbonClustersClusterEtcdNodePoolResult',
    'GetKarbonClustersClusterEtcdNodePoolAhvConfigResult',
    'GetKarbonClustersClusterEtcdNodePoolNodeResult',
    'GetKarbonClustersClusterMasterNodePoolResult',
    'GetKarbonClustersClusterMasterNodePoolAhvConfigResult',
    'GetKarbonClustersClusterMasterNodePoolNodeResult',
    'GetKarbonClustersClusterWorkerNodePoolResult',
    'GetKarbonClustersClusterWorkerNodePoolAhvConfigResult',
    'GetKarbonClustersClusterWorkerNodePoolNodeResult',
    'GetKarbonPrivateRegistriesPrivateRegistryResult',
    'GetNdbCloneDatabaseNodeResult',
    'GetNdbCloneDatabaseNodeInfoResult',
    'GetNdbCloneDatabaseNodePropertyResult',
    'GetNdbCloneDatabaseNodeProtectionDomainResult',
    'GetNdbCloneDatabaseNodeProtectionDomainPropertyResult',
    'GetNdbCloneDatabaseNodeTagResult',
    'GetNdbCloneFilterResult',
    'GetNdbCloneInfoResult',
    'GetNdbCloneInfoBpgConfigResult',
    'GetNdbCloneInfoBpgConfigBpgDbParamResult',
    'GetNdbCloneInfoBpgConfigStorageResult',
    'GetNdbCloneInfoBpgConfigStorageArchiveStorageResult',
    'GetNdbCloneInfoBpgConfigStorageDataDiskResult',
    'GetNdbCloneInfoBpgConfigStorageLogDiskResult',
    'GetNdbCloneInfoBpgConfigVmPropertyResult',
    'GetNdbCloneLcmConfigResult',
    'GetNdbCloneLcmConfigExpiryDetailResult',
    'GetNdbCloneLcmConfigPostDeleteCommandResult',
    'GetNdbCloneLcmConfigPreDeleteCommandResult',
    'GetNdbCloneLcmConfigRefreshDetailResult',
    'GetNdbCloneLinkedDatabaseResult',
    'GetNdbCloneLinkedDatabaseInfoResult',
    'GetNdbClonePropertyResult',
    'GetNdbCloneTagResult',
    'GetNdbCloneTimeMachineResult',
    'GetNdbCloneTimeMachinePropertyResult',
    'GetNdbCloneTimeMachineScheduleResult',
    'GetNdbCloneTimeMachineScheduleContinuousScheduleResult',
    'GetNdbCloneTimeMachineScheduleDailyScheduleResult',
    'GetNdbCloneTimeMachineScheduleMonthlyScheduleResult',
    'GetNdbCloneTimeMachineScheduleQuartelyScheduleResult',
    'GetNdbCloneTimeMachineScheduleSnapshotTimeOfDayResult',
    'GetNdbCloneTimeMachineScheduleWeeklyScheduleResult',
    'GetNdbCloneTimeMachineScheduleYearlyScheduleResult',
    'GetNdbCloneTimeMachineSlaResult',
    'GetNdbCloneTimeMachineTagResult',
    'GetNdbClonesCloneResult',
    'GetNdbClonesCloneDatabaseNodeResult',
    'GetNdbClonesCloneDatabaseNodeInfoResult',
    'GetNdbClonesCloneDatabaseNodePropertyResult',
    'GetNdbClonesCloneDatabaseNodeProtectionDomainResult',
    'GetNdbClonesCloneDatabaseNodeProtectionDomainPropertyResult',
    'GetNdbClonesCloneDatabaseNodeTagResult',
    'GetNdbClonesCloneInfoResult',
    'GetNdbClonesCloneInfoBpgConfigResult',
    'GetNdbClonesCloneInfoBpgConfigBpgDbParamResult',
    'GetNdbClonesCloneInfoBpgConfigStorageResult',
    'GetNdbClonesCloneInfoBpgConfigStorageArchiveStorageResult',
    'GetNdbClonesCloneInfoBpgConfigStorageDataDiskResult',
    'GetNdbClonesCloneInfoBpgConfigStorageLogDiskResult',
    'GetNdbClonesCloneInfoBpgConfigVmPropertyResult',
    'GetNdbClonesCloneLcmConfigResult',
    'GetNdbClonesCloneLcmConfigExpiryDetailResult',
    'GetNdbClonesCloneLcmConfigPostDeleteCommandResult',
    'GetNdbClonesCloneLcmConfigPreDeleteCommandResult',
    'GetNdbClonesCloneLcmConfigRefreshDetailResult',
    'GetNdbClonesCloneLinkedDatabaseResult',
    'GetNdbClonesCloneLinkedDatabaseInfoResult',
    'GetNdbClonesClonePropertyResult',
    'GetNdbClonesCloneTagResult',
    'GetNdbClonesCloneTimeMachineResult',
    'GetNdbClonesCloneTimeMachinePropertyResult',
    'GetNdbClonesCloneTimeMachineScheduleResult',
    'GetNdbClonesCloneTimeMachineScheduleContinuousScheduleResult',
    'GetNdbClonesCloneTimeMachineScheduleDailyScheduleResult',
    'GetNdbClonesCloneTimeMachineScheduleMonthlyScheduleResult',
    'GetNdbClonesCloneTimeMachineScheduleQuartelyScheduleResult',
    'GetNdbClonesCloneTimeMachineScheduleSnapshotTimeOfDayResult',
    'GetNdbClonesCloneTimeMachineScheduleWeeklyScheduleResult',
    'GetNdbClonesCloneTimeMachineScheduleYearlyScheduleResult',
    'GetNdbClonesCloneTimeMachineSlaResult',
    'GetNdbClonesCloneTimeMachineTagResult',
    'GetNdbClonesFilterResult',
    'GetNdbClusterEntityCountResult',
    'GetNdbClusterEntityCountEngineCountResult',
    'GetNdbClusterEntityCountEngineCountMariadbDatabaseResult',
    'GetNdbClusterEntityCountEngineCountMariadbDatabaseProfileResult',
    'GetNdbClusterEntityCountEngineCountMongodbDatabaseResult',
    'GetNdbClusterEntityCountEngineCountMongodbDatabaseProfileResult',
    'GetNdbClusterEntityCountEngineCountMysqlDatabaseResult',
    'GetNdbClusterEntityCountEngineCountMysqlDatabaseProfileResult',
    'GetNdbClusterEntityCountEngineCountOracleDatabaseResult',
    'GetNdbClusterEntityCountEngineCountOracleDatabaseProfileResult',
    'GetNdbClusterEntityCountEngineCountPostgresDatabaseResult',
    'GetNdbClusterEntityCountEngineCountPostgresDatabaseProfileResult',
    'GetNdbClusterEntityCountEngineCountSaphanaDatabaseResult',
    'GetNdbClusterEntityCountEngineCountSaphanaDatabaseProfileResult',
    'GetNdbClusterEntityCountEngineCountSqlserverDatabaseResult',
    'GetNdbClusterEntityCountEngineCountSqlserverDatabaseProfileResult',
    'GetNdbClusterPropertyResult',
    'GetNdbClusterResourceConfigResult',
    'GetNdbClustersClusterResult',
    'GetNdbClustersClusterEntityCountResult',
    'GetNdbClustersClusterEntityCountEngineCountResult',
    'GetNdbClustersClusterEntityCountEngineCountMariadbDatabaseResult',
    'GetNdbClustersClusterEntityCountEngineCountMariadbDatabaseProfileResult',
    'GetNdbClustersClusterEntityCountEngineCountMongodbDatabaseResult',
    'GetNdbClustersClusterEntityCountEngineCountMongodbDatabaseProfileResult',
    'GetNdbClustersClusterEntityCountEngineCountMysqlDatabaseResult',
    'GetNdbClustersClusterEntityCountEngineCountMysqlDatabaseProfileResult',
    'GetNdbClustersClusterEntityCountEngineCountOracleDatabaseResult',
    'GetNdbClustersClusterEntityCountEngineCountOracleDatabaseProfileResult',
    'GetNdbClustersClusterEntityCountEngineCountPostgresDatabaseResult',
    'GetNdbClustersClusterEntityCountEngineCountPostgresDatabaseProfileResult',
    'GetNdbClustersClusterEntityCountEngineCountSaphanaDatabaseResult',
    'GetNdbClustersClusterEntityCountEngineCountSaphanaDatabaseProfileResult',
    'GetNdbClustersClusterEntityCountEngineCountSqlserverDatabaseResult',
    'GetNdbClustersClusterEntityCountEngineCountSqlserverDatabaseProfileResult',
    'GetNdbClustersClusterPropertyResult',
    'GetNdbClustersClusterResourceConfigResult',
    'GetNdbDatabaseDatabaseNodeResult',
    'GetNdbDatabaseDatabaseNodeInfoResult',
    'GetNdbDatabaseDatabaseNodePropertyResult',
    'GetNdbDatabaseDatabaseNodeProtectionDomainResult',
    'GetNdbDatabaseDatabaseNodeProtectionDomainPropertyResult',
    'GetNdbDatabaseDatabaseNodeTagResult',
    'GetNdbDatabaseInfoResult',
    'GetNdbDatabaseInfoBpgConfigResult',
    'GetNdbDatabaseInfoBpgConfigBpgDbParamResult',
    'GetNdbDatabaseInfoBpgConfigStorageResult',
    'GetNdbDatabaseInfoBpgConfigStorageArchiveStorageResult',
    'GetNdbDatabaseInfoBpgConfigStorageDataDiskResult',
    'GetNdbDatabaseInfoBpgConfigStorageLogDiskResult',
    'GetNdbDatabaseInfoBpgConfigVmPropertyResult',
    'GetNdbDatabaseLcmConfigResult',
    'GetNdbDatabaseLcmConfigExpiryDetailResult',
    'GetNdbDatabaseLcmConfigPostDeleteCommandResult',
    'GetNdbDatabaseLcmConfigPreDeleteCommandResult',
    'GetNdbDatabaseLcmConfigRefreshDetailResult',
    'GetNdbDatabaseLinkedDatabaseResult',
    'GetNdbDatabaseLinkedDatabaseInfoResult',
    'GetNdbDatabasePropertyResult',
    'GetNdbDatabaseTagResult',
    'GetNdbDatabaseTimeMachineResult',
    'GetNdbDatabaseTimeMachinePropertyResult',
    'GetNdbDatabaseTimeMachineScheduleResult',
    'GetNdbDatabaseTimeMachineScheduleContinuousScheduleResult',
    'GetNdbDatabaseTimeMachineScheduleDailyScheduleResult',
    'GetNdbDatabaseTimeMachineScheduleMonthlyScheduleResult',
    'GetNdbDatabaseTimeMachineScheduleQuartelyScheduleResult',
    'GetNdbDatabaseTimeMachineScheduleSnapshotTimeOfDayResult',
    'GetNdbDatabaseTimeMachineScheduleWeeklyScheduleResult',
    'GetNdbDatabaseTimeMachineScheduleYearlyScheduleResult',
    'GetNdbDatabaseTimeMachineSlaResult',
    'GetNdbDatabaseTimeMachineTagResult',
    'GetNdbDatabasesDatabaseInstanceResult',
    'GetNdbDatabasesDatabaseInstanceDatabaseNodeResult',
    'GetNdbDatabasesDatabaseInstanceDatabaseNodeInfoResult',
    'GetNdbDatabasesDatabaseInstanceDatabaseNodePropertyResult',
    'GetNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomainResult',
    'GetNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomainPropertyResult',
    'GetNdbDatabasesDatabaseInstanceDatabaseNodeTagResult',
    'GetNdbDatabasesDatabaseInstanceInfoResult',
    'GetNdbDatabasesDatabaseInstanceInfoBpgConfigResult',
    'GetNdbDatabasesDatabaseInstanceInfoBpgConfigBpgDbParamResult',
    'GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageResult',
    'GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageArchiveStorageResult',
    'GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageDataDiskResult',
    'GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageLogDiskResult',
    'GetNdbDatabasesDatabaseInstanceInfoBpgConfigVmPropertyResult',
    'GetNdbDatabasesDatabaseInstanceLcmConfigResult',
    'GetNdbDatabasesDatabaseInstanceLcmConfigExpiryDetailResult',
    'GetNdbDatabasesDatabaseInstanceLcmConfigPostDeleteCommandResult',
    'GetNdbDatabasesDatabaseInstanceLcmConfigPreDeleteCommandResult',
    'GetNdbDatabasesDatabaseInstanceLcmConfigRefreshDetailResult',
    'GetNdbDatabasesDatabaseInstanceLinkedDatabaseResult',
    'GetNdbDatabasesDatabaseInstanceLinkedDatabaseInfoResult',
    'GetNdbDatabasesDatabaseInstanceMetadataResult',
    'GetNdbDatabasesDatabaseInstanceMetadataDeregisterInfoResult',
    'GetNdbDatabasesDatabaseInstancePropertyResult',
    'GetNdbDatabasesDatabaseInstanceTagResult',
    'GetNdbDatabasesDatabaseInstanceTimeMachineResult',
    'GetNdbDatabasesDatabaseInstanceTimeMachinePropertyResult',
    'GetNdbDatabasesDatabaseInstanceTimeMachineScheduleResult',
    'GetNdbDatabasesDatabaseInstanceTimeMachineScheduleContinuousScheduleResult',
    'GetNdbDatabasesDatabaseInstanceTimeMachineScheduleDailyScheduleResult',
    'GetNdbDatabasesDatabaseInstanceTimeMachineScheduleMonthlyScheduleResult',
    'GetNdbDatabasesDatabaseInstanceTimeMachineScheduleQuartelyScheduleResult',
    'GetNdbDatabasesDatabaseInstanceTimeMachineScheduleSnapshotTimeOfDayResult',
    'GetNdbDatabasesDatabaseInstanceTimeMachineScheduleWeeklyScheduleResult',
    'GetNdbDatabasesDatabaseInstanceTimeMachineScheduleYearlyScheduleResult',
    'GetNdbDatabasesDatabaseInstanceTimeMachineSlaResult',
    'GetNdbDatabasesDatabaseInstanceTimeMachineTagResult',
    'GetNdbDbserverPropertyResult',
    'GetNdbDbserverTagResult',
    'GetNdbDbserverVmInfoResult',
    'GetNdbDbserverVmInfoDeregisterInfoResult',
    'GetNdbDbserverVmInfoInfoResult',
    'GetNdbDbserverVmInfoInfoBpgConfigResult',
    'GetNdbDbserverVmInfoInfoBpgConfigBpgDbParamResult',
    'GetNdbDbserverVmInfoInfoBpgConfigStorageResult',
    'GetNdbDbserverVmInfoInfoBpgConfigStorageArchiveStorageResult',
    'GetNdbDbserverVmInfoInfoBpgConfigStorageDataDiskResult',
    'GetNdbDbserverVmInfoInfoBpgConfigStorageLogDiskResult',
    'GetNdbDbserverVmInfoInfoBpgConfigVmPropertyResult',
    'GetNdbDbserverVmInfoNetworkInfoResult',
    'GetNdbDbserverVmInfoNetworkInfoAccessInfoResult',
    'GetNdbDbserversDbserverResult',
    'GetNdbDbserversDbserverPropertyResult',
    'GetNdbDbserversDbserverTagResult',
    'GetNdbDbserversDbserverVmInfoResult',
    'GetNdbDbserversDbserverVmInfoDeregisterInfoResult',
    'GetNdbDbserversDbserverVmInfoInfoResult',
    'GetNdbDbserversDbserverVmInfoInfoBpgConfigResult',
    'GetNdbDbserversDbserverVmInfoInfoBpgConfigBpgDbParamResult',
    'GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageResult',
    'GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageArchiveStorageResult',
    'GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageDataDiskResult',
    'GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageLogDiskResult',
    'GetNdbDbserversDbserverVmInfoInfoBpgConfigVmPropertyResult',
    'GetNdbDbserversDbserverVmInfoNetworkInfoResult',
    'GetNdbDbserversDbserverVmInfoNetworkInfoAccessInfoResult',
    'GetNdbMaintenanceWindowEntityTaskAssocResult',
    'GetNdbMaintenanceWindowEntityTaskAssocPayloadResult',
    'GetNdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommandResult',
    'GetNdbMaintenanceWindowEntityTaskAssocPropertyResult',
    'GetNdbMaintenanceWindowEntityTaskAssocTagResult',
    'GetNdbMaintenanceWindowPropertyResult',
    'GetNdbMaintenanceWindowScheduleResult',
    'GetNdbMaintenanceWindowTagResult',
    'GetNdbMaintenanceWindowsMaintenanceWindowResult',
    'GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocResult',
    'GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPayloadResult',
    'GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPayloadPrePostCommandResult',
    'GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPropertyResult',
    'GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocTagResult',
    'GetNdbMaintenanceWindowsMaintenanceWindowPropertyResult',
    'GetNdbMaintenanceWindowsMaintenanceWindowScheduleResult',
    'GetNdbMaintenanceWindowsMaintenanceWindowTagResult',
    'GetNdbNetworkAvailableIpsAvailableIpResult',
    'GetNdbNetworkIpAddressResult',
    'GetNdbNetworkIpPoolResult',
    'GetNdbNetworkIpPoolAddressResult',
    'GetNdbNetworkPropertiesMapResult',
    'GetNdbNetworkPropertyResult',
    'GetNdbNetworksNetworkResult',
    'GetNdbNetworksNetworkIpAddressResult',
    'GetNdbNetworksNetworkIpPoolResult',
    'GetNdbNetworksNetworkIpPoolAddressResult',
    'GetNdbNetworksNetworkPropertiesMapResult',
    'GetNdbNetworksNetworkPropertyResult',
    'GetNdbProfileClusterAvailabilityResult',
    'GetNdbProfileVersionResult',
    'GetNdbProfileVersionPropertyResult',
    'GetNdbProfileVersionVersionClusterAssociationResult',
    'GetNdbProfileVersionVersionClusterAssociationPropertyResult',
    'GetNdbProfilesProfileResult',
    'GetNdbProfilesProfileClusterAvailabilityResult',
    'GetNdbProfilesProfileVersionResult',
    'GetNdbProfilesProfileVersionPropertyResult',
    'GetNdbProfilesProfileVersionVersionClusterAssociationResult',
    'GetNdbProfilesProfileVersionVersionClusterAssociationPropertyResult',
    'GetNdbSlasSlaResult',
    'GetNdbSnapshotFilterResult',
    'GetNdbSnapshotLcmConfigResult',
    'GetNdbSnapshotLcmConfigExpiryDetailResult',
    'GetNdbSnapshotLcmConfigPostDeleteCommandResult',
    'GetNdbSnapshotLcmConfigPreDeleteCommandResult',
    'GetNdbSnapshotLcmConfigRefreshDetailResult',
    'GetNdbSnapshotPropertyResult',
    'GetNdbSnapshotTagResult',
    'GetNdbSnapshotsFilterResult',
    'GetNdbSnapshotsSnapshotResult',
    'GetNdbSnapshotsSnapshotLcmConfigResult',
    'GetNdbSnapshotsSnapshotLcmConfigExpiryDetailResult',
    'GetNdbSnapshotsSnapshotLcmConfigPostDeleteCommandResult',
    'GetNdbSnapshotsSnapshotLcmConfigPreDeleteCommandResult',
    'GetNdbSnapshotsSnapshotLcmConfigRefreshDetailResult',
    'GetNdbSnapshotsSnapshotPropertyResult',
    'GetNdbSnapshotsSnapshotTagResult',
    'GetNdbTagsTagResult',
    'GetNdbTimeMachinePropertyResult',
    'GetNdbTimeMachineScheduleResult',
    'GetNdbTimeMachineScheduleContinuousScheduleResult',
    'GetNdbTimeMachineScheduleDailyScheduleResult',
    'GetNdbTimeMachineScheduleMonthlyScheduleResult',
    'GetNdbTimeMachineScheduleQuartelyScheduleResult',
    'GetNdbTimeMachineScheduleSnapshotTimeOfDayResult',
    'GetNdbTimeMachineScheduleWeeklyScheduleResult',
    'GetNdbTimeMachineScheduleYearlyScheduleResult',
    'GetNdbTimeMachineSlaResult',
    'GetNdbTimeMachineTagResult',
    'GetNdbTimeMachinesTimeMachineResult',
    'GetNdbTimeMachinesTimeMachinePropertyResult',
    'GetNdbTimeMachinesTimeMachineScheduleResult',
    'GetNdbTimeMachinesTimeMachineScheduleContinuousScheduleResult',
    'GetNdbTimeMachinesTimeMachineScheduleDailyScheduleResult',
    'GetNdbTimeMachinesTimeMachineScheduleMonthlyScheduleResult',
    'GetNdbTimeMachinesTimeMachineScheduleQuartelyScheduleResult',
    'GetNdbTimeMachinesTimeMachineScheduleSnapshotTimeOfDayResult',
    'GetNdbTimeMachinesTimeMachineScheduleWeeklyScheduleResult',
    'GetNdbTimeMachinesTimeMachineScheduleYearlyScheduleResult',
    'GetNdbTimeMachinesTimeMachineSlaResult',
    'GetNdbTimeMachinesTimeMachineTagResult',
    'GetNdbTmsCapabilityCapabilityResult',
    'GetNdbTmsCapabilityCapabilityContinuousRegionResult',
    'GetNdbTmsCapabilityCapabilityContinuousRegionDbLogResult',
    'GetNdbTmsCapabilityCapabilityContinuousRegionDbLogInfoResult',
    'GetNdbTmsCapabilityCapabilityContinuousRegionDbLogMetadataResult',
    'GetNdbTmsCapabilityCapabilityContinuousRegionDbLogMetadataDeregisterInfoResult',
    'GetNdbTmsCapabilityCapabilityContinuousRegionProcessedRangeResult',
    'GetNdbTmsCapabilityCapabilityContinuousRegionUnprocessedRangeResult',
    'GetNdbTmsCapabilityCapabilitySnapshotResult',
    'GetNdbTmsCapabilityCapabilitySnapshotLcmConfigResult',
    'GetNdbTmsCapabilityCapabilitySnapshotLcmConfigExpiryDetailResult',
    'GetNdbTmsCapabilityCapabilitySnapshotLcmConfigPostDeleteCommandResult',
    'GetNdbTmsCapabilityCapabilitySnapshotLcmConfigPreDeleteCommandResult',
    'GetNdbTmsCapabilityCapabilitySnapshotLcmConfigRefreshDetailResult',
    'GetNdbTmsCapabilityCapabilitySnapshotMetadataResult',
    'GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoResult',
    'GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigResult',
    'GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigBpgDbParamResult',
    'GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageResult',
    'GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageArchiveStorageResult',
    'GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageDataDiskResult',
    'GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageLogDiskResult',
    'GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigVmPropertyResult',
    'GetNdbTmsCapabilityCapabilitySnapshotPropertyResult',
    'GetNdbTmsCapabilityCapabilitySnapshotTagResult',
    'GetNdbTmsCapabilityLastContinuousSnapshotResult',
    'GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigResult',
    'GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigExpiryDetailResult',
    'GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigPostDeleteCommandResult',
    'GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigPreDeleteCommandResult',
    'GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigRefreshDetailResult',
    'GetNdbTmsCapabilityLastContinuousSnapshotMetadataResult',
    'GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoResult',
    'GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigResult',
    'GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigBpgDbParamResult',
    'GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageResult',
    'GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageArchiveStorageResult',
    'GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageDataDiskResult',
    'GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageLogDiskResult',
    'GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigVmPropertyResult',
    'GetNdbTmsCapabilityLastContinuousSnapshotPropertyResult',
    'GetNdbTmsCapabilityLastContinuousSnapshotTagResult',
    'GetNdbTmsCapabilityLastDbLogResult',
    'GetNdbTmsCapabilityLastDbLogMetadataResult',
    'GetNdbTmsCapabilityLastDbLogMetadataDeregisterInfoResult',
    'GetNetworkSecurityRuleAdRuleInboundAllowListResult',
    'GetNetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionListResult',
    'GetNetworkSecurityRuleAdRuleInboundAllowListFilterParamResult',
    'GetNetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeListResult',
    'GetNetworkSecurityRuleAdRuleInboundAllowListServiceGroupListResult',
    'GetNetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeListResult',
    'GetNetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeListResult',
    'GetNetworkSecurityRuleAdRuleOutboundAllowListResult',
    'GetNetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListResult',
    'GetNetworkSecurityRuleAdRuleOutboundAllowListFilterParamResult',
    'GetNetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeListResult',
    'GetNetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListResult',
    'GetNetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeListResult',
    'GetNetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeListResult',
    'GetNetworkSecurityRuleAdRuleTargetGroupFilterParamResult',
    'GetNetworkSecurityRuleAppRuleInboundAllowListResult',
    'GetNetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionListResult',
    'GetNetworkSecurityRuleAppRuleInboundAllowListFilterParamResult',
    'GetNetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeListResult',
    'GetNetworkSecurityRuleAppRuleInboundAllowListServiceGroupListResult',
    'GetNetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeListResult',
    'GetNetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeListResult',
    'GetNetworkSecurityRuleAppRuleOutboundAllowListResult',
    'GetNetworkSecurityRuleAppRuleOutboundAllowListFilterParamResult',
    'GetNetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeListResult',
    'GetNetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeListResult',
    'GetNetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeListResult',
    'GetNetworkSecurityRuleAppRuleTargetGroupFilterParamResult',
    'GetNetworkSecurityRuleCategoryResult',
    'GetNetworkSecurityRuleIsolationRuleFirstEntityFilterParamResult',
    'GetNetworkSecurityRuleIsolationRuleSecondEntityFilterParamResult',
    'GetNetworkSecurityRuleQuarantineRuleInboundAllowListResult',
    'GetNetworkSecurityRuleQuarantineRuleInboundAllowListFilterParamResult',
    'GetNetworkSecurityRuleQuarantineRuleInboundAllowListIcmpTypeCodeListResult',
    'GetNetworkSecurityRuleQuarantineRuleInboundAllowListTcpPortRangeListResult',
    'GetNetworkSecurityRuleQuarantineRuleInboundAllowListUdpPortRangeListResult',
    'GetNetworkSecurityRuleQuarantineRuleOutboundAllowListResult',
    'GetNetworkSecurityRuleQuarantineRuleOutboundAllowListAddressGroupInclusionListResult',
    'GetNetworkSecurityRuleQuarantineRuleOutboundAllowListFilterParamResult',
    'GetNetworkSecurityRuleQuarantineRuleOutboundAllowListIcmpTypeCodeListResult',
    'GetNetworkSecurityRuleQuarantineRuleOutboundAllowListServiceGroupListResult',
    'GetNetworkSecurityRuleQuarantineRuleOutboundAllowListTcpPortRangeListResult',
    'GetNetworkSecurityRuleQuarantineRuleOutboundAllowListUdpPortRangeListResult',
    'GetNetworkSecurityRuleQuarantineRuleTargetGroupFilterParamResult',
    'GetPbrSpecResult',
    'GetPbrSpecResourceResult',
    'GetPbrSpecResourceActionResult',
    'GetPbrSpecResourceDestinationResult',
    'GetPbrSpecResourceProtocolParameterResult',
    'GetPbrSpecResourceProtocolParameterIcmpResult',
    'GetPbrSpecResourceProtocolParameterTcpResult',
    'GetPbrSpecResourceProtocolParameterTcpDestinationPortRangeListResult',
    'GetPbrSpecResourceProtocolParameterTcpSourcePortRangeListResult',
    'GetPbrSpecResourceProtocolParameterUdpResult',
    'GetPbrSpecResourceProtocolParameterUdpDestinationPortRangeListResult',
    'GetPbrSpecResourceProtocolParameterUdpSourcePortRangeListResult',
    'GetPbrSpecResourceSourceResult',
    'GetPbrStatusResult',
    'GetPbrStatusExecutionContextResult',
    'GetPbrStatusResourceResult',
    'GetPbrStatusResourceActionResult',
    'GetPbrStatusResourceDestinationResult',
    'GetPbrStatusResourceProtocolParameterResult',
    'GetPbrStatusResourceProtocolParameterIcmpResult',
    'GetPbrStatusResourceProtocolParameterTcpResult',
    'GetPbrStatusResourceProtocolParameterTcpDestinationPortRangeListResult',
    'GetPbrStatusResourceProtocolParameterTcpSourcePortRangeListResult',
    'GetPbrStatusResourceProtocolParameterUdpResult',
    'GetPbrStatusResourceProtocolParameterUdpDestinationPortRangeListResult',
    'GetPbrStatusResourceProtocolParameterUdpSourcePortRangeListResult',
    'GetPbrStatusResourceRoutingPolicyCounterResult',
    'GetPbrStatusResourceSourceResult',
    'GetPbrsEntityResult',
    'GetPbrsEntitySpecResult',
    'GetPbrsEntitySpecResourceResult',
    'GetPbrsEntitySpecResourceActionResult',
    'GetPbrsEntitySpecResourceDestinationResult',
    'GetPbrsEntitySpecResourceProtocolParameterResult',
    'GetPbrsEntitySpecResourceProtocolParameterIcmpResult',
    'GetPbrsEntitySpecResourceProtocolParameterTcpResult',
    'GetPbrsEntitySpecResourceProtocolParameterTcpDestinationPortRangeListResult',
    'GetPbrsEntitySpecResourceProtocolParameterTcpSourcePortRangeListResult',
    'GetPbrsEntitySpecResourceProtocolParameterUdpResult',
    'GetPbrsEntitySpecResourceProtocolParameterUdpDestinationPortRangeListResult',
    'GetPbrsEntitySpecResourceProtocolParameterUdpSourcePortRangeListResult',
    'GetPbrsEntitySpecResourceSourceResult',
    'GetPbrsEntityStatusResult',
    'GetPbrsEntityStatusExecutionContextResult',
    'GetPbrsEntityStatusResourceResult',
    'GetPbrsEntityStatusResourceActionResult',
    'GetPbrsEntityStatusResourceDestinationResult',
    'GetPbrsEntityStatusResourceProtocolParameterResult',
    'GetPbrsEntityStatusResourceProtocolParameterIcmpResult',
    'GetPbrsEntityStatusResourceProtocolParameterTcpResult',
    'GetPbrsEntityStatusResourceProtocolParameterTcpDestinationPortRangeListResult',
    'GetPbrsEntityStatusResourceProtocolParameterTcpSourcePortRangeListResult',
    'GetPbrsEntityStatusResourceProtocolParameterUdpResult',
    'GetPbrsEntityStatusResourceProtocolParameterUdpDestinationPortRangeListResult',
    'GetPbrsEntityStatusResourceProtocolParameterUdpSourcePortRangeListResult',
    'GetPbrsEntityStatusResourceRoutingPolicyCounterResult',
    'GetPbrsEntityStatusResourceSourceResult',
    'GetPbrsMetadataResult',
    'GetPermissionCategoryResult',
    'GetPermissionFieldResult',
    'GetPermissionsEntityResult',
    'GetPermissionsEntityCategoryResult',
    'GetPermissionsEntityFieldResult',
    'GetPermissionsMetadataResult',
    'GetProjectAccountReferenceListResult',
    'GetProjectAcpResult',
    'GetProjectAcpContextFilterListResult',
    'GetProjectAcpContextFilterListEntityFilterExpressionListResult',
    'GetProjectAcpContextFilterListEntityFilterExpressionListRightHandSideResult',
    'GetProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategoryResult',
    'GetProjectAcpContextFilterListScopeFilterExpressionListResult',
    'GetProjectAcpContextFilterListScopeFilterExpressionListRightHandSideResult',
    'GetProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategoryResult',
    'GetProjectAcpRoleReferenceResult',
    'GetProjectAcpUserGroupReferenceListResult',
    'GetProjectAcpUserReferenceListResult',
    'GetProjectCategoryResult',
    'GetProjectClusterReferenceListResult',
    'GetProjectDefaultEnvironmentReferenceResult',
    'GetProjectEnvironmentReferenceListResult',
    'GetProjectExternalNetworkListResult',
    'GetProjectExternalUserGroupReferenceListResult',
    'GetProjectResourceDomainResult',
    'GetProjectResourceDomainResourceResult',
    'GetProjectSubnetReferenceListResult',
    'GetProjectTunnelReferenceListResult',
    'GetProjectUserReferenceListResult',
    'GetProjectVpcReferenceListResult',
    'GetProjectsEntityResult',
    'GetProjectsEntityAccountReferenceListResult',
    'GetProjectsEntityCategoryResult',
    'GetProjectsEntityEnvironmentReferenceListResult',
    'GetProjectsEntityExternalNetworkListResult',
    'GetProjectsEntityExternalUserGroupReferenceListResult',
    'GetProjectsEntityResourceDomainResult',
    'GetProjectsEntityResourceDomainResourceResult',
    'GetProjectsEntitySubnetReferenceListResult',
    'GetProjectsEntityUserReferenceListResult',
    'GetProtectionRuleAvailabilityZoneConnectivityListResult',
    'GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListResult',
    'GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyResult',
    'GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyResult',
    'GetProtectionRuleCategoryResult',
    'GetProtectionRuleCategoryFilterResult',
    'GetProtectionRuleCategoryFilterParamResult',
    'GetProtectionRuleOrderedAvailabilityZoneListResult',
    'GetProtectionRuleOwnerReferenceResult',
    'GetProtectionRuleProjectReferenceResult',
    'GetProtectionRulesEntityResult',
    'GetProtectionRulesEntityAvailabilityZoneConnectivityListResult',
    'GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListResult',
    'GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyResult',
    'GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyResult',
    'GetProtectionRulesEntityCategoryResult',
    'GetProtectionRulesEntityCategoryFilterResult',
    'GetProtectionRulesEntityCategoryFilterParamResult',
    'GetProtectionRulesEntityOrderedAvailabilityZoneListResult',
    'GetProtectionRulesEntityOwnerReferenceResult',
    'GetProtectionRulesEntityProjectReferenceResult',
    'GetRecoveryPlanCategoryResult',
    'GetRecoveryPlanOwnerReferenceResult',
    'GetRecoveryPlanParameterResult',
    'GetRecoveryPlanParameterFloatingIpAssignmentListResult',
    'GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListResult',
    'GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigResult',
    'GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigResult',
    'GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformationResult',
    'GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmReferenceResult',
    'GetRecoveryPlanParameterNetworkMappingListResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceResult',
    'GetRecoveryPlanProjectReferenceResult',
    'GetRecoveryPlanStageListResult',
    'GetRecoveryPlanStageListStageWorkResult',
    'GetRecoveryPlanStageListStageWorkRecoverEntityResult',
    'GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListResult',
    'GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListCategoryResult',
    'GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListScriptListResult',
    'GetRecoveryPlansEntityResult',
    'GetRecoveryPlansEntityCategoryResult',
    'GetRecoveryPlansEntityOwnerReferenceResult',
    'GetRecoveryPlansEntityParameterResult',
    'GetRecoveryPlansEntityParameterFloatingIpAssignmentListResult',
    'GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListResult',
    'GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigResult',
    'GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigResult',
    'GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformationResult',
    'GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmReferenceResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceResult',
    'GetRecoveryPlansEntityProjectReferenceResult',
    'GetRecoveryPlansEntityStageListResult',
    'GetRecoveryPlansEntityStageListStageWorkResult',
    'GetRecoveryPlansEntityStageListStageWorkRecoverEntityResult',
    'GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListResult',
    'GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListCategoryResult',
    'GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListScriptListResult',
    'GetRoleCategoryResult',
    'GetRolePermissionReferenceListResult',
    'GetRolesEntityResult',
    'GetRolesEntityCategoryResult',
    'GetRolesEntityPermissionReferenceListResult',
    'GetRolesMetadataResult',
    'GetServiceGroupServiceListResult',
    'GetServiceGroupServiceListIcmpTypeCodeListResult',
    'GetServiceGroupServiceListTcpPortRangeListResult',
    'GetServiceGroupServiceListUdpPortRangeListResult',
    'GetServiceGroupsEntityResult',
    'GetServiceGroupsEntityAssociatedPoliciesListResult',
    'GetServiceGroupsEntityServiceGroupResult',
    'GetServiceGroupsEntityServiceGroupServiceListResult',
    'GetServiceGroupsEntityServiceGroupServiceListIcmpTypeCodeListResult',
    'GetServiceGroupsEntityServiceGroupServiceListTcpPortRangeListResult',
    'GetServiceGroupsEntityServiceGroupServiceListUdpPortRangeListResult',
    'GetServiceGroupsMetadataResult',
    'GetStaticRoutesSpecResult',
    'GetStaticRoutesSpecResourceResult',
    'GetStaticRoutesSpecResourceDefaultRouteNexthopResult',
    'GetStaticRoutesSpecResourceStaticRoutesListResult',
    'GetStaticRoutesSpecResourceStaticRoutesListNexthopResult',
    'GetStaticRoutesStatusResult',
    'GetStaticRoutesStatusExecutionContextResult',
    'GetStaticRoutesStatusResourceResult',
    'GetStaticRoutesStatusResourceDefaultRouteResult',
    'GetStaticRoutesStatusResourceDefaultRouteNexthopResult',
    'GetStaticRoutesStatusResourceDynamicRoutesListResult',
    'GetStaticRoutesStatusResourceDynamicRoutesListNexthopResult',
    'GetStaticRoutesStatusResourceLocalRoutesListResult',
    'GetStaticRoutesStatusResourceLocalRoutesListNexthopResult',
    'GetStaticRoutesStatusResourceStaticRoutesListResult',
    'GetStaticRoutesStatusResourceStaticRoutesListNexthopResult',
    'GetSubnetAdditionalFilterResult',
    'GetSubnetCategoryResult',
    'GetSubnetMessageListResult',
    'GetSubnetsEntityResult',
    'GetSubnetsEntityCategoryResult',
    'GetSubnetsEntityMessageListResult',
    'GetSubnetsMetadataResult',
    'GetUserAccessControlPolicyReferenceListResult',
    'GetUserCategoryResult',
    'GetUserDirectoryServiceUserResult',
    'GetUserDirectoryServiceUserDirectoryServiceReferenceResult',
    'GetUserGroupAccessControlPolicyReferenceListResult',
    'GetUserGroupCategoryResult',
    'GetUserGroupDirectoryServiceUserGroupResult',
    'GetUserGroupDirectoryServiceUserGroupDirectoryServiceReferenceResult',
    'GetUserGroupProjectReferenceListResult',
    'GetUserGroupsEntityResult',
    'GetUserGroupsEntityAccessControlPolicyReferenceListResult',
    'GetUserGroupsEntityCategoryResult',
    'GetUserGroupsEntityDirectoryServiceUserGroupResult',
    'GetUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReferenceResult',
    'GetUserGroupsEntityProjectReferenceListResult',
    'GetUserGroupsMetadataResult',
    'GetUserIdentityProviderUserResult',
    'GetUserIdentityProviderUserIdentityProviderReferenceResult',
    'GetUserProjectReferenceListResult',
    'GetUsersEntityResult',
    'GetUsersEntityAccessControlPolicyReferenceListResult',
    'GetUsersEntityCategoryResult',
    'GetUsersEntityDirectoryServiceUserResult',
    'GetUsersEntityDirectoryServiceUserDirectoryServiceReferenceResult',
    'GetUsersEntityIdentityProviderUserResult',
    'GetUsersEntityIdentityProviderUserIdentityProviderReferenceResult',
    'GetUsersEntityProjectReferenceListResult',
    'GetUsersMetadataResult',
    'GetVirtualMachineCategoryResult',
    'GetVirtualMachineDiskListResult',
    'GetVirtualMachineDiskListDevicePropertyResult',
    'GetVirtualMachineDiskListStorageConfigResult',
    'GetVirtualMachineDiskListStorageConfigStorageContainerReferenceResult',
    'GetVirtualMachineGpuListResult',
    'GetVirtualMachineMessageListResult',
    'GetVirtualMachineNicListResult',
    'GetVirtualMachineNicListIpEndpointListResult',
    'GetVirtualMachineSerialPortListResult',
    'GetVpcSpecResult',
    'GetVpcSpecResourceResult',
    'GetVpcSpecResourceCommonDomainNameServerIpListResult',
    'GetVpcSpecResourceExternalSubnetListResult',
    'GetVpcSpecResourceExternallyRoutablePrefixListResult',
    'GetVpcStatusResult',
    'GetVpcStatusExecutionContextResult',
    'GetVpcStatusResourceResult',
    'GetVpcStatusResourceCommonDomainNameServerIpListResult',
    'GetVpcStatusResourceExternalSubnetListResult',
    'GetVpcStatusResourceExternalSubnetListActiveGatewayNodeResult',
    'GetVpcStatusResourceExternallyRoutablePrefixListResult',
    'GetVpcsEntityResult',
    'GetVpcsEntitySpecResult',
    'GetVpcsEntitySpecResourceResult',
    'GetVpcsEntitySpecResourceCommonDomainNameServerIpListResult',
    'GetVpcsEntitySpecResourceExternalSubnetListResult',
    'GetVpcsEntitySpecResourceExternallyRoutablePrefixListResult',
    'GetVpcsEntityStatusResult',
    'GetVpcsEntityStatusExecutionContextResult',
    'GetVpcsEntityStatusResourceResult',
    'GetVpcsEntityStatusResourceCommonDomainNameServerIpListResult',
    'GetVpcsEntityStatusResourceExternalSubnetListResult',
    'GetVpcsEntityStatusResourceExternalSubnetListActiveGatewayNodeResult',
    'GetVpcsEntityStatusResourceExternallyRoutablePrefixListResult',
    'GetVpcsMetadataResult',
]

@pulumi.output_type
class AccessControlPolicyCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: - (Optional) Name of the Access Control Policy.
        :param str value: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AccessControlPolicyContextFilterList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityFilterExpressionLists":
            suggest = "entity_filter_expression_lists"
        elif key == "scopeFilterExpressionLists":
            suggest = "scope_filter_expression_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccessControlPolicyContextFilterList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccessControlPolicyContextFilterList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccessControlPolicyContextFilterList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_filter_expression_lists: Sequence['outputs.AccessControlPolicyContextFilterListEntityFilterExpressionList'],
                 scope_filter_expression_lists: Optional[Sequence['outputs.AccessControlPolicyContextFilterListScopeFilterExpressionList']] = None):
        """
        :param Sequence['AccessControlPolicyContextFilterListEntityFilterExpressionListArgs'] entity_filter_expression_lists: A list of Entity filter expressions.
        :param Sequence['AccessControlPolicyContextFilterListScopeFilterExpressionListArgs'] scope_filter_expression_lists: - (Optional) Filter the scope of an Access Control Policy.
        """
        pulumi.set(__self__, "entity_filter_expression_lists", entity_filter_expression_lists)
        if scope_filter_expression_lists is not None:
            pulumi.set(__self__, "scope_filter_expression_lists", scope_filter_expression_lists)

    @property
    @pulumi.getter(name="entityFilterExpressionLists")
    def entity_filter_expression_lists(self) -> Sequence['outputs.AccessControlPolicyContextFilterListEntityFilterExpressionList']:
        """
        A list of Entity filter expressions.
        """
        return pulumi.get(self, "entity_filter_expression_lists")

    @property
    @pulumi.getter(name="scopeFilterExpressionLists")
    def scope_filter_expression_lists(self) -> Optional[Sequence['outputs.AccessControlPolicyContextFilterListScopeFilterExpressionList']]:
        """
        - (Optional) Filter the scope of an Access Control Policy.
        """
        return pulumi.get(self, "scope_filter_expression_lists")


@pulumi.output_type
class AccessControlPolicyContextFilterListEntityFilterExpressionList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rightHandSide":
            suggest = "right_hand_side"
        elif key == "leftHandSideEntityType":
            suggest = "left_hand_side_entity_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccessControlPolicyContextFilterListEntityFilterExpressionList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccessControlPolicyContextFilterListEntityFilterExpressionList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccessControlPolicyContextFilterListEntityFilterExpressionList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operator: str,
                 right_hand_side: 'outputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide',
                 left_hand_side_entity_type: Optional[str] = None):
        """
        :param str operator: - (Required) The operator in the filter expression.
        :param 'AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs' right_hand_side: - (Required) The right hand side (RHS) of an scope expression.
        :param str left_hand_side_entity_type: - (Optional)  The LHS of the filter expression - the entity type.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "right_hand_side", right_hand_side)
        if left_hand_side_entity_type is not None:
            pulumi.set(__self__, "left_hand_side_entity_type", left_hand_side_entity_type)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        - (Required) The operator in the filter expression.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="rightHandSide")
    def right_hand_side(self) -> 'outputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide':
        """
        - (Required) The right hand side (RHS) of an scope expression.
        """
        return pulumi.get(self, "right_hand_side")

    @property
    @pulumi.getter(name="leftHandSideEntityType")
    def left_hand_side_entity_type(self) -> Optional[str]:
        """
        - (Optional)  The LHS of the filter expression - the entity type.
        """
        return pulumi.get(self, "left_hand_side_entity_type")


@pulumi.output_type
class AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uuidLists":
            suggest = "uuid_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categories: Optional['outputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories'] = None,
                 collection: Optional[str] = None,
                 uuid_lists: Optional[Sequence[str]] = None):
        """
        :param 'AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgs' categories: - (Optional) The category values represented as a dictionary of key > list of values.
        :param str collection: - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        :param Sequence[str] uuid_lists: - (Optional) The explicit list of UUIDs for the given kind.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if uuid_lists is not None:
            pulumi.set(__self__, "uuid_lists", uuid_lists)

    @property
    @pulumi.getter
    def categories(self) -> Optional['outputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories']:
        """
        - (Optional) The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def collection(self) -> Optional[str]:
        """
        - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter(name="uuidLists")
    def uuid_lists(self) -> Optional[Sequence[str]]:
        """
        - (Optional) The explicit list of UUIDs for the given kind.
        """
        return pulumi.get(self, "uuid_lists")


@pulumi.output_type
class AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: - (Optional) Name of the Access Control Policy.
        :param Sequence[str] values: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        - value of the key.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AccessControlPolicyContextFilterListScopeFilterExpressionList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "leftHandSide":
            suggest = "left_hand_side"
        elif key == "rightHandSide":
            suggest = "right_hand_side"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccessControlPolicyContextFilterListScopeFilterExpressionList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccessControlPolicyContextFilterListScopeFilterExpressionList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccessControlPolicyContextFilterListScopeFilterExpressionList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 left_hand_side: str,
                 operator: str,
                 right_hand_side: 'outputs.AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide'):
        """
        :param str left_hand_side: - (Optional)  The LHS of the filter expression - the scope type.
        :param str operator: - (Required) The operator of the filter expression.
        :param 'AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideArgs' right_hand_side: - (Required) The right hand side (RHS) of an scope expression.
        """
        pulumi.set(__self__, "left_hand_side", left_hand_side)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "right_hand_side", right_hand_side)

    @property
    @pulumi.getter(name="leftHandSide")
    def left_hand_side(self) -> str:
        """
        - (Optional)  The LHS of the filter expression - the scope type.
        """
        return pulumi.get(self, "left_hand_side")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        - (Required) The operator of the filter expression.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="rightHandSide")
    def right_hand_side(self) -> 'outputs.AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide':
        """
        - (Required) The right hand side (RHS) of an scope expression.
        """
        return pulumi.get(self, "right_hand_side")


@pulumi.output_type
class AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uuidLists":
            suggest = "uuid_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categories: Optional['outputs.AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories'] = None,
                 collection: Optional[str] = None,
                 uuid_lists: Optional[Sequence[str]] = None):
        """
        :param 'AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgs' categories: - (Optional) The category values represented as a dictionary of key > list of values.
        :param str collection: - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        :param Sequence[str] uuid_lists: - (Optional) The explicit list of UUIDs for the given kind.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if uuid_lists is not None:
            pulumi.set(__self__, "uuid_lists", uuid_lists)

    @property
    @pulumi.getter
    def categories(self) -> Optional['outputs.AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories']:
        """
        - (Optional) The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def collection(self) -> Optional[str]:
        """
        - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter(name="uuidLists")
    def uuid_lists(self) -> Optional[Sequence[str]]:
        """
        - (Optional) The explicit list of UUIDs for the given kind.
        """
        return pulumi.get(self, "uuid_lists")


@pulumi.output_type
class AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: - (Optional) Name of the Access Control Policy.
        :param Sequence[str] values: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        - value of the key.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AccessControlPolicyOwnerReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Optional) Name of the Access Control Policy.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class AccessControlPolicyRoleReference(dict):
    def __init__(__self__, *,
                 kind: str,
                 uuid: str,
                 name: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str uuid: - the UUID(Required).
        :param str name: - (Optional) Name of the Access Control Policy.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "uuid", uuid)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AccessControlPolicyUserGroupReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: - the UUID(Required).
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Optional) Name of the Access Control Policy.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AccessControlPolicyUserReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: - the UUID(Required).
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Optional) Name of the Access Control Policy.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AddressGroupIpAddressBlockList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prefixLength":
            suggest = "prefix_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AddressGroupIpAddressBlockList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AddressGroupIpAddressBlockList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AddressGroupIpAddressBlockList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip: str,
                 prefix_length: int):
        """
        :param str ip: - (Required) IP of the address block
        :param int prefix_length: - (Required) Prefix length of address block in int
               
               See detailed information in [Nutanix Address Groups](https://www.nutanix.dev/api_references/prism-central-v3/#/5ccef53a546a4-create-a-new-address-group).
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        - (Required) IP of the address block
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        """
        - (Required) Prefix length of address block in int

        See detailed information in [Nutanix Address Groups](https://www.nutanix.dev/api_references/prism-central-v3/#/5ccef53a546a4-create-a-new-address-group).
        """
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class FoundationCentralImageClusterClusterStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatePercentComplete":
            suggest = "aggregate_percent_complete"
        elif key == "clusterCreationStarted":
            suggest = "cluster_creation_started"
        elif key == "clusterProgressDetails":
            suggest = "cluster_progress_details"
        elif key == "currentFoundationIp":
            suggest = "current_foundation_ip"
        elif key == "foundationSessionId":
            suggest = "foundation_session_id"
        elif key == "imagingStopped":
            suggest = "imaging_stopped"
        elif key == "intentPickedUp":
            suggest = "intent_picked_up"
        elif key == "nodeProgressDetails":
            suggest = "node_progress_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterClusterStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterClusterStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterClusterStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregate_percent_complete: Optional[float] = None,
                 cluster_creation_started: Optional[bool] = None,
                 cluster_progress_details: Optional[Sequence['outputs.FoundationCentralImageClusterClusterStatusClusterProgressDetail']] = None,
                 current_foundation_ip: Optional[str] = None,
                 foundation_session_id: Optional[str] = None,
                 imaging_stopped: Optional[bool] = None,
                 intent_picked_up: Optional[bool] = None,
                 node_progress_details: Optional[Sequence['outputs.FoundationCentralImageClusterClusterStatusNodeProgressDetail']] = None):
        if aggregate_percent_complete is not None:
            pulumi.set(__self__, "aggregate_percent_complete", aggregate_percent_complete)
        if cluster_creation_started is not None:
            pulumi.set(__self__, "cluster_creation_started", cluster_creation_started)
        if cluster_progress_details is not None:
            pulumi.set(__self__, "cluster_progress_details", cluster_progress_details)
        if current_foundation_ip is not None:
            pulumi.set(__self__, "current_foundation_ip", current_foundation_ip)
        if foundation_session_id is not None:
            pulumi.set(__self__, "foundation_session_id", foundation_session_id)
        if imaging_stopped is not None:
            pulumi.set(__self__, "imaging_stopped", imaging_stopped)
        if intent_picked_up is not None:
            pulumi.set(__self__, "intent_picked_up", intent_picked_up)
        if node_progress_details is not None:
            pulumi.set(__self__, "node_progress_details", node_progress_details)

    @property
    @pulumi.getter(name="aggregatePercentComplete")
    def aggregate_percent_complete(self) -> Optional[float]:
        return pulumi.get(self, "aggregate_percent_complete")

    @property
    @pulumi.getter(name="clusterCreationStarted")
    def cluster_creation_started(self) -> Optional[bool]:
        return pulumi.get(self, "cluster_creation_started")

    @property
    @pulumi.getter(name="clusterProgressDetails")
    def cluster_progress_details(self) -> Optional[Sequence['outputs.FoundationCentralImageClusterClusterStatusClusterProgressDetail']]:
        return pulumi.get(self, "cluster_progress_details")

    @property
    @pulumi.getter(name="currentFoundationIp")
    def current_foundation_ip(self) -> Optional[str]:
        return pulumi.get(self, "current_foundation_ip")

    @property
    @pulumi.getter(name="foundationSessionId")
    def foundation_session_id(self) -> Optional[str]:
        return pulumi.get(self, "foundation_session_id")

    @property
    @pulumi.getter(name="imagingStopped")
    def imaging_stopped(self) -> Optional[bool]:
        return pulumi.get(self, "imaging_stopped")

    @property
    @pulumi.getter(name="intentPickedUp")
    def intent_picked_up(self) -> Optional[bool]:
        return pulumi.get(self, "intent_picked_up")

    @property
    @pulumi.getter(name="nodeProgressDetails")
    def node_progress_details(self) -> Optional[Sequence['outputs.FoundationCentralImageClusterClusterStatusNodeProgressDetail']]:
        return pulumi.get(self, "node_progress_details")


@pulumi.output_type
class FoundationCentralImageClusterClusterStatusClusterProgressDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterName":
            suggest = "cluster_name"
        elif key == "messageLists":
            suggest = "message_lists"
        elif key == "percentComplete":
            suggest = "percent_complete"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterClusterStatusClusterProgressDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterClusterStatusClusterProgressDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterClusterStatusClusterProgressDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_name: Optional[str] = None,
                 message_lists: Optional[Sequence[str]] = None,
                 percent_complete: Optional[float] = None,
                 status: Optional[str] = None):
        """
        :param str cluster_name: Name of the cluster.
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if message_lists is not None:
            pulumi.set(__self__, "message_lists", message_lists)
        if percent_complete is not None:
            pulumi.set(__self__, "percent_complete", percent_complete)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        """
        Name of the cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="messageLists")
    def message_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "message_lists")

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> Optional[float]:
        return pulumi.get(self, "percent_complete")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class FoundationCentralImageClusterClusterStatusNodeProgressDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imagedNodeUuid":
            suggest = "imaged_node_uuid"
        elif key == "imagingStopped":
            suggest = "imaging_stopped"
        elif key == "intentPickedUp":
            suggest = "intent_picked_up"
        elif key == "messageLists":
            suggest = "message_lists"
        elif key == "percentComplete":
            suggest = "percent_complete"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterClusterStatusNodeProgressDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterClusterStatusNodeProgressDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterClusterStatusNodeProgressDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 imaged_node_uuid: Optional[str] = None,
                 imaging_stopped: Optional[bool] = None,
                 intent_picked_up: Optional[bool] = None,
                 message_lists: Optional[Sequence[str]] = None,
                 percent_complete: Optional[float] = None,
                 status: Optional[str] = None):
        """
        :param str imaged_node_uuid: UUID of the node.
        """
        if imaged_node_uuid is not None:
            pulumi.set(__self__, "imaged_node_uuid", imaged_node_uuid)
        if imaging_stopped is not None:
            pulumi.set(__self__, "imaging_stopped", imaging_stopped)
        if intent_picked_up is not None:
            pulumi.set(__self__, "intent_picked_up", intent_picked_up)
        if message_lists is not None:
            pulumi.set(__self__, "message_lists", message_lists)
        if percent_complete is not None:
            pulumi.set(__self__, "percent_complete", percent_complete)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="imagedNodeUuid")
    def imaged_node_uuid(self) -> Optional[str]:
        """
        UUID of the node.
        """
        return pulumi.get(self, "imaged_node_uuid")

    @property
    @pulumi.getter(name="imagingStopped")
    def imaging_stopped(self) -> Optional[bool]:
        return pulumi.get(self, "imaging_stopped")

    @property
    @pulumi.getter(name="intentPickedUp")
    def intent_picked_up(self) -> Optional[bool]:
        return pulumi.get(self, "intent_picked_up")

    @property
    @pulumi.getter(name="messageLists")
    def message_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "message_lists")

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> Optional[float]:
        return pulumi.get(self, "percent_complete")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class FoundationCentralImageClusterCommonNetworkSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cvmDnsServers":
            suggest = "cvm_dns_servers"
        elif key == "cvmNtpServers":
            suggest = "cvm_ntp_servers"
        elif key == "hypervisorDnsServers":
            suggest = "hypervisor_dns_servers"
        elif key == "hypervisorNtpServers":
            suggest = "hypervisor_ntp_servers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterCommonNetworkSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterCommonNetworkSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterCommonNetworkSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cvm_dns_servers: Optional[Sequence[str]] = None,
                 cvm_ntp_servers: Optional[Sequence[str]] = None,
                 hypervisor_dns_servers: Optional[Sequence[str]] = None,
                 hypervisor_ntp_servers: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] cvm_dns_servers: List of dns servers for the cvms in the cluster.
        :param Sequence[str] cvm_ntp_servers: List of ntp servers for the cvms in the cluster.
        :param Sequence[str] hypervisor_dns_servers: List of dns servers for the hypervisors in the cluster.
        :param Sequence[str] hypervisor_ntp_servers: List of ntp servers for the hypervisors in the cluster.
        """
        if cvm_dns_servers is not None:
            pulumi.set(__self__, "cvm_dns_servers", cvm_dns_servers)
        if cvm_ntp_servers is not None:
            pulumi.set(__self__, "cvm_ntp_servers", cvm_ntp_servers)
        if hypervisor_dns_servers is not None:
            pulumi.set(__self__, "hypervisor_dns_servers", hypervisor_dns_servers)
        if hypervisor_ntp_servers is not None:
            pulumi.set(__self__, "hypervisor_ntp_servers", hypervisor_ntp_servers)

    @property
    @pulumi.getter(name="cvmDnsServers")
    def cvm_dns_servers(self) -> Optional[Sequence[str]]:
        """
        List of dns servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_dns_servers")

    @property
    @pulumi.getter(name="cvmNtpServers")
    def cvm_ntp_servers(self) -> Optional[Sequence[str]]:
        """
        List of ntp servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_ntp_servers")

    @property
    @pulumi.getter(name="hypervisorDnsServers")
    def hypervisor_dns_servers(self) -> Optional[Sequence[str]]:
        """
        List of dns servers for the hypervisors in the cluster.
        """
        return pulumi.get(self, "hypervisor_dns_servers")

    @property
    @pulumi.getter(name="hypervisorNtpServers")
    def hypervisor_ntp_servers(self) -> Optional[Sequence[str]]:
        """
        List of ntp servers for the hypervisors in the cluster.
        """
        return pulumi.get(self, "hypervisor_ntp_servers")


@pulumi.output_type
class FoundationCentralImageClusterFoundationInitConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cvmGateway":
            suggest = "cvm_gateway"
        elif key == "cvmNetmask":
            suggest = "cvm_netmask"
        elif key == "dnsServers":
            suggest = "dns_servers"
        elif key == "hypervProductKey":
            suggest = "hyperv_product_key"
        elif key == "hypervSku":
            suggest = "hyperv_sku"
        elif key == "hypervisorGateway":
            suggest = "hypervisor_gateway"
        elif key == "hypervisorIsoUrl":
            suggest = "hypervisor_iso_url"
        elif key == "hypervisorIsos":
            suggest = "hypervisor_isos"
        elif key == "hypervisorNetmask":
            suggest = "hypervisor_netmask"
        elif key == "ipmiGateway":
            suggest = "ipmi_gateway"
        elif key == "ipmiNetmask":
            suggest = "ipmi_netmask"
        elif key == "nosPackageUrls":
            suggest = "nos_package_urls"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterFoundationInitConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterFoundationInitConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterFoundationInitConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blocks: Optional[Sequence['outputs.FoundationCentralImageClusterFoundationInitConfigBlock']] = None,
                 clusters: Optional[Sequence['outputs.FoundationCentralImageClusterFoundationInitConfigCluster']] = None,
                 cvm_gateway: Optional[str] = None,
                 cvm_netmask: Optional[str] = None,
                 dns_servers: Optional[str] = None,
                 hyperv_product_key: Optional[str] = None,
                 hyperv_sku: Optional[str] = None,
                 hypervisor_gateway: Optional[str] = None,
                 hypervisor_iso_url: Optional[Mapping[str, str]] = None,
                 hypervisor_isos: Optional[Sequence['outputs.FoundationCentralImageClusterFoundationInitConfigHypervisorIso']] = None,
                 hypervisor_netmask: Optional[str] = None,
                 ipmi_gateway: Optional[str] = None,
                 ipmi_netmask: Optional[str] = None,
                 nos_package_urls: Optional[Sequence['outputs.FoundationCentralImageClusterFoundationInitConfigNosPackageUrl']] = None):
        """
        :param str cvm_gateway: Gateway of the cvm.
        :param str cvm_netmask: Netmask of the cvm.
        :param str hyperv_product_key: Product key for hyperv isos. Required only if the hypervisor type is hyperv and product key is mandatory (ex: for volume license).
        :param str hyperv_sku: SKU of hyperv to be installed if hypervisor_type is hyperv.
        :param str hypervisor_gateway: Gateway of the hypervisor.
        :param str hypervisor_netmask: Netmask of the hypervisor.
        :param str ipmi_gateway: Gateway of the ipmi.
        :param str ipmi_netmask: Netmask of the ipmi.
        """
        if blocks is not None:
            pulumi.set(__self__, "blocks", blocks)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if cvm_gateway is not None:
            pulumi.set(__self__, "cvm_gateway", cvm_gateway)
        if cvm_netmask is not None:
            pulumi.set(__self__, "cvm_netmask", cvm_netmask)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if hyperv_product_key is not None:
            pulumi.set(__self__, "hyperv_product_key", hyperv_product_key)
        if hyperv_sku is not None:
            pulumi.set(__self__, "hyperv_sku", hyperv_sku)
        if hypervisor_gateway is not None:
            pulumi.set(__self__, "hypervisor_gateway", hypervisor_gateway)
        if hypervisor_iso_url is not None:
            pulumi.set(__self__, "hypervisor_iso_url", hypervisor_iso_url)
        if hypervisor_isos is not None:
            pulumi.set(__self__, "hypervisor_isos", hypervisor_isos)
        if hypervisor_netmask is not None:
            pulumi.set(__self__, "hypervisor_netmask", hypervisor_netmask)
        if ipmi_gateway is not None:
            pulumi.set(__self__, "ipmi_gateway", ipmi_gateway)
        if ipmi_netmask is not None:
            pulumi.set(__self__, "ipmi_netmask", ipmi_netmask)
        if nos_package_urls is not None:
            pulumi.set(__self__, "nos_package_urls", nos_package_urls)

    @property
    @pulumi.getter
    def blocks(self) -> Optional[Sequence['outputs.FoundationCentralImageClusterFoundationInitConfigBlock']]:
        return pulumi.get(self, "blocks")

    @property
    @pulumi.getter
    def clusters(self) -> Optional[Sequence['outputs.FoundationCentralImageClusterFoundationInitConfigCluster']]:
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter(name="cvmGateway")
    def cvm_gateway(self) -> Optional[str]:
        """
        Gateway of the cvm.
        """
        return pulumi.get(self, "cvm_gateway")

    @property
    @pulumi.getter(name="cvmNetmask")
    def cvm_netmask(self) -> Optional[str]:
        """
        Netmask of the cvm.
        """
        return pulumi.get(self, "cvm_netmask")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[str]:
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="hypervProductKey")
    def hyperv_product_key(self) -> Optional[str]:
        """
        Product key for hyperv isos. Required only if the hypervisor type is hyperv and product key is mandatory (ex: for volume license).
        """
        return pulumi.get(self, "hyperv_product_key")

    @property
    @pulumi.getter(name="hypervSku")
    def hyperv_sku(self) -> Optional[str]:
        """
        SKU of hyperv to be installed if hypervisor_type is hyperv.
        """
        return pulumi.get(self, "hyperv_sku")

    @property
    @pulumi.getter(name="hypervisorGateway")
    def hypervisor_gateway(self) -> Optional[str]:
        """
        Gateway of the hypervisor.
        """
        return pulumi.get(self, "hypervisor_gateway")

    @property
    @pulumi.getter(name="hypervisorIsoUrl")
    def hypervisor_iso_url(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "hypervisor_iso_url")

    @property
    @pulumi.getter(name="hypervisorIsos")
    def hypervisor_isos(self) -> Optional[Sequence['outputs.FoundationCentralImageClusterFoundationInitConfigHypervisorIso']]:
        return pulumi.get(self, "hypervisor_isos")

    @property
    @pulumi.getter(name="hypervisorNetmask")
    def hypervisor_netmask(self) -> Optional[str]:
        """
        Netmask of the hypervisor.
        """
        return pulumi.get(self, "hypervisor_netmask")

    @property
    @pulumi.getter(name="ipmiGateway")
    def ipmi_gateway(self) -> Optional[str]:
        """
        Gateway of the ipmi.
        """
        return pulumi.get(self, "ipmi_gateway")

    @property
    @pulumi.getter(name="ipmiNetmask")
    def ipmi_netmask(self) -> Optional[str]:
        """
        Netmask of the ipmi.
        """
        return pulumi.get(self, "ipmi_netmask")

    @property
    @pulumi.getter(name="nosPackageUrls")
    def nos_package_urls(self) -> Optional[Sequence['outputs.FoundationCentralImageClusterFoundationInitConfigNosPackageUrl']]:
        return pulumi.get(self, "nos_package_urls")


@pulumi.output_type
class FoundationCentralImageClusterFoundationInitConfigBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockId":
            suggest = "block_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterFoundationInitConfigBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterFoundationInitConfigBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterFoundationInitConfigBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_id: Optional[str] = None,
                 nodes: Optional[Sequence['outputs.FoundationCentralImageClusterFoundationInitConfigBlockNode']] = None):
        if block_id is not None:
            pulumi.set(__self__, "block_id", block_id)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="blockId")
    def block_id(self) -> Optional[str]:
        return pulumi.get(self, "block_id")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.FoundationCentralImageClusterFoundationInitConfigBlockNode']]:
        return pulumi.get(self, "nodes")


@pulumi.output_type
class FoundationCentralImageClusterFoundationInitConfigBlockNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cvmIp":
            suggest = "cvm_ip"
        elif key == "cvmVlanId":
            suggest = "cvm_vlan_id"
        elif key == "fcImagedNodeUuid":
            suggest = "fc_imaged_node_uuid"
        elif key == "hardwareAttributesOverride":
            suggest = "hardware_attributes_override"
        elif key == "hypervisorHostname":
            suggest = "hypervisor_hostname"
        elif key == "hypervisorIp":
            suggest = "hypervisor_ip"
        elif key == "imageNow":
            suggest = "image_now"
        elif key == "ipmiIp":
            suggest = "ipmi_ip"
        elif key == "ipv6Address":
            suggest = "ipv6_address"
        elif key == "nodePosition":
            suggest = "node_position"
        elif key == "nodeSerial":
            suggest = "node_serial"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterFoundationInitConfigBlockNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterFoundationInitConfigBlockNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterFoundationInitConfigBlockNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cvm_ip: Optional[str] = None,
                 cvm_vlan_id: Optional[int] = None,
                 fc_imaged_node_uuid: Optional[str] = None,
                 hardware_attributes_override: Optional[Mapping[str, str]] = None,
                 hypervisor: Optional[str] = None,
                 hypervisor_hostname: Optional[str] = None,
                 hypervisor_ip: Optional[str] = None,
                 image_now: Optional[bool] = None,
                 ipmi_ip: Optional[str] = None,
                 ipv6_address: Optional[str] = None,
                 node_position: Optional[str] = None,
                 node_serial: Optional[str] = None):
        """
        :param str cvm_ip: IP address to be set for the cvm on the node.
        :param int cvm_vlan_id: Vlan tag of the cvm, if the cvm is on a vlan.
        :param Mapping[str, str] hardware_attributes_override: Hardware attributes override json for the node.
        :param str hypervisor_hostname: Name to be set for the hypervisor host.
        :param str hypervisor_ip: IP address to be set for the hypervisor on the node.
        :param bool image_now: True, if the node should be imaged, False, otherwise.
        :param str ipmi_ip: IP address to be set for the ipmi of the node.
        """
        if cvm_ip is not None:
            pulumi.set(__self__, "cvm_ip", cvm_ip)
        if cvm_vlan_id is not None:
            pulumi.set(__self__, "cvm_vlan_id", cvm_vlan_id)
        if fc_imaged_node_uuid is not None:
            pulumi.set(__self__, "fc_imaged_node_uuid", fc_imaged_node_uuid)
        if hardware_attributes_override is not None:
            pulumi.set(__self__, "hardware_attributes_override", hardware_attributes_override)
        if hypervisor is not None:
            pulumi.set(__self__, "hypervisor", hypervisor)
        if hypervisor_hostname is not None:
            pulumi.set(__self__, "hypervisor_hostname", hypervisor_hostname)
        if hypervisor_ip is not None:
            pulumi.set(__self__, "hypervisor_ip", hypervisor_ip)
        if image_now is not None:
            pulumi.set(__self__, "image_now", image_now)
        if ipmi_ip is not None:
            pulumi.set(__self__, "ipmi_ip", ipmi_ip)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if node_position is not None:
            pulumi.set(__self__, "node_position", node_position)
        if node_serial is not None:
            pulumi.set(__self__, "node_serial", node_serial)

    @property
    @pulumi.getter(name="cvmIp")
    def cvm_ip(self) -> Optional[str]:
        """
        IP address to be set for the cvm on the node.
        """
        return pulumi.get(self, "cvm_ip")

    @property
    @pulumi.getter(name="cvmVlanId")
    def cvm_vlan_id(self) -> Optional[int]:
        """
        Vlan tag of the cvm, if the cvm is on a vlan.
        """
        return pulumi.get(self, "cvm_vlan_id")

    @property
    @pulumi.getter(name="fcImagedNodeUuid")
    def fc_imaged_node_uuid(self) -> Optional[str]:
        return pulumi.get(self, "fc_imaged_node_uuid")

    @property
    @pulumi.getter(name="hardwareAttributesOverride")
    def hardware_attributes_override(self) -> Optional[Mapping[str, str]]:
        """
        Hardware attributes override json for the node.
        """
        return pulumi.get(self, "hardware_attributes_override")

    @property
    @pulumi.getter
    def hypervisor(self) -> Optional[str]:
        return pulumi.get(self, "hypervisor")

    @property
    @pulumi.getter(name="hypervisorHostname")
    def hypervisor_hostname(self) -> Optional[str]:
        """
        Name to be set for the hypervisor host.
        """
        return pulumi.get(self, "hypervisor_hostname")

    @property
    @pulumi.getter(name="hypervisorIp")
    def hypervisor_ip(self) -> Optional[str]:
        """
        IP address to be set for the hypervisor on the node.
        """
        return pulumi.get(self, "hypervisor_ip")

    @property
    @pulumi.getter(name="imageNow")
    def image_now(self) -> Optional[bool]:
        """
        True, if the node should be imaged, False, otherwise.
        """
        return pulumi.get(self, "image_now")

    @property
    @pulumi.getter(name="ipmiIp")
    def ipmi_ip(self) -> Optional[str]:
        """
        IP address to be set for the ipmi of the node.
        """
        return pulumi.get(self, "ipmi_ip")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="nodePosition")
    def node_position(self) -> Optional[str]:
        return pulumi.get(self, "node_position")

    @property
    @pulumi.getter(name="nodeSerial")
    def node_serial(self) -> Optional[str]:
        return pulumi.get(self, "node_serial")


@pulumi.output_type
class FoundationCentralImageClusterFoundationInitConfigCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterExternalIp":
            suggest = "cluster_external_ip"
        elif key == "clusterInitNow":
            suggest = "cluster_init_now"
        elif key == "clusterInitSuccessful":
            suggest = "cluster_init_successful"
        elif key == "clusterMembers":
            suggest = "cluster_members"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "cvmDnsServers":
            suggest = "cvm_dns_servers"
        elif key == "cvmNtpServers":
            suggest = "cvm_ntp_servers"
        elif key == "redundancyFactor":
            suggest = "redundancy_factor"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterFoundationInitConfigCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterFoundationInitConfigCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterFoundationInitConfigCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_external_ip: Optional[str] = None,
                 cluster_init_now: Optional[bool] = None,
                 cluster_init_successful: Optional[bool] = None,
                 cluster_members: Optional[Sequence[str]] = None,
                 cluster_name: Optional[str] = None,
                 cvm_dns_servers: Optional[str] = None,
                 cvm_ntp_servers: Optional[str] = None,
                 redundancy_factor: Optional[int] = None,
                 timezone: Optional[str] = None):
        """
        :param str cluster_external_ip: External management ip of the cluster.
        :param str cluster_name: Name of the cluster.
        :param str cvm_dns_servers: List of dns servers for the cvms in the cluster.
        :param str cvm_ntp_servers: List of ntp servers for the cvms in the cluster.
        :param int redundancy_factor: Redundancy factor of the cluster.
        :param str timezone: Timezone to be set on the cluster.
        """
        if cluster_external_ip is not None:
            pulumi.set(__self__, "cluster_external_ip", cluster_external_ip)
        if cluster_init_now is not None:
            pulumi.set(__self__, "cluster_init_now", cluster_init_now)
        if cluster_init_successful is not None:
            pulumi.set(__self__, "cluster_init_successful", cluster_init_successful)
        if cluster_members is not None:
            pulumi.set(__self__, "cluster_members", cluster_members)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cvm_dns_servers is not None:
            pulumi.set(__self__, "cvm_dns_servers", cvm_dns_servers)
        if cvm_ntp_servers is not None:
            pulumi.set(__self__, "cvm_ntp_servers", cvm_ntp_servers)
        if redundancy_factor is not None:
            pulumi.set(__self__, "redundancy_factor", redundancy_factor)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="clusterExternalIp")
    def cluster_external_ip(self) -> Optional[str]:
        """
        External management ip of the cluster.
        """
        return pulumi.get(self, "cluster_external_ip")

    @property
    @pulumi.getter(name="clusterInitNow")
    def cluster_init_now(self) -> Optional[bool]:
        return pulumi.get(self, "cluster_init_now")

    @property
    @pulumi.getter(name="clusterInitSuccessful")
    def cluster_init_successful(self) -> Optional[bool]:
        return pulumi.get(self, "cluster_init_successful")

    @property
    @pulumi.getter(name="clusterMembers")
    def cluster_members(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cluster_members")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        """
        Name of the cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="cvmDnsServers")
    def cvm_dns_servers(self) -> Optional[str]:
        """
        List of dns servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_dns_servers")

    @property
    @pulumi.getter(name="cvmNtpServers")
    def cvm_ntp_servers(self) -> Optional[str]:
        """
        List of ntp servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_ntp_servers")

    @property
    @pulumi.getter(name="redundancyFactor")
    def redundancy_factor(self) -> Optional[int]:
        """
        Redundancy factor of the cluster.
        """
        return pulumi.get(self, "redundancy_factor")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        Timezone to be set on the cluster.
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class FoundationCentralImageClusterFoundationInitConfigHypervisorIso(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hypervisorType":
            suggest = "hypervisor_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterFoundationInitConfigHypervisorIso. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterFoundationInitConfigHypervisorIso.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterFoundationInitConfigHypervisorIso.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hypervisor_type: Optional[str] = None,
                 sha256sum: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str hypervisor_type: Type of hypervisor to be installed. Must be one of {kvm, esx, hyperv}.
        :param str sha256sum: sha256sum of the hypervisor iso.
        :param str url: URL to download hypervisor iso. Required only if imaging is needed.
        """
        if hypervisor_type is not None:
            pulumi.set(__self__, "hypervisor_type", hypervisor_type)
        if sha256sum is not None:
            pulumi.set(__self__, "sha256sum", sha256sum)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="hypervisorType")
    def hypervisor_type(self) -> Optional[str]:
        """
        Type of hypervisor to be installed. Must be one of {kvm, esx, hyperv}.
        """
        return pulumi.get(self, "hypervisor_type")

    @property
    @pulumi.getter
    def sha256sum(self) -> Optional[str]:
        """
        sha256sum of the hypervisor iso.
        """
        return pulumi.get(self, "sha256sum")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL to download hypervisor iso. Required only if imaging is needed.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class FoundationCentralImageClusterFoundationInitConfigNosPackageUrl(dict):
    def __init__(__self__, *,
                 sha256sum: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str sha256sum: sha256sum of the hypervisor iso.
        :param str url: URL to download hypervisor iso. Required only if imaging is needed.
        """
        if sha256sum is not None:
            pulumi.set(__self__, "sha256sum", sha256sum)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def sha256sum(self) -> Optional[str]:
        """
        sha256sum of the hypervisor iso.
        """
        return pulumi.get(self, "sha256sum")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL to download hypervisor iso. Required only if imaging is needed.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class FoundationCentralImageClusterHypervisorIsoDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hypervProductKey":
            suggest = "hyperv_product_key"
        elif key == "hypervSku":
            suggest = "hyperv_sku"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterHypervisorIsoDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterHypervisorIsoDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterHypervisorIsoDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hyperv_product_key: Optional[str] = None,
                 hyperv_sku: Optional[str] = None,
                 sha256sum: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str hyperv_product_key: Product key for hyperv isos. Required only if the hypervisor type is hyperv and product key is mandatory (ex: for volume license).
        :param str hyperv_sku: SKU of hyperv to be installed if hypervisor_type is hyperv.
        :param str sha256sum: sha256sum of the hypervisor iso.
        :param str url: URL to download hypervisor iso. Required only if imaging is needed.
        """
        if hyperv_product_key is not None:
            pulumi.set(__self__, "hyperv_product_key", hyperv_product_key)
        if hyperv_sku is not None:
            pulumi.set(__self__, "hyperv_sku", hyperv_sku)
        if sha256sum is not None:
            pulumi.set(__self__, "sha256sum", sha256sum)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="hypervProductKey")
    def hyperv_product_key(self) -> Optional[str]:
        """
        Product key for hyperv isos. Required only if the hypervisor type is hyperv and product key is mandatory (ex: for volume license).
        """
        return pulumi.get(self, "hyperv_product_key")

    @property
    @pulumi.getter(name="hypervSku")
    def hyperv_sku(self) -> Optional[str]:
        """
        SKU of hyperv to be installed if hypervisor_type is hyperv.
        """
        return pulumi.get(self, "hyperv_sku")

    @property
    @pulumi.getter
    def sha256sum(self) -> Optional[str]:
        """
        sha256sum of the hypervisor iso.
        """
        return pulumi.get(self, "sha256sum")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL to download hypervisor iso. Required only if imaging is needed.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class FoundationCentralImageClusterNodeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cvmGateway":
            suggest = "cvm_gateway"
        elif key == "cvmIp":
            suggest = "cvm_ip"
        elif key == "cvmNetmask":
            suggest = "cvm_netmask"
        elif key == "cvmRamGb":
            suggest = "cvm_ram_gb"
        elif key == "cvmVlanId":
            suggest = "cvm_vlan_id"
        elif key == "hardwareAttributesOverride":
            suggest = "hardware_attributes_override"
        elif key == "hypervisorGateway":
            suggest = "hypervisor_gateway"
        elif key == "hypervisorHostname":
            suggest = "hypervisor_hostname"
        elif key == "hypervisorIp":
            suggest = "hypervisor_ip"
        elif key == "hypervisorNetmask":
            suggest = "hypervisor_netmask"
        elif key == "hypervisorType":
            suggest = "hypervisor_type"
        elif key == "imageNow":
            suggest = "image_now"
        elif key == "imagedNodeUuid":
            suggest = "imaged_node_uuid"
        elif key == "ipmiGateway":
            suggest = "ipmi_gateway"
        elif key == "ipmiIp":
            suggest = "ipmi_ip"
        elif key == "ipmiNetmask":
            suggest = "ipmi_netmask"
        elif key == "rdmaPassthrough":
            suggest = "rdma_passthrough"
        elif key == "useExistingNetworkSettings":
            suggest = "use_existing_network_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterNodeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterNodeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterNodeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cvm_gateway: Optional[str] = None,
                 cvm_ip: Optional[str] = None,
                 cvm_netmask: Optional[str] = None,
                 cvm_ram_gb: Optional[int] = None,
                 cvm_vlan_id: Optional[int] = None,
                 hardware_attributes_override: Optional[Mapping[str, str]] = None,
                 hypervisor_gateway: Optional[str] = None,
                 hypervisor_hostname: Optional[str] = None,
                 hypervisor_ip: Optional[str] = None,
                 hypervisor_netmask: Optional[str] = None,
                 hypervisor_type: Optional[str] = None,
                 image_now: Optional[bool] = None,
                 imaged_node_uuid: Optional[str] = None,
                 ipmi_gateway: Optional[str] = None,
                 ipmi_ip: Optional[str] = None,
                 ipmi_netmask: Optional[str] = None,
                 rdma_passthrough: Optional[bool] = None,
                 use_existing_network_settings: Optional[bool] = None):
        """
        :param str cvm_gateway: Gateway of the cvm.
        :param str cvm_ip: IP address to be set for the cvm on the node.
        :param str cvm_netmask: Netmask of the cvm.
        :param int cvm_ram_gb: Amount of memory to be assigned for the cvm.
        :param int cvm_vlan_id: Vlan tag of the cvm, if the cvm is on a vlan.
        :param Mapping[str, str] hardware_attributes_override: Hardware attributes override json for the node.
        :param str hypervisor_gateway: Gateway of the hypervisor.
        :param str hypervisor_hostname: Name to be set for the hypervisor host.
        :param str hypervisor_ip: IP address to be set for the hypervisor on the node.
        :param str hypervisor_netmask: Netmask of the hypervisor.
        :param str hypervisor_type: Type of hypervisor to be installed. Must be one of {kvm, esx, hyperv}.
        :param bool image_now: True, if the node should be imaged, False, otherwise.
        :param str imaged_node_uuid: UUID of the node.
        :param str ipmi_gateway: Gateway of the ipmi.
        :param str ipmi_ip: IP address to be set for the ipmi of the node.
        :param str ipmi_netmask: Netmask of the ipmi.
        :param bool rdma_passthrough: Passthrough RDMA nic to CVM if possible, default to false.
        :param bool use_existing_network_settings: Decides whether to use the existing network settings for the node. If True, the existing network settings of the node will be used during cluster creation. If False, then client must provide new network settings. If all nodes are booted in phoenix, this field is, by default, considered to be False.
        """
        if cvm_gateway is not None:
            pulumi.set(__self__, "cvm_gateway", cvm_gateway)
        if cvm_ip is not None:
            pulumi.set(__self__, "cvm_ip", cvm_ip)
        if cvm_netmask is not None:
            pulumi.set(__self__, "cvm_netmask", cvm_netmask)
        if cvm_ram_gb is not None:
            pulumi.set(__self__, "cvm_ram_gb", cvm_ram_gb)
        if cvm_vlan_id is not None:
            pulumi.set(__self__, "cvm_vlan_id", cvm_vlan_id)
        if hardware_attributes_override is not None:
            pulumi.set(__self__, "hardware_attributes_override", hardware_attributes_override)
        if hypervisor_gateway is not None:
            pulumi.set(__self__, "hypervisor_gateway", hypervisor_gateway)
        if hypervisor_hostname is not None:
            pulumi.set(__self__, "hypervisor_hostname", hypervisor_hostname)
        if hypervisor_ip is not None:
            pulumi.set(__self__, "hypervisor_ip", hypervisor_ip)
        if hypervisor_netmask is not None:
            pulumi.set(__self__, "hypervisor_netmask", hypervisor_netmask)
        if hypervisor_type is not None:
            pulumi.set(__self__, "hypervisor_type", hypervisor_type)
        if image_now is not None:
            pulumi.set(__self__, "image_now", image_now)
        if imaged_node_uuid is not None:
            pulumi.set(__self__, "imaged_node_uuid", imaged_node_uuid)
        if ipmi_gateway is not None:
            pulumi.set(__self__, "ipmi_gateway", ipmi_gateway)
        if ipmi_ip is not None:
            pulumi.set(__self__, "ipmi_ip", ipmi_ip)
        if ipmi_netmask is not None:
            pulumi.set(__self__, "ipmi_netmask", ipmi_netmask)
        if rdma_passthrough is not None:
            pulumi.set(__self__, "rdma_passthrough", rdma_passthrough)
        if use_existing_network_settings is not None:
            pulumi.set(__self__, "use_existing_network_settings", use_existing_network_settings)

    @property
    @pulumi.getter(name="cvmGateway")
    def cvm_gateway(self) -> Optional[str]:
        """
        Gateway of the cvm.
        """
        return pulumi.get(self, "cvm_gateway")

    @property
    @pulumi.getter(name="cvmIp")
    def cvm_ip(self) -> Optional[str]:
        """
        IP address to be set for the cvm on the node.
        """
        return pulumi.get(self, "cvm_ip")

    @property
    @pulumi.getter(name="cvmNetmask")
    def cvm_netmask(self) -> Optional[str]:
        """
        Netmask of the cvm.
        """
        return pulumi.get(self, "cvm_netmask")

    @property
    @pulumi.getter(name="cvmRamGb")
    def cvm_ram_gb(self) -> Optional[int]:
        """
        Amount of memory to be assigned for the cvm.
        """
        return pulumi.get(self, "cvm_ram_gb")

    @property
    @pulumi.getter(name="cvmVlanId")
    def cvm_vlan_id(self) -> Optional[int]:
        """
        Vlan tag of the cvm, if the cvm is on a vlan.
        """
        return pulumi.get(self, "cvm_vlan_id")

    @property
    @pulumi.getter(name="hardwareAttributesOverride")
    def hardware_attributes_override(self) -> Optional[Mapping[str, str]]:
        """
        Hardware attributes override json for the node.
        """
        return pulumi.get(self, "hardware_attributes_override")

    @property
    @pulumi.getter(name="hypervisorGateway")
    def hypervisor_gateway(self) -> Optional[str]:
        """
        Gateway of the hypervisor.
        """
        return pulumi.get(self, "hypervisor_gateway")

    @property
    @pulumi.getter(name="hypervisorHostname")
    def hypervisor_hostname(self) -> Optional[str]:
        """
        Name to be set for the hypervisor host.
        """
        return pulumi.get(self, "hypervisor_hostname")

    @property
    @pulumi.getter(name="hypervisorIp")
    def hypervisor_ip(self) -> Optional[str]:
        """
        IP address to be set for the hypervisor on the node.
        """
        return pulumi.get(self, "hypervisor_ip")

    @property
    @pulumi.getter(name="hypervisorNetmask")
    def hypervisor_netmask(self) -> Optional[str]:
        """
        Netmask of the hypervisor.
        """
        return pulumi.get(self, "hypervisor_netmask")

    @property
    @pulumi.getter(name="hypervisorType")
    def hypervisor_type(self) -> Optional[str]:
        """
        Type of hypervisor to be installed. Must be one of {kvm, esx, hyperv}.
        """
        return pulumi.get(self, "hypervisor_type")

    @property
    @pulumi.getter(name="imageNow")
    def image_now(self) -> Optional[bool]:
        """
        True, if the node should be imaged, False, otherwise.
        """
        return pulumi.get(self, "image_now")

    @property
    @pulumi.getter(name="imagedNodeUuid")
    def imaged_node_uuid(self) -> Optional[str]:
        """
        UUID of the node.
        """
        return pulumi.get(self, "imaged_node_uuid")

    @property
    @pulumi.getter(name="ipmiGateway")
    def ipmi_gateway(self) -> Optional[str]:
        """
        Gateway of the ipmi.
        """
        return pulumi.get(self, "ipmi_gateway")

    @property
    @pulumi.getter(name="ipmiIp")
    def ipmi_ip(self) -> Optional[str]:
        """
        IP address to be set for the ipmi of the node.
        """
        return pulumi.get(self, "ipmi_ip")

    @property
    @pulumi.getter(name="ipmiNetmask")
    def ipmi_netmask(self) -> Optional[str]:
        """
        Netmask of the ipmi.
        """
        return pulumi.get(self, "ipmi_netmask")

    @property
    @pulumi.getter(name="rdmaPassthrough")
    def rdma_passthrough(self) -> Optional[bool]:
        """
        Passthrough RDMA nic to CVM if possible, default to false.
        """
        return pulumi.get(self, "rdma_passthrough")

    @property
    @pulumi.getter(name="useExistingNetworkSettings")
    def use_existing_network_settings(self) -> Optional[bool]:
        """
        Decides whether to use the existing network settings for the node. If True, the existing network settings of the node will be used during cluster creation. If False, then client must provide new network settings. If all nodes are booted in phoenix, this field is, by default, considered to be False.
        """
        return pulumi.get(self, "use_existing_network_settings")


@pulumi.output_type
class FoundationImageNodesBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockId":
            suggest = "block_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationImageNodesBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationImageNodesBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationImageNodesBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nodes: Sequence['outputs.FoundationImageNodesBlockNode'],
                 block_id: Optional[str] = None):
        """
        :param str block_id: - Block ID.
        """
        pulumi.set(__self__, "nodes", nodes)
        if block_id is not None:
            pulumi.set(__self__, "block_id", block_id)

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.FoundationImageNodesBlockNode']:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="blockId")
    def block_id(self) -> Optional[str]:
        """
        - Block ID.
        """
        return pulumi.get(self, "block_id")


@pulumi.output_type
class FoundationImageNodesBlockNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hypervisorHostname":
            suggest = "hypervisor_hostname"
        elif key == "hypervisorIp":
            suggest = "hypervisor_ip"
        elif key == "nodePosition":
            suggest = "node_position"
        elif key == "bondLacpRate":
            suggest = "bond_lacp_rate"
        elif key == "bondMode":
            suggest = "bond_mode"
        elif key == "bondUplinks":
            suggest = "bond_uplinks"
        elif key == "clusterId":
            suggest = "cluster_id"
        elif key == "currentCvmVlanTag":
            suggest = "current_cvm_vlan_tag"
        elif key == "currentNetworkInterface":
            suggest = "current_network_interface"
        elif key == "cvmGbRam":
            suggest = "cvm_gb_ram"
        elif key == "cvmIp":
            suggest = "cvm_ip"
        elif key == "cvmNumVcpus":
            suggest = "cvm_num_vcpus"
        elif key == "deviceHint":
            suggest = "device_hint"
        elif key == "exludeBootSerial":
            suggest = "exlude_boot_serial"
        elif key == "imageDelay":
            suggest = "image_delay"
        elif key == "imageNow":
            suggest = "image_now"
        elif key == "imageSuccessful":
            suggest = "image_successful"
        elif key == "ipmiConfigureNow":
            suggest = "ipmi_configure_now"
        elif key == "ipmiGateway":
            suggest = "ipmi_gateway"
        elif key == "ipmiIp":
            suggest = "ipmi_ip"
        elif key == "ipmiMac":
            suggest = "ipmi_mac"
        elif key == "ipmiNetmask":
            suggest = "ipmi_netmask"
        elif key == "ipmiPassword":
            suggest = "ipmi_password"
        elif key == "ipmiUser":
            suggest = "ipmi_user"
        elif key == "ipv6Address":
            suggest = "ipv6_address"
        elif key == "ipv6Interface":
            suggest = "ipv6_interface"
        elif key == "mitigateLowBootSpace":
            suggest = "mitigate_low_boot_space"
        elif key == "nodeSerial":
            suggest = "node_serial"
        elif key == "rdmaMacAddr":
            suggest = "rdma_mac_addr"
        elif key == "rdmaPassthrough":
            suggest = "rdma_passthrough"
        elif key == "ucsmManagedMode":
            suggest = "ucsm_managed_mode"
        elif key == "ucsmNodeSerial":
            suggest = "ucsm_node_serial"
        elif key == "ucsmParams":
            suggest = "ucsm_params"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationImageNodesBlockNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationImageNodesBlockNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationImageNodesBlockNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hypervisor_hostname: str,
                 hypervisor_ip: str,
                 node_position: str,
                 bond_lacp_rate: Optional[str] = None,
                 bond_mode: Optional[str] = None,
                 bond_uplinks: Optional[str] = None,
                 cluster_id: Optional[str] = None,
                 current_cvm_vlan_tag: Optional[int] = None,
                 current_network_interface: Optional[str] = None,
                 cvm_gb_ram: Optional[int] = None,
                 cvm_ip: Optional[str] = None,
                 cvm_num_vcpus: Optional[int] = None,
                 device_hint: Optional[str] = None,
                 exlude_boot_serial: Optional[str] = None,
                 hypervisor: Optional[str] = None,
                 image_delay: Optional[int] = None,
                 image_now: Optional[bool] = None,
                 image_successful: Optional[bool] = None,
                 ipmi_configure_now: Optional[bool] = None,
                 ipmi_gateway: Optional[str] = None,
                 ipmi_ip: Optional[str] = None,
                 ipmi_mac: Optional[str] = None,
                 ipmi_netmask: Optional[str] = None,
                 ipmi_password: Optional[str] = None,
                 ipmi_user: Optional[str] = None,
                 ipv6_address: Optional[str] = None,
                 ipv6_interface: Optional[str] = None,
                 mitigate_low_boot_space: Optional[bool] = None,
                 node_serial: Optional[str] = None,
                 rdma_mac_addr: Optional[str] = None,
                 rdma_passthrough: Optional[bool] = None,
                 ucsm_managed_mode: Optional[str] = None,
                 ucsm_node_serial: Optional[str] = None,
                 ucsm_params: Optional['outputs.FoundationImageNodesBlockNodeUcsmParams'] = None,
                 vswitches: Optional[Sequence['outputs.FoundationImageNodesBlockNodeVswitch']] = None):
        """
        :param str hypervisor_hostname: - (Required) Hypervisor Hostname.
        :param str hypervisor_ip: - (Required) Hypervisor IP address.
        :param str node_position: - (Required) Position of the node in the block.
        :param str bond_lacp_rate: - (Required if node is lacp configured) slow or fast if lacp if being used at the switch
        :param str bond_mode: - (Required if node is capable) dynamic if using LACP, static for LAG
        :param str bond_uplinks: - MAC Addresses of NICs in a team/bond
        :param str cluster_id: - ID of cluster.
        :param int current_cvm_vlan_tag: - Current CVM vlan tag. 0 Value with remove vlan tag.
        :param str current_network_interface: - CVM current network interface.
        :param int cvm_gb_ram: - RAM capacity of CVM in GB.
        :param int cvm_num_vcpus: - Number of CVM vcpus.
        :param str device_hint: - use "vm_installer" to enable CVM imaging from standalone.
        :param str exlude_boot_serial: - serial of boot device to be excluded (used by NX G6 platforms)
        :param int image_delay: - Imaging delay.
        :param bool image_now: - (Optional, Default = true) If the node should be imaged now.
        :param bool ipmi_configure_now: - Whether IPMI should be configured.
        :param str ipmi_gateway: - (Required incase using IPMI based imaging either here or outside blocks) IPMI gateway for this node
        :param str ipmi_ip: - (Required) IPMI IP address.
        :param str ipmi_mac: - IPMI MAC address.
        :param str ipmi_netmask: - (Required incase using IPMI based imaging either here or outside blocks) IPMI netmask for this node
        :param str ipmi_password: - (Required incase using IPMI based imaging either here or outside blocks) IPMI username
        :param str ipmi_user: - (Required incase using IPMI based imaging either here or outside blocks) IPMI password
        :param str ipv6_address: - (Required when device_hint = "vm_installer" for imaging using node's existing cvm for imaging) IPV6 address.
        :param str ipv6_interface: - (Required when device_hint = "vm_installer" for imaging using node's existing cvm for imaging) ipv6 interface.
        :param bool mitigate_low_boot_space: - relocate bootbank files to make space for phoenix files.
        :param str node_serial: - serial number of the node.
        :param str rdma_mac_addr: - mac address of nic to be used for rdma
        :param bool rdma_passthrough: - (Required if node is capable) passthru RDMA nic to CVM if possible, default to false
        :param str ucsm_managed_mode: - UCSM Managed mode.
        :param str ucsm_node_serial: - UCSM node serial.
        :param 'FoundationImageNodesBlockNodeUcsmParamsArgs' ucsm_params: - Object of UCSM parameters.
               * `ucsm_params.native_vlan` :- If the vlan is native.
               * `ucsm_params.keep_ucsm_settings` :- Whether UCSM settings should be kept.
               * `ucsm_params.mac_pool` :- Mac address pool.
               * `ucsm_params.vlan_name` :- Name of vlan.
        """
        pulumi.set(__self__, "hypervisor_hostname", hypervisor_hostname)
        pulumi.set(__self__, "hypervisor_ip", hypervisor_ip)
        pulumi.set(__self__, "node_position", node_position)
        if bond_lacp_rate is not None:
            pulumi.set(__self__, "bond_lacp_rate", bond_lacp_rate)
        if bond_mode is not None:
            pulumi.set(__self__, "bond_mode", bond_mode)
        if bond_uplinks is not None:
            pulumi.set(__self__, "bond_uplinks", bond_uplinks)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if current_cvm_vlan_tag is not None:
            pulumi.set(__self__, "current_cvm_vlan_tag", current_cvm_vlan_tag)
        if current_network_interface is not None:
            pulumi.set(__self__, "current_network_interface", current_network_interface)
        if cvm_gb_ram is not None:
            pulumi.set(__self__, "cvm_gb_ram", cvm_gb_ram)
        if cvm_ip is not None:
            pulumi.set(__self__, "cvm_ip", cvm_ip)
        if cvm_num_vcpus is not None:
            pulumi.set(__self__, "cvm_num_vcpus", cvm_num_vcpus)
        if device_hint is not None:
            pulumi.set(__self__, "device_hint", device_hint)
        if exlude_boot_serial is not None:
            pulumi.set(__self__, "exlude_boot_serial", exlude_boot_serial)
        if hypervisor is not None:
            pulumi.set(__self__, "hypervisor", hypervisor)
        if image_delay is not None:
            pulumi.set(__self__, "image_delay", image_delay)
        if image_now is not None:
            pulumi.set(__self__, "image_now", image_now)
        if image_successful is not None:
            pulumi.set(__self__, "image_successful", image_successful)
        if ipmi_configure_now is not None:
            pulumi.set(__self__, "ipmi_configure_now", ipmi_configure_now)
        if ipmi_gateway is not None:
            pulumi.set(__self__, "ipmi_gateway", ipmi_gateway)
        if ipmi_ip is not None:
            pulumi.set(__self__, "ipmi_ip", ipmi_ip)
        if ipmi_mac is not None:
            pulumi.set(__self__, "ipmi_mac", ipmi_mac)
        if ipmi_netmask is not None:
            pulumi.set(__self__, "ipmi_netmask", ipmi_netmask)
        if ipmi_password is not None:
            pulumi.set(__self__, "ipmi_password", ipmi_password)
        if ipmi_user is not None:
            pulumi.set(__self__, "ipmi_user", ipmi_user)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_interface is not None:
            pulumi.set(__self__, "ipv6_interface", ipv6_interface)
        if mitigate_low_boot_space is not None:
            pulumi.set(__self__, "mitigate_low_boot_space", mitigate_low_boot_space)
        if node_serial is not None:
            pulumi.set(__self__, "node_serial", node_serial)
        if rdma_mac_addr is not None:
            pulumi.set(__self__, "rdma_mac_addr", rdma_mac_addr)
        if rdma_passthrough is not None:
            pulumi.set(__self__, "rdma_passthrough", rdma_passthrough)
        if ucsm_managed_mode is not None:
            pulumi.set(__self__, "ucsm_managed_mode", ucsm_managed_mode)
        if ucsm_node_serial is not None:
            pulumi.set(__self__, "ucsm_node_serial", ucsm_node_serial)
        if ucsm_params is not None:
            pulumi.set(__self__, "ucsm_params", ucsm_params)
        if vswitches is not None:
            pulumi.set(__self__, "vswitches", vswitches)

    @property
    @pulumi.getter(name="hypervisorHostname")
    def hypervisor_hostname(self) -> str:
        """
        - (Required) Hypervisor Hostname.
        """
        return pulumi.get(self, "hypervisor_hostname")

    @property
    @pulumi.getter(name="hypervisorIp")
    def hypervisor_ip(self) -> str:
        """
        - (Required) Hypervisor IP address.
        """
        return pulumi.get(self, "hypervisor_ip")

    @property
    @pulumi.getter(name="nodePosition")
    def node_position(self) -> str:
        """
        - (Required) Position of the node in the block.
        """
        return pulumi.get(self, "node_position")

    @property
    @pulumi.getter(name="bondLacpRate")
    def bond_lacp_rate(self) -> Optional[str]:
        """
        - (Required if node is lacp configured) slow or fast if lacp if being used at the switch
        """
        return pulumi.get(self, "bond_lacp_rate")

    @property
    @pulumi.getter(name="bondMode")
    def bond_mode(self) -> Optional[str]:
        """
        - (Required if node is capable) dynamic if using LACP, static for LAG
        """
        return pulumi.get(self, "bond_mode")

    @property
    @pulumi.getter(name="bondUplinks")
    def bond_uplinks(self) -> Optional[str]:
        """
        - MAC Addresses of NICs in a team/bond
        """
        return pulumi.get(self, "bond_uplinks")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        """
        - ID of cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="currentCvmVlanTag")
    def current_cvm_vlan_tag(self) -> Optional[int]:
        """
        - Current CVM vlan tag. 0 Value with remove vlan tag.
        """
        return pulumi.get(self, "current_cvm_vlan_tag")

    @property
    @pulumi.getter(name="currentNetworkInterface")
    def current_network_interface(self) -> Optional[str]:
        """
        - CVM current network interface.
        """
        return pulumi.get(self, "current_network_interface")

    @property
    @pulumi.getter(name="cvmGbRam")
    def cvm_gb_ram(self) -> Optional[int]:
        """
        - RAM capacity of CVM in GB.
        """
        return pulumi.get(self, "cvm_gb_ram")

    @property
    @pulumi.getter(name="cvmIp")
    def cvm_ip(self) -> Optional[str]:
        return pulumi.get(self, "cvm_ip")

    @property
    @pulumi.getter(name="cvmNumVcpus")
    def cvm_num_vcpus(self) -> Optional[int]:
        """
        - Number of CVM vcpus.
        """
        return pulumi.get(self, "cvm_num_vcpus")

    @property
    @pulumi.getter(name="deviceHint")
    def device_hint(self) -> Optional[str]:
        """
        - use "vm_installer" to enable CVM imaging from standalone.
        """
        return pulumi.get(self, "device_hint")

    @property
    @pulumi.getter(name="exludeBootSerial")
    def exlude_boot_serial(self) -> Optional[str]:
        """
        - serial of boot device to be excluded (used by NX G6 platforms)
        """
        return pulumi.get(self, "exlude_boot_serial")

    @property
    @pulumi.getter
    def hypervisor(self) -> Optional[str]:
        return pulumi.get(self, "hypervisor")

    @property
    @pulumi.getter(name="imageDelay")
    def image_delay(self) -> Optional[int]:
        """
        - Imaging delay.
        """
        return pulumi.get(self, "image_delay")

    @property
    @pulumi.getter(name="imageNow")
    def image_now(self) -> Optional[bool]:
        """
        - (Optional, Default = true) If the node should be imaged now.
        """
        return pulumi.get(self, "image_now")

    @property
    @pulumi.getter(name="imageSuccessful")
    def image_successful(self) -> Optional[bool]:
        return pulumi.get(self, "image_successful")

    @property
    @pulumi.getter(name="ipmiConfigureNow")
    def ipmi_configure_now(self) -> Optional[bool]:
        """
        - Whether IPMI should be configured.
        """
        return pulumi.get(self, "ipmi_configure_now")

    @property
    @pulumi.getter(name="ipmiGateway")
    def ipmi_gateway(self) -> Optional[str]:
        """
        - (Required incase using IPMI based imaging either here or outside blocks) IPMI gateway for this node
        """
        return pulumi.get(self, "ipmi_gateway")

    @property
    @pulumi.getter(name="ipmiIp")
    def ipmi_ip(self) -> Optional[str]:
        """
        - (Required) IPMI IP address.
        """
        return pulumi.get(self, "ipmi_ip")

    @property
    @pulumi.getter(name="ipmiMac")
    def ipmi_mac(self) -> Optional[str]:
        """
        - IPMI MAC address.
        """
        return pulumi.get(self, "ipmi_mac")

    @property
    @pulumi.getter(name="ipmiNetmask")
    def ipmi_netmask(self) -> Optional[str]:
        """
        - (Required incase using IPMI based imaging either here or outside blocks) IPMI netmask for this node
        """
        return pulumi.get(self, "ipmi_netmask")

    @property
    @pulumi.getter(name="ipmiPassword")
    def ipmi_password(self) -> Optional[str]:
        """
        - (Required incase using IPMI based imaging either here or outside blocks) IPMI username
        """
        return pulumi.get(self, "ipmi_password")

    @property
    @pulumi.getter(name="ipmiUser")
    def ipmi_user(self) -> Optional[str]:
        """
        - (Required incase using IPMI based imaging either here or outside blocks) IPMI password
        """
        return pulumi.get(self, "ipmi_user")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[str]:
        """
        - (Required when device_hint = "vm_installer" for imaging using node's existing cvm for imaging) IPV6 address.
        """
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="ipv6Interface")
    def ipv6_interface(self) -> Optional[str]:
        """
        - (Required when device_hint = "vm_installer" for imaging using node's existing cvm for imaging) ipv6 interface.
        """
        return pulumi.get(self, "ipv6_interface")

    @property
    @pulumi.getter(name="mitigateLowBootSpace")
    def mitigate_low_boot_space(self) -> Optional[bool]:
        """
        - relocate bootbank files to make space for phoenix files.
        """
        return pulumi.get(self, "mitigate_low_boot_space")

    @property
    @pulumi.getter(name="nodeSerial")
    def node_serial(self) -> Optional[str]:
        """
        - serial number of the node.
        """
        return pulumi.get(self, "node_serial")

    @property
    @pulumi.getter(name="rdmaMacAddr")
    def rdma_mac_addr(self) -> Optional[str]:
        """
        - mac address of nic to be used for rdma
        """
        return pulumi.get(self, "rdma_mac_addr")

    @property
    @pulumi.getter(name="rdmaPassthrough")
    def rdma_passthrough(self) -> Optional[bool]:
        """
        - (Required if node is capable) passthru RDMA nic to CVM if possible, default to false
        """
        return pulumi.get(self, "rdma_passthrough")

    @property
    @pulumi.getter(name="ucsmManagedMode")
    def ucsm_managed_mode(self) -> Optional[str]:
        """
        - UCSM Managed mode.
        """
        return pulumi.get(self, "ucsm_managed_mode")

    @property
    @pulumi.getter(name="ucsmNodeSerial")
    def ucsm_node_serial(self) -> Optional[str]:
        """
        - UCSM node serial.
        """
        return pulumi.get(self, "ucsm_node_serial")

    @property
    @pulumi.getter(name="ucsmParams")
    def ucsm_params(self) -> Optional['outputs.FoundationImageNodesBlockNodeUcsmParams']:
        """
        - Object of UCSM parameters.
        * `ucsm_params.native_vlan` :- If the vlan is native.
        * `ucsm_params.keep_ucsm_settings` :- Whether UCSM settings should be kept.
        * `ucsm_params.mac_pool` :- Mac address pool.
        * `ucsm_params.vlan_name` :- Name of vlan.
        """
        return pulumi.get(self, "ucsm_params")

    @property
    @pulumi.getter
    def vswitches(self) -> Optional[Sequence['outputs.FoundationImageNodesBlockNodeVswitch']]:
        return pulumi.get(self, "vswitches")


@pulumi.output_type
class FoundationImageNodesBlockNodeUcsmParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keepUcsmSettings":
            suggest = "keep_ucsm_settings"
        elif key == "macPool":
            suggest = "mac_pool"
        elif key == "nativeVlan":
            suggest = "native_vlan"
        elif key == "vlanName":
            suggest = "vlan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationImageNodesBlockNodeUcsmParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationImageNodesBlockNodeUcsmParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationImageNodesBlockNodeUcsmParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keep_ucsm_settings: Optional[bool] = None,
                 mac_pool: Optional[str] = None,
                 native_vlan: Optional[bool] = None,
                 vlan_name: Optional[str] = None):
        if keep_ucsm_settings is not None:
            pulumi.set(__self__, "keep_ucsm_settings", keep_ucsm_settings)
        if mac_pool is not None:
            pulumi.set(__self__, "mac_pool", mac_pool)
        if native_vlan is not None:
            pulumi.set(__self__, "native_vlan", native_vlan)
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="keepUcsmSettings")
    def keep_ucsm_settings(self) -> Optional[bool]:
        return pulumi.get(self, "keep_ucsm_settings")

    @property
    @pulumi.getter(name="macPool")
    def mac_pool(self) -> Optional[str]:
        return pulumi.get(self, "mac_pool")

    @property
    @pulumi.getter(name="nativeVlan")
    def native_vlan(self) -> Optional[bool]:
        return pulumi.get(self, "native_vlan")

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[str]:
        return pulumi.get(self, "vlan_name")


@pulumi.output_type
class FoundationImageNodesBlockNodeVswitch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bondMode":
            suggest = "bond_mode"
        elif key == "otherConfigs":
            suggest = "other_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationImageNodesBlockNodeVswitch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationImageNodesBlockNodeVswitch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationImageNodesBlockNodeVswitch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bond_mode: Optional[str] = None,
                 lacp: Optional[str] = None,
                 mtu: Optional[int] = None,
                 name: Optional[str] = None,
                 other_configs: Optional[Sequence[str]] = None,
                 uplinks: Optional[Sequence[str]] = None):
        """
        :param str bond_mode: - (Required if node is capable) dynamic if using LACP, static for LAG
        """
        if bond_mode is not None:
            pulumi.set(__self__, "bond_mode", bond_mode)
        if lacp is not None:
            pulumi.set(__self__, "lacp", lacp)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if other_configs is not None:
            pulumi.set(__self__, "other_configs", other_configs)
        if uplinks is not None:
            pulumi.set(__self__, "uplinks", uplinks)

    @property
    @pulumi.getter(name="bondMode")
    def bond_mode(self) -> Optional[str]:
        """
        - (Required if node is capable) dynamic if using LACP, static for LAG
        """
        return pulumi.get(self, "bond_mode")

    @property
    @pulumi.getter
    def lacp(self) -> Optional[str]:
        return pulumi.get(self, "lacp")

    @property
    @pulumi.getter
    def mtu(self) -> Optional[int]:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="otherConfigs")
    def other_configs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "other_configs")

    @property
    @pulumi.getter
    def uplinks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "uplinks")


@pulumi.output_type
class FoundationImageNodesCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterMembers":
            suggest = "cluster_members"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "redundancyFactor":
            suggest = "redundancy_factor"
        elif key == "backplaneNetmask":
            suggest = "backplane_netmask"
        elif key == "backplaneSubnet":
            suggest = "backplane_subnet"
        elif key == "backplaneVlan":
            suggest = "backplane_vlan"
        elif key == "clusterExternalIp":
            suggest = "cluster_external_ip"
        elif key == "clusterInitNow":
            suggest = "cluster_init_now"
        elif key == "clusterInitSuccessful":
            suggest = "cluster_init_successful"
        elif key == "cvmDnsServers":
            suggest = "cvm_dns_servers"
        elif key == "cvmNtpServers":
            suggest = "cvm_ntp_servers"
        elif key == "enableNs":
            suggest = "enable_ns"
        elif key == "hypervisorNtpServers":
            suggest = "hypervisor_ntp_servers"
        elif key == "singleNodeCluster":
            suggest = "single_node_cluster"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationImageNodesCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationImageNodesCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationImageNodesCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_members: Sequence[str],
                 cluster_name: str,
                 redundancy_factor: int,
                 backplane_netmask: Optional[str] = None,
                 backplane_subnet: Optional[str] = None,
                 backplane_vlan: Optional[str] = None,
                 cluster_external_ip: Optional[str] = None,
                 cluster_init_now: Optional[bool] = None,
                 cluster_init_successful: Optional[bool] = None,
                 cvm_dns_servers: Optional[str] = None,
                 cvm_ntp_servers: Optional[str] = None,
                 enable_ns: Optional[bool] = None,
                 hypervisor_ntp_servers: Optional[str] = None,
                 single_node_cluster: Optional[bool] = None,
                 timezone: Optional[str] = None):
        """
        :param Sequence[str] cluster_members: - (Required) Members in the cluster.
        :param str cluster_name: - (Required) Name of the cluster.
        :param int redundancy_factor: - (Required) Cluster Redundancy Factor.
        :param str backplane_netmask: - Backplane netmask.
        :param str backplane_subnet: - Backplane subnet address.
        :param str backplane_vlan: - Backplane vlan.
        :param str cluster_external_ip: - External IP of the cluster.
        :param bool cluster_init_now: - (Optional, Default = true) If cluster should be created.
        :param bool cluster_init_successful: - If cluster initialization was successful.
        :param str cvm_dns_servers: - DNS servers of CVM.
        :param str cvm_ntp_servers: - NTP servers of CVM.
        :param bool enable_ns: - If network segmentation should be enabled.
        :param str hypervisor_ntp_servers: - NTP servers of hypervisor.
        :param bool single_node_cluster: - If it is a single node cluster.
        :param str timezone: - Set timezone for every CVM
        """
        pulumi.set(__self__, "cluster_members", cluster_members)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "redundancy_factor", redundancy_factor)
        if backplane_netmask is not None:
            pulumi.set(__self__, "backplane_netmask", backplane_netmask)
        if backplane_subnet is not None:
            pulumi.set(__self__, "backplane_subnet", backplane_subnet)
        if backplane_vlan is not None:
            pulumi.set(__self__, "backplane_vlan", backplane_vlan)
        if cluster_external_ip is not None:
            pulumi.set(__self__, "cluster_external_ip", cluster_external_ip)
        if cluster_init_now is not None:
            pulumi.set(__self__, "cluster_init_now", cluster_init_now)
        if cluster_init_successful is not None:
            pulumi.set(__self__, "cluster_init_successful", cluster_init_successful)
        if cvm_dns_servers is not None:
            pulumi.set(__self__, "cvm_dns_servers", cvm_dns_servers)
        if cvm_ntp_servers is not None:
            pulumi.set(__self__, "cvm_ntp_servers", cvm_ntp_servers)
        if enable_ns is not None:
            pulumi.set(__self__, "enable_ns", enable_ns)
        if hypervisor_ntp_servers is not None:
            pulumi.set(__self__, "hypervisor_ntp_servers", hypervisor_ntp_servers)
        if single_node_cluster is not None:
            pulumi.set(__self__, "single_node_cluster", single_node_cluster)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="clusterMembers")
    def cluster_members(self) -> Sequence[str]:
        """
        - (Required) Members in the cluster.
        """
        return pulumi.get(self, "cluster_members")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        - (Required) Name of the cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="redundancyFactor")
    def redundancy_factor(self) -> int:
        """
        - (Required) Cluster Redundancy Factor.
        """
        return pulumi.get(self, "redundancy_factor")

    @property
    @pulumi.getter(name="backplaneNetmask")
    def backplane_netmask(self) -> Optional[str]:
        """
        - Backplane netmask.
        """
        return pulumi.get(self, "backplane_netmask")

    @property
    @pulumi.getter(name="backplaneSubnet")
    def backplane_subnet(self) -> Optional[str]:
        """
        - Backplane subnet address.
        """
        return pulumi.get(self, "backplane_subnet")

    @property
    @pulumi.getter(name="backplaneVlan")
    def backplane_vlan(self) -> Optional[str]:
        """
        - Backplane vlan.
        """
        return pulumi.get(self, "backplane_vlan")

    @property
    @pulumi.getter(name="clusterExternalIp")
    def cluster_external_ip(self) -> Optional[str]:
        """
        - External IP of the cluster.
        """
        return pulumi.get(self, "cluster_external_ip")

    @property
    @pulumi.getter(name="clusterInitNow")
    def cluster_init_now(self) -> Optional[bool]:
        """
        - (Optional, Default = true) If cluster should be created.
        """
        return pulumi.get(self, "cluster_init_now")

    @property
    @pulumi.getter(name="clusterInitSuccessful")
    def cluster_init_successful(self) -> Optional[bool]:
        """
        - If cluster initialization was successful.
        """
        return pulumi.get(self, "cluster_init_successful")

    @property
    @pulumi.getter(name="cvmDnsServers")
    def cvm_dns_servers(self) -> Optional[str]:
        """
        - DNS servers of CVM.
        """
        return pulumi.get(self, "cvm_dns_servers")

    @property
    @pulumi.getter(name="cvmNtpServers")
    def cvm_ntp_servers(self) -> Optional[str]:
        """
        - NTP servers of CVM.
        """
        return pulumi.get(self, "cvm_ntp_servers")

    @property
    @pulumi.getter(name="enableNs")
    def enable_ns(self) -> Optional[bool]:
        """
        - If network segmentation should be enabled.
        """
        return pulumi.get(self, "enable_ns")

    @property
    @pulumi.getter(name="hypervisorNtpServers")
    def hypervisor_ntp_servers(self) -> Optional[str]:
        """
        - NTP servers of hypervisor.
        """
        return pulumi.get(self, "hypervisor_ntp_servers")

    @property
    @pulumi.getter(name="singleNodeCluster")
    def single_node_cluster(self) -> Optional[bool]:
        """
        - If it is a single node cluster.
        """
        return pulumi.get(self, "single_node_cluster")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        - Set timezone for every CVM
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class FoundationImageNodesClusterUrl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterUrl":
            suggest = "cluster_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationImageNodesClusterUrl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationImageNodesClusterUrl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationImageNodesClusterUrl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_name: Optional[str] = None,
                 cluster_url: Optional[str] = None):
        """
        :param str cluster_name: - (Required) Name of the cluster.
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        """
        - (Required) Name of the cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")


@pulumi.output_type
class FoundationImageNodesEosMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountNames":
            suggest = "account_names"
        elif key == "configId":
            suggest = "config_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationImageNodesEosMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationImageNodesEosMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationImageNodesEosMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_names: Optional[Sequence[str]] = None,
                 config_id: Optional[str] = None,
                 email: Optional[str] = None):
        """
        :param Sequence[str] account_names: - arrya of account names
        :param str config_id: - Id of the Eos config uploaded in foundation GUI.
        :param str email: - Email address of the user who downloaded Eos config.
        """
        if account_names is not None:
            pulumi.set(__self__, "account_names", account_names)
        if config_id is not None:
            pulumi.set(__self__, "config_id", config_id)
        if email is not None:
            pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter(name="accountNames")
    def account_names(self) -> Optional[Sequence[str]]:
        """
        - arrya of account names
        """
        return pulumi.get(self, "account_names")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[str]:
        """
        - Id of the Eos config uploaded in foundation GUI.
        """
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        - Email address of the user who downloaded Eos config.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class FoundationImageNodesFcSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fcMetadata":
            suggest = "fc_metadata"
        elif key == "foundationCentral":
            suggest = "foundation_central"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationImageNodesFcSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationImageNodesFcSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationImageNodesFcSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fc_metadata: 'outputs.FoundationImageNodesFcSettingsFcMetadata',
                 foundation_central: bool):
        """
        :param 'FoundationImageNodesFcSettingsFcMetadataArgs' fc_metadata: - Foundation Central metadata which will be transferred to the newly imaged node.
               * `fc_metadata.fc_ip` :- IP address of foundation central.
               * `fc_metadata.api_key` :- api_key which the node uses to register itself with foundation central.
        :param bool foundation_central: - If this attribute is set to True, FC workflow will be invoked.
        """
        pulumi.set(__self__, "fc_metadata", fc_metadata)
        pulumi.set(__self__, "foundation_central", foundation_central)

    @property
    @pulumi.getter(name="fcMetadata")
    def fc_metadata(self) -> 'outputs.FoundationImageNodesFcSettingsFcMetadata':
        """
        - Foundation Central metadata which will be transferred to the newly imaged node.
        * `fc_metadata.fc_ip` :- IP address of foundation central.
        * `fc_metadata.api_key` :- api_key which the node uses to register itself with foundation central.
        """
        return pulumi.get(self, "fc_metadata")

    @property
    @pulumi.getter(name="foundationCentral")
    def foundation_central(self) -> bool:
        """
        - If this attribute is set to True, FC workflow will be invoked.
        """
        return pulumi.get(self, "foundation_central")


@pulumi.output_type
class FoundationImageNodesFcSettingsFcMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "fcIp":
            suggest = "fc_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationImageNodesFcSettingsFcMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationImageNodesFcSettingsFcMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationImageNodesFcSettingsFcMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 fc_ip: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "fc_ip", fc_ip)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="fcIp")
    def fc_ip(self) -> str:
        return pulumi.get(self, "fc_ip")


@pulumi.output_type
class FoundationImageNodesHypervisorIso(dict):
    def __init__(__self__, *,
                 esx: Optional['outputs.FoundationImageNodesHypervisorIsoEsx'] = None,
                 hyperv: Optional['outputs.FoundationImageNodesHypervisorIsoHyperv'] = None,
                 kvm: Optional['outputs.FoundationImageNodesHypervisorIsoKvm'] = None,
                 xen: Optional['outputs.FoundationImageNodesHypervisorIsoXen'] = None):
        """
        :param 'FoundationImageNodesHypervisorIsoEsxArgs' esx: - Details of hypervisor ISO of type esx.
        :param 'FoundationImageNodesHypervisorIsoHypervArgs' hyperv: - Details of hypervisor ISO of type hyperv.
        :param 'FoundationImageNodesHypervisorIsoKvmArgs' kvm: - Details of hypervisor ISO of type kvm.
        :param 'FoundationImageNodesHypervisorIsoXenArgs' xen: - Details of hypervisor ISO of type xen.
        """
        if esx is not None:
            pulumi.set(__self__, "esx", esx)
        if hyperv is not None:
            pulumi.set(__self__, "hyperv", hyperv)
        if kvm is not None:
            pulumi.set(__self__, "kvm", kvm)
        if xen is not None:
            pulumi.set(__self__, "xen", xen)

    @property
    @pulumi.getter
    def esx(self) -> Optional['outputs.FoundationImageNodesHypervisorIsoEsx']:
        """
        - Details of hypervisor ISO of type esx.
        """
        return pulumi.get(self, "esx")

    @property
    @pulumi.getter
    def hyperv(self) -> Optional['outputs.FoundationImageNodesHypervisorIsoHyperv']:
        """
        - Details of hypervisor ISO of type hyperv.
        """
        return pulumi.get(self, "hyperv")

    @property
    @pulumi.getter
    def kvm(self) -> Optional['outputs.FoundationImageNodesHypervisorIsoKvm']:
        """
        - Details of hypervisor ISO of type kvm.
        """
        return pulumi.get(self, "kvm")

    @property
    @pulumi.getter
    def xen(self) -> Optional['outputs.FoundationImageNodesHypervisorIsoXen']:
        """
        - Details of hypervisor ISO of type xen.
        """
        return pulumi.get(self, "xen")


@pulumi.output_type
class FoundationImageNodesHypervisorIsoEsx(dict):
    def __init__(__self__, *,
                 checksum: str,
                 filename: str):
        """
        :param str checksum: - (Required) Filename of hypervisor ISO.
        :param str filename: - (Required) Checksum for ISO file.
        """
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def checksum(self) -> str:
        """
        - (Required) Filename of hypervisor ISO.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def filename(self) -> str:
        """
        - (Required) Checksum for ISO file.
        """
        return pulumi.get(self, "filename")


@pulumi.output_type
class FoundationImageNodesHypervisorIsoHyperv(dict):
    def __init__(__self__, *,
                 checksum: str,
                 filename: str):
        """
        :param str checksum: - (Required) Filename of hypervisor ISO.
        :param str filename: - (Required) Checksum for ISO file.
        """
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def checksum(self) -> str:
        """
        - (Required) Filename of hypervisor ISO.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def filename(self) -> str:
        """
        - (Required) Checksum for ISO file.
        """
        return pulumi.get(self, "filename")


@pulumi.output_type
class FoundationImageNodesHypervisorIsoKvm(dict):
    def __init__(__self__, *,
                 checksum: str,
                 filename: str):
        """
        :param str checksum: - (Required) Filename of hypervisor ISO.
        :param str filename: - (Required) Checksum for ISO file.
        """
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def checksum(self) -> str:
        """
        - (Required) Filename of hypervisor ISO.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def filename(self) -> str:
        """
        - (Required) Checksum for ISO file.
        """
        return pulumi.get(self, "filename")


@pulumi.output_type
class FoundationImageNodesHypervisorIsoXen(dict):
    def __init__(__self__, *,
                 checksum: str,
                 filename: str):
        """
        :param str checksum: - (Required) Filename of hypervisor ISO.
        :param str filename: - (Required) Checksum for ISO file.
        """
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def checksum(self) -> str:
        """
        - (Required) Filename of hypervisor ISO.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def filename(self) -> str:
        """
        - (Required) Checksum for ISO file.
        """
        return pulumi.get(self, "filename")


@pulumi.output_type
class FoundationImageNodesTests(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runNcc":
            suggest = "run_ncc"
        elif key == "runSyscheck":
            suggest = "run_syscheck"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationImageNodesTests. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationImageNodesTests.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationImageNodesTests.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 run_ncc: Optional[bool] = None,
                 run_syscheck: Optional[bool] = None):
        """
        :param bool run_ncc: - Whether NCC checks should run.
        :param bool run_syscheck: - Whether system checks should run.
        """
        if run_ncc is not None:
            pulumi.set(__self__, "run_ncc", run_ncc)
        if run_syscheck is not None:
            pulumi.set(__self__, "run_syscheck", run_syscheck)

    @property
    @pulumi.getter(name="runNcc")
    def run_ncc(self) -> Optional[bool]:
        """
        - Whether NCC checks should run.
        """
        return pulumi.get(self, "run_ncc")

    @property
    @pulumi.getter(name="runSyscheck")
    def run_syscheck(self) -> Optional[bool]:
        """
        - Whether system checks should run.
        """
        return pulumi.get(self, "run_syscheck")


@pulumi.output_type
class FoundationIpmiConfigBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockId":
            suggest = "block_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationIpmiConfigBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationIpmiConfigBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationIpmiConfigBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nodes: Sequence['outputs.FoundationIpmiConfigBlockNode'],
                 block_id: Optional[str] = None):
        """
        :param Sequence['FoundationIpmiConfigBlockNodeArgs'] nodes: - (Required) array of nodes for ipmi config.
        :param str block_id: - (Optional) Block Id
        """
        pulumi.set(__self__, "nodes", nodes)
        if block_id is not None:
            pulumi.set(__self__, "block_id", block_id)

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.FoundationIpmiConfigBlockNode']:
        """
        - (Required) array of nodes for ipmi config.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="blockId")
    def block_id(self) -> Optional[str]:
        """
        - (Optional) Block Id
        """
        return pulumi.get(self, "block_id")


@pulumi.output_type
class FoundationIpmiConfigBlockNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipmiConfigureNow":
            suggest = "ipmi_configure_now"
        elif key == "ipmiIp":
            suggest = "ipmi_ip"
        elif key == "ipmiMac":
            suggest = "ipmi_mac"
        elif key == "ipmiConfigureSuccessful":
            suggest = "ipmi_configure_successful"
        elif key == "ipmiMessage":
            suggest = "ipmi_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationIpmiConfigBlockNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationIpmiConfigBlockNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationIpmiConfigBlockNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipmi_configure_now: bool,
                 ipmi_ip: str,
                 ipmi_mac: str,
                 ipmi_configure_successful: Optional[bool] = None,
                 ipmi_message: Optional[str] = None):
        """
        :param bool ipmi_configure_now: - (Required) Whether IPMI should be configured. Should be kept true to configure
        :param str ipmi_ip: - IPMI IP address.
        :param str ipmi_mac: - (Required) IPMI mac address.
        :param bool ipmi_configure_successful: - Whether IPMI was successfully configured.
        :param str ipmi_message: - IPMI configuration status message if any.
        """
        pulumi.set(__self__, "ipmi_configure_now", ipmi_configure_now)
        pulumi.set(__self__, "ipmi_ip", ipmi_ip)
        pulumi.set(__self__, "ipmi_mac", ipmi_mac)
        if ipmi_configure_successful is not None:
            pulumi.set(__self__, "ipmi_configure_successful", ipmi_configure_successful)
        if ipmi_message is not None:
            pulumi.set(__self__, "ipmi_message", ipmi_message)

    @property
    @pulumi.getter(name="ipmiConfigureNow")
    def ipmi_configure_now(self) -> bool:
        """
        - (Required) Whether IPMI should be configured. Should be kept true to configure
        """
        return pulumi.get(self, "ipmi_configure_now")

    @property
    @pulumi.getter(name="ipmiIp")
    def ipmi_ip(self) -> str:
        """
        - IPMI IP address.
        """
        return pulumi.get(self, "ipmi_ip")

    @property
    @pulumi.getter(name="ipmiMac")
    def ipmi_mac(self) -> str:
        """
        - (Required) IPMI mac address.
        """
        return pulumi.get(self, "ipmi_mac")

    @property
    @pulumi.getter(name="ipmiConfigureSuccessful")
    def ipmi_configure_successful(self) -> Optional[bool]:
        """
        - Whether IPMI was successfully configured.
        """
        return pulumi.get(self, "ipmi_configure_successful")

    @property
    @pulumi.getter(name="ipmiMessage")
    def ipmi_message(self) -> Optional[str]:
        """
        - IPMI configuration status message if any.
        """
        return pulumi.get(self, "ipmi_message")


@pulumi.output_type
class ImageCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: - (Required) The name for the image.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the image.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ImageClusterReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the image.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the image.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ImageCurrentClusterReferenceList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the image.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the image.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class KarbonClusterActivePassiveConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalIpv4Address":
            suggest = "external_ipv4_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterActivePassiveConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterActivePassiveConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterActivePassiveConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_ipv4_address: str):
        pulumi.set(__self__, "external_ipv4_address", external_ipv4_address)

    @property
    @pulumi.getter(name="externalIpv4Address")
    def external_ipv4_address(self) -> str:
        return pulumi.get(self, "external_ipv4_address")


@pulumi.output_type
class KarbonClusterCniConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "calicoConfig":
            suggest = "calico_config"
        elif key == "flannelConfigs":
            suggest = "flannel_configs"
        elif key == "nodeCidrMaskSize":
            suggest = "node_cidr_mask_size"
        elif key == "podIpv4Cidr":
            suggest = "pod_ipv4_cidr"
        elif key == "serviceIpv4Cidr":
            suggest = "service_ipv4_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterCniConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterCniConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterCniConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 calico_config: Optional['outputs.KarbonClusterCniConfigCalicoConfig'] = None,
                 flannel_configs: Optional[Sequence['outputs.KarbonClusterCniConfigFlannelConfig']] = None,
                 node_cidr_mask_size: Optional[int] = None,
                 pod_ipv4_cidr: Optional[str] = None,
                 service_ipv4_cidr: Optional[str] = None):
        """
        :param 'KarbonClusterCniConfigCalicoConfigArgs' calico_config: - (Optional) Configuration of the calico CNI provider.
               * `calico_config.ip_pool_config`: - (Optional) List of IP pools to be configured/managed by calico.
               * `calico_config.ip_pool_config.cidr`: - (Optional) IP range to use for this pool, it should fall within pod cidr.
        :param Sequence['KarbonClusterCniConfigFlannelConfigArgs'] flannel_configs: - (Optional) Configuration of the flannel container network interface (CNI) provider.
        :param int node_cidr_mask_size: - (Optional) The size of the subnet from the pod_ipv4_cidr assigned to each host. A value of 24 would allow up to 255 pods per node.
        :param str pod_ipv4_cidr: - (Optional) CIDR for pods in the cluster.
        :param str service_ipv4_cidr: - (Optional) Classless inter-domain routing (CIDR) for k8s services in the cluster.
        """
        if calico_config is not None:
            pulumi.set(__self__, "calico_config", calico_config)
        if flannel_configs is not None:
            pulumi.set(__self__, "flannel_configs", flannel_configs)
        if node_cidr_mask_size is not None:
            pulumi.set(__self__, "node_cidr_mask_size", node_cidr_mask_size)
        if pod_ipv4_cidr is not None:
            pulumi.set(__self__, "pod_ipv4_cidr", pod_ipv4_cidr)
        if service_ipv4_cidr is not None:
            pulumi.set(__self__, "service_ipv4_cidr", service_ipv4_cidr)

    @property
    @pulumi.getter(name="calicoConfig")
    def calico_config(self) -> Optional['outputs.KarbonClusterCniConfigCalicoConfig']:
        """
        - (Optional) Configuration of the calico CNI provider.
        * `calico_config.ip_pool_config`: - (Optional) List of IP pools to be configured/managed by calico.
        * `calico_config.ip_pool_config.cidr`: - (Optional) IP range to use for this pool, it should fall within pod cidr.
        """
        return pulumi.get(self, "calico_config")

    @property
    @pulumi.getter(name="flannelConfigs")
    def flannel_configs(self) -> Optional[Sequence['outputs.KarbonClusterCniConfigFlannelConfig']]:
        """
        - (Optional) Configuration of the flannel container network interface (CNI) provider.
        """
        return pulumi.get(self, "flannel_configs")

    @property
    @pulumi.getter(name="nodeCidrMaskSize")
    def node_cidr_mask_size(self) -> Optional[int]:
        """
        - (Optional) The size of the subnet from the pod_ipv4_cidr assigned to each host. A value of 24 would allow up to 255 pods per node.
        """
        return pulumi.get(self, "node_cidr_mask_size")

    @property
    @pulumi.getter(name="podIpv4Cidr")
    def pod_ipv4_cidr(self) -> Optional[str]:
        """
        - (Optional) CIDR for pods in the cluster.
        """
        return pulumi.get(self, "pod_ipv4_cidr")

    @property
    @pulumi.getter(name="serviceIpv4Cidr")
    def service_ipv4_cidr(self) -> Optional[str]:
        """
        - (Optional) Classless inter-domain routing (CIDR) for k8s services in the cluster.
        """
        return pulumi.get(self, "service_ipv4_cidr")


@pulumi.output_type
class KarbonClusterCniConfigCalicoConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipPoolConfigs":
            suggest = "ip_pool_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterCniConfigCalicoConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterCniConfigCalicoConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterCniConfigCalicoConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_pool_configs: Optional[Sequence['outputs.KarbonClusterCniConfigCalicoConfigIpPoolConfig']] = None):
        if ip_pool_configs is not None:
            pulumi.set(__self__, "ip_pool_configs", ip_pool_configs)

    @property
    @pulumi.getter(name="ipPoolConfigs")
    def ip_pool_configs(self) -> Optional[Sequence['outputs.KarbonClusterCniConfigCalicoConfigIpPoolConfig']]:
        return pulumi.get(self, "ip_pool_configs")


@pulumi.output_type
class KarbonClusterCniConfigCalicoConfigIpPoolConfig(dict):
    def __init__(__self__, *,
                 cidr: Optional[str] = None):
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[str]:
        return pulumi.get(self, "cidr")


@pulumi.output_type
class KarbonClusterCniConfigFlannelConfig(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class KarbonClusterEtcdNodePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeOsVersion":
            suggest = "node_os_version"
        elif key == "numInstances":
            suggest = "num_instances"
        elif key == "ahvConfig":
            suggest = "ahv_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterEtcdNodePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterEtcdNodePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterEtcdNodePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_os_version: str,
                 num_instances: int,
                 ahv_config: Optional['outputs.KarbonClusterEtcdNodePoolAhvConfig'] = None,
                 name: Optional[str] = None,
                 nodes: Optional[Sequence['outputs.KarbonClusterEtcdNodePoolNode']] = None):
        """
        :param str node_os_version: - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        :param int num_instances: - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        :param 'KarbonClusterEtcdNodePoolAhvConfigArgs' ahv_config: - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
               * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
               * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
               * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
               * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
               * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        :param str name: - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
        :param Sequence['KarbonClusterEtcdNodePoolNodeArgs'] nodes: - List of the deployed nodes in the node pool.
               * `nodes.hostname`: - Hostname of the deployed node.
               * `nodes.ipv4_address`: - IP of the deployed node.
        """
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "num_instances", num_instances)
        if ahv_config is not None:
            pulumi.set(__self__, "ahv_config", ahv_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> str:
        """
        - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "node_os_version")

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> int:
        """
        - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        """
        return pulumi.get(self, "num_instances")

    @property
    @pulumi.getter(name="ahvConfig")
    def ahv_config(self) -> Optional['outputs.KarbonClusterEtcdNodePoolAhvConfig']:
        """
        - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
        * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
        * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
        * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
        * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
        * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "ahv_config")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.KarbonClusterEtcdNodePoolNode']]:
        """
        - List of the deployed nodes in the node pool.
        * `nodes.hostname`: - Hostname of the deployed node.
        * `nodes.ipv4_address`: - IP of the deployed node.
        """
        return pulumi.get(self, "nodes")


@pulumi.output_type
class KarbonClusterEtcdNodePoolAhvConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkUuid":
            suggest = "network_uuid"
        elif key == "prismElementClusterUuid":
            suggest = "prism_element_cluster_uuid"
        elif key == "diskMib":
            suggest = "disk_mib"
        elif key == "memoryMib":
            suggest = "memory_mib"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterEtcdNodePoolAhvConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterEtcdNodePoolAhvConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterEtcdNodePoolAhvConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_uuid: str,
                 prism_element_cluster_uuid: str,
                 cpu: Optional[int] = None,
                 disk_mib: Optional[int] = None,
                 memory_mib: Optional[int] = None):
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_mib is not None:
            pulumi.set(__self__, "disk_mib", disk_mib)
        if memory_mib is not None:
            pulumi.set(__self__, "memory_mib", memory_mib)

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> str:
        return pulumi.get(self, "network_uuid")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> str:
        return pulumi.get(self, "prism_element_cluster_uuid")

    @property
    @pulumi.getter
    def cpu(self) -> Optional[int]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> Optional[int]:
        return pulumi.get(self, "disk_mib")

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> Optional[int]:
        return pulumi.get(self, "memory_mib")


@pulumi.output_type
class KarbonClusterEtcdNodePoolNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterEtcdNodePoolNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterEtcdNodePoolNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterEtcdNodePoolNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname: Optional[str] = None,
                 ipv4_address: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[str]:
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class KarbonClusterExternalLbConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalIpv4Address":
            suggest = "external_ipv4_address"
        elif key == "masterNodesConfigs":
            suggest = "master_nodes_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterExternalLbConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterExternalLbConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterExternalLbConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_ipv4_address: str,
                 master_nodes_configs: Sequence['outputs.KarbonClusterExternalLbConfigMasterNodesConfig']):
        pulumi.set(__self__, "external_ipv4_address", external_ipv4_address)
        pulumi.set(__self__, "master_nodes_configs", master_nodes_configs)

    @property
    @pulumi.getter(name="externalIpv4Address")
    def external_ipv4_address(self) -> str:
        return pulumi.get(self, "external_ipv4_address")

    @property
    @pulumi.getter(name="masterNodesConfigs")
    def master_nodes_configs(self) -> Sequence['outputs.KarbonClusterExternalLbConfigMasterNodesConfig']:
        return pulumi.get(self, "master_nodes_configs")


@pulumi.output_type
class KarbonClusterExternalLbConfigMasterNodesConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"
        elif key == "nodePoolName":
            suggest = "node_pool_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterExternalLbConfigMasterNodesConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterExternalLbConfigMasterNodesConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterExternalLbConfigMasterNodesConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_address: str,
                 node_pool_name: Optional[str] = None):
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        if node_pool_name is not None:
            pulumi.set(__self__, "node_pool_name", node_pool_name)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> str:
        return pulumi.get(self, "ipv4_address")

    @property
    @pulumi.getter(name="nodePoolName")
    def node_pool_name(self) -> Optional[str]:
        return pulumi.get(self, "node_pool_name")


@pulumi.output_type
class KarbonClusterMasterNodePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeOsVersion":
            suggest = "node_os_version"
        elif key == "numInstances":
            suggest = "num_instances"
        elif key == "ahvConfig":
            suggest = "ahv_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterMasterNodePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterMasterNodePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterMasterNodePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_os_version: str,
                 num_instances: int,
                 ahv_config: Optional['outputs.KarbonClusterMasterNodePoolAhvConfig'] = None,
                 name: Optional[str] = None,
                 nodes: Optional[Sequence['outputs.KarbonClusterMasterNodePoolNode']] = None):
        """
        :param str node_os_version: - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        :param int num_instances: - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        :param 'KarbonClusterMasterNodePoolAhvConfigArgs' ahv_config: - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
               * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
               * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
               * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
               * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
               * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        :param str name: - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
        :param Sequence['KarbonClusterMasterNodePoolNodeArgs'] nodes: - List of the deployed nodes in the node pool.
               * `nodes.hostname`: - Hostname of the deployed node.
               * `nodes.ipv4_address`: - IP of the deployed node.
        """
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "num_instances", num_instances)
        if ahv_config is not None:
            pulumi.set(__self__, "ahv_config", ahv_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> str:
        """
        - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "node_os_version")

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> int:
        """
        - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        """
        return pulumi.get(self, "num_instances")

    @property
    @pulumi.getter(name="ahvConfig")
    def ahv_config(self) -> Optional['outputs.KarbonClusterMasterNodePoolAhvConfig']:
        """
        - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
        * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
        * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
        * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
        * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
        * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "ahv_config")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.KarbonClusterMasterNodePoolNode']]:
        """
        - List of the deployed nodes in the node pool.
        * `nodes.hostname`: - Hostname of the deployed node.
        * `nodes.ipv4_address`: - IP of the deployed node.
        """
        return pulumi.get(self, "nodes")


@pulumi.output_type
class KarbonClusterMasterNodePoolAhvConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkUuid":
            suggest = "network_uuid"
        elif key == "prismElementClusterUuid":
            suggest = "prism_element_cluster_uuid"
        elif key == "diskMib":
            suggest = "disk_mib"
        elif key == "memoryMib":
            suggest = "memory_mib"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterMasterNodePoolAhvConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterMasterNodePoolAhvConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterMasterNodePoolAhvConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_uuid: str,
                 prism_element_cluster_uuid: str,
                 cpu: Optional[int] = None,
                 disk_mib: Optional[int] = None,
                 memory_mib: Optional[int] = None):
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_mib is not None:
            pulumi.set(__self__, "disk_mib", disk_mib)
        if memory_mib is not None:
            pulumi.set(__self__, "memory_mib", memory_mib)

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> str:
        return pulumi.get(self, "network_uuid")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> str:
        return pulumi.get(self, "prism_element_cluster_uuid")

    @property
    @pulumi.getter
    def cpu(self) -> Optional[int]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> Optional[int]:
        return pulumi.get(self, "disk_mib")

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> Optional[int]:
        return pulumi.get(self, "memory_mib")


@pulumi.output_type
class KarbonClusterMasterNodePoolNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterMasterNodePoolNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterMasterNodePoolNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterMasterNodePoolNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname: Optional[str] = None,
                 ipv4_address: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[str]:
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class KarbonClusterPrivateRegistry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "registryName":
            suggest = "registry_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterPrivateRegistry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterPrivateRegistry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterPrivateRegistry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 registry_name: str):
        pulumi.set(__self__, "registry_name", registry_name)

    @property
    @pulumi.getter(name="registryName")
    def registry_name(self) -> str:
        return pulumi.get(self, "registry_name")


@pulumi.output_type
class KarbonClusterSingleMasterConfig(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class KarbonClusterStorageClassConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumesConfig":
            suggest = "volumes_config"
        elif key == "reclaimPolicy":
            suggest = "reclaim_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterStorageClassConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterStorageClassConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterStorageClassConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 volumes_config: 'outputs.KarbonClusterStorageClassConfigVolumesConfig',
                 name: Optional[str] = None,
                 reclaim_policy: Optional[str] = None):
        """
        :param str name: - (Required) The name of the storage class.
        :param str reclaim_policy: Reclaim policy for persistent volumes provisioned using the specified storage class.
               * `volumes_config.#.file_system` - (Optional) Karbon uses either the ext4 or xfs file-system on the volume disk.
               * `volumes_config.#.flash_mode` - (Optional) Pins the persistent volumes to the flash tier in case of a `true` value.
               * `volumes_config.#.password` - (Required) The password of the Prism Element user that the API calls use to provision volumes.
               * `volumes_config.#.prism_element_cluster_uuid` - (Required) The universally unique identifier (UUID) of the Prism Element cluster.
               * `volumes_config.#.storage_container` - (Required) Name of the storage container the storage container uses to provision volumes.
               * `volumes_config.#.username` - (Required) Username of the Prism Element user that the API calls use to provision volumes.
               
               **Note:** Updates to this attribute forces new resource creation.
        """
        pulumi.set(__self__, "volumes_config", volumes_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if reclaim_policy is not None:
            pulumi.set(__self__, "reclaim_policy", reclaim_policy)

    @property
    @pulumi.getter(name="volumesConfig")
    def volumes_config(self) -> 'outputs.KarbonClusterStorageClassConfigVolumesConfig':
        return pulumi.get(self, "volumes_config")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name of the storage class.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="reclaimPolicy")
    def reclaim_policy(self) -> Optional[str]:
        """
        Reclaim policy for persistent volumes provisioned using the specified storage class.
        * `volumes_config.#.file_system` - (Optional) Karbon uses either the ext4 or xfs file-system on the volume disk.
        * `volumes_config.#.flash_mode` - (Optional) Pins the persistent volumes to the flash tier in case of a `true` value.
        * `volumes_config.#.password` - (Required) The password of the Prism Element user that the API calls use to provision volumes.
        * `volumes_config.#.prism_element_cluster_uuid` - (Required) The universally unique identifier (UUID) of the Prism Element cluster.
        * `volumes_config.#.storage_container` - (Required) Name of the storage container the storage container uses to provision volumes.
        * `volumes_config.#.username` - (Required) Username of the Prism Element user that the API calls use to provision volumes.

        **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "reclaim_policy")


@pulumi.output_type
class KarbonClusterStorageClassConfigVolumesConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prismElementClusterUuid":
            suggest = "prism_element_cluster_uuid"
        elif key == "storageContainer":
            suggest = "storage_container"
        elif key == "fileSystem":
            suggest = "file_system"
        elif key == "flashMode":
            suggest = "flash_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterStorageClassConfigVolumesConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterStorageClassConfigVolumesConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterStorageClassConfigVolumesConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: str,
                 prism_element_cluster_uuid: str,
                 storage_container: str,
                 username: str,
                 file_system: Optional[str] = None,
                 flash_mode: Optional[bool] = None):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)
        pulumi.set(__self__, "storage_container", storage_container)
        pulumi.set(__self__, "username", username)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if flash_mode is not None:
            pulumi.set(__self__, "flash_mode", flash_mode)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> str:
        return pulumi.get(self, "prism_element_cluster_uuid")

    @property
    @pulumi.getter(name="storageContainer")
    def storage_container(self) -> str:
        return pulumi.get(self, "storage_container")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[str]:
        return pulumi.get(self, "file_system")

    @property
    @pulumi.getter(name="flashMode")
    def flash_mode(self) -> Optional[bool]:
        return pulumi.get(self, "flash_mode")


@pulumi.output_type
class KarbonClusterWorkerNodePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeOsVersion":
            suggest = "node_os_version"
        elif key == "numInstances":
            suggest = "num_instances"
        elif key == "ahvConfig":
            suggest = "ahv_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterWorkerNodePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterWorkerNodePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterWorkerNodePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_os_version: str,
                 num_instances: int,
                 ahv_config: Optional['outputs.KarbonClusterWorkerNodePoolAhvConfig'] = None,
                 name: Optional[str] = None,
                 nodes: Optional[Sequence['outputs.KarbonClusterWorkerNodePoolNode']] = None):
        """
        :param str node_os_version: - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        :param int num_instances: - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        :param 'KarbonClusterWorkerNodePoolAhvConfigArgs' ahv_config: - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
               * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
               * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
               * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
               * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
               * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        :param str name: - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
        :param Sequence['KarbonClusterWorkerNodePoolNodeArgs'] nodes: - List of the deployed nodes in the node pool.
               * `nodes.hostname`: - Hostname of the deployed node.
               * `nodes.ipv4_address`: - IP of the deployed node.
        """
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "num_instances", num_instances)
        if ahv_config is not None:
            pulumi.set(__self__, "ahv_config", ahv_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> str:
        """
        - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "node_os_version")

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> int:
        """
        - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        """
        return pulumi.get(self, "num_instances")

    @property
    @pulumi.getter(name="ahvConfig")
    def ahv_config(self) -> Optional['outputs.KarbonClusterWorkerNodePoolAhvConfig']:
        """
        - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
        * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
        * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
        * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
        * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
        * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "ahv_config")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.KarbonClusterWorkerNodePoolNode']]:
        """
        - List of the deployed nodes in the node pool.
        * `nodes.hostname`: - Hostname of the deployed node.
        * `nodes.ipv4_address`: - IP of the deployed node.
        """
        return pulumi.get(self, "nodes")


@pulumi.output_type
class KarbonClusterWorkerNodePoolAhvConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkUuid":
            suggest = "network_uuid"
        elif key == "prismElementClusterUuid":
            suggest = "prism_element_cluster_uuid"
        elif key == "diskMib":
            suggest = "disk_mib"
        elif key == "memoryMib":
            suggest = "memory_mib"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterWorkerNodePoolAhvConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterWorkerNodePoolAhvConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterWorkerNodePoolAhvConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_uuid: str,
                 prism_element_cluster_uuid: str,
                 cpu: Optional[int] = None,
                 disk_mib: Optional[int] = None,
                 memory_mib: Optional[int] = None):
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_mib is not None:
            pulumi.set(__self__, "disk_mib", disk_mib)
        if memory_mib is not None:
            pulumi.set(__self__, "memory_mib", memory_mib)

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> str:
        return pulumi.get(self, "network_uuid")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> str:
        return pulumi.get(self, "prism_element_cluster_uuid")

    @property
    @pulumi.getter
    def cpu(self) -> Optional[int]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> Optional[int]:
        return pulumi.get(self, "disk_mib")

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> Optional[int]:
        return pulumi.get(self, "memory_mib")


@pulumi.output_type
class KarbonClusterWorkerNodePoolNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterWorkerNodePoolNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterWorkerNodePoolNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterWorkerNodePoolNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname: Optional[str] = None,
                 ipv4_address: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[str]:
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class KarbonWorkerNodepoolAhvConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkUuid":
            suggest = "network_uuid"
        elif key == "diskMib":
            suggest = "disk_mib"
        elif key == "iscsiNetworkUuid":
            suggest = "iscsi_network_uuid"
        elif key == "memoryMib":
            suggest = "memory_mib"
        elif key == "prismElementClusterUuid":
            suggest = "prism_element_cluster_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonWorkerNodepoolAhvConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonWorkerNodepoolAhvConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonWorkerNodepoolAhvConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_uuid: str,
                 cpu: Optional[int] = None,
                 disk_mib: Optional[int] = None,
                 iscsi_network_uuid: Optional[str] = None,
                 memory_mib: Optional[int] = None,
                 prism_element_cluster_uuid: Optional[str] = None):
        """
        :param str network_uuid: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
        :param int cpu: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
        :param int disk_mib: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
        :param str iscsi_network_uuid: VM network UUID for isolating iscsi data traffic.
        :param int memory_mib: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
        :param str prism_element_cluster_uuid: - (Optional) The unique universal identifier (UUID) of the Prism Element
        """
        pulumi.set(__self__, "network_uuid", network_uuid)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_mib is not None:
            pulumi.set(__self__, "disk_mib", disk_mib)
        if iscsi_network_uuid is not None:
            pulumi.set(__self__, "iscsi_network_uuid", iscsi_network_uuid)
        if memory_mib is not None:
            pulumi.set(__self__, "memory_mib", memory_mib)
        if prism_element_cluster_uuid is not None:
            pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> str:
        """
        - (Required) The UUID of the network for the VMs deployed with this resource configuration.
        """
        return pulumi.get(self, "network_uuid")

    @property
    @pulumi.getter
    def cpu(self) -> Optional[int]:
        """
        - (Required) The number of VCPUs allocated for each VM on the PE cluster.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> Optional[int]:
        """
        - (Optional) Size of local storage for each VM on the PE cluster in MiB.
        """
        return pulumi.get(self, "disk_mib")

    @property
    @pulumi.getter(name="iscsiNetworkUuid")
    def iscsi_network_uuid(self) -> Optional[str]:
        """
        VM network UUID for isolating iscsi data traffic.
        """
        return pulumi.get(self, "iscsi_network_uuid")

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> Optional[int]:
        """
        - (Optional) Memory allocated for each VM on the PE cluster in MiB.
        """
        return pulumi.get(self, "memory_mib")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> Optional[str]:
        """
        - (Optional) The unique universal identifier (UUID) of the Prism Element
        """
        return pulumi.get(self, "prism_element_cluster_uuid")


@pulumi.output_type
class KarbonWorkerNodepoolNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonWorkerNodepoolNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonWorkerNodepoolNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonWorkerNodepoolNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname: Optional[str] = None,
                 ipv4_address: Optional[str] = None):
        """
        :param str hostname: hostname of node
        :param str ipv4_address: ipv4 address of node
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        hostname of node
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[str]:
        """
        ipv4 address of node
        """
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class NdbCloneActionargument(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - (Required) name of argument
        :param str value: - (Required) value for argument
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) name of argument
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbCloneDatabaseNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "databaseId":
            suggest = "database_id"
        elif key == "databaseStatus":
            suggest = "database_status"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "dbserverId":
            suggest = "dbserver_id"
        elif key == "protectionDomainId":
            suggest = "protection_domain_id"
        elif key == "protectionDomains":
            suggest = "protection_domains"
        elif key == "softwareInstallationId":
            suggest = "software_installation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneDatabaseNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneDatabaseNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneDatabaseNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: Optional[Mapping[str, str]] = None,
                 database_id: Optional[str] = None,
                 database_status: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 dbserver: Optional[Mapping[str, str]] = None,
                 dbserver_id: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 infos: Optional[Sequence['outputs.NdbCloneDatabaseNodeInfo']] = None,
                 name: Optional[str] = None,
                 primary: Optional[bool] = None,
                 properties: Optional[Sequence['outputs.NdbCloneDatabaseNodeProperty']] = None,
                 protection_domain_id: Optional[str] = None,
                 protection_domains: Optional[Sequence['outputs.NdbCloneDatabaseNodeProtectionDomain']] = None,
                 software_installation_id: Optional[str] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.NdbCloneDatabaseNodeTag']] = None):
        """
        :param str date_created: date created for clone
        :param str date_modified: last modified date for clone
        :param str dbserver_id: Specify if you want to create a database server. This value can be set to true or false as required.
        :param str description: database instance description
        :param Sequence['NdbCloneDatabaseNodeInfoArgs'] infos: info of clone
        :param str name: database instance name
        :param Sequence['NdbCloneDatabaseNodePropertyArgs'] properties: List of all the properties
        :param str status: status of clone
        :param Sequence['NdbCloneDatabaseNodeTagArgs'] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if dbserver is not None:
            pulumi.set(__self__, "dbserver", dbserver)
        if dbserver_id is not None:
            pulumi.set(__self__, "dbserver_id", dbserver_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if protection_domain_id is not None:
            pulumi.set(__self__, "protection_domain_id", protection_domain_id)
        if protection_domains is not None:
            pulumi.set(__self__, "protection_domains", protection_domains)
        if software_installation_id is not None:
            pulumi.set(__self__, "software_installation_id", software_installation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[str]:
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def dbserver(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "dbserver")

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> Optional[str]:
        """
        Specify if you want to create a database server. This value can be set to true or false as required.
        """
        return pulumi.get(self, "dbserver_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        database instance description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.NdbCloneDatabaseNodeInfo']]:
        """
        info of clone
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbCloneDatabaseNodeProperty']]:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="protectionDomainId")
    def protection_domain_id(self) -> Optional[str]:
        return pulumi.get(self, "protection_domain_id")

    @property
    @pulumi.getter(name="protectionDomains")
    def protection_domains(self) -> Optional[Sequence['outputs.NdbCloneDatabaseNodeProtectionDomain']]:
        return pulumi.get(self, "protection_domains")

    @property
    @pulumi.getter(name="softwareInstallationId")
    def software_installation_id(self) -> Optional[str]:
        return pulumi.get(self, "software_installation_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of clone
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.NdbCloneDatabaseNodeTag']]:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class NdbCloneDatabaseNodeInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureInfo":
            suggest = "secure_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneDatabaseNodeInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneDatabaseNodeInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneDatabaseNodeInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 info: Optional[Mapping[str, str]] = None,
                 secure_info: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] info: info of clone
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[Mapping[str, str]]:
        """
        info of clone
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class NdbCloneDatabaseNodeProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneDatabaseNodeProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneDatabaseNodeProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneDatabaseNodeProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str description: database instance description
        :param str name: database instance name
        :param str value: - (Required) value for argument
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        database instance description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbCloneDatabaseNodeProtectionDomain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assocEntities":
            suggest = "assoc_entities"
        elif key == "cloudId":
            suggest = "cloud_id"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "eraCreated":
            suggest = "era_created"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "primaryHost":
            suggest = "primary_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneDatabaseNodeProtectionDomain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneDatabaseNodeProtectionDomain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneDatabaseNodeProtectionDomain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assoc_entities: Optional[Sequence[str]] = None,
                 cloud_id: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 era_created: Optional[bool] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 primary_host: Optional[str] = None,
                 properties: Optional[Sequence['outputs.NdbCloneDatabaseNodeProtectionDomainProperty']] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str date_created: date created for clone
        :param str date_modified: last modified date for clone
        :param str description: database instance description
        :param str name: database instance name
        :param Sequence['NdbCloneDatabaseNodeProtectionDomainPropertyArgs'] properties: List of all the properties
        :param str status: status of clone
        :param str type: type of clone
        """
        if assoc_entities is not None:
            pulumi.set(__self__, "assoc_entities", assoc_entities)
        if cloud_id is not None:
            pulumi.set(__self__, "cloud_id", cloud_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if era_created is not None:
            pulumi.set(__self__, "era_created", era_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if primary_host is not None:
            pulumi.set(__self__, "primary_host", primary_host)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assocEntities")
    def assoc_entities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "assoc_entities")

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> Optional[str]:
        return pulumi.get(self, "cloud_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        database instance description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eraCreated")
    def era_created(self) -> Optional[bool]:
        return pulumi.get(self, "era_created")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="primaryHost")
    def primary_host(self) -> Optional[str]:
        return pulumi.get(self, "primary_host")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbCloneDatabaseNodeProtectionDomainProperty']]:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of clone
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of clone
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NdbCloneDatabaseNodeProtectionDomainProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneDatabaseNodeProtectionDomainProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneDatabaseNodeProtectionDomainProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneDatabaseNodeProtectionDomainProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str description: database instance description
        :param str name: database instance name
        :param str value: - (Required) value for argument
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        database instance description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbCloneDatabaseNodeTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneDatabaseNodeTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneDatabaseNodeTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneDatabaseNodeTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbCloneInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bpgConfigs":
            suggest = "bpg_configs"
        elif key == "secureInfo":
            suggest = "secure_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bpg_configs: Optional[Sequence['outputs.NdbCloneInfoBpgConfig']] = None,
                 secure_info: Optional[Mapping[str, str]] = None):
        if bpg_configs is not None:
            pulumi.set(__self__, "bpg_configs", bpg_configs)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="bpgConfigs")
    def bpg_configs(self) -> Optional[Sequence['outputs.NdbCloneInfoBpgConfig']]:
        return pulumi.get(self, "bpg_configs")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class NdbCloneInfoBpgConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bpgDbParams":
            suggest = "bpg_db_params"
        elif key == "vmProperties":
            suggest = "vm_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneInfoBpgConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneInfoBpgConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneInfoBpgConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bpg_db_params: Optional[Sequence['outputs.NdbCloneInfoBpgConfigBpgDbParam']] = None,
                 storages: Optional[Sequence['outputs.NdbCloneInfoBpgConfigStorage']] = None,
                 vm_properties: Optional[Sequence['outputs.NdbCloneInfoBpgConfigVmProperty']] = None):
        if bpg_db_params is not None:
            pulumi.set(__self__, "bpg_db_params", bpg_db_params)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if vm_properties is not None:
            pulumi.set(__self__, "vm_properties", vm_properties)

    @property
    @pulumi.getter(name="bpgDbParams")
    def bpg_db_params(self) -> Optional[Sequence['outputs.NdbCloneInfoBpgConfigBpgDbParam']]:
        return pulumi.get(self, "bpg_db_params")

    @property
    @pulumi.getter
    def storages(self) -> Optional[Sequence['outputs.NdbCloneInfoBpgConfigStorage']]:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="vmProperties")
    def vm_properties(self) -> Optional[Sequence['outputs.NdbCloneInfoBpgConfigVmProperty']]:
        return pulumi.get(self, "vm_properties")


@pulumi.output_type
class NdbCloneInfoBpgConfigBpgDbParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "effectiveCacheSize":
            suggest = "effective_cache_size"
        elif key == "maintenanceWorkMem":
            suggest = "maintenance_work_mem"
        elif key == "maxParallelWorkersPerGather":
            suggest = "max_parallel_workers_per_gather"
        elif key == "maxWorkerProcesses":
            suggest = "max_worker_processes"
        elif key == "sharedBuffers":
            suggest = "shared_buffers"
        elif key == "workMem":
            suggest = "work_mem"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneInfoBpgConfigBpgDbParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneInfoBpgConfigBpgDbParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneInfoBpgConfigBpgDbParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 effective_cache_size: Optional[str] = None,
                 maintenance_work_mem: Optional[str] = None,
                 max_parallel_workers_per_gather: Optional[str] = None,
                 max_worker_processes: Optional[str] = None,
                 shared_buffers: Optional[str] = None,
                 work_mem: Optional[str] = None):
        if effective_cache_size is not None:
            pulumi.set(__self__, "effective_cache_size", effective_cache_size)
        if maintenance_work_mem is not None:
            pulumi.set(__self__, "maintenance_work_mem", maintenance_work_mem)
        if max_parallel_workers_per_gather is not None:
            pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if shared_buffers is not None:
            pulumi.set(__self__, "shared_buffers", shared_buffers)
        if work_mem is not None:
            pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="effectiveCacheSize")
    def effective_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "effective_cache_size")

    @property
    @pulumi.getter(name="maintenanceWorkMem")
    def maintenance_work_mem(self) -> Optional[str]:
        return pulumi.get(self, "maintenance_work_mem")

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> Optional[str]:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[str]:
        return pulumi.get(self, "max_worker_processes")

    @property
    @pulumi.getter(name="sharedBuffers")
    def shared_buffers(self) -> Optional[str]:
        return pulumi.get(self, "shared_buffers")

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> Optional[str]:
        return pulumi.get(self, "work_mem")


@pulumi.output_type
class NdbCloneInfoBpgConfigStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveStorages":
            suggest = "archive_storages"
        elif key == "dataDisks":
            suggest = "data_disks"
        elif key == "logDisks":
            suggest = "log_disks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneInfoBpgConfigStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneInfoBpgConfigStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneInfoBpgConfigStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_storages: Optional[Sequence['outputs.NdbCloneInfoBpgConfigStorageArchiveStorage']] = None,
                 data_disks: Optional[Sequence['outputs.NdbCloneInfoBpgConfigStorageDataDisk']] = None,
                 log_disks: Optional[Sequence['outputs.NdbCloneInfoBpgConfigStorageLogDisk']] = None):
        if archive_storages is not None:
            pulumi.set(__self__, "archive_storages", archive_storages)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if log_disks is not None:
            pulumi.set(__self__, "log_disks", log_disks)

    @property
    @pulumi.getter(name="archiveStorages")
    def archive_storages(self) -> Optional[Sequence['outputs.NdbCloneInfoBpgConfigStorageArchiveStorage']]:
        return pulumi.get(self, "archive_storages")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.NdbCloneInfoBpgConfigStorageDataDisk']]:
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="logDisks")
    def log_disks(self) -> Optional[Sequence['outputs.NdbCloneInfoBpgConfigStorageLogDisk']]:
        return pulumi.get(self, "log_disks")


@pulumi.output_type
class NdbCloneInfoBpgConfigStorageArchiveStorage(dict):
    def __init__(__self__, *,
                 size: Optional[float] = None):
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> Optional[float]:
        return pulumi.get(self, "size")


@pulumi.output_type
class NdbCloneInfoBpgConfigStorageDataDisk(dict):
    def __init__(__self__, *,
                 count: Optional[float] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> Optional[float]:
        return pulumi.get(self, "count")


@pulumi.output_type
class NdbCloneInfoBpgConfigStorageLogDisk(dict):
    def __init__(__self__, *,
                 count: Optional[float] = None,
                 size: Optional[float] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> Optional[float]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def size(self) -> Optional[float]:
        return pulumi.get(self, "size")


@pulumi.output_type
class NdbCloneInfoBpgConfigVmProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dirtyBackgroundRatio":
            suggest = "dirty_background_ratio"
        elif key == "dirtyExpireCentisecs":
            suggest = "dirty_expire_centisecs"
        elif key == "dirtyRatio":
            suggest = "dirty_ratio"
        elif key == "dirtyWritebackCentisecs":
            suggest = "dirty_writeback_centisecs"
        elif key == "nrHugepages":
            suggest = "nr_hugepages"
        elif key == "overcommitMemory":
            suggest = "overcommit_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneInfoBpgConfigVmProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneInfoBpgConfigVmProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneInfoBpgConfigVmProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dirty_background_ratio: Optional[float] = None,
                 dirty_expire_centisecs: Optional[float] = None,
                 dirty_ratio: Optional[float] = None,
                 dirty_writeback_centisecs: Optional[float] = None,
                 nr_hugepages: Optional[float] = None,
                 overcommit_memory: Optional[float] = None,
                 swappiness: Optional[float] = None):
        if dirty_background_ratio is not None:
            pulumi.set(__self__, "dirty_background_ratio", dirty_background_ratio)
        if dirty_expire_centisecs is not None:
            pulumi.set(__self__, "dirty_expire_centisecs", dirty_expire_centisecs)
        if dirty_ratio is not None:
            pulumi.set(__self__, "dirty_ratio", dirty_ratio)
        if dirty_writeback_centisecs is not None:
            pulumi.set(__self__, "dirty_writeback_centisecs", dirty_writeback_centisecs)
        if nr_hugepages is not None:
            pulumi.set(__self__, "nr_hugepages", nr_hugepages)
        if overcommit_memory is not None:
            pulumi.set(__self__, "overcommit_memory", overcommit_memory)
        if swappiness is not None:
            pulumi.set(__self__, "swappiness", swappiness)

    @property
    @pulumi.getter(name="dirtyBackgroundRatio")
    def dirty_background_ratio(self) -> Optional[float]:
        return pulumi.get(self, "dirty_background_ratio")

    @property
    @pulumi.getter(name="dirtyExpireCentisecs")
    def dirty_expire_centisecs(self) -> Optional[float]:
        return pulumi.get(self, "dirty_expire_centisecs")

    @property
    @pulumi.getter(name="dirtyRatio")
    def dirty_ratio(self) -> Optional[float]:
        return pulumi.get(self, "dirty_ratio")

    @property
    @pulumi.getter(name="dirtyWritebackCentisecs")
    def dirty_writeback_centisecs(self) -> Optional[float]:
        return pulumi.get(self, "dirty_writeback_centisecs")

    @property
    @pulumi.getter(name="nrHugepages")
    def nr_hugepages(self) -> Optional[float]:
        return pulumi.get(self, "nr_hugepages")

    @property
    @pulumi.getter(name="overcommitMemory")
    def overcommit_memory(self) -> Optional[float]:
        return pulumi.get(self, "overcommit_memory")

    @property
    @pulumi.getter
    def swappiness(self) -> Optional[float]:
        return pulumi.get(self, "swappiness")


@pulumi.output_type
class NdbCloneLcmConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseLcmConfigs":
            suggest = "database_lcm_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneLcmConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneLcmConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneLcmConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_lcm_configs: Optional[Sequence['outputs.NdbCloneLcmConfigDatabaseLcmConfig']] = None):
        if database_lcm_configs is not None:
            pulumi.set(__self__, "database_lcm_configs", database_lcm_configs)

    @property
    @pulumi.getter(name="databaseLcmConfigs")
    def database_lcm_configs(self) -> Optional[Sequence['outputs.NdbCloneLcmConfigDatabaseLcmConfig']]:
        return pulumi.get(self, "database_lcm_configs")


@pulumi.output_type
class NdbCloneLcmConfigDatabaseLcmConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expiryDetails":
            suggest = "expiry_details"
        elif key == "refreshDetails":
            suggest = "refresh_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneLcmConfigDatabaseLcmConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneLcmConfigDatabaseLcmConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneLcmConfigDatabaseLcmConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expiry_details: Optional[Sequence['outputs.NdbCloneLcmConfigDatabaseLcmConfigExpiryDetail']] = None,
                 refresh_details: Optional[Sequence['outputs.NdbCloneLcmConfigDatabaseLcmConfigRefreshDetail']] = None):
        if expiry_details is not None:
            pulumi.set(__self__, "expiry_details", expiry_details)
        if refresh_details is not None:
            pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Optional[Sequence['outputs.NdbCloneLcmConfigDatabaseLcmConfigExpiryDetail']]:
        return pulumi.get(self, "expiry_details")

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Optional[Sequence['outputs.NdbCloneLcmConfigDatabaseLcmConfigRefreshDetail']]:
        return pulumi.get(self, "refresh_details")


@pulumi.output_type
class NdbCloneLcmConfigDatabaseLcmConfigExpiryDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expiryDateTimezone":
            suggest = "expiry_date_timezone"
        elif key == "deleteDatabase":
            suggest = "delete_database"
        elif key == "expireInDays":
            suggest = "expire_in_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneLcmConfigDatabaseLcmConfigExpiryDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneLcmConfigDatabaseLcmConfigExpiryDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneLcmConfigDatabaseLcmConfigExpiryDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expiry_date_timezone: str,
                 delete_database: Optional[bool] = None,
                 expire_in_days: Optional[int] = None):
        pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        if delete_database is not None:
            pulumi.set(__self__, "delete_database", delete_database)
        if expire_in_days is not None:
            pulumi.set(__self__, "expire_in_days", expire_in_days)

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> str:
        return pulumi.get(self, "expiry_date_timezone")

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> Optional[bool]:
        return pulumi.get(self, "delete_database")

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> Optional[int]:
        return pulumi.get(self, "expire_in_days")


@pulumi.output_type
class NdbCloneLcmConfigDatabaseLcmConfigRefreshDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refreshDateTimezone":
            suggest = "refresh_date_timezone"
        elif key == "refreshInDays":
            suggest = "refresh_in_days"
        elif key == "refreshTime":
            suggest = "refresh_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneLcmConfigDatabaseLcmConfigRefreshDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneLcmConfigDatabaseLcmConfigRefreshDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneLcmConfigDatabaseLcmConfigRefreshDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 refresh_date_timezone: Optional[str] = None,
                 refresh_in_days: Optional[int] = None,
                 refresh_time: Optional[str] = None):
        if refresh_date_timezone is not None:
            pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        if refresh_in_days is not None:
            pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        if refresh_time is not None:
            pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> Optional[str]:
        return pulumi.get(self, "refresh_date_timezone")

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> Optional[int]:
        return pulumi.get(self, "refresh_in_days")

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> Optional[str]:
        return pulumi.get(self, "refresh_time")


@pulumi.output_type
class NdbCloneLinkedDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"
        elif key == "databaseStatus":
            suggest = "database_status"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "parentDatabaseId":
            suggest = "parent_database_id"
        elif key == "parentLinkedDatabaseId":
            suggest = "parent_linked_database_id"
        elif key == "snapshotId":
            suggest = "snapshot_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneLinkedDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneLinkedDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneLinkedDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: Optional[str] = None,
                 database_status: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 infos: Optional[Sequence['outputs.NdbCloneLinkedDatabaseInfo']] = None,
                 metric: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 parent_database_id: Optional[str] = None,
                 parent_linked_database_id: Optional[str] = None,
                 snapshot_id: Optional[str] = None,
                 status: Optional[str] = None,
                 timezone: Optional[str] = None):
        """
        :param str database_name: database name
        :param str date_created: date created for clone
        :param str date_modified: last modified date for clone
        :param str description: database instance description
        :param Sequence['NdbCloneLinkedDatabaseInfoArgs'] infos: info of clone
        :param Mapping[str, str] metric: Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        :param str name: database instance name
        :param str snapshot_id: snapshot id from where clone is created
        :param str status: status of clone
        """
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_database_id is not None:
            pulumi.set(__self__, "parent_database_id", parent_database_id)
        if parent_linked_database_id is not None:
            pulumi.set(__self__, "parent_linked_database_id", parent_linked_database_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        """
        database name
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[str]:
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        database instance description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.NdbCloneLinkedDatabaseInfo']]:
        """
        info of clone
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def metric(self) -> Optional[Mapping[str, str]]:
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_database_id")

    @property
    @pulumi.getter(name="parentLinkedDatabaseId")
    def parent_linked_database_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_linked_database_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        """
        snapshot id from where clone is created
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of clone
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        return pulumi.get(self, "timezone")


@pulumi.output_type
class NdbCloneLinkedDatabaseInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureInfo":
            suggest = "secure_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneLinkedDatabaseInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneLinkedDatabaseInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneLinkedDatabaseInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 info: Optional[Mapping[str, str]] = None,
                 secure_info: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] info: info of clone
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[Mapping[str, str]]:
        """
        info of clone
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class NdbCloneNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeProfileId":
            suggest = "compute_profile_id"
        elif key == "dbserverId":
            suggest = "dbserver_id"
        elif key == "networkProfileId":
            suggest = "network_profile_id"
        elif key == "newDbServerTimeZone":
            suggest = "new_db_server_time_zone"
        elif key == "nxClusterId":
            suggest = "nx_cluster_id"
        elif key == "vmName":
            suggest = "vm_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_profile_id: Optional[str] = None,
                 dbserver_id: Optional[str] = None,
                 network_profile_id: Optional[str] = None,
                 new_db_server_time_zone: Optional[str] = None,
                 nx_cluster_id: Optional[str] = None,
                 properties: Optional[Sequence['outputs.NdbCloneNodeProperty']] = None,
                 vm_name: Optional[str] = None):
        """
        :param str compute_profile_id: specify compute profile id
        :param str dbserver_id: dberver id
        :param str network_profile_id: specify network profile id
        :param str new_db_server_time_zone: dbserver time zone
        :param str nx_cluster_id: cluster id
        :param Sequence['NdbCloneNodePropertyArgs'] properties: properties of vm
        :param str vm_name: name for the database server VM.
        """
        if compute_profile_id is not None:
            pulumi.set(__self__, "compute_profile_id", compute_profile_id)
        if dbserver_id is not None:
            pulumi.set(__self__, "dbserver_id", dbserver_id)
        if network_profile_id is not None:
            pulumi.set(__self__, "network_profile_id", network_profile_id)
        if new_db_server_time_zone is not None:
            pulumi.set(__self__, "new_db_server_time_zone", new_db_server_time_zone)
        if nx_cluster_id is not None:
            pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if vm_name is not None:
            pulumi.set(__self__, "vm_name", vm_name)

    @property
    @pulumi.getter(name="computeProfileId")
    def compute_profile_id(self) -> Optional[str]:
        """
        specify compute profile id
        """
        return pulumi.get(self, "compute_profile_id")

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> Optional[str]:
        """
        dberver id
        """
        return pulumi.get(self, "dbserver_id")

    @property
    @pulumi.getter(name="networkProfileId")
    def network_profile_id(self) -> Optional[str]:
        """
        specify network profile id
        """
        return pulumi.get(self, "network_profile_id")

    @property
    @pulumi.getter(name="newDbServerTimeZone")
    def new_db_server_time_zone(self) -> Optional[str]:
        """
        dbserver time zone
        """
        return pulumi.get(self, "new_db_server_time_zone")

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> Optional[str]:
        """
        cluster id
        """
        return pulumi.get(self, "nx_cluster_id")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbCloneNodeProperty']]:
        """
        properties of vm
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> Optional[str]:
        """
        name for the database server VM.
        """
        return pulumi.get(self, "vm_name")


@pulumi.output_type
class NdbCloneNodeProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: database instance name
        :param str value: - (Required) value for argument
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbClonePostgresqlInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbPassword":
            suggest = "db_password"
        elif key == "vmName":
            suggest = "vm_name"
        elif key == "dbserverDescription":
            suggest = "dbserver_description"
        elif key == "postCloneCmd":
            suggest = "post_clone_cmd"
        elif key == "preCloneCmd":
            suggest = "pre_clone_cmd"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClonePostgresqlInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClonePostgresqlInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClonePostgresqlInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_password: str,
                 vm_name: str,
                 dbserver_description: Optional[str] = None,
                 post_clone_cmd: Optional[str] = None,
                 pre_clone_cmd: Optional[str] = None):
        """
        :param str db_password: password of the postgres superuser.
        :param str vm_name: name for the database server VM.
        :param str dbserver_description: description for the dbserver.
        :param str post_clone_cmd: OS command that you want to run after the instance is created.
        :param str pre_clone_cmd: OS command that you want to run before the instance is created.
        """
        pulumi.set(__self__, "db_password", db_password)
        pulumi.set(__self__, "vm_name", vm_name)
        if dbserver_description is not None:
            pulumi.set(__self__, "dbserver_description", dbserver_description)
        if post_clone_cmd is not None:
            pulumi.set(__self__, "post_clone_cmd", post_clone_cmd)
        if pre_clone_cmd is not None:
            pulumi.set(__self__, "pre_clone_cmd", pre_clone_cmd)

    @property
    @pulumi.getter(name="dbPassword")
    def db_password(self) -> str:
        """
        password of the postgres superuser.
        """
        return pulumi.get(self, "db_password")

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> str:
        """
        name for the database server VM.
        """
        return pulumi.get(self, "vm_name")

    @property
    @pulumi.getter(name="dbserverDescription")
    def dbserver_description(self) -> Optional[str]:
        """
        description for the dbserver.
        """
        return pulumi.get(self, "dbserver_description")

    @property
    @pulumi.getter(name="postCloneCmd")
    def post_clone_cmd(self) -> Optional[str]:
        """
        OS command that you want to run after the instance is created.
        """
        return pulumi.get(self, "post_clone_cmd")

    @property
    @pulumi.getter(name="preCloneCmd")
    def pre_clone_cmd(self) -> Optional[str]:
        """
        OS command that you want to run before the instance is created.
        """
        return pulumi.get(self, "pre_clone_cmd")


@pulumi.output_type
class NdbCloneProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: database instance name
        :param str value: - (Required) value for argument
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbCloneTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbCloneTimeMachine(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "databaseId":
            suggest = "database_id"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "eaStatus":
            suggest = "ea_status"
        elif key == "scheduleId":
            suggest = "schedule_id"
        elif key == "slaId":
            suggest = "sla_id"
        elif key == "slaUpdateInProgress":
            suggest = "sla_update_in_progress"
        elif key == "slaUpdateMetadata":
            suggest = "sla_update_metadata"
        elif key == "sourceNxClusters":
            suggest = "source_nx_clusters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneTimeMachine. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneTimeMachine.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneTimeMachine.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: Optional[str] = None,
                 clone: Optional[bool] = None,
                 clones: Optional[str] = None,
                 clustered: Optional[bool] = None,
                 database: Optional[str] = None,
                 database_id: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 ea_status: Optional[str] = None,
                 id: Optional[str] = None,
                 metric: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Sequence['outputs.NdbCloneTimeMachineProperty']] = None,
                 schedule_id: Optional[str] = None,
                 schedules: Optional[Sequence['outputs.NdbCloneTimeMachineSchedule']] = None,
                 scope: Optional[str] = None,
                 sla_id: Optional[str] = None,
                 sla_update_in_progress: Optional[bool] = None,
                 sla_update_metadata: Optional[str] = None,
                 slas: Optional[Sequence['outputs.NdbCloneTimeMachineSla']] = None,
                 source_nx_clusters: Optional[Sequence[str]] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.NdbCloneTimeMachineTag']] = None,
                 type: Optional[str] = None):
        """
        :param bool clone: cloned or not
        :param bool clustered: clone will be clustered or not
        :param str date_created: date created for clone
        :param str date_modified: last modified date for clone
        :param str description: database instance description
        :param str metric: Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        :param str name: database instance name
        :param Sequence['NdbCloneTimeMachinePropertyArgs'] properties: List of all the properties
        :param str status: status of clone
        :param Sequence['NdbCloneTimeMachineTagArgs'] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        :param str type: type of clone
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if clone is not None:
            pulumi.set(__self__, "clone", clone)
        if clones is not None:
            pulumi.set(__self__, "clones", clones)
        if clustered is not None:
            pulumi.set(__self__, "clustered", clustered)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ea_status is not None:
            pulumi.set(__self__, "ea_status", ea_status)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)
        if sla_update_in_progress is not None:
            pulumi.set(__self__, "sla_update_in_progress", sla_update_in_progress)
        if sla_update_metadata is not None:
            pulumi.set(__self__, "sla_update_metadata", sla_update_metadata)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if source_nx_clusters is not None:
            pulumi.set(__self__, "source_nx_clusters", source_nx_clusters)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[str]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter
    def clone(self) -> Optional[bool]:
        """
        cloned or not
        """
        return pulumi.get(self, "clone")

    @property
    @pulumi.getter
    def clones(self) -> Optional[str]:
        return pulumi.get(self, "clones")

    @property
    @pulumi.getter
    def clustered(self) -> Optional[bool]:
        """
        clone will be clustered or not
        """
        return pulumi.get(self, "clustered")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        database instance description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eaStatus")
    def ea_status(self) -> Optional[str]:
        return pulumi.get(self, "ea_status")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbCloneTimeMachineProperty']]:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[str]:
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter
    def schedules(self) -> Optional[Sequence['outputs.NdbCloneTimeMachineSchedule']]:
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[str]:
        return pulumi.get(self, "sla_id")

    @property
    @pulumi.getter(name="slaUpdateInProgress")
    def sla_update_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "sla_update_in_progress")

    @property
    @pulumi.getter(name="slaUpdateMetadata")
    def sla_update_metadata(self) -> Optional[str]:
        return pulumi.get(self, "sla_update_metadata")

    @property
    @pulumi.getter
    def slas(self) -> Optional[Sequence['outputs.NdbCloneTimeMachineSla']]:
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter(name="sourceNxClusters")
    def source_nx_clusters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_nx_clusters")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of clone
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.NdbCloneTimeMachineTag']]:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of clone
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NdbCloneTimeMachineProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneTimeMachineProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneTimeMachineProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneTimeMachineProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str description: database instance description
        :param str name: database instance name
        :param str value: - (Required) value for argument
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        database instance description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbCloneTimeMachineSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continuousSchedules":
            suggest = "continuous_schedules"
        elif key == "dailySchedules":
            suggest = "daily_schedules"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "globalPolicy":
            suggest = "global_policy"
        elif key == "monthlySchedules":
            suggest = "monthly_schedules"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "quartelySchedules":
            suggest = "quartely_schedules"
        elif key == "referenceCount":
            suggest = "reference_count"
        elif key == "snapshotTimeOfDays":
            suggest = "snapshot_time_of_days"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "systemPolicy":
            suggest = "system_policy"
        elif key == "timeZone":
            suggest = "time_zone"
        elif key == "uniqueName":
            suggest = "unique_name"
        elif key == "weeklySchedules":
            suggest = "weekly_schedules"
        elif key == "yearlySchedules":
            suggest = "yearly_schedules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneTimeMachineSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneTimeMachineSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneTimeMachineSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continuous_schedules: Optional[Sequence['outputs.NdbCloneTimeMachineScheduleContinuousSchedule']] = None,
                 daily_schedules: Optional[Sequence['outputs.NdbCloneTimeMachineScheduleDailySchedule']] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 global_policy: Optional[bool] = None,
                 id: Optional[str] = None,
                 monthly_schedules: Optional[Sequence['outputs.NdbCloneTimeMachineScheduleMonthlySchedule']] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 quartely_schedules: Optional[Sequence['outputs.NdbCloneTimeMachineScheduleQuartelySchedule']] = None,
                 reference_count: Optional[int] = None,
                 snapshot_time_of_days: Optional[Sequence['outputs.NdbCloneTimeMachineScheduleSnapshotTimeOfDay']] = None,
                 start_time: Optional[str] = None,
                 system_policy: Optional[bool] = None,
                 time_zone: Optional[str] = None,
                 unique_name: Optional[str] = None,
                 weekly_schedules: Optional[Sequence['outputs.NdbCloneTimeMachineScheduleWeeklySchedule']] = None,
                 yearly_schedules: Optional[Sequence['outputs.NdbCloneTimeMachineScheduleYearlySchedule']] = None):
        """
        :param str date_created: date created for clone
        :param str date_modified: last modified date for clone
        :param str description: database instance description
        :param str name: database instance name
        :param str time_zone: timezone
        """
        if continuous_schedules is not None:
            pulumi.set(__self__, "continuous_schedules", continuous_schedules)
        if daily_schedules is not None:
            pulumi.set(__self__, "daily_schedules", daily_schedules)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if global_policy is not None:
            pulumi.set(__self__, "global_policy", global_policy)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_schedules is not None:
            pulumi.set(__self__, "monthly_schedules", monthly_schedules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if quartely_schedules is not None:
            pulumi.set(__self__, "quartely_schedules", quartely_schedules)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if snapshot_time_of_days is not None:
            pulumi.set(__self__, "snapshot_time_of_days", snapshot_time_of_days)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if system_policy is not None:
            pulumi.set(__self__, "system_policy", system_policy)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_schedules is not None:
            pulumi.set(__self__, "weekly_schedules", weekly_schedules)
        if yearly_schedules is not None:
            pulumi.set(__self__, "yearly_schedules", yearly_schedules)

    @property
    @pulumi.getter(name="continuousSchedules")
    def continuous_schedules(self) -> Optional[Sequence['outputs.NdbCloneTimeMachineScheduleContinuousSchedule']]:
        return pulumi.get(self, "continuous_schedules")

    @property
    @pulumi.getter(name="dailySchedules")
    def daily_schedules(self) -> Optional[Sequence['outputs.NdbCloneTimeMachineScheduleDailySchedule']]:
        return pulumi.get(self, "daily_schedules")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        database instance description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="globalPolicy")
    def global_policy(self) -> Optional[bool]:
        return pulumi.get(self, "global_policy")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlySchedules")
    def monthly_schedules(self) -> Optional[Sequence['outputs.NdbCloneTimeMachineScheduleMonthlySchedule']]:
        return pulumi.get(self, "monthly_schedules")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="quartelySchedules")
    def quartely_schedules(self) -> Optional[Sequence['outputs.NdbCloneTimeMachineScheduleQuartelySchedule']]:
        return pulumi.get(self, "quartely_schedules")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[int]:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="snapshotTimeOfDays")
    def snapshot_time_of_days(self) -> Optional[Sequence['outputs.NdbCloneTimeMachineScheduleSnapshotTimeOfDay']]:
        return pulumi.get(self, "snapshot_time_of_days")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="systemPolicy")
    def system_policy(self) -> Optional[bool]:
        return pulumi.get(self, "system_policy")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        """
        timezone
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[str]:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklySchedules")
    def weekly_schedules(self) -> Optional[Sequence['outputs.NdbCloneTimeMachineScheduleWeeklySchedule']]:
        return pulumi.get(self, "weekly_schedules")

    @property
    @pulumi.getter(name="yearlySchedules")
    def yearly_schedules(self) -> Optional[Sequence['outputs.NdbCloneTimeMachineScheduleYearlySchedule']]:
        return pulumi.get(self, "yearly_schedules")


@pulumi.output_type
class NdbCloneTimeMachineScheduleContinuousSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logBackupInterval":
            suggest = "log_backup_interval"
        elif key == "snapshotsPerDay":
            suggest = "snapshots_per_day"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneTimeMachineScheduleContinuousSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneTimeMachineScheduleContinuousSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneTimeMachineScheduleContinuousSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 log_backup_interval: Optional[int] = None,
                 snapshots_per_day: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_backup_interval is not None:
            pulumi.set(__self__, "log_backup_interval", log_backup_interval)
        if snapshots_per_day is not None:
            pulumi.set(__self__, "snapshots_per_day", snapshots_per_day)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logBackupInterval")
    def log_backup_interval(self) -> Optional[int]:
        return pulumi.get(self, "log_backup_interval")

    @property
    @pulumi.getter(name="snapshotsPerDay")
    def snapshots_per_day(self) -> Optional[int]:
        return pulumi.get(self, "snapshots_per_day")


@pulumi.output_type
class NdbCloneTimeMachineScheduleDailySchedule(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbCloneTimeMachineScheduleMonthlySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfMonth":
            suggest = "day_of_month"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneTimeMachineScheduleMonthlySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneTimeMachineScheduleMonthlySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneTimeMachineScheduleMonthlySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_month: Optional[int] = None,
                 enabled: Optional[bool] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbCloneTimeMachineScheduleQuartelySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfMonth":
            suggest = "day_of_month"
        elif key == "startMonth":
            suggest = "start_month"
        elif key == "startMonthValue":
            suggest = "start_month_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneTimeMachineScheduleQuartelySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneTimeMachineScheduleQuartelySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneTimeMachineScheduleQuartelySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_month: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 start_month: Optional[str] = None,
                 start_month_value: Optional[str] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if start_month is not None:
            pulumi.set(__self__, "start_month", start_month)
        if start_month_value is not None:
            pulumi.set(__self__, "start_month_value", start_month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="startMonth")
    def start_month(self) -> Optional[str]:
        return pulumi.get(self, "start_month")

    @property
    @pulumi.getter(name="startMonthValue")
    def start_month_value(self) -> Optional[str]:
        return pulumi.get(self, "start_month_value")


@pulumi.output_type
class NdbCloneTimeMachineScheduleSnapshotTimeOfDay(dict):
    def __init__(__self__, *,
                 extra: Optional[bool] = None,
                 hours: Optional[int] = None,
                 minutes: Optional[int] = None,
                 seconds: Optional[int] = None):
        if extra is not None:
            pulumi.set(__self__, "extra", extra)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def extra(self) -> Optional[bool]:
        return pulumi.get(self, "extra")

    @property
    @pulumi.getter
    def hours(self) -> Optional[int]:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> Optional[int]:
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def seconds(self) -> Optional[int]:
        return pulumi.get(self, "seconds")


@pulumi.output_type
class NdbCloneTimeMachineScheduleWeeklySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfWeek":
            suggest = "day_of_week"
        elif key == "dayOfWeekValue":
            suggest = "day_of_week_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneTimeMachineScheduleWeeklySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneTimeMachineScheduleWeeklySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneTimeMachineScheduleWeeklySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_week: Optional[str] = None,
                 day_of_week_value: Optional[str] = None,
                 enabled: Optional[bool] = None):
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if day_of_week_value is not None:
            pulumi.set(__self__, "day_of_week_value", day_of_week_value)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="dayOfWeekValue")
    def day_of_week_value(self) -> Optional[str]:
        return pulumi.get(self, "day_of_week_value")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbCloneTimeMachineScheduleYearlySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfMonth":
            suggest = "day_of_month"
        elif key == "monthValue":
            suggest = "month_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneTimeMachineScheduleYearlySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneTimeMachineScheduleYearlySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneTimeMachineScheduleYearlySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_month: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 month: Optional[str] = None,
                 month_value: Optional[str] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if month_value is not None:
            pulumi.set(__self__, "month_value", month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def month(self) -> Optional[str]:
        return pulumi.get(self, "month")

    @property
    @pulumi.getter(name="monthValue")
    def month_value(self) -> Optional[str]:
        return pulumi.get(self, "month_value")


@pulumi.output_type
class NdbCloneTimeMachineSla(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continuousRetention":
            suggest = "continuous_retention"
        elif key == "currentActiveFrequency":
            suggest = "current_active_frequency"
        elif key == "dailyRetention":
            suggest = "daily_retention"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "monthlyRetention":
            suggest = "monthly_retention"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "pitrEnabled":
            suggest = "pitr_enabled"
        elif key == "quarterlyRetention":
            suggest = "quarterly_retention"
        elif key == "referenceCount":
            suggest = "reference_count"
        elif key == "systemSla":
            suggest = "system_sla"
        elif key == "uniqueName":
            suggest = "unique_name"
        elif key == "weeklyRetention":
            suggest = "weekly_retention"
        elif key == "yearlyRetention":
            suggest = "yearly_retention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneTimeMachineSla. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneTimeMachineSla.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneTimeMachineSla.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continuous_retention: Optional[int] = None,
                 current_active_frequency: Optional[str] = None,
                 daily_retention: Optional[int] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 monthly_retention: Optional[int] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 pitr_enabled: Optional[bool] = None,
                 quarterly_retention: Optional[int] = None,
                 reference_count: Optional[int] = None,
                 system_sla: Optional[bool] = None,
                 unique_name: Optional[str] = None,
                 weekly_retention: Optional[int] = None,
                 yearly_retention: Optional[int] = None):
        """
        :param str date_created: date created for clone
        :param str date_modified: last modified date for clone
        :param str description: database instance description
        :param str name: database instance name
        """
        if continuous_retention is not None:
            pulumi.set(__self__, "continuous_retention", continuous_retention)
        if current_active_frequency is not None:
            pulumi.set(__self__, "current_active_frequency", current_active_frequency)
        if daily_retention is not None:
            pulumi.set(__self__, "daily_retention", daily_retention)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_retention is not None:
            pulumi.set(__self__, "monthly_retention", monthly_retention)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if pitr_enabled is not None:
            pulumi.set(__self__, "pitr_enabled", pitr_enabled)
        if quarterly_retention is not None:
            pulumi.set(__self__, "quarterly_retention", quarterly_retention)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if system_sla is not None:
            pulumi.set(__self__, "system_sla", system_sla)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_retention is not None:
            pulumi.set(__self__, "weekly_retention", weekly_retention)
        if yearly_retention is not None:
            pulumi.set(__self__, "yearly_retention", yearly_retention)

    @property
    @pulumi.getter(name="continuousRetention")
    def continuous_retention(self) -> Optional[int]:
        return pulumi.get(self, "continuous_retention")

    @property
    @pulumi.getter(name="currentActiveFrequency")
    def current_active_frequency(self) -> Optional[str]:
        return pulumi.get(self, "current_active_frequency")

    @property
    @pulumi.getter(name="dailyRetention")
    def daily_retention(self) -> Optional[int]:
        return pulumi.get(self, "daily_retention")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        database instance description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlyRetention")
    def monthly_retention(self) -> Optional[int]:
        return pulumi.get(self, "monthly_retention")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        database instance name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="pitrEnabled")
    def pitr_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "pitr_enabled")

    @property
    @pulumi.getter(name="quarterlyRetention")
    def quarterly_retention(self) -> Optional[int]:
        return pulumi.get(self, "quarterly_retention")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[int]:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="systemSla")
    def system_sla(self) -> Optional[bool]:
        return pulumi.get(self, "system_sla")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[str]:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklyRetention")
    def weekly_retention(self) -> Optional[int]:
        return pulumi.get(self, "weekly_retention")

    @property
    @pulumi.getter(name="yearlyRetention")
    def yearly_retention(self) -> Optional[int]:
        return pulumi.get(self, "yearly_retention")


@pulumi.output_type
class NdbCloneTimeMachineTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbCloneTimeMachineTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbCloneTimeMachineTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbCloneTimeMachineTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbClusterAgentNetworkInfo(dict):
    def __init__(__self__, *,
                 dns: Optional[str] = None,
                 ntp: Optional[str] = None):
        """
        :param str dns: string of DNS servers(comma separted).
        :param str ntp: string of NTP servers(comma separted).
        """
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if ntp is not None:
            pulumi.set(__self__, "ntp", ntp)

    @property
    @pulumi.getter
    def dns(self) -> Optional[str]:
        """
        string of DNS servers(comma separted).
        """
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter
    def ntp(self) -> Optional[str]:
        """
        string of NTP servers(comma separted).
        """
        return pulumi.get(self, "ntp")


@pulumi.output_type
class NdbClusterEntityCount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbServers":
            suggest = "db_servers"
        elif key == "engineCounts":
            suggest = "engine_counts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClusterEntityCount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClusterEntityCount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClusterEntityCount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_servers: Optional[int] = None,
                 engine_counts: Optional[Sequence['outputs.NdbClusterEntityCountEngineCount']] = None):
        if db_servers is not None:
            pulumi.set(__self__, "db_servers", db_servers)
        if engine_counts is not None:
            pulumi.set(__self__, "engine_counts", engine_counts)

    @property
    @pulumi.getter(name="dbServers")
    def db_servers(self) -> Optional[int]:
        return pulumi.get(self, "db_servers")

    @property
    @pulumi.getter(name="engineCounts")
    def engine_counts(self) -> Optional[Sequence['outputs.NdbClusterEntityCountEngineCount']]:
        return pulumi.get(self, "engine_counts")


@pulumi.output_type
class NdbClusterEntityCountEngineCount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mariadbDatabases":
            suggest = "mariadb_databases"
        elif key == "mongodbDatabases":
            suggest = "mongodb_databases"
        elif key == "mysqlDatabases":
            suggest = "mysql_databases"
        elif key == "oracleDatabases":
            suggest = "oracle_databases"
        elif key == "postgresDatabases":
            suggest = "postgres_databases"
        elif key == "saphanaDatabases":
            suggest = "saphana_databases"
        elif key == "sqlserverDatabases":
            suggest = "sqlserver_databases"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClusterEntityCountEngineCount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClusterEntityCountEngineCount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClusterEntityCountEngineCount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mariadb_databases: Optional[Sequence['outputs.NdbClusterEntityCountEngineCountMariadbDatabase']] = None,
                 mongodb_databases: Optional[Sequence['outputs.NdbClusterEntityCountEngineCountMongodbDatabase']] = None,
                 mysql_databases: Optional[Sequence['outputs.NdbClusterEntityCountEngineCountMysqlDatabase']] = None,
                 oracle_databases: Optional[Sequence['outputs.NdbClusterEntityCountEngineCountOracleDatabase']] = None,
                 postgres_databases: Optional[Sequence['outputs.NdbClusterEntityCountEngineCountPostgresDatabase']] = None,
                 saphana_databases: Optional[Sequence['outputs.NdbClusterEntityCountEngineCountSaphanaDatabase']] = None,
                 sqlserver_databases: Optional[Sequence['outputs.NdbClusterEntityCountEngineCountSqlserverDatabase']] = None):
        if mariadb_databases is not None:
            pulumi.set(__self__, "mariadb_databases", mariadb_databases)
        if mongodb_databases is not None:
            pulumi.set(__self__, "mongodb_databases", mongodb_databases)
        if mysql_databases is not None:
            pulumi.set(__self__, "mysql_databases", mysql_databases)
        if oracle_databases is not None:
            pulumi.set(__self__, "oracle_databases", oracle_databases)
        if postgres_databases is not None:
            pulumi.set(__self__, "postgres_databases", postgres_databases)
        if saphana_databases is not None:
            pulumi.set(__self__, "saphana_databases", saphana_databases)
        if sqlserver_databases is not None:
            pulumi.set(__self__, "sqlserver_databases", sqlserver_databases)

    @property
    @pulumi.getter(name="mariadbDatabases")
    def mariadb_databases(self) -> Optional[Sequence['outputs.NdbClusterEntityCountEngineCountMariadbDatabase']]:
        return pulumi.get(self, "mariadb_databases")

    @property
    @pulumi.getter(name="mongodbDatabases")
    def mongodb_databases(self) -> Optional[Sequence['outputs.NdbClusterEntityCountEngineCountMongodbDatabase']]:
        return pulumi.get(self, "mongodb_databases")

    @property
    @pulumi.getter(name="mysqlDatabases")
    def mysql_databases(self) -> Optional[Sequence['outputs.NdbClusterEntityCountEngineCountMysqlDatabase']]:
        return pulumi.get(self, "mysql_databases")

    @property
    @pulumi.getter(name="oracleDatabases")
    def oracle_databases(self) -> Optional[Sequence['outputs.NdbClusterEntityCountEngineCountOracleDatabase']]:
        return pulumi.get(self, "oracle_databases")

    @property
    @pulumi.getter(name="postgresDatabases")
    def postgres_databases(self) -> Optional[Sequence['outputs.NdbClusterEntityCountEngineCountPostgresDatabase']]:
        return pulumi.get(self, "postgres_databases")

    @property
    @pulumi.getter(name="saphanaDatabases")
    def saphana_databases(self) -> Optional[Sequence['outputs.NdbClusterEntityCountEngineCountSaphanaDatabase']]:
        return pulumi.get(self, "saphana_databases")

    @property
    @pulumi.getter(name="sqlserverDatabases")
    def sqlserver_databases(self) -> Optional[Sequence['outputs.NdbClusterEntityCountEngineCountSqlserverDatabase']]:
        return pulumi.get(self, "sqlserver_databases")


@pulumi.output_type
class NdbClusterEntityCountEngineCountMariadbDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeMachines":
            suggest = "time_machines"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClusterEntityCountEngineCountMariadbDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClusterEntityCountEngineCountMariadbDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClusterEntityCountEngineCountMariadbDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 profiles: Optional[Sequence['outputs.NdbClusterEntityCountEngineCountMariadbDatabaseProfile']] = None,
                 time_machines: Optional[int] = None):
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if time_machines is not None:
            pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence['outputs.NdbClusterEntityCountEngineCountMariadbDatabaseProfile']]:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> Optional[int]:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class NdbClusterEntityCountEngineCountMariadbDatabaseProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseParameter":
            suggest = "database_parameter"
        elif key == "windowsDomain":
            suggest = "windows_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClusterEntityCountEngineCountMariadbDatabaseProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClusterEntityCountEngineCountMariadbDatabaseProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClusterEntityCountEngineCountMariadbDatabaseProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute: Optional[int] = None,
                 database_parameter: Optional[int] = None,
                 network: Optional[int] = None,
                 software: Optional[int] = None,
                 storage: Optional[int] = None,
                 windows_domain: Optional[int] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if database_parameter is not None:
            pulumi.set(__self__, "database_parameter", database_parameter)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if software is not None:
            pulumi.set(__self__, "software", software)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if windows_domain is not None:
            pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> Optional[int]:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> Optional[int]:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> Optional[int]:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> Optional[int]:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> Optional[int]:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> Optional[int]:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class NdbClusterEntityCountEngineCountMongodbDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeMachines":
            suggest = "time_machines"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClusterEntityCountEngineCountMongodbDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClusterEntityCountEngineCountMongodbDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClusterEntityCountEngineCountMongodbDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 profiles: Optional[Sequence['outputs.NdbClusterEntityCountEngineCountMongodbDatabaseProfile']] = None,
                 time_machines: Optional[int] = None):
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if time_machines is not None:
            pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence['outputs.NdbClusterEntityCountEngineCountMongodbDatabaseProfile']]:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> Optional[int]:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class NdbClusterEntityCountEngineCountMongodbDatabaseProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseParameter":
            suggest = "database_parameter"
        elif key == "windowsDomain":
            suggest = "windows_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClusterEntityCountEngineCountMongodbDatabaseProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClusterEntityCountEngineCountMongodbDatabaseProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClusterEntityCountEngineCountMongodbDatabaseProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute: Optional[int] = None,
                 database_parameter: Optional[int] = None,
                 network: Optional[int] = None,
                 software: Optional[int] = None,
                 storage: Optional[int] = None,
                 windows_domain: Optional[int] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if database_parameter is not None:
            pulumi.set(__self__, "database_parameter", database_parameter)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if software is not None:
            pulumi.set(__self__, "software", software)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if windows_domain is not None:
            pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> Optional[int]:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> Optional[int]:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> Optional[int]:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> Optional[int]:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> Optional[int]:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> Optional[int]:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class NdbClusterEntityCountEngineCountMysqlDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeMachines":
            suggest = "time_machines"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClusterEntityCountEngineCountMysqlDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClusterEntityCountEngineCountMysqlDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClusterEntityCountEngineCountMysqlDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 profiles: Optional[Sequence['outputs.NdbClusterEntityCountEngineCountMysqlDatabaseProfile']] = None,
                 time_machines: Optional[int] = None):
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if time_machines is not None:
            pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence['outputs.NdbClusterEntityCountEngineCountMysqlDatabaseProfile']]:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> Optional[int]:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class NdbClusterEntityCountEngineCountMysqlDatabaseProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseParameter":
            suggest = "database_parameter"
        elif key == "windowsDomain":
            suggest = "windows_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClusterEntityCountEngineCountMysqlDatabaseProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClusterEntityCountEngineCountMysqlDatabaseProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClusterEntityCountEngineCountMysqlDatabaseProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute: Optional[int] = None,
                 database_parameter: Optional[int] = None,
                 network: Optional[int] = None,
                 software: Optional[int] = None,
                 storage: Optional[int] = None,
                 windows_domain: Optional[int] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if database_parameter is not None:
            pulumi.set(__self__, "database_parameter", database_parameter)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if software is not None:
            pulumi.set(__self__, "software", software)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if windows_domain is not None:
            pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> Optional[int]:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> Optional[int]:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> Optional[int]:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> Optional[int]:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> Optional[int]:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> Optional[int]:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class NdbClusterEntityCountEngineCountOracleDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeMachines":
            suggest = "time_machines"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClusterEntityCountEngineCountOracleDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClusterEntityCountEngineCountOracleDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClusterEntityCountEngineCountOracleDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 profiles: Optional[Sequence['outputs.NdbClusterEntityCountEngineCountOracleDatabaseProfile']] = None,
                 time_machines: Optional[int] = None):
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if time_machines is not None:
            pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence['outputs.NdbClusterEntityCountEngineCountOracleDatabaseProfile']]:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> Optional[int]:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class NdbClusterEntityCountEngineCountOracleDatabaseProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseParameter":
            suggest = "database_parameter"
        elif key == "windowsDomain":
            suggest = "windows_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClusterEntityCountEngineCountOracleDatabaseProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClusterEntityCountEngineCountOracleDatabaseProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClusterEntityCountEngineCountOracleDatabaseProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute: Optional[int] = None,
                 database_parameter: Optional[int] = None,
                 network: Optional[int] = None,
                 software: Optional[int] = None,
                 storage: Optional[int] = None,
                 windows_domain: Optional[int] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if database_parameter is not None:
            pulumi.set(__self__, "database_parameter", database_parameter)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if software is not None:
            pulumi.set(__self__, "software", software)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if windows_domain is not None:
            pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> Optional[int]:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> Optional[int]:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> Optional[int]:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> Optional[int]:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> Optional[int]:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> Optional[int]:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class NdbClusterEntityCountEngineCountPostgresDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeMachines":
            suggest = "time_machines"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClusterEntityCountEngineCountPostgresDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClusterEntityCountEngineCountPostgresDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClusterEntityCountEngineCountPostgresDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 profiles: Optional[Sequence['outputs.NdbClusterEntityCountEngineCountPostgresDatabaseProfile']] = None,
                 time_machines: Optional[int] = None):
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if time_machines is not None:
            pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence['outputs.NdbClusterEntityCountEngineCountPostgresDatabaseProfile']]:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> Optional[int]:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class NdbClusterEntityCountEngineCountPostgresDatabaseProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseParameter":
            suggest = "database_parameter"
        elif key == "windowsDomain":
            suggest = "windows_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClusterEntityCountEngineCountPostgresDatabaseProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClusterEntityCountEngineCountPostgresDatabaseProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClusterEntityCountEngineCountPostgresDatabaseProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute: Optional[int] = None,
                 database_parameter: Optional[int] = None,
                 network: Optional[int] = None,
                 software: Optional[int] = None,
                 storage: Optional[int] = None,
                 windows_domain: Optional[int] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if database_parameter is not None:
            pulumi.set(__self__, "database_parameter", database_parameter)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if software is not None:
            pulumi.set(__self__, "software", software)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if windows_domain is not None:
            pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> Optional[int]:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> Optional[int]:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> Optional[int]:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> Optional[int]:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> Optional[int]:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> Optional[int]:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class NdbClusterEntityCountEngineCountSaphanaDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeMachines":
            suggest = "time_machines"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClusterEntityCountEngineCountSaphanaDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClusterEntityCountEngineCountSaphanaDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClusterEntityCountEngineCountSaphanaDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 profiles: Optional[Sequence['outputs.NdbClusterEntityCountEngineCountSaphanaDatabaseProfile']] = None,
                 time_machines: Optional[int] = None):
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if time_machines is not None:
            pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence['outputs.NdbClusterEntityCountEngineCountSaphanaDatabaseProfile']]:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> Optional[int]:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class NdbClusterEntityCountEngineCountSaphanaDatabaseProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseParameter":
            suggest = "database_parameter"
        elif key == "windowsDomain":
            suggest = "windows_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClusterEntityCountEngineCountSaphanaDatabaseProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClusterEntityCountEngineCountSaphanaDatabaseProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClusterEntityCountEngineCountSaphanaDatabaseProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute: Optional[int] = None,
                 database_parameter: Optional[int] = None,
                 network: Optional[int] = None,
                 software: Optional[int] = None,
                 storage: Optional[int] = None,
                 windows_domain: Optional[int] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if database_parameter is not None:
            pulumi.set(__self__, "database_parameter", database_parameter)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if software is not None:
            pulumi.set(__self__, "software", software)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if windows_domain is not None:
            pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> Optional[int]:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> Optional[int]:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> Optional[int]:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> Optional[int]:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> Optional[int]:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> Optional[int]:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class NdbClusterEntityCountEngineCountSqlserverDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeMachines":
            suggest = "time_machines"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClusterEntityCountEngineCountSqlserverDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClusterEntityCountEngineCountSqlserverDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClusterEntityCountEngineCountSqlserverDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 profiles: Optional[Sequence['outputs.NdbClusterEntityCountEngineCountSqlserverDatabaseProfile']] = None,
                 time_machines: Optional[int] = None):
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if time_machines is not None:
            pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence['outputs.NdbClusterEntityCountEngineCountSqlserverDatabaseProfile']]:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> Optional[int]:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class NdbClusterEntityCountEngineCountSqlserverDatabaseProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseParameter":
            suggest = "database_parameter"
        elif key == "windowsDomain":
            suggest = "windows_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClusterEntityCountEngineCountSqlserverDatabaseProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClusterEntityCountEngineCountSqlserverDatabaseProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClusterEntityCountEngineCountSqlserverDatabaseProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute: Optional[int] = None,
                 database_parameter: Optional[int] = None,
                 network: Optional[int] = None,
                 software: Optional[int] = None,
                 storage: Optional[int] = None,
                 windows_domain: Optional[int] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if database_parameter is not None:
            pulumi.set(__self__, "database_parameter", database_parameter)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if software is not None:
            pulumi.set(__self__, "software", software)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if windows_domain is not None:
            pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> Optional[int]:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> Optional[int]:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> Optional[int]:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> Optional[int]:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> Optional[int]:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> Optional[int]:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class NdbClusterNetworksInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessTypes":
            suggest = "access_types"
        elif key == "networkInfos":
            suggest = "network_infos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClusterNetworksInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClusterNetworksInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClusterNetworksInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_types: Optional[Sequence[str]] = None,
                 network_infos: Optional[Sequence['outputs.NdbClusterNetworksInfoNetworkInfo']] = None,
                 type: Optional[str] = None):
        """
        :param Sequence[str] access_types: VLAN access types for which you want to configure network segmentation. Supports [PRISM, DSIP, DBSERVER ]. 
               Prism Element: Select this VLAN access type to configure a VLAN that the NDB agent VM can use to communicate with Prism.
               Prism iSCSI Data Service. Select this VLAN access type to configure a VLAN that the agent VM can use to make connection requests to the iSCSI data services IP.
               DBServer Access from NDB server. Select this VLAN access type to configure a VLAN that is used for communications between the NDB agent VM and the database server VM on the newly registered NDB server cluster.
        :param Sequence['NdbClusterNetworksInfoNetworkInfoArgs'] network_infos: network segmentation to segment the network traffic
        :param str type: type of vlan. Supported [DHCP, Static, IPAM]
        """
        if access_types is not None:
            pulumi.set(__self__, "access_types", access_types)
        if network_infos is not None:
            pulumi.set(__self__, "network_infos", network_infos)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessTypes")
    def access_types(self) -> Optional[Sequence[str]]:
        """
        VLAN access types for which you want to configure network segmentation. Supports [PRISM, DSIP, DBSERVER ]. 
        Prism Element: Select this VLAN access type to configure a VLAN that the NDB agent VM can use to communicate with Prism.
        Prism iSCSI Data Service. Select this VLAN access type to configure a VLAN that the agent VM can use to make connection requests to the iSCSI data services IP.
        DBServer Access from NDB server. Select this VLAN access type to configure a VLAN that is used for communications between the NDB agent VM and the database server VM on the newly registered NDB server cluster.
        """
        return pulumi.get(self, "access_types")

    @property
    @pulumi.getter(name="networkInfos")
    def network_infos(self) -> Optional[Sequence['outputs.NdbClusterNetworksInfoNetworkInfo']]:
        """
        network segmentation to segment the network traffic
        """
        return pulumi.get(self, "network_infos")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of vlan. Supported [DHCP, Static, IPAM]
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NdbClusterNetworksInfoNetworkInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "staticIp":
            suggest = "static_ip"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "vlanName":
            suggest = "vlan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClusterNetworksInfoNetworkInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClusterNetworksInfoNetworkInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClusterNetworksInfoNetworkInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: Optional[str] = None,
                 static_ip: Optional[str] = None,
                 subnet_mask: Optional[str] = None,
                 vlan_name: Optional[str] = None):
        """
        :param str gateway: gateway of agent network
        :param str static_ip: static ip of agent network
        :param str subnet_mask: subnet mask of agent network
        :param str vlan_name: vlan name
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if static_ip is not None:
            pulumi.set(__self__, "static_ip", static_ip)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        gateway of agent network
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="staticIp")
    def static_ip(self) -> Optional[str]:
        """
        static ip of agent network
        """
        return pulumi.get(self, "static_ip")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[str]:
        """
        subnet mask of agent network
        """
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[str]:
        """
        vlan name
        """
        return pulumi.get(self, "vlan_name")


@pulumi.output_type
class NdbClusterProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClusterProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClusterProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClusterProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str description: description of cluster
        :param str name: name of the cluster to be registered
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of cluster
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the cluster to be registered
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbClusterResourceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryThresholdPercentage":
            suggest = "memory_threshold_percentage"
        elif key == "storageThresholdPercentage":
            suggest = "storage_threshold_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbClusterResourceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbClusterResourceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbClusterResourceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_threshold_percentage: Optional[float] = None,
                 storage_threshold_percentage: Optional[float] = None):
        if memory_threshold_percentage is not None:
            pulumi.set(__self__, "memory_threshold_percentage", memory_threshold_percentage)
        if storage_threshold_percentage is not None:
            pulumi.set(__self__, "storage_threshold_percentage", storage_threshold_percentage)

    @property
    @pulumi.getter(name="memoryThresholdPercentage")
    def memory_threshold_percentage(self) -> Optional[float]:
        return pulumi.get(self, "memory_threshold_percentage")

    @property
    @pulumi.getter(name="storageThresholdPercentage")
    def storage_threshold_percentage(self) -> Optional[float]:
        return pulumi.get(self, "storage_threshold_percentage")


@pulumi.output_type
class NdbDatabaseActionargument(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - (Required) name of argument
        :param str value: - (Required) value for argument
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) name of argument
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseClusterInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterIpInfos":
            suggest = "cluster_ip_infos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseClusterInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseClusterInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseClusterInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_ip_infos: Sequence['outputs.NdbDatabaseClusterInfoClusterIpInfo']):
        pulumi.set(__self__, "cluster_ip_infos", cluster_ip_infos)

    @property
    @pulumi.getter(name="clusterIpInfos")
    def cluster_ip_infos(self) -> Sequence['outputs.NdbDatabaseClusterInfoClusterIpInfo']:
        return pulumi.get(self, "cluster_ip_infos")


@pulumi.output_type
class NdbDatabaseClusterInfoClusterIpInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nxClusterId":
            suggest = "nx_cluster_id"
        elif key == "ipInfos":
            suggest = "ip_infos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseClusterInfoClusterIpInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseClusterInfoClusterIpInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseClusterInfoClusterIpInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nx_cluster_id: str,
                 ip_infos: Optional[Sequence['outputs.NdbDatabaseClusterInfoClusterIpInfoIpInfo']] = None):
        """
        :param str nx_cluster_id: - (Optional) cluster id.
        :param Sequence['NdbDatabaseClusterInfoClusterIpInfoIpInfoArgs'] ip_infos: - (Optional) IP infos for custom network profile.
        """
        pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        if ip_infos is not None:
            pulumi.set(__self__, "ip_infos", ip_infos)

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> str:
        """
        - (Optional) cluster id.
        """
        return pulumi.get(self, "nx_cluster_id")

    @property
    @pulumi.getter(name="ipInfos")
    def ip_infos(self) -> Optional[Sequence['outputs.NdbDatabaseClusterInfoClusterIpInfoIpInfo']]:
        """
        - (Optional) IP infos for custom network profile.
        """
        return pulumi.get(self, "ip_infos")


@pulumi.output_type
class NdbDatabaseClusterInfoClusterIpInfoIpInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddresses":
            suggest = "ip_addresses"
        elif key == "ipType":
            suggest = "ip_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseClusterInfoClusterIpInfoIpInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseClusterInfoClusterIpInfoIpInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseClusterInfoClusterIpInfoIpInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_addresses: Optional[Sequence[str]] = None,
                 ip_type: Optional[str] = None):
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ip_type is not None:
            pulumi.set(__self__, "ip_type", ip_type)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> Optional[str]:
        return pulumi.get(self, "ip_type")


@pulumi.output_type
class NdbDatabaseDatabaseNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "databaseId":
            suggest = "database_id"
        elif key == "databaseStatus":
            suggest = "database_status"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "dbserverId":
            suggest = "dbserver_id"
        elif key == "protectionDomainId":
            suggest = "protection_domain_id"
        elif key == "protectionDomains":
            suggest = "protection_domains"
        elif key == "softwareInstallationId":
            suggest = "software_installation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseDatabaseNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseDatabaseNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseDatabaseNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: Optional[Mapping[str, str]] = None,
                 database_id: Optional[str] = None,
                 database_status: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 dbserver: Optional[Mapping[str, str]] = None,
                 dbserver_id: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 infos: Optional[Sequence['outputs.NdbDatabaseDatabaseNodeInfo']] = None,
                 name: Optional[str] = None,
                 primary: Optional[bool] = None,
                 properties: Optional[Sequence['outputs.NdbDatabaseDatabaseNodeProperty']] = None,
                 protection_domain_id: Optional[str] = None,
                 protection_domains: Optional[Sequence['outputs.NdbDatabaseDatabaseNodeProtectionDomain']] = None,
                 software_installation_id: Optional[str] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.NdbDatabaseDatabaseNodeTag']] = None):
        """
        :param str description: - (Optional) The description
        :param str name: - (Required) Name of the instance.
        :param Sequence['NdbDatabaseDatabaseNodePropertyArgs'] properties: List of all the properties
        :param Sequence['NdbDatabaseDatabaseNodeTagArgs'] tags: - (Optional) tags
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if dbserver is not None:
            pulumi.set(__self__, "dbserver", dbserver)
        if dbserver_id is not None:
            pulumi.set(__self__, "dbserver_id", dbserver_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if protection_domain_id is not None:
            pulumi.set(__self__, "protection_domain_id", protection_domain_id)
        if protection_domains is not None:
            pulumi.set(__self__, "protection_domains", protection_domains)
        if software_installation_id is not None:
            pulumi.set(__self__, "software_installation_id", software_installation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[str]:
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def dbserver(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "dbserver")

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> Optional[str]:
        return pulumi.get(self, "dbserver_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.NdbDatabaseDatabaseNodeInfo']]:
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbDatabaseDatabaseNodeProperty']]:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="protectionDomainId")
    def protection_domain_id(self) -> Optional[str]:
        return pulumi.get(self, "protection_domain_id")

    @property
    @pulumi.getter(name="protectionDomains")
    def protection_domains(self) -> Optional[Sequence['outputs.NdbDatabaseDatabaseNodeProtectionDomain']]:
        return pulumi.get(self, "protection_domains")

    @property
    @pulumi.getter(name="softwareInstallationId")
    def software_installation_id(self) -> Optional[str]:
        return pulumi.get(self, "software_installation_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.NdbDatabaseDatabaseNodeTag']]:
        """
        - (Optional) tags
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class NdbDatabaseDatabaseNodeInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureInfo":
            suggest = "secure_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseDatabaseNodeInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseDatabaseNodeInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseDatabaseNodeInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 info: Optional[Mapping[str, str]] = None,
                 secure_info: Optional[Mapping[str, str]] = None):
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class NdbDatabaseDatabaseNodeProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseDatabaseNodeProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseDatabaseNodeProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseDatabaseNodeProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str description: - (Optional) The description
        :param str name: - (Required) Name of the instance.
        :param str value: - (Required) value for argument
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseDatabaseNodeProtectionDomain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assocEntities":
            suggest = "assoc_entities"
        elif key == "cloudId":
            suggest = "cloud_id"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "eraCreated":
            suggest = "era_created"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "primaryHost":
            suggest = "primary_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseDatabaseNodeProtectionDomain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseDatabaseNodeProtectionDomain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseDatabaseNodeProtectionDomain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assoc_entities: Optional[Sequence[str]] = None,
                 cloud_id: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 era_created: Optional[bool] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 primary_host: Optional[str] = None,
                 properties: Optional[Sequence['outputs.NdbDatabaseDatabaseNodeProtectionDomainProperty']] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str description: - (Optional) The description
        :param str name: - (Required) Name of the instance.
        :param Sequence['NdbDatabaseDatabaseNodeProtectionDomainPropertyArgs'] properties: List of all the properties
        """
        if assoc_entities is not None:
            pulumi.set(__self__, "assoc_entities", assoc_entities)
        if cloud_id is not None:
            pulumi.set(__self__, "cloud_id", cloud_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if era_created is not None:
            pulumi.set(__self__, "era_created", era_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if primary_host is not None:
            pulumi.set(__self__, "primary_host", primary_host)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assocEntities")
    def assoc_entities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "assoc_entities")

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> Optional[str]:
        return pulumi.get(self, "cloud_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eraCreated")
    def era_created(self) -> Optional[bool]:
        return pulumi.get(self, "era_created")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="primaryHost")
    def primary_host(self) -> Optional[str]:
        return pulumi.get(self, "primary_host")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbDatabaseDatabaseNodeProtectionDomainProperty']]:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class NdbDatabaseDatabaseNodeProtectionDomainProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseDatabaseNodeProtectionDomainProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseDatabaseNodeProtectionDomainProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseDatabaseNodeProtectionDomainProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str description: - (Optional) The description
        :param str name: - (Required) Name of the instance.
        :param str value: - (Required) value for argument
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseDatabaseNodeTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseDatabaseNodeTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseDatabaseNodeTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseDatabaseNodeTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bpgConfigs":
            suggest = "bpg_configs"
        elif key == "secureInfo":
            suggest = "secure_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bpg_configs: Optional[Sequence['outputs.NdbDatabaseInfoBpgConfig']] = None,
                 secure_info: Optional[Mapping[str, str]] = None):
        if bpg_configs is not None:
            pulumi.set(__self__, "bpg_configs", bpg_configs)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="bpgConfigs")
    def bpg_configs(self) -> Optional[Sequence['outputs.NdbDatabaseInfoBpgConfig']]:
        return pulumi.get(self, "bpg_configs")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class NdbDatabaseInfoBpgConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bpgDbParams":
            suggest = "bpg_db_params"
        elif key == "vmProperties":
            suggest = "vm_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseInfoBpgConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseInfoBpgConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseInfoBpgConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bpg_db_params: Optional[Sequence['outputs.NdbDatabaseInfoBpgConfigBpgDbParam']] = None,
                 storages: Optional[Sequence['outputs.NdbDatabaseInfoBpgConfigStorage']] = None,
                 vm_properties: Optional[Sequence['outputs.NdbDatabaseInfoBpgConfigVmProperty']] = None):
        if bpg_db_params is not None:
            pulumi.set(__self__, "bpg_db_params", bpg_db_params)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if vm_properties is not None:
            pulumi.set(__self__, "vm_properties", vm_properties)

    @property
    @pulumi.getter(name="bpgDbParams")
    def bpg_db_params(self) -> Optional[Sequence['outputs.NdbDatabaseInfoBpgConfigBpgDbParam']]:
        return pulumi.get(self, "bpg_db_params")

    @property
    @pulumi.getter
    def storages(self) -> Optional[Sequence['outputs.NdbDatabaseInfoBpgConfigStorage']]:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="vmProperties")
    def vm_properties(self) -> Optional[Sequence['outputs.NdbDatabaseInfoBpgConfigVmProperty']]:
        return pulumi.get(self, "vm_properties")


@pulumi.output_type
class NdbDatabaseInfoBpgConfigBpgDbParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "effectiveCacheSize":
            suggest = "effective_cache_size"
        elif key == "maintenanceWorkMem":
            suggest = "maintenance_work_mem"
        elif key == "maxParallelWorkersPerGather":
            suggest = "max_parallel_workers_per_gather"
        elif key == "maxWorkerProcesses":
            suggest = "max_worker_processes"
        elif key == "sharedBuffers":
            suggest = "shared_buffers"
        elif key == "workMem":
            suggest = "work_mem"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseInfoBpgConfigBpgDbParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseInfoBpgConfigBpgDbParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseInfoBpgConfigBpgDbParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 effective_cache_size: Optional[str] = None,
                 maintenance_work_mem: Optional[str] = None,
                 max_parallel_workers_per_gather: Optional[str] = None,
                 max_worker_processes: Optional[str] = None,
                 shared_buffers: Optional[str] = None,
                 work_mem: Optional[str] = None):
        if effective_cache_size is not None:
            pulumi.set(__self__, "effective_cache_size", effective_cache_size)
        if maintenance_work_mem is not None:
            pulumi.set(__self__, "maintenance_work_mem", maintenance_work_mem)
        if max_parallel_workers_per_gather is not None:
            pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if shared_buffers is not None:
            pulumi.set(__self__, "shared_buffers", shared_buffers)
        if work_mem is not None:
            pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="effectiveCacheSize")
    def effective_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "effective_cache_size")

    @property
    @pulumi.getter(name="maintenanceWorkMem")
    def maintenance_work_mem(self) -> Optional[str]:
        return pulumi.get(self, "maintenance_work_mem")

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> Optional[str]:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[str]:
        return pulumi.get(self, "max_worker_processes")

    @property
    @pulumi.getter(name="sharedBuffers")
    def shared_buffers(self) -> Optional[str]:
        return pulumi.get(self, "shared_buffers")

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> Optional[str]:
        return pulumi.get(self, "work_mem")


@pulumi.output_type
class NdbDatabaseInfoBpgConfigStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveStorages":
            suggest = "archive_storages"
        elif key == "dataDisks":
            suggest = "data_disks"
        elif key == "logDisks":
            suggest = "log_disks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseInfoBpgConfigStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseInfoBpgConfigStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseInfoBpgConfigStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_storages: Optional[Sequence['outputs.NdbDatabaseInfoBpgConfigStorageArchiveStorage']] = None,
                 data_disks: Optional[Sequence['outputs.NdbDatabaseInfoBpgConfigStorageDataDisk']] = None,
                 log_disks: Optional[Sequence['outputs.NdbDatabaseInfoBpgConfigStorageLogDisk']] = None):
        if archive_storages is not None:
            pulumi.set(__self__, "archive_storages", archive_storages)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if log_disks is not None:
            pulumi.set(__self__, "log_disks", log_disks)

    @property
    @pulumi.getter(name="archiveStorages")
    def archive_storages(self) -> Optional[Sequence['outputs.NdbDatabaseInfoBpgConfigStorageArchiveStorage']]:
        return pulumi.get(self, "archive_storages")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.NdbDatabaseInfoBpgConfigStorageDataDisk']]:
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="logDisks")
    def log_disks(self) -> Optional[Sequence['outputs.NdbDatabaseInfoBpgConfigStorageLogDisk']]:
        return pulumi.get(self, "log_disks")


@pulumi.output_type
class NdbDatabaseInfoBpgConfigStorageArchiveStorage(dict):
    def __init__(__self__, *,
                 size: Optional[float] = None):
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> Optional[float]:
        return pulumi.get(self, "size")


@pulumi.output_type
class NdbDatabaseInfoBpgConfigStorageDataDisk(dict):
    def __init__(__self__, *,
                 count: Optional[float] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> Optional[float]:
        return pulumi.get(self, "count")


@pulumi.output_type
class NdbDatabaseInfoBpgConfigStorageLogDisk(dict):
    def __init__(__self__, *,
                 count: Optional[float] = None,
                 size: Optional[float] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> Optional[float]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def size(self) -> Optional[float]:
        return pulumi.get(self, "size")


@pulumi.output_type
class NdbDatabaseInfoBpgConfigVmProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dirtyBackgroundRatio":
            suggest = "dirty_background_ratio"
        elif key == "dirtyExpireCentisecs":
            suggest = "dirty_expire_centisecs"
        elif key == "dirtyRatio":
            suggest = "dirty_ratio"
        elif key == "dirtyWritebackCentisecs":
            suggest = "dirty_writeback_centisecs"
        elif key == "nrHugepages":
            suggest = "nr_hugepages"
        elif key == "overcommitMemory":
            suggest = "overcommit_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseInfoBpgConfigVmProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseInfoBpgConfigVmProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseInfoBpgConfigVmProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dirty_background_ratio: Optional[float] = None,
                 dirty_expire_centisecs: Optional[float] = None,
                 dirty_ratio: Optional[float] = None,
                 dirty_writeback_centisecs: Optional[float] = None,
                 nr_hugepages: Optional[float] = None,
                 overcommit_memory: Optional[float] = None,
                 swappiness: Optional[float] = None):
        if dirty_background_ratio is not None:
            pulumi.set(__self__, "dirty_background_ratio", dirty_background_ratio)
        if dirty_expire_centisecs is not None:
            pulumi.set(__self__, "dirty_expire_centisecs", dirty_expire_centisecs)
        if dirty_ratio is not None:
            pulumi.set(__self__, "dirty_ratio", dirty_ratio)
        if dirty_writeback_centisecs is not None:
            pulumi.set(__self__, "dirty_writeback_centisecs", dirty_writeback_centisecs)
        if nr_hugepages is not None:
            pulumi.set(__self__, "nr_hugepages", nr_hugepages)
        if overcommit_memory is not None:
            pulumi.set(__self__, "overcommit_memory", overcommit_memory)
        if swappiness is not None:
            pulumi.set(__self__, "swappiness", swappiness)

    @property
    @pulumi.getter(name="dirtyBackgroundRatio")
    def dirty_background_ratio(self) -> Optional[float]:
        return pulumi.get(self, "dirty_background_ratio")

    @property
    @pulumi.getter(name="dirtyExpireCentisecs")
    def dirty_expire_centisecs(self) -> Optional[float]:
        return pulumi.get(self, "dirty_expire_centisecs")

    @property
    @pulumi.getter(name="dirtyRatio")
    def dirty_ratio(self) -> Optional[float]:
        return pulumi.get(self, "dirty_ratio")

    @property
    @pulumi.getter(name="dirtyWritebackCentisecs")
    def dirty_writeback_centisecs(self) -> Optional[float]:
        return pulumi.get(self, "dirty_writeback_centisecs")

    @property
    @pulumi.getter(name="nrHugepages")
    def nr_hugepages(self) -> Optional[float]:
        return pulumi.get(self, "nr_hugepages")

    @property
    @pulumi.getter(name="overcommitMemory")
    def overcommit_memory(self) -> Optional[float]:
        return pulumi.get(self, "overcommit_memory")

    @property
    @pulumi.getter
    def swappiness(self) -> Optional[float]:
        return pulumi.get(self, "swappiness")


@pulumi.output_type
class NdbDatabaseLcmConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expiryDetails":
            suggest = "expiry_details"
        elif key == "postDeleteCommands":
            suggest = "post_delete_commands"
        elif key == "preDeleteCommands":
            suggest = "pre_delete_commands"
        elif key == "refreshDetails":
            suggest = "refresh_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseLcmConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseLcmConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseLcmConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expiry_details: Optional[Sequence['outputs.NdbDatabaseLcmConfigExpiryDetail']] = None,
                 post_delete_commands: Optional[Sequence['outputs.NdbDatabaseLcmConfigPostDeleteCommand']] = None,
                 pre_delete_commands: Optional[Sequence['outputs.NdbDatabaseLcmConfigPreDeleteCommand']] = None,
                 refresh_details: Optional[Sequence['outputs.NdbDatabaseLcmConfigRefreshDetail']] = None):
        if expiry_details is not None:
            pulumi.set(__self__, "expiry_details", expiry_details)
        if post_delete_commands is not None:
            pulumi.set(__self__, "post_delete_commands", post_delete_commands)
        if pre_delete_commands is not None:
            pulumi.set(__self__, "pre_delete_commands", pre_delete_commands)
        if refresh_details is not None:
            pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Optional[Sequence['outputs.NdbDatabaseLcmConfigExpiryDetail']]:
        return pulumi.get(self, "expiry_details")

    @property
    @pulumi.getter(name="postDeleteCommands")
    def post_delete_commands(self) -> Optional[Sequence['outputs.NdbDatabaseLcmConfigPostDeleteCommand']]:
        return pulumi.get(self, "post_delete_commands")

    @property
    @pulumi.getter(name="preDeleteCommands")
    def pre_delete_commands(self) -> Optional[Sequence['outputs.NdbDatabaseLcmConfigPreDeleteCommand']]:
        return pulumi.get(self, "pre_delete_commands")

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Optional[Sequence['outputs.NdbDatabaseLcmConfigRefreshDetail']]:
        return pulumi.get(self, "refresh_details")


@pulumi.output_type
class NdbDatabaseLcmConfigExpiryDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteDatabase":
            suggest = "delete_database"
        elif key == "deleteTimeMachine":
            suggest = "delete_time_machine"
        elif key == "deleteVm":
            suggest = "delete_vm"
        elif key == "effectiveTimestamp":
            suggest = "effective_timestamp"
        elif key == "expireInDays":
            suggest = "expire_in_days"
        elif key == "expiryDateTimezone":
            suggest = "expiry_date_timezone"
        elif key == "expiryTimestamp":
            suggest = "expiry_timestamp"
        elif key == "remindBeforeInDays":
            suggest = "remind_before_in_days"
        elif key == "userCreated":
            suggest = "user_created"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseLcmConfigExpiryDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseLcmConfigExpiryDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseLcmConfigExpiryDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_database: Optional[bool] = None,
                 delete_time_machine: Optional[bool] = None,
                 delete_vm: Optional[bool] = None,
                 effective_timestamp: Optional[str] = None,
                 expire_in_days: Optional[int] = None,
                 expiry_date_timezone: Optional[str] = None,
                 expiry_timestamp: Optional[str] = None,
                 remind_before_in_days: Optional[int] = None,
                 user_created: Optional[bool] = None):
        """
        :param bool delete_time_machine: - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        """
        if delete_database is not None:
            pulumi.set(__self__, "delete_database", delete_database)
        if delete_time_machine is not None:
            pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        if delete_vm is not None:
            pulumi.set(__self__, "delete_vm", delete_vm)
        if effective_timestamp is not None:
            pulumi.set(__self__, "effective_timestamp", effective_timestamp)
        if expire_in_days is not None:
            pulumi.set(__self__, "expire_in_days", expire_in_days)
        if expiry_date_timezone is not None:
            pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        if expiry_timestamp is not None:
            pulumi.set(__self__, "expiry_timestamp", expiry_timestamp)
        if remind_before_in_days is not None:
            pulumi.set(__self__, "remind_before_in_days", remind_before_in_days)
        if user_created is not None:
            pulumi.set(__self__, "user_created", user_created)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> Optional[bool]:
        return pulumi.get(self, "delete_database")

    @property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> Optional[bool]:
        """
        - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        """
        return pulumi.get(self, "delete_time_machine")

    @property
    @pulumi.getter(name="deleteVm")
    def delete_vm(self) -> Optional[bool]:
        return pulumi.get(self, "delete_vm")

    @property
    @pulumi.getter(name="effectiveTimestamp")
    def effective_timestamp(self) -> Optional[str]:
        return pulumi.get(self, "effective_timestamp")

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> Optional[int]:
        return pulumi.get(self, "expire_in_days")

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> Optional[str]:
        return pulumi.get(self, "expiry_date_timezone")

    @property
    @pulumi.getter(name="expiryTimestamp")
    def expiry_timestamp(self) -> Optional[str]:
        return pulumi.get(self, "expiry_timestamp")

    @property
    @pulumi.getter(name="remindBeforeInDays")
    def remind_before_in_days(self) -> Optional[int]:
        return pulumi.get(self, "remind_before_in_days")

    @property
    @pulumi.getter(name="userCreated")
    def user_created(self) -> Optional[bool]:
        return pulumi.get(self, "user_created")


@pulumi.output_type
class NdbDatabaseLcmConfigPostDeleteCommand(dict):
    def __init__(__self__, *,
                 command: Optional[str] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        return pulumi.get(self, "command")


@pulumi.output_type
class NdbDatabaseLcmConfigPreDeleteCommand(dict):
    def __init__(__self__, *,
                 command: Optional[str] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        return pulumi.get(self, "command")


@pulumi.output_type
class NdbDatabaseLcmConfigRefreshDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastRefreshDate":
            suggest = "last_refresh_date"
        elif key == "nextRefreshDate":
            suggest = "next_refresh_date"
        elif key == "refreshDateTimezone":
            suggest = "refresh_date_timezone"
        elif key == "refreshInDays":
            suggest = "refresh_in_days"
        elif key == "refreshInHours":
            suggest = "refresh_in_hours"
        elif key == "refreshInMonths":
            suggest = "refresh_in_months"
        elif key == "refreshTime":
            suggest = "refresh_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseLcmConfigRefreshDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseLcmConfigRefreshDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseLcmConfigRefreshDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_refresh_date: Optional[str] = None,
                 next_refresh_date: Optional[str] = None,
                 refresh_date_timezone: Optional[str] = None,
                 refresh_in_days: Optional[int] = None,
                 refresh_in_hours: Optional[int] = None,
                 refresh_in_months: Optional[int] = None,
                 refresh_time: Optional[str] = None):
        if last_refresh_date is not None:
            pulumi.set(__self__, "last_refresh_date", last_refresh_date)
        if next_refresh_date is not None:
            pulumi.set(__self__, "next_refresh_date", next_refresh_date)
        if refresh_date_timezone is not None:
            pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        if refresh_in_days is not None:
            pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        if refresh_in_hours is not None:
            pulumi.set(__self__, "refresh_in_hours", refresh_in_hours)
        if refresh_in_months is not None:
            pulumi.set(__self__, "refresh_in_months", refresh_in_months)
        if refresh_time is not None:
            pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="lastRefreshDate")
    def last_refresh_date(self) -> Optional[str]:
        return pulumi.get(self, "last_refresh_date")

    @property
    @pulumi.getter(name="nextRefreshDate")
    def next_refresh_date(self) -> Optional[str]:
        return pulumi.get(self, "next_refresh_date")

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> Optional[str]:
        return pulumi.get(self, "refresh_date_timezone")

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> Optional[int]:
        return pulumi.get(self, "refresh_in_days")

    @property
    @pulumi.getter(name="refreshInHours")
    def refresh_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "refresh_in_hours")

    @property
    @pulumi.getter(name="refreshInMonths")
    def refresh_in_months(self) -> Optional[int]:
        return pulumi.get(self, "refresh_in_months")

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> Optional[str]:
        return pulumi.get(self, "refresh_time")


@pulumi.output_type
class NdbDatabaseLinkedDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"
        elif key == "databaseStatus":
            suggest = "database_status"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "parentDatabaseId":
            suggest = "parent_database_id"
        elif key == "parentLinkedDatabaseId":
            suggest = "parent_linked_database_id"
        elif key == "snapshotId":
            suggest = "snapshot_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseLinkedDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseLinkedDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseLinkedDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: Optional[str] = None,
                 database_status: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 infos: Optional[Sequence['outputs.NdbDatabaseLinkedDatabaseInfo']] = None,
                 metric: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 parent_database_id: Optional[str] = None,
                 parent_linked_database_id: Optional[str] = None,
                 snapshot_id: Optional[str] = None,
                 status: Optional[str] = None,
                 timezone: Optional[str] = None):
        """
        :param str description: - (Optional) The description
        :param str name: - (Required) Name of the instance.
        """
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_database_id is not None:
            pulumi.set(__self__, "parent_database_id", parent_database_id)
        if parent_linked_database_id is not None:
            pulumi.set(__self__, "parent_linked_database_id", parent_linked_database_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[str]:
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.NdbDatabaseLinkedDatabaseInfo']]:
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def metric(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_database_id")

    @property
    @pulumi.getter(name="parentLinkedDatabaseId")
    def parent_linked_database_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_linked_database_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        return pulumi.get(self, "timezone")


@pulumi.output_type
class NdbDatabaseLinkedDatabaseInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureInfo":
            suggest = "secure_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseLinkedDatabaseInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseLinkedDatabaseInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseLinkedDatabaseInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 info: Optional[Mapping[str, str]] = None,
                 secure_info: Optional[Mapping[str, str]] = None):
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class NdbDatabaseMaintenanceTasks(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maintenanceWindowId":
            suggest = "maintenance_window_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseMaintenanceTasks. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseMaintenanceTasks.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseMaintenanceTasks.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 maintenance_window_id: Optional[str] = None,
                 tasks: Optional[Sequence['outputs.NdbDatabaseMaintenanceTasksTask']] = None):
        if maintenance_window_id is not None:
            pulumi.set(__self__, "maintenance_window_id", maintenance_window_id)
        if tasks is not None:
            pulumi.set(__self__, "tasks", tasks)

    @property
    @pulumi.getter(name="maintenanceWindowId")
    def maintenance_window_id(self) -> Optional[str]:
        return pulumi.get(self, "maintenance_window_id")

    @property
    @pulumi.getter
    def tasks(self) -> Optional[Sequence['outputs.NdbDatabaseMaintenanceTasksTask']]:
        return pulumi.get(self, "tasks")


@pulumi.output_type
class NdbDatabaseMaintenanceTasksTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postCommand":
            suggest = "post_command"
        elif key == "preCommand":
            suggest = "pre_command"
        elif key == "taskType":
            suggest = "task_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseMaintenanceTasksTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseMaintenanceTasksTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseMaintenanceTasksTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 post_command: Optional[str] = None,
                 pre_command: Optional[str] = None,
                 task_type: Optional[str] = None):
        if post_command is not None:
            pulumi.set(__self__, "post_command", post_command)
        if pre_command is not None:
            pulumi.set(__self__, "pre_command", pre_command)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="postCommand")
    def post_command(self) -> Optional[str]:
        return pulumi.get(self, "post_command")

    @property
    @pulumi.getter(name="preCommand")
    def pre_command(self) -> Optional[str]:
        return pulumi.get(self, "pre_command")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[str]:
        return pulumi.get(self, "task_type")


@pulumi.output_type
class NdbDatabaseNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipInfos":
            suggest = "ip_infos"
        elif key == "nxClusterId":
            suggest = "nx_cluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vmname: str,
                 computeprofileid: Optional[str] = None,
                 dbserverid: Optional[str] = None,
                 ip_infos: Optional[Sequence['outputs.NdbDatabaseNodeIpInfo']] = None,
                 networkprofileid: Optional[str] = None,
                 nx_cluster_id: Optional[str] = None,
                 properties: Optional[Sequence['outputs.NdbDatabaseNodeProperty']] = None):
        """
        :param str vmname: - (Required) name of vm
        :param str computeprofileid: - (Optional) compute profile id
        :param str dbserverid: - (Optional) Database server ID required for existing VM
        :param Sequence['NdbDatabaseNodeIpInfoArgs'] ip_infos: - (Optional) IP infos for custom network profile.
        :param str networkprofileid: - (Required) network profile ID
        :param str nx_cluster_id: - (Optional) cluster id.
        :param Sequence['NdbDatabaseNodePropertyArgs'] properties: - (Optional) list of additional properties
        """
        pulumi.set(__self__, "vmname", vmname)
        if computeprofileid is not None:
            pulumi.set(__self__, "computeprofileid", computeprofileid)
        if dbserverid is not None:
            pulumi.set(__self__, "dbserverid", dbserverid)
        if ip_infos is not None:
            pulumi.set(__self__, "ip_infos", ip_infos)
        if networkprofileid is not None:
            pulumi.set(__self__, "networkprofileid", networkprofileid)
        if nx_cluster_id is not None:
            pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def vmname(self) -> str:
        """
        - (Required) name of vm
        """
        return pulumi.get(self, "vmname")

    @property
    @pulumi.getter
    def computeprofileid(self) -> Optional[str]:
        """
        - (Optional) compute profile id
        """
        return pulumi.get(self, "computeprofileid")

    @property
    @pulumi.getter
    def dbserverid(self) -> Optional[str]:
        """
        - (Optional) Database server ID required for existing VM
        """
        return pulumi.get(self, "dbserverid")

    @property
    @pulumi.getter(name="ipInfos")
    def ip_infos(self) -> Optional[Sequence['outputs.NdbDatabaseNodeIpInfo']]:
        """
        - (Optional) IP infos for custom network profile.
        """
        return pulumi.get(self, "ip_infos")

    @property
    @pulumi.getter
    def networkprofileid(self) -> Optional[str]:
        """
        - (Required) network profile ID
        """
        return pulumi.get(self, "networkprofileid")

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> Optional[str]:
        """
        - (Optional) cluster id.
        """
        return pulumi.get(self, "nx_cluster_id")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbDatabaseNodeProperty']]:
        """
        - (Optional) list of additional properties
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class NdbDatabaseNodeIpInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddresses":
            suggest = "ip_addresses"
        elif key == "ipType":
            suggest = "ip_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseNodeIpInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseNodeIpInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseNodeIpInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_addresses: Optional[Sequence[str]] = None,
                 ip_type: Optional[str] = None):
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ip_type is not None:
            pulumi.set(__self__, "ip_type", ip_type)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> Optional[str]:
        return pulumi.get(self, "ip_type")


@pulumi.output_type
class NdbDatabaseNodeProperty(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - (Required) Name of the instance.
        :param str value: - (Required) value for argument
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabasePostgresqlInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseNames":
            suggest = "database_names"
        elif key == "databaseSize":
            suggest = "database_size"
        elif key == "dbPassword":
            suggest = "db_password"
        elif key == "listenerPort":
            suggest = "listener_port"
        elif key == "allocatePgHugepage":
            suggest = "allocate_pg_hugepage"
        elif key == "authMethod":
            suggest = "auth_method"
        elif key == "autoTuneStagingDrive":
            suggest = "auto_tune_staging_drive"
        elif key == "clusterDatabase":
            suggest = "cluster_database"
        elif key == "haInstance":
            suggest = "ha_instance"
        elif key == "postCreateScript":
            suggest = "post_create_script"
        elif key == "preCreateScript":
            suggest = "pre_create_script"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabasePostgresqlInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabasePostgresqlInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabasePostgresqlInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_names: str,
                 database_size: str,
                 db_password: str,
                 listener_port: str,
                 allocate_pg_hugepage: Optional[bool] = None,
                 auth_method: Optional[str] = None,
                 auto_tune_staging_drive: Optional[bool] = None,
                 cluster_database: Optional[bool] = None,
                 ha_instance: Optional['outputs.NdbDatabasePostgresqlInfoHaInstance'] = None,
                 post_create_script: Optional[str] = None,
                 pre_create_script: Optional[str] = None):
        """
        :param str database_names: - (Required) name of initial database to be created
        :param str database_size: - (Required) initial database size
        :param str db_password: - (Required) database instance password
        :param str listener_port: - (Required) listener port for database instance
        :param bool allocate_pg_hugepage: - (Optional) allocate huge page. Default: false
        :param str auth_method: - (Optional) auth methods. Default: md5
        :param bool auto_tune_staging_drive: - (Optional) enable auto tuning of staging drive. Default: false
        :param bool cluster_database: - (Optional) if clustered database. Default: false
        :param 'NdbDatabasePostgresqlInfoHaInstanceArgs' ha_instance: - (Optional) High Availability instance
        :param str post_create_script: - (Optional) post instance create script
        :param str pre_create_script: - (Optional) pre instance create script
        """
        pulumi.set(__self__, "database_names", database_names)
        pulumi.set(__self__, "database_size", database_size)
        pulumi.set(__self__, "db_password", db_password)
        pulumi.set(__self__, "listener_port", listener_port)
        if allocate_pg_hugepage is not None:
            pulumi.set(__self__, "allocate_pg_hugepage", allocate_pg_hugepage)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if auto_tune_staging_drive is not None:
            pulumi.set(__self__, "auto_tune_staging_drive", auto_tune_staging_drive)
        if cluster_database is not None:
            pulumi.set(__self__, "cluster_database", cluster_database)
        if ha_instance is not None:
            pulumi.set(__self__, "ha_instance", ha_instance)
        if post_create_script is not None:
            pulumi.set(__self__, "post_create_script", post_create_script)
        if pre_create_script is not None:
            pulumi.set(__self__, "pre_create_script", pre_create_script)

    @property
    @pulumi.getter(name="databaseNames")
    def database_names(self) -> str:
        """
        - (Required) name of initial database to be created
        """
        return pulumi.get(self, "database_names")

    @property
    @pulumi.getter(name="databaseSize")
    def database_size(self) -> str:
        """
        - (Required) initial database size
        """
        return pulumi.get(self, "database_size")

    @property
    @pulumi.getter(name="dbPassword")
    def db_password(self) -> str:
        """
        - (Required) database instance password
        """
        return pulumi.get(self, "db_password")

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> str:
        """
        - (Required) listener port for database instance
        """
        return pulumi.get(self, "listener_port")

    @property
    @pulumi.getter(name="allocatePgHugepage")
    def allocate_pg_hugepage(self) -> Optional[bool]:
        """
        - (Optional) allocate huge page. Default: false
        """
        return pulumi.get(self, "allocate_pg_hugepage")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[str]:
        """
        - (Optional) auth methods. Default: md5
        """
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="autoTuneStagingDrive")
    def auto_tune_staging_drive(self) -> Optional[bool]:
        """
        - (Optional) enable auto tuning of staging drive. Default: false
        """
        return pulumi.get(self, "auto_tune_staging_drive")

    @property
    @pulumi.getter(name="clusterDatabase")
    def cluster_database(self) -> Optional[bool]:
        """
        - (Optional) if clustered database. Default: false
        """
        return pulumi.get(self, "cluster_database")

    @property
    @pulumi.getter(name="haInstance")
    def ha_instance(self) -> Optional['outputs.NdbDatabasePostgresqlInfoHaInstance']:
        """
        - (Optional) High Availability instance
        """
        return pulumi.get(self, "ha_instance")

    @property
    @pulumi.getter(name="postCreateScript")
    def post_create_script(self) -> Optional[str]:
        """
        - (Optional) post instance create script
        """
        return pulumi.get(self, "post_create_script")

    @property
    @pulumi.getter(name="preCreateScript")
    def pre_create_script(self) -> Optional[str]:
        """
        - (Optional) pre instance create script
        """
        return pulumi.get(self, "pre_create_script")


@pulumi.output_type
class NdbDatabasePostgresqlInfoHaInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterName":
            suggest = "cluster_name"
        elif key == "patroniClusterName":
            suggest = "patroni_cluster_name"
        elif key == "proxyReadPort":
            suggest = "proxy_read_port"
        elif key == "proxyWritePort":
            suggest = "proxy_write_port"
        elif key == "archiveWalExpireDays":
            suggest = "archive_wal_expire_days"
        elif key == "backupPolicy":
            suggest = "backup_policy"
        elif key == "clusterDescription":
            suggest = "cluster_description"
        elif key == "deployHaproxy":
            suggest = "deploy_haproxy"
        elif key == "enablePeerAuth":
            suggest = "enable_peer_auth"
        elif key == "enableSynchronousMode":
            suggest = "enable_synchronous_mode"
        elif key == "failoverMode":
            suggest = "failover_mode"
        elif key == "nodeType":
            suggest = "node_type"
        elif key == "provisionVirtualIp":
            suggest = "provision_virtual_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabasePostgresqlInfoHaInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabasePostgresqlInfoHaInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabasePostgresqlInfoHaInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_name: str,
                 patroni_cluster_name: str,
                 proxy_read_port: str,
                 proxy_write_port: str,
                 archive_wal_expire_days: Optional[int] = None,
                 backup_policy: Optional[str] = None,
                 cluster_description: Optional[str] = None,
                 deploy_haproxy: Optional[bool] = None,
                 enable_peer_auth: Optional[bool] = None,
                 enable_synchronous_mode: Optional[bool] = None,
                 failover_mode: Optional[str] = None,
                 node_type: Optional[str] = None,
                 provision_virtual_ip: Optional[bool] = None):
        """
        :param str cluster_name: - (Required) cluster name
        :param str patroni_cluster_name: - (Required) patroni cluster name
        :param str proxy_read_port: -  (Required) proxy read port
        :param str proxy_write_port: - (Required) proxy write port
        :param int archive_wal_expire_days: - (Optional) archive wal expire days. Default is set to -1
        :param str backup_policy: - (Optional) backup policy for instance. Default is "primary_only"
        :param bool deploy_haproxy: - (Optional) HA proxy node. Default is set to false
        :param bool enable_peer_auth: - (Optional) enable peer auth . Default is set to false.
        :param bool enable_synchronous_mode: - (Optional) enable synchronous mode. Default is set to true
        :param str failover_mode: - (Optional) failover mode of nodes.
        :param str node_type: - (Optional) node type of instance. Default is set to database
        :param bool provision_virtual_ip: - (Optional) provisional virtual ip. Default is set to true
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "patroni_cluster_name", patroni_cluster_name)
        pulumi.set(__self__, "proxy_read_port", proxy_read_port)
        pulumi.set(__self__, "proxy_write_port", proxy_write_port)
        if archive_wal_expire_days is not None:
            pulumi.set(__self__, "archive_wal_expire_days", archive_wal_expire_days)
        if backup_policy is not None:
            pulumi.set(__self__, "backup_policy", backup_policy)
        if cluster_description is not None:
            pulumi.set(__self__, "cluster_description", cluster_description)
        if deploy_haproxy is not None:
            pulumi.set(__self__, "deploy_haproxy", deploy_haproxy)
        if enable_peer_auth is not None:
            pulumi.set(__self__, "enable_peer_auth", enable_peer_auth)
        if enable_synchronous_mode is not None:
            pulumi.set(__self__, "enable_synchronous_mode", enable_synchronous_mode)
        if failover_mode is not None:
            pulumi.set(__self__, "failover_mode", failover_mode)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if provision_virtual_ip is not None:
            pulumi.set(__self__, "provision_virtual_ip", provision_virtual_ip)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        - (Required) cluster name
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="patroniClusterName")
    def patroni_cluster_name(self) -> str:
        """
        - (Required) patroni cluster name
        """
        return pulumi.get(self, "patroni_cluster_name")

    @property
    @pulumi.getter(name="proxyReadPort")
    def proxy_read_port(self) -> str:
        """
        -  (Required) proxy read port
        """
        return pulumi.get(self, "proxy_read_port")

    @property
    @pulumi.getter(name="proxyWritePort")
    def proxy_write_port(self) -> str:
        """
        - (Required) proxy write port
        """
        return pulumi.get(self, "proxy_write_port")

    @property
    @pulumi.getter(name="archiveWalExpireDays")
    def archive_wal_expire_days(self) -> Optional[int]:
        """
        - (Optional) archive wal expire days. Default is set to -1
        """
        return pulumi.get(self, "archive_wal_expire_days")

    @property
    @pulumi.getter(name="backupPolicy")
    def backup_policy(self) -> Optional[str]:
        """
        - (Optional) backup policy for instance. Default is "primary_only"
        """
        return pulumi.get(self, "backup_policy")

    @property
    @pulumi.getter(name="clusterDescription")
    def cluster_description(self) -> Optional[str]:
        return pulumi.get(self, "cluster_description")

    @property
    @pulumi.getter(name="deployHaproxy")
    def deploy_haproxy(self) -> Optional[bool]:
        """
        - (Optional) HA proxy node. Default is set to false
        """
        return pulumi.get(self, "deploy_haproxy")

    @property
    @pulumi.getter(name="enablePeerAuth")
    def enable_peer_auth(self) -> Optional[bool]:
        """
        - (Optional) enable peer auth . Default is set to false.
        """
        return pulumi.get(self, "enable_peer_auth")

    @property
    @pulumi.getter(name="enableSynchronousMode")
    def enable_synchronous_mode(self) -> Optional[bool]:
        """
        - (Optional) enable synchronous mode. Default is set to true
        """
        return pulumi.get(self, "enable_synchronous_mode")

    @property
    @pulumi.getter(name="failoverMode")
    def failover_mode(self) -> Optional[str]:
        """
        - (Optional) failover mode of nodes.
        """
        return pulumi.get(self, "failover_mode")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[str]:
        """
        - (Optional) node type of instance. Default is set to database
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter(name="provisionVirtualIp")
    def provision_virtual_ip(self) -> Optional[bool]:
        """
        - (Optional) provisional virtual ip. Default is set to true
        """
        return pulumi.get(self, "provision_virtual_ip")


@pulumi.output_type
class NdbDatabaseProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: - (Required) Name of the instance.
        :param str value: - (Required) value for argument
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseRestoreDatabaseNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "databaseId":
            suggest = "database_id"
        elif key == "databaseStatus":
            suggest = "database_status"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "dbserverId":
            suggest = "dbserver_id"
        elif key == "protectionDomainId":
            suggest = "protection_domain_id"
        elif key == "protectionDomains":
            suggest = "protection_domains"
        elif key == "softwareInstallationId":
            suggest = "software_installation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreDatabaseNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreDatabaseNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreDatabaseNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: Optional[Mapping[str, str]] = None,
                 database_id: Optional[str] = None,
                 database_status: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 dbserver: Optional[Mapping[str, str]] = None,
                 dbserver_id: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 infos: Optional[Sequence['outputs.NdbDatabaseRestoreDatabaseNodeInfo']] = None,
                 name: Optional[str] = None,
                 primary: Optional[bool] = None,
                 properties: Optional[Sequence['outputs.NdbDatabaseRestoreDatabaseNodeProperty']] = None,
                 protection_domain_id: Optional[str] = None,
                 protection_domains: Optional[Sequence['outputs.NdbDatabaseRestoreDatabaseNodeProtectionDomain']] = None,
                 software_installation_id: Optional[str] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.NdbDatabaseRestoreDatabaseNodeTag']] = None):
        """
        :param str database_id: database id
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description of database instance
        :param Sequence['NdbDatabaseRestoreDatabaseNodeInfoArgs'] infos: info of instance
        :param str name: Name of database instance
        :param Sequence['NdbDatabaseRestoreDatabaseNodePropertyArgs'] properties: properties of database created
        :param str status: status of instance
        :param Sequence['NdbDatabaseRestoreDatabaseNodeTagArgs'] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if dbserver is not None:
            pulumi.set(__self__, "dbserver", dbserver)
        if dbserver_id is not None:
            pulumi.set(__self__, "dbserver_id", dbserver_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if protection_domain_id is not None:
            pulumi.set(__self__, "protection_domain_id", protection_domain_id)
        if protection_domains is not None:
            pulumi.set(__self__, "protection_domains", protection_domains)
        if software_installation_id is not None:
            pulumi.set(__self__, "software_installation_id", software_installation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        """
        database id
        """
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[str]:
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def dbserver(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "dbserver")

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> Optional[str]:
        return pulumi.get(self, "dbserver_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreDatabaseNodeInfo']]:
        """
        info of instance
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreDatabaseNodeProperty']]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="protectionDomainId")
    def protection_domain_id(self) -> Optional[str]:
        return pulumi.get(self, "protection_domain_id")

    @property
    @pulumi.getter(name="protectionDomains")
    def protection_domains(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreDatabaseNodeProtectionDomain']]:
        return pulumi.get(self, "protection_domains")

    @property
    @pulumi.getter(name="softwareInstallationId")
    def software_installation_id(self) -> Optional[str]:
        return pulumi.get(self, "software_installation_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreDatabaseNodeTag']]:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class NdbDatabaseRestoreDatabaseNodeInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureInfo":
            suggest = "secure_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreDatabaseNodeInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreDatabaseNodeInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreDatabaseNodeInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 info: Optional[Mapping[str, str]] = None,
                 secure_info: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] info: info of instance
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[Mapping[str, str]]:
        """
        info of instance
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class NdbDatabaseRestoreDatabaseNodeProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreDatabaseNodeProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreDatabaseNodeProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreDatabaseNodeProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str description: description of database instance
        :param str name: Name of database instance
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseRestoreDatabaseNodeProtectionDomain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assocEntities":
            suggest = "assoc_entities"
        elif key == "cloudId":
            suggest = "cloud_id"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "eraCreated":
            suggest = "era_created"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "primaryHost":
            suggest = "primary_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreDatabaseNodeProtectionDomain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreDatabaseNodeProtectionDomain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreDatabaseNodeProtectionDomain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assoc_entities: Optional[Sequence[str]] = None,
                 cloud_id: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 era_created: Optional[bool] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 primary_host: Optional[str] = None,
                 properties: Optional[Sequence['outputs.NdbDatabaseRestoreDatabaseNodeProtectionDomainProperty']] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description of database instance
        :param str name: Name of database instance
        :param Sequence['NdbDatabaseRestoreDatabaseNodeProtectionDomainPropertyArgs'] properties: properties of database created
        :param str status: status of instance
        :param str type: type of database
        """
        if assoc_entities is not None:
            pulumi.set(__self__, "assoc_entities", assoc_entities)
        if cloud_id is not None:
            pulumi.set(__self__, "cloud_id", cloud_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if era_created is not None:
            pulumi.set(__self__, "era_created", era_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if primary_host is not None:
            pulumi.set(__self__, "primary_host", primary_host)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assocEntities")
    def assoc_entities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "assoc_entities")

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> Optional[str]:
        return pulumi.get(self, "cloud_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eraCreated")
    def era_created(self) -> Optional[bool]:
        return pulumi.get(self, "era_created")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="primaryHost")
    def primary_host(self) -> Optional[str]:
        return pulumi.get(self, "primary_host")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreDatabaseNodeProtectionDomainProperty']]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of database
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NdbDatabaseRestoreDatabaseNodeProtectionDomainProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreDatabaseNodeProtectionDomainProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreDatabaseNodeProtectionDomainProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreDatabaseNodeProtectionDomainProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str description: description of database instance
        :param str name: Name of database instance
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseRestoreDatabaseNodeTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreDatabaseNodeTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreDatabaseNodeTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreDatabaseNodeTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseRestoreInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bpgConfigs":
            suggest = "bpg_configs"
        elif key == "secureInfo":
            suggest = "secure_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bpg_configs: Optional[Sequence['outputs.NdbDatabaseRestoreInfoBpgConfig']] = None,
                 secure_info: Optional[Mapping[str, str]] = None):
        if bpg_configs is not None:
            pulumi.set(__self__, "bpg_configs", bpg_configs)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="bpgConfigs")
    def bpg_configs(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreInfoBpgConfig']]:
        return pulumi.get(self, "bpg_configs")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class NdbDatabaseRestoreInfoBpgConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bpgDbParams":
            suggest = "bpg_db_params"
        elif key == "vmProperties":
            suggest = "vm_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreInfoBpgConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreInfoBpgConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreInfoBpgConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bpg_db_params: Optional[Sequence['outputs.NdbDatabaseRestoreInfoBpgConfigBpgDbParam']] = None,
                 storages: Optional[Sequence['outputs.NdbDatabaseRestoreInfoBpgConfigStorage']] = None,
                 vm_properties: Optional[Sequence['outputs.NdbDatabaseRestoreInfoBpgConfigVmProperty']] = None):
        if bpg_db_params is not None:
            pulumi.set(__self__, "bpg_db_params", bpg_db_params)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if vm_properties is not None:
            pulumi.set(__self__, "vm_properties", vm_properties)

    @property
    @pulumi.getter(name="bpgDbParams")
    def bpg_db_params(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreInfoBpgConfigBpgDbParam']]:
        return pulumi.get(self, "bpg_db_params")

    @property
    @pulumi.getter
    def storages(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreInfoBpgConfigStorage']]:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="vmProperties")
    def vm_properties(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreInfoBpgConfigVmProperty']]:
        return pulumi.get(self, "vm_properties")


@pulumi.output_type
class NdbDatabaseRestoreInfoBpgConfigBpgDbParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "effectiveCacheSize":
            suggest = "effective_cache_size"
        elif key == "maintenanceWorkMem":
            suggest = "maintenance_work_mem"
        elif key == "maxParallelWorkersPerGather":
            suggest = "max_parallel_workers_per_gather"
        elif key == "maxWorkerProcesses":
            suggest = "max_worker_processes"
        elif key == "sharedBuffers":
            suggest = "shared_buffers"
        elif key == "workMem":
            suggest = "work_mem"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreInfoBpgConfigBpgDbParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreInfoBpgConfigBpgDbParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreInfoBpgConfigBpgDbParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 effective_cache_size: Optional[str] = None,
                 maintenance_work_mem: Optional[str] = None,
                 max_parallel_workers_per_gather: Optional[str] = None,
                 max_worker_processes: Optional[str] = None,
                 shared_buffers: Optional[str] = None,
                 work_mem: Optional[str] = None):
        if effective_cache_size is not None:
            pulumi.set(__self__, "effective_cache_size", effective_cache_size)
        if maintenance_work_mem is not None:
            pulumi.set(__self__, "maintenance_work_mem", maintenance_work_mem)
        if max_parallel_workers_per_gather is not None:
            pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if shared_buffers is not None:
            pulumi.set(__self__, "shared_buffers", shared_buffers)
        if work_mem is not None:
            pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="effectiveCacheSize")
    def effective_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "effective_cache_size")

    @property
    @pulumi.getter(name="maintenanceWorkMem")
    def maintenance_work_mem(self) -> Optional[str]:
        return pulumi.get(self, "maintenance_work_mem")

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> Optional[str]:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[str]:
        return pulumi.get(self, "max_worker_processes")

    @property
    @pulumi.getter(name="sharedBuffers")
    def shared_buffers(self) -> Optional[str]:
        return pulumi.get(self, "shared_buffers")

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> Optional[str]:
        return pulumi.get(self, "work_mem")


@pulumi.output_type
class NdbDatabaseRestoreInfoBpgConfigStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveStorages":
            suggest = "archive_storages"
        elif key == "dataDisks":
            suggest = "data_disks"
        elif key == "logDisks":
            suggest = "log_disks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreInfoBpgConfigStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreInfoBpgConfigStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreInfoBpgConfigStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_storages: Optional[Sequence['outputs.NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorage']] = None,
                 data_disks: Optional[Sequence['outputs.NdbDatabaseRestoreInfoBpgConfigStorageDataDisk']] = None,
                 log_disks: Optional[Sequence['outputs.NdbDatabaseRestoreInfoBpgConfigStorageLogDisk']] = None):
        if archive_storages is not None:
            pulumi.set(__self__, "archive_storages", archive_storages)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if log_disks is not None:
            pulumi.set(__self__, "log_disks", log_disks)

    @property
    @pulumi.getter(name="archiveStorages")
    def archive_storages(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorage']]:
        return pulumi.get(self, "archive_storages")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreInfoBpgConfigStorageDataDisk']]:
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="logDisks")
    def log_disks(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreInfoBpgConfigStorageLogDisk']]:
        return pulumi.get(self, "log_disks")


@pulumi.output_type
class NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorage(dict):
    def __init__(__self__, *,
                 size: Optional[float] = None):
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> Optional[float]:
        return pulumi.get(self, "size")


@pulumi.output_type
class NdbDatabaseRestoreInfoBpgConfigStorageDataDisk(dict):
    def __init__(__self__, *,
                 count: Optional[float] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> Optional[float]:
        return pulumi.get(self, "count")


@pulumi.output_type
class NdbDatabaseRestoreInfoBpgConfigStorageLogDisk(dict):
    def __init__(__self__, *,
                 count: Optional[float] = None,
                 size: Optional[float] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> Optional[float]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def size(self) -> Optional[float]:
        return pulumi.get(self, "size")


@pulumi.output_type
class NdbDatabaseRestoreInfoBpgConfigVmProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dirtyBackgroundRatio":
            suggest = "dirty_background_ratio"
        elif key == "dirtyExpireCentisecs":
            suggest = "dirty_expire_centisecs"
        elif key == "dirtyRatio":
            suggest = "dirty_ratio"
        elif key == "dirtyWritebackCentisecs":
            suggest = "dirty_writeback_centisecs"
        elif key == "nrHugepages":
            suggest = "nr_hugepages"
        elif key == "overcommitMemory":
            suggest = "overcommit_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreInfoBpgConfigVmProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreInfoBpgConfigVmProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreInfoBpgConfigVmProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dirty_background_ratio: Optional[float] = None,
                 dirty_expire_centisecs: Optional[float] = None,
                 dirty_ratio: Optional[float] = None,
                 dirty_writeback_centisecs: Optional[float] = None,
                 nr_hugepages: Optional[float] = None,
                 overcommit_memory: Optional[float] = None,
                 swappiness: Optional[float] = None):
        if dirty_background_ratio is not None:
            pulumi.set(__self__, "dirty_background_ratio", dirty_background_ratio)
        if dirty_expire_centisecs is not None:
            pulumi.set(__self__, "dirty_expire_centisecs", dirty_expire_centisecs)
        if dirty_ratio is not None:
            pulumi.set(__self__, "dirty_ratio", dirty_ratio)
        if dirty_writeback_centisecs is not None:
            pulumi.set(__self__, "dirty_writeback_centisecs", dirty_writeback_centisecs)
        if nr_hugepages is not None:
            pulumi.set(__self__, "nr_hugepages", nr_hugepages)
        if overcommit_memory is not None:
            pulumi.set(__self__, "overcommit_memory", overcommit_memory)
        if swappiness is not None:
            pulumi.set(__self__, "swappiness", swappiness)

    @property
    @pulumi.getter(name="dirtyBackgroundRatio")
    def dirty_background_ratio(self) -> Optional[float]:
        return pulumi.get(self, "dirty_background_ratio")

    @property
    @pulumi.getter(name="dirtyExpireCentisecs")
    def dirty_expire_centisecs(self) -> Optional[float]:
        return pulumi.get(self, "dirty_expire_centisecs")

    @property
    @pulumi.getter(name="dirtyRatio")
    def dirty_ratio(self) -> Optional[float]:
        return pulumi.get(self, "dirty_ratio")

    @property
    @pulumi.getter(name="dirtyWritebackCentisecs")
    def dirty_writeback_centisecs(self) -> Optional[float]:
        return pulumi.get(self, "dirty_writeback_centisecs")

    @property
    @pulumi.getter(name="nrHugepages")
    def nr_hugepages(self) -> Optional[float]:
        return pulumi.get(self, "nr_hugepages")

    @property
    @pulumi.getter(name="overcommitMemory")
    def overcommit_memory(self) -> Optional[float]:
        return pulumi.get(self, "overcommit_memory")

    @property
    @pulumi.getter
    def swappiness(self) -> Optional[float]:
        return pulumi.get(self, "swappiness")


@pulumi.output_type
class NdbDatabaseRestoreLcmConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expiryDetails":
            suggest = "expiry_details"
        elif key == "postDeleteCommands":
            suggest = "post_delete_commands"
        elif key == "preDeleteCommands":
            suggest = "pre_delete_commands"
        elif key == "refreshDetails":
            suggest = "refresh_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreLcmConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreLcmConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreLcmConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expiry_details: Optional[Sequence['outputs.NdbDatabaseRestoreLcmConfigExpiryDetail']] = None,
                 post_delete_commands: Optional[Sequence['outputs.NdbDatabaseRestoreLcmConfigPostDeleteCommand']] = None,
                 pre_delete_commands: Optional[Sequence['outputs.NdbDatabaseRestoreLcmConfigPreDeleteCommand']] = None,
                 refresh_details: Optional[Sequence['outputs.NdbDatabaseRestoreLcmConfigRefreshDetail']] = None):
        if expiry_details is not None:
            pulumi.set(__self__, "expiry_details", expiry_details)
        if post_delete_commands is not None:
            pulumi.set(__self__, "post_delete_commands", post_delete_commands)
        if pre_delete_commands is not None:
            pulumi.set(__self__, "pre_delete_commands", pre_delete_commands)
        if refresh_details is not None:
            pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreLcmConfigExpiryDetail']]:
        return pulumi.get(self, "expiry_details")

    @property
    @pulumi.getter(name="postDeleteCommands")
    def post_delete_commands(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreLcmConfigPostDeleteCommand']]:
        return pulumi.get(self, "post_delete_commands")

    @property
    @pulumi.getter(name="preDeleteCommands")
    def pre_delete_commands(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreLcmConfigPreDeleteCommand']]:
        return pulumi.get(self, "pre_delete_commands")

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreLcmConfigRefreshDetail']]:
        return pulumi.get(self, "refresh_details")


@pulumi.output_type
class NdbDatabaseRestoreLcmConfigExpiryDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteDatabase":
            suggest = "delete_database"
        elif key == "deleteTimeMachine":
            suggest = "delete_time_machine"
        elif key == "deleteVm":
            suggest = "delete_vm"
        elif key == "effectiveTimestamp":
            suggest = "effective_timestamp"
        elif key == "expireInDays":
            suggest = "expire_in_days"
        elif key == "expiryDateTimezone":
            suggest = "expiry_date_timezone"
        elif key == "expiryTimestamp":
            suggest = "expiry_timestamp"
        elif key == "remindBeforeInDays":
            suggest = "remind_before_in_days"
        elif key == "userCreated":
            suggest = "user_created"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreLcmConfigExpiryDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreLcmConfigExpiryDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreLcmConfigExpiryDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_database: Optional[bool] = None,
                 delete_time_machine: Optional[bool] = None,
                 delete_vm: Optional[bool] = None,
                 effective_timestamp: Optional[str] = None,
                 expire_in_days: Optional[int] = None,
                 expiry_date_timezone: Optional[str] = None,
                 expiry_timestamp: Optional[str] = None,
                 remind_before_in_days: Optional[int] = None,
                 user_created: Optional[bool] = None):
        if delete_database is not None:
            pulumi.set(__self__, "delete_database", delete_database)
        if delete_time_machine is not None:
            pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        if delete_vm is not None:
            pulumi.set(__self__, "delete_vm", delete_vm)
        if effective_timestamp is not None:
            pulumi.set(__self__, "effective_timestamp", effective_timestamp)
        if expire_in_days is not None:
            pulumi.set(__self__, "expire_in_days", expire_in_days)
        if expiry_date_timezone is not None:
            pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        if expiry_timestamp is not None:
            pulumi.set(__self__, "expiry_timestamp", expiry_timestamp)
        if remind_before_in_days is not None:
            pulumi.set(__self__, "remind_before_in_days", remind_before_in_days)
        if user_created is not None:
            pulumi.set(__self__, "user_created", user_created)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> Optional[bool]:
        return pulumi.get(self, "delete_database")

    @property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> Optional[bool]:
        return pulumi.get(self, "delete_time_machine")

    @property
    @pulumi.getter(name="deleteVm")
    def delete_vm(self) -> Optional[bool]:
        return pulumi.get(self, "delete_vm")

    @property
    @pulumi.getter(name="effectiveTimestamp")
    def effective_timestamp(self) -> Optional[str]:
        return pulumi.get(self, "effective_timestamp")

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> Optional[int]:
        return pulumi.get(self, "expire_in_days")

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> Optional[str]:
        return pulumi.get(self, "expiry_date_timezone")

    @property
    @pulumi.getter(name="expiryTimestamp")
    def expiry_timestamp(self) -> Optional[str]:
        return pulumi.get(self, "expiry_timestamp")

    @property
    @pulumi.getter(name="remindBeforeInDays")
    def remind_before_in_days(self) -> Optional[int]:
        return pulumi.get(self, "remind_before_in_days")

    @property
    @pulumi.getter(name="userCreated")
    def user_created(self) -> Optional[bool]:
        return pulumi.get(self, "user_created")


@pulumi.output_type
class NdbDatabaseRestoreLcmConfigPostDeleteCommand(dict):
    def __init__(__self__, *,
                 command: Optional[str] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        return pulumi.get(self, "command")


@pulumi.output_type
class NdbDatabaseRestoreLcmConfigPreDeleteCommand(dict):
    def __init__(__self__, *,
                 command: Optional[str] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        return pulumi.get(self, "command")


@pulumi.output_type
class NdbDatabaseRestoreLcmConfigRefreshDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastRefreshDate":
            suggest = "last_refresh_date"
        elif key == "nextRefreshDate":
            suggest = "next_refresh_date"
        elif key == "refreshDateTimezone":
            suggest = "refresh_date_timezone"
        elif key == "refreshInDays":
            suggest = "refresh_in_days"
        elif key == "refreshInHours":
            suggest = "refresh_in_hours"
        elif key == "refreshInMonths":
            suggest = "refresh_in_months"
        elif key == "refreshTime":
            suggest = "refresh_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreLcmConfigRefreshDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreLcmConfigRefreshDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreLcmConfigRefreshDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_refresh_date: Optional[str] = None,
                 next_refresh_date: Optional[str] = None,
                 refresh_date_timezone: Optional[str] = None,
                 refresh_in_days: Optional[int] = None,
                 refresh_in_hours: Optional[int] = None,
                 refresh_in_months: Optional[int] = None,
                 refresh_time: Optional[str] = None):
        if last_refresh_date is not None:
            pulumi.set(__self__, "last_refresh_date", last_refresh_date)
        if next_refresh_date is not None:
            pulumi.set(__self__, "next_refresh_date", next_refresh_date)
        if refresh_date_timezone is not None:
            pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        if refresh_in_days is not None:
            pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        if refresh_in_hours is not None:
            pulumi.set(__self__, "refresh_in_hours", refresh_in_hours)
        if refresh_in_months is not None:
            pulumi.set(__self__, "refresh_in_months", refresh_in_months)
        if refresh_time is not None:
            pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="lastRefreshDate")
    def last_refresh_date(self) -> Optional[str]:
        return pulumi.get(self, "last_refresh_date")

    @property
    @pulumi.getter(name="nextRefreshDate")
    def next_refresh_date(self) -> Optional[str]:
        return pulumi.get(self, "next_refresh_date")

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> Optional[str]:
        return pulumi.get(self, "refresh_date_timezone")

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> Optional[int]:
        return pulumi.get(self, "refresh_in_days")

    @property
    @pulumi.getter(name="refreshInHours")
    def refresh_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "refresh_in_hours")

    @property
    @pulumi.getter(name="refreshInMonths")
    def refresh_in_months(self) -> Optional[int]:
        return pulumi.get(self, "refresh_in_months")

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> Optional[str]:
        return pulumi.get(self, "refresh_time")


@pulumi.output_type
class NdbDatabaseRestoreLinkedDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"
        elif key == "databaseStatus":
            suggest = "database_status"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "parentDatabaseId":
            suggest = "parent_database_id"
        elif key == "parentLinkedDatabaseId":
            suggest = "parent_linked_database_id"
        elif key == "snapshotId":
            suggest = "snapshot_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreLinkedDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreLinkedDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreLinkedDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: Optional[str] = None,
                 database_status: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 infos: Optional[Sequence['outputs.NdbDatabaseRestoreLinkedDatabaseInfo']] = None,
                 metric: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 parent_database_id: Optional[str] = None,
                 parent_linked_database_id: Optional[str] = None,
                 snapshot_id: Optional[str] = None,
                 status: Optional[str] = None,
                 timezone: Optional[str] = None):
        """
        :param str database_name: name of database
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description of database instance
        :param Sequence['NdbDatabaseRestoreLinkedDatabaseInfoArgs'] infos: info of instance
        :param Mapping[str, str] metric: Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        :param str name: Name of database instance
        :param str parent_database_id: parent database id
        :param str snapshot_id: snapshot id from you want to use for restoring the instance
        :param str status: status of instance
        """
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_database_id is not None:
            pulumi.set(__self__, "parent_database_id", parent_database_id)
        if parent_linked_database_id is not None:
            pulumi.set(__self__, "parent_linked_database_id", parent_linked_database_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        """
        name of database
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[str]:
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreLinkedDatabaseInfo']]:
        """
        info of instance
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def metric(self) -> Optional[Mapping[str, str]]:
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> Optional[str]:
        """
        parent database id
        """
        return pulumi.get(self, "parent_database_id")

    @property
    @pulumi.getter(name="parentLinkedDatabaseId")
    def parent_linked_database_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_linked_database_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        """
        snapshot id from you want to use for restoring the instance
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        return pulumi.get(self, "timezone")


@pulumi.output_type
class NdbDatabaseRestoreLinkedDatabaseInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureInfo":
            suggest = "secure_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreLinkedDatabaseInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreLinkedDatabaseInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreLinkedDatabaseInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 info: Optional[Mapping[str, str]] = None,
                 secure_info: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] info: info of instance
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[Mapping[str, str]]:
        """
        info of instance
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class NdbDatabaseRestoreProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of database instance
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseRestoreTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseRestoreTimeMachine(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "databaseId":
            suggest = "database_id"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "eaStatus":
            suggest = "ea_status"
        elif key == "scheduleId":
            suggest = "schedule_id"
        elif key == "slaId":
            suggest = "sla_id"
        elif key == "slaUpdateInProgress":
            suggest = "sla_update_in_progress"
        elif key == "slaUpdateMetadata":
            suggest = "sla_update_metadata"
        elif key == "sourceNxClusters":
            suggest = "source_nx_clusters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreTimeMachine. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreTimeMachine.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreTimeMachine.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: Optional[str] = None,
                 clone: Optional[bool] = None,
                 clones: Optional[str] = None,
                 clustered: Optional[bool] = None,
                 database: Optional[str] = None,
                 database_id: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 ea_status: Optional[str] = None,
                 id: Optional[str] = None,
                 metric: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineProperty']] = None,
                 schedule_id: Optional[str] = None,
                 schedules: Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineSchedule']] = None,
                 scope: Optional[str] = None,
                 sla_id: Optional[str] = None,
                 sla_update_in_progress: Optional[bool] = None,
                 sla_update_metadata: Optional[str] = None,
                 slas: Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineSla']] = None,
                 source_nx_clusters: Optional[Sequence[str]] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineTag']] = None,
                 type: Optional[str] = None):
        """
        :param bool clone: whether instance is cloned or not
        :param str database_id: database id
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description of database instance
        :param str metric: Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        :param str name: Name of database instance
        :param Sequence['NdbDatabaseRestoreTimeMachinePropertyArgs'] properties: properties of database created
        :param str status: status of instance
        :param Sequence['NdbDatabaseRestoreTimeMachineTagArgs'] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        :param str type: type of database
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if clone is not None:
            pulumi.set(__self__, "clone", clone)
        if clones is not None:
            pulumi.set(__self__, "clones", clones)
        if clustered is not None:
            pulumi.set(__self__, "clustered", clustered)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ea_status is not None:
            pulumi.set(__self__, "ea_status", ea_status)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)
        if sla_update_in_progress is not None:
            pulumi.set(__self__, "sla_update_in_progress", sla_update_in_progress)
        if sla_update_metadata is not None:
            pulumi.set(__self__, "sla_update_metadata", sla_update_metadata)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if source_nx_clusters is not None:
            pulumi.set(__self__, "source_nx_clusters", source_nx_clusters)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[str]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter
    def clone(self) -> Optional[bool]:
        """
        whether instance is cloned or not
        """
        return pulumi.get(self, "clone")

    @property
    @pulumi.getter
    def clones(self) -> Optional[str]:
        return pulumi.get(self, "clones")

    @property
    @pulumi.getter
    def clustered(self) -> Optional[bool]:
        return pulumi.get(self, "clustered")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        """
        database id
        """
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eaStatus")
    def ea_status(self) -> Optional[str]:
        return pulumi.get(self, "ea_status")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineProperty']]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[str]:
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter
    def schedules(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineSchedule']]:
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[str]:
        return pulumi.get(self, "sla_id")

    @property
    @pulumi.getter(name="slaUpdateInProgress")
    def sla_update_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "sla_update_in_progress")

    @property
    @pulumi.getter(name="slaUpdateMetadata")
    def sla_update_metadata(self) -> Optional[str]:
        return pulumi.get(self, "sla_update_metadata")

    @property
    @pulumi.getter
    def slas(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineSla']]:
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter(name="sourceNxClusters")
    def source_nx_clusters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_nx_clusters")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineTag']]:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of database
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NdbDatabaseRestoreTimeMachineProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreTimeMachineProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreTimeMachineProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreTimeMachineProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str description: description of database instance
        :param str name: Name of database instance
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseRestoreTimeMachineSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continuousSchedules":
            suggest = "continuous_schedules"
        elif key == "dailySchedules":
            suggest = "daily_schedules"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "globalPolicy":
            suggest = "global_policy"
        elif key == "monthlySchedules":
            suggest = "monthly_schedules"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "quartelySchedules":
            suggest = "quartely_schedules"
        elif key == "referenceCount":
            suggest = "reference_count"
        elif key == "snapshotTimeOfDays":
            suggest = "snapshot_time_of_days"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "systemPolicy":
            suggest = "system_policy"
        elif key == "timeZone":
            suggest = "time_zone"
        elif key == "uniqueName":
            suggest = "unique_name"
        elif key == "weeklySchedules":
            suggest = "weekly_schedules"
        elif key == "yearlySchedules":
            suggest = "yearly_schedules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreTimeMachineSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreTimeMachineSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreTimeMachineSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continuous_schedules: Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineScheduleContinuousSchedule']] = None,
                 daily_schedules: Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineScheduleDailySchedule']] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 global_policy: Optional[bool] = None,
                 id: Optional[str] = None,
                 monthly_schedules: Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineScheduleMonthlySchedule']] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 quartely_schedules: Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineScheduleQuartelySchedule']] = None,
                 reference_count: Optional[int] = None,
                 snapshot_time_of_days: Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDay']] = None,
                 start_time: Optional[str] = None,
                 system_policy: Optional[bool] = None,
                 time_zone: Optional[str] = None,
                 unique_name: Optional[str] = None,
                 weekly_schedules: Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineScheduleWeeklySchedule']] = None,
                 yearly_schedules: Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineScheduleYearlySchedule']] = None):
        """
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description of database instance
        :param str name: Name of database instance
        :param str time_zone: timezone on which instance is created xw
        """
        if continuous_schedules is not None:
            pulumi.set(__self__, "continuous_schedules", continuous_schedules)
        if daily_schedules is not None:
            pulumi.set(__self__, "daily_schedules", daily_schedules)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if global_policy is not None:
            pulumi.set(__self__, "global_policy", global_policy)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_schedules is not None:
            pulumi.set(__self__, "monthly_schedules", monthly_schedules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if quartely_schedules is not None:
            pulumi.set(__self__, "quartely_schedules", quartely_schedules)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if snapshot_time_of_days is not None:
            pulumi.set(__self__, "snapshot_time_of_days", snapshot_time_of_days)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if system_policy is not None:
            pulumi.set(__self__, "system_policy", system_policy)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_schedules is not None:
            pulumi.set(__self__, "weekly_schedules", weekly_schedules)
        if yearly_schedules is not None:
            pulumi.set(__self__, "yearly_schedules", yearly_schedules)

    @property
    @pulumi.getter(name="continuousSchedules")
    def continuous_schedules(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineScheduleContinuousSchedule']]:
        return pulumi.get(self, "continuous_schedules")

    @property
    @pulumi.getter(name="dailySchedules")
    def daily_schedules(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineScheduleDailySchedule']]:
        return pulumi.get(self, "daily_schedules")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="globalPolicy")
    def global_policy(self) -> Optional[bool]:
        return pulumi.get(self, "global_policy")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlySchedules")
    def monthly_schedules(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineScheduleMonthlySchedule']]:
        return pulumi.get(self, "monthly_schedules")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="quartelySchedules")
    def quartely_schedules(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineScheduleQuartelySchedule']]:
        return pulumi.get(self, "quartely_schedules")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[int]:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="snapshotTimeOfDays")
    def snapshot_time_of_days(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDay']]:
        return pulumi.get(self, "snapshot_time_of_days")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="systemPolicy")
    def system_policy(self) -> Optional[bool]:
        return pulumi.get(self, "system_policy")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        """
        timezone on which instance is created xw
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[str]:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklySchedules")
    def weekly_schedules(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineScheduleWeeklySchedule']]:
        return pulumi.get(self, "weekly_schedules")

    @property
    @pulumi.getter(name="yearlySchedules")
    def yearly_schedules(self) -> Optional[Sequence['outputs.NdbDatabaseRestoreTimeMachineScheduleYearlySchedule']]:
        return pulumi.get(self, "yearly_schedules")


@pulumi.output_type
class NdbDatabaseRestoreTimeMachineScheduleContinuousSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logBackupInterval":
            suggest = "log_backup_interval"
        elif key == "snapshotsPerDay":
            suggest = "snapshots_per_day"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreTimeMachineScheduleContinuousSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreTimeMachineScheduleContinuousSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreTimeMachineScheduleContinuousSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 log_backup_interval: Optional[int] = None,
                 snapshots_per_day: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_backup_interval is not None:
            pulumi.set(__self__, "log_backup_interval", log_backup_interval)
        if snapshots_per_day is not None:
            pulumi.set(__self__, "snapshots_per_day", snapshots_per_day)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logBackupInterval")
    def log_backup_interval(self) -> Optional[int]:
        return pulumi.get(self, "log_backup_interval")

    @property
    @pulumi.getter(name="snapshotsPerDay")
    def snapshots_per_day(self) -> Optional[int]:
        return pulumi.get(self, "snapshots_per_day")


@pulumi.output_type
class NdbDatabaseRestoreTimeMachineScheduleDailySchedule(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbDatabaseRestoreTimeMachineScheduleMonthlySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfMonth":
            suggest = "day_of_month"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreTimeMachineScheduleMonthlySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreTimeMachineScheduleMonthlySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreTimeMachineScheduleMonthlySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_month: Optional[int] = None,
                 enabled: Optional[bool] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbDatabaseRestoreTimeMachineScheduleQuartelySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfMonth":
            suggest = "day_of_month"
        elif key == "startMonth":
            suggest = "start_month"
        elif key == "startMonthValue":
            suggest = "start_month_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreTimeMachineScheduleQuartelySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreTimeMachineScheduleQuartelySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreTimeMachineScheduleQuartelySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_month: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 start_month: Optional[str] = None,
                 start_month_value: Optional[str] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if start_month is not None:
            pulumi.set(__self__, "start_month", start_month)
        if start_month_value is not None:
            pulumi.set(__self__, "start_month_value", start_month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="startMonth")
    def start_month(self) -> Optional[str]:
        return pulumi.get(self, "start_month")

    @property
    @pulumi.getter(name="startMonthValue")
    def start_month_value(self) -> Optional[str]:
        return pulumi.get(self, "start_month_value")


@pulumi.output_type
class NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDay(dict):
    def __init__(__self__, *,
                 extra: Optional[bool] = None,
                 hours: Optional[int] = None,
                 minutes: Optional[int] = None,
                 seconds: Optional[int] = None):
        if extra is not None:
            pulumi.set(__self__, "extra", extra)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def extra(self) -> Optional[bool]:
        return pulumi.get(self, "extra")

    @property
    @pulumi.getter
    def hours(self) -> Optional[int]:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> Optional[int]:
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def seconds(self) -> Optional[int]:
        return pulumi.get(self, "seconds")


@pulumi.output_type
class NdbDatabaseRestoreTimeMachineScheduleWeeklySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfWeek":
            suggest = "day_of_week"
        elif key == "dayOfWeekValue":
            suggest = "day_of_week_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreTimeMachineScheduleWeeklySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreTimeMachineScheduleWeeklySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreTimeMachineScheduleWeeklySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_week: Optional[str] = None,
                 day_of_week_value: Optional[str] = None,
                 enabled: Optional[bool] = None):
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if day_of_week_value is not None:
            pulumi.set(__self__, "day_of_week_value", day_of_week_value)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="dayOfWeekValue")
    def day_of_week_value(self) -> Optional[str]:
        return pulumi.get(self, "day_of_week_value")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbDatabaseRestoreTimeMachineScheduleYearlySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfMonth":
            suggest = "day_of_month"
        elif key == "monthValue":
            suggest = "month_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreTimeMachineScheduleYearlySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreTimeMachineScheduleYearlySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreTimeMachineScheduleYearlySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_month: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 month: Optional[str] = None,
                 month_value: Optional[str] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if month_value is not None:
            pulumi.set(__self__, "month_value", month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def month(self) -> Optional[str]:
        return pulumi.get(self, "month")

    @property
    @pulumi.getter(name="monthValue")
    def month_value(self) -> Optional[str]:
        return pulumi.get(self, "month_value")


@pulumi.output_type
class NdbDatabaseRestoreTimeMachineSla(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continuousRetention":
            suggest = "continuous_retention"
        elif key == "currentActiveFrequency":
            suggest = "current_active_frequency"
        elif key == "dailyRetention":
            suggest = "daily_retention"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "monthlyRetention":
            suggest = "monthly_retention"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "pitrEnabled":
            suggest = "pitr_enabled"
        elif key == "quarterlyRetention":
            suggest = "quarterly_retention"
        elif key == "referenceCount":
            suggest = "reference_count"
        elif key == "systemSla":
            suggest = "system_sla"
        elif key == "uniqueName":
            suggest = "unique_name"
        elif key == "weeklyRetention":
            suggest = "weekly_retention"
        elif key == "yearlyRetention":
            suggest = "yearly_retention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreTimeMachineSla. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreTimeMachineSla.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreTimeMachineSla.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continuous_retention: Optional[int] = None,
                 current_active_frequency: Optional[str] = None,
                 daily_retention: Optional[int] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 monthly_retention: Optional[int] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 pitr_enabled: Optional[bool] = None,
                 quarterly_retention: Optional[int] = None,
                 reference_count: Optional[int] = None,
                 system_sla: Optional[bool] = None,
                 unique_name: Optional[str] = None,
                 weekly_retention: Optional[int] = None,
                 yearly_retention: Optional[int] = None):
        """
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description of database instance
        :param str name: Name of database instance
        """
        if continuous_retention is not None:
            pulumi.set(__self__, "continuous_retention", continuous_retention)
        if current_active_frequency is not None:
            pulumi.set(__self__, "current_active_frequency", current_active_frequency)
        if daily_retention is not None:
            pulumi.set(__self__, "daily_retention", daily_retention)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_retention is not None:
            pulumi.set(__self__, "monthly_retention", monthly_retention)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if pitr_enabled is not None:
            pulumi.set(__self__, "pitr_enabled", pitr_enabled)
        if quarterly_retention is not None:
            pulumi.set(__self__, "quarterly_retention", quarterly_retention)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if system_sla is not None:
            pulumi.set(__self__, "system_sla", system_sla)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_retention is not None:
            pulumi.set(__self__, "weekly_retention", weekly_retention)
        if yearly_retention is not None:
            pulumi.set(__self__, "yearly_retention", yearly_retention)

    @property
    @pulumi.getter(name="continuousRetention")
    def continuous_retention(self) -> Optional[int]:
        return pulumi.get(self, "continuous_retention")

    @property
    @pulumi.getter(name="currentActiveFrequency")
    def current_active_frequency(self) -> Optional[str]:
        return pulumi.get(self, "current_active_frequency")

    @property
    @pulumi.getter(name="dailyRetention")
    def daily_retention(self) -> Optional[int]:
        return pulumi.get(self, "daily_retention")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlyRetention")
    def monthly_retention(self) -> Optional[int]:
        return pulumi.get(self, "monthly_retention")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="pitrEnabled")
    def pitr_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "pitr_enabled")

    @property
    @pulumi.getter(name="quarterlyRetention")
    def quarterly_retention(self) -> Optional[int]:
        return pulumi.get(self, "quarterly_retention")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[int]:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="systemSla")
    def system_sla(self) -> Optional[bool]:
        return pulumi.get(self, "system_sla")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[str]:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklyRetention")
    def weekly_retention(self) -> Optional[int]:
        return pulumi.get(self, "weekly_retention")

    @property
    @pulumi.getter(name="yearlyRetention")
    def yearly_retention(self) -> Optional[int]:
        return pulumi.get(self, "yearly_retention")


@pulumi.output_type
class NdbDatabaseRestoreTimeMachineTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseRestoreTimeMachineTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseRestoreTimeMachineTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseRestoreTimeMachineTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseScaleDatabaseNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "databaseId":
            suggest = "database_id"
        elif key == "databaseStatus":
            suggest = "database_status"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "dbserverId":
            suggest = "dbserver_id"
        elif key == "protectionDomainId":
            suggest = "protection_domain_id"
        elif key == "protectionDomains":
            suggest = "protection_domains"
        elif key == "softwareInstallationId":
            suggest = "software_installation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleDatabaseNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleDatabaseNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleDatabaseNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: Optional[Mapping[str, str]] = None,
                 database_id: Optional[str] = None,
                 database_status: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 dbserver: Optional[Mapping[str, str]] = None,
                 dbserver_id: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 infos: Optional[Sequence['outputs.NdbDatabaseScaleDatabaseNodeInfo']] = None,
                 name: Optional[str] = None,
                 primary: Optional[bool] = None,
                 properties: Optional[Sequence['outputs.NdbDatabaseScaleDatabaseNodeProperty']] = None,
                 protection_domain_id: Optional[str] = None,
                 protection_domains: Optional[Sequence['outputs.NdbDatabaseScaleDatabaseNodeProtectionDomain']] = None,
                 software_installation_id: Optional[str] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.NdbDatabaseScaleDatabaseNodeTag']] = None):
        """
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description of database instance
        :param Sequence['NdbDatabaseScaleDatabaseNodeInfoArgs'] infos: info of instance
        :param str name: Name of database instance
        :param Sequence['NdbDatabaseScaleDatabaseNodePropertyArgs'] properties: properties of database created
        :param str status: status of instance
        :param Sequence['NdbDatabaseScaleDatabaseNodeTagArgs'] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if dbserver is not None:
            pulumi.set(__self__, "dbserver", dbserver)
        if dbserver_id is not None:
            pulumi.set(__self__, "dbserver_id", dbserver_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if protection_domain_id is not None:
            pulumi.set(__self__, "protection_domain_id", protection_domain_id)
        if protection_domains is not None:
            pulumi.set(__self__, "protection_domains", protection_domains)
        if software_installation_id is not None:
            pulumi.set(__self__, "software_installation_id", software_installation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[str]:
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def dbserver(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "dbserver")

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> Optional[str]:
        return pulumi.get(self, "dbserver_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.NdbDatabaseScaleDatabaseNodeInfo']]:
        """
        info of instance
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbDatabaseScaleDatabaseNodeProperty']]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="protectionDomainId")
    def protection_domain_id(self) -> Optional[str]:
        return pulumi.get(self, "protection_domain_id")

    @property
    @pulumi.getter(name="protectionDomains")
    def protection_domains(self) -> Optional[Sequence['outputs.NdbDatabaseScaleDatabaseNodeProtectionDomain']]:
        return pulumi.get(self, "protection_domains")

    @property
    @pulumi.getter(name="softwareInstallationId")
    def software_installation_id(self) -> Optional[str]:
        return pulumi.get(self, "software_installation_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.NdbDatabaseScaleDatabaseNodeTag']]:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class NdbDatabaseScaleDatabaseNodeInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureInfo":
            suggest = "secure_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleDatabaseNodeInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleDatabaseNodeInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleDatabaseNodeInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 info: Optional[Mapping[str, str]] = None,
                 secure_info: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] info: info of instance
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[Mapping[str, str]]:
        """
        info of instance
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class NdbDatabaseScaleDatabaseNodeProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleDatabaseNodeProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleDatabaseNodeProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleDatabaseNodeProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str description: description of database instance
        :param str name: Name of database instance
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseScaleDatabaseNodeProtectionDomain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assocEntities":
            suggest = "assoc_entities"
        elif key == "cloudId":
            suggest = "cloud_id"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "eraCreated":
            suggest = "era_created"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "primaryHost":
            suggest = "primary_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleDatabaseNodeProtectionDomain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleDatabaseNodeProtectionDomain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleDatabaseNodeProtectionDomain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assoc_entities: Optional[Sequence[str]] = None,
                 cloud_id: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 era_created: Optional[bool] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 primary_host: Optional[str] = None,
                 properties: Optional[Sequence['outputs.NdbDatabaseScaleDatabaseNodeProtectionDomainProperty']] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description of database instance
        :param str name: Name of database instance
        :param Sequence['NdbDatabaseScaleDatabaseNodeProtectionDomainPropertyArgs'] properties: properties of database created
        :param str status: status of instance
        :param str type: type of database
        """
        if assoc_entities is not None:
            pulumi.set(__self__, "assoc_entities", assoc_entities)
        if cloud_id is not None:
            pulumi.set(__self__, "cloud_id", cloud_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if era_created is not None:
            pulumi.set(__self__, "era_created", era_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if primary_host is not None:
            pulumi.set(__self__, "primary_host", primary_host)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assocEntities")
    def assoc_entities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "assoc_entities")

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> Optional[str]:
        return pulumi.get(self, "cloud_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eraCreated")
    def era_created(self) -> Optional[bool]:
        return pulumi.get(self, "era_created")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="primaryHost")
    def primary_host(self) -> Optional[str]:
        return pulumi.get(self, "primary_host")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbDatabaseScaleDatabaseNodeProtectionDomainProperty']]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of database
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NdbDatabaseScaleDatabaseNodeProtectionDomainProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleDatabaseNodeProtectionDomainProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleDatabaseNodeProtectionDomainProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleDatabaseNodeProtectionDomainProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str description: description of database instance
        :param str name: Name of database instance
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseScaleDatabaseNodeTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleDatabaseNodeTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleDatabaseNodeTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleDatabaseNodeTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseScaleInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bpgConfigs":
            suggest = "bpg_configs"
        elif key == "secureInfo":
            suggest = "secure_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bpg_configs: Optional[Sequence['outputs.NdbDatabaseScaleInfoBpgConfig']] = None,
                 secure_info: Optional[Mapping[str, str]] = None):
        if bpg_configs is not None:
            pulumi.set(__self__, "bpg_configs", bpg_configs)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="bpgConfigs")
    def bpg_configs(self) -> Optional[Sequence['outputs.NdbDatabaseScaleInfoBpgConfig']]:
        return pulumi.get(self, "bpg_configs")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class NdbDatabaseScaleInfoBpgConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bpgDbParams":
            suggest = "bpg_db_params"
        elif key == "vmProperties":
            suggest = "vm_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleInfoBpgConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleInfoBpgConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleInfoBpgConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bpg_db_params: Optional[Sequence['outputs.NdbDatabaseScaleInfoBpgConfigBpgDbParam']] = None,
                 storages: Optional[Sequence['outputs.NdbDatabaseScaleInfoBpgConfigStorage']] = None,
                 vm_properties: Optional[Sequence['outputs.NdbDatabaseScaleInfoBpgConfigVmProperty']] = None):
        if bpg_db_params is not None:
            pulumi.set(__self__, "bpg_db_params", bpg_db_params)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if vm_properties is not None:
            pulumi.set(__self__, "vm_properties", vm_properties)

    @property
    @pulumi.getter(name="bpgDbParams")
    def bpg_db_params(self) -> Optional[Sequence['outputs.NdbDatabaseScaleInfoBpgConfigBpgDbParam']]:
        return pulumi.get(self, "bpg_db_params")

    @property
    @pulumi.getter
    def storages(self) -> Optional[Sequence['outputs.NdbDatabaseScaleInfoBpgConfigStorage']]:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="vmProperties")
    def vm_properties(self) -> Optional[Sequence['outputs.NdbDatabaseScaleInfoBpgConfigVmProperty']]:
        return pulumi.get(self, "vm_properties")


@pulumi.output_type
class NdbDatabaseScaleInfoBpgConfigBpgDbParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "effectiveCacheSize":
            suggest = "effective_cache_size"
        elif key == "maintenanceWorkMem":
            suggest = "maintenance_work_mem"
        elif key == "maxParallelWorkersPerGather":
            suggest = "max_parallel_workers_per_gather"
        elif key == "maxWorkerProcesses":
            suggest = "max_worker_processes"
        elif key == "sharedBuffers":
            suggest = "shared_buffers"
        elif key == "workMem":
            suggest = "work_mem"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleInfoBpgConfigBpgDbParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleInfoBpgConfigBpgDbParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleInfoBpgConfigBpgDbParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 effective_cache_size: Optional[str] = None,
                 maintenance_work_mem: Optional[str] = None,
                 max_parallel_workers_per_gather: Optional[str] = None,
                 max_worker_processes: Optional[str] = None,
                 shared_buffers: Optional[str] = None,
                 work_mem: Optional[str] = None):
        if effective_cache_size is not None:
            pulumi.set(__self__, "effective_cache_size", effective_cache_size)
        if maintenance_work_mem is not None:
            pulumi.set(__self__, "maintenance_work_mem", maintenance_work_mem)
        if max_parallel_workers_per_gather is not None:
            pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if shared_buffers is not None:
            pulumi.set(__self__, "shared_buffers", shared_buffers)
        if work_mem is not None:
            pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="effectiveCacheSize")
    def effective_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "effective_cache_size")

    @property
    @pulumi.getter(name="maintenanceWorkMem")
    def maintenance_work_mem(self) -> Optional[str]:
        return pulumi.get(self, "maintenance_work_mem")

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> Optional[str]:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[str]:
        return pulumi.get(self, "max_worker_processes")

    @property
    @pulumi.getter(name="sharedBuffers")
    def shared_buffers(self) -> Optional[str]:
        return pulumi.get(self, "shared_buffers")

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> Optional[str]:
        return pulumi.get(self, "work_mem")


@pulumi.output_type
class NdbDatabaseScaleInfoBpgConfigStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveStorages":
            suggest = "archive_storages"
        elif key == "dataDisks":
            suggest = "data_disks"
        elif key == "logDisks":
            suggest = "log_disks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleInfoBpgConfigStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleInfoBpgConfigStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleInfoBpgConfigStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_storages: Optional[Sequence['outputs.NdbDatabaseScaleInfoBpgConfigStorageArchiveStorage']] = None,
                 data_disks: Optional[Sequence['outputs.NdbDatabaseScaleInfoBpgConfigStorageDataDisk']] = None,
                 log_disks: Optional[Sequence['outputs.NdbDatabaseScaleInfoBpgConfigStorageLogDisk']] = None):
        if archive_storages is not None:
            pulumi.set(__self__, "archive_storages", archive_storages)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if log_disks is not None:
            pulumi.set(__self__, "log_disks", log_disks)

    @property
    @pulumi.getter(name="archiveStorages")
    def archive_storages(self) -> Optional[Sequence['outputs.NdbDatabaseScaleInfoBpgConfigStorageArchiveStorage']]:
        return pulumi.get(self, "archive_storages")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.NdbDatabaseScaleInfoBpgConfigStorageDataDisk']]:
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="logDisks")
    def log_disks(self) -> Optional[Sequence['outputs.NdbDatabaseScaleInfoBpgConfigStorageLogDisk']]:
        return pulumi.get(self, "log_disks")


@pulumi.output_type
class NdbDatabaseScaleInfoBpgConfigStorageArchiveStorage(dict):
    def __init__(__self__, *,
                 size: Optional[float] = None):
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> Optional[float]:
        return pulumi.get(self, "size")


@pulumi.output_type
class NdbDatabaseScaleInfoBpgConfigStorageDataDisk(dict):
    def __init__(__self__, *,
                 count: Optional[float] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> Optional[float]:
        return pulumi.get(self, "count")


@pulumi.output_type
class NdbDatabaseScaleInfoBpgConfigStorageLogDisk(dict):
    def __init__(__self__, *,
                 count: Optional[float] = None,
                 size: Optional[float] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> Optional[float]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def size(self) -> Optional[float]:
        return pulumi.get(self, "size")


@pulumi.output_type
class NdbDatabaseScaleInfoBpgConfigVmProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dirtyBackgroundRatio":
            suggest = "dirty_background_ratio"
        elif key == "dirtyExpireCentisecs":
            suggest = "dirty_expire_centisecs"
        elif key == "dirtyRatio":
            suggest = "dirty_ratio"
        elif key == "dirtyWritebackCentisecs":
            suggest = "dirty_writeback_centisecs"
        elif key == "nrHugepages":
            suggest = "nr_hugepages"
        elif key == "overcommitMemory":
            suggest = "overcommit_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleInfoBpgConfigVmProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleInfoBpgConfigVmProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleInfoBpgConfigVmProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dirty_background_ratio: Optional[float] = None,
                 dirty_expire_centisecs: Optional[float] = None,
                 dirty_ratio: Optional[float] = None,
                 dirty_writeback_centisecs: Optional[float] = None,
                 nr_hugepages: Optional[float] = None,
                 overcommit_memory: Optional[float] = None,
                 swappiness: Optional[float] = None):
        if dirty_background_ratio is not None:
            pulumi.set(__self__, "dirty_background_ratio", dirty_background_ratio)
        if dirty_expire_centisecs is not None:
            pulumi.set(__self__, "dirty_expire_centisecs", dirty_expire_centisecs)
        if dirty_ratio is not None:
            pulumi.set(__self__, "dirty_ratio", dirty_ratio)
        if dirty_writeback_centisecs is not None:
            pulumi.set(__self__, "dirty_writeback_centisecs", dirty_writeback_centisecs)
        if nr_hugepages is not None:
            pulumi.set(__self__, "nr_hugepages", nr_hugepages)
        if overcommit_memory is not None:
            pulumi.set(__self__, "overcommit_memory", overcommit_memory)
        if swappiness is not None:
            pulumi.set(__self__, "swappiness", swappiness)

    @property
    @pulumi.getter(name="dirtyBackgroundRatio")
    def dirty_background_ratio(self) -> Optional[float]:
        return pulumi.get(self, "dirty_background_ratio")

    @property
    @pulumi.getter(name="dirtyExpireCentisecs")
    def dirty_expire_centisecs(self) -> Optional[float]:
        return pulumi.get(self, "dirty_expire_centisecs")

    @property
    @pulumi.getter(name="dirtyRatio")
    def dirty_ratio(self) -> Optional[float]:
        return pulumi.get(self, "dirty_ratio")

    @property
    @pulumi.getter(name="dirtyWritebackCentisecs")
    def dirty_writeback_centisecs(self) -> Optional[float]:
        return pulumi.get(self, "dirty_writeback_centisecs")

    @property
    @pulumi.getter(name="nrHugepages")
    def nr_hugepages(self) -> Optional[float]:
        return pulumi.get(self, "nr_hugepages")

    @property
    @pulumi.getter(name="overcommitMemory")
    def overcommit_memory(self) -> Optional[float]:
        return pulumi.get(self, "overcommit_memory")

    @property
    @pulumi.getter
    def swappiness(self) -> Optional[float]:
        return pulumi.get(self, "swappiness")


@pulumi.output_type
class NdbDatabaseScaleLcmConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expiryDetails":
            suggest = "expiry_details"
        elif key == "postDeleteCommands":
            suggest = "post_delete_commands"
        elif key == "preDeleteCommands":
            suggest = "pre_delete_commands"
        elif key == "refreshDetails":
            suggest = "refresh_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleLcmConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleLcmConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleLcmConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expiry_details: Optional[Sequence['outputs.NdbDatabaseScaleLcmConfigExpiryDetail']] = None,
                 post_delete_commands: Optional[Sequence['outputs.NdbDatabaseScaleLcmConfigPostDeleteCommand']] = None,
                 pre_delete_commands: Optional[Sequence['outputs.NdbDatabaseScaleLcmConfigPreDeleteCommand']] = None,
                 refresh_details: Optional[Sequence['outputs.NdbDatabaseScaleLcmConfigRefreshDetail']] = None):
        if expiry_details is not None:
            pulumi.set(__self__, "expiry_details", expiry_details)
        if post_delete_commands is not None:
            pulumi.set(__self__, "post_delete_commands", post_delete_commands)
        if pre_delete_commands is not None:
            pulumi.set(__self__, "pre_delete_commands", pre_delete_commands)
        if refresh_details is not None:
            pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Optional[Sequence['outputs.NdbDatabaseScaleLcmConfigExpiryDetail']]:
        return pulumi.get(self, "expiry_details")

    @property
    @pulumi.getter(name="postDeleteCommands")
    def post_delete_commands(self) -> Optional[Sequence['outputs.NdbDatabaseScaleLcmConfigPostDeleteCommand']]:
        return pulumi.get(self, "post_delete_commands")

    @property
    @pulumi.getter(name="preDeleteCommands")
    def pre_delete_commands(self) -> Optional[Sequence['outputs.NdbDatabaseScaleLcmConfigPreDeleteCommand']]:
        return pulumi.get(self, "pre_delete_commands")

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Optional[Sequence['outputs.NdbDatabaseScaleLcmConfigRefreshDetail']]:
        return pulumi.get(self, "refresh_details")


@pulumi.output_type
class NdbDatabaseScaleLcmConfigExpiryDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteDatabase":
            suggest = "delete_database"
        elif key == "deleteTimeMachine":
            suggest = "delete_time_machine"
        elif key == "deleteVm":
            suggest = "delete_vm"
        elif key == "effectiveTimestamp":
            suggest = "effective_timestamp"
        elif key == "expireInDays":
            suggest = "expire_in_days"
        elif key == "expiryDateTimezone":
            suggest = "expiry_date_timezone"
        elif key == "expiryTimestamp":
            suggest = "expiry_timestamp"
        elif key == "remindBeforeInDays":
            suggest = "remind_before_in_days"
        elif key == "userCreated":
            suggest = "user_created"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleLcmConfigExpiryDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleLcmConfigExpiryDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleLcmConfigExpiryDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_database: Optional[bool] = None,
                 delete_time_machine: Optional[bool] = None,
                 delete_vm: Optional[bool] = None,
                 effective_timestamp: Optional[str] = None,
                 expire_in_days: Optional[int] = None,
                 expiry_date_timezone: Optional[str] = None,
                 expiry_timestamp: Optional[str] = None,
                 remind_before_in_days: Optional[int] = None,
                 user_created: Optional[bool] = None):
        if delete_database is not None:
            pulumi.set(__self__, "delete_database", delete_database)
        if delete_time_machine is not None:
            pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        if delete_vm is not None:
            pulumi.set(__self__, "delete_vm", delete_vm)
        if effective_timestamp is not None:
            pulumi.set(__self__, "effective_timestamp", effective_timestamp)
        if expire_in_days is not None:
            pulumi.set(__self__, "expire_in_days", expire_in_days)
        if expiry_date_timezone is not None:
            pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        if expiry_timestamp is not None:
            pulumi.set(__self__, "expiry_timestamp", expiry_timestamp)
        if remind_before_in_days is not None:
            pulumi.set(__self__, "remind_before_in_days", remind_before_in_days)
        if user_created is not None:
            pulumi.set(__self__, "user_created", user_created)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> Optional[bool]:
        return pulumi.get(self, "delete_database")

    @property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> Optional[bool]:
        return pulumi.get(self, "delete_time_machine")

    @property
    @pulumi.getter(name="deleteVm")
    def delete_vm(self) -> Optional[bool]:
        return pulumi.get(self, "delete_vm")

    @property
    @pulumi.getter(name="effectiveTimestamp")
    def effective_timestamp(self) -> Optional[str]:
        return pulumi.get(self, "effective_timestamp")

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> Optional[int]:
        return pulumi.get(self, "expire_in_days")

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> Optional[str]:
        return pulumi.get(self, "expiry_date_timezone")

    @property
    @pulumi.getter(name="expiryTimestamp")
    def expiry_timestamp(self) -> Optional[str]:
        return pulumi.get(self, "expiry_timestamp")

    @property
    @pulumi.getter(name="remindBeforeInDays")
    def remind_before_in_days(self) -> Optional[int]:
        return pulumi.get(self, "remind_before_in_days")

    @property
    @pulumi.getter(name="userCreated")
    def user_created(self) -> Optional[bool]:
        return pulumi.get(self, "user_created")


@pulumi.output_type
class NdbDatabaseScaleLcmConfigPostDeleteCommand(dict):
    def __init__(__self__, *,
                 command: Optional[str] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        return pulumi.get(self, "command")


@pulumi.output_type
class NdbDatabaseScaleLcmConfigPreDeleteCommand(dict):
    def __init__(__self__, *,
                 command: Optional[str] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        return pulumi.get(self, "command")


@pulumi.output_type
class NdbDatabaseScaleLcmConfigRefreshDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastRefreshDate":
            suggest = "last_refresh_date"
        elif key == "nextRefreshDate":
            suggest = "next_refresh_date"
        elif key == "refreshDateTimezone":
            suggest = "refresh_date_timezone"
        elif key == "refreshInDays":
            suggest = "refresh_in_days"
        elif key == "refreshInHours":
            suggest = "refresh_in_hours"
        elif key == "refreshInMonths":
            suggest = "refresh_in_months"
        elif key == "refreshTime":
            suggest = "refresh_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleLcmConfigRefreshDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleLcmConfigRefreshDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleLcmConfigRefreshDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_refresh_date: Optional[str] = None,
                 next_refresh_date: Optional[str] = None,
                 refresh_date_timezone: Optional[str] = None,
                 refresh_in_days: Optional[int] = None,
                 refresh_in_hours: Optional[int] = None,
                 refresh_in_months: Optional[int] = None,
                 refresh_time: Optional[str] = None):
        if last_refresh_date is not None:
            pulumi.set(__self__, "last_refresh_date", last_refresh_date)
        if next_refresh_date is not None:
            pulumi.set(__self__, "next_refresh_date", next_refresh_date)
        if refresh_date_timezone is not None:
            pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        if refresh_in_days is not None:
            pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        if refresh_in_hours is not None:
            pulumi.set(__self__, "refresh_in_hours", refresh_in_hours)
        if refresh_in_months is not None:
            pulumi.set(__self__, "refresh_in_months", refresh_in_months)
        if refresh_time is not None:
            pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="lastRefreshDate")
    def last_refresh_date(self) -> Optional[str]:
        return pulumi.get(self, "last_refresh_date")

    @property
    @pulumi.getter(name="nextRefreshDate")
    def next_refresh_date(self) -> Optional[str]:
        return pulumi.get(self, "next_refresh_date")

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> Optional[str]:
        return pulumi.get(self, "refresh_date_timezone")

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> Optional[int]:
        return pulumi.get(self, "refresh_in_days")

    @property
    @pulumi.getter(name="refreshInHours")
    def refresh_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "refresh_in_hours")

    @property
    @pulumi.getter(name="refreshInMonths")
    def refresh_in_months(self) -> Optional[int]:
        return pulumi.get(self, "refresh_in_months")

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> Optional[str]:
        return pulumi.get(self, "refresh_time")


@pulumi.output_type
class NdbDatabaseScaleLinkedDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"
        elif key == "databaseStatus":
            suggest = "database_status"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "parentDatabaseId":
            suggest = "parent_database_id"
        elif key == "parentLinkedDatabaseId":
            suggest = "parent_linked_database_id"
        elif key == "snapshotId":
            suggest = "snapshot_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleLinkedDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleLinkedDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleLinkedDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: Optional[str] = None,
                 database_status: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 infos: Optional[Sequence['outputs.NdbDatabaseScaleLinkedDatabaseInfo']] = None,
                 metric: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 parent_database_id: Optional[str] = None,
                 parent_linked_database_id: Optional[str] = None,
                 snapshot_id: Optional[str] = None,
                 status: Optional[str] = None,
                 timezone: Optional[str] = None):
        """
        :param str database_name: name of database
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description of database instance
        :param Sequence['NdbDatabaseScaleLinkedDatabaseInfoArgs'] infos: info of instance
        :param Mapping[str, str] metric: Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        :param str name: Name of database instance
        :param str parent_database_id: parent database id
        :param str status: status of instance
        """
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_database_id is not None:
            pulumi.set(__self__, "parent_database_id", parent_database_id)
        if parent_linked_database_id is not None:
            pulumi.set(__self__, "parent_linked_database_id", parent_linked_database_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        """
        name of database
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[str]:
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.NdbDatabaseScaleLinkedDatabaseInfo']]:
        """
        info of instance
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def metric(self) -> Optional[Mapping[str, str]]:
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> Optional[str]:
        """
        parent database id
        """
        return pulumi.get(self, "parent_database_id")

    @property
    @pulumi.getter(name="parentLinkedDatabaseId")
    def parent_linked_database_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_linked_database_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        return pulumi.get(self, "timezone")


@pulumi.output_type
class NdbDatabaseScaleLinkedDatabaseInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureInfo":
            suggest = "secure_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleLinkedDatabaseInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleLinkedDatabaseInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleLinkedDatabaseInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 info: Optional[Mapping[str, str]] = None,
                 secure_info: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] info: info of instance
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[Mapping[str, str]]:
        """
        info of instance
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class NdbDatabaseScaleProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of database instance
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseScaleTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseScaleTimeMachine(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "databaseId":
            suggest = "database_id"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "eaStatus":
            suggest = "ea_status"
        elif key == "scheduleId":
            suggest = "schedule_id"
        elif key == "slaId":
            suggest = "sla_id"
        elif key == "slaUpdateInProgress":
            suggest = "sla_update_in_progress"
        elif key == "slaUpdateMetadata":
            suggest = "sla_update_metadata"
        elif key == "sourceNxClusters":
            suggest = "source_nx_clusters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleTimeMachine. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleTimeMachine.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleTimeMachine.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: Optional[str] = None,
                 clone: Optional[bool] = None,
                 clones: Optional[str] = None,
                 clustered: Optional[bool] = None,
                 database: Optional[str] = None,
                 database_id: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 ea_status: Optional[str] = None,
                 id: Optional[str] = None,
                 metric: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineProperty']] = None,
                 schedule_id: Optional[str] = None,
                 schedules: Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineSchedule']] = None,
                 scope: Optional[str] = None,
                 sla_id: Optional[str] = None,
                 sla_update_in_progress: Optional[bool] = None,
                 sla_update_metadata: Optional[str] = None,
                 slas: Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineSla']] = None,
                 source_nx_clusters: Optional[Sequence[str]] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineTag']] = None,
                 type: Optional[str] = None):
        """
        :param bool clone: whether instance is cloned or not
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description of database instance
        :param str metric: Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        :param str name: Name of database instance
        :param Sequence['NdbDatabaseScaleTimeMachinePropertyArgs'] properties: properties of database created
        :param str status: status of instance
        :param Sequence['NdbDatabaseScaleTimeMachineTagArgs'] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        :param str type: type of database
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if clone is not None:
            pulumi.set(__self__, "clone", clone)
        if clones is not None:
            pulumi.set(__self__, "clones", clones)
        if clustered is not None:
            pulumi.set(__self__, "clustered", clustered)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ea_status is not None:
            pulumi.set(__self__, "ea_status", ea_status)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)
        if sla_update_in_progress is not None:
            pulumi.set(__self__, "sla_update_in_progress", sla_update_in_progress)
        if sla_update_metadata is not None:
            pulumi.set(__self__, "sla_update_metadata", sla_update_metadata)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if source_nx_clusters is not None:
            pulumi.set(__self__, "source_nx_clusters", source_nx_clusters)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[str]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter
    def clone(self) -> Optional[bool]:
        """
        whether instance is cloned or not
        """
        return pulumi.get(self, "clone")

    @property
    @pulumi.getter
    def clones(self) -> Optional[str]:
        return pulumi.get(self, "clones")

    @property
    @pulumi.getter
    def clustered(self) -> Optional[bool]:
        return pulumi.get(self, "clustered")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eaStatus")
    def ea_status(self) -> Optional[str]:
        return pulumi.get(self, "ea_status")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineProperty']]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[str]:
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter
    def schedules(self) -> Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineSchedule']]:
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[str]:
        return pulumi.get(self, "sla_id")

    @property
    @pulumi.getter(name="slaUpdateInProgress")
    def sla_update_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "sla_update_in_progress")

    @property
    @pulumi.getter(name="slaUpdateMetadata")
    def sla_update_metadata(self) -> Optional[str]:
        return pulumi.get(self, "sla_update_metadata")

    @property
    @pulumi.getter
    def slas(self) -> Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineSla']]:
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter(name="sourceNxClusters")
    def source_nx_clusters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_nx_clusters")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineTag']]:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of database
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NdbDatabaseScaleTimeMachineProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleTimeMachineProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleTimeMachineProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleTimeMachineProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str description: description of database instance
        :param str name: Name of database instance
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseScaleTimeMachineSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continuousSchedules":
            suggest = "continuous_schedules"
        elif key == "dailySchedules":
            suggest = "daily_schedules"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "globalPolicy":
            suggest = "global_policy"
        elif key == "monthlySchedules":
            suggest = "monthly_schedules"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "quartelySchedules":
            suggest = "quartely_schedules"
        elif key == "referenceCount":
            suggest = "reference_count"
        elif key == "snapshotTimeOfDays":
            suggest = "snapshot_time_of_days"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "systemPolicy":
            suggest = "system_policy"
        elif key == "timeZone":
            suggest = "time_zone"
        elif key == "uniqueName":
            suggest = "unique_name"
        elif key == "weeklySchedules":
            suggest = "weekly_schedules"
        elif key == "yearlySchedules":
            suggest = "yearly_schedules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleTimeMachineSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleTimeMachineSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleTimeMachineSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continuous_schedules: Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineScheduleContinuousSchedule']] = None,
                 daily_schedules: Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineScheduleDailySchedule']] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 global_policy: Optional[bool] = None,
                 id: Optional[str] = None,
                 monthly_schedules: Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineScheduleMonthlySchedule']] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 quartely_schedules: Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineScheduleQuartelySchedule']] = None,
                 reference_count: Optional[int] = None,
                 snapshot_time_of_days: Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDay']] = None,
                 start_time: Optional[str] = None,
                 system_policy: Optional[bool] = None,
                 time_zone: Optional[str] = None,
                 unique_name: Optional[str] = None,
                 weekly_schedules: Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineScheduleWeeklySchedule']] = None,
                 yearly_schedules: Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineScheduleYearlySchedule']] = None):
        """
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description of database instance
        :param str name: Name of database instance
        :param str time_zone: timezone on which instance is created xw
        """
        if continuous_schedules is not None:
            pulumi.set(__self__, "continuous_schedules", continuous_schedules)
        if daily_schedules is not None:
            pulumi.set(__self__, "daily_schedules", daily_schedules)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if global_policy is not None:
            pulumi.set(__self__, "global_policy", global_policy)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_schedules is not None:
            pulumi.set(__self__, "monthly_schedules", monthly_schedules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if quartely_schedules is not None:
            pulumi.set(__self__, "quartely_schedules", quartely_schedules)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if snapshot_time_of_days is not None:
            pulumi.set(__self__, "snapshot_time_of_days", snapshot_time_of_days)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if system_policy is not None:
            pulumi.set(__self__, "system_policy", system_policy)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_schedules is not None:
            pulumi.set(__self__, "weekly_schedules", weekly_schedules)
        if yearly_schedules is not None:
            pulumi.set(__self__, "yearly_schedules", yearly_schedules)

    @property
    @pulumi.getter(name="continuousSchedules")
    def continuous_schedules(self) -> Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineScheduleContinuousSchedule']]:
        return pulumi.get(self, "continuous_schedules")

    @property
    @pulumi.getter(name="dailySchedules")
    def daily_schedules(self) -> Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineScheduleDailySchedule']]:
        return pulumi.get(self, "daily_schedules")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="globalPolicy")
    def global_policy(self) -> Optional[bool]:
        return pulumi.get(self, "global_policy")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlySchedules")
    def monthly_schedules(self) -> Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineScheduleMonthlySchedule']]:
        return pulumi.get(self, "monthly_schedules")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="quartelySchedules")
    def quartely_schedules(self) -> Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineScheduleQuartelySchedule']]:
        return pulumi.get(self, "quartely_schedules")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[int]:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="snapshotTimeOfDays")
    def snapshot_time_of_days(self) -> Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDay']]:
        return pulumi.get(self, "snapshot_time_of_days")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="systemPolicy")
    def system_policy(self) -> Optional[bool]:
        return pulumi.get(self, "system_policy")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        """
        timezone on which instance is created xw
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[str]:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklySchedules")
    def weekly_schedules(self) -> Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineScheduleWeeklySchedule']]:
        return pulumi.get(self, "weekly_schedules")

    @property
    @pulumi.getter(name="yearlySchedules")
    def yearly_schedules(self) -> Optional[Sequence['outputs.NdbDatabaseScaleTimeMachineScheduleYearlySchedule']]:
        return pulumi.get(self, "yearly_schedules")


@pulumi.output_type
class NdbDatabaseScaleTimeMachineScheduleContinuousSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logBackupInterval":
            suggest = "log_backup_interval"
        elif key == "snapshotsPerDay":
            suggest = "snapshots_per_day"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleTimeMachineScheduleContinuousSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleTimeMachineScheduleContinuousSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleTimeMachineScheduleContinuousSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 log_backup_interval: Optional[int] = None,
                 snapshots_per_day: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_backup_interval is not None:
            pulumi.set(__self__, "log_backup_interval", log_backup_interval)
        if snapshots_per_day is not None:
            pulumi.set(__self__, "snapshots_per_day", snapshots_per_day)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logBackupInterval")
    def log_backup_interval(self) -> Optional[int]:
        return pulumi.get(self, "log_backup_interval")

    @property
    @pulumi.getter(name="snapshotsPerDay")
    def snapshots_per_day(self) -> Optional[int]:
        return pulumi.get(self, "snapshots_per_day")


@pulumi.output_type
class NdbDatabaseScaleTimeMachineScheduleDailySchedule(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbDatabaseScaleTimeMachineScheduleMonthlySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfMonth":
            suggest = "day_of_month"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleTimeMachineScheduleMonthlySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleTimeMachineScheduleMonthlySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleTimeMachineScheduleMonthlySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_month: Optional[int] = None,
                 enabled: Optional[bool] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbDatabaseScaleTimeMachineScheduleQuartelySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfMonth":
            suggest = "day_of_month"
        elif key == "startMonth":
            suggest = "start_month"
        elif key == "startMonthValue":
            suggest = "start_month_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleTimeMachineScheduleQuartelySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleTimeMachineScheduleQuartelySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleTimeMachineScheduleQuartelySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_month: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 start_month: Optional[str] = None,
                 start_month_value: Optional[str] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if start_month is not None:
            pulumi.set(__self__, "start_month", start_month)
        if start_month_value is not None:
            pulumi.set(__self__, "start_month_value", start_month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="startMonth")
    def start_month(self) -> Optional[str]:
        return pulumi.get(self, "start_month")

    @property
    @pulumi.getter(name="startMonthValue")
    def start_month_value(self) -> Optional[str]:
        return pulumi.get(self, "start_month_value")


@pulumi.output_type
class NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDay(dict):
    def __init__(__self__, *,
                 extra: Optional[bool] = None,
                 hours: Optional[int] = None,
                 minutes: Optional[int] = None,
                 seconds: Optional[int] = None):
        if extra is not None:
            pulumi.set(__self__, "extra", extra)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def extra(self) -> Optional[bool]:
        return pulumi.get(self, "extra")

    @property
    @pulumi.getter
    def hours(self) -> Optional[int]:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> Optional[int]:
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def seconds(self) -> Optional[int]:
        return pulumi.get(self, "seconds")


@pulumi.output_type
class NdbDatabaseScaleTimeMachineScheduleWeeklySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfWeek":
            suggest = "day_of_week"
        elif key == "dayOfWeekValue":
            suggest = "day_of_week_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleTimeMachineScheduleWeeklySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleTimeMachineScheduleWeeklySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleTimeMachineScheduleWeeklySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_week: Optional[str] = None,
                 day_of_week_value: Optional[str] = None,
                 enabled: Optional[bool] = None):
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if day_of_week_value is not None:
            pulumi.set(__self__, "day_of_week_value", day_of_week_value)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="dayOfWeekValue")
    def day_of_week_value(self) -> Optional[str]:
        return pulumi.get(self, "day_of_week_value")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbDatabaseScaleTimeMachineScheduleYearlySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfMonth":
            suggest = "day_of_month"
        elif key == "monthValue":
            suggest = "month_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleTimeMachineScheduleYearlySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleTimeMachineScheduleYearlySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleTimeMachineScheduleYearlySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_month: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 month: Optional[str] = None,
                 month_value: Optional[str] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if month_value is not None:
            pulumi.set(__self__, "month_value", month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def month(self) -> Optional[str]:
        return pulumi.get(self, "month")

    @property
    @pulumi.getter(name="monthValue")
    def month_value(self) -> Optional[str]:
        return pulumi.get(self, "month_value")


@pulumi.output_type
class NdbDatabaseScaleTimeMachineSla(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continuousRetention":
            suggest = "continuous_retention"
        elif key == "currentActiveFrequency":
            suggest = "current_active_frequency"
        elif key == "dailyRetention":
            suggest = "daily_retention"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "monthlyRetention":
            suggest = "monthly_retention"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "pitrEnabled":
            suggest = "pitr_enabled"
        elif key == "quarterlyRetention":
            suggest = "quarterly_retention"
        elif key == "referenceCount":
            suggest = "reference_count"
        elif key == "systemSla":
            suggest = "system_sla"
        elif key == "uniqueName":
            suggest = "unique_name"
        elif key == "weeklyRetention":
            suggest = "weekly_retention"
        elif key == "yearlyRetention":
            suggest = "yearly_retention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleTimeMachineSla. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleTimeMachineSla.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleTimeMachineSla.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continuous_retention: Optional[int] = None,
                 current_active_frequency: Optional[str] = None,
                 daily_retention: Optional[int] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 monthly_retention: Optional[int] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 pitr_enabled: Optional[bool] = None,
                 quarterly_retention: Optional[int] = None,
                 reference_count: Optional[int] = None,
                 system_sla: Optional[bool] = None,
                 unique_name: Optional[str] = None,
                 weekly_retention: Optional[int] = None,
                 yearly_retention: Optional[int] = None):
        """
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description of database instance
        :param str name: Name of database instance
        """
        if continuous_retention is not None:
            pulumi.set(__self__, "continuous_retention", continuous_retention)
        if current_active_frequency is not None:
            pulumi.set(__self__, "current_active_frequency", current_active_frequency)
        if daily_retention is not None:
            pulumi.set(__self__, "daily_retention", daily_retention)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_retention is not None:
            pulumi.set(__self__, "monthly_retention", monthly_retention)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if pitr_enabled is not None:
            pulumi.set(__self__, "pitr_enabled", pitr_enabled)
        if quarterly_retention is not None:
            pulumi.set(__self__, "quarterly_retention", quarterly_retention)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if system_sla is not None:
            pulumi.set(__self__, "system_sla", system_sla)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_retention is not None:
            pulumi.set(__self__, "weekly_retention", weekly_retention)
        if yearly_retention is not None:
            pulumi.set(__self__, "yearly_retention", yearly_retention)

    @property
    @pulumi.getter(name="continuousRetention")
    def continuous_retention(self) -> Optional[int]:
        return pulumi.get(self, "continuous_retention")

    @property
    @pulumi.getter(name="currentActiveFrequency")
    def current_active_frequency(self) -> Optional[str]:
        return pulumi.get(self, "current_active_frequency")

    @property
    @pulumi.getter(name="dailyRetention")
    def daily_retention(self) -> Optional[int]:
        return pulumi.get(self, "daily_retention")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlyRetention")
    def monthly_retention(self) -> Optional[int]:
        return pulumi.get(self, "monthly_retention")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="pitrEnabled")
    def pitr_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "pitr_enabled")

    @property
    @pulumi.getter(name="quarterlyRetention")
    def quarterly_retention(self) -> Optional[int]:
        return pulumi.get(self, "quarterly_retention")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[int]:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="systemSla")
    def system_sla(self) -> Optional[bool]:
        return pulumi.get(self, "system_sla")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[str]:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklyRetention")
    def weekly_retention(self) -> Optional[int]:
        return pulumi.get(self, "weekly_retention")

    @property
    @pulumi.getter(name="yearlyRetention")
    def yearly_retention(self) -> Optional[int]:
        return pulumi.get(self, "yearly_retention")


@pulumi.output_type
class NdbDatabaseScaleTimeMachineTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseScaleTimeMachineTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseScaleTimeMachineTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseScaleTimeMachineTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseSnapshotLcmConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expiryDetails":
            suggest = "expiry_details"
        elif key == "postDeleteCommands":
            suggest = "post_delete_commands"
        elif key == "preDeleteCommands":
            suggest = "pre_delete_commands"
        elif key == "refreshDetails":
            suggest = "refresh_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseSnapshotLcmConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseSnapshotLcmConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseSnapshotLcmConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expiry_details: Optional[Sequence['outputs.NdbDatabaseSnapshotLcmConfigExpiryDetail']] = None,
                 post_delete_commands: Optional[Sequence['outputs.NdbDatabaseSnapshotLcmConfigPostDeleteCommand']] = None,
                 pre_delete_commands: Optional[Sequence['outputs.NdbDatabaseSnapshotLcmConfigPreDeleteCommand']] = None,
                 refresh_details: Optional[Sequence['outputs.NdbDatabaseSnapshotLcmConfigRefreshDetail']] = None):
        if expiry_details is not None:
            pulumi.set(__self__, "expiry_details", expiry_details)
        if post_delete_commands is not None:
            pulumi.set(__self__, "post_delete_commands", post_delete_commands)
        if pre_delete_commands is not None:
            pulumi.set(__self__, "pre_delete_commands", pre_delete_commands)
        if refresh_details is not None:
            pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Optional[Sequence['outputs.NdbDatabaseSnapshotLcmConfigExpiryDetail']]:
        return pulumi.get(self, "expiry_details")

    @property
    @pulumi.getter(name="postDeleteCommands")
    def post_delete_commands(self) -> Optional[Sequence['outputs.NdbDatabaseSnapshotLcmConfigPostDeleteCommand']]:
        return pulumi.get(self, "post_delete_commands")

    @property
    @pulumi.getter(name="preDeleteCommands")
    def pre_delete_commands(self) -> Optional[Sequence['outputs.NdbDatabaseSnapshotLcmConfigPreDeleteCommand']]:
        return pulumi.get(self, "pre_delete_commands")

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Optional[Sequence['outputs.NdbDatabaseSnapshotLcmConfigRefreshDetail']]:
        return pulumi.get(self, "refresh_details")


@pulumi.output_type
class NdbDatabaseSnapshotLcmConfigExpiryDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteDatabase":
            suggest = "delete_database"
        elif key == "deleteTimeMachine":
            suggest = "delete_time_machine"
        elif key == "deleteVm":
            suggest = "delete_vm"
        elif key == "effectiveTimestamp":
            suggest = "effective_timestamp"
        elif key == "expireInDays":
            suggest = "expire_in_days"
        elif key == "expiryDateTimezone":
            suggest = "expiry_date_timezone"
        elif key == "expiryTimestamp":
            suggest = "expiry_timestamp"
        elif key == "remindBeforeInDays":
            suggest = "remind_before_in_days"
        elif key == "userCreated":
            suggest = "user_created"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseSnapshotLcmConfigExpiryDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseSnapshotLcmConfigExpiryDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseSnapshotLcmConfigExpiryDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_database: Optional[bool] = None,
                 delete_time_machine: Optional[bool] = None,
                 delete_vm: Optional[bool] = None,
                 effective_timestamp: Optional[str] = None,
                 expire_in_days: Optional[int] = None,
                 expiry_date_timezone: Optional[str] = None,
                 expiry_timestamp: Optional[str] = None,
                 remind_before_in_days: Optional[int] = None,
                 user_created: Optional[bool] = None):
        """
        :param str expiry_date_timezone: Default is set to Asia/Calcutta
        """
        if delete_database is not None:
            pulumi.set(__self__, "delete_database", delete_database)
        if delete_time_machine is not None:
            pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        if delete_vm is not None:
            pulumi.set(__self__, "delete_vm", delete_vm)
        if effective_timestamp is not None:
            pulumi.set(__self__, "effective_timestamp", effective_timestamp)
        if expire_in_days is not None:
            pulumi.set(__self__, "expire_in_days", expire_in_days)
        if expiry_date_timezone is not None:
            pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        if expiry_timestamp is not None:
            pulumi.set(__self__, "expiry_timestamp", expiry_timestamp)
        if remind_before_in_days is not None:
            pulumi.set(__self__, "remind_before_in_days", remind_before_in_days)
        if user_created is not None:
            pulumi.set(__self__, "user_created", user_created)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> Optional[bool]:
        return pulumi.get(self, "delete_database")

    @property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> Optional[bool]:
        return pulumi.get(self, "delete_time_machine")

    @property
    @pulumi.getter(name="deleteVm")
    def delete_vm(self) -> Optional[bool]:
        return pulumi.get(self, "delete_vm")

    @property
    @pulumi.getter(name="effectiveTimestamp")
    def effective_timestamp(self) -> Optional[str]:
        return pulumi.get(self, "effective_timestamp")

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> Optional[int]:
        return pulumi.get(self, "expire_in_days")

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> Optional[str]:
        """
        Default is set to Asia/Calcutta
        """
        return pulumi.get(self, "expiry_date_timezone")

    @property
    @pulumi.getter(name="expiryTimestamp")
    def expiry_timestamp(self) -> Optional[str]:
        return pulumi.get(self, "expiry_timestamp")

    @property
    @pulumi.getter(name="remindBeforeInDays")
    def remind_before_in_days(self) -> Optional[int]:
        return pulumi.get(self, "remind_before_in_days")

    @property
    @pulumi.getter(name="userCreated")
    def user_created(self) -> Optional[bool]:
        return pulumi.get(self, "user_created")


@pulumi.output_type
class NdbDatabaseSnapshotLcmConfigPostDeleteCommand(dict):
    def __init__(__self__, *,
                 command: Optional[str] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        return pulumi.get(self, "command")


@pulumi.output_type
class NdbDatabaseSnapshotLcmConfigPreDeleteCommand(dict):
    def __init__(__self__, *,
                 command: Optional[str] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        return pulumi.get(self, "command")


@pulumi.output_type
class NdbDatabaseSnapshotLcmConfigRefreshDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastRefreshDate":
            suggest = "last_refresh_date"
        elif key == "nextRefreshDate":
            suggest = "next_refresh_date"
        elif key == "refreshDateTimezone":
            suggest = "refresh_date_timezone"
        elif key == "refreshInDays":
            suggest = "refresh_in_days"
        elif key == "refreshInHours":
            suggest = "refresh_in_hours"
        elif key == "refreshInMonths":
            suggest = "refresh_in_months"
        elif key == "refreshTime":
            suggest = "refresh_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseSnapshotLcmConfigRefreshDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseSnapshotLcmConfigRefreshDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseSnapshotLcmConfigRefreshDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_refresh_date: Optional[str] = None,
                 next_refresh_date: Optional[str] = None,
                 refresh_date_timezone: Optional[str] = None,
                 refresh_in_days: Optional[int] = None,
                 refresh_in_hours: Optional[int] = None,
                 refresh_in_months: Optional[int] = None,
                 refresh_time: Optional[str] = None):
        if last_refresh_date is not None:
            pulumi.set(__self__, "last_refresh_date", last_refresh_date)
        if next_refresh_date is not None:
            pulumi.set(__self__, "next_refresh_date", next_refresh_date)
        if refresh_date_timezone is not None:
            pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        if refresh_in_days is not None:
            pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        if refresh_in_hours is not None:
            pulumi.set(__self__, "refresh_in_hours", refresh_in_hours)
        if refresh_in_months is not None:
            pulumi.set(__self__, "refresh_in_months", refresh_in_months)
        if refresh_time is not None:
            pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="lastRefreshDate")
    def last_refresh_date(self) -> Optional[str]:
        return pulumi.get(self, "last_refresh_date")

    @property
    @pulumi.getter(name="nextRefreshDate")
    def next_refresh_date(self) -> Optional[str]:
        return pulumi.get(self, "next_refresh_date")

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> Optional[str]:
        return pulumi.get(self, "refresh_date_timezone")

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> Optional[int]:
        return pulumi.get(self, "refresh_in_days")

    @property
    @pulumi.getter(name="refreshInHours")
    def refresh_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "refresh_in_hours")

    @property
    @pulumi.getter(name="refreshInMonths")
    def refresh_in_months(self) -> Optional[int]:
        return pulumi.get(self, "refresh_in_months")

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> Optional[str]:
        return pulumi.get(self, "refresh_time")


@pulumi.output_type
class NdbDatabaseSnapshotProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseSnapshotProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseSnapshotProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseSnapshotProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str description: description of snapshot
        :param str name: Snapshot name. Default value is era_manual_snapshot.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of snapshot
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Snapshot name. Default value is era_manual_snapshot.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseSnapshotTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseSnapshotTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseSnapshotTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseSnapshotTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseTimeMachine(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "databaseId":
            suggest = "database_id"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "eaStatus":
            suggest = "ea_status"
        elif key == "scheduleId":
            suggest = "schedule_id"
        elif key == "slaId":
            suggest = "sla_id"
        elif key == "slaUpdateInProgress":
            suggest = "sla_update_in_progress"
        elif key == "slaUpdateMetadata":
            suggest = "sla_update_metadata"
        elif key == "sourceNxClusters":
            suggest = "source_nx_clusters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseTimeMachine. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseTimeMachine.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseTimeMachine.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: Optional[str] = None,
                 clone: Optional[bool] = None,
                 clones: Optional[str] = None,
                 clustered: Optional[bool] = None,
                 database: Optional[str] = None,
                 database_id: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 ea_status: Optional[str] = None,
                 id: Optional[str] = None,
                 metric: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Sequence['outputs.NdbDatabaseTimeMachineProperty']] = None,
                 schedule_id: Optional[str] = None,
                 schedules: Optional[Sequence['outputs.NdbDatabaseTimeMachineSchedule']] = None,
                 scope: Optional[str] = None,
                 sla_id: Optional[str] = None,
                 sla_update_in_progress: Optional[bool] = None,
                 sla_update_metadata: Optional[str] = None,
                 slas: Optional[Sequence['outputs.NdbDatabaseTimeMachineSla']] = None,
                 source_nx_clusters: Optional[Sequence[str]] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.NdbDatabaseTimeMachineTag']] = None,
                 type: Optional[str] = None):
        """
        :param bool clustered: - (Optional) If clustered database. Default: false
        :param str description: - (Optional) The description
        :param str name: - (Required) Name of the instance.
        :param Sequence['NdbDatabaseTimeMachinePropertyArgs'] properties: List of all the properties
        :param Sequence['NdbDatabaseTimeMachineScheduleArgs'] schedules: - (Optional) schedule for snapshots
        :param Sequence['NdbDatabaseTimeMachineTagArgs'] tags: - (Optional) tags
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if clone is not None:
            pulumi.set(__self__, "clone", clone)
        if clones is not None:
            pulumi.set(__self__, "clones", clones)
        if clustered is not None:
            pulumi.set(__self__, "clustered", clustered)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ea_status is not None:
            pulumi.set(__self__, "ea_status", ea_status)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)
        if sla_update_in_progress is not None:
            pulumi.set(__self__, "sla_update_in_progress", sla_update_in_progress)
        if sla_update_metadata is not None:
            pulumi.set(__self__, "sla_update_metadata", sla_update_metadata)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if source_nx_clusters is not None:
            pulumi.set(__self__, "source_nx_clusters", source_nx_clusters)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[str]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter
    def clone(self) -> Optional[bool]:
        return pulumi.get(self, "clone")

    @property
    @pulumi.getter
    def clones(self) -> Optional[str]:
        return pulumi.get(self, "clones")

    @property
    @pulumi.getter
    def clustered(self) -> Optional[bool]:
        """
        - (Optional) If clustered database. Default: false
        """
        return pulumi.get(self, "clustered")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eaStatus")
    def ea_status(self) -> Optional[str]:
        return pulumi.get(self, "ea_status")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbDatabaseTimeMachineProperty']]:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[str]:
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter
    def schedules(self) -> Optional[Sequence['outputs.NdbDatabaseTimeMachineSchedule']]:
        """
        - (Optional) schedule for snapshots
        """
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[str]:
        return pulumi.get(self, "sla_id")

    @property
    @pulumi.getter(name="slaUpdateInProgress")
    def sla_update_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "sla_update_in_progress")

    @property
    @pulumi.getter(name="slaUpdateMetadata")
    def sla_update_metadata(self) -> Optional[str]:
        return pulumi.get(self, "sla_update_metadata")

    @property
    @pulumi.getter
    def slas(self) -> Optional[Sequence['outputs.NdbDatabaseTimeMachineSla']]:
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter(name="sourceNxClusters")
    def source_nx_clusters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_nx_clusters")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.NdbDatabaseTimeMachineTag']]:
        """
        - (Optional) tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class NdbDatabaseTimeMachineProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseTimeMachineProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseTimeMachineProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseTimeMachineProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str description: - (Optional) The description
        :param str name: - (Required) Name of the instance.
        :param str value: - (Required) value for argument
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseTimeMachineSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continuousSchedules":
            suggest = "continuous_schedules"
        elif key == "dailySchedules":
            suggest = "daily_schedules"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "globalPolicy":
            suggest = "global_policy"
        elif key == "monthlySchedules":
            suggest = "monthly_schedules"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "quartelySchedules":
            suggest = "quartely_schedules"
        elif key == "referenceCount":
            suggest = "reference_count"
        elif key == "snapshotTimeOfDays":
            suggest = "snapshot_time_of_days"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "systemPolicy":
            suggest = "system_policy"
        elif key == "timeZone":
            suggest = "time_zone"
        elif key == "uniqueName":
            suggest = "unique_name"
        elif key == "weeklySchedules":
            suggest = "weekly_schedules"
        elif key == "yearlySchedules":
            suggest = "yearly_schedules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseTimeMachineSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseTimeMachineSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseTimeMachineSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continuous_schedules: Optional[Sequence['outputs.NdbDatabaseTimeMachineScheduleContinuousSchedule']] = None,
                 daily_schedules: Optional[Sequence['outputs.NdbDatabaseTimeMachineScheduleDailySchedule']] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 global_policy: Optional[bool] = None,
                 id: Optional[str] = None,
                 monthly_schedules: Optional[Sequence['outputs.NdbDatabaseTimeMachineScheduleMonthlySchedule']] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 quartely_schedules: Optional[Sequence['outputs.NdbDatabaseTimeMachineScheduleQuartelySchedule']] = None,
                 reference_count: Optional[int] = None,
                 snapshot_time_of_days: Optional[Sequence['outputs.NdbDatabaseTimeMachineScheduleSnapshotTimeOfDay']] = None,
                 start_time: Optional[str] = None,
                 system_policy: Optional[bool] = None,
                 time_zone: Optional[str] = None,
                 unique_name: Optional[str] = None,
                 weekly_schedules: Optional[Sequence['outputs.NdbDatabaseTimeMachineScheduleWeeklySchedule']] = None,
                 yearly_schedules: Optional[Sequence['outputs.NdbDatabaseTimeMachineScheduleYearlySchedule']] = None):
        """
        :param str description: - (Optional) The description
        :param str name: - (Required) Name of the instance.
        """
        if continuous_schedules is not None:
            pulumi.set(__self__, "continuous_schedules", continuous_schedules)
        if daily_schedules is not None:
            pulumi.set(__self__, "daily_schedules", daily_schedules)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if global_policy is not None:
            pulumi.set(__self__, "global_policy", global_policy)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_schedules is not None:
            pulumi.set(__self__, "monthly_schedules", monthly_schedules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if quartely_schedules is not None:
            pulumi.set(__self__, "quartely_schedules", quartely_schedules)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if snapshot_time_of_days is not None:
            pulumi.set(__self__, "snapshot_time_of_days", snapshot_time_of_days)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if system_policy is not None:
            pulumi.set(__self__, "system_policy", system_policy)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_schedules is not None:
            pulumi.set(__self__, "weekly_schedules", weekly_schedules)
        if yearly_schedules is not None:
            pulumi.set(__self__, "yearly_schedules", yearly_schedules)

    @property
    @pulumi.getter(name="continuousSchedules")
    def continuous_schedules(self) -> Optional[Sequence['outputs.NdbDatabaseTimeMachineScheduleContinuousSchedule']]:
        return pulumi.get(self, "continuous_schedules")

    @property
    @pulumi.getter(name="dailySchedules")
    def daily_schedules(self) -> Optional[Sequence['outputs.NdbDatabaseTimeMachineScheduleDailySchedule']]:
        return pulumi.get(self, "daily_schedules")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="globalPolicy")
    def global_policy(self) -> Optional[bool]:
        return pulumi.get(self, "global_policy")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlySchedules")
    def monthly_schedules(self) -> Optional[Sequence['outputs.NdbDatabaseTimeMachineScheduleMonthlySchedule']]:
        return pulumi.get(self, "monthly_schedules")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="quartelySchedules")
    def quartely_schedules(self) -> Optional[Sequence['outputs.NdbDatabaseTimeMachineScheduleQuartelySchedule']]:
        return pulumi.get(self, "quartely_schedules")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[int]:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="snapshotTimeOfDays")
    def snapshot_time_of_days(self) -> Optional[Sequence['outputs.NdbDatabaseTimeMachineScheduleSnapshotTimeOfDay']]:
        return pulumi.get(self, "snapshot_time_of_days")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="systemPolicy")
    def system_policy(self) -> Optional[bool]:
        return pulumi.get(self, "system_policy")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[str]:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklySchedules")
    def weekly_schedules(self) -> Optional[Sequence['outputs.NdbDatabaseTimeMachineScheduleWeeklySchedule']]:
        return pulumi.get(self, "weekly_schedules")

    @property
    @pulumi.getter(name="yearlySchedules")
    def yearly_schedules(self) -> Optional[Sequence['outputs.NdbDatabaseTimeMachineScheduleYearlySchedule']]:
        return pulumi.get(self, "yearly_schedules")


@pulumi.output_type
class NdbDatabaseTimeMachineScheduleContinuousSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logBackupInterval":
            suggest = "log_backup_interval"
        elif key == "snapshotsPerDay":
            suggest = "snapshots_per_day"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseTimeMachineScheduleContinuousSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseTimeMachineScheduleContinuousSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseTimeMachineScheduleContinuousSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 log_backup_interval: Optional[int] = None,
                 snapshots_per_day: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_backup_interval is not None:
            pulumi.set(__self__, "log_backup_interval", log_backup_interval)
        if snapshots_per_day is not None:
            pulumi.set(__self__, "snapshots_per_day", snapshots_per_day)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logBackupInterval")
    def log_backup_interval(self) -> Optional[int]:
        return pulumi.get(self, "log_backup_interval")

    @property
    @pulumi.getter(name="snapshotsPerDay")
    def snapshots_per_day(self) -> Optional[int]:
        return pulumi.get(self, "snapshots_per_day")


@pulumi.output_type
class NdbDatabaseTimeMachineScheduleDailySchedule(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbDatabaseTimeMachineScheduleMonthlySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfMonth":
            suggest = "day_of_month"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseTimeMachineScheduleMonthlySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseTimeMachineScheduleMonthlySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseTimeMachineScheduleMonthlySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_month: Optional[int] = None,
                 enabled: Optional[bool] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbDatabaseTimeMachineScheduleQuartelySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfMonth":
            suggest = "day_of_month"
        elif key == "startMonth":
            suggest = "start_month"
        elif key == "startMonthValue":
            suggest = "start_month_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseTimeMachineScheduleQuartelySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseTimeMachineScheduleQuartelySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseTimeMachineScheduleQuartelySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_month: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 start_month: Optional[str] = None,
                 start_month_value: Optional[str] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if start_month is not None:
            pulumi.set(__self__, "start_month", start_month)
        if start_month_value is not None:
            pulumi.set(__self__, "start_month_value", start_month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="startMonth")
    def start_month(self) -> Optional[str]:
        return pulumi.get(self, "start_month")

    @property
    @pulumi.getter(name="startMonthValue")
    def start_month_value(self) -> Optional[str]:
        return pulumi.get(self, "start_month_value")


@pulumi.output_type
class NdbDatabaseTimeMachineScheduleSnapshotTimeOfDay(dict):
    def __init__(__self__, *,
                 extra: Optional[bool] = None,
                 hours: Optional[int] = None,
                 minutes: Optional[int] = None,
                 seconds: Optional[int] = None):
        """
        :param int hours: - (Required) hours
        :param int minutes: - (Required) minutes
        :param int seconds: - (Required) seconds
        """
        if extra is not None:
            pulumi.set(__self__, "extra", extra)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def extra(self) -> Optional[bool]:
        return pulumi.get(self, "extra")

    @property
    @pulumi.getter
    def hours(self) -> Optional[int]:
        """
        - (Required) hours
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> Optional[int]:
        """
        - (Required) minutes
        """
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def seconds(self) -> Optional[int]:
        """
        - (Required) seconds
        """
        return pulumi.get(self, "seconds")


@pulumi.output_type
class NdbDatabaseTimeMachineScheduleWeeklySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfWeek":
            suggest = "day_of_week"
        elif key == "dayOfWeekValue":
            suggest = "day_of_week_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseTimeMachineScheduleWeeklySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseTimeMachineScheduleWeeklySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseTimeMachineScheduleWeeklySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_week: Optional[str] = None,
                 day_of_week_value: Optional[str] = None,
                 enabled: Optional[bool] = None):
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if day_of_week_value is not None:
            pulumi.set(__self__, "day_of_week_value", day_of_week_value)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="dayOfWeekValue")
    def day_of_week_value(self) -> Optional[str]:
        return pulumi.get(self, "day_of_week_value")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbDatabaseTimeMachineScheduleYearlySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfMonth":
            suggest = "day_of_month"
        elif key == "monthValue":
            suggest = "month_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseTimeMachineScheduleYearlySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseTimeMachineScheduleYearlySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseTimeMachineScheduleYearlySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_month: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 month: Optional[str] = None,
                 month_value: Optional[str] = None):
        """
        :param str month: - (Required) month for snapshot
        """
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if month_value is not None:
            pulumi.set(__self__, "month_value", month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def month(self) -> Optional[str]:
        """
        - (Required) month for snapshot
        """
        return pulumi.get(self, "month")

    @property
    @pulumi.getter(name="monthValue")
    def month_value(self) -> Optional[str]:
        return pulumi.get(self, "month_value")


@pulumi.output_type
class NdbDatabaseTimeMachineSla(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continuousRetention":
            suggest = "continuous_retention"
        elif key == "currentActiveFrequency":
            suggest = "current_active_frequency"
        elif key == "dailyRetention":
            suggest = "daily_retention"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "monthlyRetention":
            suggest = "monthly_retention"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "pitrEnabled":
            suggest = "pitr_enabled"
        elif key == "quarterlyRetention":
            suggest = "quarterly_retention"
        elif key == "referenceCount":
            suggest = "reference_count"
        elif key == "systemSla":
            suggest = "system_sla"
        elif key == "uniqueName":
            suggest = "unique_name"
        elif key == "weeklyRetention":
            suggest = "weekly_retention"
        elif key == "yearlyRetention":
            suggest = "yearly_retention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseTimeMachineSla. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseTimeMachineSla.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseTimeMachineSla.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continuous_retention: Optional[int] = None,
                 current_active_frequency: Optional[str] = None,
                 daily_retention: Optional[int] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 monthly_retention: Optional[int] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 pitr_enabled: Optional[bool] = None,
                 quarterly_retention: Optional[int] = None,
                 reference_count: Optional[int] = None,
                 system_sla: Optional[bool] = None,
                 unique_name: Optional[str] = None,
                 weekly_retention: Optional[int] = None,
                 yearly_retention: Optional[int] = None):
        """
        :param str description: - (Optional) The description
        :param str name: - (Required) Name of the instance.
        """
        if continuous_retention is not None:
            pulumi.set(__self__, "continuous_retention", continuous_retention)
        if current_active_frequency is not None:
            pulumi.set(__self__, "current_active_frequency", current_active_frequency)
        if daily_retention is not None:
            pulumi.set(__self__, "daily_retention", daily_retention)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_retention is not None:
            pulumi.set(__self__, "monthly_retention", monthly_retention)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if pitr_enabled is not None:
            pulumi.set(__self__, "pitr_enabled", pitr_enabled)
        if quarterly_retention is not None:
            pulumi.set(__self__, "quarterly_retention", quarterly_retention)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if system_sla is not None:
            pulumi.set(__self__, "system_sla", system_sla)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_retention is not None:
            pulumi.set(__self__, "weekly_retention", weekly_retention)
        if yearly_retention is not None:
            pulumi.set(__self__, "yearly_retention", yearly_retention)

    @property
    @pulumi.getter(name="continuousRetention")
    def continuous_retention(self) -> Optional[int]:
        return pulumi.get(self, "continuous_retention")

    @property
    @pulumi.getter(name="currentActiveFrequency")
    def current_active_frequency(self) -> Optional[str]:
        return pulumi.get(self, "current_active_frequency")

    @property
    @pulumi.getter(name="dailyRetention")
    def daily_retention(self) -> Optional[int]:
        return pulumi.get(self, "daily_retention")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlyRetention")
    def monthly_retention(self) -> Optional[int]:
        return pulumi.get(self, "monthly_retention")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="pitrEnabled")
    def pitr_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "pitr_enabled")

    @property
    @pulumi.getter(name="quarterlyRetention")
    def quarterly_retention(self) -> Optional[int]:
        return pulumi.get(self, "quarterly_retention")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[int]:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="systemSla")
    def system_sla(self) -> Optional[bool]:
        return pulumi.get(self, "system_sla")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[str]:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklyRetention")
    def weekly_retention(self) -> Optional[int]:
        return pulumi.get(self, "weekly_retention")

    @property
    @pulumi.getter(name="yearlyRetention")
    def yearly_retention(self) -> Optional[int]:
        return pulumi.get(self, "yearly_retention")


@pulumi.output_type
class NdbDatabaseTimeMachineTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseTimeMachineTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseTimeMachineTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseTimeMachineTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDatabaseTimemachineinfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slaDetails":
            suggest = "sla_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseTimemachineinfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseTimemachineinfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseTimemachineinfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 schedule: 'outputs.NdbDatabaseTimemachineinfoSchedule',
                 autotunelogdrive: Optional[bool] = None,
                 description: Optional[str] = None,
                 sla_details: Optional[Sequence['outputs.NdbDatabaseTimemachineinfoSlaDetail']] = None,
                 slaid: Optional[str] = None,
                 tags: Optional[Sequence['outputs.NdbDatabaseTimemachineinfoTag']] = None):
        """
        :param str name: - (Required) name of time machine
        :param 'NdbDatabaseTimemachineinfoScheduleArgs' schedule: - (Optional) schedule for snapshots
        :param bool autotunelogdrive: - (Optional) enable auto tune log drive. Default: true
        :param str description: - (Optional) description of time machine
        :param Sequence['NdbDatabaseTimemachineinfoSlaDetailArgs'] sla_details: -  (optional) SLA details for HA instance
        :param str slaid: - (Optional) SLA ID for single instance
        :param Sequence['NdbDatabaseTimemachineinfoTagArgs'] tags: - (Optional) tags
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schedule", schedule)
        if autotunelogdrive is not None:
            pulumi.set(__self__, "autotunelogdrive", autotunelogdrive)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if sla_details is not None:
            pulumi.set(__self__, "sla_details", sla_details)
        if slaid is not None:
            pulumi.set(__self__, "slaid", slaid)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) name of time machine
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schedule(self) -> 'outputs.NdbDatabaseTimemachineinfoSchedule':
        """
        - (Optional) schedule for snapshots
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def autotunelogdrive(self) -> Optional[bool]:
        """
        - (Optional) enable auto tune log drive. Default: true
        """
        return pulumi.get(self, "autotunelogdrive")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        - (Optional) description of time machine
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="slaDetails")
    def sla_details(self) -> Optional[Sequence['outputs.NdbDatabaseTimemachineinfoSlaDetail']]:
        """
        -  (optional) SLA details for HA instance
        """
        return pulumi.get(self, "sla_details")

    @property
    @pulumi.getter
    def slaid(self) -> Optional[str]:
        """
        - (Optional) SLA ID for single instance
        """
        return pulumi.get(self, "slaid")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.NdbDatabaseTimemachineinfoTag']]:
        """
        - (Optional) tags
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class NdbDatabaseTimemachineinfoSchedule(dict):
    def __init__(__self__, *,
                 continuousschedule: Optional['outputs.NdbDatabaseTimemachineinfoScheduleContinuousschedule'] = None,
                 monthlyschedule: Optional['outputs.NdbDatabaseTimemachineinfoScheduleMonthlyschedule'] = None,
                 quartelyschedule: Optional['outputs.NdbDatabaseTimemachineinfoScheduleQuartelyschedule'] = None,
                 snapshottimeofday: Optional['outputs.NdbDatabaseTimemachineinfoScheduleSnapshottimeofday'] = None,
                 weeklyschedule: Optional['outputs.NdbDatabaseTimemachineinfoScheduleWeeklyschedule'] = None,
                 yearlyschedule: Optional['outputs.NdbDatabaseTimemachineinfoScheduleYearlyschedule'] = None):
        """
        :param 'NdbDatabaseTimemachineinfoScheduleContinuousscheduleArgs' continuousschedule: - (Optional) snapshot freq and log config
        :param 'NdbDatabaseTimemachineinfoScheduleMonthlyscheduleArgs' monthlyschedule: - (Optional) monthly snapshot config
        :param 'NdbDatabaseTimemachineinfoScheduleQuartelyscheduleArgs' quartelyschedule: - (Optional) quaterly snapshot config
        :param 'NdbDatabaseTimemachineinfoScheduleSnapshottimeofdayArgs' snapshottimeofday: - (Optional) daily snapshot config
        :param 'NdbDatabaseTimemachineinfoScheduleWeeklyscheduleArgs' weeklyschedule: - (Optional) weekly snapshot config
        :param 'NdbDatabaseTimemachineinfoScheduleYearlyscheduleArgs' yearlyschedule: - (Optional) yearly snapshot config
        """
        if continuousschedule is not None:
            pulumi.set(__self__, "continuousschedule", continuousschedule)
        if monthlyschedule is not None:
            pulumi.set(__self__, "monthlyschedule", monthlyschedule)
        if quartelyschedule is not None:
            pulumi.set(__self__, "quartelyschedule", quartelyschedule)
        if snapshottimeofday is not None:
            pulumi.set(__self__, "snapshottimeofday", snapshottimeofday)
        if weeklyschedule is not None:
            pulumi.set(__self__, "weeklyschedule", weeklyschedule)
        if yearlyschedule is not None:
            pulumi.set(__self__, "yearlyschedule", yearlyschedule)

    @property
    @pulumi.getter
    def continuousschedule(self) -> Optional['outputs.NdbDatabaseTimemachineinfoScheduleContinuousschedule']:
        """
        - (Optional) snapshot freq and log config
        """
        return pulumi.get(self, "continuousschedule")

    @property
    @pulumi.getter
    def monthlyschedule(self) -> Optional['outputs.NdbDatabaseTimemachineinfoScheduleMonthlyschedule']:
        """
        - (Optional) monthly snapshot config
        """
        return pulumi.get(self, "monthlyschedule")

    @property
    @pulumi.getter
    def quartelyschedule(self) -> Optional['outputs.NdbDatabaseTimemachineinfoScheduleQuartelyschedule']:
        """
        - (Optional) quaterly snapshot config
        """
        return pulumi.get(self, "quartelyschedule")

    @property
    @pulumi.getter
    def snapshottimeofday(self) -> Optional['outputs.NdbDatabaseTimemachineinfoScheduleSnapshottimeofday']:
        """
        - (Optional) daily snapshot config
        """
        return pulumi.get(self, "snapshottimeofday")

    @property
    @pulumi.getter
    def weeklyschedule(self) -> Optional['outputs.NdbDatabaseTimemachineinfoScheduleWeeklyschedule']:
        """
        - (Optional) weekly snapshot config
        """
        return pulumi.get(self, "weeklyschedule")

    @property
    @pulumi.getter
    def yearlyschedule(self) -> Optional['outputs.NdbDatabaseTimemachineinfoScheduleYearlyschedule']:
        """
        - (Optional) yearly snapshot config
        """
        return pulumi.get(self, "yearlyschedule")


@pulumi.output_type
class NdbDatabaseTimemachineinfoScheduleContinuousschedule(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 logbackupinterval: int,
                 snapshotsperday: int):
        """
        :param bool enabled: - (Required) to enable
        :param int logbackupinterval: - (Required) log catchup interval for database
        :param int snapshotsperday: - (Required) num of snapshots per day
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "logbackupinterval", logbackupinterval)
        pulumi.set(__self__, "snapshotsperday", snapshotsperday)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        - (Required) to enable
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def logbackupinterval(self) -> int:
        """
        - (Required) log catchup interval for database
        """
        return pulumi.get(self, "logbackupinterval")

    @property
    @pulumi.getter
    def snapshotsperday(self) -> int:
        """
        - (Required) num of snapshots per day
        """
        return pulumi.get(self, "snapshotsperday")


@pulumi.output_type
class NdbDatabaseTimemachineinfoScheduleMonthlyschedule(dict):
    def __init__(__self__, *,
                 dayofmonth: int,
                 enabled: bool):
        """
        :param int dayofmonth: - (Required) day of month to take snapshot
        :param bool enabled: - (Required) to enable
        """
        pulumi.set(__self__, "dayofmonth", dayofmonth)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def dayofmonth(self) -> int:
        """
        - (Required) day of month to take snapshot
        """
        return pulumi.get(self, "dayofmonth")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        - (Required) to enable
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbDatabaseTimemachineinfoScheduleQuartelyschedule(dict):
    def __init__(__self__, *,
                 dayofmonth: int,
                 enabled: bool,
                 startmonth: str):
        """
        :param int dayofmonth: - (Required) month's day for snapshot
        :param bool enabled: - (Required) to enable
        :param str startmonth: - (Required) quarter start month
        """
        pulumi.set(__self__, "dayofmonth", dayofmonth)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "startmonth", startmonth)

    @property
    @pulumi.getter
    def dayofmonth(self) -> int:
        """
        - (Required) month's day for snapshot
        """
        return pulumi.get(self, "dayofmonth")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        - (Required) to enable
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def startmonth(self) -> str:
        """
        - (Required) quarter start month
        """
        return pulumi.get(self, "startmonth")


@pulumi.output_type
class NdbDatabaseTimemachineinfoScheduleSnapshottimeofday(dict):
    def __init__(__self__, *,
                 hours: int,
                 minutes: int,
                 seconds: int):
        """
        :param int hours: - (Required) hours
        :param int minutes: - (Required) minutes
        :param int seconds: - (Required) seconds
        """
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)
        pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def hours(self) -> int:
        """
        - (Required) hours
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        """
        - (Required) minutes
        """
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def seconds(self) -> int:
        """
        - (Required) seconds
        """
        return pulumi.get(self, "seconds")


@pulumi.output_type
class NdbDatabaseTimemachineinfoScheduleWeeklyschedule(dict):
    def __init__(__self__, *,
                 dayofweek: str,
                 enabled: bool):
        """
        :param str dayofweek: - (Required) day of week to take snaphsot. Eg. "WEDNESDAY"
        :param bool enabled: - (Required) to enable
        """
        pulumi.set(__self__, "dayofweek", dayofweek)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def dayofweek(self) -> str:
        """
        - (Required) day of week to take snaphsot. Eg. "WEDNESDAY"
        """
        return pulumi.get(self, "dayofweek")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        - (Required) to enable
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbDatabaseTimemachineinfoScheduleYearlyschedule(dict):
    def __init__(__self__, *,
                 dayofmonth: int,
                 enabled: bool,
                 month: str):
        """
        :param int dayofmonth: - (Required) day of month to take snapshot
        :param bool enabled: - (Required) to enable
        :param str month: - (Required) month for snapshot
        """
        pulumi.set(__self__, "dayofmonth", dayofmonth)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "month", month)

    @property
    @pulumi.getter
    def dayofmonth(self) -> int:
        """
        - (Required) day of month to take snapshot
        """
        return pulumi.get(self, "dayofmonth")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        - (Required) to enable
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def month(self) -> str:
        """
        - (Required) month for snapshot
        """
        return pulumi.get(self, "month")


@pulumi.output_type
class NdbDatabaseTimemachineinfoSlaDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "primarySlas":
            suggest = "primary_slas"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseTimemachineinfoSlaDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseTimemachineinfoSlaDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseTimemachineinfoSlaDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 primary_slas: Optional[Sequence['outputs.NdbDatabaseTimemachineinfoSlaDetailPrimarySla']] = None):
        """
        :param Sequence['NdbDatabaseTimemachineinfoSlaDetailPrimarySlaArgs'] primary_slas: - (Required) primary sla details
               * `primary_sla.sla_id` :- (Required) sla id
               * `primary_sla.nx_cluster_ids` -: (Optioanl) cluster ids
        """
        if primary_slas is not None:
            pulumi.set(__self__, "primary_slas", primary_slas)

    @property
    @pulumi.getter(name="primarySlas")
    def primary_slas(self) -> Optional[Sequence['outputs.NdbDatabaseTimemachineinfoSlaDetailPrimarySla']]:
        """
        - (Required) primary sla details
        * `primary_sla.sla_id` :- (Required) sla id
        * `primary_sla.nx_cluster_ids` -: (Optioanl) cluster ids
        """
        return pulumi.get(self, "primary_slas")


@pulumi.output_type
class NdbDatabaseTimemachineinfoSlaDetailPrimarySla(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slaId":
            suggest = "sla_id"
        elif key == "nxClusterIds":
            suggest = "nx_cluster_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseTimemachineinfoSlaDetailPrimarySla. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseTimemachineinfoSlaDetailPrimarySla.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseTimemachineinfoSlaDetailPrimarySla.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sla_id: str,
                 nx_cluster_ids: Optional[Sequence[str]] = None):
        """
        :param str sla_id: description of SLA ID.
        """
        pulumi.set(__self__, "sla_id", sla_id)
        if nx_cluster_ids is not None:
            pulumi.set(__self__, "nx_cluster_ids", nx_cluster_ids)

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> str:
        """
        description of SLA ID.
        """
        return pulumi.get(self, "sla_id")

    @property
    @pulumi.getter(name="nxClusterIds")
    def nx_cluster_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nx_cluster_ids")


@pulumi.output_type
class NdbDatabaseTimemachineinfoTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDatabaseTimemachineinfoTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDatabaseTimemachineinfoTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDatabaseTimemachineinfoTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDbserverVmCredential(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str,
                 label: Optional[str] = None):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")


@pulumi.output_type
class NdbDbserverVmMaintenanceTasks(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maintenanceWindowId":
            suggest = "maintenance_window_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDbserverVmMaintenanceTasks. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDbserverVmMaintenanceTasks.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDbserverVmMaintenanceTasks.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 maintenance_window_id: Optional[str] = None,
                 tasks: Optional[Sequence['outputs.NdbDbserverVmMaintenanceTasksTask']] = None):
        """
        :param str maintenance_window_id: Associate an existing maintenance window id. NDB starts OS patching or database patching as per the schedule defined in the maintenance window.
        :param Sequence['NdbDbserverVmMaintenanceTasksTaskArgs'] tasks: Tasks for the maintenance.
               * `tasks.task_type`: use this option if you want NDB to perform database patching or OS patching automatically. Supports [ OS_PATCHING, DB_PATCHING ].
               * `tasks.pre_command`: add pre (operating system and database patching) commands.
               * `tasks.post_command`:add post (operating system and database patching) commands.
        """
        if maintenance_window_id is not None:
            pulumi.set(__self__, "maintenance_window_id", maintenance_window_id)
        if tasks is not None:
            pulumi.set(__self__, "tasks", tasks)

    @property
    @pulumi.getter(name="maintenanceWindowId")
    def maintenance_window_id(self) -> Optional[str]:
        """
        Associate an existing maintenance window id. NDB starts OS patching or database patching as per the schedule defined in the maintenance window.
        """
        return pulumi.get(self, "maintenance_window_id")

    @property
    @pulumi.getter
    def tasks(self) -> Optional[Sequence['outputs.NdbDbserverVmMaintenanceTasksTask']]:
        """
        Tasks for the maintenance.
        * `tasks.task_type`: use this option if you want NDB to perform database patching or OS patching automatically. Supports [ OS_PATCHING, DB_PATCHING ].
        * `tasks.pre_command`: add pre (operating system and database patching) commands.
        * `tasks.post_command`:add post (operating system and database patching) commands.
        """
        return pulumi.get(self, "tasks")


@pulumi.output_type
class NdbDbserverVmMaintenanceTasksTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postCommand":
            suggest = "post_command"
        elif key == "preCommand":
            suggest = "pre_command"
        elif key == "taskType":
            suggest = "task_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDbserverVmMaintenanceTasksTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDbserverVmMaintenanceTasksTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDbserverVmMaintenanceTasksTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 post_command: Optional[str] = None,
                 pre_command: Optional[str] = None,
                 task_type: Optional[str] = None):
        if post_command is not None:
            pulumi.set(__self__, "post_command", post_command)
        if pre_command is not None:
            pulumi.set(__self__, "pre_command", pre_command)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="postCommand")
    def post_command(self) -> Optional[str]:
        return pulumi.get(self, "post_command")

    @property
    @pulumi.getter(name="preCommand")
    def pre_command(self) -> Optional[str]:
        return pulumi.get(self, "pre_command")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[str]:
        return pulumi.get(self, "task_type")


@pulumi.output_type
class NdbDbserverVmPostgresDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vmName":
            suggest = "vm_name"
        elif key == "clientPublicKey":
            suggest = "client_public_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDbserverVmPostgresDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDbserverVmPostgresDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDbserverVmPostgresDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vm_name: str,
                 client_public_key: Optional[str] = None):
        """
        :param str vm_name: name for the database server VM.
        :param str client_public_key: use SSH public keys to access the database server VM.
        """
        pulumi.set(__self__, "vm_name", vm_name)
        if client_public_key is not None:
            pulumi.set(__self__, "client_public_key", client_public_key)

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> str:
        """
        name for the database server VM.
        """
        return pulumi.get(self, "vm_name")

    @property
    @pulumi.getter(name="clientPublicKey")
    def client_public_key(self) -> Optional[str]:
        """
        use SSH public keys to access the database server VM.
        """
        return pulumi.get(self, "client_public_key")


@pulumi.output_type
class NdbDbserverVmProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: name of the dbserver vm
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the dbserver vm
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbDbserverVmTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbDbserverVmTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbDbserverVmTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbDbserverVmTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbLinkedDatabasesInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureInfo":
            suggest = "secure_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbLinkedDatabasesInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbLinkedDatabasesInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbLinkedDatabasesInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 infos: Optional[Sequence['outputs.NdbLinkedDatabasesInfoInfo']] = None,
                 secure_info: Optional[Mapping[str, str]] = None):
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.NdbLinkedDatabasesInfoInfo']]:
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class NdbLinkedDatabasesInfoInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbLinkedDatabasesInfoInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbLinkedDatabasesInfoInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbLinkedDatabasesInfoInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_by: Optional[str] = None):
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")


@pulumi.output_type
class NdbMaintenanceTaskEntityTaskAssociation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "maintenanceWindowId":
            suggest = "maintenance_window_id"
        elif key == "maintenanceWindowOwnerId":
            suggest = "maintenance_window_owner_id"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "taskType":
            suggest = "task_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbMaintenanceTaskEntityTaskAssociation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbMaintenanceTaskEntityTaskAssociation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbMaintenanceTaskEntityTaskAssociation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 entity: Optional[str] = None,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 id: Optional[str] = None,
                 maintenance_window_id: Optional[str] = None,
                 maintenance_window_owner_id: Optional[str] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 payloads: Optional[Sequence['outputs.NdbMaintenanceTaskEntityTaskAssociationPayload']] = None,
                 properties: Optional[Sequence['outputs.NdbMaintenanceTaskEntityTaskAssociationProperty']] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.NdbMaintenanceTaskEntityTaskAssociationTag']] = None,
                 task_type: Optional[str] = None):
        """
        :param str access_level: access level of tasks
        :param str date_created: created date of task
        :param str date_modified: modified date of task
        :param str description: description of maintenance window
        :param str entity_id: entity id
        :param str entity_type: type of the entity. i.e. DBSERVER
        :param str id: id of maintenance window
        :param str maintenance_window_id: maintenance window id which has to be associated
        :param str maintenance_window_owner_id: maintenance window owner id
        :param str name: name of of maintenance window
        :param str owner_id: owner id of task
        :param Sequence['NdbMaintenanceTaskEntityTaskAssociationPayloadArgs'] payloads: list of pre post commands of OS or DB task
        :param Sequence['NdbMaintenanceTaskEntityTaskAssociationPropertyArgs'] properties: properties of task
        :param str status: status of task
        :param Sequence['NdbMaintenanceTaskEntityTaskAssociationTagArgs'] tags: tags of task
        :param str task_type: type of the task. OS or DB
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entity is not None:
            pulumi.set(__self__, "entity", entity)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if maintenance_window_id is not None:
            pulumi.set(__self__, "maintenance_window_id", maintenance_window_id)
        if maintenance_window_owner_id is not None:
            pulumi.set(__self__, "maintenance_window_owner_id", maintenance_window_owner_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if payloads is not None:
            pulumi.set(__self__, "payloads", payloads)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[str]:
        """
        access level of tasks
        """
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        created date of task
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        modified date of task
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of maintenance window
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def entity(self) -> Optional[str]:
        return pulumi.get(self, "entity")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        """
        entity id
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        """
        type of the entity. i.e. DBSERVER
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of maintenance window
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maintenanceWindowId")
    def maintenance_window_id(self) -> Optional[str]:
        """
        maintenance window id which has to be associated
        """
        return pulumi.get(self, "maintenance_window_id")

    @property
    @pulumi.getter(name="maintenanceWindowOwnerId")
    def maintenance_window_owner_id(self) -> Optional[str]:
        """
        maintenance window owner id
        """
        return pulumi.get(self, "maintenance_window_owner_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of of maintenance window
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        """
        owner id of task
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter
    def payloads(self) -> Optional[Sequence['outputs.NdbMaintenanceTaskEntityTaskAssociationPayload']]:
        """
        list of pre post commands of OS or DB task
        """
        return pulumi.get(self, "payloads")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbMaintenanceTaskEntityTaskAssociationProperty']]:
        """
        properties of task
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of task
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.NdbMaintenanceTaskEntityTaskAssociationTag']]:
        """
        tags of task
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[str]:
        """
        type of the task. OS or DB
        """
        return pulumi.get(self, "task_type")


@pulumi.output_type
class NdbMaintenanceTaskEntityTaskAssociationPayload(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prePostCommands":
            suggest = "pre_post_commands"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbMaintenanceTaskEntityTaskAssociationPayload. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbMaintenanceTaskEntityTaskAssociationPayload.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbMaintenanceTaskEntityTaskAssociationPayload.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pre_post_commands: Optional[Sequence['outputs.NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommand']] = None):
        """
        :param Sequence['NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommandArgs'] pre_post_commands: Pre Post command of Task
        """
        if pre_post_commands is not None:
            pulumi.set(__self__, "pre_post_commands", pre_post_commands)

    @property
    @pulumi.getter(name="prePostCommands")
    def pre_post_commands(self) -> Optional[Sequence['outputs.NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommand']]:
        """
        Pre Post command of Task
        """
        return pulumi.get(self, "pre_post_commands")


@pulumi.output_type
class NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommand(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postCommand":
            suggest = "post_command"
        elif key == "preCommand":
            suggest = "pre_command"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommand. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommand.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommand.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 post_command: Optional[str] = None,
                 pre_command: Optional[str] = None):
        """
        :param str post_command: post command of task
        :param str pre_command: pre command of task
        """
        if post_command is not None:
            pulumi.set(__self__, "post_command", post_command)
        if pre_command is not None:
            pulumi.set(__self__, "pre_command", pre_command)

    @property
    @pulumi.getter(name="postCommand")
    def post_command(self) -> Optional[str]:
        """
        post command of task
        """
        return pulumi.get(self, "post_command")

    @property
    @pulumi.getter(name="preCommand")
    def pre_command(self) -> Optional[str]:
        """
        pre command of task
        """
        return pulumi.get(self, "pre_command")


@pulumi.output_type
class NdbMaintenanceTaskEntityTaskAssociationProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: name of of maintenance window
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of of maintenance window
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbMaintenanceTaskEntityTaskAssociationTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbMaintenanceTaskEntityTaskAssociationTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbMaintenanceTaskEntityTaskAssociationTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbMaintenanceTaskEntityTaskAssociationTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str entity_id: entity id
        :param str entity_type: type of the entity. i.e. DBSERVER
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        """
        entity id
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        """
        type of the entity. i.e. DBSERVER
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbMaintenanceTaskTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postCommand":
            suggest = "post_command"
        elif key == "preCommand":
            suggest = "pre_command"
        elif key == "taskType":
            suggest = "task_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbMaintenanceTaskTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbMaintenanceTaskTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbMaintenanceTaskTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 post_command: Optional[str] = None,
                 pre_command: Optional[str] = None,
                 task_type: Optional[str] = None):
        """
        :param str post_command: command that you want to run after patching the OS/DB
        :param str pre_command: command that you want to run before patching the OS/DB
        :param str task_type: type of task. Supports [ "OS_PATCHING", "DB_PATCHING" ]
        """
        if post_command is not None:
            pulumi.set(__self__, "post_command", post_command)
        if pre_command is not None:
            pulumi.set(__self__, "pre_command", pre_command)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="postCommand")
    def post_command(self) -> Optional[str]:
        """
        command that you want to run after patching the OS/DB
        """
        return pulumi.get(self, "post_command")

    @property
    @pulumi.getter(name="preCommand")
    def pre_command(self) -> Optional[str]:
        """
        command that you want to run before patching the OS/DB
        """
        return pulumi.get(self, "pre_command")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[str]:
        """
        type of task. Supports [ "OS_PATCHING", "DB_PATCHING" ]
        """
        return pulumi.get(self, "task_type")


@pulumi.output_type
class NdbMaintenanceWindowEntityTaskAssoc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "maintenanceWindowId":
            suggest = "maintenance_window_id"
        elif key == "maintenanceWindowOwnerId":
            suggest = "maintenance_window_owner_id"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "taskType":
            suggest = "task_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbMaintenanceWindowEntityTaskAssoc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbMaintenanceWindowEntityTaskAssoc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbMaintenanceWindowEntityTaskAssoc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 entity: Optional[str] = None,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 id: Optional[str] = None,
                 maintenance_window_id: Optional[str] = None,
                 maintenance_window_owner_id: Optional[str] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 payloads: Optional[Sequence['outputs.NdbMaintenanceWindowEntityTaskAssocPayload']] = None,
                 properties: Optional[Sequence['outputs.NdbMaintenanceWindowEntityTaskAssocProperty']] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.NdbMaintenanceWindowEntityTaskAssocTag']] = None,
                 task_type: Optional[str] = None):
        """
        :param str access_level: access level
        :param str date_created: created date of maintenance window
        :param str date_modified: modified date of maintenance window
        :param str description: Description for maintenance window
        :param str name: Name for the maintenance window.
        :param str owner_id: owner id of maintenance window
        :param Sequence['NdbMaintenanceWindowEntityTaskAssocPropertyArgs'] properties: properties of maintenance window
        :param str status: status of maintennace window
        :param Sequence['NdbMaintenanceWindowEntityTaskAssocTagArgs'] tags: tags of maintenance window
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entity is not None:
            pulumi.set(__self__, "entity", entity)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if maintenance_window_id is not None:
            pulumi.set(__self__, "maintenance_window_id", maintenance_window_id)
        if maintenance_window_owner_id is not None:
            pulumi.set(__self__, "maintenance_window_owner_id", maintenance_window_owner_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if payloads is not None:
            pulumi.set(__self__, "payloads", payloads)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[str]:
        """
        access level
        """
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        created date of maintenance window
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        modified date of maintenance window
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description for maintenance window
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def entity(self) -> Optional[str]:
        return pulumi.get(self, "entity")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maintenanceWindowId")
    def maintenance_window_id(self) -> Optional[str]:
        return pulumi.get(self, "maintenance_window_id")

    @property
    @pulumi.getter(name="maintenanceWindowOwnerId")
    def maintenance_window_owner_id(self) -> Optional[str]:
        return pulumi.get(self, "maintenance_window_owner_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name for the maintenance window.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        """
        owner id of maintenance window
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter
    def payloads(self) -> Optional[Sequence['outputs.NdbMaintenanceWindowEntityTaskAssocPayload']]:
        return pulumi.get(self, "payloads")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbMaintenanceWindowEntityTaskAssocProperty']]:
        """
        properties of maintenance window
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of maintennace window
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.NdbMaintenanceWindowEntityTaskAssocTag']]:
        """
        tags of maintenance window
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[str]:
        return pulumi.get(self, "task_type")


@pulumi.output_type
class NdbMaintenanceWindowEntityTaskAssocPayload(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prePostCommands":
            suggest = "pre_post_commands"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbMaintenanceWindowEntityTaskAssocPayload. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbMaintenanceWindowEntityTaskAssocPayload.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbMaintenanceWindowEntityTaskAssocPayload.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pre_post_commands: Optional[Sequence['outputs.NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand']] = None):
        if pre_post_commands is not None:
            pulumi.set(__self__, "pre_post_commands", pre_post_commands)

    @property
    @pulumi.getter(name="prePostCommands")
    def pre_post_commands(self) -> Optional[Sequence['outputs.NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand']]:
        return pulumi.get(self, "pre_post_commands")


@pulumi.output_type
class NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postCommand":
            suggest = "post_command"
        elif key == "preCommand":
            suggest = "pre_command"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 post_command: Optional[str] = None,
                 pre_command: Optional[str] = None):
        if post_command is not None:
            pulumi.set(__self__, "post_command", post_command)
        if pre_command is not None:
            pulumi.set(__self__, "pre_command", pre_command)

    @property
    @pulumi.getter(name="postCommand")
    def post_command(self) -> Optional[str]:
        return pulumi.get(self, "post_command")

    @property
    @pulumi.getter(name="preCommand")
    def pre_command(self) -> Optional[str]:
        return pulumi.get(self, "pre_command")


@pulumi.output_type
class NdbMaintenanceWindowEntityTaskAssocProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name for the maintenance window.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name for the maintenance window.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbMaintenanceWindowEntityTaskAssocTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbMaintenanceWindowEntityTaskAssocTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbMaintenanceWindowEntityTaskAssocTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbMaintenanceWindowEntityTaskAssocTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbMaintenanceWindowProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name for the maintenance window.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name for the maintenance window.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbMaintenanceWindowSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfWeek":
            suggest = "day_of_week"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "weekOfMonth":
            suggest = "week_of_month"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbMaintenanceWindowSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbMaintenanceWindowSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbMaintenanceWindowSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_week: Optional[str] = None,
                 duration: Optional[int] = None,
                 hour: Optional[int] = None,
                 minute: Optional[int] = None,
                 recurrence: Optional[str] = None,
                 start_time: Optional[str] = None,
                 threshold: Optional[str] = None,
                 timezone: Optional[str] = None,
                 week_of_month: Optional[int] = None):
        """
        :param str day_of_week: Day of the week to trigger maintenance window. Supports [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]
        :param int duration: duration in hours. Default is 2
        :param str recurrence: Supported values [ MONTHLY, WEEKLY ]
        :param str start_time: start time for maintenance window to trigger
        :param str timezone: timezone . Default is Asia/Calcutta .
        :param int week_of_month: week of the month. Supports [1, 2, 3, 4] .
        """
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if hour is not None:
            pulumi.set(__self__, "hour", hour)
        if minute is not None:
            pulumi.set(__self__, "minute", minute)
        if recurrence is not None:
            pulumi.set(__self__, "recurrence", recurrence)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if week_of_month is not None:
            pulumi.set(__self__, "week_of_month", week_of_month)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        """
        Day of the week to trigger maintenance window. Supports [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]
        """
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter
    def duration(self) -> Optional[int]:
        """
        duration in hours. Default is 2
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def hour(self) -> Optional[int]:
        return pulumi.get(self, "hour")

    @property
    @pulumi.getter
    def minute(self) -> Optional[int]:
        return pulumi.get(self, "minute")

    @property
    @pulumi.getter
    def recurrence(self) -> Optional[str]:
        """
        Supported values [ MONTHLY, WEEKLY ]
        """
        return pulumi.get(self, "recurrence")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        start time for maintenance window to trigger
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[str]:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        timezone . Default is Asia/Calcutta .
        """
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="weekOfMonth")
    def week_of_month(self) -> Optional[int]:
        """
        week of the month. Supports [1, 2, 3, 4] .
        """
        return pulumi.get(self, "week_of_month")


@pulumi.output_type
class NdbMaintenanceWindowTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbMaintenanceWindowTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbMaintenanceWindowTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbMaintenanceWindowTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbNetworkIpPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp":
            suggest = "end_ip"
        elif key == "modifiedBy":
            suggest = "modified_by"
        elif key == "startIp":
            suggest = "start_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbNetworkIpPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbNetworkIpPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbNetworkIpPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addresses: Optional[Sequence['outputs.NdbNetworkIpPoolAddress']] = None,
                 end_ip: Optional[str] = None,
                 id: Optional[str] = None,
                 modified_by: Optional[str] = None,
                 start_ip: Optional[str] = None):
        """
        :param str end_ip: ending IP address range for new database servers
        :param str start_ip: starting IP address range for new database servers
        """
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if modified_by is not None:
            pulumi.set(__self__, "modified_by", modified_by)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence['outputs.NdbNetworkIpPoolAddress']]:
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[str]:
        """
        ending IP address range for new database servers
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> Optional[str]:
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[str]:
        """
        starting IP address range for new database servers
        """
        return pulumi.get(self, "start_ip")


@pulumi.output_type
class NdbNetworkIpPoolAddress(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 status: Optional[str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class NdbNetworkPropertiesMap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanGateway":
            suggest = "vlan_gateway"
        elif key == "vlanPrimaryDns":
            suggest = "vlan_primary_dns"
        elif key == "vlanSecondaryDns":
            suggest = "vlan_secondary_dns"
        elif key == "vlanSubnetMask":
            suggest = "vlan_subnet_mask"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbNetworkPropertiesMap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbNetworkPropertiesMap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbNetworkPropertiesMap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vlan_gateway: Optional[str] = None,
                 vlan_primary_dns: Optional[str] = None,
                 vlan_secondary_dns: Optional[str] = None,
                 vlan_subnet_mask: Optional[str] = None):
        if vlan_gateway is not None:
            pulumi.set(__self__, "vlan_gateway", vlan_gateway)
        if vlan_primary_dns is not None:
            pulumi.set(__self__, "vlan_primary_dns", vlan_primary_dns)
        if vlan_secondary_dns is not None:
            pulumi.set(__self__, "vlan_secondary_dns", vlan_secondary_dns)
        if vlan_subnet_mask is not None:
            pulumi.set(__self__, "vlan_subnet_mask", vlan_subnet_mask)

    @property
    @pulumi.getter(name="vlanGateway")
    def vlan_gateway(self) -> Optional[str]:
        return pulumi.get(self, "vlan_gateway")

    @property
    @pulumi.getter(name="vlanPrimaryDns")
    def vlan_primary_dns(self) -> Optional[str]:
        return pulumi.get(self, "vlan_primary_dns")

    @property
    @pulumi.getter(name="vlanSecondaryDns")
    def vlan_secondary_dns(self) -> Optional[str]:
        return pulumi.get(self, "vlan_secondary_dns")

    @property
    @pulumi.getter(name="vlanSubnetMask")
    def vlan_subnet_mask(self) -> Optional[str]:
        return pulumi.get(self, "vlan_subnet_mask")


@pulumi.output_type
class NdbNetworkProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the vlan to be attached in NDB
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the vlan to be attached in NDB
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbProfileClusterAvailability(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "nxClusterId":
            suggest = "nx_cluster_id"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "profileId":
            suggest = "profile_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbProfileClusterAvailability. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbProfileClusterAvailability.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbProfileClusterAvailability.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 nx_cluster_id: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 profile_id: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str nx_cluster_id: cluster on which profile created
        :param str status: status of profile
        """
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if nx_cluster_id is not None:
            pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if profile_id is not None:
            pulumi.set(__self__, "profile_id", profile_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> Optional[str]:
        """
        cluster on which profile created
        """
        return pulumi.get(self, "nx_cluster_id")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> Optional[str]:
        return pulumi.get(self, "profile_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of profile
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class NdbProfileComputeProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "corePerCpu":
            suggest = "core_per_cpu"
        elif key == "memorySize":
            suggest = "memory_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbProfileComputeProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbProfileComputeProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbProfileComputeProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 core_per_cpu: Optional[str] = None,
                 cpus: Optional[str] = None,
                 memory_size: Optional[str] = None):
        """
        :param str core_per_cpu: number of cores per vCPU for the database server VM.
        :param str cpus: number of vCPUs for the database server VM.
        :param str memory_size: amount of memory for the database server VM.
        """
        if core_per_cpu is not None:
            pulumi.set(__self__, "core_per_cpu", core_per_cpu)
        if cpus is not None:
            pulumi.set(__self__, "cpus", cpus)
        if memory_size is not None:
            pulumi.set(__self__, "memory_size", memory_size)

    @property
    @pulumi.getter(name="corePerCpu")
    def core_per_cpu(self) -> Optional[str]:
        """
        number of cores per vCPU for the database server VM.
        """
        return pulumi.get(self, "core_per_cpu")

    @property
    @pulumi.getter
    def cpus(self) -> Optional[str]:
        """
        number of vCPUs for the database server VM.
        """
        return pulumi.get(self, "cpus")

    @property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> Optional[str]:
        """
        amount of memory for the database server VM.
        """
        return pulumi.get(self, "memory_size")


@pulumi.output_type
class NdbProfileDatabaseParameterProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postgresDatabases":
            suggest = "postgres_databases"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbProfileDatabaseParameterProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbProfileDatabaseParameterProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbProfileDatabaseParameterProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 postgres_databases: Optional[Sequence['outputs.NdbProfileDatabaseParameterProfilePostgresDatabase']] = None):
        """
        :param Sequence['NdbProfileDatabaseParameterProfilePostgresDatabaseArgs'] postgres_databases: Database parameters suuported for postgress.
               * `postgres_database.max_connections`: (Optional) Determines the maximum number of concurrent connections to the database server. The default is set to 100
               * `postgres_database.max_replication_slots`: (Optional) Specifies the maximum number of replication slots that the server can support. The default is zero. wal_level must be set to archive or higher to allow replication slots to be used. Setting it to a lower value than the number of currently existing replication slots will prevent the server from starting.
               * `postgres_database.effective_io_concurrency`: (Optional) Sets the number of concurrent disk I/O operations that PostgreSQL expects can be executed simultaneously. Raising this value will increase the number of I/O operations that any individual PostgreSQL session attempts to initiate in parallel.
               * `postgres_database.timezone`: (Optional) Sets the time zone for displaying and interpreting time stamps. Defult is UTC .
               * `postgres_database.max_prepared_transactions`: (Optional) Sets the maximum number of transactions that can be in the prepared state simultaneously. Setting this parameter to zero (which is the default) disables the prepared-transaction feature.
               * `postgres_database.max_locks_per_transaction`: (Optional) This parameter controls the average number of object locks allocated for each transaction; individual transactions can lock more objects as long as the locks of all transactions fit in the lock table. Default is 64.
               * `postgres_database.max_wal_senders`: (Optional) Specifies the maximum number of concurrent connections from standby servers or streaming base backup clients (i.e., the maximum number of simultaneously running WAL sender processes). The default is 10.
               * `postgres_database.max_worker_processes`: (Optional) Sets the maximum number of background processes that the system can support. The default is 8.
               * `postgres_database.min_wal_size`: (Optional) As long as WAL disk usage stays below this setting, old WAL files are always recycled for future use at a checkpoint, rather than removed. This can be used to ensure that enough WAL space is reserved to handle spikes in WAL usage, for example when running large batch jobs. The default is 80 MB.
               * `postgres_database.max_wal_size`: (Optional) Maximum size to let the WAL grow to between automatic WAL checkpoints. The default is 1 GB
               * `postgres_database.checkpoint_timeout`: (Optional) Sets the maximum time between automatic WAL checkpoints . High Value gives Good Performance, but takes More Recovery Time, Reboot time. can reduce the I/O load on your system, especially when using large values for shared_buffers. Default is 5min
               * `postgres_database.autovacuum`: (Optional) Controls whether the server should run the autovacuum launcher daemon. This is on by default; however, track_counts must also be enabled for autovacuum to work.
               * `postgres_database.checkpoint_completion_target`: (Optional)
               Specifies the target of checkpoint completion, as a fraction of total time between checkpoints. Time spent flushing dirty buffers during checkpoint, as fraction of checkpoint interval . Formula - (checkpoint_timeout - 2min) / checkpoint_timeout. The default is 0.5.
               * `postgres_database.autovacuum_freeze_max_age`: (Optional) Age at which to autovacuum a table to prevent transaction ID wraparound. Default is 200000000
               * `postgres_database.autovacuum_vacuum_threshold`: (Optional) Min number of row updates before vacuum. Minimum number of tuple updates or deletes prior to vacuum. Take value in KB. Default is 50 .
               * `postgres_database.autovacuum_vacuum_scale_factor`: (Optional) Number of tuple updates or deletes prior to vacuum as a fraction of reltuples. Default is 0.2
               * `postgres_database.autovacuum_work_mem`: (Optional) Sets the maximum memory to be used by each autovacuum worker process. Unit is in KB. Default is -1
               * `postgres_database.autovacuum_max_workers`: (Optional) Sets the maximum number of simultaneously running autovacuum worker processes. Default is 3
               * `postgres_database.autovacuum_vacuum_cost_delay`: (Optional) Vacuum cost delay in milliseconds, for autovacuum. Specifies the cost delay value that will be used in automatic VACUUM operation. Default is 2ms
               * `postgres_database.wal_buffers`: (Optional)
               Sets the number of disk-page buffers in shared memory for WAL. The amount of shared memory used for WAL data that has not yet been written to disk. The default is -1.
               * `postgres_database.synchronous_commit`: (Optional) Sets the current transaction's synchronization level. Specifies whether transaction commit will wait for WAL records to be written to disk before the command returns a success indication to the client. Default is on.
               * `postgres_database.random_page_cost`: (Optional) Sets the planner's estimate of the cost of a nonsequentially fetched disk page. Sets the planner's estimate of the cost of a non-sequentially-fetched disk page. The default is 4.0.
               * `postgres_database.wal_keep_segments`: (Optional) Sets the number of WAL files held for standby servers, Specifies the minimum number of past log file segments kept in the pg_wal directory. Default is 700 .
        """
        if postgres_databases is not None:
            pulumi.set(__self__, "postgres_databases", postgres_databases)

    @property
    @pulumi.getter(name="postgresDatabases")
    def postgres_databases(self) -> Optional[Sequence['outputs.NdbProfileDatabaseParameterProfilePostgresDatabase']]:
        """
        Database parameters suuported for postgress.
        * `postgres_database.max_connections`: (Optional) Determines the maximum number of concurrent connections to the database server. The default is set to 100
        * `postgres_database.max_replication_slots`: (Optional) Specifies the maximum number of replication slots that the server can support. The default is zero. wal_level must be set to archive or higher to allow replication slots to be used. Setting it to a lower value than the number of currently existing replication slots will prevent the server from starting.
        * `postgres_database.effective_io_concurrency`: (Optional) Sets the number of concurrent disk I/O operations that PostgreSQL expects can be executed simultaneously. Raising this value will increase the number of I/O operations that any individual PostgreSQL session attempts to initiate in parallel.
        * `postgres_database.timezone`: (Optional) Sets the time zone for displaying and interpreting time stamps. Defult is UTC .
        * `postgres_database.max_prepared_transactions`: (Optional) Sets the maximum number of transactions that can be in the prepared state simultaneously. Setting this parameter to zero (which is the default) disables the prepared-transaction feature.
        * `postgres_database.max_locks_per_transaction`: (Optional) This parameter controls the average number of object locks allocated for each transaction; individual transactions can lock more objects as long as the locks of all transactions fit in the lock table. Default is 64.
        * `postgres_database.max_wal_senders`: (Optional) Specifies the maximum number of concurrent connections from standby servers or streaming base backup clients (i.e., the maximum number of simultaneously running WAL sender processes). The default is 10.
        * `postgres_database.max_worker_processes`: (Optional) Sets the maximum number of background processes that the system can support. The default is 8.
        * `postgres_database.min_wal_size`: (Optional) As long as WAL disk usage stays below this setting, old WAL files are always recycled for future use at a checkpoint, rather than removed. This can be used to ensure that enough WAL space is reserved to handle spikes in WAL usage, for example when running large batch jobs. The default is 80 MB.
        * `postgres_database.max_wal_size`: (Optional) Maximum size to let the WAL grow to between automatic WAL checkpoints. The default is 1 GB
        * `postgres_database.checkpoint_timeout`: (Optional) Sets the maximum time between automatic WAL checkpoints . High Value gives Good Performance, but takes More Recovery Time, Reboot time. can reduce the I/O load on your system, especially when using large values for shared_buffers. Default is 5min
        * `postgres_database.autovacuum`: (Optional) Controls whether the server should run the autovacuum launcher daemon. This is on by default; however, track_counts must also be enabled for autovacuum to work.
        * `postgres_database.checkpoint_completion_target`: (Optional)
        Specifies the target of checkpoint completion, as a fraction of total time between checkpoints. Time spent flushing dirty buffers during checkpoint, as fraction of checkpoint interval . Formula - (checkpoint_timeout - 2min) / checkpoint_timeout. The default is 0.5.
        * `postgres_database.autovacuum_freeze_max_age`: (Optional) Age at which to autovacuum a table to prevent transaction ID wraparound. Default is 200000000
        * `postgres_database.autovacuum_vacuum_threshold`: (Optional) Min number of row updates before vacuum. Minimum number of tuple updates or deletes prior to vacuum. Take value in KB. Default is 50 .
        * `postgres_database.autovacuum_vacuum_scale_factor`: (Optional) Number of tuple updates or deletes prior to vacuum as a fraction of reltuples. Default is 0.2
        * `postgres_database.autovacuum_work_mem`: (Optional) Sets the maximum memory to be used by each autovacuum worker process. Unit is in KB. Default is -1
        * `postgres_database.autovacuum_max_workers`: (Optional) Sets the maximum number of simultaneously running autovacuum worker processes. Default is 3
        * `postgres_database.autovacuum_vacuum_cost_delay`: (Optional) Vacuum cost delay in milliseconds, for autovacuum. Specifies the cost delay value that will be used in automatic VACUUM operation. Default is 2ms
        * `postgres_database.wal_buffers`: (Optional)
        Sets the number of disk-page buffers in shared memory for WAL. The amount of shared memory used for WAL data that has not yet been written to disk. The default is -1.
        * `postgres_database.synchronous_commit`: (Optional) Sets the current transaction's synchronization level. Specifies whether transaction commit will wait for WAL records to be written to disk before the command returns a success indication to the client. Default is on.
        * `postgres_database.random_page_cost`: (Optional) Sets the planner's estimate of the cost of a nonsequentially fetched disk page. Sets the planner's estimate of the cost of a non-sequentially-fetched disk page. The default is 4.0.
        * `postgres_database.wal_keep_segments`: (Optional) Sets the number of WAL files held for standby servers, Specifies the minimum number of past log file segments kept in the pg_wal directory. Default is 700 .
        """
        return pulumi.get(self, "postgres_databases")


@pulumi.output_type
class NdbProfileDatabaseParameterProfilePostgresDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autovacuumFreezeMaxAge":
            suggest = "autovacuum_freeze_max_age"
        elif key == "autovacuumMaxWorkers":
            suggest = "autovacuum_max_workers"
        elif key == "autovacuumVacuumCostDelay":
            suggest = "autovacuum_vacuum_cost_delay"
        elif key == "autovacuumVacuumScaleFactor":
            suggest = "autovacuum_vacuum_scale_factor"
        elif key == "autovacuumVacuumThreshold":
            suggest = "autovacuum_vacuum_threshold"
        elif key == "autovacuumWorkMem":
            suggest = "autovacuum_work_mem"
        elif key == "checkpointCompletionTarget":
            suggest = "checkpoint_completion_target"
        elif key == "checkpointTimeout":
            suggest = "checkpoint_timeout"
        elif key == "effectiveIoConcurrency":
            suggest = "effective_io_concurrency"
        elif key == "maxConnections":
            suggest = "max_connections"
        elif key == "maxLocksPerTransaction":
            suggest = "max_locks_per_transaction"
        elif key == "maxPreparedTransactions":
            suggest = "max_prepared_transactions"
        elif key == "maxReplicationSlots":
            suggest = "max_replication_slots"
        elif key == "maxWalSenders":
            suggest = "max_wal_senders"
        elif key == "maxWalSize":
            suggest = "max_wal_size"
        elif key == "maxWorkerProcesses":
            suggest = "max_worker_processes"
        elif key == "minWalSize":
            suggest = "min_wal_size"
        elif key == "randomPageCost":
            suggest = "random_page_cost"
        elif key == "synchronousCommit":
            suggest = "synchronous_commit"
        elif key == "walBuffers":
            suggest = "wal_buffers"
        elif key == "walKeepSegments":
            suggest = "wal_keep_segments"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbProfileDatabaseParameterProfilePostgresDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbProfileDatabaseParameterProfilePostgresDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbProfileDatabaseParameterProfilePostgresDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autovacuum: Optional[str] = None,
                 autovacuum_freeze_max_age: Optional[str] = None,
                 autovacuum_max_workers: Optional[str] = None,
                 autovacuum_vacuum_cost_delay: Optional[str] = None,
                 autovacuum_vacuum_scale_factor: Optional[str] = None,
                 autovacuum_vacuum_threshold: Optional[str] = None,
                 autovacuum_work_mem: Optional[str] = None,
                 checkpoint_completion_target: Optional[str] = None,
                 checkpoint_timeout: Optional[str] = None,
                 effective_io_concurrency: Optional[str] = None,
                 max_connections: Optional[str] = None,
                 max_locks_per_transaction: Optional[str] = None,
                 max_prepared_transactions: Optional[str] = None,
                 max_replication_slots: Optional[str] = None,
                 max_wal_senders: Optional[str] = None,
                 max_wal_size: Optional[str] = None,
                 max_worker_processes: Optional[str] = None,
                 min_wal_size: Optional[str] = None,
                 random_page_cost: Optional[str] = None,
                 synchronous_commit: Optional[str] = None,
                 timezone: Optional[str] = None,
                 wal_buffers: Optional[str] = None,
                 wal_keep_segments: Optional[str] = None):
        if autovacuum is not None:
            pulumi.set(__self__, "autovacuum", autovacuum)
        if autovacuum_freeze_max_age is not None:
            pulumi.set(__self__, "autovacuum_freeze_max_age", autovacuum_freeze_max_age)
        if autovacuum_max_workers is not None:
            pulumi.set(__self__, "autovacuum_max_workers", autovacuum_max_workers)
        if autovacuum_vacuum_cost_delay is not None:
            pulumi.set(__self__, "autovacuum_vacuum_cost_delay", autovacuum_vacuum_cost_delay)
        if autovacuum_vacuum_scale_factor is not None:
            pulumi.set(__self__, "autovacuum_vacuum_scale_factor", autovacuum_vacuum_scale_factor)
        if autovacuum_vacuum_threshold is not None:
            pulumi.set(__self__, "autovacuum_vacuum_threshold", autovacuum_vacuum_threshold)
        if autovacuum_work_mem is not None:
            pulumi.set(__self__, "autovacuum_work_mem", autovacuum_work_mem)
        if checkpoint_completion_target is not None:
            pulumi.set(__self__, "checkpoint_completion_target", checkpoint_completion_target)
        if checkpoint_timeout is not None:
            pulumi.set(__self__, "checkpoint_timeout", checkpoint_timeout)
        if effective_io_concurrency is not None:
            pulumi.set(__self__, "effective_io_concurrency", effective_io_concurrency)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if max_locks_per_transaction is not None:
            pulumi.set(__self__, "max_locks_per_transaction", max_locks_per_transaction)
        if max_prepared_transactions is not None:
            pulumi.set(__self__, "max_prepared_transactions", max_prepared_transactions)
        if max_replication_slots is not None:
            pulumi.set(__self__, "max_replication_slots", max_replication_slots)
        if max_wal_senders is not None:
            pulumi.set(__self__, "max_wal_senders", max_wal_senders)
        if max_wal_size is not None:
            pulumi.set(__self__, "max_wal_size", max_wal_size)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if min_wal_size is not None:
            pulumi.set(__self__, "min_wal_size", min_wal_size)
        if random_page_cost is not None:
            pulumi.set(__self__, "random_page_cost", random_page_cost)
        if synchronous_commit is not None:
            pulumi.set(__self__, "synchronous_commit", synchronous_commit)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if wal_buffers is not None:
            pulumi.set(__self__, "wal_buffers", wal_buffers)
        if wal_keep_segments is not None:
            pulumi.set(__self__, "wal_keep_segments", wal_keep_segments)

    @property
    @pulumi.getter
    def autovacuum(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum")

    @property
    @pulumi.getter(name="autovacuumFreezeMaxAge")
    def autovacuum_freeze_max_age(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_freeze_max_age")

    @property
    @pulumi.getter(name="autovacuumMaxWorkers")
    def autovacuum_max_workers(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_max_workers")

    @property
    @pulumi.getter(name="autovacuumVacuumCostDelay")
    def autovacuum_vacuum_cost_delay(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_vacuum_cost_delay")

    @property
    @pulumi.getter(name="autovacuumVacuumScaleFactor")
    def autovacuum_vacuum_scale_factor(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_vacuum_scale_factor")

    @property
    @pulumi.getter(name="autovacuumVacuumThreshold")
    def autovacuum_vacuum_threshold(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_vacuum_threshold")

    @property
    @pulumi.getter(name="autovacuumWorkMem")
    def autovacuum_work_mem(self) -> Optional[str]:
        return pulumi.get(self, "autovacuum_work_mem")

    @property
    @pulumi.getter(name="checkpointCompletionTarget")
    def checkpoint_completion_target(self) -> Optional[str]:
        return pulumi.get(self, "checkpoint_completion_target")

    @property
    @pulumi.getter(name="checkpointTimeout")
    def checkpoint_timeout(self) -> Optional[str]:
        return pulumi.get(self, "checkpoint_timeout")

    @property
    @pulumi.getter(name="effectiveIoConcurrency")
    def effective_io_concurrency(self) -> Optional[str]:
        return pulumi.get(self, "effective_io_concurrency")

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[str]:
        return pulumi.get(self, "max_connections")

    @property
    @pulumi.getter(name="maxLocksPerTransaction")
    def max_locks_per_transaction(self) -> Optional[str]:
        return pulumi.get(self, "max_locks_per_transaction")

    @property
    @pulumi.getter(name="maxPreparedTransactions")
    def max_prepared_transactions(self) -> Optional[str]:
        return pulumi.get(self, "max_prepared_transactions")

    @property
    @pulumi.getter(name="maxReplicationSlots")
    def max_replication_slots(self) -> Optional[str]:
        return pulumi.get(self, "max_replication_slots")

    @property
    @pulumi.getter(name="maxWalSenders")
    def max_wal_senders(self) -> Optional[str]:
        return pulumi.get(self, "max_wal_senders")

    @property
    @pulumi.getter(name="maxWalSize")
    def max_wal_size(self) -> Optional[str]:
        return pulumi.get(self, "max_wal_size")

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[str]:
        return pulumi.get(self, "max_worker_processes")

    @property
    @pulumi.getter(name="minWalSize")
    def min_wal_size(self) -> Optional[str]:
        return pulumi.get(self, "min_wal_size")

    @property
    @pulumi.getter(name="randomPageCost")
    def random_page_cost(self) -> Optional[str]:
        return pulumi.get(self, "random_page_cost")

    @property
    @pulumi.getter(name="synchronousCommit")
    def synchronous_commit(self) -> Optional[str]:
        return pulumi.get(self, "synchronous_commit")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="walBuffers")
    def wal_buffers(self) -> Optional[str]:
        return pulumi.get(self, "wal_buffers")

    @property
    @pulumi.getter(name="walKeepSegments")
    def wal_keep_segments(self) -> Optional[str]:
        return pulumi.get(self, "wal_keep_segments")


@pulumi.output_type
class NdbProfileNetworkProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postgresDatabases":
            suggest = "postgres_databases"
        elif key == "versionClusterAssociations":
            suggest = "version_cluster_associations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbProfileNetworkProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbProfileNetworkProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbProfileNetworkProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topology: str,
                 postgres_databases: Optional[Sequence['outputs.NdbProfileNetworkProfilePostgresDatabase']] = None,
                 version_cluster_associations: Optional[Sequence['outputs.NdbProfileNetworkProfileVersionClusterAssociation']] = None):
        """
        :param str topology: Topology supported for network profile. Allowed values are "cluster" and "single"
        :param Sequence['NdbProfileNetworkProfilePostgresDatabaseArgs'] postgres_databases: Postgres Info to create network profile
               
               * `postgres_database.single_instance`: (Optional) Info for postgres database to create single instance network profile.
               * `postgres_database.single_instance.vlan_name`: (Required) specify the VLAN to provide the IP address used to connect the database from the public network.
               * `postgres_database.single_instance.enable_ip_address_selection`: (Optional) If Advanced Network Segmentation is enabled, then this vLAN needs to be a static vLAN and needs to be true.
               
               * `postgres_database.ha_instance`: (Optional) Info for craeting Network profile for HA instance
               * `postgres_database.ha_instance.vlan_name`: (Required) specify the VLANs for network
               * `postgres_database.ha_instance.cluster_name`: (Required) specify the cluster name associated with given VLANs
               * `postgres_database.ha_instance.cluster_id`: (Optional) specify the cluster ids associated with given VLANs
               * `postgres_database.ha_instance.num_of_clusters`: (Required) number of cluster attached to network profile
        :param Sequence['NdbProfileNetworkProfileVersionClusterAssociationArgs'] version_cluster_associations: cluster associated with VLAN. this is used with Single instance for postgres database.
               * `version_cluster_association.nx_cluster_id`: (Required) cluster id for associated VLAN.
        """
        pulumi.set(__self__, "topology", topology)
        if postgres_databases is not None:
            pulumi.set(__self__, "postgres_databases", postgres_databases)
        if version_cluster_associations is not None:
            pulumi.set(__self__, "version_cluster_associations", version_cluster_associations)

    @property
    @pulumi.getter
    def topology(self) -> str:
        """
        Topology supported for network profile. Allowed values are "cluster" and "single"
        """
        return pulumi.get(self, "topology")

    @property
    @pulumi.getter(name="postgresDatabases")
    def postgres_databases(self) -> Optional[Sequence['outputs.NdbProfileNetworkProfilePostgresDatabase']]:
        """
        Postgres Info to create network profile

        * `postgres_database.single_instance`: (Optional) Info for postgres database to create single instance network profile.
        * `postgres_database.single_instance.vlan_name`: (Required) specify the VLAN to provide the IP address used to connect the database from the public network.
        * `postgres_database.single_instance.enable_ip_address_selection`: (Optional) If Advanced Network Segmentation is enabled, then this vLAN needs to be a static vLAN and needs to be true.

        * `postgres_database.ha_instance`: (Optional) Info for craeting Network profile for HA instance
        * `postgres_database.ha_instance.vlan_name`: (Required) specify the VLANs for network
        * `postgres_database.ha_instance.cluster_name`: (Required) specify the cluster name associated with given VLANs
        * `postgres_database.ha_instance.cluster_id`: (Optional) specify the cluster ids associated with given VLANs
        * `postgres_database.ha_instance.num_of_clusters`: (Required) number of cluster attached to network profile
        """
        return pulumi.get(self, "postgres_databases")

    @property
    @pulumi.getter(name="versionClusterAssociations")
    def version_cluster_associations(self) -> Optional[Sequence['outputs.NdbProfileNetworkProfileVersionClusterAssociation']]:
        """
        cluster associated with VLAN. this is used with Single instance for postgres database.
        * `version_cluster_association.nx_cluster_id`: (Required) cluster id for associated VLAN.
        """
        return pulumi.get(self, "version_cluster_associations")


@pulumi.output_type
class NdbProfileNetworkProfilePostgresDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "haInstances":
            suggest = "ha_instances"
        elif key == "singleInstances":
            suggest = "single_instances"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbProfileNetworkProfilePostgresDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbProfileNetworkProfilePostgresDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbProfileNetworkProfilePostgresDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ha_instances: Optional[Sequence['outputs.NdbProfileNetworkProfilePostgresDatabaseHaInstance']] = None,
                 single_instances: Optional[Sequence['outputs.NdbProfileNetworkProfilePostgresDatabaseSingleInstance']] = None):
        if ha_instances is not None:
            pulumi.set(__self__, "ha_instances", ha_instances)
        if single_instances is not None:
            pulumi.set(__self__, "single_instances", single_instances)

    @property
    @pulumi.getter(name="haInstances")
    def ha_instances(self) -> Optional[Sequence['outputs.NdbProfileNetworkProfilePostgresDatabaseHaInstance']]:
        return pulumi.get(self, "ha_instances")

    @property
    @pulumi.getter(name="singleInstances")
    def single_instances(self) -> Optional[Sequence['outputs.NdbProfileNetworkProfilePostgresDatabaseSingleInstance']]:
        return pulumi.get(self, "single_instances")


@pulumi.output_type
class NdbProfileNetworkProfilePostgresDatabaseHaInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterIds":
            suggest = "cluster_ids"
        elif key == "clusterNames":
            suggest = "cluster_names"
        elif key == "numOfClusters":
            suggest = "num_of_clusters"
        elif key == "vlanNames":
            suggest = "vlan_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbProfileNetworkProfilePostgresDatabaseHaInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbProfileNetworkProfilePostgresDatabaseHaInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbProfileNetworkProfilePostgresDatabaseHaInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_ids: Optional[Sequence[str]] = None,
                 cluster_names: Optional[Sequence[str]] = None,
                 num_of_clusters: Optional[str] = None,
                 vlan_names: Optional[Sequence[str]] = None):
        if cluster_ids is not None:
            pulumi.set(__self__, "cluster_ids", cluster_ids)
        if cluster_names is not None:
            pulumi.set(__self__, "cluster_names", cluster_names)
        if num_of_clusters is not None:
            pulumi.set(__self__, "num_of_clusters", num_of_clusters)
        if vlan_names is not None:
            pulumi.set(__self__, "vlan_names", vlan_names)

    @property
    @pulumi.getter(name="clusterIds")
    def cluster_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cluster_ids")

    @property
    @pulumi.getter(name="clusterNames")
    def cluster_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cluster_names")

    @property
    @pulumi.getter(name="numOfClusters")
    def num_of_clusters(self) -> Optional[str]:
        return pulumi.get(self, "num_of_clusters")

    @property
    @pulumi.getter(name="vlanNames")
    def vlan_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "vlan_names")


@pulumi.output_type
class NdbProfileNetworkProfilePostgresDatabaseSingleInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableIpAddressSelection":
            suggest = "enable_ip_address_selection"
        elif key == "vlanName":
            suggest = "vlan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbProfileNetworkProfilePostgresDatabaseSingleInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbProfileNetworkProfilePostgresDatabaseSingleInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbProfileNetworkProfilePostgresDatabaseSingleInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_ip_address_selection: Optional[str] = None,
                 vlan_name: Optional[str] = None):
        if enable_ip_address_selection is not None:
            pulumi.set(__self__, "enable_ip_address_selection", enable_ip_address_selection)
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="enableIpAddressSelection")
    def enable_ip_address_selection(self) -> Optional[str]:
        return pulumi.get(self, "enable_ip_address_selection")

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[str]:
        return pulumi.get(self, "vlan_name")


@pulumi.output_type
class NdbProfileNetworkProfileVersionClusterAssociation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nxClusterId":
            suggest = "nx_cluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbProfileNetworkProfileVersionClusterAssociation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbProfileNetworkProfileVersionClusterAssociation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbProfileNetworkProfileVersionClusterAssociation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nx_cluster_id: str):
        """
        :param str nx_cluster_id: cluster on which profile created
        """
        pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> str:
        """
        cluster on which profile created
        """
        return pulumi.get(self, "nx_cluster_id")


@pulumi.output_type
class NdbProfileSoftwareProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availableClusterIds":
            suggest = "available_cluster_ids"
        elif key == "postgresDatabases":
            suggest = "postgres_databases"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbProfileSoftwareProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbProfileSoftwareProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbProfileSoftwareProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topology: str,
                 available_cluster_ids: Optional[Sequence[str]] = None,
                 postgres_databases: Optional[Sequence['outputs.NdbProfileSoftwareProfilePostgresDatabase']] = None):
        """
        :param str topology: Topology of software profile. Allowed values are "cluster" and "single"
        :param Sequence[str] available_cluster_ids: specify Nutanix clusters where this profile is available.
        :param Sequence['NdbProfileSoftwareProfilePostgresDatabaseArgs'] postgres_databases: Software profile info about postgres database.
               * `postgres_database.source_dbserver_id`: source dbserver id where postgress software will be installed.
               * `postgres_database.base_profile_version_name`: name for the software profile version.
               * `postgres_database.base_profile_version_description`: description for the software profile version.
               * `postgres_database.os_notes`: a note to provide additional information about the operating system
               * `postgres_database.db_software_notes`: a note to provide additional information about the database software.
        """
        pulumi.set(__self__, "topology", topology)
        if available_cluster_ids is not None:
            pulumi.set(__self__, "available_cluster_ids", available_cluster_ids)
        if postgres_databases is not None:
            pulumi.set(__self__, "postgres_databases", postgres_databases)

    @property
    @pulumi.getter
    def topology(self) -> str:
        """
        Topology of software profile. Allowed values are "cluster" and "single"
        """
        return pulumi.get(self, "topology")

    @property
    @pulumi.getter(name="availableClusterIds")
    def available_cluster_ids(self) -> Optional[Sequence[str]]:
        """
        specify Nutanix clusters where this profile is available.
        """
        return pulumi.get(self, "available_cluster_ids")

    @property
    @pulumi.getter(name="postgresDatabases")
    def postgres_databases(self) -> Optional[Sequence['outputs.NdbProfileSoftwareProfilePostgresDatabase']]:
        """
        Software profile info about postgres database.
        * `postgres_database.source_dbserver_id`: source dbserver id where postgress software will be installed.
        * `postgres_database.base_profile_version_name`: name for the software profile version.
        * `postgres_database.base_profile_version_description`: description for the software profile version.
        * `postgres_database.os_notes`: a note to provide additional information about the operating system
        * `postgres_database.db_software_notes`: a note to provide additional information about the database software.
        """
        return pulumi.get(self, "postgres_databases")


@pulumi.output_type
class NdbProfileSoftwareProfilePostgresDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseProfileVersionDescription":
            suggest = "base_profile_version_description"
        elif key == "baseProfileVersionName":
            suggest = "base_profile_version_name"
        elif key == "dbSoftwareNotes":
            suggest = "db_software_notes"
        elif key == "osNotes":
            suggest = "os_notes"
        elif key == "sourceDbserverId":
            suggest = "source_dbserver_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbProfileSoftwareProfilePostgresDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbProfileSoftwareProfilePostgresDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbProfileSoftwareProfilePostgresDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_profile_version_description: Optional[str] = None,
                 base_profile_version_name: Optional[str] = None,
                 db_software_notes: Optional[str] = None,
                 os_notes: Optional[str] = None,
                 source_dbserver_id: Optional[str] = None):
        if base_profile_version_description is not None:
            pulumi.set(__self__, "base_profile_version_description", base_profile_version_description)
        if base_profile_version_name is not None:
            pulumi.set(__self__, "base_profile_version_name", base_profile_version_name)
        if db_software_notes is not None:
            pulumi.set(__self__, "db_software_notes", db_software_notes)
        if os_notes is not None:
            pulumi.set(__self__, "os_notes", os_notes)
        if source_dbserver_id is not None:
            pulumi.set(__self__, "source_dbserver_id", source_dbserver_id)

    @property
    @pulumi.getter(name="baseProfileVersionDescription")
    def base_profile_version_description(self) -> Optional[str]:
        return pulumi.get(self, "base_profile_version_description")

    @property
    @pulumi.getter(name="baseProfileVersionName")
    def base_profile_version_name(self) -> Optional[str]:
        return pulumi.get(self, "base_profile_version_name")

    @property
    @pulumi.getter(name="dbSoftwareNotes")
    def db_software_notes(self) -> Optional[str]:
        return pulumi.get(self, "db_software_notes")

    @property
    @pulumi.getter(name="osNotes")
    def os_notes(self) -> Optional[str]:
        return pulumi.get(self, "os_notes")

    @property
    @pulumi.getter(name="sourceDbserverId")
    def source_dbserver_id(self) -> Optional[str]:
        return pulumi.get(self, "source_dbserver_id")


@pulumi.output_type
class NdbProfileVersion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbVersion":
            suggest = "db_version"
        elif key == "engineType":
            suggest = "engine_type"
        elif key == "profileId":
            suggest = "profile_id"
        elif key == "propertiesMap":
            suggest = "properties_map"
        elif key == "systemProfile":
            suggest = "system_profile"
        elif key == "versionClusterAssociations":
            suggest = "version_cluster_associations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbProfileVersion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbProfileVersion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbProfileVersion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_version: Optional[str] = None,
                 deprecated: Optional[bool] = None,
                 description: Optional[str] = None,
                 engine_type: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 profile_id: Optional[str] = None,
                 properties: Optional[Sequence['outputs.NdbProfileVersionProperty']] = None,
                 properties_map: Optional[Mapping[str, str]] = None,
                 published: Optional[bool] = None,
                 status: Optional[str] = None,
                 system_profile: Optional[bool] = None,
                 topology: Optional[str] = None,
                 type: Optional[str] = None,
                 version: Optional[str] = None,
                 version_cluster_associations: Optional[Sequence['outputs.NdbProfileVersionVersionClusterAssociation']] = None):
        """
        :param str description: Description of profile
        :param str engine_type: Engine Type of database
        :param str name: Name of profile
        :param str owner: owner  of profile
        :param bool published: Publish for all users
        :param str status: status of profile
        :param Sequence['NdbProfileVersionVersionClusterAssociationArgs'] version_cluster_associations: cluster associated with VLAN. this is used with Single instance for postgres database.
               * `version_cluster_association.nx_cluster_id`: (Required) cluster id for associated VLAN.
        """
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if deprecated is not None:
            pulumi.set(__self__, "deprecated", deprecated)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine_type is not None:
            pulumi.set(__self__, "engine_type", engine_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if profile_id is not None:
            pulumi.set(__self__, "profile_id", profile_id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if properties_map is not None:
            pulumi.set(__self__, "properties_map", properties_map)
        if published is not None:
            pulumi.set(__self__, "published", published)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_profile is not None:
            pulumi.set(__self__, "system_profile", system_profile)
        if topology is not None:
            pulumi.set(__self__, "topology", topology)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_cluster_associations is not None:
            pulumi.set(__self__, "version_cluster_associations", version_cluster_associations)

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[str]:
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter
    def deprecated(self) -> Optional[bool]:
        return pulumi.get(self, "deprecated")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of profile
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> Optional[str]:
        """
        Engine Type of database
        """
        return pulumi.get(self, "engine_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of profile
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        """
        owner  of profile
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> Optional[str]:
        return pulumi.get(self, "profile_id")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbProfileVersionProperty']]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="propertiesMap")
    def properties_map(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties_map")

    @property
    @pulumi.getter
    def published(self) -> Optional[bool]:
        """
        Publish for all users
        """
        return pulumi.get(self, "published")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of profile
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemProfile")
    def system_profile(self) -> Optional[bool]:
        return pulumi.get(self, "system_profile")

    @property
    @pulumi.getter
    def topology(self) -> Optional[str]:
        return pulumi.get(self, "topology")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionClusterAssociations")
    def version_cluster_associations(self) -> Optional[Sequence['outputs.NdbProfileVersionVersionClusterAssociation']]:
        """
        cluster associated with VLAN. this is used with Single instance for postgres database.
        * `version_cluster_association.nx_cluster_id`: (Required) cluster id for associated VLAN.
        """
        return pulumi.get(self, "version_cluster_associations")


@pulumi.output_type
class NdbProfileVersionProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of profile
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of profile
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbProfileVersionVersionClusterAssociation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "nxClusterId":
            suggest = "nx_cluster_id"
        elif key == "optimizedForProvisioning":
            suggest = "optimized_for_provisioning"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "profileVersionId":
            suggest = "profile_version_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbProfileVersionVersionClusterAssociation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbProfileVersionVersionClusterAssociation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbProfileVersionVersionClusterAssociation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 nx_cluster_id: Optional[str] = None,
                 optimized_for_provisioning: Optional[bool] = None,
                 owner_id: Optional[str] = None,
                 profile_version_id: Optional[str] = None,
                 properties: Optional[Sequence['outputs.NdbProfileVersionVersionClusterAssociationProperty']] = None,
                 status: Optional[str] = None):
        """
        :param str nx_cluster_id: cluster on which profile created
        :param str status: status of profile
        """
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if nx_cluster_id is not None:
            pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        if optimized_for_provisioning is not None:
            pulumi.set(__self__, "optimized_for_provisioning", optimized_for_provisioning)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if profile_version_id is not None:
            pulumi.set(__self__, "profile_version_id", profile_version_id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> Optional[str]:
        """
        cluster on which profile created
        """
        return pulumi.get(self, "nx_cluster_id")

    @property
    @pulumi.getter(name="optimizedForProvisioning")
    def optimized_for_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "optimized_for_provisioning")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="profileVersionId")
    def profile_version_id(self) -> Optional[str]:
        return pulumi.get(self, "profile_version_id")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbProfileVersionVersionClusterAssociationProperty']]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of profile
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class NdbProfileVersionVersionClusterAssociationProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of profile
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of profile
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbRegisterDatabaseActionargument(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - (Required) name of argument
        :param str value: - (Required) value for argument
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) name of argument
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbRegisterDatabaseDatabaseNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "databaseId":
            suggest = "database_id"
        elif key == "databaseStatus":
            suggest = "database_status"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "dbserverId":
            suggest = "dbserver_id"
        elif key == "protectionDomainId":
            suggest = "protection_domain_id"
        elif key == "protectionDomains":
            suggest = "protection_domains"
        elif key == "softwareInstallationId":
            suggest = "software_installation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseDatabaseNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseDatabaseNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseDatabaseNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: Optional[Mapping[str, str]] = None,
                 database_id: Optional[str] = None,
                 database_status: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 dbserver: Optional[Mapping[str, str]] = None,
                 dbserver_id: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 infos: Optional[Sequence['outputs.NdbRegisterDatabaseDatabaseNodeInfo']] = None,
                 name: Optional[str] = None,
                 primary: Optional[bool] = None,
                 properties: Optional[Sequence['outputs.NdbRegisterDatabaseDatabaseNodeProperty']] = None,
                 protection_domain_id: Optional[str] = None,
                 protection_domains: Optional[Sequence['outputs.NdbRegisterDatabaseDatabaseNodeProtectionDomain']] = None,
                 software_installation_id: Optional[str] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.NdbRegisterDatabaseDatabaseNodeTag']] = None):
        """
        :param str database_status: status of database
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description
        :param Sequence['NdbRegisterDatabaseDatabaseNodeInfoArgs'] infos: info of instance
        :param str name: Name of database instance
        :param Sequence['NdbRegisterDatabaseDatabaseNodePropertyArgs'] properties: properties of database created
        :param str status: status of instance
        :param Sequence['NdbRegisterDatabaseDatabaseNodeTagArgs'] tags: tags
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if dbserver is not None:
            pulumi.set(__self__, "dbserver", dbserver)
        if dbserver_id is not None:
            pulumi.set(__self__, "dbserver_id", dbserver_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if protection_domain_id is not None:
            pulumi.set(__self__, "protection_domain_id", protection_domain_id)
        if protection_domains is not None:
            pulumi.set(__self__, "protection_domains", protection_domains)
        if software_installation_id is not None:
            pulumi.set(__self__, "software_installation_id", software_installation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[str]:
        """
        status of database
        """
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def dbserver(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "dbserver")

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> Optional[str]:
        return pulumi.get(self, "dbserver_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseDatabaseNodeInfo']]:
        """
        info of instance
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseDatabaseNodeProperty']]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="protectionDomainId")
    def protection_domain_id(self) -> Optional[str]:
        return pulumi.get(self, "protection_domain_id")

    @property
    @pulumi.getter(name="protectionDomains")
    def protection_domains(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseDatabaseNodeProtectionDomain']]:
        return pulumi.get(self, "protection_domains")

    @property
    @pulumi.getter(name="softwareInstallationId")
    def software_installation_id(self) -> Optional[str]:
        return pulumi.get(self, "software_installation_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseDatabaseNodeTag']]:
        """
        tags
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class NdbRegisterDatabaseDatabaseNodeInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureInfo":
            suggest = "secure_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseDatabaseNodeInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseDatabaseNodeInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseDatabaseNodeInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 info: Optional[Mapping[str, str]] = None,
                 secure_info: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] info: info of instance
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[Mapping[str, str]]:
        """
        info of instance
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class NdbRegisterDatabaseDatabaseNodeProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseDatabaseNodeProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseDatabaseNodeProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseDatabaseNodeProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str description: description
        :param str name: Name of database instance
        :param str value: - (Required) value for argument
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbRegisterDatabaseDatabaseNodeProtectionDomain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assocEntities":
            suggest = "assoc_entities"
        elif key == "cloudId":
            suggest = "cloud_id"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "eraCreated":
            suggest = "era_created"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "primaryHost":
            suggest = "primary_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseDatabaseNodeProtectionDomain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseDatabaseNodeProtectionDomain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseDatabaseNodeProtectionDomain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assoc_entities: Optional[Sequence[str]] = None,
                 cloud_id: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 era_created: Optional[bool] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 primary_host: Optional[str] = None,
                 properties: Optional[Sequence['outputs.NdbRegisterDatabaseDatabaseNodeProtectionDomainProperty']] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description
        :param str name: Name of database instance
        :param Sequence['NdbRegisterDatabaseDatabaseNodeProtectionDomainPropertyArgs'] properties: properties of database created
        :param str status: status of instance
        :param str type: type of database
        """
        if assoc_entities is not None:
            pulumi.set(__self__, "assoc_entities", assoc_entities)
        if cloud_id is not None:
            pulumi.set(__self__, "cloud_id", cloud_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if era_created is not None:
            pulumi.set(__self__, "era_created", era_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if primary_host is not None:
            pulumi.set(__self__, "primary_host", primary_host)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assocEntities")
    def assoc_entities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "assoc_entities")

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> Optional[str]:
        return pulumi.get(self, "cloud_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eraCreated")
    def era_created(self) -> Optional[bool]:
        return pulumi.get(self, "era_created")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="primaryHost")
    def primary_host(self) -> Optional[str]:
        return pulumi.get(self, "primary_host")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseDatabaseNodeProtectionDomainProperty']]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of database
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NdbRegisterDatabaseDatabaseNodeProtectionDomainProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseDatabaseNodeProtectionDomainProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseDatabaseNodeProtectionDomainProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseDatabaseNodeProtectionDomainProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str description: description
        :param str name: Name of database instance
        :param str value: - (Required) value for argument
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbRegisterDatabaseDatabaseNodeTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseDatabaseNodeTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseDatabaseNodeTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseDatabaseNodeTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbRegisterDatabaseInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bpgConfigs":
            suggest = "bpg_configs"
        elif key == "secureInfo":
            suggest = "secure_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bpg_configs: Optional[Sequence['outputs.NdbRegisterDatabaseInfoBpgConfig']] = None,
                 secure_info: Optional[Mapping[str, str]] = None):
        if bpg_configs is not None:
            pulumi.set(__self__, "bpg_configs", bpg_configs)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="bpgConfigs")
    def bpg_configs(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseInfoBpgConfig']]:
        return pulumi.get(self, "bpg_configs")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class NdbRegisterDatabaseInfoBpgConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bpgDbParams":
            suggest = "bpg_db_params"
        elif key == "vmProperties":
            suggest = "vm_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseInfoBpgConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseInfoBpgConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseInfoBpgConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bpg_db_params: Optional[Sequence['outputs.NdbRegisterDatabaseInfoBpgConfigBpgDbParam']] = None,
                 storages: Optional[Sequence['outputs.NdbRegisterDatabaseInfoBpgConfigStorage']] = None,
                 vm_properties: Optional[Sequence['outputs.NdbRegisterDatabaseInfoBpgConfigVmProperty']] = None):
        if bpg_db_params is not None:
            pulumi.set(__self__, "bpg_db_params", bpg_db_params)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if vm_properties is not None:
            pulumi.set(__self__, "vm_properties", vm_properties)

    @property
    @pulumi.getter(name="bpgDbParams")
    def bpg_db_params(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseInfoBpgConfigBpgDbParam']]:
        return pulumi.get(self, "bpg_db_params")

    @property
    @pulumi.getter
    def storages(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseInfoBpgConfigStorage']]:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="vmProperties")
    def vm_properties(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseInfoBpgConfigVmProperty']]:
        return pulumi.get(self, "vm_properties")


@pulumi.output_type
class NdbRegisterDatabaseInfoBpgConfigBpgDbParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "effectiveCacheSize":
            suggest = "effective_cache_size"
        elif key == "maintenanceWorkMem":
            suggest = "maintenance_work_mem"
        elif key == "maxParallelWorkersPerGather":
            suggest = "max_parallel_workers_per_gather"
        elif key == "maxWorkerProcesses":
            suggest = "max_worker_processes"
        elif key == "sharedBuffers":
            suggest = "shared_buffers"
        elif key == "workMem":
            suggest = "work_mem"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseInfoBpgConfigBpgDbParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseInfoBpgConfigBpgDbParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseInfoBpgConfigBpgDbParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 effective_cache_size: Optional[str] = None,
                 maintenance_work_mem: Optional[str] = None,
                 max_parallel_workers_per_gather: Optional[str] = None,
                 max_worker_processes: Optional[str] = None,
                 shared_buffers: Optional[str] = None,
                 work_mem: Optional[str] = None):
        if effective_cache_size is not None:
            pulumi.set(__self__, "effective_cache_size", effective_cache_size)
        if maintenance_work_mem is not None:
            pulumi.set(__self__, "maintenance_work_mem", maintenance_work_mem)
        if max_parallel_workers_per_gather is not None:
            pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if shared_buffers is not None:
            pulumi.set(__self__, "shared_buffers", shared_buffers)
        if work_mem is not None:
            pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="effectiveCacheSize")
    def effective_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "effective_cache_size")

    @property
    @pulumi.getter(name="maintenanceWorkMem")
    def maintenance_work_mem(self) -> Optional[str]:
        return pulumi.get(self, "maintenance_work_mem")

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> Optional[str]:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[str]:
        return pulumi.get(self, "max_worker_processes")

    @property
    @pulumi.getter(name="sharedBuffers")
    def shared_buffers(self) -> Optional[str]:
        return pulumi.get(self, "shared_buffers")

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> Optional[str]:
        return pulumi.get(self, "work_mem")


@pulumi.output_type
class NdbRegisterDatabaseInfoBpgConfigStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveStorages":
            suggest = "archive_storages"
        elif key == "dataDisks":
            suggest = "data_disks"
        elif key == "logDisks":
            suggest = "log_disks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseInfoBpgConfigStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseInfoBpgConfigStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseInfoBpgConfigStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_storages: Optional[Sequence['outputs.NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorage']] = None,
                 data_disks: Optional[Sequence['outputs.NdbRegisterDatabaseInfoBpgConfigStorageDataDisk']] = None,
                 log_disks: Optional[Sequence['outputs.NdbRegisterDatabaseInfoBpgConfigStorageLogDisk']] = None):
        if archive_storages is not None:
            pulumi.set(__self__, "archive_storages", archive_storages)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if log_disks is not None:
            pulumi.set(__self__, "log_disks", log_disks)

    @property
    @pulumi.getter(name="archiveStorages")
    def archive_storages(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorage']]:
        return pulumi.get(self, "archive_storages")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseInfoBpgConfigStorageDataDisk']]:
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="logDisks")
    def log_disks(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseInfoBpgConfigStorageLogDisk']]:
        return pulumi.get(self, "log_disks")


@pulumi.output_type
class NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorage(dict):
    def __init__(__self__, *,
                 size: Optional[float] = None):
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> Optional[float]:
        return pulumi.get(self, "size")


@pulumi.output_type
class NdbRegisterDatabaseInfoBpgConfigStorageDataDisk(dict):
    def __init__(__self__, *,
                 count: Optional[float] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> Optional[float]:
        return pulumi.get(self, "count")


@pulumi.output_type
class NdbRegisterDatabaseInfoBpgConfigStorageLogDisk(dict):
    def __init__(__self__, *,
                 count: Optional[float] = None,
                 size: Optional[float] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> Optional[float]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def size(self) -> Optional[float]:
        return pulumi.get(self, "size")


@pulumi.output_type
class NdbRegisterDatabaseInfoBpgConfigVmProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dirtyBackgroundRatio":
            suggest = "dirty_background_ratio"
        elif key == "dirtyExpireCentisecs":
            suggest = "dirty_expire_centisecs"
        elif key == "dirtyRatio":
            suggest = "dirty_ratio"
        elif key == "dirtyWritebackCentisecs":
            suggest = "dirty_writeback_centisecs"
        elif key == "nrHugepages":
            suggest = "nr_hugepages"
        elif key == "overcommitMemory":
            suggest = "overcommit_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseInfoBpgConfigVmProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseInfoBpgConfigVmProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseInfoBpgConfigVmProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dirty_background_ratio: Optional[float] = None,
                 dirty_expire_centisecs: Optional[float] = None,
                 dirty_ratio: Optional[float] = None,
                 dirty_writeback_centisecs: Optional[float] = None,
                 nr_hugepages: Optional[float] = None,
                 overcommit_memory: Optional[float] = None,
                 swappiness: Optional[float] = None):
        if dirty_background_ratio is not None:
            pulumi.set(__self__, "dirty_background_ratio", dirty_background_ratio)
        if dirty_expire_centisecs is not None:
            pulumi.set(__self__, "dirty_expire_centisecs", dirty_expire_centisecs)
        if dirty_ratio is not None:
            pulumi.set(__self__, "dirty_ratio", dirty_ratio)
        if dirty_writeback_centisecs is not None:
            pulumi.set(__self__, "dirty_writeback_centisecs", dirty_writeback_centisecs)
        if nr_hugepages is not None:
            pulumi.set(__self__, "nr_hugepages", nr_hugepages)
        if overcommit_memory is not None:
            pulumi.set(__self__, "overcommit_memory", overcommit_memory)
        if swappiness is not None:
            pulumi.set(__self__, "swappiness", swappiness)

    @property
    @pulumi.getter(name="dirtyBackgroundRatio")
    def dirty_background_ratio(self) -> Optional[float]:
        return pulumi.get(self, "dirty_background_ratio")

    @property
    @pulumi.getter(name="dirtyExpireCentisecs")
    def dirty_expire_centisecs(self) -> Optional[float]:
        return pulumi.get(self, "dirty_expire_centisecs")

    @property
    @pulumi.getter(name="dirtyRatio")
    def dirty_ratio(self) -> Optional[float]:
        return pulumi.get(self, "dirty_ratio")

    @property
    @pulumi.getter(name="dirtyWritebackCentisecs")
    def dirty_writeback_centisecs(self) -> Optional[float]:
        return pulumi.get(self, "dirty_writeback_centisecs")

    @property
    @pulumi.getter(name="nrHugepages")
    def nr_hugepages(self) -> Optional[float]:
        return pulumi.get(self, "nr_hugepages")

    @property
    @pulumi.getter(name="overcommitMemory")
    def overcommit_memory(self) -> Optional[float]:
        return pulumi.get(self, "overcommit_memory")

    @property
    @pulumi.getter
    def swappiness(self) -> Optional[float]:
        return pulumi.get(self, "swappiness")


@pulumi.output_type
class NdbRegisterDatabaseLcmConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expiryDetails":
            suggest = "expiry_details"
        elif key == "postDeleteCommands":
            suggest = "post_delete_commands"
        elif key == "preDeleteCommands":
            suggest = "pre_delete_commands"
        elif key == "refreshDetails":
            suggest = "refresh_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseLcmConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseLcmConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseLcmConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expiry_details: Optional[Sequence['outputs.NdbRegisterDatabaseLcmConfigExpiryDetail']] = None,
                 post_delete_commands: Optional[Sequence['outputs.NdbRegisterDatabaseLcmConfigPostDeleteCommand']] = None,
                 pre_delete_commands: Optional[Sequence['outputs.NdbRegisterDatabaseLcmConfigPreDeleteCommand']] = None,
                 refresh_details: Optional[Sequence['outputs.NdbRegisterDatabaseLcmConfigRefreshDetail']] = None):
        if expiry_details is not None:
            pulumi.set(__self__, "expiry_details", expiry_details)
        if post_delete_commands is not None:
            pulumi.set(__self__, "post_delete_commands", post_delete_commands)
        if pre_delete_commands is not None:
            pulumi.set(__self__, "pre_delete_commands", pre_delete_commands)
        if refresh_details is not None:
            pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseLcmConfigExpiryDetail']]:
        return pulumi.get(self, "expiry_details")

    @property
    @pulumi.getter(name="postDeleteCommands")
    def post_delete_commands(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseLcmConfigPostDeleteCommand']]:
        return pulumi.get(self, "post_delete_commands")

    @property
    @pulumi.getter(name="preDeleteCommands")
    def pre_delete_commands(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseLcmConfigPreDeleteCommand']]:
        return pulumi.get(self, "pre_delete_commands")

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseLcmConfigRefreshDetail']]:
        return pulumi.get(self, "refresh_details")


@pulumi.output_type
class NdbRegisterDatabaseLcmConfigExpiryDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteDatabase":
            suggest = "delete_database"
        elif key == "deleteTimeMachine":
            suggest = "delete_time_machine"
        elif key == "deleteVm":
            suggest = "delete_vm"
        elif key == "effectiveTimestamp":
            suggest = "effective_timestamp"
        elif key == "expireInDays":
            suggest = "expire_in_days"
        elif key == "expiryDateTimezone":
            suggest = "expiry_date_timezone"
        elif key == "expiryTimestamp":
            suggest = "expiry_timestamp"
        elif key == "remindBeforeInDays":
            suggest = "remind_before_in_days"
        elif key == "userCreated":
            suggest = "user_created"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseLcmConfigExpiryDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseLcmConfigExpiryDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseLcmConfigExpiryDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_database: Optional[bool] = None,
                 delete_time_machine: Optional[bool] = None,
                 delete_vm: Optional[bool] = None,
                 effective_timestamp: Optional[str] = None,
                 expire_in_days: Optional[int] = None,
                 expiry_date_timezone: Optional[str] = None,
                 expiry_timestamp: Optional[str] = None,
                 remind_before_in_days: Optional[int] = None,
                 user_created: Optional[bool] = None):
        """
        :param bool delete_time_machine: - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        """
        if delete_database is not None:
            pulumi.set(__self__, "delete_database", delete_database)
        if delete_time_machine is not None:
            pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        if delete_vm is not None:
            pulumi.set(__self__, "delete_vm", delete_vm)
        if effective_timestamp is not None:
            pulumi.set(__self__, "effective_timestamp", effective_timestamp)
        if expire_in_days is not None:
            pulumi.set(__self__, "expire_in_days", expire_in_days)
        if expiry_date_timezone is not None:
            pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        if expiry_timestamp is not None:
            pulumi.set(__self__, "expiry_timestamp", expiry_timestamp)
        if remind_before_in_days is not None:
            pulumi.set(__self__, "remind_before_in_days", remind_before_in_days)
        if user_created is not None:
            pulumi.set(__self__, "user_created", user_created)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> Optional[bool]:
        return pulumi.get(self, "delete_database")

    @property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> Optional[bool]:
        """
        - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        """
        return pulumi.get(self, "delete_time_machine")

    @property
    @pulumi.getter(name="deleteVm")
    def delete_vm(self) -> Optional[bool]:
        return pulumi.get(self, "delete_vm")

    @property
    @pulumi.getter(name="effectiveTimestamp")
    def effective_timestamp(self) -> Optional[str]:
        return pulumi.get(self, "effective_timestamp")

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> Optional[int]:
        return pulumi.get(self, "expire_in_days")

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> Optional[str]:
        return pulumi.get(self, "expiry_date_timezone")

    @property
    @pulumi.getter(name="expiryTimestamp")
    def expiry_timestamp(self) -> Optional[str]:
        return pulumi.get(self, "expiry_timestamp")

    @property
    @pulumi.getter(name="remindBeforeInDays")
    def remind_before_in_days(self) -> Optional[int]:
        return pulumi.get(self, "remind_before_in_days")

    @property
    @pulumi.getter(name="userCreated")
    def user_created(self) -> Optional[bool]:
        return pulumi.get(self, "user_created")


@pulumi.output_type
class NdbRegisterDatabaseLcmConfigPostDeleteCommand(dict):
    def __init__(__self__, *,
                 command: Optional[str] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        return pulumi.get(self, "command")


@pulumi.output_type
class NdbRegisterDatabaseLcmConfigPreDeleteCommand(dict):
    def __init__(__self__, *,
                 command: Optional[str] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        return pulumi.get(self, "command")


@pulumi.output_type
class NdbRegisterDatabaseLcmConfigRefreshDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastRefreshDate":
            suggest = "last_refresh_date"
        elif key == "nextRefreshDate":
            suggest = "next_refresh_date"
        elif key == "refreshDateTimezone":
            suggest = "refresh_date_timezone"
        elif key == "refreshInDays":
            suggest = "refresh_in_days"
        elif key == "refreshInHours":
            suggest = "refresh_in_hours"
        elif key == "refreshInMonths":
            suggest = "refresh_in_months"
        elif key == "refreshTime":
            suggest = "refresh_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseLcmConfigRefreshDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseLcmConfigRefreshDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseLcmConfigRefreshDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_refresh_date: Optional[str] = None,
                 next_refresh_date: Optional[str] = None,
                 refresh_date_timezone: Optional[str] = None,
                 refresh_in_days: Optional[int] = None,
                 refresh_in_hours: Optional[int] = None,
                 refresh_in_months: Optional[int] = None,
                 refresh_time: Optional[str] = None):
        if last_refresh_date is not None:
            pulumi.set(__self__, "last_refresh_date", last_refresh_date)
        if next_refresh_date is not None:
            pulumi.set(__self__, "next_refresh_date", next_refresh_date)
        if refresh_date_timezone is not None:
            pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        if refresh_in_days is not None:
            pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        if refresh_in_hours is not None:
            pulumi.set(__self__, "refresh_in_hours", refresh_in_hours)
        if refresh_in_months is not None:
            pulumi.set(__self__, "refresh_in_months", refresh_in_months)
        if refresh_time is not None:
            pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="lastRefreshDate")
    def last_refresh_date(self) -> Optional[str]:
        return pulumi.get(self, "last_refresh_date")

    @property
    @pulumi.getter(name="nextRefreshDate")
    def next_refresh_date(self) -> Optional[str]:
        return pulumi.get(self, "next_refresh_date")

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> Optional[str]:
        return pulumi.get(self, "refresh_date_timezone")

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> Optional[int]:
        return pulumi.get(self, "refresh_in_days")

    @property
    @pulumi.getter(name="refreshInHours")
    def refresh_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "refresh_in_hours")

    @property
    @pulumi.getter(name="refreshInMonths")
    def refresh_in_months(self) -> Optional[int]:
        return pulumi.get(self, "refresh_in_months")

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> Optional[str]:
        return pulumi.get(self, "refresh_time")


@pulumi.output_type
class NdbRegisterDatabaseLinkedDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"
        elif key == "databaseStatus":
            suggest = "database_status"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "parentDatabaseId":
            suggest = "parent_database_id"
        elif key == "parentLinkedDatabaseId":
            suggest = "parent_linked_database_id"
        elif key == "snapshotId":
            suggest = "snapshot_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseLinkedDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseLinkedDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseLinkedDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: Optional[str] = None,
                 database_status: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 infos: Optional[Sequence['outputs.NdbRegisterDatabaseLinkedDatabaseInfo']] = None,
                 metric: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 parent_database_id: Optional[str] = None,
                 parent_linked_database_id: Optional[str] = None,
                 snapshot_id: Optional[str] = None,
                 status: Optional[str] = None,
                 timezone: Optional[str] = None):
        """
        :param str database_name: name of database
        :param str database_status: status of database
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description
        :param Sequence['NdbRegisterDatabaseLinkedDatabaseInfoArgs'] infos: info of instance
        :param Mapping[str, str] metric: Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        :param str name: Name of database instance
        :param str parent_database_id: parent database id
        :param str status: status of instance
        """
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_database_id is not None:
            pulumi.set(__self__, "parent_database_id", parent_database_id)
        if parent_linked_database_id is not None:
            pulumi.set(__self__, "parent_linked_database_id", parent_linked_database_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        """
        name of database
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[str]:
        """
        status of database
        """
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseLinkedDatabaseInfo']]:
        """
        info of instance
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def metric(self) -> Optional[Mapping[str, str]]:
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> Optional[str]:
        """
        parent database id
        """
        return pulumi.get(self, "parent_database_id")

    @property
    @pulumi.getter(name="parentLinkedDatabaseId")
    def parent_linked_database_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_linked_database_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        return pulumi.get(self, "timezone")


@pulumi.output_type
class NdbRegisterDatabaseLinkedDatabaseInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureInfo":
            suggest = "secure_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseLinkedDatabaseInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseLinkedDatabaseInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseLinkedDatabaseInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 info: Optional[Mapping[str, str]] = None,
                 secure_info: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] info: info of instance
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[Mapping[str, str]]:
        """
        info of instance
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class NdbRegisterDatabasePostgressInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbName":
            suggest = "db_name"
        elif key == "dbPassword":
            suggest = "db_password"
        elif key == "listenerPort":
            suggest = "listener_port"
        elif key == "postgresSoftwareHome":
            suggest = "postgres_software_home"
        elif key == "allowMultipleDatabases":
            suggest = "allow_multiple_databases"
        elif key == "backupPolicy":
            suggest = "backup_policy"
        elif key == "dbUser":
            suggest = "db_user"
        elif key == "softwareHome":
            suggest = "software_home"
        elif key == "switchLog":
            suggest = "switch_log"
        elif key == "vmIp":
            suggest = "vm_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabasePostgressInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabasePostgressInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabasePostgressInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_name: str,
                 db_password: str,
                 listener_port: str,
                 postgres_software_home: str,
                 allow_multiple_databases: Optional[bool] = None,
                 backup_policy: Optional[str] = None,
                 db_user: Optional[str] = None,
                 software_home: Optional[str] = None,
                 switch_log: Optional[bool] = None,
                 vm_ip: Optional[str] = None):
        """
        :param str db_name: name of the database server VM on which the instance you want to register is running.
        :param str db_password: database password
        :param str listener_port: listner port of database
        :param str postgres_software_home: path to the PostgreSQL home directory in which the PostgreSQL software is installed.
        :param bool allow_multiple_databases: allow multiple databases. Default is true
        :param str backup_policy: backup policy of database. Default is prefer_secondary.
        :param str db_user: username of the NDB drive user account that has sudo access.
        :param str software_home: path to the directory in which the PostgreSQL software is installed.
        :param bool switch_log: switch log of database. Default is true
        :param str vm_ip: VM IP of the database server VM on which the instance you want to register is running.
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "db_password", db_password)
        pulumi.set(__self__, "listener_port", listener_port)
        pulumi.set(__self__, "postgres_software_home", postgres_software_home)
        if allow_multiple_databases is not None:
            pulumi.set(__self__, "allow_multiple_databases", allow_multiple_databases)
        if backup_policy is not None:
            pulumi.set(__self__, "backup_policy", backup_policy)
        if db_user is not None:
            pulumi.set(__self__, "db_user", db_user)
        if software_home is not None:
            pulumi.set(__self__, "software_home", software_home)
        if switch_log is not None:
            pulumi.set(__self__, "switch_log", switch_log)
        if vm_ip is not None:
            pulumi.set(__self__, "vm_ip", vm_ip)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        """
        name of the database server VM on which the instance you want to register is running.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="dbPassword")
    def db_password(self) -> str:
        """
        database password
        """
        return pulumi.get(self, "db_password")

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> str:
        """
        listner port of database
        """
        return pulumi.get(self, "listener_port")

    @property
    @pulumi.getter(name="postgresSoftwareHome")
    def postgres_software_home(self) -> str:
        """
        path to the PostgreSQL home directory in which the PostgreSQL software is installed.
        """
        return pulumi.get(self, "postgres_software_home")

    @property
    @pulumi.getter(name="allowMultipleDatabases")
    def allow_multiple_databases(self) -> Optional[bool]:
        """
        allow multiple databases. Default is true
        """
        return pulumi.get(self, "allow_multiple_databases")

    @property
    @pulumi.getter(name="backupPolicy")
    def backup_policy(self) -> Optional[str]:
        """
        backup policy of database. Default is prefer_secondary.
        """
        return pulumi.get(self, "backup_policy")

    @property
    @pulumi.getter(name="dbUser")
    def db_user(self) -> Optional[str]:
        """
        username of the NDB drive user account that has sudo access.
        """
        return pulumi.get(self, "db_user")

    @property
    @pulumi.getter(name="softwareHome")
    def software_home(self) -> Optional[str]:
        """
        path to the directory in which the PostgreSQL software is installed.
        """
        return pulumi.get(self, "software_home")

    @property
    @pulumi.getter(name="switchLog")
    def switch_log(self) -> Optional[bool]:
        """
        switch log of database. Default is true
        """
        return pulumi.get(self, "switch_log")

    @property
    @pulumi.getter(name="vmIp")
    def vm_ip(self) -> Optional[str]:
        """
        VM IP of the database server VM on which the instance you want to register is running.
        """
        return pulumi.get(self, "vm_ip")


@pulumi.output_type
class NdbRegisterDatabaseProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of database instance
        :param str value: - (Required) value for argument
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbRegisterDatabaseTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachine(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "databaseId":
            suggest = "database_id"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "eaStatus":
            suggest = "ea_status"
        elif key == "scheduleId":
            suggest = "schedule_id"
        elif key == "slaId":
            suggest = "sla_id"
        elif key == "slaUpdateInProgress":
            suggest = "sla_update_in_progress"
        elif key == "slaUpdateMetadata":
            suggest = "sla_update_metadata"
        elif key == "sourceNxClusters":
            suggest = "source_nx_clusters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseTimeMachine. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseTimeMachine.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseTimeMachine.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: Optional[str] = None,
                 clone: Optional[bool] = None,
                 clones: Optional[str] = None,
                 clustered: Optional[bool] = None,
                 database: Optional[str] = None,
                 database_id: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 ea_status: Optional[str] = None,
                 id: Optional[str] = None,
                 metric: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineProperty']] = None,
                 schedule_id: Optional[str] = None,
                 schedules: Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineSchedule']] = None,
                 scope: Optional[str] = None,
                 sla_id: Optional[str] = None,
                 sla_update_in_progress: Optional[bool] = None,
                 sla_update_metadata: Optional[str] = None,
                 slas: Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineSla']] = None,
                 source_nx_clusters: Optional[Sequence[str]] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineTag']] = None,
                 type: Optional[str] = None):
        """
        :param bool clone: whether instance is cloned or not
        :param bool clustered: clustered or not. Default is false
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description
        :param str metric: Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        :param str name: Name of database instance
        :param Sequence['NdbRegisterDatabaseTimeMachinePropertyArgs'] properties: properties of database created
        :param Sequence['NdbRegisterDatabaseTimeMachineScheduleArgs'] schedules: - (Optional) schedule for snapshots
        :param str status: status of instance
        :param Sequence['NdbRegisterDatabaseTimeMachineTagArgs'] tags: tags
        :param str type: type of database
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if clone is not None:
            pulumi.set(__self__, "clone", clone)
        if clones is not None:
            pulumi.set(__self__, "clones", clones)
        if clustered is not None:
            pulumi.set(__self__, "clustered", clustered)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ea_status is not None:
            pulumi.set(__self__, "ea_status", ea_status)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)
        if sla_update_in_progress is not None:
            pulumi.set(__self__, "sla_update_in_progress", sla_update_in_progress)
        if sla_update_metadata is not None:
            pulumi.set(__self__, "sla_update_metadata", sla_update_metadata)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if source_nx_clusters is not None:
            pulumi.set(__self__, "source_nx_clusters", source_nx_clusters)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[str]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter
    def clone(self) -> Optional[bool]:
        """
        whether instance is cloned or not
        """
        return pulumi.get(self, "clone")

    @property
    @pulumi.getter
    def clones(self) -> Optional[str]:
        return pulumi.get(self, "clones")

    @property
    @pulumi.getter
    def clustered(self) -> Optional[bool]:
        """
        clustered or not. Default is false
        """
        return pulumi.get(self, "clustered")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eaStatus")
    def ea_status(self) -> Optional[str]:
        return pulumi.get(self, "ea_status")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineProperty']]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[str]:
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter
    def schedules(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineSchedule']]:
        """
        - (Optional) schedule for snapshots
        """
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[str]:
        return pulumi.get(self, "sla_id")

    @property
    @pulumi.getter(name="slaUpdateInProgress")
    def sla_update_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "sla_update_in_progress")

    @property
    @pulumi.getter(name="slaUpdateMetadata")
    def sla_update_metadata(self) -> Optional[str]:
        return pulumi.get(self, "sla_update_metadata")

    @property
    @pulumi.getter
    def slas(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineSla']]:
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter(name="sourceNxClusters")
    def source_nx_clusters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_nx_clusters")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineTag']]:
        """
        tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of database
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slaDetails":
            suggest = "sla_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseTimeMachineInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseTimeMachineInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseTimeMachineInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 schedule: 'outputs.NdbRegisterDatabaseTimeMachineInfoSchedule',
                 autotunelogdrive: Optional[bool] = None,
                 description: Optional[str] = None,
                 sla_details: Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineInfoSlaDetail']] = None,
                 slaid: Optional[str] = None,
                 tags: Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineInfoTag']] = None):
        """
        :param str name: - (Required) name of time machine
        :param 'NdbRegisterDatabaseTimeMachineInfoScheduleArgs' schedule: - (Optional) schedule for snapshots
        :param bool autotunelogdrive: - (Optional) enable auto tune log drive. Default: true
        :param str description: - (Optional) description of time machine
        :param Sequence['NdbRegisterDatabaseTimeMachineInfoSlaDetailArgs'] sla_details: -  (optional) SLA details for HA instance
        :param str slaid: - (Optional) SLA ID for single instance
        :param Sequence['NdbRegisterDatabaseTimeMachineInfoTagArgs'] tags: - (Optional) tags
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schedule", schedule)
        if autotunelogdrive is not None:
            pulumi.set(__self__, "autotunelogdrive", autotunelogdrive)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if sla_details is not None:
            pulumi.set(__self__, "sla_details", sla_details)
        if slaid is not None:
            pulumi.set(__self__, "slaid", slaid)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) name of time machine
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schedule(self) -> 'outputs.NdbRegisterDatabaseTimeMachineInfoSchedule':
        """
        - (Optional) schedule for snapshots
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def autotunelogdrive(self) -> Optional[bool]:
        """
        - (Optional) enable auto tune log drive. Default: true
        """
        return pulumi.get(self, "autotunelogdrive")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        - (Optional) description of time machine
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="slaDetails")
    def sla_details(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineInfoSlaDetail']]:
        """
        -  (optional) SLA details for HA instance
        """
        return pulumi.get(self, "sla_details")

    @property
    @pulumi.getter
    def slaid(self) -> Optional[str]:
        """
        - (Optional) SLA ID for single instance
        """
        return pulumi.get(self, "slaid")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineInfoTag']]:
        """
        - (Optional) tags
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineInfoSchedule(dict):
    def __init__(__self__, *,
                 continuousschedule: Optional['outputs.NdbRegisterDatabaseTimeMachineInfoScheduleContinuousschedule'] = None,
                 monthlyschedule: Optional['outputs.NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyschedule'] = None,
                 quartelyschedule: Optional['outputs.NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyschedule'] = None,
                 snapshottimeofday: Optional['outputs.NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofday'] = None,
                 weeklyschedule: Optional['outputs.NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyschedule'] = None,
                 yearlyschedule: Optional['outputs.NdbRegisterDatabaseTimeMachineInfoScheduleYearlyschedule'] = None):
        """
        :param 'NdbRegisterDatabaseTimeMachineInfoScheduleContinuousscheduleArgs' continuousschedule: - (Optional) snapshot freq and log config
        :param 'NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyscheduleArgs' monthlyschedule: - (Optional) monthly snapshot config
        :param 'NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyscheduleArgs' quartelyschedule: - (Optional) quaterly snapshot config
        :param 'NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofdayArgs' snapshottimeofday: - (Optional) daily snapshot config
        :param 'NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyscheduleArgs' weeklyschedule: - (Optional) weekly snapshot config
        :param 'NdbRegisterDatabaseTimeMachineInfoScheduleYearlyscheduleArgs' yearlyschedule: - (Optional) yearly snapshot config
        """
        if continuousschedule is not None:
            pulumi.set(__self__, "continuousschedule", continuousschedule)
        if monthlyschedule is not None:
            pulumi.set(__self__, "monthlyschedule", monthlyschedule)
        if quartelyschedule is not None:
            pulumi.set(__self__, "quartelyschedule", quartelyschedule)
        if snapshottimeofday is not None:
            pulumi.set(__self__, "snapshottimeofday", snapshottimeofday)
        if weeklyschedule is not None:
            pulumi.set(__self__, "weeklyschedule", weeklyschedule)
        if yearlyschedule is not None:
            pulumi.set(__self__, "yearlyschedule", yearlyschedule)

    @property
    @pulumi.getter
    def continuousschedule(self) -> Optional['outputs.NdbRegisterDatabaseTimeMachineInfoScheduleContinuousschedule']:
        """
        - (Optional) snapshot freq and log config
        """
        return pulumi.get(self, "continuousschedule")

    @property
    @pulumi.getter
    def monthlyschedule(self) -> Optional['outputs.NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyschedule']:
        """
        - (Optional) monthly snapshot config
        """
        return pulumi.get(self, "monthlyschedule")

    @property
    @pulumi.getter
    def quartelyschedule(self) -> Optional['outputs.NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyschedule']:
        """
        - (Optional) quaterly snapshot config
        """
        return pulumi.get(self, "quartelyschedule")

    @property
    @pulumi.getter
    def snapshottimeofday(self) -> Optional['outputs.NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofday']:
        """
        - (Optional) daily snapshot config
        """
        return pulumi.get(self, "snapshottimeofday")

    @property
    @pulumi.getter
    def weeklyschedule(self) -> Optional['outputs.NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyschedule']:
        """
        - (Optional) weekly snapshot config
        """
        return pulumi.get(self, "weeklyschedule")

    @property
    @pulumi.getter
    def yearlyschedule(self) -> Optional['outputs.NdbRegisterDatabaseTimeMachineInfoScheduleYearlyschedule']:
        """
        - (Optional) yearly snapshot config
        """
        return pulumi.get(self, "yearlyschedule")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineInfoScheduleContinuousschedule(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 logbackupinterval: int,
                 snapshotsperday: int):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "logbackupinterval", logbackupinterval)
        pulumi.set(__self__, "snapshotsperday", snapshotsperday)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def logbackupinterval(self) -> int:
        return pulumi.get(self, "logbackupinterval")

    @property
    @pulumi.getter
    def snapshotsperday(self) -> int:
        return pulumi.get(self, "snapshotsperday")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyschedule(dict):
    def __init__(__self__, *,
                 dayofmonth: int,
                 enabled: bool):
        pulumi.set(__self__, "dayofmonth", dayofmonth)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def dayofmonth(self) -> int:
        return pulumi.get(self, "dayofmonth")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyschedule(dict):
    def __init__(__self__, *,
                 dayofmonth: int,
                 enabled: bool,
                 startmonth: str):
        pulumi.set(__self__, "dayofmonth", dayofmonth)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "startmonth", startmonth)

    @property
    @pulumi.getter
    def dayofmonth(self) -> int:
        return pulumi.get(self, "dayofmonth")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def startmonth(self) -> str:
        return pulumi.get(self, "startmonth")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofday(dict):
    def __init__(__self__, *,
                 hours: int,
                 minutes: int,
                 seconds: int):
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)
        pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def hours(self) -> int:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def seconds(self) -> int:
        return pulumi.get(self, "seconds")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyschedule(dict):
    def __init__(__self__, *,
                 dayofweek: str,
                 enabled: bool):
        pulumi.set(__self__, "dayofweek", dayofweek)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def dayofweek(self) -> str:
        return pulumi.get(self, "dayofweek")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineInfoScheduleYearlyschedule(dict):
    def __init__(__self__, *,
                 dayofmonth: int,
                 enabled: bool,
                 month: str):
        pulumi.set(__self__, "dayofmonth", dayofmonth)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "month", month)

    @property
    @pulumi.getter
    def dayofmonth(self) -> int:
        return pulumi.get(self, "dayofmonth")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def month(self) -> str:
        return pulumi.get(self, "month")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineInfoSlaDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "primarySlas":
            suggest = "primary_slas"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseTimeMachineInfoSlaDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseTimeMachineInfoSlaDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseTimeMachineInfoSlaDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 primary_slas: Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySla']] = None):
        """
        :param Sequence['NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySlaArgs'] primary_slas: - (Required) primary sla details
               * `primary_sla.sla_id` :- (Required) sla id
               * `primary_sla.nx_cluster_ids` -: (Optioanl) cluster ids
        """
        if primary_slas is not None:
            pulumi.set(__self__, "primary_slas", primary_slas)

    @property
    @pulumi.getter(name="primarySlas")
    def primary_slas(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySla']]:
        """
        - (Required) primary sla details
        * `primary_sla.sla_id` :- (Required) sla id
        * `primary_sla.nx_cluster_ids` -: (Optioanl) cluster ids
        """
        return pulumi.get(self, "primary_slas")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySla(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slaId":
            suggest = "sla_id"
        elif key == "nxClusterIds":
            suggest = "nx_cluster_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySla. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySla.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySla.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sla_id: str,
                 nx_cluster_ids: Optional[Sequence[str]] = None):
        """
        :param str sla_id: description of SLA ID.
        """
        pulumi.set(__self__, "sla_id", sla_id)
        if nx_cluster_ids is not None:
            pulumi.set(__self__, "nx_cluster_ids", nx_cluster_ids)

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> str:
        """
        description of SLA ID.
        """
        return pulumi.get(self, "sla_id")

    @property
    @pulumi.getter(name="nxClusterIds")
    def nx_cluster_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nx_cluster_ids")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineInfoTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseTimeMachineInfoTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseTimeMachineInfoTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseTimeMachineInfoTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseTimeMachineProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseTimeMachineProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseTimeMachineProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str description: description
        :param str name: Name of database instance
        :param str value: - (Required) value for argument
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continuousSchedules":
            suggest = "continuous_schedules"
        elif key == "dailySchedules":
            suggest = "daily_schedules"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "globalPolicy":
            suggest = "global_policy"
        elif key == "monthlySchedules":
            suggest = "monthly_schedules"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "quartelySchedules":
            suggest = "quartely_schedules"
        elif key == "referenceCount":
            suggest = "reference_count"
        elif key == "snapshotTimeOfDays":
            suggest = "snapshot_time_of_days"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "systemPolicy":
            suggest = "system_policy"
        elif key == "timeZone":
            suggest = "time_zone"
        elif key == "uniqueName":
            suggest = "unique_name"
        elif key == "weeklySchedules":
            suggest = "weekly_schedules"
        elif key == "yearlySchedules":
            suggest = "yearly_schedules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseTimeMachineSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseTimeMachineSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseTimeMachineSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continuous_schedules: Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineScheduleContinuousSchedule']] = None,
                 daily_schedules: Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineScheduleDailySchedule']] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 global_policy: Optional[bool] = None,
                 id: Optional[str] = None,
                 monthly_schedules: Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineScheduleMonthlySchedule']] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 quartely_schedules: Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineScheduleQuartelySchedule']] = None,
                 reference_count: Optional[int] = None,
                 snapshot_time_of_days: Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDay']] = None,
                 start_time: Optional[str] = None,
                 system_policy: Optional[bool] = None,
                 time_zone: Optional[str] = None,
                 unique_name: Optional[str] = None,
                 weekly_schedules: Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineScheduleWeeklySchedule']] = None,
                 yearly_schedules: Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineScheduleYearlySchedule']] = None):
        """
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description
        :param str name: Name of database instance
        :param str time_zone: timezone on which instance is created xw
        """
        if continuous_schedules is not None:
            pulumi.set(__self__, "continuous_schedules", continuous_schedules)
        if daily_schedules is not None:
            pulumi.set(__self__, "daily_schedules", daily_schedules)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if global_policy is not None:
            pulumi.set(__self__, "global_policy", global_policy)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_schedules is not None:
            pulumi.set(__self__, "monthly_schedules", monthly_schedules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if quartely_schedules is not None:
            pulumi.set(__self__, "quartely_schedules", quartely_schedules)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if snapshot_time_of_days is not None:
            pulumi.set(__self__, "snapshot_time_of_days", snapshot_time_of_days)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if system_policy is not None:
            pulumi.set(__self__, "system_policy", system_policy)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_schedules is not None:
            pulumi.set(__self__, "weekly_schedules", weekly_schedules)
        if yearly_schedules is not None:
            pulumi.set(__self__, "yearly_schedules", yearly_schedules)

    @property
    @pulumi.getter(name="continuousSchedules")
    def continuous_schedules(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineScheduleContinuousSchedule']]:
        return pulumi.get(self, "continuous_schedules")

    @property
    @pulumi.getter(name="dailySchedules")
    def daily_schedules(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineScheduleDailySchedule']]:
        return pulumi.get(self, "daily_schedules")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="globalPolicy")
    def global_policy(self) -> Optional[bool]:
        return pulumi.get(self, "global_policy")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlySchedules")
    def monthly_schedules(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineScheduleMonthlySchedule']]:
        return pulumi.get(self, "monthly_schedules")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="quartelySchedules")
    def quartely_schedules(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineScheduleQuartelySchedule']]:
        return pulumi.get(self, "quartely_schedules")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[int]:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="snapshotTimeOfDays")
    def snapshot_time_of_days(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDay']]:
        return pulumi.get(self, "snapshot_time_of_days")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="systemPolicy")
    def system_policy(self) -> Optional[bool]:
        return pulumi.get(self, "system_policy")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        """
        timezone on which instance is created xw
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[str]:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklySchedules")
    def weekly_schedules(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineScheduleWeeklySchedule']]:
        return pulumi.get(self, "weekly_schedules")

    @property
    @pulumi.getter(name="yearlySchedules")
    def yearly_schedules(self) -> Optional[Sequence['outputs.NdbRegisterDatabaseTimeMachineScheduleYearlySchedule']]:
        return pulumi.get(self, "yearly_schedules")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineScheduleContinuousSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logBackupInterval":
            suggest = "log_backup_interval"
        elif key == "snapshotsPerDay":
            suggest = "snapshots_per_day"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseTimeMachineScheduleContinuousSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseTimeMachineScheduleContinuousSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseTimeMachineScheduleContinuousSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 log_backup_interval: Optional[int] = None,
                 snapshots_per_day: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_backup_interval is not None:
            pulumi.set(__self__, "log_backup_interval", log_backup_interval)
        if snapshots_per_day is not None:
            pulumi.set(__self__, "snapshots_per_day", snapshots_per_day)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logBackupInterval")
    def log_backup_interval(self) -> Optional[int]:
        return pulumi.get(self, "log_backup_interval")

    @property
    @pulumi.getter(name="snapshotsPerDay")
    def snapshots_per_day(self) -> Optional[int]:
        return pulumi.get(self, "snapshots_per_day")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineScheduleDailySchedule(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineScheduleMonthlySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfMonth":
            suggest = "day_of_month"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseTimeMachineScheduleMonthlySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseTimeMachineScheduleMonthlySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseTimeMachineScheduleMonthlySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_month: Optional[int] = None,
                 enabled: Optional[bool] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineScheduleQuartelySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfMonth":
            suggest = "day_of_month"
        elif key == "startMonth":
            suggest = "start_month"
        elif key == "startMonthValue":
            suggest = "start_month_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseTimeMachineScheduleQuartelySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseTimeMachineScheduleQuartelySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseTimeMachineScheduleQuartelySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_month: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 start_month: Optional[str] = None,
                 start_month_value: Optional[str] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if start_month is not None:
            pulumi.set(__self__, "start_month", start_month)
        if start_month_value is not None:
            pulumi.set(__self__, "start_month_value", start_month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="startMonth")
    def start_month(self) -> Optional[str]:
        return pulumi.get(self, "start_month")

    @property
    @pulumi.getter(name="startMonthValue")
    def start_month_value(self) -> Optional[str]:
        return pulumi.get(self, "start_month_value")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDay(dict):
    def __init__(__self__, *,
                 extra: Optional[bool] = None,
                 hours: Optional[int] = None,
                 minutes: Optional[int] = None,
                 seconds: Optional[int] = None):
        if extra is not None:
            pulumi.set(__self__, "extra", extra)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def extra(self) -> Optional[bool]:
        return pulumi.get(self, "extra")

    @property
    @pulumi.getter
    def hours(self) -> Optional[int]:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> Optional[int]:
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def seconds(self) -> Optional[int]:
        return pulumi.get(self, "seconds")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineScheduleWeeklySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfWeek":
            suggest = "day_of_week"
        elif key == "dayOfWeekValue":
            suggest = "day_of_week_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseTimeMachineScheduleWeeklySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseTimeMachineScheduleWeeklySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseTimeMachineScheduleWeeklySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_week: Optional[str] = None,
                 day_of_week_value: Optional[str] = None,
                 enabled: Optional[bool] = None):
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if day_of_week_value is not None:
            pulumi.set(__self__, "day_of_week_value", day_of_week_value)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="dayOfWeekValue")
    def day_of_week_value(self) -> Optional[str]:
        return pulumi.get(self, "day_of_week_value")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineScheduleYearlySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfMonth":
            suggest = "day_of_month"
        elif key == "monthValue":
            suggest = "month_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseTimeMachineScheduleYearlySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseTimeMachineScheduleYearlySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseTimeMachineScheduleYearlySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_month: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 month: Optional[str] = None,
                 month_value: Optional[str] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if month_value is not None:
            pulumi.set(__self__, "month_value", month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def month(self) -> Optional[str]:
        return pulumi.get(self, "month")

    @property
    @pulumi.getter(name="monthValue")
    def month_value(self) -> Optional[str]:
        return pulumi.get(self, "month_value")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineSla(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continuousRetention":
            suggest = "continuous_retention"
        elif key == "currentActiveFrequency":
            suggest = "current_active_frequency"
        elif key == "dailyRetention":
            suggest = "daily_retention"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "monthlyRetention":
            suggest = "monthly_retention"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "pitrEnabled":
            suggest = "pitr_enabled"
        elif key == "quarterlyRetention":
            suggest = "quarterly_retention"
        elif key == "referenceCount":
            suggest = "reference_count"
        elif key == "systemSla":
            suggest = "system_sla"
        elif key == "uniqueName":
            suggest = "unique_name"
        elif key == "weeklyRetention":
            suggest = "weekly_retention"
        elif key == "yearlyRetention":
            suggest = "yearly_retention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseTimeMachineSla. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseTimeMachineSla.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseTimeMachineSla.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continuous_retention: Optional[int] = None,
                 current_active_frequency: Optional[str] = None,
                 daily_retention: Optional[int] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 monthly_retention: Optional[int] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 pitr_enabled: Optional[bool] = None,
                 quarterly_retention: Optional[int] = None,
                 reference_count: Optional[int] = None,
                 system_sla: Optional[bool] = None,
                 unique_name: Optional[str] = None,
                 weekly_retention: Optional[int] = None,
                 yearly_retention: Optional[int] = None):
        """
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description
        :param str name: Name of database instance
        """
        if continuous_retention is not None:
            pulumi.set(__self__, "continuous_retention", continuous_retention)
        if current_active_frequency is not None:
            pulumi.set(__self__, "current_active_frequency", current_active_frequency)
        if daily_retention is not None:
            pulumi.set(__self__, "daily_retention", daily_retention)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_retention is not None:
            pulumi.set(__self__, "monthly_retention", monthly_retention)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if pitr_enabled is not None:
            pulumi.set(__self__, "pitr_enabled", pitr_enabled)
        if quarterly_retention is not None:
            pulumi.set(__self__, "quarterly_retention", quarterly_retention)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if system_sla is not None:
            pulumi.set(__self__, "system_sla", system_sla)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_retention is not None:
            pulumi.set(__self__, "weekly_retention", weekly_retention)
        if yearly_retention is not None:
            pulumi.set(__self__, "yearly_retention", yearly_retention)

    @property
    @pulumi.getter(name="continuousRetention")
    def continuous_retention(self) -> Optional[int]:
        return pulumi.get(self, "continuous_retention")

    @property
    @pulumi.getter(name="currentActiveFrequency")
    def current_active_frequency(self) -> Optional[str]:
        return pulumi.get(self, "current_active_frequency")

    @property
    @pulumi.getter(name="dailyRetention")
    def daily_retention(self) -> Optional[int]:
        return pulumi.get(self, "daily_retention")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlyRetention")
    def monthly_retention(self) -> Optional[int]:
        return pulumi.get(self, "monthly_retention")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="pitrEnabled")
    def pitr_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "pitr_enabled")

    @property
    @pulumi.getter(name="quarterlyRetention")
    def quarterly_retention(self) -> Optional[int]:
        return pulumi.get(self, "quarterly_retention")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[int]:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="systemSla")
    def system_sla(self) -> Optional[bool]:
        return pulumi.get(self, "system_sla")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[str]:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklyRetention")
    def weekly_retention(self) -> Optional[int]:
        return pulumi.get(self, "weekly_retention")

    @property
    @pulumi.getter(name="yearlyRetention")
    def yearly_retention(self) -> Optional[int]:
        return pulumi.get(self, "yearly_retention")


@pulumi.output_type
class NdbRegisterDatabaseTimeMachineTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDatabaseTimeMachineTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDatabaseTimeMachineTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDatabaseTimeMachineTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str value: - (Required) value for argument
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - (Required) value for argument
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbRegisterDbserverCredential(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str,
                 label: Optional[str] = None):
        """
        :param str password: password of the NDB drive user account. Conflicts with ssh_key.
        :param str username: username of the NDB drive user account that has sudo access
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        password of the NDB drive user account. Conflicts with ssh_key.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        username of the NDB drive user account that has sudo access
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")


@pulumi.output_type
class NdbRegisterDbserverPostgresDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "listenerPort":
            suggest = "listener_port"
        elif key == "postgresSoftwareHome":
            suggest = "postgres_software_home"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDbserverPostgresDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDbserverPostgresDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDbserverPostgresDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 listener_port: Optional[str] = None,
                 postgres_software_home: Optional[str] = None):
        """
        :param str listener_port: listener port of db server
        :param str postgres_software_home: path to the PostgreSQL home directory in which the PostgreSQL software is installed
        """
        if listener_port is not None:
            pulumi.set(__self__, "listener_port", listener_port)
        if postgres_software_home is not None:
            pulumi.set(__self__, "postgres_software_home", postgres_software_home)

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> Optional[str]:
        """
        listener port of db server
        """
        return pulumi.get(self, "listener_port")

    @property
    @pulumi.getter(name="postgresSoftwareHome")
    def postgres_software_home(self) -> Optional[str]:
        """
        path to the PostgreSQL home directory in which the PostgreSQL software is installed
        """
        return pulumi.get(self, "postgres_software_home")


@pulumi.output_type
class NdbRegisterDbserverProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of db server vm. Should be used in Update Method only.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of db server vm. Should be used in Update Method only.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbRegisterDbserverTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbRegisterDbserverTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbRegisterDbserverTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbRegisterDbserverTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbScaleDatabaseDatabaseNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "databaseId":
            suggest = "database_id"
        elif key == "databaseStatus":
            suggest = "database_status"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "dbserverId":
            suggest = "dbserver_id"
        elif key == "protectionDomainId":
            suggest = "protection_domain_id"
        elif key == "protectionDomains":
            suggest = "protection_domains"
        elif key == "softwareInstallationId":
            suggest = "software_installation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseDatabaseNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseDatabaseNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseDatabaseNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: Optional[Mapping[str, str]] = None,
                 database_id: Optional[str] = None,
                 database_status: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 dbserver: Optional[Mapping[str, str]] = None,
                 dbserver_id: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 infos: Optional[Sequence['outputs.NdbScaleDatabaseDatabaseNodeInfo']] = None,
                 name: Optional[str] = None,
                 primary: Optional[bool] = None,
                 properties: Optional[Sequence['outputs.NdbScaleDatabaseDatabaseNodeProperty']] = None,
                 protection_domain_id: Optional[str] = None,
                 protection_domains: Optional[Sequence['outputs.NdbScaleDatabaseDatabaseNodeProtectionDomain']] = None,
                 software_installation_id: Optional[str] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.NdbScaleDatabaseDatabaseNodeTag']] = None):
        """
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description of database instance
        :param Sequence['NdbScaleDatabaseDatabaseNodeInfoArgs'] infos: info of instance
        :param str name: Name of database instance
        :param Sequence['NdbScaleDatabaseDatabaseNodePropertyArgs'] properties: properties of database created
        :param str status: status of instance
        :param Sequence['NdbScaleDatabaseDatabaseNodeTagArgs'] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if dbserver is not None:
            pulumi.set(__self__, "dbserver", dbserver)
        if dbserver_id is not None:
            pulumi.set(__self__, "dbserver_id", dbserver_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if protection_domain_id is not None:
            pulumi.set(__self__, "protection_domain_id", protection_domain_id)
        if protection_domains is not None:
            pulumi.set(__self__, "protection_domains", protection_domains)
        if software_installation_id is not None:
            pulumi.set(__self__, "software_installation_id", software_installation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[str]:
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def dbserver(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "dbserver")

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> Optional[str]:
        return pulumi.get(self, "dbserver_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.NdbScaleDatabaseDatabaseNodeInfo']]:
        """
        info of instance
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbScaleDatabaseDatabaseNodeProperty']]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="protectionDomainId")
    def protection_domain_id(self) -> Optional[str]:
        return pulumi.get(self, "protection_domain_id")

    @property
    @pulumi.getter(name="protectionDomains")
    def protection_domains(self) -> Optional[Sequence['outputs.NdbScaleDatabaseDatabaseNodeProtectionDomain']]:
        return pulumi.get(self, "protection_domains")

    @property
    @pulumi.getter(name="softwareInstallationId")
    def software_installation_id(self) -> Optional[str]:
        return pulumi.get(self, "software_installation_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.NdbScaleDatabaseDatabaseNodeTag']]:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class NdbScaleDatabaseDatabaseNodeInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureInfo":
            suggest = "secure_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseDatabaseNodeInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseDatabaseNodeInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseDatabaseNodeInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 info: Optional[Mapping[str, str]] = None,
                 secure_info: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] info: info of instance
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[Mapping[str, str]]:
        """
        info of instance
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class NdbScaleDatabaseDatabaseNodeProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseDatabaseNodeProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseDatabaseNodeProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseDatabaseNodeProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str description: description of database instance
        :param str name: Name of database instance
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbScaleDatabaseDatabaseNodeProtectionDomain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assocEntities":
            suggest = "assoc_entities"
        elif key == "cloudId":
            suggest = "cloud_id"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "eraCreated":
            suggest = "era_created"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "primaryHost":
            suggest = "primary_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseDatabaseNodeProtectionDomain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseDatabaseNodeProtectionDomain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseDatabaseNodeProtectionDomain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assoc_entities: Optional[Sequence[str]] = None,
                 cloud_id: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 era_created: Optional[bool] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 primary_host: Optional[str] = None,
                 properties: Optional[Sequence['outputs.NdbScaleDatabaseDatabaseNodeProtectionDomainProperty']] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description of database instance
        :param str name: Name of database instance
        :param Sequence['NdbScaleDatabaseDatabaseNodeProtectionDomainPropertyArgs'] properties: properties of database created
        :param str status: status of instance
        :param str type: type of database
        """
        if assoc_entities is not None:
            pulumi.set(__self__, "assoc_entities", assoc_entities)
        if cloud_id is not None:
            pulumi.set(__self__, "cloud_id", cloud_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if era_created is not None:
            pulumi.set(__self__, "era_created", era_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if primary_host is not None:
            pulumi.set(__self__, "primary_host", primary_host)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assocEntities")
    def assoc_entities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "assoc_entities")

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> Optional[str]:
        return pulumi.get(self, "cloud_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eraCreated")
    def era_created(self) -> Optional[bool]:
        return pulumi.get(self, "era_created")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="primaryHost")
    def primary_host(self) -> Optional[str]:
        return pulumi.get(self, "primary_host")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbScaleDatabaseDatabaseNodeProtectionDomainProperty']]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of database
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NdbScaleDatabaseDatabaseNodeProtectionDomainProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseDatabaseNodeProtectionDomainProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseDatabaseNodeProtectionDomainProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseDatabaseNodeProtectionDomainProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str description: description of database instance
        :param str name: Name of database instance
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbScaleDatabaseDatabaseNodeTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseDatabaseNodeTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseDatabaseNodeTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseDatabaseNodeTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbScaleDatabaseInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bpgConfigs":
            suggest = "bpg_configs"
        elif key == "secureInfo":
            suggest = "secure_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bpg_configs: Optional[Sequence['outputs.NdbScaleDatabaseInfoBpgConfig']] = None,
                 secure_info: Optional[Mapping[str, str]] = None):
        if bpg_configs is not None:
            pulumi.set(__self__, "bpg_configs", bpg_configs)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="bpgConfigs")
    def bpg_configs(self) -> Optional[Sequence['outputs.NdbScaleDatabaseInfoBpgConfig']]:
        return pulumi.get(self, "bpg_configs")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class NdbScaleDatabaseInfoBpgConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bpgDbParams":
            suggest = "bpg_db_params"
        elif key == "vmProperties":
            suggest = "vm_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseInfoBpgConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseInfoBpgConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseInfoBpgConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bpg_db_params: Optional[Sequence['outputs.NdbScaleDatabaseInfoBpgConfigBpgDbParam']] = None,
                 storages: Optional[Sequence['outputs.NdbScaleDatabaseInfoBpgConfigStorage']] = None,
                 vm_properties: Optional[Sequence['outputs.NdbScaleDatabaseInfoBpgConfigVmProperty']] = None):
        if bpg_db_params is not None:
            pulumi.set(__self__, "bpg_db_params", bpg_db_params)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if vm_properties is not None:
            pulumi.set(__self__, "vm_properties", vm_properties)

    @property
    @pulumi.getter(name="bpgDbParams")
    def bpg_db_params(self) -> Optional[Sequence['outputs.NdbScaleDatabaseInfoBpgConfigBpgDbParam']]:
        return pulumi.get(self, "bpg_db_params")

    @property
    @pulumi.getter
    def storages(self) -> Optional[Sequence['outputs.NdbScaleDatabaseInfoBpgConfigStorage']]:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="vmProperties")
    def vm_properties(self) -> Optional[Sequence['outputs.NdbScaleDatabaseInfoBpgConfigVmProperty']]:
        return pulumi.get(self, "vm_properties")


@pulumi.output_type
class NdbScaleDatabaseInfoBpgConfigBpgDbParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "effectiveCacheSize":
            suggest = "effective_cache_size"
        elif key == "maintenanceWorkMem":
            suggest = "maintenance_work_mem"
        elif key == "maxParallelWorkersPerGather":
            suggest = "max_parallel_workers_per_gather"
        elif key == "maxWorkerProcesses":
            suggest = "max_worker_processes"
        elif key == "sharedBuffers":
            suggest = "shared_buffers"
        elif key == "workMem":
            suggest = "work_mem"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseInfoBpgConfigBpgDbParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseInfoBpgConfigBpgDbParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseInfoBpgConfigBpgDbParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 effective_cache_size: Optional[str] = None,
                 maintenance_work_mem: Optional[str] = None,
                 max_parallel_workers_per_gather: Optional[str] = None,
                 max_worker_processes: Optional[str] = None,
                 shared_buffers: Optional[str] = None,
                 work_mem: Optional[str] = None):
        if effective_cache_size is not None:
            pulumi.set(__self__, "effective_cache_size", effective_cache_size)
        if maintenance_work_mem is not None:
            pulumi.set(__self__, "maintenance_work_mem", maintenance_work_mem)
        if max_parallel_workers_per_gather is not None:
            pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        if max_worker_processes is not None:
            pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        if shared_buffers is not None:
            pulumi.set(__self__, "shared_buffers", shared_buffers)
        if work_mem is not None:
            pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="effectiveCacheSize")
    def effective_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "effective_cache_size")

    @property
    @pulumi.getter(name="maintenanceWorkMem")
    def maintenance_work_mem(self) -> Optional[str]:
        return pulumi.get(self, "maintenance_work_mem")

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> Optional[str]:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> Optional[str]:
        return pulumi.get(self, "max_worker_processes")

    @property
    @pulumi.getter(name="sharedBuffers")
    def shared_buffers(self) -> Optional[str]:
        return pulumi.get(self, "shared_buffers")

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> Optional[str]:
        return pulumi.get(self, "work_mem")


@pulumi.output_type
class NdbScaleDatabaseInfoBpgConfigStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveStorages":
            suggest = "archive_storages"
        elif key == "dataDisks":
            suggest = "data_disks"
        elif key == "logDisks":
            suggest = "log_disks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseInfoBpgConfigStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseInfoBpgConfigStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseInfoBpgConfigStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_storages: Optional[Sequence['outputs.NdbScaleDatabaseInfoBpgConfigStorageArchiveStorage']] = None,
                 data_disks: Optional[Sequence['outputs.NdbScaleDatabaseInfoBpgConfigStorageDataDisk']] = None,
                 log_disks: Optional[Sequence['outputs.NdbScaleDatabaseInfoBpgConfigStorageLogDisk']] = None):
        if archive_storages is not None:
            pulumi.set(__self__, "archive_storages", archive_storages)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if log_disks is not None:
            pulumi.set(__self__, "log_disks", log_disks)

    @property
    @pulumi.getter(name="archiveStorages")
    def archive_storages(self) -> Optional[Sequence['outputs.NdbScaleDatabaseInfoBpgConfigStorageArchiveStorage']]:
        return pulumi.get(self, "archive_storages")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.NdbScaleDatabaseInfoBpgConfigStorageDataDisk']]:
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="logDisks")
    def log_disks(self) -> Optional[Sequence['outputs.NdbScaleDatabaseInfoBpgConfigStorageLogDisk']]:
        return pulumi.get(self, "log_disks")


@pulumi.output_type
class NdbScaleDatabaseInfoBpgConfigStorageArchiveStorage(dict):
    def __init__(__self__, *,
                 size: Optional[float] = None):
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> Optional[float]:
        return pulumi.get(self, "size")


@pulumi.output_type
class NdbScaleDatabaseInfoBpgConfigStorageDataDisk(dict):
    def __init__(__self__, *,
                 count: Optional[float] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> Optional[float]:
        return pulumi.get(self, "count")


@pulumi.output_type
class NdbScaleDatabaseInfoBpgConfigStorageLogDisk(dict):
    def __init__(__self__, *,
                 count: Optional[float] = None,
                 size: Optional[float] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> Optional[float]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def size(self) -> Optional[float]:
        return pulumi.get(self, "size")


@pulumi.output_type
class NdbScaleDatabaseInfoBpgConfigVmProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dirtyBackgroundRatio":
            suggest = "dirty_background_ratio"
        elif key == "dirtyExpireCentisecs":
            suggest = "dirty_expire_centisecs"
        elif key == "dirtyRatio":
            suggest = "dirty_ratio"
        elif key == "dirtyWritebackCentisecs":
            suggest = "dirty_writeback_centisecs"
        elif key == "nrHugepages":
            suggest = "nr_hugepages"
        elif key == "overcommitMemory":
            suggest = "overcommit_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseInfoBpgConfigVmProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseInfoBpgConfigVmProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseInfoBpgConfigVmProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dirty_background_ratio: Optional[float] = None,
                 dirty_expire_centisecs: Optional[float] = None,
                 dirty_ratio: Optional[float] = None,
                 dirty_writeback_centisecs: Optional[float] = None,
                 nr_hugepages: Optional[float] = None,
                 overcommit_memory: Optional[float] = None,
                 swappiness: Optional[float] = None):
        if dirty_background_ratio is not None:
            pulumi.set(__self__, "dirty_background_ratio", dirty_background_ratio)
        if dirty_expire_centisecs is not None:
            pulumi.set(__self__, "dirty_expire_centisecs", dirty_expire_centisecs)
        if dirty_ratio is not None:
            pulumi.set(__self__, "dirty_ratio", dirty_ratio)
        if dirty_writeback_centisecs is not None:
            pulumi.set(__self__, "dirty_writeback_centisecs", dirty_writeback_centisecs)
        if nr_hugepages is not None:
            pulumi.set(__self__, "nr_hugepages", nr_hugepages)
        if overcommit_memory is not None:
            pulumi.set(__self__, "overcommit_memory", overcommit_memory)
        if swappiness is not None:
            pulumi.set(__self__, "swappiness", swappiness)

    @property
    @pulumi.getter(name="dirtyBackgroundRatio")
    def dirty_background_ratio(self) -> Optional[float]:
        return pulumi.get(self, "dirty_background_ratio")

    @property
    @pulumi.getter(name="dirtyExpireCentisecs")
    def dirty_expire_centisecs(self) -> Optional[float]:
        return pulumi.get(self, "dirty_expire_centisecs")

    @property
    @pulumi.getter(name="dirtyRatio")
    def dirty_ratio(self) -> Optional[float]:
        return pulumi.get(self, "dirty_ratio")

    @property
    @pulumi.getter(name="dirtyWritebackCentisecs")
    def dirty_writeback_centisecs(self) -> Optional[float]:
        return pulumi.get(self, "dirty_writeback_centisecs")

    @property
    @pulumi.getter(name="nrHugepages")
    def nr_hugepages(self) -> Optional[float]:
        return pulumi.get(self, "nr_hugepages")

    @property
    @pulumi.getter(name="overcommitMemory")
    def overcommit_memory(self) -> Optional[float]:
        return pulumi.get(self, "overcommit_memory")

    @property
    @pulumi.getter
    def swappiness(self) -> Optional[float]:
        return pulumi.get(self, "swappiness")


@pulumi.output_type
class NdbScaleDatabaseLcmConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expiryDetails":
            suggest = "expiry_details"
        elif key == "postDeleteCommands":
            suggest = "post_delete_commands"
        elif key == "preDeleteCommands":
            suggest = "pre_delete_commands"
        elif key == "refreshDetails":
            suggest = "refresh_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseLcmConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseLcmConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseLcmConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expiry_details: Optional[Sequence['outputs.NdbScaleDatabaseLcmConfigExpiryDetail']] = None,
                 post_delete_commands: Optional[Sequence['outputs.NdbScaleDatabaseLcmConfigPostDeleteCommand']] = None,
                 pre_delete_commands: Optional[Sequence['outputs.NdbScaleDatabaseLcmConfigPreDeleteCommand']] = None,
                 refresh_details: Optional[Sequence['outputs.NdbScaleDatabaseLcmConfigRefreshDetail']] = None):
        if expiry_details is not None:
            pulumi.set(__self__, "expiry_details", expiry_details)
        if post_delete_commands is not None:
            pulumi.set(__self__, "post_delete_commands", post_delete_commands)
        if pre_delete_commands is not None:
            pulumi.set(__self__, "pre_delete_commands", pre_delete_commands)
        if refresh_details is not None:
            pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Optional[Sequence['outputs.NdbScaleDatabaseLcmConfigExpiryDetail']]:
        return pulumi.get(self, "expiry_details")

    @property
    @pulumi.getter(name="postDeleteCommands")
    def post_delete_commands(self) -> Optional[Sequence['outputs.NdbScaleDatabaseLcmConfigPostDeleteCommand']]:
        return pulumi.get(self, "post_delete_commands")

    @property
    @pulumi.getter(name="preDeleteCommands")
    def pre_delete_commands(self) -> Optional[Sequence['outputs.NdbScaleDatabaseLcmConfigPreDeleteCommand']]:
        return pulumi.get(self, "pre_delete_commands")

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Optional[Sequence['outputs.NdbScaleDatabaseLcmConfigRefreshDetail']]:
        return pulumi.get(self, "refresh_details")


@pulumi.output_type
class NdbScaleDatabaseLcmConfigExpiryDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteDatabase":
            suggest = "delete_database"
        elif key == "deleteTimeMachine":
            suggest = "delete_time_machine"
        elif key == "deleteVm":
            suggest = "delete_vm"
        elif key == "effectiveTimestamp":
            suggest = "effective_timestamp"
        elif key == "expireInDays":
            suggest = "expire_in_days"
        elif key == "expiryDateTimezone":
            suggest = "expiry_date_timezone"
        elif key == "expiryTimestamp":
            suggest = "expiry_timestamp"
        elif key == "remindBeforeInDays":
            suggest = "remind_before_in_days"
        elif key == "userCreated":
            suggest = "user_created"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseLcmConfigExpiryDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseLcmConfigExpiryDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseLcmConfigExpiryDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_database: Optional[bool] = None,
                 delete_time_machine: Optional[bool] = None,
                 delete_vm: Optional[bool] = None,
                 effective_timestamp: Optional[str] = None,
                 expire_in_days: Optional[int] = None,
                 expiry_date_timezone: Optional[str] = None,
                 expiry_timestamp: Optional[str] = None,
                 remind_before_in_days: Optional[int] = None,
                 user_created: Optional[bool] = None):
        if delete_database is not None:
            pulumi.set(__self__, "delete_database", delete_database)
        if delete_time_machine is not None:
            pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        if delete_vm is not None:
            pulumi.set(__self__, "delete_vm", delete_vm)
        if effective_timestamp is not None:
            pulumi.set(__self__, "effective_timestamp", effective_timestamp)
        if expire_in_days is not None:
            pulumi.set(__self__, "expire_in_days", expire_in_days)
        if expiry_date_timezone is not None:
            pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        if expiry_timestamp is not None:
            pulumi.set(__self__, "expiry_timestamp", expiry_timestamp)
        if remind_before_in_days is not None:
            pulumi.set(__self__, "remind_before_in_days", remind_before_in_days)
        if user_created is not None:
            pulumi.set(__self__, "user_created", user_created)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> Optional[bool]:
        return pulumi.get(self, "delete_database")

    @property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> Optional[bool]:
        return pulumi.get(self, "delete_time_machine")

    @property
    @pulumi.getter(name="deleteVm")
    def delete_vm(self) -> Optional[bool]:
        return pulumi.get(self, "delete_vm")

    @property
    @pulumi.getter(name="effectiveTimestamp")
    def effective_timestamp(self) -> Optional[str]:
        return pulumi.get(self, "effective_timestamp")

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> Optional[int]:
        return pulumi.get(self, "expire_in_days")

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> Optional[str]:
        return pulumi.get(self, "expiry_date_timezone")

    @property
    @pulumi.getter(name="expiryTimestamp")
    def expiry_timestamp(self) -> Optional[str]:
        return pulumi.get(self, "expiry_timestamp")

    @property
    @pulumi.getter(name="remindBeforeInDays")
    def remind_before_in_days(self) -> Optional[int]:
        return pulumi.get(self, "remind_before_in_days")

    @property
    @pulumi.getter(name="userCreated")
    def user_created(self) -> Optional[bool]:
        return pulumi.get(self, "user_created")


@pulumi.output_type
class NdbScaleDatabaseLcmConfigPostDeleteCommand(dict):
    def __init__(__self__, *,
                 command: Optional[str] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        return pulumi.get(self, "command")


@pulumi.output_type
class NdbScaleDatabaseLcmConfigPreDeleteCommand(dict):
    def __init__(__self__, *,
                 command: Optional[str] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        return pulumi.get(self, "command")


@pulumi.output_type
class NdbScaleDatabaseLcmConfigRefreshDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastRefreshDate":
            suggest = "last_refresh_date"
        elif key == "nextRefreshDate":
            suggest = "next_refresh_date"
        elif key == "refreshDateTimezone":
            suggest = "refresh_date_timezone"
        elif key == "refreshInDays":
            suggest = "refresh_in_days"
        elif key == "refreshInHours":
            suggest = "refresh_in_hours"
        elif key == "refreshInMonths":
            suggest = "refresh_in_months"
        elif key == "refreshTime":
            suggest = "refresh_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseLcmConfigRefreshDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseLcmConfigRefreshDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseLcmConfigRefreshDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_refresh_date: Optional[str] = None,
                 next_refresh_date: Optional[str] = None,
                 refresh_date_timezone: Optional[str] = None,
                 refresh_in_days: Optional[int] = None,
                 refresh_in_hours: Optional[int] = None,
                 refresh_in_months: Optional[int] = None,
                 refresh_time: Optional[str] = None):
        if last_refresh_date is not None:
            pulumi.set(__self__, "last_refresh_date", last_refresh_date)
        if next_refresh_date is not None:
            pulumi.set(__self__, "next_refresh_date", next_refresh_date)
        if refresh_date_timezone is not None:
            pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        if refresh_in_days is not None:
            pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        if refresh_in_hours is not None:
            pulumi.set(__self__, "refresh_in_hours", refresh_in_hours)
        if refresh_in_months is not None:
            pulumi.set(__self__, "refresh_in_months", refresh_in_months)
        if refresh_time is not None:
            pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="lastRefreshDate")
    def last_refresh_date(self) -> Optional[str]:
        return pulumi.get(self, "last_refresh_date")

    @property
    @pulumi.getter(name="nextRefreshDate")
    def next_refresh_date(self) -> Optional[str]:
        return pulumi.get(self, "next_refresh_date")

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> Optional[str]:
        return pulumi.get(self, "refresh_date_timezone")

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> Optional[int]:
        return pulumi.get(self, "refresh_in_days")

    @property
    @pulumi.getter(name="refreshInHours")
    def refresh_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "refresh_in_hours")

    @property
    @pulumi.getter(name="refreshInMonths")
    def refresh_in_months(self) -> Optional[int]:
        return pulumi.get(self, "refresh_in_months")

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> Optional[str]:
        return pulumi.get(self, "refresh_time")


@pulumi.output_type
class NdbScaleDatabaseLinkedDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"
        elif key == "databaseStatus":
            suggest = "database_status"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "parentDatabaseId":
            suggest = "parent_database_id"
        elif key == "parentLinkedDatabaseId":
            suggest = "parent_linked_database_id"
        elif key == "snapshotId":
            suggest = "snapshot_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseLinkedDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseLinkedDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseLinkedDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: Optional[str] = None,
                 database_status: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 infos: Optional[Sequence['outputs.NdbScaleDatabaseLinkedDatabaseInfo']] = None,
                 metric: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 parent_database_id: Optional[str] = None,
                 parent_linked_database_id: Optional[str] = None,
                 snapshot_id: Optional[str] = None,
                 status: Optional[str] = None,
                 timezone: Optional[str] = None):
        """
        :param str database_name: name of database
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description of database instance
        :param Sequence['NdbScaleDatabaseLinkedDatabaseInfoArgs'] infos: info of instance
        :param Mapping[str, str] metric: Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        :param str name: Name of database instance
        :param str parent_database_id: parent database id
        :param str status: status of instance
        """
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_database_id is not None:
            pulumi.set(__self__, "parent_database_id", parent_database_id)
        if parent_linked_database_id is not None:
            pulumi.set(__self__, "parent_linked_database_id", parent_linked_database_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        """
        name of database
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[str]:
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.NdbScaleDatabaseLinkedDatabaseInfo']]:
        """
        info of instance
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def metric(self) -> Optional[Mapping[str, str]]:
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> Optional[str]:
        """
        parent database id
        """
        return pulumi.get(self, "parent_database_id")

    @property
    @pulumi.getter(name="parentLinkedDatabaseId")
    def parent_linked_database_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_linked_database_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        return pulumi.get(self, "timezone")


@pulumi.output_type
class NdbScaleDatabaseLinkedDatabaseInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureInfo":
            suggest = "secure_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseLinkedDatabaseInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseLinkedDatabaseInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseLinkedDatabaseInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 info: Optional[Mapping[str, str]] = None,
                 secure_info: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] info: info of instance
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if secure_info is not None:
            pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Optional[Mapping[str, str]]:
        """
        info of instance
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class NdbScaleDatabaseProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of database instance
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbScaleDatabaseTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbScaleDatabaseTimeMachine(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "databaseId":
            suggest = "database_id"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "eaStatus":
            suggest = "ea_status"
        elif key == "scheduleId":
            suggest = "schedule_id"
        elif key == "slaId":
            suggest = "sla_id"
        elif key == "slaUpdateInProgress":
            suggest = "sla_update_in_progress"
        elif key == "slaUpdateMetadata":
            suggest = "sla_update_metadata"
        elif key == "sourceNxClusters":
            suggest = "source_nx_clusters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseTimeMachine. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseTimeMachine.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseTimeMachine.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: Optional[str] = None,
                 clone: Optional[bool] = None,
                 clones: Optional[str] = None,
                 clustered: Optional[bool] = None,
                 database: Optional[str] = None,
                 database_id: Optional[str] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 ea_status: Optional[str] = None,
                 id: Optional[str] = None,
                 metric: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineProperty']] = None,
                 schedule_id: Optional[str] = None,
                 schedules: Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineSchedule']] = None,
                 scope: Optional[str] = None,
                 sla_id: Optional[str] = None,
                 sla_update_in_progress: Optional[bool] = None,
                 sla_update_metadata: Optional[str] = None,
                 slas: Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineSla']] = None,
                 source_nx_clusters: Optional[Sequence[str]] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineTag']] = None,
                 type: Optional[str] = None):
        """
        :param bool clone: whether instance is cloned or not
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description of database instance
        :param str metric: Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        :param str name: Name of database instance
        :param Sequence['NdbScaleDatabaseTimeMachinePropertyArgs'] properties: properties of database created
        :param str status: status of instance
        :param Sequence['NdbScaleDatabaseTimeMachineTagArgs'] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        :param str type: type of database
        """
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if clone is not None:
            pulumi.set(__self__, "clone", clone)
        if clones is not None:
            pulumi.set(__self__, "clones", clones)
        if clustered is not None:
            pulumi.set(__self__, "clustered", clustered)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ea_status is not None:
            pulumi.set(__self__, "ea_status", ea_status)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)
        if sla_update_in_progress is not None:
            pulumi.set(__self__, "sla_update_in_progress", sla_update_in_progress)
        if sla_update_metadata is not None:
            pulumi.set(__self__, "sla_update_metadata", sla_update_metadata)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if source_nx_clusters is not None:
            pulumi.set(__self__, "source_nx_clusters", source_nx_clusters)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[str]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter
    def clone(self) -> Optional[bool]:
        """
        whether instance is cloned or not
        """
        return pulumi.get(self, "clone")

    @property
    @pulumi.getter
    def clones(self) -> Optional[str]:
        return pulumi.get(self, "clones")

    @property
    @pulumi.getter
    def clustered(self) -> Optional[bool]:
        return pulumi.get(self, "clustered")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eaStatus")
    def ea_status(self) -> Optional[str]:
        return pulumi.get(self, "ea_status")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        """
        Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineProperty']]:
        """
        properties of database created
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[str]:
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter
    def schedules(self) -> Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineSchedule']]:
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[str]:
        return pulumi.get(self, "sla_id")

    @property
    @pulumi.getter(name="slaUpdateInProgress")
    def sla_update_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "sla_update_in_progress")

    @property
    @pulumi.getter(name="slaUpdateMetadata")
    def sla_update_metadata(self) -> Optional[str]:
        return pulumi.get(self, "sla_update_metadata")

    @property
    @pulumi.getter
    def slas(self) -> Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineSla']]:
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter(name="sourceNxClusters")
    def source_nx_clusters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_nx_clusters")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineTag']]:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of database
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NdbScaleDatabaseTimeMachineProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseTimeMachineProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseTimeMachineProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseTimeMachineProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str description: description of database instance
        :param str name: Name of database instance
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbScaleDatabaseTimeMachineSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continuousSchedules":
            suggest = "continuous_schedules"
        elif key == "dailySchedules":
            suggest = "daily_schedules"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "globalPolicy":
            suggest = "global_policy"
        elif key == "monthlySchedules":
            suggest = "monthly_schedules"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "quartelySchedules":
            suggest = "quartely_schedules"
        elif key == "referenceCount":
            suggest = "reference_count"
        elif key == "snapshotTimeOfDays":
            suggest = "snapshot_time_of_days"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "systemPolicy":
            suggest = "system_policy"
        elif key == "timeZone":
            suggest = "time_zone"
        elif key == "uniqueName":
            suggest = "unique_name"
        elif key == "weeklySchedules":
            suggest = "weekly_schedules"
        elif key == "yearlySchedules":
            suggest = "yearly_schedules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseTimeMachineSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseTimeMachineSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseTimeMachineSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continuous_schedules: Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineScheduleContinuousSchedule']] = None,
                 daily_schedules: Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineScheduleDailySchedule']] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 global_policy: Optional[bool] = None,
                 id: Optional[str] = None,
                 monthly_schedules: Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineScheduleMonthlySchedule']] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 quartely_schedules: Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineScheduleQuartelySchedule']] = None,
                 reference_count: Optional[int] = None,
                 snapshot_time_of_days: Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDay']] = None,
                 start_time: Optional[str] = None,
                 system_policy: Optional[bool] = None,
                 time_zone: Optional[str] = None,
                 unique_name: Optional[str] = None,
                 weekly_schedules: Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineScheduleWeeklySchedule']] = None,
                 yearly_schedules: Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineScheduleYearlySchedule']] = None):
        """
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description of database instance
        :param str name: Name of database instance
        :param str time_zone: timezone on which instance is created xw
        """
        if continuous_schedules is not None:
            pulumi.set(__self__, "continuous_schedules", continuous_schedules)
        if daily_schedules is not None:
            pulumi.set(__self__, "daily_schedules", daily_schedules)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if global_policy is not None:
            pulumi.set(__self__, "global_policy", global_policy)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_schedules is not None:
            pulumi.set(__self__, "monthly_schedules", monthly_schedules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if quartely_schedules is not None:
            pulumi.set(__self__, "quartely_schedules", quartely_schedules)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if snapshot_time_of_days is not None:
            pulumi.set(__self__, "snapshot_time_of_days", snapshot_time_of_days)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if system_policy is not None:
            pulumi.set(__self__, "system_policy", system_policy)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_schedules is not None:
            pulumi.set(__self__, "weekly_schedules", weekly_schedules)
        if yearly_schedules is not None:
            pulumi.set(__self__, "yearly_schedules", yearly_schedules)

    @property
    @pulumi.getter(name="continuousSchedules")
    def continuous_schedules(self) -> Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineScheduleContinuousSchedule']]:
        return pulumi.get(self, "continuous_schedules")

    @property
    @pulumi.getter(name="dailySchedules")
    def daily_schedules(self) -> Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineScheduleDailySchedule']]:
        return pulumi.get(self, "daily_schedules")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="globalPolicy")
    def global_policy(self) -> Optional[bool]:
        return pulumi.get(self, "global_policy")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlySchedules")
    def monthly_schedules(self) -> Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineScheduleMonthlySchedule']]:
        return pulumi.get(self, "monthly_schedules")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="quartelySchedules")
    def quartely_schedules(self) -> Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineScheduleQuartelySchedule']]:
        return pulumi.get(self, "quartely_schedules")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[int]:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="snapshotTimeOfDays")
    def snapshot_time_of_days(self) -> Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDay']]:
        return pulumi.get(self, "snapshot_time_of_days")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="systemPolicy")
    def system_policy(self) -> Optional[bool]:
        return pulumi.get(self, "system_policy")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        """
        timezone on which instance is created xw
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[str]:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklySchedules")
    def weekly_schedules(self) -> Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineScheduleWeeklySchedule']]:
        return pulumi.get(self, "weekly_schedules")

    @property
    @pulumi.getter(name="yearlySchedules")
    def yearly_schedules(self) -> Optional[Sequence['outputs.NdbScaleDatabaseTimeMachineScheduleYearlySchedule']]:
        return pulumi.get(self, "yearly_schedules")


@pulumi.output_type
class NdbScaleDatabaseTimeMachineScheduleContinuousSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logBackupInterval":
            suggest = "log_backup_interval"
        elif key == "snapshotsPerDay":
            suggest = "snapshots_per_day"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseTimeMachineScheduleContinuousSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseTimeMachineScheduleContinuousSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseTimeMachineScheduleContinuousSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 log_backup_interval: Optional[int] = None,
                 snapshots_per_day: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_backup_interval is not None:
            pulumi.set(__self__, "log_backup_interval", log_backup_interval)
        if snapshots_per_day is not None:
            pulumi.set(__self__, "snapshots_per_day", snapshots_per_day)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logBackupInterval")
    def log_backup_interval(self) -> Optional[int]:
        return pulumi.get(self, "log_backup_interval")

    @property
    @pulumi.getter(name="snapshotsPerDay")
    def snapshots_per_day(self) -> Optional[int]:
        return pulumi.get(self, "snapshots_per_day")


@pulumi.output_type
class NdbScaleDatabaseTimeMachineScheduleDailySchedule(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbScaleDatabaseTimeMachineScheduleMonthlySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfMonth":
            suggest = "day_of_month"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseTimeMachineScheduleMonthlySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseTimeMachineScheduleMonthlySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseTimeMachineScheduleMonthlySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_month: Optional[int] = None,
                 enabled: Optional[bool] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbScaleDatabaseTimeMachineScheduleQuartelySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfMonth":
            suggest = "day_of_month"
        elif key == "startMonth":
            suggest = "start_month"
        elif key == "startMonthValue":
            suggest = "start_month_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseTimeMachineScheduleQuartelySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseTimeMachineScheduleQuartelySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseTimeMachineScheduleQuartelySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_month: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 start_month: Optional[str] = None,
                 start_month_value: Optional[str] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if start_month is not None:
            pulumi.set(__self__, "start_month", start_month)
        if start_month_value is not None:
            pulumi.set(__self__, "start_month_value", start_month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="startMonth")
    def start_month(self) -> Optional[str]:
        return pulumi.get(self, "start_month")

    @property
    @pulumi.getter(name="startMonthValue")
    def start_month_value(self) -> Optional[str]:
        return pulumi.get(self, "start_month_value")


@pulumi.output_type
class NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDay(dict):
    def __init__(__self__, *,
                 extra: Optional[bool] = None,
                 hours: Optional[int] = None,
                 minutes: Optional[int] = None,
                 seconds: Optional[int] = None):
        if extra is not None:
            pulumi.set(__self__, "extra", extra)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def extra(self) -> Optional[bool]:
        return pulumi.get(self, "extra")

    @property
    @pulumi.getter
    def hours(self) -> Optional[int]:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> Optional[int]:
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def seconds(self) -> Optional[int]:
        return pulumi.get(self, "seconds")


@pulumi.output_type
class NdbScaleDatabaseTimeMachineScheduleWeeklySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfWeek":
            suggest = "day_of_week"
        elif key == "dayOfWeekValue":
            suggest = "day_of_week_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseTimeMachineScheduleWeeklySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseTimeMachineScheduleWeeklySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseTimeMachineScheduleWeeklySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_week: Optional[str] = None,
                 day_of_week_value: Optional[str] = None,
                 enabled: Optional[bool] = None):
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if day_of_week_value is not None:
            pulumi.set(__self__, "day_of_week_value", day_of_week_value)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="dayOfWeekValue")
    def day_of_week_value(self) -> Optional[str]:
        return pulumi.get(self, "day_of_week_value")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NdbScaleDatabaseTimeMachineScheduleYearlySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfMonth":
            suggest = "day_of_month"
        elif key == "monthValue":
            suggest = "month_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseTimeMachineScheduleYearlySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseTimeMachineScheduleYearlySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseTimeMachineScheduleYearlySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_month: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 month: Optional[str] = None,
                 month_value: Optional[str] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if month_value is not None:
            pulumi.set(__self__, "month_value", month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def month(self) -> Optional[str]:
        return pulumi.get(self, "month")

    @property
    @pulumi.getter(name="monthValue")
    def month_value(self) -> Optional[str]:
        return pulumi.get(self, "month_value")


@pulumi.output_type
class NdbScaleDatabaseTimeMachineSla(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continuousRetention":
            suggest = "continuous_retention"
        elif key == "currentActiveFrequency":
            suggest = "current_active_frequency"
        elif key == "dailyRetention":
            suggest = "daily_retention"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "monthlyRetention":
            suggest = "monthly_retention"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "pitrEnabled":
            suggest = "pitr_enabled"
        elif key == "quarterlyRetention":
            suggest = "quarterly_retention"
        elif key == "referenceCount":
            suggest = "reference_count"
        elif key == "systemSla":
            suggest = "system_sla"
        elif key == "uniqueName":
            suggest = "unique_name"
        elif key == "weeklyRetention":
            suggest = "weekly_retention"
        elif key == "yearlyRetention":
            suggest = "yearly_retention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseTimeMachineSla. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseTimeMachineSla.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseTimeMachineSla.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continuous_retention: Optional[int] = None,
                 current_active_frequency: Optional[str] = None,
                 daily_retention: Optional[int] = None,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 monthly_retention: Optional[int] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 pitr_enabled: Optional[bool] = None,
                 quarterly_retention: Optional[int] = None,
                 reference_count: Optional[int] = None,
                 system_sla: Optional[bool] = None,
                 unique_name: Optional[str] = None,
                 weekly_retention: Optional[int] = None,
                 yearly_retention: Optional[int] = None):
        """
        :param str date_created: date created for db instance
        :param str date_modified: date modified for instance
        :param str description: description of database instance
        :param str name: Name of database instance
        """
        if continuous_retention is not None:
            pulumi.set(__self__, "continuous_retention", continuous_retention)
        if current_active_frequency is not None:
            pulumi.set(__self__, "current_active_frequency", current_active_frequency)
        if daily_retention is not None:
            pulumi.set(__self__, "daily_retention", daily_retention)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monthly_retention is not None:
            pulumi.set(__self__, "monthly_retention", monthly_retention)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if pitr_enabled is not None:
            pulumi.set(__self__, "pitr_enabled", pitr_enabled)
        if quarterly_retention is not None:
            pulumi.set(__self__, "quarterly_retention", quarterly_retention)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if system_sla is not None:
            pulumi.set(__self__, "system_sla", system_sla)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)
        if weekly_retention is not None:
            pulumi.set(__self__, "weekly_retention", weekly_retention)
        if yearly_retention is not None:
            pulumi.set(__self__, "yearly_retention", yearly_retention)

    @property
    @pulumi.getter(name="continuousRetention")
    def continuous_retention(self) -> Optional[int]:
        return pulumi.get(self, "continuous_retention")

    @property
    @pulumi.getter(name="currentActiveFrequency")
    def current_active_frequency(self) -> Optional[str]:
        return pulumi.get(self, "current_active_frequency")

    @property
    @pulumi.getter(name="dailyRetention")
    def daily_retention(self) -> Optional[int]:
        return pulumi.get(self, "daily_retention")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created for db instance
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified for instance
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of database instance
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlyRetention")
    def monthly_retention(self) -> Optional[int]:
        return pulumi.get(self, "monthly_retention")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="pitrEnabled")
    def pitr_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "pitr_enabled")

    @property
    @pulumi.getter(name="quarterlyRetention")
    def quarterly_retention(self) -> Optional[int]:
        return pulumi.get(self, "quarterly_retention")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[int]:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="systemSla")
    def system_sla(self) -> Optional[bool]:
        return pulumi.get(self, "system_sla")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[str]:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklyRetention")
    def weekly_retention(self) -> Optional[int]:
        return pulumi.get(self, "weekly_retention")

    @property
    @pulumi.getter(name="yearlyRetention")
    def yearly_retention(self) -> Optional[int]:
        return pulumi.get(self, "yearly_retention")


@pulumi.output_type
class NdbScaleDatabaseTimeMachineTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbScaleDatabaseTimeMachineTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbScaleDatabaseTimeMachineTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbScaleDatabaseTimeMachineTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 tag_name: Optional[str] = None,
                 value: Optional[str] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbSoftwareVersionProfilePostgresDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbSoftwareNotes":
            suggest = "db_software_notes"
        elif key == "osNotes":
            suggest = "os_notes"
        elif key == "sourceDbserverId":
            suggest = "source_dbserver_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbSoftwareVersionProfilePostgresDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbSoftwareVersionProfilePostgresDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbSoftwareVersionProfilePostgresDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_software_notes: Optional[str] = None,
                 os_notes: Optional[str] = None,
                 source_dbserver_id: Optional[str] = None):
        """
        :param str db_software_notes: db software notes
        :param str os_notes: os notes for software profile
        :param str source_dbserver_id: source dbserver id
        """
        if db_software_notes is not None:
            pulumi.set(__self__, "db_software_notes", db_software_notes)
        if os_notes is not None:
            pulumi.set(__self__, "os_notes", os_notes)
        if source_dbserver_id is not None:
            pulumi.set(__self__, "source_dbserver_id", source_dbserver_id)

    @property
    @pulumi.getter(name="dbSoftwareNotes")
    def db_software_notes(self) -> Optional[str]:
        """
        db software notes
        """
        return pulumi.get(self, "db_software_notes")

    @property
    @pulumi.getter(name="osNotes")
    def os_notes(self) -> Optional[str]:
        """
        os notes for software profile
        """
        return pulumi.get(self, "os_notes")

    @property
    @pulumi.getter(name="sourceDbserverId")
    def source_dbserver_id(self) -> Optional[str]:
        """
        source dbserver id
        """
        return pulumi.get(self, "source_dbserver_id")


@pulumi.output_type
class NdbSoftwareVersionProfileProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of profile
        :param bool secure: secure or not
        :param str value: value of property
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of profile
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        """
        secure or not
        """
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        value of property
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbSoftwareVersionProfileVersionClusterAssociation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateCreated":
            suggest = "date_created"
        elif key == "dateModified":
            suggest = "date_modified"
        elif key == "nxClusterId":
            suggest = "nx_cluster_id"
        elif key == "optimizedForProvisioning":
            suggest = "optimized_for_provisioning"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "profileVersionId":
            suggest = "profile_version_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbSoftwareVersionProfileVersionClusterAssociation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbSoftwareVersionProfileVersionClusterAssociation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbSoftwareVersionProfileVersionClusterAssociation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_created: Optional[str] = None,
                 date_modified: Optional[str] = None,
                 nx_cluster_id: Optional[str] = None,
                 optimized_for_provisioning: Optional[bool] = None,
                 owner_id: Optional[str] = None,
                 profile_version_id: Optional[str] = None,
                 properties: Optional[Sequence['outputs.NdbSoftwareVersionProfileVersionClusterAssociationProperty']] = None,
                 status: Optional[str] = None):
        """
        :param str date_created: date created of profile
        :param str date_modified: date modified of profile
        :param str nx_cluster_id: nutanix cluster id
        :param bool optimized_for_provisioning: version optimized for provisioning
        :param str owner_id: owner id
        :param str profile_version_id: profile version id
        :param Sequence['NdbSoftwareVersionProfileVersionClusterAssociationPropertyArgs'] properties: properties of software profile
        :param str status: status of profile. Allowed Values are "deprecated", "published", "unpublished"
        """
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if nx_cluster_id is not None:
            pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        if optimized_for_provisioning is not None:
            pulumi.set(__self__, "optimized_for_provisioning", optimized_for_provisioning)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if profile_version_id is not None:
            pulumi.set(__self__, "profile_version_id", profile_version_id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[str]:
        """
        date created of profile
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[str]:
        """
        date modified of profile
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> Optional[str]:
        """
        nutanix cluster id
        """
        return pulumi.get(self, "nx_cluster_id")

    @property
    @pulumi.getter(name="optimizedForProvisioning")
    def optimized_for_provisioning(self) -> Optional[bool]:
        """
        version optimized for provisioning
        """
        return pulumi.get(self, "optimized_for_provisioning")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        """
        owner id
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="profileVersionId")
    def profile_version_id(self) -> Optional[str]:
        """
        profile version id
        """
        return pulumi.get(self, "profile_version_id")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbSoftwareVersionProfileVersionClusterAssociationProperty']]:
        """
        properties of software profile
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of profile. Allowed Values are "deprecated", "published", "unpublished"
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class NdbSoftwareVersionProfileVersionClusterAssociationProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of profile
        :param bool secure: secure or not
        :param str value: value of property
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of profile
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        """
        secure or not
        """
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        value of property
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NdbStretchedVlanMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetMask":
            suggest = "subnet_mask"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbStretchedVlanMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbStretchedVlanMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbStretchedVlanMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: Optional[str] = None,
                 subnet_mask: Optional[str] = None):
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[str]:
        return pulumi.get(self, "subnet_mask")


@pulumi.output_type
class NdbStretchedVlanVlansList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "propertiesMaps":
            suggest = "properties_maps"
        elif key == "stretchedVlanId":
            suggest = "stretched_vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbStretchedVlanVlansList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbStretchedVlanVlansList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbStretchedVlanVlansList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: Optional[str] = None,
                 id: Optional[str] = None,
                 managed: Optional[bool] = None,
                 name: Optional[str] = None,
                 properties: Optional[Sequence['outputs.NdbStretchedVlanVlansListProperty']] = None,
                 properties_maps: Optional[Sequence['outputs.NdbStretchedVlanVlansListPropertiesMap']] = None,
                 stretched_vlan_id: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str cluster_id: cluster id where network is present
        :param str id: network id
        :param bool managed: network managed by NDB or not
        :param str name: name for the stretched VLAN
        :param Sequence['NdbStretchedVlanVlansListPropertyArgs'] properties: properties of network
        :param Sequence['NdbStretchedVlanVlansListPropertiesMapArgs'] properties_maps: properties map of network
        :param str stretched_vlan_id: stretched vlan id
        :param str type: type of vlan. static VLANs that are managed in NDB can be added to a stretched VLAN.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if managed is not None:
            pulumi.set(__self__, "managed", managed)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if properties_maps is not None:
            pulumi.set(__self__, "properties_maps", properties_maps)
        if stretched_vlan_id is not None:
            pulumi.set(__self__, "stretched_vlan_id", stretched_vlan_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        """
        cluster id where network is present
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        network id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def managed(self) -> Optional[bool]:
        """
        network managed by NDB or not
        """
        return pulumi.get(self, "managed")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name for the stretched VLAN
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.NdbStretchedVlanVlansListProperty']]:
        """
        properties of network
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="propertiesMaps")
    def properties_maps(self) -> Optional[Sequence['outputs.NdbStretchedVlanVlansListPropertiesMap']]:
        """
        properties map of network
        """
        return pulumi.get(self, "properties_maps")

    @property
    @pulumi.getter(name="stretchedVlanId")
    def stretched_vlan_id(self) -> Optional[str]:
        """
        stretched vlan id
        """
        return pulumi.get(self, "stretched_vlan_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of vlan. static VLANs that are managed in NDB can be added to a stretched VLAN.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NdbStretchedVlanVlansListPropertiesMap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanGateway":
            suggest = "vlan_gateway"
        elif key == "vlanPrimaryDns":
            suggest = "vlan_primary_dns"
        elif key == "vlanSecondaryDns":
            suggest = "vlan_secondary_dns"
        elif key == "vlanSubnetMask":
            suggest = "vlan_subnet_mask"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdbStretchedVlanVlansListPropertiesMap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdbStretchedVlanVlansListPropertiesMap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdbStretchedVlanVlansListPropertiesMap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vlan_gateway: Optional[str] = None,
                 vlan_primary_dns: Optional[str] = None,
                 vlan_secondary_dns: Optional[str] = None,
                 vlan_subnet_mask: Optional[str] = None):
        """
        :param str vlan_gateway: gateway of vlan
        :param str vlan_primary_dns: primary dns of vlan
        :param str vlan_secondary_dns: secondary dns of vlan
        :param str vlan_subnet_mask: subnet mask of vlan
        """
        if vlan_gateway is not None:
            pulumi.set(__self__, "vlan_gateway", vlan_gateway)
        if vlan_primary_dns is not None:
            pulumi.set(__self__, "vlan_primary_dns", vlan_primary_dns)
        if vlan_secondary_dns is not None:
            pulumi.set(__self__, "vlan_secondary_dns", vlan_secondary_dns)
        if vlan_subnet_mask is not None:
            pulumi.set(__self__, "vlan_subnet_mask", vlan_subnet_mask)

    @property
    @pulumi.getter(name="vlanGateway")
    def vlan_gateway(self) -> Optional[str]:
        """
        gateway of vlan
        """
        return pulumi.get(self, "vlan_gateway")

    @property
    @pulumi.getter(name="vlanPrimaryDns")
    def vlan_primary_dns(self) -> Optional[str]:
        """
        primary dns of vlan
        """
        return pulumi.get(self, "vlan_primary_dns")

    @property
    @pulumi.getter(name="vlanSecondaryDns")
    def vlan_secondary_dns(self) -> Optional[str]:
        """
        secondary dns of vlan
        """
        return pulumi.get(self, "vlan_secondary_dns")

    @property
    @pulumi.getter(name="vlanSubnetMask")
    def vlan_subnet_mask(self) -> Optional[str]:
        """
        subnet mask of vlan
        """
        return pulumi.get(self, "vlan_subnet_mask")


@pulumi.output_type
class NdbStretchedVlanVlansListProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 secure: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str name: name for the stretched VLAN
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name for the stretched VLAN
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NetworkSecurityRuleAdRuleInboundAllowList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressGroupInclusionLists":
            suggest = "address_group_inclusion_lists"
        elif key == "expirationTime":
            suggest = "expiration_time"
        elif key == "filterKindLists":
            suggest = "filter_kind_lists"
        elif key == "filterParams":
            suggest = "filter_params"
        elif key == "filterType":
            suggest = "filter_type"
        elif key == "icmpTypeCodeLists":
            suggest = "icmp_type_code_lists"
        elif key == "ipSubnet":
            suggest = "ip_subnet"
        elif key == "ipSubnetPrefixLength":
            suggest = "ip_subnet_prefix_length"
        elif key == "networkFunctionChainReference":
            suggest = "network_function_chain_reference"
        elif key == "peerSpecificationType":
            suggest = "peer_specification_type"
        elif key == "serviceGroupLists":
            suggest = "service_group_lists"
        elif key == "tcpPortRangeLists":
            suggest = "tcp_port_range_lists"
        elif key == "udpPortRangeLists":
            suggest = "udp_port_range_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAdRuleInboundAllowList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAdRuleInboundAllowList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAdRuleInboundAllowList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_group_inclusion_lists: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList']] = None,
                 expiration_time: Optional[str] = None,
                 filter_kind_lists: Optional[Sequence[str]] = None,
                 filter_params: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListFilterParam']] = None,
                 filter_type: Optional[str] = None,
                 icmp_type_code_lists: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList']] = None,
                 ip_subnet: Optional[str] = None,
                 ip_subnet_prefix_length: Optional[str] = None,
                 network_function_chain_reference: Optional[Mapping[str, str]] = None,
                 peer_specification_type: Optional[str] = None,
                 protocol: Optional[str] = None,
                 service_group_lists: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList']] = None,
                 tcp_port_range_lists: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList']] = None,
                 udp_port_range_lists: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList']] = None):
        if address_group_inclusion_lists is not None:
            pulumi.set(__self__, "address_group_inclusion_lists", address_group_inclusion_lists)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if filter_kind_lists is not None:
            pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        if filter_params is not None:
            pulumi.set(__self__, "filter_params", filter_params)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if icmp_type_code_lists is not None:
            pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        if ip_subnet is not None:
            pulumi.set(__self__, "ip_subnet", ip_subnet)
        if ip_subnet_prefix_length is not None:
            pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        if network_function_chain_reference is not None:
            pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if peer_specification_type is not None:
            pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_group_lists is not None:
            pulumi.set(__self__, "service_group_lists", service_group_lists)
        if tcp_port_range_lists is not None:
            pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        if udp_port_range_lists is not None:
            pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="addressGroupInclusionLists")
    def address_group_inclusion_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList']]:
        return pulumi.get(self, "address_group_inclusion_lists")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[str]:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_kind_lists")

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListFilterParam']]:
        return pulumi.get(self, "filter_params")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList']]:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> Optional[str]:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> Optional[str]:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> Optional[str]:
        return pulumi.get(self, "peer_specification_type")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceGroupLists")
    def service_group_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList']]:
        return pulumi.get(self, "service_group_lists")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList']]:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList']]:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the network_security_rule.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class NetworkSecurityRuleAdRuleInboundAllowListFilterParam(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 type: Optional[str] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the network_security_rule.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class NetworkSecurityRuleAdRuleOutboundAllowList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressGroupInclusionLists":
            suggest = "address_group_inclusion_lists"
        elif key == "expirationTime":
            suggest = "expiration_time"
        elif key == "filterKindLists":
            suggest = "filter_kind_lists"
        elif key == "filterParams":
            suggest = "filter_params"
        elif key == "filterType":
            suggest = "filter_type"
        elif key == "icmpTypeCodeLists":
            suggest = "icmp_type_code_lists"
        elif key == "ipSubnet":
            suggest = "ip_subnet"
        elif key == "ipSubnetPrefixLength":
            suggest = "ip_subnet_prefix_length"
        elif key == "networkFunctionChainReference":
            suggest = "network_function_chain_reference"
        elif key == "peerSpecificationType":
            suggest = "peer_specification_type"
        elif key == "serviceGroupLists":
            suggest = "service_group_lists"
        elif key == "tcpPortRangeLists":
            suggest = "tcp_port_range_lists"
        elif key == "udpPortRangeLists":
            suggest = "udp_port_range_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAdRuleOutboundAllowList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAdRuleOutboundAllowList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAdRuleOutboundAllowList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_group_inclusion_lists: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList']] = None,
                 expiration_time: Optional[str] = None,
                 filter_kind_lists: Optional[Sequence[str]] = None,
                 filter_params: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListFilterParam']] = None,
                 filter_type: Optional[str] = None,
                 icmp_type_code_lists: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList']] = None,
                 ip_subnet: Optional[str] = None,
                 ip_subnet_prefix_length: Optional[str] = None,
                 network_function_chain_reference: Optional[Mapping[str, str]] = None,
                 peer_specification_type: Optional[str] = None,
                 protocol: Optional[str] = None,
                 service_group_lists: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList']] = None,
                 tcp_port_range_lists: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList']] = None,
                 udp_port_range_lists: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList']] = None):
        if address_group_inclusion_lists is not None:
            pulumi.set(__self__, "address_group_inclusion_lists", address_group_inclusion_lists)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if filter_kind_lists is not None:
            pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        if filter_params is not None:
            pulumi.set(__self__, "filter_params", filter_params)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if icmp_type_code_lists is not None:
            pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        if ip_subnet is not None:
            pulumi.set(__self__, "ip_subnet", ip_subnet)
        if ip_subnet_prefix_length is not None:
            pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        if network_function_chain_reference is not None:
            pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if peer_specification_type is not None:
            pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_group_lists is not None:
            pulumi.set(__self__, "service_group_lists", service_group_lists)
        if tcp_port_range_lists is not None:
            pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        if udp_port_range_lists is not None:
            pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="addressGroupInclusionLists")
    def address_group_inclusion_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList']]:
        return pulumi.get(self, "address_group_inclusion_lists")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[str]:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_kind_lists")

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListFilterParam']]:
        return pulumi.get(self, "filter_params")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList']]:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> Optional[str]:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> Optional[str]:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> Optional[str]:
        return pulumi.get(self, "peer_specification_type")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceGroupLists")
    def service_group_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList']]:
        return pulumi.get(self, "service_group_lists")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList']]:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList']]:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the network_security_rule.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class NetworkSecurityRuleAdRuleOutboundAllowListFilterParam(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 type: Optional[str] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the network_security_rule.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class NetworkSecurityRuleAdRuleTargetGroupFilterParam(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class NetworkSecurityRuleAppRuleInboundAllowList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressGroupInclusionLists":
            suggest = "address_group_inclusion_lists"
        elif key == "expirationTime":
            suggest = "expiration_time"
        elif key == "filterKindLists":
            suggest = "filter_kind_lists"
        elif key == "filterParams":
            suggest = "filter_params"
        elif key == "filterType":
            suggest = "filter_type"
        elif key == "icmpTypeCodeLists":
            suggest = "icmp_type_code_lists"
        elif key == "ipSubnet":
            suggest = "ip_subnet"
        elif key == "ipSubnetPrefixLength":
            suggest = "ip_subnet_prefix_length"
        elif key == "networkFunctionChainReference":
            suggest = "network_function_chain_reference"
        elif key == "peerSpecificationType":
            suggest = "peer_specification_type"
        elif key == "serviceGroupLists":
            suggest = "service_group_lists"
        elif key == "tcpPortRangeLists":
            suggest = "tcp_port_range_lists"
        elif key == "udpPortRangeLists":
            suggest = "udp_port_range_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAppRuleInboundAllowList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAppRuleInboundAllowList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAppRuleInboundAllowList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_group_inclusion_lists: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList']] = None,
                 expiration_time: Optional[str] = None,
                 filter_kind_lists: Optional[Sequence[str]] = None,
                 filter_params: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListFilterParam']] = None,
                 filter_type: Optional[str] = None,
                 icmp_type_code_lists: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList']] = None,
                 ip_subnet: Optional[str] = None,
                 ip_subnet_prefix_length: Optional[str] = None,
                 network_function_chain_reference: Optional[Mapping[str, str]] = None,
                 peer_specification_type: Optional[str] = None,
                 protocol: Optional[str] = None,
                 service_group_lists: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList']] = None,
                 tcp_port_range_lists: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList']] = None,
                 udp_port_range_lists: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList']] = None):
        if address_group_inclusion_lists is not None:
            pulumi.set(__self__, "address_group_inclusion_lists", address_group_inclusion_lists)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if filter_kind_lists is not None:
            pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        if filter_params is not None:
            pulumi.set(__self__, "filter_params", filter_params)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if icmp_type_code_lists is not None:
            pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        if ip_subnet is not None:
            pulumi.set(__self__, "ip_subnet", ip_subnet)
        if ip_subnet_prefix_length is not None:
            pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        if network_function_chain_reference is not None:
            pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if peer_specification_type is not None:
            pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_group_lists is not None:
            pulumi.set(__self__, "service_group_lists", service_group_lists)
        if tcp_port_range_lists is not None:
            pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        if udp_port_range_lists is not None:
            pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="addressGroupInclusionLists")
    def address_group_inclusion_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList']]:
        return pulumi.get(self, "address_group_inclusion_lists")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[str]:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_kind_lists")

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListFilterParam']]:
        return pulumi.get(self, "filter_params")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList']]:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> Optional[str]:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> Optional[str]:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> Optional[str]:
        return pulumi.get(self, "peer_specification_type")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceGroupLists")
    def service_group_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList']]:
        return pulumi.get(self, "service_group_lists")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList']]:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList']]:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the network_security_rule.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class NetworkSecurityRuleAppRuleInboundAllowListFilterParam(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 type: Optional[str] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the network_security_rule.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class NetworkSecurityRuleAppRuleOutboundAllowList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressGroupInclusionLists":
            suggest = "address_group_inclusion_lists"
        elif key == "expirationTime":
            suggest = "expiration_time"
        elif key == "filterKindLists":
            suggest = "filter_kind_lists"
        elif key == "filterParams":
            suggest = "filter_params"
        elif key == "filterType":
            suggest = "filter_type"
        elif key == "icmpTypeCodeLists":
            suggest = "icmp_type_code_lists"
        elif key == "ipSubnet":
            suggest = "ip_subnet"
        elif key == "ipSubnetPrefixLength":
            suggest = "ip_subnet_prefix_length"
        elif key == "networkFunctionChainReference":
            suggest = "network_function_chain_reference"
        elif key == "peerSpecificationType":
            suggest = "peer_specification_type"
        elif key == "serviceGroupLists":
            suggest = "service_group_lists"
        elif key == "tcpPortRangeLists":
            suggest = "tcp_port_range_lists"
        elif key == "udpPortRangeLists":
            suggest = "udp_port_range_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAppRuleOutboundAllowList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAppRuleOutboundAllowList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAppRuleOutboundAllowList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_group_inclusion_lists: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList']] = None,
                 expiration_time: Optional[str] = None,
                 filter_kind_lists: Optional[Sequence[str]] = None,
                 filter_params: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListFilterParam']] = None,
                 filter_type: Optional[str] = None,
                 icmp_type_code_lists: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList']] = None,
                 ip_subnet: Optional[str] = None,
                 ip_subnet_prefix_length: Optional[str] = None,
                 network_function_chain_reference: Optional[Mapping[str, str]] = None,
                 peer_specification_type: Optional[str] = None,
                 protocol: Optional[str] = None,
                 service_group_lists: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList']] = None,
                 tcp_port_range_lists: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList']] = None,
                 udp_port_range_lists: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList']] = None):
        if address_group_inclusion_lists is not None:
            pulumi.set(__self__, "address_group_inclusion_lists", address_group_inclusion_lists)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if filter_kind_lists is not None:
            pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        if filter_params is not None:
            pulumi.set(__self__, "filter_params", filter_params)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if icmp_type_code_lists is not None:
            pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        if ip_subnet is not None:
            pulumi.set(__self__, "ip_subnet", ip_subnet)
        if ip_subnet_prefix_length is not None:
            pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        if network_function_chain_reference is not None:
            pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if peer_specification_type is not None:
            pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_group_lists is not None:
            pulumi.set(__self__, "service_group_lists", service_group_lists)
        if tcp_port_range_lists is not None:
            pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        if udp_port_range_lists is not None:
            pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="addressGroupInclusionLists")
    def address_group_inclusion_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList']]:
        return pulumi.get(self, "address_group_inclusion_lists")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[str]:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_kind_lists")

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListFilterParam']]:
        return pulumi.get(self, "filter_params")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList']]:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> Optional[str]:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> Optional[str]:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> Optional[str]:
        return pulumi.get(self, "peer_specification_type")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceGroupLists")
    def service_group_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList']]:
        return pulumi.get(self, "service_group_lists")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList']]:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList']]:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the network_security_rule.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class NetworkSecurityRuleAppRuleOutboundAllowListFilterParam(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 type: Optional[str] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the network_security_rule.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class NetworkSecurityRuleAppRuleTargetGroupFilterParam(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class NetworkSecurityRuleCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: - (Required) The name for the network_security_rule.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NetworkSecurityRuleIsolationRuleFirstEntityFilterParam(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class NetworkSecurityRuleIsolationRuleSecondEntityFilterParam(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class PbrDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressType":
            suggest = "address_type"
        elif key == "prefixLength":
            suggest = "prefix_length"
        elif key == "subnetIp":
            suggest = "subnet_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PbrDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PbrDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PbrDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_type: Optional[str] = None,
                 prefix_length: Optional[int] = None,
                 subnet_ip: Optional[str] = None):
        if address_type is not None:
            pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> Optional[str]:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[str]:
        return pulumi.get(self, "subnet_ip")


@pulumi.output_type
class PbrProtocolParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolNumber":
            suggest = "protocol_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PbrProtocolParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PbrProtocolParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PbrProtocolParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 icmp: Optional['outputs.PbrProtocolParametersIcmp'] = None,
                 protocol_number: Optional[str] = None,
                 tcp: Optional['outputs.PbrProtocolParametersTcp'] = None,
                 udp: Optional['outputs.PbrProtocolParametersUdp'] = None):
        if icmp is not None:
            pulumi.set(__self__, "icmp", icmp)
        if protocol_number is not None:
            pulumi.set(__self__, "protocol_number", protocol_number)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @property
    @pulumi.getter
    def icmp(self) -> Optional['outputs.PbrProtocolParametersIcmp']:
        return pulumi.get(self, "icmp")

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> Optional[str]:
        return pulumi.get(self, "protocol_number")

    @property
    @pulumi.getter
    def tcp(self) -> Optional['outputs.PbrProtocolParametersTcp']:
        return pulumi.get(self, "tcp")

    @property
    @pulumi.getter
    def udp(self) -> Optional['outputs.PbrProtocolParametersUdp']:
        return pulumi.get(self, "udp")


@pulumi.output_type
class PbrProtocolParametersIcmp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "icmpCode":
            suggest = "icmp_code"
        elif key == "icmpType":
            suggest = "icmp_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PbrProtocolParametersIcmp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PbrProtocolParametersIcmp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PbrProtocolParametersIcmp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 icmp_code: int,
                 icmp_type: int):
        pulumi.set(__self__, "icmp_code", icmp_code)
        pulumi.set(__self__, "icmp_type", icmp_type)

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> int:
        return pulumi.get(self, "icmp_code")

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> int:
        return pulumi.get(self, "icmp_type")


@pulumi.output_type
class PbrProtocolParametersTcp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPortRangeLists":
            suggest = "destination_port_range_lists"
        elif key == "sourcePortRangeLists":
            suggest = "source_port_range_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PbrProtocolParametersTcp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PbrProtocolParametersTcp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PbrProtocolParametersTcp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_port_range_lists: Optional[Sequence['outputs.PbrProtocolParametersTcpDestinationPortRangeList']] = None,
                 source_port_range_lists: Optional[Sequence['outputs.PbrProtocolParametersTcpSourcePortRangeList']] = None):
        if destination_port_range_lists is not None:
            pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        if source_port_range_lists is not None:
            pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Optional[Sequence['outputs.PbrProtocolParametersTcpDestinationPortRangeList']]:
        return pulumi.get(self, "destination_port_range_lists")

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Optional[Sequence['outputs.PbrProtocolParametersTcpSourcePortRangeList']]:
        return pulumi.get(self, "source_port_range_lists")


@pulumi.output_type
class PbrProtocolParametersTcpDestinationPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PbrProtocolParametersTcpDestinationPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PbrProtocolParametersTcpDestinationPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PbrProtocolParametersTcpDestinationPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class PbrProtocolParametersTcpSourcePortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PbrProtocolParametersTcpSourcePortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PbrProtocolParametersTcpSourcePortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PbrProtocolParametersTcpSourcePortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class PbrProtocolParametersUdp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPortRangeLists":
            suggest = "destination_port_range_lists"
        elif key == "sourcePortRangeLists":
            suggest = "source_port_range_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PbrProtocolParametersUdp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PbrProtocolParametersUdp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PbrProtocolParametersUdp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_port_range_lists: Optional[Sequence['outputs.PbrProtocolParametersUdpDestinationPortRangeList']] = None,
                 source_port_range_lists: Optional[Sequence['outputs.PbrProtocolParametersUdpSourcePortRangeList']] = None):
        if destination_port_range_lists is not None:
            pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        if source_port_range_lists is not None:
            pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Optional[Sequence['outputs.PbrProtocolParametersUdpDestinationPortRangeList']]:
        return pulumi.get(self, "destination_port_range_lists")

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Optional[Sequence['outputs.PbrProtocolParametersUdpSourcePortRangeList']]:
        return pulumi.get(self, "source_port_range_lists")


@pulumi.output_type
class PbrProtocolParametersUdpDestinationPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PbrProtocolParametersUdpDestinationPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PbrProtocolParametersUdpDestinationPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PbrProtocolParametersUdpDestinationPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class PbrProtocolParametersUdpSourcePortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PbrProtocolParametersUdpSourcePortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PbrProtocolParametersUdpSourcePortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PbrProtocolParametersUdpSourcePortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class PbrSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressType":
            suggest = "address_type"
        elif key == "prefixLength":
            suggest = "prefix_length"
        elif key == "subnetIp":
            suggest = "subnet_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PbrSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PbrSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PbrSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_type: Optional[str] = None,
                 prefix_length: Optional[int] = None,
                 subnet_ip: Optional[str] = None):
        if address_type is not None:
            pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> Optional[str]:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[str]:
        return pulumi.get(self, "subnet_ip")


@pulumi.output_type
class ProjectAccountReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectAcp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleReference":
            suggest = "role_reference"
        elif key == "contextFilterLists":
            suggest = "context_filter_lists"
        elif key == "userGroupReferenceLists":
            suggest = "user_group_reference_lists"
        elif key == "userReferenceLists":
            suggest = "user_reference_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectAcp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectAcp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectAcp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_reference: 'outputs.ProjectAcpRoleReference',
                 context_filter_lists: Optional[Sequence['outputs.ProjectAcpContextFilterList']] = None,
                 description: Optional[str] = None,
                 metadata: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 user_group_reference_lists: Optional[Sequence['outputs.ProjectAcpUserGroupReferenceList']] = None,
                 user_reference_lists: Optional[Sequence['outputs.ProjectAcpUserReferenceList']] = None):
        """
        :param 'ProjectAcpRoleReferenceArgs' role_reference: Reference to role.
        :param Sequence['ProjectAcpContextFilterListArgs'] context_filter_lists: The list of context filters. These are OR filters. The scope-expression-list defines the context, and the filter works in conjunction with the entity-expression-list.
        :param str description: A description for project.
        :param str name: The name for the project.
        :param Sequence['ProjectAcpUserGroupReferenceListArgs'] user_group_reference_lists: List of Reference of users groups.
        :param Sequence['ProjectAcpUserReferenceListArgs'] user_reference_lists: List of Reference of users.
        """
        pulumi.set(__self__, "role_reference", role_reference)
        if context_filter_lists is not None:
            pulumi.set(__self__, "context_filter_lists", context_filter_lists)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if user_group_reference_lists is not None:
            pulumi.set(__self__, "user_group_reference_lists", user_group_reference_lists)
        if user_reference_lists is not None:
            pulumi.set(__self__, "user_reference_lists", user_reference_lists)

    @property
    @pulumi.getter(name="roleReference")
    def role_reference(self) -> 'outputs.ProjectAcpRoleReference':
        """
        Reference to role.
        """
        return pulumi.get(self, "role_reference")

    @property
    @pulumi.getter(name="contextFilterLists")
    def context_filter_lists(self) -> Optional[Sequence['outputs.ProjectAcpContextFilterList']]:
        """
        The list of context filters. These are OR filters. The scope-expression-list defines the context, and the filter works in conjunction with the entity-expression-list.
        """
        return pulumi.get(self, "context_filter_lists")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A description for project.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="userGroupReferenceLists")
    def user_group_reference_lists(self) -> Optional[Sequence['outputs.ProjectAcpUserGroupReferenceList']]:
        """
        List of Reference of users groups.
        """
        return pulumi.get(self, "user_group_reference_lists")

    @property
    @pulumi.getter(name="userReferenceLists")
    def user_reference_lists(self) -> Optional[Sequence['outputs.ProjectAcpUserReferenceList']]:
        """
        List of Reference of users.
        """
        return pulumi.get(self, "user_reference_lists")


@pulumi.output_type
class ProjectAcpContextFilterList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityFilterExpressionLists":
            suggest = "entity_filter_expression_lists"
        elif key == "scopeFilterExpressionLists":
            suggest = "scope_filter_expression_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectAcpContextFilterList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectAcpContextFilterList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectAcpContextFilterList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_filter_expression_lists: Sequence['outputs.ProjectAcpContextFilterListEntityFilterExpressionList'],
                 scope_filter_expression_lists: Optional[Sequence['outputs.ProjectAcpContextFilterListScopeFilterExpressionList']] = None):
        """
        :param Sequence['ProjectAcpContextFilterListEntityFilterExpressionListArgs'] entity_filter_expression_lists: (Required) A list of Entity filter expressions.
        :param Sequence['ProjectAcpContextFilterListScopeFilterExpressionListArgs'] scope_filter_expression_lists: - (Optional) Filter the scope of an Access Control Policy.
        """
        pulumi.set(__self__, "entity_filter_expression_lists", entity_filter_expression_lists)
        if scope_filter_expression_lists is not None:
            pulumi.set(__self__, "scope_filter_expression_lists", scope_filter_expression_lists)

    @property
    @pulumi.getter(name="entityFilterExpressionLists")
    def entity_filter_expression_lists(self) -> Sequence['outputs.ProjectAcpContextFilterListEntityFilterExpressionList']:
        """
        (Required) A list of Entity filter expressions.
        """
        return pulumi.get(self, "entity_filter_expression_lists")

    @property
    @pulumi.getter(name="scopeFilterExpressionLists")
    def scope_filter_expression_lists(self) -> Optional[Sequence['outputs.ProjectAcpContextFilterListScopeFilterExpressionList']]:
        """
        - (Optional) Filter the scope of an Access Control Policy.
        """
        return pulumi.get(self, "scope_filter_expression_lists")


@pulumi.output_type
class ProjectAcpContextFilterListEntityFilterExpressionList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rightHandSide":
            suggest = "right_hand_side"
        elif key == "leftHandSideEntityType":
            suggest = "left_hand_side_entity_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectAcpContextFilterListEntityFilterExpressionList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectAcpContextFilterListEntityFilterExpressionList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectAcpContextFilterListEntityFilterExpressionList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operator: str,
                 right_hand_side: 'outputs.ProjectAcpContextFilterListEntityFilterExpressionListRightHandSide',
                 left_hand_side_entity_type: Optional[str] = None):
        """
        :param str operator: - (Required) The operator in the filter expression.
        :param 'ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideArgs' right_hand_side: - (Required) The right hand side (RHS) of an scope expression.
        :param str left_hand_side_entity_type: - (Optional)  The LHS of the filter expression - the entity type.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "right_hand_side", right_hand_side)
        if left_hand_side_entity_type is not None:
            pulumi.set(__self__, "left_hand_side_entity_type", left_hand_side_entity_type)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        - (Required) The operator in the filter expression.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="rightHandSide")
    def right_hand_side(self) -> 'outputs.ProjectAcpContextFilterListEntityFilterExpressionListRightHandSide':
        """
        - (Required) The right hand side (RHS) of an scope expression.
        """
        return pulumi.get(self, "right_hand_side")

    @property
    @pulumi.getter(name="leftHandSideEntityType")
    def left_hand_side_entity_type(self) -> Optional[str]:
        """
        - (Optional)  The LHS of the filter expression - the entity type.
        """
        return pulumi.get(self, "left_hand_side_entity_type")


@pulumi.output_type
class ProjectAcpContextFilterListEntityFilterExpressionListRightHandSide(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uuidLists":
            suggest = "uuid_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectAcpContextFilterListEntityFilterExpressionListRightHandSide. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectAcpContextFilterListEntityFilterExpressionListRightHandSide.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectAcpContextFilterListEntityFilterExpressionListRightHandSide.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categories: Optional['outputs.ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategories'] = None,
                 collection: Optional[str] = None,
                 uuid_lists: Optional[Sequence[str]] = None):
        """
        :param 'ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgs' categories: - (Optional) The category values represented as a dictionary of key > list of values.
        :param str collection: - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        :param Sequence[str] uuid_lists: - (Optional) The explicit list of UUIDs for the given kind.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if uuid_lists is not None:
            pulumi.set(__self__, "uuid_lists", uuid_lists)

    @property
    @pulumi.getter
    def categories(self) -> Optional['outputs.ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategories']:
        """
        - (Optional) The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def collection(self) -> Optional[str]:
        """
        - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter(name="uuidLists")
    def uuid_lists(self) -> Optional[Sequence[str]]:
        """
        - (Optional) The explicit list of UUIDs for the given kind.
        """
        return pulumi.get(self, "uuid_lists")


@pulumi.output_type
class ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategories(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: The name for the project.
        :param Sequence[str] values: value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        value of the key.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ProjectAcpContextFilterListScopeFilterExpressionList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "leftHandSide":
            suggest = "left_hand_side"
        elif key == "rightHandSide":
            suggest = "right_hand_side"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectAcpContextFilterListScopeFilterExpressionList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectAcpContextFilterListScopeFilterExpressionList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectAcpContextFilterListScopeFilterExpressionList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 left_hand_side: str,
                 operator: str,
                 right_hand_side: 'outputs.ProjectAcpContextFilterListScopeFilterExpressionListRightHandSide'):
        """
        :param str left_hand_side: - (Optional)  The LHS of the filter expression - the scope type.
        :param str operator: - (Required) The operator in the filter expression.
        :param 'ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideArgs' right_hand_side: - (Required) The right hand side (RHS) of an scope expression.
        """
        pulumi.set(__self__, "left_hand_side", left_hand_side)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "right_hand_side", right_hand_side)

    @property
    @pulumi.getter(name="leftHandSide")
    def left_hand_side(self) -> str:
        """
        - (Optional)  The LHS of the filter expression - the scope type.
        """
        return pulumi.get(self, "left_hand_side")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        - (Required) The operator in the filter expression.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="rightHandSide")
    def right_hand_side(self) -> 'outputs.ProjectAcpContextFilterListScopeFilterExpressionListRightHandSide':
        """
        - (Required) The right hand side (RHS) of an scope expression.
        """
        return pulumi.get(self, "right_hand_side")


@pulumi.output_type
class ProjectAcpContextFilterListScopeFilterExpressionListRightHandSide(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uuidLists":
            suggest = "uuid_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectAcpContextFilterListScopeFilterExpressionListRightHandSide. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectAcpContextFilterListScopeFilterExpressionListRightHandSide.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectAcpContextFilterListScopeFilterExpressionListRightHandSide.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categories: Optional['outputs.ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategories'] = None,
                 collection: Optional[str] = None,
                 uuid_lists: Optional[Sequence[str]] = None):
        """
        :param 'ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgs' categories: - (Optional) The category values represented as a dictionary of key > list of values.
        :param str collection: - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        :param Sequence[str] uuid_lists: - (Optional) The explicit list of UUIDs for the given kind.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if uuid_lists is not None:
            pulumi.set(__self__, "uuid_lists", uuid_lists)

    @property
    @pulumi.getter
    def categories(self) -> Optional['outputs.ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategories']:
        """
        - (Optional) The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def collection(self) -> Optional[str]:
        """
        - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter(name="uuidLists")
    def uuid_lists(self) -> Optional[Sequence[str]]:
        """
        - (Optional) The explicit list of UUIDs for the given kind.
        """
        return pulumi.get(self, "uuid_lists")


@pulumi.output_type
class ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategories(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: The name for the project.
        :param Sequence[str] values: value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        value of the key.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ProjectAcpRoleReference(dict):
    def __init__(__self__, *,
                 kind: str,
                 uuid: str,
                 name: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str uuid: (Required) the UUID.
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "uuid", uuid)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectAcpUserGroupReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectAcpUserReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: The name for the project.
        :param str value: value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ProjectClusterReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectDefaultEnvironmentReference(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectDefaultSubnetReference(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectEnvironmentReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectExternalNetworkList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectExternalUserGroupReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectResourceDomain(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.ProjectResourceDomainResource']):
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.ProjectResourceDomainResource']:
        return pulumi.get(self, "resources")


@pulumi.output_type
class ProjectResourceDomainResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectResourceDomainResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectResourceDomainResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectResourceDomainResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 limit: int,
                 resource_type: str,
                 units: Optional[str] = None,
                 value: Optional[int] = None):
        """
        :param int value: value of the key.
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "resource_type", resource_type)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def units(self) -> Optional[str]:
        return pulumi.get(self, "units")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ProjectSubnetReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectTunnelReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectUserGroupList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "directoryServiceOus":
            suggest = "directory_service_ous"
        elif key == "directoryServiceUserGroups":
            suggest = "directory_service_user_groups"
        elif key == "samlUserGroups":
            suggest = "saml_user_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectUserGroupList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectUserGroupList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectUserGroupList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 directory_service_ous: Optional[Sequence['outputs.ProjectUserGroupListDirectoryServiceOus']] = None,
                 directory_service_user_groups: Optional[Sequence['outputs.ProjectUserGroupListDirectoryServiceUserGroup']] = None,
                 metadata: Optional[Mapping[str, str]] = None,
                 saml_user_groups: Optional[Sequence['outputs.ProjectUserGroupListSamlUserGroup']] = None):
        if directory_service_ous is not None:
            pulumi.set(__self__, "directory_service_ous", directory_service_ous)
        if directory_service_user_groups is not None:
            pulumi.set(__self__, "directory_service_user_groups", directory_service_user_groups)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if saml_user_groups is not None:
            pulumi.set(__self__, "saml_user_groups", saml_user_groups)

    @property
    @pulumi.getter(name="directoryServiceOus")
    def directory_service_ous(self) -> Optional[Sequence['outputs.ProjectUserGroupListDirectoryServiceOus']]:
        return pulumi.get(self, "directory_service_ous")

    @property
    @pulumi.getter(name="directoryServiceUserGroups")
    def directory_service_user_groups(self) -> Optional[Sequence['outputs.ProjectUserGroupListDirectoryServiceUserGroup']]:
        return pulumi.get(self, "directory_service_user_groups")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="samlUserGroups")
    def saml_user_groups(self) -> Optional[Sequence['outputs.ProjectUserGroupListSamlUserGroup']]:
        return pulumi.get(self, "saml_user_groups")


@pulumi.output_type
class ProjectUserGroupListDirectoryServiceOus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "distinguishedName":
            suggest = "distinguished_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectUserGroupListDirectoryServiceOus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectUserGroupListDirectoryServiceOus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectUserGroupListDirectoryServiceOus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 distinguished_name: str):
        pulumi.set(__self__, "distinguished_name", distinguished_name)

    @property
    @pulumi.getter(name="distinguishedName")
    def distinguished_name(self) -> str:
        return pulumi.get(self, "distinguished_name")


@pulumi.output_type
class ProjectUserGroupListDirectoryServiceUserGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "distinguishedName":
            suggest = "distinguished_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectUserGroupListDirectoryServiceUserGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectUserGroupListDirectoryServiceUserGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectUserGroupListDirectoryServiceUserGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 distinguished_name: str):
        pulumi.set(__self__, "distinguished_name", distinguished_name)

    @property
    @pulumi.getter(name="distinguishedName")
    def distinguished_name(self) -> str:
        return pulumi.get(self, "distinguished_name")


@pulumi.output_type
class ProjectUserGroupListSamlUserGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idpUuid":
            suggest = "idp_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectUserGroupListSamlUserGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectUserGroupListSamlUserGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectUserGroupListSamlUserGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 idp_uuid: str,
                 name: str):
        """
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "idp_uuid", idp_uuid)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="idpUuid")
    def idp_uuid(self) -> str:
        return pulumi.get(self, "idp_uuid")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectUserList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "directoryServiceUser":
            suggest = "directory_service_user"
        elif key == "identityProviderUser":
            suggest = "identity_provider_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectUserList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectUserList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectUserList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 directory_service_user: Optional['outputs.ProjectUserListDirectoryServiceUser'] = None,
                 identity_provider_user: Optional['outputs.ProjectUserListIdentityProviderUser'] = None,
                 metadata: Optional[Mapping[str, str]] = None):
        if directory_service_user is not None:
            pulumi.set(__self__, "directory_service_user", directory_service_user)
        if identity_provider_user is not None:
            pulumi.set(__self__, "identity_provider_user", identity_provider_user)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter(name="directoryServiceUser")
    def directory_service_user(self) -> Optional['outputs.ProjectUserListDirectoryServiceUser']:
        return pulumi.get(self, "directory_service_user")

    @property
    @pulumi.getter(name="identityProviderUser")
    def identity_provider_user(self) -> Optional['outputs.ProjectUserListIdentityProviderUser']:
        return pulumi.get(self, "identity_provider_user")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "metadata")


@pulumi.output_type
class ProjectUserListDirectoryServiceUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "directoryServiceReference":
            suggest = "directory_service_reference"
        elif key == "defaultUserPrincipalName":
            suggest = "default_user_principal_name"
        elif key == "userPrincipalName":
            suggest = "user_principal_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectUserListDirectoryServiceUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectUserListDirectoryServiceUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectUserListDirectoryServiceUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 directory_service_reference: 'outputs.ProjectUserListDirectoryServiceUserDirectoryServiceReference',
                 default_user_principal_name: Optional[str] = None,
                 user_principal_name: Optional[str] = None):
        pulumi.set(__self__, "directory_service_reference", directory_service_reference)
        if default_user_principal_name is not None:
            pulumi.set(__self__, "default_user_principal_name", default_user_principal_name)
        if user_principal_name is not None:
            pulumi.set(__self__, "user_principal_name", user_principal_name)

    @property
    @pulumi.getter(name="directoryServiceReference")
    def directory_service_reference(self) -> 'outputs.ProjectUserListDirectoryServiceUserDirectoryServiceReference':
        return pulumi.get(self, "directory_service_reference")

    @property
    @pulumi.getter(name="defaultUserPrincipalName")
    def default_user_principal_name(self) -> Optional[str]:
        return pulumi.get(self, "default_user_principal_name")

    @property
    @pulumi.getter(name="userPrincipalName")
    def user_principal_name(self) -> Optional[str]:
        return pulumi.get(self, "user_principal_name")


@pulumi.output_type
class ProjectUserListDirectoryServiceUserDirectoryServiceReference(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectUserListIdentityProviderUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityProviderReference":
            suggest = "identity_provider_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectUserListIdentityProviderUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectUserListIdentityProviderUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectUserListIdentityProviderUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identity_provider_reference: 'outputs.ProjectUserListIdentityProviderUserIdentityProviderReference',
                 username: Optional[str] = None):
        pulumi.set(__self__, "identity_provider_reference", identity_provider_reference)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="identityProviderReference")
    def identity_provider_reference(self) -> 'outputs.ProjectUserListIdentityProviderUserIdentityProviderReference':
        return pulumi.get(self, "identity_provider_reference")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class ProjectUserListIdentityProviderUserIdentityProviderReference(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectUserReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectVpcReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProtectionRuleAvailabilityZoneConnectivityList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationAvailabilityZoneIndex":
            suggest = "destination_availability_zone_index"
        elif key == "snapshotScheduleLists":
            suggest = "snapshot_schedule_lists"
        elif key == "sourceAvailabilityZoneIndex":
            suggest = "source_availability_zone_index"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectionRuleAvailabilityZoneConnectivityList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectionRuleAvailabilityZoneConnectivityList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectionRuleAvailabilityZoneConnectivityList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_availability_zone_index: Optional[int] = None,
                 snapshot_schedule_lists: Optional[Sequence['outputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList']] = None,
                 source_availability_zone_index: Optional[int] = None):
        if destination_availability_zone_index is not None:
            pulumi.set(__self__, "destination_availability_zone_index", destination_availability_zone_index)
        if snapshot_schedule_lists is not None:
            pulumi.set(__self__, "snapshot_schedule_lists", snapshot_schedule_lists)
        if source_availability_zone_index is not None:
            pulumi.set(__self__, "source_availability_zone_index", source_availability_zone_index)

    @property
    @pulumi.getter(name="destinationAvailabilityZoneIndex")
    def destination_availability_zone_index(self) -> Optional[int]:
        return pulumi.get(self, "destination_availability_zone_index")

    @property
    @pulumi.getter(name="snapshotScheduleLists")
    def snapshot_schedule_lists(self) -> Optional[Sequence['outputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList']]:
        return pulumi.get(self, "snapshot_schedule_lists")

    @property
    @pulumi.getter(name="sourceAvailabilityZoneIndex")
    def source_availability_zone_index(self) -> Optional[int]:
        return pulumi.get(self, "source_availability_zone_index")


@pulumi.output_type
class ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recoveryPointObjectiveSecs":
            suggest = "recovery_point_objective_secs"
        elif key == "autoSuspendTimeoutSecs":
            suggest = "auto_suspend_timeout_secs"
        elif key == "localSnapshotRetentionPolicy":
            suggest = "local_snapshot_retention_policy"
        elif key == "remoteSnapshotRetentionPolicy":
            suggest = "remote_snapshot_retention_policy"
        elif key == "snapshotType":
            suggest = "snapshot_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 recovery_point_objective_secs: int,
                 auto_suspend_timeout_secs: Optional[int] = None,
                 local_snapshot_retention_policy: Optional['outputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy'] = None,
                 remote_snapshot_retention_policy: Optional['outputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy'] = None,
                 snapshot_type: Optional[str] = None):
        pulumi.set(__self__, "recovery_point_objective_secs", recovery_point_objective_secs)
        if auto_suspend_timeout_secs is not None:
            pulumi.set(__self__, "auto_suspend_timeout_secs", auto_suspend_timeout_secs)
        if local_snapshot_retention_policy is not None:
            pulumi.set(__self__, "local_snapshot_retention_policy", local_snapshot_retention_policy)
        if remote_snapshot_retention_policy is not None:
            pulumi.set(__self__, "remote_snapshot_retention_policy", remote_snapshot_retention_policy)
        if snapshot_type is not None:
            pulumi.set(__self__, "snapshot_type", snapshot_type)

    @property
    @pulumi.getter(name="recoveryPointObjectiveSecs")
    def recovery_point_objective_secs(self) -> int:
        return pulumi.get(self, "recovery_point_objective_secs")

    @property
    @pulumi.getter(name="autoSuspendTimeoutSecs")
    def auto_suspend_timeout_secs(self) -> Optional[int]:
        return pulumi.get(self, "auto_suspend_timeout_secs")

    @property
    @pulumi.getter(name="localSnapshotRetentionPolicy")
    def local_snapshot_retention_policy(self) -> Optional['outputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy']:
        return pulumi.get(self, "local_snapshot_retention_policy")

    @property
    @pulumi.getter(name="remoteSnapshotRetentionPolicy")
    def remote_snapshot_retention_policy(self) -> Optional['outputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy']:
        return pulumi.get(self, "remote_snapshot_retention_policy")

    @property
    @pulumi.getter(name="snapshotType")
    def snapshot_type(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_type")


@pulumi.output_type
class ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numSnapshots":
            suggest = "num_snapshots"
        elif key == "rollupRetentionPolicyMultiple":
            suggest = "rollup_retention_policy_multiple"
        elif key == "rollupRetentionPolicySnapshotIntervalType":
            suggest = "rollup_retention_policy_snapshot_interval_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 num_snapshots: Optional[int] = None,
                 rollup_retention_policy_multiple: Optional[int] = None,
                 rollup_retention_policy_snapshot_interval_type: Optional[str] = None):
        if num_snapshots is not None:
            pulumi.set(__self__, "num_snapshots", num_snapshots)
        if rollup_retention_policy_multiple is not None:
            pulumi.set(__self__, "rollup_retention_policy_multiple", rollup_retention_policy_multiple)
        if rollup_retention_policy_snapshot_interval_type is not None:
            pulumi.set(__self__, "rollup_retention_policy_snapshot_interval_type", rollup_retention_policy_snapshot_interval_type)

    @property
    @pulumi.getter(name="numSnapshots")
    def num_snapshots(self) -> Optional[int]:
        return pulumi.get(self, "num_snapshots")

    @property
    @pulumi.getter(name="rollupRetentionPolicyMultiple")
    def rollup_retention_policy_multiple(self) -> Optional[int]:
        return pulumi.get(self, "rollup_retention_policy_multiple")

    @property
    @pulumi.getter(name="rollupRetentionPolicySnapshotIntervalType")
    def rollup_retention_policy_snapshot_interval_type(self) -> Optional[str]:
        return pulumi.get(self, "rollup_retention_policy_snapshot_interval_type")


@pulumi.output_type
class ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numSnapshots":
            suggest = "num_snapshots"
        elif key == "rollupRetentionPolicyMultiple":
            suggest = "rollup_retention_policy_multiple"
        elif key == "rollupRetentionPolicySnapshotIntervalType":
            suggest = "rollup_retention_policy_snapshot_interval_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 num_snapshots: Optional[int] = None,
                 rollup_retention_policy_multiple: Optional[int] = None,
                 rollup_retention_policy_snapshot_interval_type: Optional[str] = None):
        if num_snapshots is not None:
            pulumi.set(__self__, "num_snapshots", num_snapshots)
        if rollup_retention_policy_multiple is not None:
            pulumi.set(__self__, "rollup_retention_policy_multiple", rollup_retention_policy_multiple)
        if rollup_retention_policy_snapshot_interval_type is not None:
            pulumi.set(__self__, "rollup_retention_policy_snapshot_interval_type", rollup_retention_policy_snapshot_interval_type)

    @property
    @pulumi.getter(name="numSnapshots")
    def num_snapshots(self) -> Optional[int]:
        return pulumi.get(self, "num_snapshots")

    @property
    @pulumi.getter(name="rollupRetentionPolicyMultiple")
    def rollup_retention_policy_multiple(self) -> Optional[int]:
        return pulumi.get(self, "rollup_retention_policy_multiple")

    @property
    @pulumi.getter(name="rollupRetentionPolicySnapshotIntervalType")
    def rollup_retention_policy_snapshot_interval_type(self) -> Optional[str]:
        return pulumi.get(self, "rollup_retention_policy_snapshot_interval_type")


@pulumi.output_type
class ProtectionRuleCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: The name for the protection rule.
        :param str value: value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the protection rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ProtectionRuleCategoryFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kindLists":
            suggest = "kind_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectionRuleCategoryFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectionRuleCategoryFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectionRuleCategoryFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind_lists: Optional[Sequence[str]] = None,
                 params: Optional[Sequence['outputs.ProtectionRuleCategoryFilterParam']] = None,
                 type: Optional[str] = None):
        if kind_lists is not None:
            pulumi.set(__self__, "kind_lists", kind_lists)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="kindLists")
    def kind_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "kind_lists")

    @property
    @pulumi.getter
    def params(self) -> Optional[Sequence['outputs.ProtectionRuleCategoryFilterParam']]:
        return pulumi.get(self, "params")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ProtectionRuleCategoryFilterParam(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: The name for the protection rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name for the protection rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ProtectionRuleOrderedAvailabilityZoneList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZoneUrl":
            suggest = "availability_zone_url"
        elif key == "clusterUuid":
            suggest = "cluster_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectionRuleOrderedAvailabilityZoneList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectionRuleOrderedAvailabilityZoneList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectionRuleOrderedAvailabilityZoneList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone_url: Optional[str] = None,
                 cluster_uuid: Optional[str] = None):
        if availability_zone_url is not None:
            pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        if cluster_uuid is not None:
            pulumi.set(__self__, "cluster_uuid", cluster_uuid)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> Optional[str]:
        return pulumi.get(self, "availability_zone_url")

    @property
    @pulumi.getter(name="clusterUuid")
    def cluster_uuid(self) -> Optional[str]:
        return pulumi.get(self, "cluster_uuid")


@pulumi.output_type
class ProtectionRuleOwnerReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the protection rule.
        :param str uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the protection rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ProtectionRuleProjectReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the protection rule.
        :param str uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the protection rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RecoveryPlanCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: The name for the Recovery Plan.
        :param str value: value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RecoveryPlanOwnerReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the Recovery Plan.
        :param str uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RecoveryPlanParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "floatingIpAssignmentLists":
            suggest = "floating_ip_assignment_lists"
        elif key == "networkMappingLists":
            suggest = "network_mapping_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 floating_ip_assignment_lists: Optional[Sequence['outputs.RecoveryPlanParametersFloatingIpAssignmentList']] = None,
                 network_mapping_lists: Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingList']] = None):
        if floating_ip_assignment_lists is not None:
            pulumi.set(__self__, "floating_ip_assignment_lists", floating_ip_assignment_lists)
        if network_mapping_lists is not None:
            pulumi.set(__self__, "network_mapping_lists", network_mapping_lists)

    @property
    @pulumi.getter(name="floatingIpAssignmentLists")
    def floating_ip_assignment_lists(self) -> Optional[Sequence['outputs.RecoveryPlanParametersFloatingIpAssignmentList']]:
        return pulumi.get(self, "floating_ip_assignment_lists")

    @property
    @pulumi.getter(name="networkMappingLists")
    def network_mapping_lists(self) -> Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingList']]:
        return pulumi.get(self, "network_mapping_lists")


@pulumi.output_type
class RecoveryPlanParametersFloatingIpAssignmentList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZoneUrl":
            suggest = "availability_zone_url"
        elif key == "vmIpAssignmentLists":
            suggest = "vm_ip_assignment_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersFloatingIpAssignmentList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersFloatingIpAssignmentList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersFloatingIpAssignmentList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone_url: str,
                 vm_ip_assignment_lists: Sequence['outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList']):
        pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        pulumi.set(__self__, "vm_ip_assignment_lists", vm_ip_assignment_lists)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> str:
        return pulumi.get(self, "availability_zone_url")

    @property
    @pulumi.getter(name="vmIpAssignmentLists")
    def vm_ip_assignment_lists(self) -> Sequence['outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList']:
        return pulumi.get(self, "vm_ip_assignment_lists")


@pulumi.output_type
class RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vmNicInformation":
            suggest = "vm_nic_information"
        elif key == "vmReference":
            suggest = "vm_reference"
        elif key == "recoveryFloatingIpConfig":
            suggest = "recovery_floating_ip_config"
        elif key == "testFloatingIpConfig":
            suggest = "test_floating_ip_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vm_nic_information: 'outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation',
                 vm_reference: 'outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference',
                 recovery_floating_ip_config: Optional['outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig'] = None,
                 test_floating_ip_config: Optional['outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig'] = None):
        pulumi.set(__self__, "vm_nic_information", vm_nic_information)
        pulumi.set(__self__, "vm_reference", vm_reference)
        if recovery_floating_ip_config is not None:
            pulumi.set(__self__, "recovery_floating_ip_config", recovery_floating_ip_config)
        if test_floating_ip_config is not None:
            pulumi.set(__self__, "test_floating_ip_config", test_floating_ip_config)

    @property
    @pulumi.getter(name="vmNicInformation")
    def vm_nic_information(self) -> 'outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation':
        return pulumi.get(self, "vm_nic_information")

    @property
    @pulumi.getter(name="vmReference")
    def vm_reference(self) -> 'outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference':
        return pulumi.get(self, "vm_reference")

    @property
    @pulumi.getter(name="recoveryFloatingIpConfig")
    def recovery_floating_ip_config(self) -> Optional['outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig']:
        return pulumi.get(self, "recovery_floating_ip_config")

    @property
    @pulumi.getter(name="testFloatingIpConfig")
    def test_floating_ip_config(self) -> Optional['outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig']:
        return pulumi.get(self, "test_floating_ip_config")


@pulumi.output_type
class RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shouldAllocateDynamically":
            suggest = "should_allocate_dynamically"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 should_allocate_dynamically: Optional[bool] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if should_allocate_dynamically is not None:
            pulumi.set(__self__, "should_allocate_dynamically", should_allocate_dynamically)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="shouldAllocateDynamically")
    def should_allocate_dynamically(self) -> Optional[bool]:
        return pulumi.get(self, "should_allocate_dynamically")


@pulumi.output_type
class RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shouldAllocateDynamically":
            suggest = "should_allocate_dynamically"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 should_allocate_dynamically: Optional[bool] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if should_allocate_dynamically is not None:
            pulumi.set(__self__, "should_allocate_dynamically", should_allocate_dynamically)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="shouldAllocateDynamically")
    def should_allocate_dynamically(self) -> Optional[bool]:
        return pulumi.get(self, "should_allocate_dynamically")


@pulumi.output_type
class RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation(dict):
    def __init__(__self__, *,
                 uuid: str,
                 ip: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "uuid", uuid)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference(dict):
    def __init__(__self__, *,
                 kind: str,
                 uuid: str,
                 name: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str uuid: (Required) the UUID.
        :param str name: The name for the Recovery Plan.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "uuid", uuid)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areNetworksStretched":
            suggest = "are_networks_stretched"
        elif key == "availabilityZoneNetworkMappingLists":
            suggest = "availability_zone_network_mapping_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersNetworkMappingList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersNetworkMappingList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersNetworkMappingList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 are_networks_stretched: Optional[bool] = None,
                 availability_zone_network_mapping_lists: Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList']] = None):
        if are_networks_stretched is not None:
            pulumi.set(__self__, "are_networks_stretched", are_networks_stretched)
        if availability_zone_network_mapping_lists is not None:
            pulumi.set(__self__, "availability_zone_network_mapping_lists", availability_zone_network_mapping_lists)

    @property
    @pulumi.getter(name="areNetworksStretched")
    def are_networks_stretched(self) -> Optional[bool]:
        return pulumi.get(self, "are_networks_stretched")

    @property
    @pulumi.getter(name="availabilityZoneNetworkMappingLists")
    def availability_zone_network_mapping_lists(self) -> Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList']]:
        return pulumi.get(self, "availability_zone_network_mapping_lists")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZoneUrl":
            suggest = "availability_zone_url"
        elif key == "clusterReferenceLists":
            suggest = "cluster_reference_lists"
        elif key == "recoveryIpAssignmentLists":
            suggest = "recovery_ip_assignment_lists"
        elif key == "recoveryNetwork":
            suggest = "recovery_network"
        elif key == "testIpAssignmentLists":
            suggest = "test_ip_assignment_lists"
        elif key == "testNetwork":
            suggest = "test_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone_url: Optional[str] = None,
                 cluster_reference_lists: Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList']] = None,
                 recovery_ip_assignment_lists: Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList']] = None,
                 recovery_network: Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork'] = None,
                 test_ip_assignment_lists: Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList']] = None,
                 test_network: Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork'] = None):
        if availability_zone_url is not None:
            pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        if cluster_reference_lists is not None:
            pulumi.set(__self__, "cluster_reference_lists", cluster_reference_lists)
        if recovery_ip_assignment_lists is not None:
            pulumi.set(__self__, "recovery_ip_assignment_lists", recovery_ip_assignment_lists)
        if recovery_network is not None:
            pulumi.set(__self__, "recovery_network", recovery_network)
        if test_ip_assignment_lists is not None:
            pulumi.set(__self__, "test_ip_assignment_lists", test_ip_assignment_lists)
        if test_network is not None:
            pulumi.set(__self__, "test_network", test_network)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> Optional[str]:
        return pulumi.get(self, "availability_zone_url")

    @property
    @pulumi.getter(name="clusterReferenceLists")
    def cluster_reference_lists(self) -> Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList']]:
        return pulumi.get(self, "cluster_reference_lists")

    @property
    @pulumi.getter(name="recoveryIpAssignmentLists")
    def recovery_ip_assignment_lists(self) -> Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList']]:
        return pulumi.get(self, "recovery_ip_assignment_lists")

    @property
    @pulumi.getter(name="recoveryNetwork")
    def recovery_network(self) -> Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork']:
        return pulumi.get(self, "recovery_network")

    @property
    @pulumi.getter(name="testIpAssignmentLists")
    def test_ip_assignment_lists(self) -> Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList']]:
        return pulumi.get(self, "test_ip_assignment_lists")

    @property
    @pulumi.getter(name="testNetwork")
    def test_network(self) -> Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork']:
        return pulumi.get(self, "test_network")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList(dict):
    def __init__(__self__, *,
                 kind: str,
                 uuid: str,
                 name: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str uuid: (Required) the UUID.
        :param str name: The name for the Recovery Plan.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "uuid", uuid)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipConfigLists":
            suggest = "ip_config_lists"
        elif key == "vmReference":
            suggest = "vm_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_config_lists: Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList'],
                 vm_reference: 'outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference'):
        pulumi.set(__self__, "ip_config_lists", ip_config_lists)
        pulumi.set(__self__, "vm_reference", vm_reference)

    @property
    @pulumi.getter(name="ipConfigLists")
    def ip_config_lists(self) -> Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList']:
        return pulumi.get(self, "ip_config_lists")

    @property
    @pulumi.getter(name="vmReference")
    def vm_reference(self) -> 'outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference':
        return pulumi.get(self, "vm_reference")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: str):
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the Recovery Plan.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetLists":
            suggest = "subnet_lists"
        elif key == "useVpcReference":
            suggest = "use_vpc_reference"
        elif key == "virtualNetworkReference":
            suggest = "virtual_network_reference"
        elif key == "vpcReference":
            suggest = "vpc_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 subnet_lists: Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList']] = None,
                 use_vpc_reference: Optional[bool] = None,
                 virtual_network_reference: Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference'] = None,
                 vpc_reference: Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference'] = None):
        """
        :param str name: The name for the Recovery Plan.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet_lists is not None:
            pulumi.set(__self__, "subnet_lists", subnet_lists)
        if use_vpc_reference is not None:
            pulumi.set(__self__, "use_vpc_reference", use_vpc_reference)
        if virtual_network_reference is not None:
            pulumi.set(__self__, "virtual_network_reference", virtual_network_reference)
        if vpc_reference is not None:
            pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetLists")
    def subnet_lists(self) -> Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList']]:
        return pulumi.get(self, "subnet_lists")

    @property
    @pulumi.getter(name="useVpcReference")
    def use_vpc_reference(self) -> Optional[bool]:
        return pulumi.get(self, "use_vpc_reference")

    @property
    @pulumi.getter(name="virtualNetworkReference")
    def virtual_network_reference(self) -> Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference']:
        return pulumi.get(self, "virtual_network_reference")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference']:
        return pulumi.get(self, "vpc_reference")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gatewayIp":
            suggest = "gateway_ip"
        elif key == "prefixLength":
            suggest = "prefix_length"
        elif key == "externalConnectivityState":
            suggest = "external_connectivity_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway_ip: str,
                 prefix_length: int,
                 external_connectivity_state: Optional[str] = None):
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "prefix_length", prefix_length)
        if external_connectivity_state is not None:
            pulumi.set(__self__, "external_connectivity_state", external_connectivity_state)

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> str:
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="externalConnectivityState")
    def external_connectivity_state(self) -> Optional[str]:
        return pulumi.get(self, "external_connectivity_state")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the Recovery Plan.
        :param str uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the Recovery Plan.
        :param str uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipConfigLists":
            suggest = "ip_config_lists"
        elif key == "vmReference":
            suggest = "vm_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_config_lists: Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList'],
                 vm_reference: 'outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference'):
        pulumi.set(__self__, "ip_config_lists", ip_config_lists)
        pulumi.set(__self__, "vm_reference", vm_reference)

    @property
    @pulumi.getter(name="ipConfigLists")
    def ip_config_lists(self) -> Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList']:
        return pulumi.get(self, "ip_config_lists")

    @property
    @pulumi.getter(name="vmReference")
    def vm_reference(self) -> 'outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference':
        return pulumi.get(self, "vm_reference")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: str):
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the Recovery Plan.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetLists":
            suggest = "subnet_lists"
        elif key == "useVpcReference":
            suggest = "use_vpc_reference"
        elif key == "virtualNetworkReference":
            suggest = "virtual_network_reference"
        elif key == "vpcReference":
            suggest = "vpc_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 subnet_lists: Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList']] = None,
                 use_vpc_reference: Optional[bool] = None,
                 virtual_network_reference: Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference'] = None,
                 vpc_reference: Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference'] = None):
        """
        :param str name: The name for the Recovery Plan.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet_lists is not None:
            pulumi.set(__self__, "subnet_lists", subnet_lists)
        if use_vpc_reference is not None:
            pulumi.set(__self__, "use_vpc_reference", use_vpc_reference)
        if virtual_network_reference is not None:
            pulumi.set(__self__, "virtual_network_reference", virtual_network_reference)
        if vpc_reference is not None:
            pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetLists")
    def subnet_lists(self) -> Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList']]:
        return pulumi.get(self, "subnet_lists")

    @property
    @pulumi.getter(name="useVpcReference")
    def use_vpc_reference(self) -> Optional[bool]:
        return pulumi.get(self, "use_vpc_reference")

    @property
    @pulumi.getter(name="virtualNetworkReference")
    def virtual_network_reference(self) -> Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference']:
        return pulumi.get(self, "virtual_network_reference")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference']:
        return pulumi.get(self, "vpc_reference")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gatewayIp":
            suggest = "gateway_ip"
        elif key == "prefixLength":
            suggest = "prefix_length"
        elif key == "externalConnectivityState":
            suggest = "external_connectivity_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway_ip: str,
                 prefix_length: int,
                 external_connectivity_state: Optional[str] = None):
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "prefix_length", prefix_length)
        if external_connectivity_state is not None:
            pulumi.set(__self__, "external_connectivity_state", external_connectivity_state)

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> str:
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="externalConnectivityState")
    def external_connectivity_state(self) -> Optional[str]:
        return pulumi.get(self, "external_connectivity_state")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the Recovery Plan.
        :param str uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the Recovery Plan.
        :param str uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RecoveryPlanProjectReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the Recovery Plan.
        :param str uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RecoveryPlanStageList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stageWork":
            suggest = "stage_work"
        elif key == "delayTimeSecs":
            suggest = "delay_time_secs"
        elif key == "stageUuid":
            suggest = "stage_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanStageList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanStageList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanStageList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stage_work: 'outputs.RecoveryPlanStageListStageWork',
                 delay_time_secs: Optional[int] = None,
                 stage_uuid: Optional[str] = None):
        pulumi.set(__self__, "stage_work", stage_work)
        if delay_time_secs is not None:
            pulumi.set(__self__, "delay_time_secs", delay_time_secs)
        if stage_uuid is not None:
            pulumi.set(__self__, "stage_uuid", stage_uuid)

    @property
    @pulumi.getter(name="stageWork")
    def stage_work(self) -> 'outputs.RecoveryPlanStageListStageWork':
        return pulumi.get(self, "stage_work")

    @property
    @pulumi.getter(name="delayTimeSecs")
    def delay_time_secs(self) -> Optional[int]:
        return pulumi.get(self, "delay_time_secs")

    @property
    @pulumi.getter(name="stageUuid")
    def stage_uuid(self) -> Optional[str]:
        return pulumi.get(self, "stage_uuid")


@pulumi.output_type
class RecoveryPlanStageListStageWork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recoverEntities":
            suggest = "recover_entities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanStageListStageWork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanStageListStageWork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanStageListStageWork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 recover_entities: Optional['outputs.RecoveryPlanStageListStageWorkRecoverEntities'] = None):
        if recover_entities is not None:
            pulumi.set(__self__, "recover_entities", recover_entities)

    @property
    @pulumi.getter(name="recoverEntities")
    def recover_entities(self) -> Optional['outputs.RecoveryPlanStageListStageWorkRecoverEntities']:
        return pulumi.get(self, "recover_entities")


@pulumi.output_type
class RecoveryPlanStageListStageWorkRecoverEntities(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityInfoLists":
            suggest = "entity_info_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanStageListStageWorkRecoverEntities. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanStageListStageWorkRecoverEntities.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanStageListStageWorkRecoverEntities.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_info_lists: Optional[Sequence['outputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList']] = None):
        if entity_info_lists is not None:
            pulumi.set(__self__, "entity_info_lists", entity_info_lists)

    @property
    @pulumi.getter(name="entityInfoLists")
    def entity_info_lists(self) -> Optional[Sequence['outputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList']]:
        return pulumi.get(self, "entity_info_lists")


@pulumi.output_type
class RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "anyEntityReferenceKind":
            suggest = "any_entity_reference_kind"
        elif key == "anyEntityReferenceName":
            suggest = "any_entity_reference_name"
        elif key == "anyEntityReferenceUuid":
            suggest = "any_entity_reference_uuid"
        elif key == "scriptLists":
            suggest = "script_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 any_entity_reference_kind: Optional[str] = None,
                 any_entity_reference_name: Optional[str] = None,
                 any_entity_reference_uuid: Optional[str] = None,
                 categories: Optional[Sequence['outputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory']] = None,
                 script_lists: Optional[Sequence['outputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList']] = None):
        if any_entity_reference_kind is not None:
            pulumi.set(__self__, "any_entity_reference_kind", any_entity_reference_kind)
        if any_entity_reference_name is not None:
            pulumi.set(__self__, "any_entity_reference_name", any_entity_reference_name)
        if any_entity_reference_uuid is not None:
            pulumi.set(__self__, "any_entity_reference_uuid", any_entity_reference_uuid)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if script_lists is not None:
            pulumi.set(__self__, "script_lists", script_lists)

    @property
    @pulumi.getter(name="anyEntityReferenceKind")
    def any_entity_reference_kind(self) -> Optional[str]:
        return pulumi.get(self, "any_entity_reference_kind")

    @property
    @pulumi.getter(name="anyEntityReferenceName")
    def any_entity_reference_name(self) -> Optional[str]:
        return pulumi.get(self, "any_entity_reference_name")

    @property
    @pulumi.getter(name="anyEntityReferenceUuid")
    def any_entity_reference_uuid(self) -> Optional[str]:
        return pulumi.get(self, "any_entity_reference_uuid")

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence['outputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory']]:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="scriptLists")
    def script_lists(self) -> Optional[Sequence['outputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList']]:
        return pulumi.get(self, "script_lists")


@pulumi.output_type
class RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: The name for the Recovery Plan.
        :param str value: value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableScriptExec":
            suggest = "enable_script_exec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_script_exec: bool,
                 timeout: Optional[str] = None):
        pulumi.set(__self__, "enable_script_exec", enable_script_exec)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="enableScriptExec")
    def enable_script_exec(self) -> bool:
        return pulumi.get(self, "enable_script_exec")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class RoleCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: - (Optional) Name of the role.
        :param str value: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RoleOwnerReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Optional) Name of the role.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RolePermissionReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: - the UUID(Required).
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Optional) Name of the role.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the role.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class RoleProjectReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Optional) Name of the role.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ServiceGroupServiceList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "icmpTypeCodeLists":
            suggest = "icmp_type_code_lists"
        elif key == "tcpPortRangeLists":
            suggest = "tcp_port_range_lists"
        elif key == "udpPortRangeLists":
            suggest = "udp_port_range_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceGroupServiceList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceGroupServiceList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceGroupServiceList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 icmp_type_code_lists: Optional[Sequence['outputs.ServiceGroupServiceListIcmpTypeCodeList']] = None,
                 protocol: Optional[str] = None,
                 tcp_port_range_lists: Optional[Sequence['outputs.ServiceGroupServiceListTcpPortRangeList']] = None,
                 udp_port_range_lists: Optional[Sequence['outputs.ServiceGroupServiceListUdpPortRangeList']] = None):
        """
        :param Sequence['ServiceGroupServiceListIcmpTypeCodeListArgs'] icmp_type_code_lists: - (Optional) ICMP type code list
        :param str protocol: - (Optional) The UserPrincipalName of the user from the directory service.
        :param Sequence['ServiceGroupServiceListTcpPortRangeListArgs'] tcp_port_range_lists: - (Optional) TCP Port range list
        :param Sequence['ServiceGroupServiceListUdpPortRangeListArgs'] udp_port_range_lists: - (Optional) UDP port range list
        """
        if icmp_type_code_lists is not None:
            pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if tcp_port_range_lists is not None:
            pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        if udp_port_range_lists is not None:
            pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Optional[Sequence['outputs.ServiceGroupServiceListIcmpTypeCodeList']]:
        """
        - (Optional) ICMP type code list
        """
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        - (Optional) The UserPrincipalName of the user from the directory service.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Optional[Sequence['outputs.ServiceGroupServiceListTcpPortRangeList']]:
        """
        - (Optional) TCP Port range list
        """
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Optional[Sequence['outputs.ServiceGroupServiceListUdpPortRangeList']]:
        """
        - (Optional) UDP port range list
        """
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class ServiceGroupServiceListIcmpTypeCodeList(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str code: - (Optional) Code as text
        :param str type: - (Optional) Type as text
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        - (Optional) Code as text
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        - (Optional) Type as text
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceGroupServiceListTcpPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceGroupServiceListTcpPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceGroupServiceListTcpPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceGroupServiceListTcpPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class ServiceGroupServiceListUdpPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceGroupServiceListUdpPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceGroupServiceListUdpPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceGroupServiceListUdpPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class StaticRoutesDefaultRouteNexthop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalSubnetReferenceUuid":
            suggest = "external_subnet_reference_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StaticRoutesDefaultRouteNexthop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StaticRoutesDefaultRouteNexthop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StaticRoutesDefaultRouteNexthop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_subnet_reference_uuid: Optional[str] = None):
        """
        :param str external_subnet_reference_uuid: Reference to a subnet.
        """
        if external_subnet_reference_uuid is not None:
            pulumi.set(__self__, "external_subnet_reference_uuid", external_subnet_reference_uuid)

    @property
    @pulumi.getter(name="externalSubnetReferenceUuid")
    def external_subnet_reference_uuid(self) -> Optional[str]:
        """
        Reference to a subnet.
        """
        return pulumi.get(self, "external_subnet_reference_uuid")


@pulumi.output_type
class StaticRoutesStaticRoutesList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalSubnetReferenceUuid":
            suggest = "external_subnet_reference_uuid"
        elif key == "vpnConnectionReferenceUuid":
            suggest = "vpn_connection_reference_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StaticRoutesStaticRoutesList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StaticRoutesStaticRoutesList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StaticRoutesStaticRoutesList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: str,
                 external_subnet_reference_uuid: Optional[str] = None,
                 vpn_connection_reference_uuid: Optional[str] = None):
        """
        :param str destination: Destination ip with prefix.
        :param str external_subnet_reference_uuid: Reference to a subnet. Supported with 2022.x .
        :param str vpn_connection_reference_uuid: Reference to a vpn connection.
        """
        pulumi.set(__self__, "destination", destination)
        if external_subnet_reference_uuid is not None:
            pulumi.set(__self__, "external_subnet_reference_uuid", external_subnet_reference_uuid)
        if vpn_connection_reference_uuid is not None:
            pulumi.set(__self__, "vpn_connection_reference_uuid", vpn_connection_reference_uuid)

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        Destination ip with prefix.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="externalSubnetReferenceUuid")
    def external_subnet_reference_uuid(self) -> Optional[str]:
        """
        Reference to a subnet. Supported with 2022.x .
        """
        return pulumi.get(self, "external_subnet_reference_uuid")

    @property
    @pulumi.getter(name="vpnConnectionReferenceUuid")
    def vpn_connection_reference_uuid(self) -> Optional[str]:
        """
        Reference to a vpn connection.
        """
        return pulumi.get(self, "vpn_connection_reference_uuid")


@pulumi.output_type
class SubnetCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: - (Optional) Subnet name (Readonly).
        :param str value: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Subnet name (Readonly).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class UserAccessControlPolicyReferenceList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class UserCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: - the name(Optional).
        :param str value: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class UserDirectoryServiceUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "directoryServiceReference":
            suggest = "directory_service_reference"
        elif key == "defaultUserPrincipalName":
            suggest = "default_user_principal_name"
        elif key == "userPrincipalName":
            suggest = "user_principal_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserDirectoryServiceUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserDirectoryServiceUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserDirectoryServiceUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 directory_service_reference: 'outputs.UserDirectoryServiceUserDirectoryServiceReference',
                 default_user_principal_name: Optional[str] = None,
                 user_principal_name: Optional[str] = None):
        """
        :param 'UserDirectoryServiceUserDirectoryServiceReferenceArgs' directory_service_reference: - (Optional) The reference to a directory service. See #reference for to look the supported attributes.
        :param str user_principal_name: - (Optional) The UserPrincipalName of the user from the directory service.
        """
        pulumi.set(__self__, "directory_service_reference", directory_service_reference)
        if default_user_principal_name is not None:
            pulumi.set(__self__, "default_user_principal_name", default_user_principal_name)
        if user_principal_name is not None:
            pulumi.set(__self__, "user_principal_name", user_principal_name)

    @property
    @pulumi.getter(name="directoryServiceReference")
    def directory_service_reference(self) -> 'outputs.UserDirectoryServiceUserDirectoryServiceReference':
        """
        - (Optional) The reference to a directory service. See #reference for to look the supported attributes.
        """
        return pulumi.get(self, "directory_service_reference")

    @property
    @pulumi.getter(name="defaultUserPrincipalName")
    def default_user_principal_name(self) -> Optional[str]:
        return pulumi.get(self, "default_user_principal_name")

    @property
    @pulumi.getter(name="userPrincipalName")
    def user_principal_name(self) -> Optional[str]:
        """
        - (Optional) The UserPrincipalName of the user from the directory service.
        """
        return pulumi.get(self, "user_principal_name")


@pulumi.output_type
class UserDirectoryServiceUserDirectoryServiceReference(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: - the UUID(Required).
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class UserGroupsCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: - subnet name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - subnet name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserGroupsDirectoryServiceOus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "distinguishedName":
            suggest = "distinguished_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserGroupsDirectoryServiceOus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserGroupsDirectoryServiceOus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserGroupsDirectoryServiceOus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 distinguished_name: str):
        """
        :param str distinguished_name: - (Required) The Distinguished name for the user group.
        """
        pulumi.set(__self__, "distinguished_name", distinguished_name)

    @property
    @pulumi.getter(name="distinguishedName")
    def distinguished_name(self) -> str:
        """
        - (Required) The Distinguished name for the user group.
        """
        return pulumi.get(self, "distinguished_name")


@pulumi.output_type
class UserGroupsDirectoryServiceUserGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "distinguishedName":
            suggest = "distinguished_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserGroupsDirectoryServiceUserGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserGroupsDirectoryServiceUserGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserGroupsDirectoryServiceUserGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 distinguished_name: str):
        """
        :param str distinguished_name: - (Required) The Distinguished name for the user group.
        """
        pulumi.set(__self__, "distinguished_name", distinguished_name)

    @property
    @pulumi.getter(name="distinguishedName")
    def distinguished_name(self) -> str:
        """
        - (Required) The Distinguished name for the user group.
        """
        return pulumi.get(self, "distinguished_name")


@pulumi.output_type
class UserGroupsSamlUserGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idpUuid":
            suggest = "idp_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserGroupsSamlUserGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserGroupsSamlUserGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserGroupsSamlUserGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 idp_uuid: str,
                 name: str):
        """
        :param str idp_uuid: - (Required) The UUID of the Identity Provider that the group belongs to.
        :param str name: - (Required) The name of the SAML group which the IDP provides.
        """
        pulumi.set(__self__, "idp_uuid", idp_uuid)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="idpUuid")
    def idp_uuid(self) -> str:
        """
        - (Required) The UUID of the Identity Provider that the group belongs to.
        """
        return pulumi.get(self, "idp_uuid")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) The name of the SAML group which the IDP provides.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class UserIdentityProviderUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityProviderReference":
            suggest = "identity_provider_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserIdentityProviderUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserIdentityProviderUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserIdentityProviderUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identity_provider_reference: 'outputs.UserIdentityProviderUserIdentityProviderReference',
                 username: Optional[str] = None):
        """
        :param 'UserIdentityProviderUserIdentityProviderReferenceArgs' identity_provider_reference: - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.
        :param str username: - (Optional) The username from identity provider. Name ID for SAML Identity Provider.
        """
        pulumi.set(__self__, "identity_provider_reference", identity_provider_reference)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="identityProviderReference")
    def identity_provider_reference(self) -> 'outputs.UserIdentityProviderUserIdentityProviderReference':
        """
        - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.
        """
        return pulumi.get(self, "identity_provider_reference")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        - (Optional) The username from identity provider. Name ID for SAML Identity Provider.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class UserIdentityProviderUserIdentityProviderReference(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: - the UUID(Required).
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class UserProjectReferenceList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class VirtualMachineCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: - (Required) The name for the vm.
        :param str value: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the vm.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualMachineDiskList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSourceReference":
            suggest = "data_source_reference"
        elif key == "deviceProperties":
            suggest = "device_properties"
        elif key == "diskSizeBytes":
            suggest = "disk_size_bytes"
        elif key == "diskSizeMib":
            suggest = "disk_size_mib"
        elif key == "storageConfig":
            suggest = "storage_config"
        elif key == "volumeGroupReference":
            suggest = "volume_group_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineDiskList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineDiskList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineDiskList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source_reference: Optional[Mapping[str, str]] = None,
                 device_properties: Optional['outputs.VirtualMachineDiskListDeviceProperties'] = None,
                 disk_size_bytes: Optional[int] = None,
                 disk_size_mib: Optional[int] = None,
                 storage_config: Optional['outputs.VirtualMachineDiskListStorageConfig'] = None,
                 uuid: Optional[str] = None,
                 volume_group_reference: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] data_source_reference: Reference to a data source.
               
               The disk_size (the disk size_mib and the disk_size_bytes attributes) is only honored by creating an empty disk. When you are creating from an image, the size is ignored and the disk becomes the size of the image from which it was cloned. In VM creation, you can't set either disk size_mib or disk_size_bytes when you set data_source_reference but, you can update the disk_size after creation (second apply).
        :param 'VirtualMachineDiskListDevicePropertiesArgs' device_properties: Properties to a device.
        :param int disk_size_bytes: Size of the disk in Bytes.
        :param int disk_size_mib: Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.
        :param str uuid: - (Optional) The device ID which is used to uniquely identify this particular disk.
        """
        if data_source_reference is not None:
            pulumi.set(__self__, "data_source_reference", data_source_reference)
        if device_properties is not None:
            pulumi.set(__self__, "device_properties", device_properties)
        if disk_size_bytes is not None:
            pulumi.set(__self__, "disk_size_bytes", disk_size_bytes)
        if disk_size_mib is not None:
            pulumi.set(__self__, "disk_size_mib", disk_size_mib)
        if storage_config is not None:
            pulumi.set(__self__, "storage_config", storage_config)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if volume_group_reference is not None:
            pulumi.set(__self__, "volume_group_reference", volume_group_reference)

    @property
    @pulumi.getter(name="dataSourceReference")
    def data_source_reference(self) -> Optional[Mapping[str, str]]:
        """
        Reference to a data source.

        The disk_size (the disk size_mib and the disk_size_bytes attributes) is only honored by creating an empty disk. When you are creating from an image, the size is ignored and the disk becomes the size of the image from which it was cloned. In VM creation, you can't set either disk size_mib or disk_size_bytes when you set data_source_reference but, you can update the disk_size after creation (second apply).
        """
        return pulumi.get(self, "data_source_reference")

    @property
    @pulumi.getter(name="deviceProperties")
    def device_properties(self) -> Optional['outputs.VirtualMachineDiskListDeviceProperties']:
        """
        Properties to a device.
        """
        return pulumi.get(self, "device_properties")

    @property
    @pulumi.getter(name="diskSizeBytes")
    def disk_size_bytes(self) -> Optional[int]:
        """
        Size of the disk in Bytes.
        """
        return pulumi.get(self, "disk_size_bytes")

    @property
    @pulumi.getter(name="diskSizeMib")
    def disk_size_mib(self) -> Optional[int]:
        """
        Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.
        """
        return pulumi.get(self, "disk_size_mib")

    @property
    @pulumi.getter(name="storageConfig")
    def storage_config(self) -> Optional['outputs.VirtualMachineDiskListStorageConfig']:
        return pulumi.get(self, "storage_config")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - (Optional) The device ID which is used to uniquely identify this particular disk.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="volumeGroupReference")
    def volume_group_reference(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "volume_group_reference")


@pulumi.output_type
class VirtualMachineDiskListDeviceProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceType":
            suggest = "device_type"
        elif key == "diskAddress":
            suggest = "disk_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineDiskListDeviceProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineDiskListDeviceProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineDiskListDeviceProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_type: Optional[str] = None,
                 disk_address: Optional[Mapping[str, str]] = None):
        """
        :param str device_type: - A Disk type (default: DISK).
        :param Mapping[str, str] disk_address: - Address of disk to boot from.
        """
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if disk_address is not None:
            pulumi.set(__self__, "disk_address", disk_address)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[str]:
        """
        - A Disk type (default: DISK).
        """
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="diskAddress")
    def disk_address(self) -> Optional[Mapping[str, str]]:
        """
        - Address of disk to boot from.
        """
        return pulumi.get(self, "disk_address")


@pulumi.output_type
class VirtualMachineDiskListStorageConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "flashMode":
            suggest = "flash_mode"
        elif key == "storageContainerReferences":
            suggest = "storage_container_references"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineDiskListStorageConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineDiskListStorageConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineDiskListStorageConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 flash_mode: Optional[str] = None,
                 storage_container_references: Optional[Sequence['outputs.VirtualMachineDiskListStorageConfigStorageContainerReference']] = None):
        """
        :param str flash_mode: - State of the storage policy to pin virtual disks to the hot tier. When specified as a VM attribute, the storage policy applies to all virtual disks of the VM unless overridden by the same attribute specified for a virtual disk.
        :param Sequence['VirtualMachineDiskListStorageConfigStorageContainerReferenceArgs'] storage_container_references: - Reference to a kind. Either one of (kind, uuid) or url needs to be specified. Requires Prism Central / AOS 5.17+.
               * `storage_container_reference.#.url`: - GET query on the URL will provide information on the source.
               * `storage_container_reference.#.kind`: - kind of the container reference
               * `storage_container_reference.#.name`: - name of the container reference
               * `storage_container_reference.#.uuid`: - uiid of the container reference
        """
        if flash_mode is not None:
            pulumi.set(__self__, "flash_mode", flash_mode)
        if storage_container_references is not None:
            pulumi.set(__self__, "storage_container_references", storage_container_references)

    @property
    @pulumi.getter(name="flashMode")
    def flash_mode(self) -> Optional[str]:
        """
        - State of the storage policy to pin virtual disks to the hot tier. When specified as a VM attribute, the storage policy applies to all virtual disks of the VM unless overridden by the same attribute specified for a virtual disk.
        """
        return pulumi.get(self, "flash_mode")

    @property
    @pulumi.getter(name="storageContainerReferences")
    def storage_container_references(self) -> Optional[Sequence['outputs.VirtualMachineDiskListStorageConfigStorageContainerReference']]:
        """
        - Reference to a kind. Either one of (kind, uuid) or url needs to be specified. Requires Prism Central / AOS 5.17+.
        * `storage_container_reference.#.url`: - GET query on the URL will provide information on the source.
        * `storage_container_reference.#.kind`: - kind of the container reference
        * `storage_container_reference.#.name`: - name of the container reference
        * `storage_container_reference.#.uuid`: - uiid of the container reference
        """
        return pulumi.get(self, "storage_container_references")


@pulumi.output_type
class VirtualMachineDiskListStorageConfigStorageContainerReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 url: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the vm.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the vm.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class VirtualMachineGpuList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceId":
            suggest = "device_id"
        elif key == "frameBufferSizeMib":
            suggest = "frame_buffer_size_mib"
        elif key == "guestDriverVersion":
            suggest = "guest_driver_version"
        elif key == "numVirtualDisplayHeads":
            suggest = "num_virtual_display_heads"
        elif key == "pciAddress":
            suggest = "pci_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineGpuList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineGpuList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineGpuList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_id: Optional[int] = None,
                 fraction: Optional[int] = None,
                 frame_buffer_size_mib: Optional[int] = None,
                 guest_driver_version: Optional[str] = None,
                 mode: Optional[str] = None,
                 name: Optional[str] = None,
                 num_virtual_display_heads: Optional[int] = None,
                 pci_address: Optional[str] = None,
                 uuid: Optional[str] = None,
                 vendor: Optional[str] = None):
        """
        :param int device_id: - (Computed) The device ID of the GPU.
        :param int fraction: Fraction of the physical GPU assigned.
        :param int frame_buffer_size_mib: - (ReadOnly) GPU frame buffer size in MiB.
        :param str guest_driver_version: - (ReadOnly) Last determined guest driver version.
        :param str mode: - (Optional) The mode of this GPU.
        :param str name: - (ReadOnly) Name of the GPU resource.
        :param int num_virtual_display_heads: - (ReadOnly) Number of supported virtual display heads.
        :param str pci_address: GPU {segment:bus:device:function} (sbdf) address if assigned.
        :param str uuid: - (ReadOnly) UUID of the GPU.
        :param str vendor: - (Optional) The vendor of the GPU.
        """
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if fraction is not None:
            pulumi.set(__self__, "fraction", fraction)
        if frame_buffer_size_mib is not None:
            pulumi.set(__self__, "frame_buffer_size_mib", frame_buffer_size_mib)
        if guest_driver_version is not None:
            pulumi.set(__self__, "guest_driver_version", guest_driver_version)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if num_virtual_display_heads is not None:
            pulumi.set(__self__, "num_virtual_display_heads", num_virtual_display_heads)
        if pci_address is not None:
            pulumi.set(__self__, "pci_address", pci_address)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[int]:
        """
        - (Computed) The device ID of the GPU.
        """
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter
    def fraction(self) -> Optional[int]:
        """
        Fraction of the physical GPU assigned.
        """
        return pulumi.get(self, "fraction")

    @property
    @pulumi.getter(name="frameBufferSizeMib")
    def frame_buffer_size_mib(self) -> Optional[int]:
        """
        - (ReadOnly) GPU frame buffer size in MiB.
        """
        return pulumi.get(self, "frame_buffer_size_mib")

    @property
    @pulumi.getter(name="guestDriverVersion")
    def guest_driver_version(self) -> Optional[str]:
        """
        - (ReadOnly) Last determined guest driver version.
        """
        return pulumi.get(self, "guest_driver_version")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        - (Optional) The mode of this GPU.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (ReadOnly) Name of the GPU resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numVirtualDisplayHeads")
    def num_virtual_display_heads(self) -> Optional[int]:
        """
        - (ReadOnly) Number of supported virtual display heads.
        """
        return pulumi.get(self, "num_virtual_display_heads")

    @property
    @pulumi.getter(name="pciAddress")
    def pci_address(self) -> Optional[str]:
        """
        GPU {segment:bus:device:function} (sbdf) address if assigned.
        """
        return pulumi.get(self, "pci_address")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - (ReadOnly) UUID of the GPU.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vendor(self) -> Optional[str]:
        """
        - (Optional) The vendor of the GPU.
        """
        return pulumi.get(self, "vendor")


@pulumi.output_type
class VirtualMachineNicList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipEndpointLists":
            suggest = "ip_endpoint_lists"
        elif key == "isConnected":
            suggest = "is_connected"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "networkFunctionChainReference":
            suggest = "network_function_chain_reference"
        elif key == "networkFunctionNicType":
            suggest = "network_function_nic_type"
        elif key == "nicType":
            suggest = "nic_type"
        elif key == "numQueues":
            suggest = "num_queues"
        elif key == "subnetName":
            suggest = "subnet_name"
        elif key == "subnetUuid":
            suggest = "subnet_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineNicList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineNicList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineNicList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_endpoint_lists: Optional[Sequence['outputs.VirtualMachineNicListIpEndpointList']] = None,
                 is_connected: Optional[str] = None,
                 mac_address: Optional[str] = None,
                 model: Optional[str] = None,
                 network_function_chain_reference: Optional[Mapping[str, str]] = None,
                 network_function_nic_type: Optional[str] = None,
                 nic_type: Optional[str] = None,
                 num_queues: Optional[int] = None,
                 subnet_name: Optional[str] = None,
                 subnet_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param Sequence['VirtualMachineNicListIpEndpointListArgs'] ip_endpoint_lists: - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
        :param str is_connected: - Indicates whether the serial port connection is connected or not (`true` or `false`).
        :param str mac_address: - The MAC address for the adapter.
        :param str model: - The model of this NIC. (Options : VIRTIO , E1000).
        :param Mapping[str, str] network_function_chain_reference: - The reference to a network_function_chain.
        :param str network_function_nic_type: - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
        :param str nic_type: - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
        :param int num_queues: - The number of tx/rx queue pairs for this NIC.
        :param str subnet_name: - The name of the subnet reference to.
        :param str subnet_uuid: - The reference to a subnet.
        :param str uuid: - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
        """
        if ip_endpoint_lists is not None:
            pulumi.set(__self__, "ip_endpoint_lists", ip_endpoint_lists)
        if is_connected is not None:
            pulumi.set(__self__, "is_connected", is_connected)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if network_function_chain_reference is not None:
            pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if network_function_nic_type is not None:
            pulumi.set(__self__, "network_function_nic_type", network_function_nic_type)
        if nic_type is not None:
            pulumi.set(__self__, "nic_type", nic_type)
        if num_queues is not None:
            pulumi.set(__self__, "num_queues", num_queues)
        if subnet_name is not None:
            pulumi.set(__self__, "subnet_name", subnet_name)
        if subnet_uuid is not None:
            pulumi.set(__self__, "subnet_uuid", subnet_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="ipEndpointLists")
    def ip_endpoint_lists(self) -> Optional[Sequence['outputs.VirtualMachineNicListIpEndpointList']]:
        """
        - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
        """
        return pulumi.get(self, "ip_endpoint_lists")

    @property
    @pulumi.getter(name="isConnected")
    def is_connected(self) -> Optional[str]:
        """
        - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
        return pulumi.get(self, "is_connected")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[str]:
        """
        - The MAC address for the adapter.
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def model(self) -> Optional[str]:
        """
        - The model of this NIC. (Options : VIRTIO , E1000).
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Optional[Mapping[str, str]]:
        """
        - The reference to a network_function_chain.
        """
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="networkFunctionNicType")
    def network_function_nic_type(self) -> Optional[str]:
        """
        - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
        """
        return pulumi.get(self, "network_function_nic_type")

    @property
    @pulumi.getter(name="nicType")
    def nic_type(self) -> Optional[str]:
        """
        - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
        """
        return pulumi.get(self, "nic_type")

    @property
    @pulumi.getter(name="numQueues")
    def num_queues(self) -> Optional[int]:
        """
        - The number of tx/rx queue pairs for this NIC.
        """
        return pulumi.get(self, "num_queues")

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> Optional[str]:
        """
        - The name of the subnet reference to.
        """
        return pulumi.get(self, "subnet_name")

    @property
    @pulumi.getter(name="subnetUuid")
    def subnet_uuid(self) -> Optional[str]:
        """
        - The reference to a subnet.
        """
        return pulumi.get(self, "subnet_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class VirtualMachineNicListIpEndpointList(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str ip: - Address string.
        :param str type: - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        - Address string.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class VirtualMachineNicListStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "floatingIp":
            suggest = "floating_ip"
        elif key == "ipEndpointLists":
            suggest = "ip_endpoint_lists"
        elif key == "isConnected":
            suggest = "is_connected"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "networkFunctionChainReference":
            suggest = "network_function_chain_reference"
        elif key == "networkFunctionNicType":
            suggest = "network_function_nic_type"
        elif key == "nicType":
            suggest = "nic_type"
        elif key == "numQueues":
            suggest = "num_queues"
        elif key == "subnetName":
            suggest = "subnet_name"
        elif key == "subnetUuid":
            suggest = "subnet_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineNicListStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineNicListStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineNicListStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 floating_ip: Optional[str] = None,
                 ip_endpoint_lists: Optional[Sequence['outputs.VirtualMachineNicListStatusIpEndpointList']] = None,
                 is_connected: Optional[str] = None,
                 mac_address: Optional[str] = None,
                 model: Optional[str] = None,
                 network_function_chain_reference: Optional[Mapping[str, str]] = None,
                 network_function_nic_type: Optional[str] = None,
                 nic_type: Optional[str] = None,
                 num_queues: Optional[int] = None,
                 subnet_name: Optional[str] = None,
                 subnet_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str floating_ip: -  The Floating IP associated with the vnic. (Only in `nic_list_status`)
        :param Sequence['VirtualMachineNicListStatusIpEndpointListArgs'] ip_endpoint_lists: - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
        :param str is_connected: - Indicates whether the serial port connection is connected or not (`true` or `false`).
        :param str mac_address: - The MAC address for the adapter.
        :param str model: - The model of this NIC. (Options : VIRTIO , E1000).
        :param Mapping[str, str] network_function_chain_reference: - The reference to a network_function_chain.
        :param str network_function_nic_type: - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
        :param str nic_type: - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
        :param int num_queues: - The number of tx/rx queue pairs for this NIC.
        :param str subnet_name: - The name of the subnet reference to.
        :param str subnet_uuid: - The reference to a subnet.
        :param str uuid: - the UUID(Required).
        """
        if floating_ip is not None:
            pulumi.set(__self__, "floating_ip", floating_ip)
        if ip_endpoint_lists is not None:
            pulumi.set(__self__, "ip_endpoint_lists", ip_endpoint_lists)
        if is_connected is not None:
            pulumi.set(__self__, "is_connected", is_connected)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if network_function_chain_reference is not None:
            pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if network_function_nic_type is not None:
            pulumi.set(__self__, "network_function_nic_type", network_function_nic_type)
        if nic_type is not None:
            pulumi.set(__self__, "nic_type", nic_type)
        if num_queues is not None:
            pulumi.set(__self__, "num_queues", num_queues)
        if subnet_name is not None:
            pulumi.set(__self__, "subnet_name", subnet_name)
        if subnet_uuid is not None:
            pulumi.set(__self__, "subnet_uuid", subnet_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> Optional[str]:
        """
        -  The Floating IP associated with the vnic. (Only in `nic_list_status`)
        """
        return pulumi.get(self, "floating_ip")

    @property
    @pulumi.getter(name="ipEndpointLists")
    def ip_endpoint_lists(self) -> Optional[Sequence['outputs.VirtualMachineNicListStatusIpEndpointList']]:
        """
        - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
        """
        return pulumi.get(self, "ip_endpoint_lists")

    @property
    @pulumi.getter(name="isConnected")
    def is_connected(self) -> Optional[str]:
        """
        - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
        return pulumi.get(self, "is_connected")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[str]:
        """
        - The MAC address for the adapter.
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def model(self) -> Optional[str]:
        """
        - The model of this NIC. (Options : VIRTIO , E1000).
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Optional[Mapping[str, str]]:
        """
        - The reference to a network_function_chain.
        """
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="networkFunctionNicType")
    def network_function_nic_type(self) -> Optional[str]:
        """
        - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
        """
        return pulumi.get(self, "network_function_nic_type")

    @property
    @pulumi.getter(name="nicType")
    def nic_type(self) -> Optional[str]:
        """
        - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
        """
        return pulumi.get(self, "nic_type")

    @property
    @pulumi.getter(name="numQueues")
    def num_queues(self) -> Optional[int]:
        """
        - The number of tx/rx queue pairs for this NIC.
        """
        return pulumi.get(self, "num_queues")

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> Optional[str]:
        """
        - The name of the subnet reference to.
        """
        return pulumi.get(self, "subnet_name")

    @property
    @pulumi.getter(name="subnetUuid")
    def subnet_uuid(self) -> Optional[str]:
        """
        - The reference to a subnet.
        """
        return pulumi.get(self, "subnet_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class VirtualMachineNicListStatusIpEndpointList(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str ip: - Address string.
        :param str type: - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        - Address string.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class VirtualMachineSerialPortList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isConnected":
            suggest = "is_connected"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineSerialPortList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineSerialPortList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineSerialPortList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: Optional[int] = None,
                 is_connected: Optional[bool] = None):
        """
        :param int index: - Index of the serial port (int).
        :param bool is_connected: - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
        if index is not None:
            pulumi.set(__self__, "index", index)
        if is_connected is not None:
            pulumi.set(__self__, "is_connected", is_connected)

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        """
        - Index of the serial port (int).
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="isConnected")
    def is_connected(self) -> Optional[bool]:
        """
        - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
        return pulumi.get(self, "is_connected")


@pulumi.output_type
class VpcCommonDomainNameServerIpList(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None):
        """
        :param str ip: ip address.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        ip address.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class VpcExternalSubnetListStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalSubnetReference":
            suggest = "external_subnet_reference"
        elif key == "activeGatewayNode":
            suggest = "active_gateway_node"
        elif key == "externalIpLists":
            suggest = "external_ip_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcExternalSubnetListStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcExternalSubnetListStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcExternalSubnetListStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_subnet_reference: Mapping[str, str],
                 active_gateway_node: Optional['outputs.VpcExternalSubnetListStatusActiveGatewayNode'] = None,
                 external_ip_lists: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        if active_gateway_node is not None:
            pulumi.set(__self__, "active_gateway_node", active_gateway_node)
        if external_ip_lists is not None:
            pulumi.set(__self__, "external_ip_lists", external_ip_lists)

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="activeGatewayNode")
    def active_gateway_node(self) -> Optional['outputs.VpcExternalSubnetListStatusActiveGatewayNode']:
        return pulumi.get(self, "active_gateway_node")

    @property
    @pulumi.getter(name="externalIpLists")
    def external_ip_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "external_ip_lists")


@pulumi.output_type
class VpcExternalSubnetListStatusActiveGatewayNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostReference":
            suggest = "host_reference"
        elif key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcExternalSubnetListStatusActiveGatewayNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcExternalSubnetListStatusActiveGatewayNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcExternalSubnetListStatusActiveGatewayNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_reference: Mapping[str, str],
                 ip_address: Optional[str] = None):
        pulumi.set(__self__, "host_reference", host_reference)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="hostReference")
    def host_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "host_reference")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class VpcExternallyRoutablePrefixList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prefixLength":
            suggest = "prefix_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcExternallyRoutablePrefixList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcExternallyRoutablePrefixList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcExternallyRoutablePrefixList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip: str,
                 prefix_length: int):
        """
        :param str ip: ip address.
        :param int prefix_length: prefix length.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        """
        prefix length.
        """
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetAccessControlPoliciesEntityResult(dict):
    def __init__(__self__, *,
                 access_control_policy_id: str,
                 api_version: str,
                 categories: Sequence['outputs.GetAccessControlPoliciesEntityCategoryResult'],
                 context_filter_lists: Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListResult'],
                 description: str,
                 metadata: Mapping[str, str],
                 name: str,
                 owner_reference: Mapping[str, str],
                 project_reference: Mapping[str, str],
                 role_references: Sequence['outputs.GetAccessControlPoliciesEntityRoleReferenceResult'],
                 state: str,
                 user_group_reference_lists: Sequence['outputs.GetAccessControlPoliciesEntityUserGroupReferenceListResult'],
                 user_reference_lists: Sequence['outputs.GetAccessControlPoliciesEntityUserReferenceListResult']):
        """
        :param str api_version: The version of the API.
        :param Sequence['GetAccessControlPoliciesEntityCategoryArgs'] categories: - The category values represented as a dictionary of key > list of values.
        :param str description: - The description of the Access Control Policy.
        :param Mapping[str, str] metadata: - The Access Control Policy kind metadata.
        :param str name: - the name(Optional).
        :param Mapping[str, str] owner_reference: - The reference to a user.
        :param Mapping[str, str] project_reference: - The reference to a project.
        :param Sequence['GetAccessControlPoliciesEntityRoleReferenceArgs'] role_references: - The reference to a role.
        :param str state: - The state of the Access Control Policy.
        :param Sequence['GetAccessControlPoliciesEntityUserGroupReferenceListArgs'] user_group_reference_lists: - The User group(s) being assigned a given role.
        :param Sequence['GetAccessControlPoliciesEntityUserReferenceListArgs'] user_reference_lists: - The User(s) being assigned a given role.
        """
        pulumi.set(__self__, "access_control_policy_id", access_control_policy_id)
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "context_filter_lists", context_filter_lists)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_reference", owner_reference)
        pulumi.set(__self__, "project_reference", project_reference)
        pulumi.set(__self__, "role_references", role_references)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "user_group_reference_lists", user_group_reference_lists)
        pulumi.set(__self__, "user_reference_lists", user_reference_lists)

    @property
    @pulumi.getter(name="accessControlPolicyId")
    def access_control_policy_id(self) -> str:
        return pulumi.get(self, "access_control_policy_id")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        The version of the API.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetAccessControlPoliciesEntityCategoryResult']:
        """
        - The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="contextFilterLists")
    def context_filter_lists(self) -> Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListResult']:
        return pulumi.get(self, "context_filter_lists")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        - The description of the Access Control Policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        - The Access Control Policy kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        """
        - The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Mapping[str, str]:
        """
        - The reference to a project.
        """
        return pulumi.get(self, "project_reference")

    @property
    @pulumi.getter(name="roleReferences")
    def role_references(self) -> Sequence['outputs.GetAccessControlPoliciesEntityRoleReferenceResult']:
        """
        - The reference to a role.
        """
        return pulumi.get(self, "role_references")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        - The state of the Access Control Policy.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="userGroupReferenceLists")
    def user_group_reference_lists(self) -> Sequence['outputs.GetAccessControlPoliciesEntityUserGroupReferenceListResult']:
        """
        - The User group(s) being assigned a given role.
        """
        return pulumi.get(self, "user_group_reference_lists")

    @property
    @pulumi.getter(name="userReferenceLists")
    def user_reference_lists(self) -> Sequence['outputs.GetAccessControlPoliciesEntityUserReferenceListResult']:
        """
        - The User(s) being assigned a given role.
        """
        return pulumi.get(self, "user_reference_lists")


@pulumi.output_type
class GetAccessControlPoliciesEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name(Optional).
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAccessControlPoliciesEntityContextFilterListResult(dict):
    def __init__(__self__, *,
                 entity_filter_expression_lists: Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListResult'],
                 scope_filter_expression_lists: Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListResult']):
        """
        :param Sequence['GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListArgs'] entity_filter_expression_lists: A list of Entity filter expressions.
        :param Sequence['GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListArgs'] scope_filter_expression_lists: - The device ID which is used to uniquely identify this particular disk.
        """
        pulumi.set(__self__, "entity_filter_expression_lists", entity_filter_expression_lists)
        pulumi.set(__self__, "scope_filter_expression_lists", scope_filter_expression_lists)

    @property
    @pulumi.getter(name="entityFilterExpressionLists")
    def entity_filter_expression_lists(self) -> Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListResult']:
        """
        A list of Entity filter expressions.
        """
        return pulumi.get(self, "entity_filter_expression_lists")

    @property
    @pulumi.getter(name="scopeFilterExpressionLists")
    def scope_filter_expression_lists(self) -> Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListResult']:
        """
        - The device ID which is used to uniquely identify this particular disk.
        """
        return pulumi.get(self, "scope_filter_expression_lists")


@pulumi.output_type
class GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListResult(dict):
    def __init__(__self__, *,
                 left_hand_side_entity_type: str,
                 operator: str,
                 right_hand_sides: Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideResult']):
        """
        :param str left_hand_side_entity_type: -  The LHS of the filter expression - the entity type.
        :param str operator: - The operator in the filter expression.
        :param Sequence['GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideArgs'] right_hand_sides: - The right hand side (RHS) of an scope expression.
        """
        pulumi.set(__self__, "left_hand_side_entity_type", left_hand_side_entity_type)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "right_hand_sides", right_hand_sides)

    @property
    @pulumi.getter(name="leftHandSideEntityType")
    def left_hand_side_entity_type(self) -> str:
        """
        -  The LHS of the filter expression - the entity type.
        """
        return pulumi.get(self, "left_hand_side_entity_type")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        - The operator in the filter expression.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="rightHandSides")
    def right_hand_sides(self) -> Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideResult']:
        """
        - The right hand side (RHS) of an scope expression.
        """
        return pulumi.get(self, "right_hand_sides")


@pulumi.output_type
class GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideResult(dict):
    def __init__(__self__, *,
                 categories: Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategoryResult'],
                 collection: str,
                 uuid_lists: Sequence[str]):
        """
        :param Sequence['GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategoryArgs'] categories: - The category values represented as a dictionary of key > list of values.
        :param str collection: -  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        :param Sequence[str] uuid_lists: - The explicit list of UUIDs for the given kind.
        """
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "collection", collection)
        pulumi.set(__self__, "uuid_lists", uuid_lists)

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategoryResult']:
        """
        - The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def collection(self) -> str:
        """
        -  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter(name="uuidLists")
    def uuid_lists(self) -> Sequence[str]:
        """
        - The explicit list of UUIDs for the given kind.
        """
        return pulumi.get(self, "uuid_lists")


@pulumi.output_type
class GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name(Optional).
        :param Sequence[str] values: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        - value of the key.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListResult(dict):
    def __init__(__self__, *,
                 left_hand_side: str,
                 operator: str,
                 right_hand_sides: Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideResult']):
        """
        :param str left_hand_side: -  The LHS of the filter expression - the scope type.
        :param str operator: - The operator in the filter expression.
        :param Sequence['GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideArgs'] right_hand_sides: - The right hand side (RHS) of an scope expression.
        """
        pulumi.set(__self__, "left_hand_side", left_hand_side)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "right_hand_sides", right_hand_sides)

    @property
    @pulumi.getter(name="leftHandSide")
    def left_hand_side(self) -> str:
        """
        -  The LHS of the filter expression - the scope type.
        """
        return pulumi.get(self, "left_hand_side")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        - The operator in the filter expression.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="rightHandSides")
    def right_hand_sides(self) -> Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideResult']:
        """
        - The right hand side (RHS) of an scope expression.
        """
        return pulumi.get(self, "right_hand_sides")


@pulumi.output_type
class GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideResult(dict):
    def __init__(__self__, *,
                 categories: Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategoryResult'],
                 collection: str,
                 uuid_lists: Sequence[str]):
        """
        :param Sequence['GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategoryArgs'] categories: - The category values represented as a dictionary of key > list of values.
        :param str collection: -  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        :param Sequence[str] uuid_lists: - The explicit list of UUIDs for the given kind.
        """
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "collection", collection)
        pulumi.set(__self__, "uuid_lists", uuid_lists)

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategoryResult']:
        """
        - The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def collection(self) -> str:
        """
        -  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter(name="uuidLists")
    def uuid_lists(self) -> Sequence[str]:
        """
        - The explicit list of UUIDs for the given kind.
        """
        return pulumi.get(self, "uuid_lists")


@pulumi.output_type
class GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name(Optional).
        :param Sequence[str] values: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        - value of the key.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAccessControlPoliciesEntityRoleReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetAccessControlPoliciesEntityUserGroupReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetAccessControlPoliciesEntityUserReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetAccessControlPoliciesMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")


@pulumi.output_type
class GetAccessControlPolicyCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name(Optional).
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAccessControlPolicyContextFilterListResult(dict):
    def __init__(__self__, *,
                 entity_filter_expression_lists: Sequence['outputs.GetAccessControlPolicyContextFilterListEntityFilterExpressionListResult'],
                 scope_filter_expression_lists: Sequence['outputs.GetAccessControlPolicyContextFilterListScopeFilterExpressionListResult']):
        """
        :param Sequence['GetAccessControlPolicyContextFilterListEntityFilterExpressionListArgs'] entity_filter_expression_lists: A list of Entity filter expressions.
        :param Sequence['GetAccessControlPolicyContextFilterListScopeFilterExpressionListArgs'] scope_filter_expression_lists: - The device ID which is used to uniquely identify this particular disk.
        """
        pulumi.set(__self__, "entity_filter_expression_lists", entity_filter_expression_lists)
        pulumi.set(__self__, "scope_filter_expression_lists", scope_filter_expression_lists)

    @property
    @pulumi.getter(name="entityFilterExpressionLists")
    def entity_filter_expression_lists(self) -> Sequence['outputs.GetAccessControlPolicyContextFilterListEntityFilterExpressionListResult']:
        """
        A list of Entity filter expressions.
        """
        return pulumi.get(self, "entity_filter_expression_lists")

    @property
    @pulumi.getter(name="scopeFilterExpressionLists")
    def scope_filter_expression_lists(self) -> Sequence['outputs.GetAccessControlPolicyContextFilterListScopeFilterExpressionListResult']:
        """
        - The device ID which is used to uniquely identify this particular disk.
        """
        return pulumi.get(self, "scope_filter_expression_lists")


@pulumi.output_type
class GetAccessControlPolicyContextFilterListEntityFilterExpressionListResult(dict):
    def __init__(__self__, *,
                 left_hand_side_entity_type: str,
                 operator: str,
                 right_hand_sides: Sequence['outputs.GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideResult']):
        """
        :param str left_hand_side_entity_type: -  The LHS of the filter expression - the entity type.
        :param str operator: - The operator in the filter expression.
        :param Sequence['GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs'] right_hand_sides: - The right hand side (RHS) of an scope expression.
        """
        pulumi.set(__self__, "left_hand_side_entity_type", left_hand_side_entity_type)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "right_hand_sides", right_hand_sides)

    @property
    @pulumi.getter(name="leftHandSideEntityType")
    def left_hand_side_entity_type(self) -> str:
        """
        -  The LHS of the filter expression - the entity type.
        """
        return pulumi.get(self, "left_hand_side_entity_type")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        - The operator in the filter expression.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="rightHandSides")
    def right_hand_sides(self) -> Sequence['outputs.GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideResult']:
        """
        - The right hand side (RHS) of an scope expression.
        """
        return pulumi.get(self, "right_hand_sides")


@pulumi.output_type
class GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideResult(dict):
    def __init__(__self__, *,
                 categories: Sequence['outputs.GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoryResult'],
                 collection: str,
                 uuid_lists: Sequence[str]):
        """
        :param Sequence['GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoryArgs'] categories: - The category values represented as a dictionary of key > list of values.
        :param str collection: -  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        :param Sequence[str] uuid_lists: - The explicit list of UUIDs for the given kind.
        """
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "collection", collection)
        pulumi.set(__self__, "uuid_lists", uuid_lists)

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoryResult']:
        """
        - The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def collection(self) -> str:
        """
        -  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter(name="uuidLists")
    def uuid_lists(self) -> Sequence[str]:
        """
        - The explicit list of UUIDs for the given kind.
        """
        return pulumi.get(self, "uuid_lists")


@pulumi.output_type
class GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name(Optional).
        :param Sequence[str] values: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        - value of the key.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAccessControlPolicyContextFilterListScopeFilterExpressionListResult(dict):
    def __init__(__self__, *,
                 left_hand_side: str,
                 operator: str,
                 right_hand_sides: Sequence['outputs.GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideResult']):
        """
        :param str left_hand_side: -  The LHS of the filter expression - the scope type.
        :param str operator: - The operator in the filter expression.
        :param Sequence['GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideArgs'] right_hand_sides: - The right hand side (RHS) of an scope expression.
        """
        pulumi.set(__self__, "left_hand_side", left_hand_side)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "right_hand_sides", right_hand_sides)

    @property
    @pulumi.getter(name="leftHandSide")
    def left_hand_side(self) -> str:
        """
        -  The LHS of the filter expression - the scope type.
        """
        return pulumi.get(self, "left_hand_side")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        - The operator in the filter expression.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="rightHandSides")
    def right_hand_sides(self) -> Sequence['outputs.GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideResult']:
        """
        - The right hand side (RHS) of an scope expression.
        """
        return pulumi.get(self, "right_hand_sides")


@pulumi.output_type
class GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideResult(dict):
    def __init__(__self__, *,
                 categories: Sequence['outputs.GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoryResult'],
                 collection: str,
                 uuid_lists: Sequence[str]):
        """
        :param Sequence['GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoryArgs'] categories: - The category values represented as a dictionary of key > list of values.
        :param str collection: -  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        :param Sequence[str] uuid_lists: - The explicit list of UUIDs for the given kind.
        """
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "collection", collection)
        pulumi.set(__self__, "uuid_lists", uuid_lists)

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoryResult']:
        """
        - The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def collection(self) -> str:
        """
        -  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter(name="uuidLists")
    def uuid_lists(self) -> Sequence[str]:
        """
        - The explicit list of UUIDs for the given kind.
        """
        return pulumi.get(self, "uuid_lists")


@pulumi.output_type
class GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name(Optional).
        :param Sequence[str] values: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        - value of the key.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAccessControlPolicyRoleReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetAccessControlPolicyUserGroupReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetAccessControlPolicyUserReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetAddressGroupIpAddressBlockListResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 prefix_length: int):
        """
        :param str ip: - (ReadOnly) IP of the address block
        :param int prefix_length: - (ReadOnly) Prefix length of address block in int
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        - (ReadOnly) IP of the address block
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        """
        - (ReadOnly) Prefix length of address block in int
        """
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetAddressGroupsEntityResult(dict):
    def __init__(__self__, *,
                 address_groups: Sequence['outputs.GetAddressGroupsEntityAddressGroupResult'],
                 associated_policies_lists: Sequence['outputs.GetAddressGroupsEntityAssociatedPoliciesListResult'],
                 uuid: str):
        """
        :param Sequence['GetAddressGroupsEntityAddressGroupArgs'] address_groups: Information about address_group
        :param Sequence['GetAddressGroupsEntityAssociatedPoliciesListArgs'] associated_policies_lists: List of associated policies to address group
        :param str uuid: - (ReadOnly) UUID of associated policy
        """
        pulumi.set(__self__, "address_groups", address_groups)
        pulumi.set(__self__, "associated_policies_lists", associated_policies_lists)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="addressGroups")
    def address_groups(self) -> Sequence['outputs.GetAddressGroupsEntityAddressGroupResult']:
        """
        Information about address_group
        """
        return pulumi.get(self, "address_groups")

    @property
    @pulumi.getter(name="associatedPoliciesLists")
    def associated_policies_lists(self) -> Sequence['outputs.GetAddressGroupsEntityAssociatedPoliciesListResult']:
        """
        List of associated policies to address group
        """
        return pulumi.get(self, "associated_policies_lists")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - (ReadOnly) UUID of associated policy
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetAddressGroupsEntityAddressGroupResult(dict):
    def __init__(__self__, *,
                 address_group_string: str,
                 description: str,
                 ip_address_block_lists: Sequence['outputs.GetAddressGroupsEntityAddressGroupIpAddressBlockListResult'],
                 name: str):
        """
        :param str address_group_string: - (ReadOnly) Address Group string
        :param str description: - (ReadOnly) Description of the address group
        :param Sequence['GetAddressGroupsEntityAddressGroupIpAddressBlockListArgs'] ip_address_block_lists: - (ReadOnly) list of IP address blocks with their prefix length
        :param str name: - (ReadOnly) Name of associated policy
        """
        pulumi.set(__self__, "address_group_string", address_group_string)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "ip_address_block_lists", ip_address_block_lists)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="addressGroupString")
    def address_group_string(self) -> str:
        """
        - (ReadOnly) Address Group string
        """
        return pulumi.get(self, "address_group_string")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        - (ReadOnly) Description of the address group
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ipAddressBlockLists")
    def ip_address_block_lists(self) -> Sequence['outputs.GetAddressGroupsEntityAddressGroupIpAddressBlockListResult']:
        """
        - (ReadOnly) list of IP address blocks with their prefix length
        """
        return pulumi.get(self, "ip_address_block_lists")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (ReadOnly) Name of associated policy
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAddressGroupsEntityAddressGroupIpAddressBlockListResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 prefix_length: int):
        """
        :param str ip: - (ReadOnly) IP of the address block
        :param int prefix_length: - (ReadOnly) Prefix length of address block in int
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        - (ReadOnly) IP of the address block
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        """
        - (ReadOnly) Prefix length of address block in int
        """
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetAddressGroupsEntityAssociatedPoliciesListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str name: - (ReadOnly) Name of associated policy
        :param str uuid: - (ReadOnly) UUID of associated policy
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (ReadOnly) Name of associated policy
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - (ReadOnly) UUID of associated policy
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetAddressGroupsMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        """
        :param str filter: (Optional) Filter in FIQL Syntax
        :param int length: (Optional) Integer
        :param int offset: (Optional) Integer
        :param str sort_attribute: (Optional) attribute to sort
        :param str sort_order: (Optional) order of sorting
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        """
        (Optional) Filter in FIQL Syntax
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        """
        (Optional) Integer
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        (Optional) Integer
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        """
        (Optional) attribute to sort
        """
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        """
        (Optional) order of sorting
        """
        return pulumi.get(self, "sort_order")


@pulumi.output_type
class GetAssertHelperCheckResult(dict):
    def __init__(__self__, *,
                 condition: bool,
                 error_message: str):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "error_message", error_message)

    @property
    @pulumi.getter
    def condition(self) -> bool:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        return pulumi.get(self, "error_message")


@pulumi.output_type
class GetClusterAuthorizedPublicKeyListResult(dict):
    def __init__(__self__, *,
                 key: str,
                 name: str):
        """
        :param str name: Represents the name of cluster
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Represents the name of cluster
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClusterCaCertificateListResult(dict):
    def __init__(__self__, *,
                 ca_name: str,
                 certificate: str):
        pulumi.set(__self__, "ca_name", ca_name)
        pulumi.set(__self__, "certificate", certificate)

    @property
    @pulumi.getter(name="caName")
    def ca_name(self) -> str:
        return pulumi.get(self, "ca_name")

    @property
    @pulumi.getter
    def certificate(self) -> str:
        return pulumi.get(self, "certificate")


@pulumi.output_type
class GetClusterCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the key name.
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the key name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetClusterHttpProxyListResult(dict):
    def __init__(__self__, *,
                 address: Mapping[str, str],
                 credentials: Mapping[str, str],
                 proxy_type_lists: Sequence[str]):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "proxy_type_lists", proxy_type_lists)

    @property
    @pulumi.getter
    def address(self) -> Mapping[str, str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def credentials(self) -> Mapping[str, str]:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="proxyTypeLists")
    def proxy_type_lists(self) -> Sequence[str]:
        return pulumi.get(self, "proxy_type_lists")


@pulumi.output_type
class GetClusterHttpProxyWhitelistResult(dict):
    def __init__(__self__, *,
                 target: str,
                 target_type: str):
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "target_type", target_type)

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> str:
        return pulumi.get(self, "target_type")


@pulumi.output_type
class GetClusterManagementServerListResult(dict):
    def __init__(__self__, *,
                 drs_enabled: bool,
                 ip: str,
                 status_lists: Sequence[str],
                 type: str):
        pulumi.set(__self__, "drs_enabled", drs_enabled)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "status_lists", status_lists)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="drsEnabled")
    def drs_enabled(self) -> bool:
        return pulumi.get(self, "drs_enabled")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="statusLists")
    def status_lists(self) -> Sequence[str]:
        return pulumi.get(self, "status_lists")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetClusterNodeResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 type: str,
                 version: str):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetClustersEntityResult(dict):
    def __init__(__self__, *,
                 analysis_vm_efficiency_map: Mapping[str, str],
                 api_version: str,
                 authorized_public_key_lists: Sequence['outputs.GetClustersEntityAuthorizedPublicKeyListResult'],
                 build: Mapping[str, str],
                 ca_certificate_lists: Sequence['outputs.GetClustersEntityCaCertificateListResult'],
                 categories: Sequence['outputs.GetClustersEntityCategoryResult'],
                 certification_signing_info: Mapping[str, str],
                 client_auth: Mapping[str, str],
                 cluster_arch: str,
                 domain_server_credentials: Mapping[str, str],
                 domain_server_name: str,
                 domain_server_nameserver: str,
                 enabled_feature_lists: Sequence[str],
                 encryption_status: str,
                 external_data_services_ip: str,
                 external_ip: str,
                 external_subnet: str,
                 gpu_driver_version: str,
                 http_proxy_lists: Sequence['outputs.GetClustersEntityHttpProxyListResult'],
                 http_proxy_whitelists: Sequence['outputs.GetClustersEntityHttpProxyWhitelistResult'],
                 internal_subnet: str,
                 is_available: bool,
                 management_server_lists: Sequence['outputs.GetClustersEntityManagementServerListResult'],
                 masquerading_ip: str,
                 masquerading_port: int,
                 metadata: Mapping[str, str],
                 name: str,
                 name_server_ip_lists: Sequence[str],
                 nfs_subnet_whitelists: Sequence[str],
                 nodes: Sequence['outputs.GetClustersEntityNodeResult'],
                 ntp_server_ip_lists: Sequence[str],
                 operation_mode: str,
                 owner_reference: Mapping[str, str],
                 project_reference: Mapping[str, str],
                 service_lists: Sequence[str],
                 smtp_server_address: Mapping[str, str],
                 smtp_server_credentials: Mapping[str, str],
                 smtp_server_email_address: str,
                 smtp_server_proxy_type_lists: Sequence[str],
                 smtp_server_type: str,
                 software_map_ncc: Mapping[str, str],
                 software_map_nos: Mapping[str, str],
                 ssl_key_expire_datetime: str,
                 ssl_key_name: str,
                 ssl_key_signing_info: Mapping[str, str],
                 ssl_key_type: str,
                 state: str,
                 supported_information_verbosity: str,
                 timezone: str):
        """
        :param Mapping[str, str] analysis_vm_efficiency_map: - Map of cluster efficiency which includes numbers of inefficient vms. The value is populated by analytics on PC. (Readonly)
        :param str api_version: The API version.
        :param Mapping[str, str] build: - Cluster build details.
        :param Sequence['GetClustersEntityCaCertificateListArgs'] ca_certificate_lists: - Zone name used in value of TZ environment variable.
        :param Sequence['GetClustersEntityCategoryArgs'] categories: - Categories for the image.
        :param Mapping[str, str] certification_signing_info: - Customer information used in Certificate Signing Request for creating digital certificates.
        :param Mapping[str, str] client_auth: - Client authentication config.
        :param str cluster_arch: - Cluster architecture. (Readonly, Options: Options : X86_64 , PPC64LE)
        :param Mapping[str, str] domain_server_credentials: - Cluster domain credentials.
        :param str domain_server_name: - Joined domain name. In 'put' request, empty name will unjoin the cluster from current domain.
        :param str domain_server_nameserver: -  The IP of the nameserver that can resolve the domain name. Must set when joining the domain.
        :param Sequence[str] enabled_feature_lists: - Array of enabled features.
        :param str encryption_status: - Cluster encryption status.
        :param str external_data_services_ip: - The cluster IP address that provides external entities access to various cluster data services.
        :param str external_ip: - The local IP of cluster visible externally.
        :param str external_subnet: - External subnet for cross server communication. The format is IP/netmask. (default 172.16.0.0/255.240.0.0)
        :param str gpu_driver_version: - GPU driver version.
        :param Sequence['GetClustersEntityHttpProxyListArgs'] http_proxy_lists: - List of proxies to connect to the service centers.
        :param Sequence['GetClustersEntityHttpProxyWhitelistArgs'] http_proxy_whitelists: - HTTP proxy whitelist.
        :param str internal_subnet: - The internal subnet is local to every server - its not visible outside.iSCSI requests generated internally within the appliance (by user VMs or VMFS) are sent to the internal subnet. The format is IP/netmask.
        :param bool is_available: - Indicates if cluster is available to contact. (Readonly)
        :param Sequence['GetClustersEntityManagementServerListArgs'] management_server_lists: - List of cluster management servers. (Readonly)
        :param str masquerading_ip: - The cluster NAT'd or proxy IP which maps to the cluster local IP.
        :param int masquerading_port: - Port used together with masquerading_ip to connect to the cluster.
        :param Mapping[str, str] metadata: - The image kind metadata.
        :param str name: -  The name for the image.
        :param Sequence[str] name_server_ip_lists: - The list of IP addresses of the name servers.
        :param Sequence[str] nfs_subnet_whitelists: - Comma separated list of subnets (of the form 'a.b.c.d/l.m.n.o') that are allowed to send NFS requests to this container. If not specified, the global NFS whitelist will be looked up for access permission. The internal subnet is always automatically considered part of the whitelist, even if the field below does not explicitly specify it. Similarly, all the hypervisor IPs are considered part of the whitelist. Finally, to permit debugging, all of the SVMs local IPs are considered to be implicitly part of the whitelist.
        :param Sequence[str] ntp_server_ip_lists: - The list of IP addresses or FQDNs of the NTP servers.
        :param str operation_mode: - Cluster operation mode. - 'NORMAL': Cluster is operating normally. - 'READ_ONLY': Cluster is operating in read only mode. - 'STAND_ALONE': Only one node is operational in the cluster. This is valid only for single node or two node clusters. - 'SWITCH_TO_TWO_NODE': Cluster is moving from single node to two node cluster. - 'OVERRIDE': Valid only for single node cluster. If the user wants to run vms on a single node cluster in read only mode, he can set the cluster peration mode to override. Writes will be allowed in override mode.
        :param Mapping[str, str] owner_reference: - The reference to a user.
        :param Mapping[str, str] project_reference: - The reference to a project.
        :param Sequence[str] service_lists: - Array of enabled cluster services. For example, a cluster can function as both AOS and cloud data gateway. - 'AOS': Regular Prism Element - 'PRISM_CENTRAL': Prism Central - 'CLOUD_DATA_GATEWAY': Cloud backup and DR gateway - 'AFS': Cluster for file server - 'WITNESS' : Witness cluster - 'XI_PORTAL': Xi cluster.
        :param Mapping[str, str] smtp_server_address: - SMTP Server Address.
        :param Mapping[str, str] smtp_server_credentials: - SMTP Server Credentials.
        :param str smtp_server_email_address: - SMTP Server Email Address.
        :param Sequence[str] smtp_server_proxy_type_lists: - SMTP Server Proxy Type List
        :param str smtp_server_type: - SMTP Server type.
        :param Mapping[str, str] software_map_ncc: - Map of software on the cluster with software type as the key.
        :param Mapping[str, str] software_map_nos: - Map of software on the cluster with software type as the key.
        :param str ssl_key_expire_datetime: - UTC date and time in RFC-3339 format when the key expires
        :param Mapping[str, str] ssl_key_signing_info: - Customer information used in Certificate Signing Request for creating digital certificates.
        :param str ssl_key_type: - SSL key type. Key types with RSA_2048, ECDSA_256 and ECDSA_384 are supported for key generation and importing.
        :param str state: - The state of the cluster entity.
        :param str supported_information_verbosity: - Verbosity level settings for populating support information. - 'Nothing': Send nothing - 'Basic': Send basic information - skip core dump and hypervisor stats information - 'BasicPlusCoreDump': Send basic and core dump information - 'All': Send all information (Default value: BASIC_PLUS_CORE_DUMP)
        :param str timezone: - Zone name used in value of TZ environment variable.
        """
        pulumi.set(__self__, "analysis_vm_efficiency_map", analysis_vm_efficiency_map)
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "authorized_public_key_lists", authorized_public_key_lists)
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "ca_certificate_lists", ca_certificate_lists)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "certification_signing_info", certification_signing_info)
        pulumi.set(__self__, "client_auth", client_auth)
        pulumi.set(__self__, "cluster_arch", cluster_arch)
        pulumi.set(__self__, "domain_server_credentials", domain_server_credentials)
        pulumi.set(__self__, "domain_server_name", domain_server_name)
        pulumi.set(__self__, "domain_server_nameserver", domain_server_nameserver)
        pulumi.set(__self__, "enabled_feature_lists", enabled_feature_lists)
        pulumi.set(__self__, "encryption_status", encryption_status)
        pulumi.set(__self__, "external_data_services_ip", external_data_services_ip)
        pulumi.set(__self__, "external_ip", external_ip)
        pulumi.set(__self__, "external_subnet", external_subnet)
        pulumi.set(__self__, "gpu_driver_version", gpu_driver_version)
        pulumi.set(__self__, "http_proxy_lists", http_proxy_lists)
        pulumi.set(__self__, "http_proxy_whitelists", http_proxy_whitelists)
        pulumi.set(__self__, "internal_subnet", internal_subnet)
        pulumi.set(__self__, "is_available", is_available)
        pulumi.set(__self__, "management_server_lists", management_server_lists)
        pulumi.set(__self__, "masquerading_ip", masquerading_ip)
        pulumi.set(__self__, "masquerading_port", masquerading_port)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_server_ip_lists", name_server_ip_lists)
        pulumi.set(__self__, "nfs_subnet_whitelists", nfs_subnet_whitelists)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "ntp_server_ip_lists", ntp_server_ip_lists)
        pulumi.set(__self__, "operation_mode", operation_mode)
        pulumi.set(__self__, "owner_reference", owner_reference)
        pulumi.set(__self__, "project_reference", project_reference)
        pulumi.set(__self__, "service_lists", service_lists)
        pulumi.set(__self__, "smtp_server_address", smtp_server_address)
        pulumi.set(__self__, "smtp_server_credentials", smtp_server_credentials)
        pulumi.set(__self__, "smtp_server_email_address", smtp_server_email_address)
        pulumi.set(__self__, "smtp_server_proxy_type_lists", smtp_server_proxy_type_lists)
        pulumi.set(__self__, "smtp_server_type", smtp_server_type)
        pulumi.set(__self__, "software_map_ncc", software_map_ncc)
        pulumi.set(__self__, "software_map_nos", software_map_nos)
        pulumi.set(__self__, "ssl_key_expire_datetime", ssl_key_expire_datetime)
        pulumi.set(__self__, "ssl_key_name", ssl_key_name)
        pulumi.set(__self__, "ssl_key_signing_info", ssl_key_signing_info)
        pulumi.set(__self__, "ssl_key_type", ssl_key_type)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "supported_information_verbosity", supported_information_verbosity)
        pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="analysisVmEfficiencyMap")
    def analysis_vm_efficiency_map(self) -> Mapping[str, str]:
        """
        - Map of cluster efficiency which includes numbers of inefficient vms. The value is populated by analytics on PC. (Readonly)
        """
        return pulumi.get(self, "analysis_vm_efficiency_map")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        The API version.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="authorizedPublicKeyLists")
    def authorized_public_key_lists(self) -> Sequence['outputs.GetClustersEntityAuthorizedPublicKeyListResult']:
        return pulumi.get(self, "authorized_public_key_lists")

    @property
    @pulumi.getter
    def build(self) -> Mapping[str, str]:
        """
        - Cluster build details.
        """
        return pulumi.get(self, "build")

    @property
    @pulumi.getter(name="caCertificateLists")
    def ca_certificate_lists(self) -> Sequence['outputs.GetClustersEntityCaCertificateListResult']:
        """
        - Zone name used in value of TZ environment variable.
        """
        return pulumi.get(self, "ca_certificate_lists")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetClustersEntityCategoryResult']:
        """
        - Categories for the image.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="certificationSigningInfo")
    def certification_signing_info(self) -> Mapping[str, str]:
        """
        - Customer information used in Certificate Signing Request for creating digital certificates.
        """
        return pulumi.get(self, "certification_signing_info")

    @property
    @pulumi.getter(name="clientAuth")
    def client_auth(self) -> Mapping[str, str]:
        """
        - Client authentication config.
        """
        return pulumi.get(self, "client_auth")

    @property
    @pulumi.getter(name="clusterArch")
    def cluster_arch(self) -> str:
        """
        - Cluster architecture. (Readonly, Options: Options : X86_64 , PPC64LE)
        """
        return pulumi.get(self, "cluster_arch")

    @property
    @pulumi.getter(name="domainServerCredentials")
    def domain_server_credentials(self) -> Mapping[str, str]:
        """
        - Cluster domain credentials.
        """
        return pulumi.get(self, "domain_server_credentials")

    @property
    @pulumi.getter(name="domainServerName")
    def domain_server_name(self) -> str:
        """
        - Joined domain name. In 'put' request, empty name will unjoin the cluster from current domain.
        """
        return pulumi.get(self, "domain_server_name")

    @property
    @pulumi.getter(name="domainServerNameserver")
    def domain_server_nameserver(self) -> str:
        """
        -  The IP of the nameserver that can resolve the domain name. Must set when joining the domain.
        """
        return pulumi.get(self, "domain_server_nameserver")

    @property
    @pulumi.getter(name="enabledFeatureLists")
    def enabled_feature_lists(self) -> Sequence[str]:
        """
        - Array of enabled features.
        """
        return pulumi.get(self, "enabled_feature_lists")

    @property
    @pulumi.getter(name="encryptionStatus")
    def encryption_status(self) -> str:
        """
        - Cluster encryption status.
        """
        return pulumi.get(self, "encryption_status")

    @property
    @pulumi.getter(name="externalDataServicesIp")
    def external_data_services_ip(self) -> str:
        """
        - The cluster IP address that provides external entities access to various cluster data services.
        """
        return pulumi.get(self, "external_data_services_ip")

    @property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> str:
        """
        - The local IP of cluster visible externally.
        """
        return pulumi.get(self, "external_ip")

    @property
    @pulumi.getter(name="externalSubnet")
    def external_subnet(self) -> str:
        """
        - External subnet for cross server communication. The format is IP/netmask. (default 172.16.0.0/255.240.0.0)
        """
        return pulumi.get(self, "external_subnet")

    @property
    @pulumi.getter(name="gpuDriverVersion")
    def gpu_driver_version(self) -> str:
        """
        - GPU driver version.
        """
        return pulumi.get(self, "gpu_driver_version")

    @property
    @pulumi.getter(name="httpProxyLists")
    def http_proxy_lists(self) -> Sequence['outputs.GetClustersEntityHttpProxyListResult']:
        """
        - List of proxies to connect to the service centers.
        """
        return pulumi.get(self, "http_proxy_lists")

    @property
    @pulumi.getter(name="httpProxyWhitelists")
    def http_proxy_whitelists(self) -> Sequence['outputs.GetClustersEntityHttpProxyWhitelistResult']:
        """
        - HTTP proxy whitelist.
        """
        return pulumi.get(self, "http_proxy_whitelists")

    @property
    @pulumi.getter(name="internalSubnet")
    def internal_subnet(self) -> str:
        """
        - The internal subnet is local to every server - its not visible outside.iSCSI requests generated internally within the appliance (by user VMs or VMFS) are sent to the internal subnet. The format is IP/netmask.
        """
        return pulumi.get(self, "internal_subnet")

    @property
    @pulumi.getter(name="isAvailable")
    def is_available(self) -> bool:
        """
        - Indicates if cluster is available to contact. (Readonly)
        """
        return pulumi.get(self, "is_available")

    @property
    @pulumi.getter(name="managementServerLists")
    def management_server_lists(self) -> Sequence['outputs.GetClustersEntityManagementServerListResult']:
        """
        - List of cluster management servers. (Readonly)
        """
        return pulumi.get(self, "management_server_lists")

    @property
    @pulumi.getter(name="masqueradingIp")
    def masquerading_ip(self) -> str:
        """
        - The cluster NAT'd or proxy IP which maps to the cluster local IP.
        """
        return pulumi.get(self, "masquerading_ip")

    @property
    @pulumi.getter(name="masqueradingPort")
    def masquerading_port(self) -> int:
        """
        - Port used together with masquerading_ip to connect to the cluster.
        """
        return pulumi.get(self, "masquerading_port")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        - The image kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        -  The name for the image.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameServerIpLists")
    def name_server_ip_lists(self) -> Sequence[str]:
        """
        - The list of IP addresses of the name servers.
        """
        return pulumi.get(self, "name_server_ip_lists")

    @property
    @pulumi.getter(name="nfsSubnetWhitelists")
    def nfs_subnet_whitelists(self) -> Sequence[str]:
        """
        - Comma separated list of subnets (of the form 'a.b.c.d/l.m.n.o') that are allowed to send NFS requests to this container. If not specified, the global NFS whitelist will be looked up for access permission. The internal subnet is always automatically considered part of the whitelist, even if the field below does not explicitly specify it. Similarly, all the hypervisor IPs are considered part of the whitelist. Finally, to permit debugging, all of the SVMs local IPs are considered to be implicitly part of the whitelist.
        """
        return pulumi.get(self, "nfs_subnet_whitelists")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetClustersEntityNodeResult']:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="ntpServerIpLists")
    def ntp_server_ip_lists(self) -> Sequence[str]:
        """
        - The list of IP addresses or FQDNs of the NTP servers.
        """
        return pulumi.get(self, "ntp_server_ip_lists")

    @property
    @pulumi.getter(name="operationMode")
    def operation_mode(self) -> str:
        """
        - Cluster operation mode. - 'NORMAL': Cluster is operating normally. - 'READ_ONLY': Cluster is operating in read only mode. - 'STAND_ALONE': Only one node is operational in the cluster. This is valid only for single node or two node clusters. - 'SWITCH_TO_TWO_NODE': Cluster is moving from single node to two node cluster. - 'OVERRIDE': Valid only for single node cluster. If the user wants to run vms on a single node cluster in read only mode, he can set the cluster peration mode to override. Writes will be allowed in override mode.
        """
        return pulumi.get(self, "operation_mode")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        """
        - The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Mapping[str, str]:
        """
        - The reference to a project.
        """
        return pulumi.get(self, "project_reference")

    @property
    @pulumi.getter(name="serviceLists")
    def service_lists(self) -> Sequence[str]:
        """
        - Array of enabled cluster services. For example, a cluster can function as both AOS and cloud data gateway. - 'AOS': Regular Prism Element - 'PRISM_CENTRAL': Prism Central - 'CLOUD_DATA_GATEWAY': Cloud backup and DR gateway - 'AFS': Cluster for file server - 'WITNESS' : Witness cluster - 'XI_PORTAL': Xi cluster.
        """
        return pulumi.get(self, "service_lists")

    @property
    @pulumi.getter(name="smtpServerAddress")
    def smtp_server_address(self) -> Mapping[str, str]:
        """
        - SMTP Server Address.
        """
        return pulumi.get(self, "smtp_server_address")

    @property
    @pulumi.getter(name="smtpServerCredentials")
    def smtp_server_credentials(self) -> Mapping[str, str]:
        """
        - SMTP Server Credentials.
        """
        return pulumi.get(self, "smtp_server_credentials")

    @property
    @pulumi.getter(name="smtpServerEmailAddress")
    def smtp_server_email_address(self) -> str:
        """
        - SMTP Server Email Address.
        """
        return pulumi.get(self, "smtp_server_email_address")

    @property
    @pulumi.getter(name="smtpServerProxyTypeLists")
    def smtp_server_proxy_type_lists(self) -> Sequence[str]:
        """
        - SMTP Server Proxy Type List
        """
        return pulumi.get(self, "smtp_server_proxy_type_lists")

    @property
    @pulumi.getter(name="smtpServerType")
    def smtp_server_type(self) -> str:
        """
        - SMTP Server type.
        """
        return pulumi.get(self, "smtp_server_type")

    @property
    @pulumi.getter(name="softwareMapNcc")
    def software_map_ncc(self) -> Mapping[str, str]:
        """
        - Map of software on the cluster with software type as the key.
        """
        return pulumi.get(self, "software_map_ncc")

    @property
    @pulumi.getter(name="softwareMapNos")
    def software_map_nos(self) -> Mapping[str, str]:
        """
        - Map of software on the cluster with software type as the key.
        """
        return pulumi.get(self, "software_map_nos")

    @property
    @pulumi.getter(name="sslKeyExpireDatetime")
    def ssl_key_expire_datetime(self) -> str:
        """
        - UTC date and time in RFC-3339 format when the key expires
        """
        return pulumi.get(self, "ssl_key_expire_datetime")

    @property
    @pulumi.getter(name="sslKeyName")
    def ssl_key_name(self) -> str:
        return pulumi.get(self, "ssl_key_name")

    @property
    @pulumi.getter(name="sslKeySigningInfo")
    def ssl_key_signing_info(self) -> Mapping[str, str]:
        """
        - Customer information used in Certificate Signing Request for creating digital certificates.
        """
        return pulumi.get(self, "ssl_key_signing_info")

    @property
    @pulumi.getter(name="sslKeyType")
    def ssl_key_type(self) -> str:
        """
        - SSL key type. Key types with RSA_2048, ECDSA_256 and ECDSA_384 are supported for key generation and importing.
        """
        return pulumi.get(self, "ssl_key_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        - The state of the cluster entity.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedInformationVerbosity")
    def supported_information_verbosity(self) -> str:
        """
        - Verbosity level settings for populating support information. - 'Nothing': Send nothing - 'Basic': Send basic information - skip core dump and hypervisor stats information - 'BasicPlusCoreDump': Send basic and core dump information - 'All': Send all information (Default value: BASIC_PLUS_CORE_DUMP)
        """
        return pulumi.get(self, "supported_information_verbosity")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        """
        - Zone name used in value of TZ environment variable.
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class GetClustersEntityAuthorizedPublicKeyListResult(dict):
    def __init__(__self__, *,
                 key: str,
                 name: str):
        """
        :param str name: -  The name for the image.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        -  The name for the image.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClustersEntityCaCertificateListResult(dict):
    def __init__(__self__, *,
                 ca_name: str,
                 certificate: str):
        pulumi.set(__self__, "ca_name", ca_name)
        pulumi.set(__self__, "certificate", certificate)

    @property
    @pulumi.getter(name="caName")
    def ca_name(self) -> str:
        return pulumi.get(self, "ca_name")

    @property
    @pulumi.getter
    def certificate(self) -> str:
        return pulumi.get(self, "certificate")


@pulumi.output_type
class GetClustersEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the key name.
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the key name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetClustersEntityHttpProxyListResult(dict):
    def __init__(__self__, *,
                 address: Mapping[str, str],
                 credentials: Mapping[str, str],
                 proxy_type_lists: Sequence[str]):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "proxy_type_lists", proxy_type_lists)

    @property
    @pulumi.getter
    def address(self) -> Mapping[str, str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def credentials(self) -> Mapping[str, str]:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="proxyTypeLists")
    def proxy_type_lists(self) -> Sequence[str]:
        return pulumi.get(self, "proxy_type_lists")


@pulumi.output_type
class GetClustersEntityHttpProxyWhitelistResult(dict):
    def __init__(__self__, *,
                 target: str,
                 target_type: str):
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "target_type", target_type)

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> str:
        return pulumi.get(self, "target_type")


@pulumi.output_type
class GetClustersEntityManagementServerListResult(dict):
    def __init__(__self__, *,
                 drs_enabled: bool,
                 ip: str,
                 status_lists: Sequence[str],
                 type: str):
        pulumi.set(__self__, "drs_enabled", drs_enabled)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "status_lists", status_lists)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="drsEnabled")
    def drs_enabled(self) -> bool:
        return pulumi.get(self, "drs_enabled")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="statusLists")
    def status_lists(self) -> Sequence[str]:
        return pulumi.get(self, "status_lists")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetClustersEntityNodeResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 type: str,
                 version: str):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFloatingIpSpecResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetFloatingIpSpecResourceResult']):
        """
        :param Sequence['GetFloatingIpSpecResourceArgs'] resources: Floating IP allocation status.
        """
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetFloatingIpSpecResourceResult']:
        """
        Floating IP allocation status.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetFloatingIpSpecResourceResult(dict):
    def __init__(__self__, *,
                 external_subnet_reference: Mapping[str, str],
                 vm_nic_reference: Mapping[str, str],
                 vpc_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] external_subnet_reference: The reference to a subnet
        :param Mapping[str, str] vm_nic_reference: The reference to a vm_nic
        :param Mapping[str, str] vpc_reference: The reference to a vpc
        """
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        pulumi.set(__self__, "vm_nic_reference", vm_nic_reference)
        pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="vmNicReference")
    def vm_nic_reference(self) -> Mapping[str, str]:
        """
        The reference to a vm_nic
        """
        return pulumi.get(self, "vm_nic_reference")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Mapping[str, str]:
        """
        The reference to a vpc
        """
        return pulumi.get(self, "vpc_reference")


@pulumi.output_type
class GetFloatingIpStatusResult(dict):
    def __init__(__self__, *,
                 execution_contexts: Sequence['outputs.GetFloatingIpStatusExecutionContextResult'],
                 name: str,
                 resources: Sequence['outputs.GetFloatingIpStatusResourceResult'],
                 state: str):
        """
        :param Sequence['GetFloatingIpStatusExecutionContextArgs'] execution_contexts: Execution Context of Floating IP.
        :param str name: - the name.
        :param Sequence['GetFloatingIpStatusResourceArgs'] resources: Floating IP allocation status.
        :param str state: The state of the floating_ip.
        """
        pulumi.set(__self__, "execution_contexts", execution_contexts)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="executionContexts")
    def execution_contexts(self) -> Sequence['outputs.GetFloatingIpStatusExecutionContextResult']:
        """
        Execution Context of Floating IP.
        """
        return pulumi.get(self, "execution_contexts")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetFloatingIpStatusResourceResult']:
        """
        Floating IP allocation status.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the floating_ip.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetFloatingIpStatusExecutionContextResult(dict):
    def __init__(__self__, *,
                 task_uuids: Sequence[str]):
        pulumi.set(__self__, "task_uuids", task_uuids)

    @property
    @pulumi.getter(name="taskUuids")
    def task_uuids(self) -> Sequence[str]:
        return pulumi.get(self, "task_uuids")


@pulumi.output_type
class GetFloatingIpStatusResourceResult(dict):
    def __init__(__self__, *,
                 external_subnet_reference: Mapping[str, str],
                 floating_ip: str,
                 vm_nic_reference: Mapping[str, str],
                 vpc_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] external_subnet_reference: The reference to a subnet
        :param str floating_ip: Private IP with which the floating IP is associated.
        :param Mapping[str, str] vm_nic_reference: The reference to a vm_nic
        :param Mapping[str, str] vpc_reference: The reference to a vpc
        """
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        pulumi.set(__self__, "floating_ip", floating_ip)
        pulumi.set(__self__, "vm_nic_reference", vm_nic_reference)
        pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> str:
        """
        Private IP with which the floating IP is associated.
        """
        return pulumi.get(self, "floating_ip")

    @property
    @pulumi.getter(name="vmNicReference")
    def vm_nic_reference(self) -> Mapping[str, str]:
        """
        The reference to a vm_nic
        """
        return pulumi.get(self, "vm_nic_reference")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Mapping[str, str]:
        """
        The reference to a vpc
        """
        return pulumi.get(self, "vpc_reference")


@pulumi.output_type
class GetFloatingIpsEntityResult(dict):
    def __init__(__self__, *,
                 metadata: Mapping[str, str],
                 specs: Sequence['outputs.GetFloatingIpsEntitySpecResult'],
                 statuses: Sequence['outputs.GetFloatingIpsEntityStatusResult']):
        """
        :param Mapping[str, str] metadata: - The floating_ip kind metadata.
        :param Sequence['GetFloatingIpsEntitySpecArgs'] specs: Floating IP spec
        :param Sequence['GetFloatingIpsEntityStatusArgs'] statuses: Floating IP output status
        """
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "specs", specs)
        pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        - The floating_ip kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def specs(self) -> Sequence['outputs.GetFloatingIpsEntitySpecResult']:
        """
        Floating IP spec
        """
        return pulumi.get(self, "specs")

    @property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetFloatingIpsEntityStatusResult']:
        """
        Floating IP output status
        """
        return pulumi.get(self, "statuses")


@pulumi.output_type
class GetFloatingIpsEntitySpecResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetFloatingIpsEntitySpecResourceResult']):
        """
        :param Sequence['GetFloatingIpsEntitySpecResourceArgs'] resources: Floating IP allocation status.
        """
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetFloatingIpsEntitySpecResourceResult']:
        """
        Floating IP allocation status.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetFloatingIpsEntitySpecResourceResult(dict):
    def __init__(__self__, *,
                 external_subnet_reference: Mapping[str, str],
                 vm_nic_reference: Mapping[str, str],
                 vpc_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] external_subnet_reference: The reference to a subnet
        :param Mapping[str, str] vm_nic_reference: The reference to a vm_nic
        :param Mapping[str, str] vpc_reference: The reference to a vpc
        """
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        pulumi.set(__self__, "vm_nic_reference", vm_nic_reference)
        pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="vmNicReference")
    def vm_nic_reference(self) -> Mapping[str, str]:
        """
        The reference to a vm_nic
        """
        return pulumi.get(self, "vm_nic_reference")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Mapping[str, str]:
        """
        The reference to a vpc
        """
        return pulumi.get(self, "vpc_reference")


@pulumi.output_type
class GetFloatingIpsEntityStatusResult(dict):
    def __init__(__self__, *,
                 execution_contexts: Sequence['outputs.GetFloatingIpsEntityStatusExecutionContextResult'],
                 name: str,
                 resources: Sequence['outputs.GetFloatingIpsEntityStatusResourceResult'],
                 state: str):
        """
        :param Sequence['GetFloatingIpsEntityStatusExecutionContextArgs'] execution_contexts: Execution Context of Floating IP.
        :param str name: - the name.
        :param Sequence['GetFloatingIpsEntityStatusResourceArgs'] resources: Floating IP allocation status.
        :param str state: The state of the floating_ip.
        """
        pulumi.set(__self__, "execution_contexts", execution_contexts)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="executionContexts")
    def execution_contexts(self) -> Sequence['outputs.GetFloatingIpsEntityStatusExecutionContextResult']:
        """
        Execution Context of Floating IP.
        """
        return pulumi.get(self, "execution_contexts")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetFloatingIpsEntityStatusResourceResult']:
        """
        Floating IP allocation status.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the floating_ip.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetFloatingIpsEntityStatusExecutionContextResult(dict):
    def __init__(__self__, *,
                 task_uuids: Sequence[str]):
        pulumi.set(__self__, "task_uuids", task_uuids)

    @property
    @pulumi.getter(name="taskUuids")
    def task_uuids(self) -> Sequence[str]:
        return pulumi.get(self, "task_uuids")


@pulumi.output_type
class GetFloatingIpsEntityStatusResourceResult(dict):
    def __init__(__self__, *,
                 external_subnet_reference: Mapping[str, str],
                 floating_ip: str,
                 vm_nic_reference: Mapping[str, str],
                 vpc_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] external_subnet_reference: The reference to a subnet
        :param str floating_ip: Private IP with which the floating IP is associated.
        :param Mapping[str, str] vm_nic_reference: The reference to a vm_nic
        :param Mapping[str, str] vpc_reference: The reference to a vpc
        """
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        pulumi.set(__self__, "floating_ip", floating_ip)
        pulumi.set(__self__, "vm_nic_reference", vm_nic_reference)
        pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> str:
        """
        Private IP with which the floating IP is associated.
        """
        return pulumi.get(self, "floating_ip")

    @property
    @pulumi.getter(name="vmNicReference")
    def vm_nic_reference(self) -> Mapping[str, str]:
        """
        The reference to a vm_nic
        """
        return pulumi.get(self, "vm_nic_reference")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Mapping[str, str]:
        """
        The reference to a vpc
        """
        return pulumi.get(self, "vpc_reference")


@pulumi.output_type
class GetFloatingIpsMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str,
                 total_matches: int):
        """
        :param str kind: - The kind name (Default value: project).
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)
        pulumi.set(__self__, "total_matches", total_matches)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="totalMatches")
    def total_matches(self) -> int:
        return pulumi.get(self, "total_matches")


@pulumi.output_type
class GetFoundationCentralClusterDetailsClusterStatusResult(dict):
    def __init__(__self__, *,
                 aggregate_percent_complete: float,
                 cluster_creation_started: bool,
                 cluster_progress_details: Sequence['outputs.GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailResult'],
                 current_foundation_ip: str,
                 foundation_session_id: str,
                 imaging_stopped: bool,
                 intent_picked_up: bool,
                 node_progress_details: Sequence['outputs.GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailResult']):
        """
        :param float aggregate_percent_complete: Overall progress percentage including imaging and cluster creation.
        :param bool cluster_creation_started: Denotes whether cluster creation has started in a phoenix workflow. For foundation workflows, this field will be same as intent_picked_up.
        :param Sequence['GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailArgs'] cluster_progress_details: Denotes the progress status of cluster creation.
        :param str current_foundation_ip: Current IP address of the coordinating foundation node.
        :param str foundation_session_id: Foundation session id for cluster creation.
        :param bool imaging_stopped: Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.
        :param bool intent_picked_up: Denotes whether the remote nodes has picked up the cluster creation intent.
        :param Sequence['GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailArgs'] node_progress_details: List of progress details of each node.
        """
        pulumi.set(__self__, "aggregate_percent_complete", aggregate_percent_complete)
        pulumi.set(__self__, "cluster_creation_started", cluster_creation_started)
        pulumi.set(__self__, "cluster_progress_details", cluster_progress_details)
        pulumi.set(__self__, "current_foundation_ip", current_foundation_ip)
        pulumi.set(__self__, "foundation_session_id", foundation_session_id)
        pulumi.set(__self__, "imaging_stopped", imaging_stopped)
        pulumi.set(__self__, "intent_picked_up", intent_picked_up)
        pulumi.set(__self__, "node_progress_details", node_progress_details)

    @property
    @pulumi.getter(name="aggregatePercentComplete")
    def aggregate_percent_complete(self) -> float:
        """
        Overall progress percentage including imaging and cluster creation.
        """
        return pulumi.get(self, "aggregate_percent_complete")

    @property
    @pulumi.getter(name="clusterCreationStarted")
    def cluster_creation_started(self) -> bool:
        """
        Denotes whether cluster creation has started in a phoenix workflow. For foundation workflows, this field will be same as intent_picked_up.
        """
        return pulumi.get(self, "cluster_creation_started")

    @property
    @pulumi.getter(name="clusterProgressDetails")
    def cluster_progress_details(self) -> Sequence['outputs.GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailResult']:
        """
        Denotes the progress status of cluster creation.
        """
        return pulumi.get(self, "cluster_progress_details")

    @property
    @pulumi.getter(name="currentFoundationIp")
    def current_foundation_ip(self) -> str:
        """
        Current IP address of the coordinating foundation node.
        """
        return pulumi.get(self, "current_foundation_ip")

    @property
    @pulumi.getter(name="foundationSessionId")
    def foundation_session_id(self) -> str:
        """
        Foundation session id for cluster creation.
        """
        return pulumi.get(self, "foundation_session_id")

    @property
    @pulumi.getter(name="imagingStopped")
    def imaging_stopped(self) -> bool:
        """
        Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.
        """
        return pulumi.get(self, "imaging_stopped")

    @property
    @pulumi.getter(name="intentPickedUp")
    def intent_picked_up(self) -> bool:
        """
        Denotes whether the remote nodes has picked up the cluster creation intent.
        """
        return pulumi.get(self, "intent_picked_up")

    @property
    @pulumi.getter(name="nodeProgressDetails")
    def node_progress_details(self) -> Sequence['outputs.GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailResult']:
        """
        List of progress details of each node.
        """
        return pulumi.get(self, "node_progress_details")


@pulumi.output_type
class GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailResult(dict):
    def __init__(__self__, *,
                 cluster_name: str,
                 message_lists: Sequence[str],
                 percent_complete: float,
                 status: str):
        """
        :param str cluster_name: Cluster name.
        :param Sequence[str] message_lists: List of messages for the client based on process state.
        :param float percent_complete: Percent completion of cluster creation process.
        :param str status: Current status of cluster creation process.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "message_lists", message_lists)
        pulumi.set(__self__, "percent_complete", percent_complete)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="messageLists")
    def message_lists(self) -> Sequence[str]:
        """
        List of messages for the client based on process state.
        """
        return pulumi.get(self, "message_lists")

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> float:
        """
        Percent completion of cluster creation process.
        """
        return pulumi.get(self, "percent_complete")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Current status of cluster creation process.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailResult(dict):
    def __init__(__self__, *,
                 imaged_node_uuid: str,
                 imaging_stopped: bool,
                 intent_picked_up: bool,
                 message_lists: Sequence[str],
                 percent_complete: float,
                 status: str):
        """
        :param str imaged_node_uuid: UUID of the node.
        :param bool imaging_stopped: Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.
        :param bool intent_picked_up: Denotes whether the remote nodes has picked up the cluster creation intent.
        :param Sequence[str] message_lists: List of messages for the client based on process state.
        :param float percent_complete: Percent completion of cluster creation process.
        :param str status: Current status of cluster creation process.
        """
        pulumi.set(__self__, "imaged_node_uuid", imaged_node_uuid)
        pulumi.set(__self__, "imaging_stopped", imaging_stopped)
        pulumi.set(__self__, "intent_picked_up", intent_picked_up)
        pulumi.set(__self__, "message_lists", message_lists)
        pulumi.set(__self__, "percent_complete", percent_complete)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="imagedNodeUuid")
    def imaged_node_uuid(self) -> str:
        """
        UUID of the node.
        """
        return pulumi.get(self, "imaged_node_uuid")

    @property
    @pulumi.getter(name="imagingStopped")
    def imaging_stopped(self) -> bool:
        """
        Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.
        """
        return pulumi.get(self, "imaging_stopped")

    @property
    @pulumi.getter(name="intentPickedUp")
    def intent_picked_up(self) -> bool:
        """
        Denotes whether the remote nodes has picked up the cluster creation intent.
        """
        return pulumi.get(self, "intent_picked_up")

    @property
    @pulumi.getter(name="messageLists")
    def message_lists(self) -> Sequence[str]:
        """
        List of messages for the client based on process state.
        """
        return pulumi.get(self, "message_lists")

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> float:
        """
        Percent completion of cluster creation process.
        """
        return pulumi.get(self, "percent_complete")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Current status of cluster creation process.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetFoundationCentralClusterDetailsCommonNetworkSettingsResult(dict):
    def __init__(__self__, *,
                 cvm_dns_servers: Sequence[str],
                 cvm_ntp_servers: Sequence[str],
                 hypervisor_dns_servers: Sequence[str],
                 hypervisor_ntp_servers: Sequence[str]):
        """
        :param Sequence[str] cvm_dns_servers: List of dns servers for the cvms in the cluster.
        :param Sequence[str] cvm_ntp_servers: List of ntp servers for the cvms in the cluster.
        :param Sequence[str] hypervisor_dns_servers: List of dns servers for the hypervisors in the cluster.
        :param Sequence[str] hypervisor_ntp_servers: List of ntp servers for the hypervisors in the cluster.
        """
        pulumi.set(__self__, "cvm_dns_servers", cvm_dns_servers)
        pulumi.set(__self__, "cvm_ntp_servers", cvm_ntp_servers)
        pulumi.set(__self__, "hypervisor_dns_servers", hypervisor_dns_servers)
        pulumi.set(__self__, "hypervisor_ntp_servers", hypervisor_ntp_servers)

    @property
    @pulumi.getter(name="cvmDnsServers")
    def cvm_dns_servers(self) -> Sequence[str]:
        """
        List of dns servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_dns_servers")

    @property
    @pulumi.getter(name="cvmNtpServers")
    def cvm_ntp_servers(self) -> Sequence[str]:
        """
        List of ntp servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_ntp_servers")

    @property
    @pulumi.getter(name="hypervisorDnsServers")
    def hypervisor_dns_servers(self) -> Sequence[str]:
        """
        List of dns servers for the hypervisors in the cluster.
        """
        return pulumi.get(self, "hypervisor_dns_servers")

    @property
    @pulumi.getter(name="hypervisorNtpServers")
    def hypervisor_ntp_servers(self) -> Sequence[str]:
        """
        List of ntp servers for the hypervisors in the cluster.
        """
        return pulumi.get(self, "hypervisor_ntp_servers")


@pulumi.output_type
class GetFoundationCentralClusterDetailsFoundationInitConfigResult(dict):
    def __init__(__self__, *,
                 blocks: Sequence['outputs.GetFoundationCentralClusterDetailsFoundationInitConfigBlockResult'],
                 clusters: Sequence['outputs.GetFoundationCentralClusterDetailsFoundationInitConfigClusterResult'],
                 cvm_gateway: str,
                 cvm_netmask: str,
                 dns_servers: str,
                 hyperv_product_key: str,
                 hyperv_sku: str,
                 hypervisor_gateway: str,
                 hypervisor_iso_url: Mapping[str, str],
                 hypervisor_isos: Sequence['outputs.GetFoundationCentralClusterDetailsFoundationInitConfigHypervisorIsoResult'],
                 hypervisor_netmask: str,
                 ipmi_gateway: str,
                 ipmi_netmask: str,
                 nos_package_urls: Sequence['outputs.GetFoundationCentralClusterDetailsFoundationInitConfigNosPackageUrlResult']):
        pulumi.set(__self__, "blocks", blocks)
        pulumi.set(__self__, "clusters", clusters)
        pulumi.set(__self__, "cvm_gateway", cvm_gateway)
        pulumi.set(__self__, "cvm_netmask", cvm_netmask)
        pulumi.set(__self__, "dns_servers", dns_servers)
        pulumi.set(__self__, "hyperv_product_key", hyperv_product_key)
        pulumi.set(__self__, "hyperv_sku", hyperv_sku)
        pulumi.set(__self__, "hypervisor_gateway", hypervisor_gateway)
        pulumi.set(__self__, "hypervisor_iso_url", hypervisor_iso_url)
        pulumi.set(__self__, "hypervisor_isos", hypervisor_isos)
        pulumi.set(__self__, "hypervisor_netmask", hypervisor_netmask)
        pulumi.set(__self__, "ipmi_gateway", ipmi_gateway)
        pulumi.set(__self__, "ipmi_netmask", ipmi_netmask)
        pulumi.set(__self__, "nos_package_urls", nos_package_urls)

    @property
    @pulumi.getter
    def blocks(self) -> Sequence['outputs.GetFoundationCentralClusterDetailsFoundationInitConfigBlockResult']:
        return pulumi.get(self, "blocks")

    @property
    @pulumi.getter
    def clusters(self) -> Sequence['outputs.GetFoundationCentralClusterDetailsFoundationInitConfigClusterResult']:
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter(name="cvmGateway")
    def cvm_gateway(self) -> str:
        return pulumi.get(self, "cvm_gateway")

    @property
    @pulumi.getter(name="cvmNetmask")
    def cvm_netmask(self) -> str:
        return pulumi.get(self, "cvm_netmask")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> str:
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="hypervProductKey")
    def hyperv_product_key(self) -> str:
        return pulumi.get(self, "hyperv_product_key")

    @property
    @pulumi.getter(name="hypervSku")
    def hyperv_sku(self) -> str:
        return pulumi.get(self, "hyperv_sku")

    @property
    @pulumi.getter(name="hypervisorGateway")
    def hypervisor_gateway(self) -> str:
        return pulumi.get(self, "hypervisor_gateway")

    @property
    @pulumi.getter(name="hypervisorIsoUrl")
    def hypervisor_iso_url(self) -> Mapping[str, str]:
        return pulumi.get(self, "hypervisor_iso_url")

    @property
    @pulumi.getter(name="hypervisorIsos")
    def hypervisor_isos(self) -> Sequence['outputs.GetFoundationCentralClusterDetailsFoundationInitConfigHypervisorIsoResult']:
        return pulumi.get(self, "hypervisor_isos")

    @property
    @pulumi.getter(name="hypervisorNetmask")
    def hypervisor_netmask(self) -> str:
        return pulumi.get(self, "hypervisor_netmask")

    @property
    @pulumi.getter(name="ipmiGateway")
    def ipmi_gateway(self) -> str:
        return pulumi.get(self, "ipmi_gateway")

    @property
    @pulumi.getter(name="ipmiNetmask")
    def ipmi_netmask(self) -> str:
        return pulumi.get(self, "ipmi_netmask")

    @property
    @pulumi.getter(name="nosPackageUrls")
    def nos_package_urls(self) -> Sequence['outputs.GetFoundationCentralClusterDetailsFoundationInitConfigNosPackageUrlResult']:
        return pulumi.get(self, "nos_package_urls")


@pulumi.output_type
class GetFoundationCentralClusterDetailsFoundationInitConfigBlockResult(dict):
    def __init__(__self__, *,
                 block_id: str,
                 nodes: Sequence['outputs.GetFoundationCentralClusterDetailsFoundationInitConfigBlockNodeResult']):
        pulumi.set(__self__, "block_id", block_id)
        pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="blockId")
    def block_id(self) -> str:
        return pulumi.get(self, "block_id")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetFoundationCentralClusterDetailsFoundationInitConfigBlockNodeResult']:
        return pulumi.get(self, "nodes")


@pulumi.output_type
class GetFoundationCentralClusterDetailsFoundationInitConfigBlockNodeResult(dict):
    def __init__(__self__, *,
                 cvm_ip: str,
                 cvm_vlan_id: int,
                 fc_imaged_node_uuid: str,
                 hardware_attributes_override: Mapping[str, str],
                 hypervisor: str,
                 hypervisor_hostname: str,
                 hypervisor_ip: str,
                 image_now: bool,
                 ipmi_ip: str,
                 ipv6_address: str,
                 node_position: str,
                 node_serial: str):
        pulumi.set(__self__, "cvm_ip", cvm_ip)
        pulumi.set(__self__, "cvm_vlan_id", cvm_vlan_id)
        pulumi.set(__self__, "fc_imaged_node_uuid", fc_imaged_node_uuid)
        pulumi.set(__self__, "hardware_attributes_override", hardware_attributes_override)
        pulumi.set(__self__, "hypervisor", hypervisor)
        pulumi.set(__self__, "hypervisor_hostname", hypervisor_hostname)
        pulumi.set(__self__, "hypervisor_ip", hypervisor_ip)
        pulumi.set(__self__, "image_now", image_now)
        pulumi.set(__self__, "ipmi_ip", ipmi_ip)
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        pulumi.set(__self__, "node_position", node_position)
        pulumi.set(__self__, "node_serial", node_serial)

    @property
    @pulumi.getter(name="cvmIp")
    def cvm_ip(self) -> str:
        return pulumi.get(self, "cvm_ip")

    @property
    @pulumi.getter(name="cvmVlanId")
    def cvm_vlan_id(self) -> int:
        return pulumi.get(self, "cvm_vlan_id")

    @property
    @pulumi.getter(name="fcImagedNodeUuid")
    def fc_imaged_node_uuid(self) -> str:
        return pulumi.get(self, "fc_imaged_node_uuid")

    @property
    @pulumi.getter(name="hardwareAttributesOverride")
    def hardware_attributes_override(self) -> Mapping[str, str]:
        return pulumi.get(self, "hardware_attributes_override")

    @property
    @pulumi.getter
    def hypervisor(self) -> str:
        return pulumi.get(self, "hypervisor")

    @property
    @pulumi.getter(name="hypervisorHostname")
    def hypervisor_hostname(self) -> str:
        return pulumi.get(self, "hypervisor_hostname")

    @property
    @pulumi.getter(name="hypervisorIp")
    def hypervisor_ip(self) -> str:
        return pulumi.get(self, "hypervisor_ip")

    @property
    @pulumi.getter(name="imageNow")
    def image_now(self) -> bool:
        return pulumi.get(self, "image_now")

    @property
    @pulumi.getter(name="ipmiIp")
    def ipmi_ip(self) -> str:
        return pulumi.get(self, "ipmi_ip")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> str:
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="nodePosition")
    def node_position(self) -> str:
        return pulumi.get(self, "node_position")

    @property
    @pulumi.getter(name="nodeSerial")
    def node_serial(self) -> str:
        return pulumi.get(self, "node_serial")


@pulumi.output_type
class GetFoundationCentralClusterDetailsFoundationInitConfigClusterResult(dict):
    def __init__(__self__, *,
                 cluster_external_ip: str,
                 cluster_init_now: bool,
                 cluster_init_successful: bool,
                 cluster_members: Sequence[str],
                 cluster_name: str,
                 cvm_dns_servers: str,
                 cvm_ntp_servers: str,
                 redundancy_factor: int,
                 timezone: str):
        """
        :param str cluster_external_ip: External management ip of the cluster.
        :param str cluster_name: Cluster name.
        :param str cvm_dns_servers: List of dns servers for the cvms in the cluster.
        :param str cvm_ntp_servers: List of ntp servers for the cvms in the cluster.
        :param int redundancy_factor: Redundancy factor of the cluster.
        """
        pulumi.set(__self__, "cluster_external_ip", cluster_external_ip)
        pulumi.set(__self__, "cluster_init_now", cluster_init_now)
        pulumi.set(__self__, "cluster_init_successful", cluster_init_successful)
        pulumi.set(__self__, "cluster_members", cluster_members)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cvm_dns_servers", cvm_dns_servers)
        pulumi.set(__self__, "cvm_ntp_servers", cvm_ntp_servers)
        pulumi.set(__self__, "redundancy_factor", redundancy_factor)
        pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="clusterExternalIp")
    def cluster_external_ip(self) -> str:
        """
        External management ip of the cluster.
        """
        return pulumi.get(self, "cluster_external_ip")

    @property
    @pulumi.getter(name="clusterInitNow")
    def cluster_init_now(self) -> bool:
        return pulumi.get(self, "cluster_init_now")

    @property
    @pulumi.getter(name="clusterInitSuccessful")
    def cluster_init_successful(self) -> bool:
        return pulumi.get(self, "cluster_init_successful")

    @property
    @pulumi.getter(name="clusterMembers")
    def cluster_members(self) -> Sequence[str]:
        return pulumi.get(self, "cluster_members")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="cvmDnsServers")
    def cvm_dns_servers(self) -> str:
        """
        List of dns servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_dns_servers")

    @property
    @pulumi.getter(name="cvmNtpServers")
    def cvm_ntp_servers(self) -> str:
        """
        List of ntp servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_ntp_servers")

    @property
    @pulumi.getter(name="redundancyFactor")
    def redundancy_factor(self) -> int:
        """
        Redundancy factor of the cluster.
        """
        return pulumi.get(self, "redundancy_factor")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        return pulumi.get(self, "timezone")


@pulumi.output_type
class GetFoundationCentralClusterDetailsFoundationInitConfigHypervisorIsoResult(dict):
    def __init__(__self__, *,
                 hypervisor_type: str,
                 sha256sum: str,
                 url: str):
        pulumi.set(__self__, "hypervisor_type", hypervisor_type)
        pulumi.set(__self__, "sha256sum", sha256sum)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="hypervisorType")
    def hypervisor_type(self) -> str:
        return pulumi.get(self, "hypervisor_type")

    @property
    @pulumi.getter
    def sha256sum(self) -> str:
        return pulumi.get(self, "sha256sum")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetFoundationCentralClusterDetailsFoundationInitConfigNosPackageUrlResult(dict):
    def __init__(__self__, *,
                 sha256sum: str,
                 url: str):
        pulumi.set(__self__, "sha256sum", sha256sum)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def sha256sum(self) -> str:
        return pulumi.get(self, "sha256sum")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetFoundationCentralImagedClustersListFiltersResult(dict):
    def __init__(__self__, *,
                 archived: Optional[bool] = None):
        """
        :param bool archived: True if the cluster creation request is archived, False otherwise
        """
        if archived is not None:
            pulumi.set(__self__, "archived", archived)

    @property
    @pulumi.getter
    def archived(self) -> Optional[bool]:
        """
        True if the cluster creation request is archived, False otherwise
        """
        return pulumi.get(self, "archived")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterResult(dict):
    def __init__(__self__, *,
                 archived: bool,
                 cluster_external_ip: str,
                 cluster_name: str,
                 cluster_size: int,
                 cluster_status: 'outputs.GetFoundationCentralImagedClustersListImagedClusterClusterStatusResult',
                 common_network_settings: 'outputs.GetFoundationCentralImagedClustersListImagedClusterCommonNetworkSettingsResult',
                 created_timestamp: str,
                 current_time: str,
                 destroyed: bool,
                 foundation_init_configs: Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigResult'],
                 foundation_init_node_uuid: str,
                 imaged_cluster_uuid: str,
                 imaged_node_uuid_lists: Sequence[str],
                 storage_node_count: int,
                 workflow_type: str,
                 redundancy_factor: Optional[int] = None):
        """
        :param bool archived: True if the cluster creation request is archived, False otherwise
        :param str cluster_external_ip: External management ip of the cluster.
        :param str cluster_name: Cluster name.
        :param int cluster_size: Number of nodes in the cluster.
        :param 'GetFoundationCentralImagedClustersListImagedClusterClusterStatusArgs' cluster_status: Details of cluster creation process.
        :param 'GetFoundationCentralImagedClustersListImagedClusterCommonNetworkSettingsArgs' common_network_settings: Common network settings across the nodes in the cluster.
        :param str created_timestamp: Time when the cluster creation request was received in Foundation Central.
        :param str current_time: Current time of Foundation Central.
        :param bool destroyed: True if the cluster is destroyed, False otherwise
        :param Sequence['GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigArgs'] foundation_init_configs: Json config used by Foundation to create the cluster.
        :param str foundation_init_node_uuid: UUID of the first node coordinating cluster creation.
        :param str imaged_cluster_uuid: UUID of the cluster.
        :param Sequence[str] imaged_node_uuid_lists: List of UUIDs of imaged nodes.
        :param int storage_node_count: Number of storage only nodes in the cluster. AHV iso for storage node will be taken from aos package.
        :param str workflow_type: If imaging and cluster creation is coordinated by Foundation, value will be FOUNDATION_WF. If the nodes are in phoenix, value will be PHOENIX_WF.
        :param int redundancy_factor: Redundancy factor of the cluster.
        """
        pulumi.set(__self__, "archived", archived)
        pulumi.set(__self__, "cluster_external_ip", cluster_external_ip)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_size", cluster_size)
        pulumi.set(__self__, "cluster_status", cluster_status)
        pulumi.set(__self__, "common_network_settings", common_network_settings)
        pulumi.set(__self__, "created_timestamp", created_timestamp)
        pulumi.set(__self__, "current_time", current_time)
        pulumi.set(__self__, "destroyed", destroyed)
        pulumi.set(__self__, "foundation_init_configs", foundation_init_configs)
        pulumi.set(__self__, "foundation_init_node_uuid", foundation_init_node_uuid)
        pulumi.set(__self__, "imaged_cluster_uuid", imaged_cluster_uuid)
        pulumi.set(__self__, "imaged_node_uuid_lists", imaged_node_uuid_lists)
        pulumi.set(__self__, "storage_node_count", storage_node_count)
        pulumi.set(__self__, "workflow_type", workflow_type)
        if redundancy_factor is not None:
            pulumi.set(__self__, "redundancy_factor", redundancy_factor)

    @property
    @pulumi.getter
    def archived(self) -> bool:
        """
        True if the cluster creation request is archived, False otherwise
        """
        return pulumi.get(self, "archived")

    @property
    @pulumi.getter(name="clusterExternalIp")
    def cluster_external_ip(self) -> str:
        """
        External management ip of the cluster.
        """
        return pulumi.get(self, "cluster_external_ip")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterSize")
    def cluster_size(self) -> int:
        """
        Number of nodes in the cluster.
        """
        return pulumi.get(self, "cluster_size")

    @property
    @pulumi.getter(name="clusterStatus")
    def cluster_status(self) -> 'outputs.GetFoundationCentralImagedClustersListImagedClusterClusterStatusResult':
        """
        Details of cluster creation process.
        """
        return pulumi.get(self, "cluster_status")

    @property
    @pulumi.getter(name="commonNetworkSettings")
    def common_network_settings(self) -> 'outputs.GetFoundationCentralImagedClustersListImagedClusterCommonNetworkSettingsResult':
        """
        Common network settings across the nodes in the cluster.
        """
        return pulumi.get(self, "common_network_settings")

    @property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> str:
        """
        Time when the cluster creation request was received in Foundation Central.
        """
        return pulumi.get(self, "created_timestamp")

    @property
    @pulumi.getter(name="currentTime")
    def current_time(self) -> str:
        """
        Current time of Foundation Central.
        """
        return pulumi.get(self, "current_time")

    @property
    @pulumi.getter
    def destroyed(self) -> bool:
        """
        True if the cluster is destroyed, False otherwise
        """
        return pulumi.get(self, "destroyed")

    @property
    @pulumi.getter(name="foundationInitConfigs")
    def foundation_init_configs(self) -> Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigResult']:
        """
        Json config used by Foundation to create the cluster.
        """
        return pulumi.get(self, "foundation_init_configs")

    @property
    @pulumi.getter(name="foundationInitNodeUuid")
    def foundation_init_node_uuid(self) -> str:
        """
        UUID of the first node coordinating cluster creation.
        """
        return pulumi.get(self, "foundation_init_node_uuid")

    @property
    @pulumi.getter(name="imagedClusterUuid")
    def imaged_cluster_uuid(self) -> str:
        """
        UUID of the cluster.
        """
        return pulumi.get(self, "imaged_cluster_uuid")

    @property
    @pulumi.getter(name="imagedNodeUuidLists")
    def imaged_node_uuid_lists(self) -> Sequence[str]:
        """
        List of UUIDs of imaged nodes.
        """
        return pulumi.get(self, "imaged_node_uuid_lists")

    @property
    @pulumi.getter(name="storageNodeCount")
    def storage_node_count(self) -> int:
        """
        Number of storage only nodes in the cluster. AHV iso for storage node will be taken from aos package.
        """
        return pulumi.get(self, "storage_node_count")

    @property
    @pulumi.getter(name="workflowType")
    def workflow_type(self) -> str:
        """
        If imaging and cluster creation is coordinated by Foundation, value will be FOUNDATION_WF. If the nodes are in phoenix, value will be PHOENIX_WF.
        """
        return pulumi.get(self, "workflow_type")

    @property
    @pulumi.getter(name="redundancyFactor")
    def redundancy_factor(self) -> Optional[int]:
        """
        Redundancy factor of the cluster.
        """
        return pulumi.get(self, "redundancy_factor")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterClusterStatusResult(dict):
    def __init__(__self__, *,
                 aggregate_percent_complete: float,
                 cluster_creation_started: bool,
                 cluster_progress_details: Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetailResult'],
                 current_foundation_ip: str,
                 foundation_session_id: str,
                 imaging_stopped: bool,
                 intent_picked_up: bool,
                 node_progress_details: Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetailResult']):
        """
        :param float aggregate_percent_complete: Overall progress percentage including imaging and cluster creation.
        :param bool cluster_creation_started: Denotes whether cluster creation has started in a phoenix workflow. For foundation workflows, this field will be same as intent_picked_up.
        :param Sequence['GetFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetailArgs'] cluster_progress_details: Denotes the progress status of cluster creation.
        :param str current_foundation_ip: Current IP address of the coordinating foundation node.
        :param str foundation_session_id: Foundation session id for cluster creation.
        :param bool imaging_stopped: Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.
        :param bool intent_picked_up: Denotes whether the remote nodes has picked up the cluster creation intent.
        :param Sequence['GetFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetailArgs'] node_progress_details: List of progress details of each node.
        """
        pulumi.set(__self__, "aggregate_percent_complete", aggregate_percent_complete)
        pulumi.set(__self__, "cluster_creation_started", cluster_creation_started)
        pulumi.set(__self__, "cluster_progress_details", cluster_progress_details)
        pulumi.set(__self__, "current_foundation_ip", current_foundation_ip)
        pulumi.set(__self__, "foundation_session_id", foundation_session_id)
        pulumi.set(__self__, "imaging_stopped", imaging_stopped)
        pulumi.set(__self__, "intent_picked_up", intent_picked_up)
        pulumi.set(__self__, "node_progress_details", node_progress_details)

    @property
    @pulumi.getter(name="aggregatePercentComplete")
    def aggregate_percent_complete(self) -> float:
        """
        Overall progress percentage including imaging and cluster creation.
        """
        return pulumi.get(self, "aggregate_percent_complete")

    @property
    @pulumi.getter(name="clusterCreationStarted")
    def cluster_creation_started(self) -> bool:
        """
        Denotes whether cluster creation has started in a phoenix workflow. For foundation workflows, this field will be same as intent_picked_up.
        """
        return pulumi.get(self, "cluster_creation_started")

    @property
    @pulumi.getter(name="clusterProgressDetails")
    def cluster_progress_details(self) -> Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetailResult']:
        """
        Denotes the progress status of cluster creation.
        """
        return pulumi.get(self, "cluster_progress_details")

    @property
    @pulumi.getter(name="currentFoundationIp")
    def current_foundation_ip(self) -> str:
        """
        Current IP address of the coordinating foundation node.
        """
        return pulumi.get(self, "current_foundation_ip")

    @property
    @pulumi.getter(name="foundationSessionId")
    def foundation_session_id(self) -> str:
        """
        Foundation session id for cluster creation.
        """
        return pulumi.get(self, "foundation_session_id")

    @property
    @pulumi.getter(name="imagingStopped")
    def imaging_stopped(self) -> bool:
        """
        Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.
        """
        return pulumi.get(self, "imaging_stopped")

    @property
    @pulumi.getter(name="intentPickedUp")
    def intent_picked_up(self) -> bool:
        """
        Denotes whether the remote nodes has picked up the cluster creation intent.
        """
        return pulumi.get(self, "intent_picked_up")

    @property
    @pulumi.getter(name="nodeProgressDetails")
    def node_progress_details(self) -> Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetailResult']:
        """
        List of progress details of each node.
        """
        return pulumi.get(self, "node_progress_details")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetailResult(dict):
    def __init__(__self__, *,
                 cluster_name: str,
                 message_lists: Sequence[str],
                 percent_complete: float,
                 status: str):
        """
        :param str cluster_name: Cluster name.
        :param Sequence[str] message_lists: List of messages for the client based on process state.
        :param float percent_complete: Percent completion of cluster creation process.
        :param str status: Current status of cluster creation process.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "message_lists", message_lists)
        pulumi.set(__self__, "percent_complete", percent_complete)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="messageLists")
    def message_lists(self) -> Sequence[str]:
        """
        List of messages for the client based on process state.
        """
        return pulumi.get(self, "message_lists")

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> float:
        """
        Percent completion of cluster creation process.
        """
        return pulumi.get(self, "percent_complete")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Current status of cluster creation process.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetailResult(dict):
    def __init__(__self__, *,
                 imaged_node_uuid: str,
                 imaging_stopped: bool,
                 intent_picked_up: bool,
                 message_lists: Sequence[str],
                 percent_complete: float,
                 status: str):
        """
        :param str imaged_node_uuid: UUID of the node.
        :param bool imaging_stopped: Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.
        :param bool intent_picked_up: Denotes whether the remote nodes has picked up the cluster creation intent.
        :param Sequence[str] message_lists: List of messages for the client based on process state.
        :param float percent_complete: Percent completion of cluster creation process.
        :param str status: Current status of cluster creation process.
        """
        pulumi.set(__self__, "imaged_node_uuid", imaged_node_uuid)
        pulumi.set(__self__, "imaging_stopped", imaging_stopped)
        pulumi.set(__self__, "intent_picked_up", intent_picked_up)
        pulumi.set(__self__, "message_lists", message_lists)
        pulumi.set(__self__, "percent_complete", percent_complete)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="imagedNodeUuid")
    def imaged_node_uuid(self) -> str:
        """
        UUID of the node.
        """
        return pulumi.get(self, "imaged_node_uuid")

    @property
    @pulumi.getter(name="imagingStopped")
    def imaging_stopped(self) -> bool:
        """
        Describes whether imaging has stopped. True indicates that process has stopped. False indicates that process is still going on. This field will only be used by phoenix nodes to update FC.
        """
        return pulumi.get(self, "imaging_stopped")

    @property
    @pulumi.getter(name="intentPickedUp")
    def intent_picked_up(self) -> bool:
        """
        Denotes whether the remote nodes has picked up the cluster creation intent.
        """
        return pulumi.get(self, "intent_picked_up")

    @property
    @pulumi.getter(name="messageLists")
    def message_lists(self) -> Sequence[str]:
        """
        List of messages for the client based on process state.
        """
        return pulumi.get(self, "message_lists")

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> float:
        """
        Percent completion of cluster creation process.
        """
        return pulumi.get(self, "percent_complete")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Current status of cluster creation process.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterCommonNetworkSettingsResult(dict):
    def __init__(__self__, *,
                 cvm_dns_servers: Sequence[str],
                 cvm_ntp_servers: Sequence[str],
                 hypervisor_dns_servers: Sequence[str],
                 hypervisor_ntp_servers: Sequence[str]):
        """
        :param Sequence[str] cvm_dns_servers: List of dns servers for the cvms in the cluster.
        :param Sequence[str] cvm_ntp_servers: List of ntp servers for the cvms in the cluster.
        :param Sequence[str] hypervisor_dns_servers: List of dns servers for the hypervisors in the cluster.
        :param Sequence[str] hypervisor_ntp_servers: List of ntp servers for the hypervisors in the cluster.
        """
        pulumi.set(__self__, "cvm_dns_servers", cvm_dns_servers)
        pulumi.set(__self__, "cvm_ntp_servers", cvm_ntp_servers)
        pulumi.set(__self__, "hypervisor_dns_servers", hypervisor_dns_servers)
        pulumi.set(__self__, "hypervisor_ntp_servers", hypervisor_ntp_servers)

    @property
    @pulumi.getter(name="cvmDnsServers")
    def cvm_dns_servers(self) -> Sequence[str]:
        """
        List of dns servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_dns_servers")

    @property
    @pulumi.getter(name="cvmNtpServers")
    def cvm_ntp_servers(self) -> Sequence[str]:
        """
        List of ntp servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_ntp_servers")

    @property
    @pulumi.getter(name="hypervisorDnsServers")
    def hypervisor_dns_servers(self) -> Sequence[str]:
        """
        List of dns servers for the hypervisors in the cluster.
        """
        return pulumi.get(self, "hypervisor_dns_servers")

    @property
    @pulumi.getter(name="hypervisorNtpServers")
    def hypervisor_ntp_servers(self) -> Sequence[str]:
        """
        List of ntp servers for the hypervisors in the cluster.
        """
        return pulumi.get(self, "hypervisor_ntp_servers")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigResult(dict):
    def __init__(__self__, *,
                 blocks: Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockResult'],
                 clusters: Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigClusterResult'],
                 cvm_gateway: str,
                 cvm_netmask: str,
                 dns_servers: str,
                 hyperv_product_key: str,
                 hyperv_sku: str,
                 hypervisor_gateway: str,
                 hypervisor_iso_url: Mapping[str, str],
                 hypervisor_isos: Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigHypervisorIsoResult'],
                 hypervisor_netmask: str,
                 ipmi_gateway: str,
                 ipmi_netmask: str,
                 nos_package_urls: Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigNosPackageUrlResult']):
        pulumi.set(__self__, "blocks", blocks)
        pulumi.set(__self__, "clusters", clusters)
        pulumi.set(__self__, "cvm_gateway", cvm_gateway)
        pulumi.set(__self__, "cvm_netmask", cvm_netmask)
        pulumi.set(__self__, "dns_servers", dns_servers)
        pulumi.set(__self__, "hyperv_product_key", hyperv_product_key)
        pulumi.set(__self__, "hyperv_sku", hyperv_sku)
        pulumi.set(__self__, "hypervisor_gateway", hypervisor_gateway)
        pulumi.set(__self__, "hypervisor_iso_url", hypervisor_iso_url)
        pulumi.set(__self__, "hypervisor_isos", hypervisor_isos)
        pulumi.set(__self__, "hypervisor_netmask", hypervisor_netmask)
        pulumi.set(__self__, "ipmi_gateway", ipmi_gateway)
        pulumi.set(__self__, "ipmi_netmask", ipmi_netmask)
        pulumi.set(__self__, "nos_package_urls", nos_package_urls)

    @property
    @pulumi.getter
    def blocks(self) -> Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockResult']:
        return pulumi.get(self, "blocks")

    @property
    @pulumi.getter
    def clusters(self) -> Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigClusterResult']:
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter(name="cvmGateway")
    def cvm_gateway(self) -> str:
        return pulumi.get(self, "cvm_gateway")

    @property
    @pulumi.getter(name="cvmNetmask")
    def cvm_netmask(self) -> str:
        return pulumi.get(self, "cvm_netmask")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> str:
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="hypervProductKey")
    def hyperv_product_key(self) -> str:
        return pulumi.get(self, "hyperv_product_key")

    @property
    @pulumi.getter(name="hypervSku")
    def hyperv_sku(self) -> str:
        return pulumi.get(self, "hyperv_sku")

    @property
    @pulumi.getter(name="hypervisorGateway")
    def hypervisor_gateway(self) -> str:
        return pulumi.get(self, "hypervisor_gateway")

    @property
    @pulumi.getter(name="hypervisorIsoUrl")
    def hypervisor_iso_url(self) -> Mapping[str, str]:
        return pulumi.get(self, "hypervisor_iso_url")

    @property
    @pulumi.getter(name="hypervisorIsos")
    def hypervisor_isos(self) -> Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigHypervisorIsoResult']:
        return pulumi.get(self, "hypervisor_isos")

    @property
    @pulumi.getter(name="hypervisorNetmask")
    def hypervisor_netmask(self) -> str:
        return pulumi.get(self, "hypervisor_netmask")

    @property
    @pulumi.getter(name="ipmiGateway")
    def ipmi_gateway(self) -> str:
        return pulumi.get(self, "ipmi_gateway")

    @property
    @pulumi.getter(name="ipmiNetmask")
    def ipmi_netmask(self) -> str:
        return pulumi.get(self, "ipmi_netmask")

    @property
    @pulumi.getter(name="nosPackageUrls")
    def nos_package_urls(self) -> Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigNosPackageUrlResult']:
        return pulumi.get(self, "nos_package_urls")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockResult(dict):
    def __init__(__self__, *,
                 block_id: str,
                 nodes: Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockNodeResult']):
        pulumi.set(__self__, "block_id", block_id)
        pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="blockId")
    def block_id(self) -> str:
        return pulumi.get(self, "block_id")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockNodeResult']:
        return pulumi.get(self, "nodes")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockNodeResult(dict):
    def __init__(__self__, *,
                 cvm_ip: str,
                 cvm_vlan_id: int,
                 fc_imaged_node_uuid: str,
                 hardware_attributes_override: Mapping[str, str],
                 hypervisor: str,
                 hypervisor_hostname: str,
                 hypervisor_ip: str,
                 image_now: bool,
                 ipmi_ip: str,
                 ipv6_address: str,
                 node_position: str,
                 node_serial: str):
        pulumi.set(__self__, "cvm_ip", cvm_ip)
        pulumi.set(__self__, "cvm_vlan_id", cvm_vlan_id)
        pulumi.set(__self__, "fc_imaged_node_uuid", fc_imaged_node_uuid)
        pulumi.set(__self__, "hardware_attributes_override", hardware_attributes_override)
        pulumi.set(__self__, "hypervisor", hypervisor)
        pulumi.set(__self__, "hypervisor_hostname", hypervisor_hostname)
        pulumi.set(__self__, "hypervisor_ip", hypervisor_ip)
        pulumi.set(__self__, "image_now", image_now)
        pulumi.set(__self__, "ipmi_ip", ipmi_ip)
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        pulumi.set(__self__, "node_position", node_position)
        pulumi.set(__self__, "node_serial", node_serial)

    @property
    @pulumi.getter(name="cvmIp")
    def cvm_ip(self) -> str:
        return pulumi.get(self, "cvm_ip")

    @property
    @pulumi.getter(name="cvmVlanId")
    def cvm_vlan_id(self) -> int:
        return pulumi.get(self, "cvm_vlan_id")

    @property
    @pulumi.getter(name="fcImagedNodeUuid")
    def fc_imaged_node_uuid(self) -> str:
        return pulumi.get(self, "fc_imaged_node_uuid")

    @property
    @pulumi.getter(name="hardwareAttributesOverride")
    def hardware_attributes_override(self) -> Mapping[str, str]:
        return pulumi.get(self, "hardware_attributes_override")

    @property
    @pulumi.getter
    def hypervisor(self) -> str:
        return pulumi.get(self, "hypervisor")

    @property
    @pulumi.getter(name="hypervisorHostname")
    def hypervisor_hostname(self) -> str:
        return pulumi.get(self, "hypervisor_hostname")

    @property
    @pulumi.getter(name="hypervisorIp")
    def hypervisor_ip(self) -> str:
        return pulumi.get(self, "hypervisor_ip")

    @property
    @pulumi.getter(name="imageNow")
    def image_now(self) -> bool:
        return pulumi.get(self, "image_now")

    @property
    @pulumi.getter(name="ipmiIp")
    def ipmi_ip(self) -> str:
        return pulumi.get(self, "ipmi_ip")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> str:
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="nodePosition")
    def node_position(self) -> str:
        return pulumi.get(self, "node_position")

    @property
    @pulumi.getter(name="nodeSerial")
    def node_serial(self) -> str:
        return pulumi.get(self, "node_serial")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigClusterResult(dict):
    def __init__(__self__, *,
                 cluster_external_ip: str,
                 cluster_init_now: bool,
                 cluster_init_successful: bool,
                 cluster_members: Sequence[str],
                 cluster_name: str,
                 cvm_dns_servers: str,
                 cvm_ntp_servers: str,
                 redundancy_factor: int,
                 timezone: str):
        """
        :param str cluster_external_ip: External management ip of the cluster.
        :param str cluster_name: Cluster name.
        :param str cvm_dns_servers: List of dns servers for the cvms in the cluster.
        :param str cvm_ntp_servers: List of ntp servers for the cvms in the cluster.
        :param int redundancy_factor: Redundancy factor of the cluster.
        """
        pulumi.set(__self__, "cluster_external_ip", cluster_external_ip)
        pulumi.set(__self__, "cluster_init_now", cluster_init_now)
        pulumi.set(__self__, "cluster_init_successful", cluster_init_successful)
        pulumi.set(__self__, "cluster_members", cluster_members)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cvm_dns_servers", cvm_dns_servers)
        pulumi.set(__self__, "cvm_ntp_servers", cvm_ntp_servers)
        pulumi.set(__self__, "redundancy_factor", redundancy_factor)
        pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="clusterExternalIp")
    def cluster_external_ip(self) -> str:
        """
        External management ip of the cluster.
        """
        return pulumi.get(self, "cluster_external_ip")

    @property
    @pulumi.getter(name="clusterInitNow")
    def cluster_init_now(self) -> bool:
        return pulumi.get(self, "cluster_init_now")

    @property
    @pulumi.getter(name="clusterInitSuccessful")
    def cluster_init_successful(self) -> bool:
        return pulumi.get(self, "cluster_init_successful")

    @property
    @pulumi.getter(name="clusterMembers")
    def cluster_members(self) -> Sequence[str]:
        return pulumi.get(self, "cluster_members")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="cvmDnsServers")
    def cvm_dns_servers(self) -> str:
        """
        List of dns servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_dns_servers")

    @property
    @pulumi.getter(name="cvmNtpServers")
    def cvm_ntp_servers(self) -> str:
        """
        List of ntp servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_ntp_servers")

    @property
    @pulumi.getter(name="redundancyFactor")
    def redundancy_factor(self) -> int:
        """
        Redundancy factor of the cluster.
        """
        return pulumi.get(self, "redundancy_factor")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        return pulumi.get(self, "timezone")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigHypervisorIsoResult(dict):
    def __init__(__self__, *,
                 hypervisor_type: str,
                 sha256sum: str,
                 url: str):
        pulumi.set(__self__, "hypervisor_type", hypervisor_type)
        pulumi.set(__self__, "sha256sum", sha256sum)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="hypervisorType")
    def hypervisor_type(self) -> str:
        return pulumi.get(self, "hypervisor_type")

    @property
    @pulumi.getter
    def sha256sum(self) -> str:
        return pulumi.get(self, "sha256sum")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigNosPackageUrlResult(dict):
    def __init__(__self__, *,
                 sha256sum: str,
                 url: str):
        pulumi.set(__self__, "sha256sum", sha256sum)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def sha256sum(self) -> str:
        return pulumi.get(self, "sha256sum")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetFoundationCentralImagedClustersListMetadataResult(dict):
    def __init__(__self__, *,
                 length: int,
                 offset: int,
                 total_matches: int):
        """
        :param int length: The number of records retrieved.
        :param int offset: Offset from the start of the object list.
        :param int total_matches: Total matches found.
        """
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "total_matches", total_matches)

    @property
    @pulumi.getter
    def length(self) -> int:
        """
        The number of records retrieved.
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        Offset from the start of the object list.
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="totalMatches")
    def total_matches(self) -> int:
        """
        Total matches found.
        """
        return pulumi.get(self, "total_matches")


@pulumi.output_type
class GetFoundationCentralImagedNodesListFiltersResult(dict):
    def __init__(__self__, *,
                 node_state: Optional[str] = None):
        """
        :param str node_state: Specifies whether the node is discovering, available or unavailable for cluster creation.
        """
        if node_state is not None:
            pulumi.set(__self__, "node_state", node_state)

    @property
    @pulumi.getter(name="nodeState")
    def node_state(self) -> Optional[str]:
        """
        Specifies whether the node is discovering, available or unavailable for cluster creation.
        """
        return pulumi.get(self, "node_state")


@pulumi.output_type
class GetFoundationCentralImagedNodesListImagedNodeResult(dict):
    def __init__(__self__, *,
                 aos_version: str,
                 api_key_uuid: str,
                 available: bool,
                 block_serial: str,
                 created_timestamp: str,
                 current_time: str,
                 cvm_gateway: str,
                 cvm_ip: str,
                 cvm_ipv6: str,
                 cvm_netmask: str,
                 cvm_up: bool,
                 cvm_uuid: str,
                 cvm_vlan_id: int,
                 foundation_version: str,
                 hardware_attributes: Mapping[str, str],
                 hypervisor_gateway: str,
                 hypervisor_hostname: str,
                 hypervisor_ip: str,
                 hypervisor_netmask: str,
                 hypervisor_type: str,
                 hypervisor_version: str,
                 imaged_cluster_uuid: str,
                 imaged_node_uuid: str,
                 ipmi_gateway: str,
                 ipmi_ip: str,
                 ipmi_netmask: str,
                 ipv6_interface: str,
                 latest_hb_ts_lists: Sequence[str],
                 model: str,
                 node_position: str,
                 node_serial: str,
                 node_state: str,
                 node_type: str,
                 object_version: int,
                 supported_features: Sequence[str]):
        """
        :param str aos_version: AOS version currently installed on the node.
        :param str api_key_uuid: API key used to register the node.
        :param bool available: Specifies whether the node is available for cluster creation.
        :param str block_serial: Serial number of the block to which the node belongs.
        :param str created_timestamp: Time when the node was discovered in Foundation Central.
        :param str current_time: Current time of Foundation Central.
        :param str cvm_gateway: gateway of the cvm.
        :param str cvm_ip: IP address of the cvm.
        :param str cvm_ipv6: IPv6 address of the cvm.
        :param str cvm_netmask: netmask of the cvm.
        :param bool cvm_up: Denotes whether the CVM is up or not on this node.
        :param str cvm_uuid: Node UUID from the node's cvm.
        :param int cvm_vlan_id: Vlan tag of the cvm, if the cvm is on a vlan.
        :param str foundation_version: Foundation version installed on the node.
        :param Mapping[str, str] hardware_attributes: Hardware attributes json of the node.
        :param str hypervisor_gateway: gateway of the hypervisor.
        :param str hypervisor_hostname: Name of the hypervisor host.
        :param str hypervisor_ip: IP address of the hypervisor.
        :param str hypervisor_netmask: netmask of the hypervisor.
        :param str hypervisor_type: Hypervisor type currently installed on the node. Must be one of {kvm, esx, hyperv}.
        :param str hypervisor_version: Version of the hypervisor currently installed on the node.
        :param str imaged_cluster_uuid: UUID of the cluster to which the node belongs, if any.
        :param str imaged_node_uuid: UUID of the node.
        :param str ipmi_gateway: gateway of the ipmi.
        :param str ipmi_ip: IP address of the ipmi.
        :param str ipmi_netmask: netmask of the ipmi.
        :param str ipv6_interface: Name of the cvm interface having ipv6 address.
        :param Sequence[str] latest_hb_ts_lists: List of timestamps when the node has sent heartbeats to Foundation Central.
        :param str model: Model of the node.
        :param str node_position: Position of the node in the block.
        :param str node_serial: Serial number of the node.
        :param str node_state: Specifies whether the node is discovering, available or unavailable for cluster creation.
        :param str node_type: Specifies the type of node - on-prem, AWS, GCP etc.
        :param int object_version: Version of the node used for CAS.
        """
        pulumi.set(__self__, "aos_version", aos_version)
        pulumi.set(__self__, "api_key_uuid", api_key_uuid)
        pulumi.set(__self__, "available", available)
        pulumi.set(__self__, "block_serial", block_serial)
        pulumi.set(__self__, "created_timestamp", created_timestamp)
        pulumi.set(__self__, "current_time", current_time)
        pulumi.set(__self__, "cvm_gateway", cvm_gateway)
        pulumi.set(__self__, "cvm_ip", cvm_ip)
        pulumi.set(__self__, "cvm_ipv6", cvm_ipv6)
        pulumi.set(__self__, "cvm_netmask", cvm_netmask)
        pulumi.set(__self__, "cvm_up", cvm_up)
        pulumi.set(__self__, "cvm_uuid", cvm_uuid)
        pulumi.set(__self__, "cvm_vlan_id", cvm_vlan_id)
        pulumi.set(__self__, "foundation_version", foundation_version)
        pulumi.set(__self__, "hardware_attributes", hardware_attributes)
        pulumi.set(__self__, "hypervisor_gateway", hypervisor_gateway)
        pulumi.set(__self__, "hypervisor_hostname", hypervisor_hostname)
        pulumi.set(__self__, "hypervisor_ip", hypervisor_ip)
        pulumi.set(__self__, "hypervisor_netmask", hypervisor_netmask)
        pulumi.set(__self__, "hypervisor_type", hypervisor_type)
        pulumi.set(__self__, "hypervisor_version", hypervisor_version)
        pulumi.set(__self__, "imaged_cluster_uuid", imaged_cluster_uuid)
        pulumi.set(__self__, "imaged_node_uuid", imaged_node_uuid)
        pulumi.set(__self__, "ipmi_gateway", ipmi_gateway)
        pulumi.set(__self__, "ipmi_ip", ipmi_ip)
        pulumi.set(__self__, "ipmi_netmask", ipmi_netmask)
        pulumi.set(__self__, "ipv6_interface", ipv6_interface)
        pulumi.set(__self__, "latest_hb_ts_lists", latest_hb_ts_lists)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "node_position", node_position)
        pulumi.set(__self__, "node_serial", node_serial)
        pulumi.set(__self__, "node_state", node_state)
        pulumi.set(__self__, "node_type", node_type)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "supported_features", supported_features)

    @property
    @pulumi.getter(name="aosVersion")
    def aos_version(self) -> str:
        """
        AOS version currently installed on the node.
        """
        return pulumi.get(self, "aos_version")

    @property
    @pulumi.getter(name="apiKeyUuid")
    def api_key_uuid(self) -> str:
        """
        API key used to register the node.
        """
        return pulumi.get(self, "api_key_uuid")

    @property
    @pulumi.getter
    def available(self) -> bool:
        """
        Specifies whether the node is available for cluster creation.
        """
        return pulumi.get(self, "available")

    @property
    @pulumi.getter(name="blockSerial")
    def block_serial(self) -> str:
        """
        Serial number of the block to which the node belongs.
        """
        return pulumi.get(self, "block_serial")

    @property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> str:
        """
        Time when the node was discovered in Foundation Central.
        """
        return pulumi.get(self, "created_timestamp")

    @property
    @pulumi.getter(name="currentTime")
    def current_time(self) -> str:
        """
        Current time of Foundation Central.
        """
        return pulumi.get(self, "current_time")

    @property
    @pulumi.getter(name="cvmGateway")
    def cvm_gateway(self) -> str:
        """
        gateway of the cvm.
        """
        return pulumi.get(self, "cvm_gateway")

    @property
    @pulumi.getter(name="cvmIp")
    def cvm_ip(self) -> str:
        """
        IP address of the cvm.
        """
        return pulumi.get(self, "cvm_ip")

    @property
    @pulumi.getter(name="cvmIpv6")
    def cvm_ipv6(self) -> str:
        """
        IPv6 address of the cvm.
        """
        return pulumi.get(self, "cvm_ipv6")

    @property
    @pulumi.getter(name="cvmNetmask")
    def cvm_netmask(self) -> str:
        """
        netmask of the cvm.
        """
        return pulumi.get(self, "cvm_netmask")

    @property
    @pulumi.getter(name="cvmUp")
    def cvm_up(self) -> bool:
        """
        Denotes whether the CVM is up or not on this node.
        """
        return pulumi.get(self, "cvm_up")

    @property
    @pulumi.getter(name="cvmUuid")
    def cvm_uuid(self) -> str:
        """
        Node UUID from the node's cvm.
        """
        return pulumi.get(self, "cvm_uuid")

    @property
    @pulumi.getter(name="cvmVlanId")
    def cvm_vlan_id(self) -> int:
        """
        Vlan tag of the cvm, if the cvm is on a vlan.
        """
        return pulumi.get(self, "cvm_vlan_id")

    @property
    @pulumi.getter(name="foundationVersion")
    def foundation_version(self) -> str:
        """
        Foundation version installed on the node.
        """
        return pulumi.get(self, "foundation_version")

    @property
    @pulumi.getter(name="hardwareAttributes")
    def hardware_attributes(self) -> Mapping[str, str]:
        """
        Hardware attributes json of the node.
        """
        return pulumi.get(self, "hardware_attributes")

    @property
    @pulumi.getter(name="hypervisorGateway")
    def hypervisor_gateway(self) -> str:
        """
        gateway of the hypervisor.
        """
        return pulumi.get(self, "hypervisor_gateway")

    @property
    @pulumi.getter(name="hypervisorHostname")
    def hypervisor_hostname(self) -> str:
        """
        Name of the hypervisor host.
        """
        return pulumi.get(self, "hypervisor_hostname")

    @property
    @pulumi.getter(name="hypervisorIp")
    def hypervisor_ip(self) -> str:
        """
        IP address of the hypervisor.
        """
        return pulumi.get(self, "hypervisor_ip")

    @property
    @pulumi.getter(name="hypervisorNetmask")
    def hypervisor_netmask(self) -> str:
        """
        netmask of the hypervisor.
        """
        return pulumi.get(self, "hypervisor_netmask")

    @property
    @pulumi.getter(name="hypervisorType")
    def hypervisor_type(self) -> str:
        """
        Hypervisor type currently installed on the node. Must be one of {kvm, esx, hyperv}.
        """
        return pulumi.get(self, "hypervisor_type")

    @property
    @pulumi.getter(name="hypervisorVersion")
    def hypervisor_version(self) -> str:
        """
        Version of the hypervisor currently installed on the node.
        """
        return pulumi.get(self, "hypervisor_version")

    @property
    @pulumi.getter(name="imagedClusterUuid")
    def imaged_cluster_uuid(self) -> str:
        """
        UUID of the cluster to which the node belongs, if any.
        """
        return pulumi.get(self, "imaged_cluster_uuid")

    @property
    @pulumi.getter(name="imagedNodeUuid")
    def imaged_node_uuid(self) -> str:
        """
        UUID of the node.
        """
        return pulumi.get(self, "imaged_node_uuid")

    @property
    @pulumi.getter(name="ipmiGateway")
    def ipmi_gateway(self) -> str:
        """
        gateway of the ipmi.
        """
        return pulumi.get(self, "ipmi_gateway")

    @property
    @pulumi.getter(name="ipmiIp")
    def ipmi_ip(self) -> str:
        """
        IP address of the ipmi.
        """
        return pulumi.get(self, "ipmi_ip")

    @property
    @pulumi.getter(name="ipmiNetmask")
    def ipmi_netmask(self) -> str:
        """
        netmask of the ipmi.
        """
        return pulumi.get(self, "ipmi_netmask")

    @property
    @pulumi.getter(name="ipv6Interface")
    def ipv6_interface(self) -> str:
        """
        Name of the cvm interface having ipv6 address.
        """
        return pulumi.get(self, "ipv6_interface")

    @property
    @pulumi.getter(name="latestHbTsLists")
    def latest_hb_ts_lists(self) -> Sequence[str]:
        """
        List of timestamps when the node has sent heartbeats to Foundation Central.
        """
        return pulumi.get(self, "latest_hb_ts_lists")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Model of the node.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="nodePosition")
    def node_position(self) -> str:
        """
        Position of the node in the block.
        """
        return pulumi.get(self, "node_position")

    @property
    @pulumi.getter(name="nodeSerial")
    def node_serial(self) -> str:
        """
        Serial number of the node.
        """
        return pulumi.get(self, "node_serial")

    @property
    @pulumi.getter(name="nodeState")
    def node_state(self) -> str:
        """
        Specifies whether the node is discovering, available or unavailable for cluster creation.
        """
        return pulumi.get(self, "node_state")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        """
        Specifies the type of node - on-prem, AWS, GCP etc.
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        Version of the node used for CAS.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="supportedFeatures")
    def supported_features(self) -> Sequence[str]:
        return pulumi.get(self, "supported_features")


@pulumi.output_type
class GetFoundationCentralImagedNodesListMetadataResult(dict):
    def __init__(__self__, *,
                 length: int,
                 offset: int,
                 total_matches: int):
        """
        :param int length: The number of records retrieved.
        :param int offset: Offset from the start of the object list.
        :param int total_matches: Total matches found.
        """
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "total_matches", total_matches)

    @property
    @pulumi.getter
    def length(self) -> int:
        """
        The number of records retrieved.
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        Offset from the start of the object list.
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="totalMatches")
    def total_matches(self) -> int:
        """
        Total matches found.
        """
        return pulumi.get(self, "total_matches")


@pulumi.output_type
class GetFoundationCentralListApiKeysApiKeyResult(dict):
    def __init__(__self__, *,
                 alias: str,
                 api_key: str,
                 created_timestamp: str,
                 current_time: str,
                 key_uuid: str):
        """
        :param str alias: Alias of the api key.
        :param str api_key: Api key in string format.
        :param str created_timestamp: Time when the api key was created.
        :param str current_time: Current time of Foundation Central.
        :param str key_uuid: UUID of the api key.
        """
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "created_timestamp", created_timestamp)
        pulumi.set(__self__, "current_time", current_time)
        pulumi.set(__self__, "key_uuid", key_uuid)

    @property
    @pulumi.getter
    def alias(self) -> str:
        """
        Alias of the api key.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        Api key in string format.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> str:
        """
        Time when the api key was created.
        """
        return pulumi.get(self, "created_timestamp")

    @property
    @pulumi.getter(name="currentTime")
    def current_time(self) -> str:
        """
        Current time of Foundation Central.
        """
        return pulumi.get(self, "current_time")

    @property
    @pulumi.getter(name="keyUuid")
    def key_uuid(self) -> str:
        """
        UUID of the api key.
        """
        return pulumi.get(self, "key_uuid")


@pulumi.output_type
class GetFoundationCentralListApiKeysMetadataResult(dict):
    def __init__(__self__, *,
                 length: int,
                 offset: int,
                 total_matches: int):
        """
        :param int length: The number of records retrieved.
        :param int offset: Offset from the start of the object list.
        :param int total_matches: Total matches found.
        """
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "total_matches", total_matches)

    @property
    @pulumi.getter
    def length(self) -> int:
        """
        The number of records retrieved.
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        Offset from the start of the object list.
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="totalMatches")
    def total_matches(self) -> int:
        """
        Total matches found.
        """
        return pulumi.get(self, "total_matches")


@pulumi.output_type
class GetFoundationDiscoverNodesEntityResult(dict):
    def __init__(__self__, *,
                 block_id: str,
                 chassis_n: int,
                 model: str,
                 nodes: Sequence['outputs.GetFoundationDiscoverNodesEntityNodeResult']):
        """
        :param str block_id: Chassis serial number.
        :param int chassis_n: ID number of the block.
        :param str model: Model name of the node.
        :param Sequence['GetFoundationDiscoverNodesEntityNodeArgs'] nodes: Node level properties.
        """
        pulumi.set(__self__, "block_id", block_id)
        pulumi.set(__self__, "chassis_n", chassis_n)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="blockId")
    def block_id(self) -> str:
        """
        Chassis serial number.
        """
        return pulumi.get(self, "block_id")

    @property
    @pulumi.getter(name="chassisN")
    def chassis_n(self) -> int:
        """
        ID number of the block.
        """
        return pulumi.get(self, "chassis_n")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Model name of the node.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetFoundationDiscoverNodesEntityNodeResult']:
        """
        Node level properties.
        """
        return pulumi.get(self, "nodes")


@pulumi.output_type
class GetFoundationDiscoverNodesEntityNodeResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 configured: bool,
                 current_cvm_vlan_tag: str,
                 current_network_interface: str,
                 foundation_version: str,
                 hypervisor: str,
                 hypervisor_version: str,
                 ipv6_address: str,
                 model: str,
                 node_position: str,
                 node_serial: str,
                 node_uuid: str,
                 nos_version: str,
                 svm_ip: str):
        """
        :param str cluster_id: ID of the cluster the node is part of.
        :param bool configured: Whether the node is configured.
        :param str current_cvm_vlan_tag: vlan tag of cvm.
        :param str current_network_interface: Current network interface of the node.
        :param str foundation_version: Version of foundation.
        :param str hypervisor: Type of hypervisor installed on the node.
        :param str hypervisor_version: Version of hypervisor installed.
        :param str ipv6_address: IPV6 address of the node.
        :param str model: Model name of the node.
        :param str node_position: Position of the node in the block.
        :param str node_serial: Node serial of the node.
        :param str node_uuid: UUID of the node.
        :param str nos_version: Version of NOS installed on the node.
        :param str svm_ip: IP address of CVM.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "configured", configured)
        pulumi.set(__self__, "current_cvm_vlan_tag", current_cvm_vlan_tag)
        pulumi.set(__self__, "current_network_interface", current_network_interface)
        pulumi.set(__self__, "foundation_version", foundation_version)
        pulumi.set(__self__, "hypervisor", hypervisor)
        pulumi.set(__self__, "hypervisor_version", hypervisor_version)
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "node_position", node_position)
        pulumi.set(__self__, "node_serial", node_serial)
        pulumi.set(__self__, "node_uuid", node_uuid)
        pulumi.set(__self__, "nos_version", nos_version)
        pulumi.set(__self__, "svm_ip", svm_ip)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        ID of the cluster the node is part of.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def configured(self) -> bool:
        """
        Whether the node is configured.
        """
        return pulumi.get(self, "configured")

    @property
    @pulumi.getter(name="currentCvmVlanTag")
    def current_cvm_vlan_tag(self) -> str:
        """
        vlan tag of cvm.
        """
        return pulumi.get(self, "current_cvm_vlan_tag")

    @property
    @pulumi.getter(name="currentNetworkInterface")
    def current_network_interface(self) -> str:
        """
        Current network interface of the node.
        """
        return pulumi.get(self, "current_network_interface")

    @property
    @pulumi.getter(name="foundationVersion")
    def foundation_version(self) -> str:
        """
        Version of foundation.
        """
        return pulumi.get(self, "foundation_version")

    @property
    @pulumi.getter
    def hypervisor(self) -> str:
        """
        Type of hypervisor installed on the node.
        """
        return pulumi.get(self, "hypervisor")

    @property
    @pulumi.getter(name="hypervisorVersion")
    def hypervisor_version(self) -> str:
        """
        Version of hypervisor installed.
        """
        return pulumi.get(self, "hypervisor_version")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> str:
        """
        IPV6 address of the node.
        """
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Model name of the node.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="nodePosition")
    def node_position(self) -> str:
        """
        Position of the node in the block.
        """
        return pulumi.get(self, "node_position")

    @property
    @pulumi.getter(name="nodeSerial")
    def node_serial(self) -> str:
        """
        Node serial of the node.
        """
        return pulumi.get(self, "node_serial")

    @property
    @pulumi.getter(name="nodeUuid")
    def node_uuid(self) -> str:
        """
        UUID of the node.
        """
        return pulumi.get(self, "node_uuid")

    @property
    @pulumi.getter(name="nosVersion")
    def nos_version(self) -> str:
        """
        Version of NOS installed on the node.
        """
        return pulumi.get(self, "nos_version")

    @property
    @pulumi.getter(name="svmIp")
    def svm_ip(self) -> str:
        """
        IP address of CVM.
        """
        return pulumi.get(self, "svm_ip")


@pulumi.output_type
class GetFoundationHypervisorIsosEsxResult(dict):
    def __init__(__self__, *,
                 filename: str,
                 supported: bool):
        """
        :param str filename: Name of installer.
        :param bool supported: Whether front-end should treat hyp as supported.
        """
        pulumi.set(__self__, "filename", filename)
        pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter
    def filename(self) -> str:
        """
        Name of installer.
        """
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter
    def supported(self) -> bool:
        """
        Whether front-end should treat hyp as supported.
        """
        return pulumi.get(self, "supported")


@pulumi.output_type
class GetFoundationHypervisorIsosHypervResult(dict):
    def __init__(__self__, *,
                 filename: str,
                 supported: bool):
        """
        :param str filename: Name of installer.
        :param bool supported: Whether front-end should treat hyp as supported.
        """
        pulumi.set(__self__, "filename", filename)
        pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter
    def filename(self) -> str:
        """
        Name of installer.
        """
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter
    def supported(self) -> bool:
        """
        Whether front-end should treat hyp as supported.
        """
        return pulumi.get(self, "supported")


@pulumi.output_type
class GetFoundationHypervisorIsosKvmResult(dict):
    def __init__(__self__, *,
                 filename: str,
                 supported: bool):
        """
        :param str filename: Name of installer.
        :param bool supported: Whether front-end should treat hyp as supported.
        """
        pulumi.set(__self__, "filename", filename)
        pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter
    def filename(self) -> str:
        """
        Name of installer.
        """
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter
    def supported(self) -> bool:
        """
        Whether front-end should treat hyp as supported.
        """
        return pulumi.get(self, "supported")


@pulumi.output_type
class GetFoundationHypervisorIsosLinuxResult(dict):
    def __init__(__self__, *,
                 filename: str,
                 supported: bool):
        """
        :param str filename: Name of installer.
        :param bool supported: Whether front-end should treat hyp as supported.
        """
        pulumi.set(__self__, "filename", filename)
        pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter
    def filename(self) -> str:
        """
        Name of installer.
        """
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter
    def supported(self) -> bool:
        """
        Whether front-end should treat hyp as supported.
        """
        return pulumi.get(self, "supported")


@pulumi.output_type
class GetFoundationHypervisorIsosXenResult(dict):
    def __init__(__self__, *,
                 filename: str,
                 supported: bool):
        """
        :param str filename: Name of installer.
        :param bool supported: Whether front-end should treat hyp as supported.
        """
        pulumi.set(__self__, "filename", filename)
        pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter
    def filename(self) -> str:
        """
        Name of installer.
        """
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter
    def supported(self) -> bool:
        """
        Whether front-end should treat hyp as supported.
        """
        return pulumi.get(self, "supported")


@pulumi.output_type
class GetFoundationNodeNetworkDetailsNodeResult(dict):
    def __init__(__self__, *,
                 cvm_gateway: str,
                 cvm_ip: str,
                 cvm_netmask: str,
                 cvm_vlan_id: str,
                 error: str,
                 hypervisor_gateway: str,
                 hypervisor_hostname: str,
                 hypervisor_ip: str,
                 hypervisor_netmask: str,
                 ipmi_gateway: str,
                 ipmi_ip: str,
                 ipmi_netmask: str,
                 ipv6_address: str,
                 node_serial: str):
        """
        :param str cvm_gateway: Gateway of CVM.
        :param str cvm_ip: CVM IP address.
        :param str cvm_netmask: Netmask of CVM.
        :param str cvm_vlan_id: CVM vlan tag.
        :param str error: Only exists when failed to fetch node_info, with the reason of failure. all other fields will be empty.
        :param str hypervisor_gateway: Gateway of the hypervisor.
        :param str hypervisor_hostname: Hypervisor hostname.
        :param str hypervisor_ip: Hypervisor IP address.
        :param str hypervisor_netmask: Netmask of the hypervisor.
        :param str ipmi_gateway: IPMI gateway.
        :param str ipmi_ip: IPMI IP address.
        :param str ipmi_netmask: IPMI netmask.
        :param str ipv6_address: IPV6 address of the CVM.
        :param str node_serial: Node serial.
        """
        pulumi.set(__self__, "cvm_gateway", cvm_gateway)
        pulumi.set(__self__, "cvm_ip", cvm_ip)
        pulumi.set(__self__, "cvm_netmask", cvm_netmask)
        pulumi.set(__self__, "cvm_vlan_id", cvm_vlan_id)
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "hypervisor_gateway", hypervisor_gateway)
        pulumi.set(__self__, "hypervisor_hostname", hypervisor_hostname)
        pulumi.set(__self__, "hypervisor_ip", hypervisor_ip)
        pulumi.set(__self__, "hypervisor_netmask", hypervisor_netmask)
        pulumi.set(__self__, "ipmi_gateway", ipmi_gateway)
        pulumi.set(__self__, "ipmi_ip", ipmi_ip)
        pulumi.set(__self__, "ipmi_netmask", ipmi_netmask)
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        pulumi.set(__self__, "node_serial", node_serial)

    @property
    @pulumi.getter(name="cvmGateway")
    def cvm_gateway(self) -> str:
        """
        Gateway of CVM.
        """
        return pulumi.get(self, "cvm_gateway")

    @property
    @pulumi.getter(name="cvmIp")
    def cvm_ip(self) -> str:
        """
        CVM IP address.
        """
        return pulumi.get(self, "cvm_ip")

    @property
    @pulumi.getter(name="cvmNetmask")
    def cvm_netmask(self) -> str:
        """
        Netmask of CVM.
        """
        return pulumi.get(self, "cvm_netmask")

    @property
    @pulumi.getter(name="cvmVlanId")
    def cvm_vlan_id(self) -> str:
        """
        CVM vlan tag.
        """
        return pulumi.get(self, "cvm_vlan_id")

    @property
    @pulumi.getter
    def error(self) -> str:
        """
        Only exists when failed to fetch node_info, with the reason of failure. all other fields will be empty.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter(name="hypervisorGateway")
    def hypervisor_gateway(self) -> str:
        """
        Gateway of the hypervisor.
        """
        return pulumi.get(self, "hypervisor_gateway")

    @property
    @pulumi.getter(name="hypervisorHostname")
    def hypervisor_hostname(self) -> str:
        """
        Hypervisor hostname.
        """
        return pulumi.get(self, "hypervisor_hostname")

    @property
    @pulumi.getter(name="hypervisorIp")
    def hypervisor_ip(self) -> str:
        """
        Hypervisor IP address.
        """
        return pulumi.get(self, "hypervisor_ip")

    @property
    @pulumi.getter(name="hypervisorNetmask")
    def hypervisor_netmask(self) -> str:
        """
        Netmask of the hypervisor.
        """
        return pulumi.get(self, "hypervisor_netmask")

    @property
    @pulumi.getter(name="ipmiGateway")
    def ipmi_gateway(self) -> str:
        """
        IPMI gateway.
        """
        return pulumi.get(self, "ipmi_gateway")

    @property
    @pulumi.getter(name="ipmiIp")
    def ipmi_ip(self) -> str:
        """
        IPMI IP address.
        """
        return pulumi.get(self, "ipmi_ip")

    @property
    @pulumi.getter(name="ipmiNetmask")
    def ipmi_netmask(self) -> str:
        """
        IPMI netmask.
        """
        return pulumi.get(self, "ipmi_netmask")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> str:
        """
        IPV6 address of the CVM.
        """
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="nodeSerial")
    def node_serial(self) -> str:
        """
        Node serial.
        """
        return pulumi.get(self, "node_serial")


@pulumi.output_type
class GetHostCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the key name.
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the key name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHostGpuListResult(dict):
    def __init__(__self__, *,
                 assignable: bool,
                 consumer_reference: Mapping[str, str],
                 device_id: int,
                 fraction: int,
                 frame_buffer_size_mib: int,
                 guest_driver_version: str,
                 index: int,
                 license_lists: Sequence[str],
                 max_resolution: str,
                 mode: str,
                 name: str,
                 num_vgpus_allocated: int,
                 num_virtual_display_heads: int,
                 numa_node: int,
                 pci_address: str,
                 status: str,
                 uuid: str,
                 vendor: str):
        """
        :param str name: - the name.
        :param str uuid: - the uuid.
        """
        pulumi.set(__self__, "assignable", assignable)
        pulumi.set(__self__, "consumer_reference", consumer_reference)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "fraction", fraction)
        pulumi.set(__self__, "frame_buffer_size_mib", frame_buffer_size_mib)
        pulumi.set(__self__, "guest_driver_version", guest_driver_version)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "license_lists", license_lists)
        pulumi.set(__self__, "max_resolution", max_resolution)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "num_vgpus_allocated", num_vgpus_allocated)
        pulumi.set(__self__, "num_virtual_display_heads", num_virtual_display_heads)
        pulumi.set(__self__, "numa_node", numa_node)
        pulumi.set(__self__, "pci_address", pci_address)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter
    def assignable(self) -> bool:
        return pulumi.get(self, "assignable")

    @property
    @pulumi.getter(name="consumerReference")
    def consumer_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "consumer_reference")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> int:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter
    def fraction(self) -> int:
        return pulumi.get(self, "fraction")

    @property
    @pulumi.getter(name="frameBufferSizeMib")
    def frame_buffer_size_mib(self) -> int:
        return pulumi.get(self, "frame_buffer_size_mib")

    @property
    @pulumi.getter(name="guestDriverVersion")
    def guest_driver_version(self) -> str:
        return pulumi.get(self, "guest_driver_version")

    @property
    @pulumi.getter
    def index(self) -> int:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="licenseLists")
    def license_lists(self) -> Sequence[str]:
        return pulumi.get(self, "license_lists")

    @property
    @pulumi.getter(name="maxResolution")
    def max_resolution(self) -> str:
        return pulumi.get(self, "max_resolution")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numVgpusAllocated")
    def num_vgpus_allocated(self) -> int:
        return pulumi.get(self, "num_vgpus_allocated")

    @property
    @pulumi.getter(name="numVirtualDisplayHeads")
    def num_virtual_display_heads(self) -> int:
        return pulumi.get(self, "num_virtual_display_heads")

    @property
    @pulumi.getter(name="numaNode")
    def numa_node(self) -> int:
        return pulumi.get(self, "numa_node")

    @property
    @pulumi.getter(name="pciAddress")
    def pci_address(self) -> str:
        return pulumi.get(self, "pci_address")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the uuid.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vendor(self) -> str:
        return pulumi.get(self, "vendor")


@pulumi.output_type
class GetHostHostDisksReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the uuid.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the uuid.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetHostsEntityResult(dict):
    def __init__(__self__, *,
                 api_version: str,
                 block: Mapping[str, str],
                 categories: Sequence['outputs.GetHostsEntityCategoryResult'],
                 cluster_reference: Mapping[str, str],
                 controller_vm: Mapping[str, str],
                 cpu_capacity_hz: int,
                 cpu_model: str,
                 failover_cluster: Mapping[str, str],
                 gpu_driver_version: str,
                 gpu_lists: Sequence['outputs.GetHostsEntityGpuListResult'],
                 host_disks_reference_lists: Sequence['outputs.GetHostsEntityHostDisksReferenceListResult'],
                 host_nics_id_lists: Sequence[str],
                 host_type: str,
                 hypervisor: Mapping[str, str],
                 ipmi: Mapping[str, str],
                 memory_capacity_mib: int,
                 metadata: Mapping[str, str],
                 monitoring_state: str,
                 name: str,
                 num_cpu_cores: int,
                 num_cpu_sockets: int,
                 owner_reference: Mapping[str, str],
                 project_reference: Mapping[str, str],
                 rackable_unit_reference: Mapping[str, str],
                 serial_number: str,
                 windows_domain: Mapping[str, str]):
        """
        :param str api_version: The API version.
        :param Mapping[str, str] block: - Host block config info.
        :param Sequence['GetHostsEntityCategoryArgs'] categories: - Categories for the image.
        :param Mapping[str, str] cluster_reference: - Reference to a kind. Either one of (kind, uuid) or url needs to be specified.
        :param Mapping[str, str] controller_vm: - Host controller vm information.
        :param int cpu_capacity_hz: - Host CPU capacity.
        :param str cpu_model: - Host CPU model.
        :param Mapping[str, str] failover_cluster: - Hyper-V failover cluster.
        :param str gpu_driver_version: - Host GPU driver version.
        :param Sequence['GetHostsEntityGpuListArgs'] gpu_lists: - List of GPUs on the host.
        :param Sequence['GetHostsEntityHostDisksReferenceListArgs'] host_disks_reference_lists: - The reference to a disk.
        :param Sequence[str] host_nics_id_lists: - Host NICs.
        :param str host_type: - Host type.
        :param Mapping[str, str] hypervisor: - Host Hypervisor information.
        :param Mapping[str, str] ipmi: - Host IPMI info.
        :param int memory_capacity_mib: - Host memory capacity in MiB.
        :param str monitoring_state: - Host monitoring status.
        :param str name: - the name.
        :param int num_cpu_cores: - Number of CPU cores on Host.
        :param int num_cpu_sockets: - Number of CPU sockets.
        :param Mapping[str, str] owner_reference: - The reference to a user.
        :param Mapping[str, str] project_reference: - The reference to a project.
        :param Mapping[str, str] rackable_unit_reference: - The reference to a rackable_unit.
        :param str serial_number: - Node serial number.
        :param Mapping[str, str] windows_domain: - The name of the node to be renamed to during domain-join. If not given,a new name will be automatically assigned.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "block", block)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "cluster_reference", cluster_reference)
        pulumi.set(__self__, "controller_vm", controller_vm)
        pulumi.set(__self__, "cpu_capacity_hz", cpu_capacity_hz)
        pulumi.set(__self__, "cpu_model", cpu_model)
        pulumi.set(__self__, "failover_cluster", failover_cluster)
        pulumi.set(__self__, "gpu_driver_version", gpu_driver_version)
        pulumi.set(__self__, "gpu_lists", gpu_lists)
        pulumi.set(__self__, "host_disks_reference_lists", host_disks_reference_lists)
        pulumi.set(__self__, "host_nics_id_lists", host_nics_id_lists)
        pulumi.set(__self__, "host_type", host_type)
        pulumi.set(__self__, "hypervisor", hypervisor)
        pulumi.set(__self__, "ipmi", ipmi)
        pulumi.set(__self__, "memory_capacity_mib", memory_capacity_mib)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "monitoring_state", monitoring_state)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "num_cpu_cores", num_cpu_cores)
        pulumi.set(__self__, "num_cpu_sockets", num_cpu_sockets)
        pulumi.set(__self__, "owner_reference", owner_reference)
        pulumi.set(__self__, "project_reference", project_reference)
        pulumi.set(__self__, "rackable_unit_reference", rackable_unit_reference)
        pulumi.set(__self__, "serial_number", serial_number)
        pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        The API version.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def block(self) -> Mapping[str, str]:
        """
        - Host block config info.
        """
        return pulumi.get(self, "block")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetHostsEntityCategoryResult']:
        """
        - Categories for the image.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="clusterReference")
    def cluster_reference(self) -> Mapping[str, str]:
        """
        - Reference to a kind. Either one of (kind, uuid) or url needs to be specified.
        """
        return pulumi.get(self, "cluster_reference")

    @property
    @pulumi.getter(name="controllerVm")
    def controller_vm(self) -> Mapping[str, str]:
        """
        - Host controller vm information.
        """
        return pulumi.get(self, "controller_vm")

    @property
    @pulumi.getter(name="cpuCapacityHz")
    def cpu_capacity_hz(self) -> int:
        """
        - Host CPU capacity.
        """
        return pulumi.get(self, "cpu_capacity_hz")

    @property
    @pulumi.getter(name="cpuModel")
    def cpu_model(self) -> str:
        """
        - Host CPU model.
        """
        return pulumi.get(self, "cpu_model")

    @property
    @pulumi.getter(name="failoverCluster")
    def failover_cluster(self) -> Mapping[str, str]:
        """
        - Hyper-V failover cluster.
        """
        return pulumi.get(self, "failover_cluster")

    @property
    @pulumi.getter(name="gpuDriverVersion")
    def gpu_driver_version(self) -> str:
        """
        - Host GPU driver version.
        """
        return pulumi.get(self, "gpu_driver_version")

    @property
    @pulumi.getter(name="gpuLists")
    def gpu_lists(self) -> Sequence['outputs.GetHostsEntityGpuListResult']:
        """
        - List of GPUs on the host.
        """
        return pulumi.get(self, "gpu_lists")

    @property
    @pulumi.getter(name="hostDisksReferenceLists")
    def host_disks_reference_lists(self) -> Sequence['outputs.GetHostsEntityHostDisksReferenceListResult']:
        """
        - The reference to a disk.
        """
        return pulumi.get(self, "host_disks_reference_lists")

    @property
    @pulumi.getter(name="hostNicsIdLists")
    def host_nics_id_lists(self) -> Sequence[str]:
        """
        - Host NICs.
        """
        return pulumi.get(self, "host_nics_id_lists")

    @property
    @pulumi.getter(name="hostType")
    def host_type(self) -> str:
        """
        - Host type.
        """
        return pulumi.get(self, "host_type")

    @property
    @pulumi.getter
    def hypervisor(self) -> Mapping[str, str]:
        """
        - Host Hypervisor information.
        """
        return pulumi.get(self, "hypervisor")

    @property
    @pulumi.getter
    def ipmi(self) -> Mapping[str, str]:
        """
        - Host IPMI info.
        """
        return pulumi.get(self, "ipmi")

    @property
    @pulumi.getter(name="memoryCapacityMib")
    def memory_capacity_mib(self) -> int:
        """
        - Host memory capacity in MiB.
        """
        return pulumi.get(self, "memory_capacity_mib")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="monitoringState")
    def monitoring_state(self) -> str:
        """
        - Host monitoring status.
        """
        return pulumi.get(self, "monitoring_state")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numCpuCores")
    def num_cpu_cores(self) -> int:
        """
        - Number of CPU cores on Host.
        """
        return pulumi.get(self, "num_cpu_cores")

    @property
    @pulumi.getter(name="numCpuSockets")
    def num_cpu_sockets(self) -> int:
        """
        - Number of CPU sockets.
        """
        return pulumi.get(self, "num_cpu_sockets")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        """
        - The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Mapping[str, str]:
        """
        - The reference to a project.
        """
        return pulumi.get(self, "project_reference")

    @property
    @pulumi.getter(name="rackableUnitReference")
    def rackable_unit_reference(self) -> Mapping[str, str]:
        """
        - The reference to a rackable_unit.
        """
        return pulumi.get(self, "rackable_unit_reference")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> str:
        """
        - Node serial number.
        """
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> Mapping[str, str]:
        """
        - The name of the node to be renamed to during domain-join. If not given,a new name will be automatically assigned.
        """
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class GetHostsEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name.
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHostsEntityGpuListResult(dict):
    def __init__(__self__, *,
                 assignable: bool,
                 consumer_reference: Mapping[str, str],
                 device_id: int,
                 fraction: int,
                 frame_buffer_size_mib: int,
                 guest_driver_version: str,
                 index: int,
                 license_lists: Sequence[str],
                 max_resolution: str,
                 mode: str,
                 name: str,
                 num_vgpus_allocated: int,
                 num_virtual_display_heads: int,
                 numa_node: int,
                 pci_address: str,
                 status: str,
                 uuid: str,
                 vendor: str):
        """
        :param str name: - the name.
        :param str uuid: - the uuid.
        """
        pulumi.set(__self__, "assignable", assignable)
        pulumi.set(__self__, "consumer_reference", consumer_reference)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "fraction", fraction)
        pulumi.set(__self__, "frame_buffer_size_mib", frame_buffer_size_mib)
        pulumi.set(__self__, "guest_driver_version", guest_driver_version)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "license_lists", license_lists)
        pulumi.set(__self__, "max_resolution", max_resolution)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "num_vgpus_allocated", num_vgpus_allocated)
        pulumi.set(__self__, "num_virtual_display_heads", num_virtual_display_heads)
        pulumi.set(__self__, "numa_node", numa_node)
        pulumi.set(__self__, "pci_address", pci_address)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter
    def assignable(self) -> bool:
        return pulumi.get(self, "assignable")

    @property
    @pulumi.getter(name="consumerReference")
    def consumer_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "consumer_reference")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> int:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter
    def fraction(self) -> int:
        return pulumi.get(self, "fraction")

    @property
    @pulumi.getter(name="frameBufferSizeMib")
    def frame_buffer_size_mib(self) -> int:
        return pulumi.get(self, "frame_buffer_size_mib")

    @property
    @pulumi.getter(name="guestDriverVersion")
    def guest_driver_version(self) -> str:
        return pulumi.get(self, "guest_driver_version")

    @property
    @pulumi.getter
    def index(self) -> int:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="licenseLists")
    def license_lists(self) -> Sequence[str]:
        return pulumi.get(self, "license_lists")

    @property
    @pulumi.getter(name="maxResolution")
    def max_resolution(self) -> str:
        return pulumi.get(self, "max_resolution")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numVgpusAllocated")
    def num_vgpus_allocated(self) -> int:
        return pulumi.get(self, "num_vgpus_allocated")

    @property
    @pulumi.getter(name="numVirtualDisplayHeads")
    def num_virtual_display_heads(self) -> int:
        return pulumi.get(self, "num_virtual_display_heads")

    @property
    @pulumi.getter(name="numaNode")
    def numa_node(self) -> int:
        return pulumi.get(self, "numa_node")

    @property
    @pulumi.getter(name="pciAddress")
    def pci_address(self) -> str:
        return pulumi.get(self, "pci_address")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the uuid.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vendor(self) -> str:
        return pulumi.get(self, "vendor")


@pulumi.output_type
class GetHostsEntityHostDisksReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the uuid.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the uuid.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetImageCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetImageClusterReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetImageCurrentClusterReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetKarbonClusterEtcdNodePoolResult(dict):
    def __init__(__self__, *,
                 ahv_configs: Sequence['outputs.GetKarbonClusterEtcdNodePoolAhvConfigResult'],
                 name: str,
                 node_os_version: str,
                 nodes: Sequence['outputs.GetKarbonClusterEtcdNodePoolNodeResult'],
                 num_instances: int):
        """
        :param Sequence['GetKarbonClusterEtcdNodePoolAhvConfigArgs'] ahv_configs: - VM configuration in AHV.
        :param str name: - Unique name of the node pool.
        :param str node_os_version: - The version of the node OS image.
        :param Sequence['GetKarbonClusterEtcdNodePoolNodeArgs'] nodes: - List of the deployed nodes in the node pool.
        :param int num_instances: - Number of nodes in the node pool.
        """
        pulumi.set(__self__, "ahv_configs", ahv_configs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "num_instances", num_instances)

    @property
    @pulumi.getter(name="ahvConfigs")
    def ahv_configs(self) -> Sequence['outputs.GetKarbonClusterEtcdNodePoolAhvConfigResult']:
        """
        - VM configuration in AHV.
        """
        return pulumi.get(self, "ahv_configs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - Unique name of the node pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> str:
        """
        - The version of the node OS image.
        """
        return pulumi.get(self, "node_os_version")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetKarbonClusterEtcdNodePoolNodeResult']:
        """
        - List of the deployed nodes in the node pool.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> int:
        """
        - Number of nodes in the node pool.
        """
        return pulumi.get(self, "num_instances")


@pulumi.output_type
class GetKarbonClusterEtcdNodePoolAhvConfigResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 disk_mib: int,
                 memory_mib: int,
                 network_uuid: str,
                 prism_element_cluster_uuid: str):
        """
        :param int cpu: - The number of VCPUs allocated for each VM on the PE cluster.
        :param int disk_mib: - Size of local storage for each VM on the PE cluster in MiB.
        :param int memory_mib: - Memory allocated for each VM on the PE cluster in MiB.
        :param str network_uuid: - The UUID of the network for the VMs deployed with this resource configuration.
        :param str prism_element_cluster_uuid: - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "disk_mib", disk_mib)
        pulumi.set(__self__, "memory_mib", memory_mib)
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        - The number of VCPUs allocated for each VM on the PE cluster.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> int:
        """
        - Size of local storage for each VM on the PE cluster in MiB.
        """
        return pulumi.get(self, "disk_mib")

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> int:
        """
        - Memory allocated for each VM on the PE cluster in MiB.
        """
        return pulumi.get(self, "memory_mib")

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> str:
        """
        - The UUID of the network for the VMs deployed with this resource configuration.
        """
        return pulumi.get(self, "network_uuid")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> str:
        """
        - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "prism_element_cluster_uuid")


@pulumi.output_type
class GetKarbonClusterEtcdNodePoolNodeResult(dict):
    def __init__(__self__, *,
                 hostname: str,
                 ipv4_address: str):
        """
        :param str hostname: - Hostname of the deployed node.
        :param str ipv4_address: - IP of the deployed node.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        - Hostname of the deployed node.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> str:
        """
        - IP of the deployed node.
        """
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class GetKarbonClusterMasterNodePoolResult(dict):
    def __init__(__self__, *,
                 ahv_configs: Sequence['outputs.GetKarbonClusterMasterNodePoolAhvConfigResult'],
                 name: str,
                 node_os_version: str,
                 nodes: Sequence['outputs.GetKarbonClusterMasterNodePoolNodeResult'],
                 num_instances: int):
        """
        :param Sequence['GetKarbonClusterMasterNodePoolAhvConfigArgs'] ahv_configs: - VM configuration in AHV.
        :param str name: - Unique name of the node pool.
        :param str node_os_version: - The version of the node OS image.
        :param Sequence['GetKarbonClusterMasterNodePoolNodeArgs'] nodes: - List of the deployed nodes in the node pool.
        :param int num_instances: - Number of nodes in the node pool.
        """
        pulumi.set(__self__, "ahv_configs", ahv_configs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "num_instances", num_instances)

    @property
    @pulumi.getter(name="ahvConfigs")
    def ahv_configs(self) -> Sequence['outputs.GetKarbonClusterMasterNodePoolAhvConfigResult']:
        """
        - VM configuration in AHV.
        """
        return pulumi.get(self, "ahv_configs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - Unique name of the node pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> str:
        """
        - The version of the node OS image.
        """
        return pulumi.get(self, "node_os_version")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetKarbonClusterMasterNodePoolNodeResult']:
        """
        - List of the deployed nodes in the node pool.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> int:
        """
        - Number of nodes in the node pool.
        """
        return pulumi.get(self, "num_instances")


@pulumi.output_type
class GetKarbonClusterMasterNodePoolAhvConfigResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 disk_mib: int,
                 memory_mib: int,
                 network_uuid: str,
                 prism_element_cluster_uuid: str):
        """
        :param int cpu: - The number of VCPUs allocated for each VM on the PE cluster.
        :param int disk_mib: - Size of local storage for each VM on the PE cluster in MiB.
        :param int memory_mib: - Memory allocated for each VM on the PE cluster in MiB.
        :param str network_uuid: - The UUID of the network for the VMs deployed with this resource configuration.
        :param str prism_element_cluster_uuid: - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "disk_mib", disk_mib)
        pulumi.set(__self__, "memory_mib", memory_mib)
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        - The number of VCPUs allocated for each VM on the PE cluster.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> int:
        """
        - Size of local storage for each VM on the PE cluster in MiB.
        """
        return pulumi.get(self, "disk_mib")

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> int:
        """
        - Memory allocated for each VM on the PE cluster in MiB.
        """
        return pulumi.get(self, "memory_mib")

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> str:
        """
        - The UUID of the network for the VMs deployed with this resource configuration.
        """
        return pulumi.get(self, "network_uuid")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> str:
        """
        - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "prism_element_cluster_uuid")


@pulumi.output_type
class GetKarbonClusterMasterNodePoolNodeResult(dict):
    def __init__(__self__, *,
                 hostname: str,
                 ipv4_address: str):
        """
        :param str hostname: - Hostname of the deployed node.
        :param str ipv4_address: - IP of the deployed node.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        - Hostname of the deployed node.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> str:
        """
        - IP of the deployed node.
        """
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class GetKarbonClusterWorkerNodePoolResult(dict):
    def __init__(__self__, *,
                 ahv_configs: Sequence['outputs.GetKarbonClusterWorkerNodePoolAhvConfigResult'],
                 name: str,
                 node_os_version: str,
                 nodes: Sequence['outputs.GetKarbonClusterWorkerNodePoolNodeResult'],
                 num_instances: int):
        """
        :param Sequence['GetKarbonClusterWorkerNodePoolAhvConfigArgs'] ahv_configs: - VM configuration in AHV.
        :param str name: - Unique name of the node pool.
        :param str node_os_version: - The version of the node OS image.
        :param Sequence['GetKarbonClusterWorkerNodePoolNodeArgs'] nodes: - List of the deployed nodes in the node pool.
        :param int num_instances: - Number of nodes in the node pool.
        """
        pulumi.set(__self__, "ahv_configs", ahv_configs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "num_instances", num_instances)

    @property
    @pulumi.getter(name="ahvConfigs")
    def ahv_configs(self) -> Sequence['outputs.GetKarbonClusterWorkerNodePoolAhvConfigResult']:
        """
        - VM configuration in AHV.
        """
        return pulumi.get(self, "ahv_configs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - Unique name of the node pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> str:
        """
        - The version of the node OS image.
        """
        return pulumi.get(self, "node_os_version")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetKarbonClusterWorkerNodePoolNodeResult']:
        """
        - List of the deployed nodes in the node pool.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> int:
        """
        - Number of nodes in the node pool.
        """
        return pulumi.get(self, "num_instances")


@pulumi.output_type
class GetKarbonClusterWorkerNodePoolAhvConfigResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 disk_mib: int,
                 memory_mib: int,
                 network_uuid: str,
                 prism_element_cluster_uuid: str):
        """
        :param int cpu: - The number of VCPUs allocated for each VM on the PE cluster.
        :param int disk_mib: - Size of local storage for each VM on the PE cluster in MiB.
        :param int memory_mib: - Memory allocated for each VM on the PE cluster in MiB.
        :param str network_uuid: - The UUID of the network for the VMs deployed with this resource configuration.
        :param str prism_element_cluster_uuid: - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "disk_mib", disk_mib)
        pulumi.set(__self__, "memory_mib", memory_mib)
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        - The number of VCPUs allocated for each VM on the PE cluster.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> int:
        """
        - Size of local storage for each VM on the PE cluster in MiB.
        """
        return pulumi.get(self, "disk_mib")

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> int:
        """
        - Memory allocated for each VM on the PE cluster in MiB.
        """
        return pulumi.get(self, "memory_mib")

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> str:
        """
        - The UUID of the network for the VMs deployed with this resource configuration.
        """
        return pulumi.get(self, "network_uuid")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> str:
        """
        - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "prism_element_cluster_uuid")


@pulumi.output_type
class GetKarbonClusterWorkerNodePoolNodeResult(dict):
    def __init__(__self__, *,
                 hostname: str,
                 ipv4_address: str):
        """
        :param str hostname: - Hostname of the deployed node.
        :param str ipv4_address: - IP of the deployed node.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        - Hostname of the deployed node.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> str:
        """
        - IP of the deployed node.
        """
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class GetKarbonClustersClusterResult(dict):
    def __init__(__self__, *,
                 deployment_type: str,
                 etcd_node_pools: Sequence['outputs.GetKarbonClustersClusterEtcdNodePoolResult'],
                 kubeapi_server_ipv4_address: str,
                 master_node_pools: Sequence['outputs.GetKarbonClustersClusterMasterNodePoolResult'],
                 name: str,
                 status: str,
                 uuid: str,
                 version: str,
                 worker_node_pools: Sequence['outputs.GetKarbonClustersClusterWorkerNodePoolResult']):
        """
        :param Sequence['GetKarbonClustersClusterEtcdNodePoolArgs'] etcd_node_pools: - Configuration of the node pools that the nodes in the etcd cluster belong to. The etcd nodes require a minimum of 8,192 MiB memory and 409,60 MiB disk space.
        :param Sequence['GetKarbonClustersClusterMasterNodePoolArgs'] master_node_pools: - .
        :param str name: - Unique name of the node pool.
        :param str version: - K8s version of the cluster.
        """
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "etcd_node_pools", etcd_node_pools)
        pulumi.set(__self__, "kubeapi_server_ipv4_address", kubeapi_server_ipv4_address)
        pulumi.set(__self__, "master_node_pools", master_node_pools)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "worker_node_pools", worker_node_pools)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="etcdNodePools")
    def etcd_node_pools(self) -> Sequence['outputs.GetKarbonClustersClusterEtcdNodePoolResult']:
        """
        - Configuration of the node pools that the nodes in the etcd cluster belong to. The etcd nodes require a minimum of 8,192 MiB memory and 409,60 MiB disk space.
        """
        return pulumi.get(self, "etcd_node_pools")

    @property
    @pulumi.getter(name="kubeapiServerIpv4Address")
    def kubeapi_server_ipv4_address(self) -> str:
        return pulumi.get(self, "kubeapi_server_ipv4_address")

    @property
    @pulumi.getter(name="masterNodePools")
    def master_node_pools(self) -> Sequence['outputs.GetKarbonClustersClusterMasterNodePoolResult']:
        """
        - .
        """
        return pulumi.get(self, "master_node_pools")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - Unique name of the node pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        - K8s version of the cluster.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="workerNodePools")
    def worker_node_pools(self) -> Sequence['outputs.GetKarbonClustersClusterWorkerNodePoolResult']:
        return pulumi.get(self, "worker_node_pools")


@pulumi.output_type
class GetKarbonClustersClusterEtcdNodePoolResult(dict):
    def __init__(__self__, *,
                 ahv_configs: Sequence['outputs.GetKarbonClustersClusterEtcdNodePoolAhvConfigResult'],
                 name: str,
                 node_os_version: str,
                 nodes: Sequence['outputs.GetKarbonClustersClusterEtcdNodePoolNodeResult'],
                 num_instances: int):
        """
        :param Sequence['GetKarbonClustersClusterEtcdNodePoolAhvConfigArgs'] ahv_configs: - .
        :param str name: - Unique name of the node pool.
        :param str node_os_version: - The version of the node OS image.
        :param int num_instances: - Number of nodes in the node pool.
        """
        pulumi.set(__self__, "ahv_configs", ahv_configs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "num_instances", num_instances)

    @property
    @pulumi.getter(name="ahvConfigs")
    def ahv_configs(self) -> Sequence['outputs.GetKarbonClustersClusterEtcdNodePoolAhvConfigResult']:
        """
        - .
        """
        return pulumi.get(self, "ahv_configs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - Unique name of the node pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> str:
        """
        - The version of the node OS image.
        """
        return pulumi.get(self, "node_os_version")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetKarbonClustersClusterEtcdNodePoolNodeResult']:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> int:
        """
        - Number of nodes in the node pool.
        """
        return pulumi.get(self, "num_instances")


@pulumi.output_type
class GetKarbonClustersClusterEtcdNodePoolAhvConfigResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 disk_mib: int,
                 memory_mib: int,
                 network_uuid: str,
                 prism_element_cluster_uuid: str):
        """
        :param int cpu: - The number of VCPUs allocated for each VM on the PE cluster.
        :param int disk_mib: - Size of local storage for each VM on the PE cluster in MiB.
        :param int memory_mib: - Memory allocated for each VM on the PE cluster in MiB.
        :param str network_uuid: - The UUID of the network for the VMs deployed with this resource configuration.
        :param str prism_element_cluster_uuid: - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "disk_mib", disk_mib)
        pulumi.set(__self__, "memory_mib", memory_mib)
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        - The number of VCPUs allocated for each VM on the PE cluster.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> int:
        """
        - Size of local storage for each VM on the PE cluster in MiB.
        """
        return pulumi.get(self, "disk_mib")

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> int:
        """
        - Memory allocated for each VM on the PE cluster in MiB.
        """
        return pulumi.get(self, "memory_mib")

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> str:
        """
        - The UUID of the network for the VMs deployed with this resource configuration.
        """
        return pulumi.get(self, "network_uuid")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> str:
        """
        - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "prism_element_cluster_uuid")


@pulumi.output_type
class GetKarbonClustersClusterEtcdNodePoolNodeResult(dict):
    def __init__(__self__, *,
                 hostname: str,
                 ipv4_address: str):
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> str:
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class GetKarbonClustersClusterMasterNodePoolResult(dict):
    def __init__(__self__, *,
                 ahv_configs: Sequence['outputs.GetKarbonClustersClusterMasterNodePoolAhvConfigResult'],
                 name: str,
                 node_os_version: str,
                 nodes: Sequence['outputs.GetKarbonClustersClusterMasterNodePoolNodeResult'],
                 num_instances: int):
        """
        :param Sequence['GetKarbonClustersClusterMasterNodePoolAhvConfigArgs'] ahv_configs: - .
        :param str name: - Unique name of the node pool.
        :param str node_os_version: - The version of the node OS image.
        :param int num_instances: - Number of nodes in the node pool.
        """
        pulumi.set(__self__, "ahv_configs", ahv_configs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "num_instances", num_instances)

    @property
    @pulumi.getter(name="ahvConfigs")
    def ahv_configs(self) -> Sequence['outputs.GetKarbonClustersClusterMasterNodePoolAhvConfigResult']:
        """
        - .
        """
        return pulumi.get(self, "ahv_configs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - Unique name of the node pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> str:
        """
        - The version of the node OS image.
        """
        return pulumi.get(self, "node_os_version")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetKarbonClustersClusterMasterNodePoolNodeResult']:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> int:
        """
        - Number of nodes in the node pool.
        """
        return pulumi.get(self, "num_instances")


@pulumi.output_type
class GetKarbonClustersClusterMasterNodePoolAhvConfigResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 disk_mib: int,
                 memory_mib: int,
                 network_uuid: str,
                 prism_element_cluster_uuid: str):
        """
        :param int cpu: - The number of VCPUs allocated for each VM on the PE cluster.
        :param int disk_mib: - Size of local storage for each VM on the PE cluster in MiB.
        :param int memory_mib: - Memory allocated for each VM on the PE cluster in MiB.
        :param str network_uuid: - The UUID of the network for the VMs deployed with this resource configuration.
        :param str prism_element_cluster_uuid: - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "disk_mib", disk_mib)
        pulumi.set(__self__, "memory_mib", memory_mib)
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        - The number of VCPUs allocated for each VM on the PE cluster.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> int:
        """
        - Size of local storage for each VM on the PE cluster in MiB.
        """
        return pulumi.get(self, "disk_mib")

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> int:
        """
        - Memory allocated for each VM on the PE cluster in MiB.
        """
        return pulumi.get(self, "memory_mib")

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> str:
        """
        - The UUID of the network for the VMs deployed with this resource configuration.
        """
        return pulumi.get(self, "network_uuid")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> str:
        """
        - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "prism_element_cluster_uuid")


@pulumi.output_type
class GetKarbonClustersClusterMasterNodePoolNodeResult(dict):
    def __init__(__self__, *,
                 hostname: str,
                 ipv4_address: str):
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> str:
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class GetKarbonClustersClusterWorkerNodePoolResult(dict):
    def __init__(__self__, *,
                 ahv_configs: Sequence['outputs.GetKarbonClustersClusterWorkerNodePoolAhvConfigResult'],
                 name: str,
                 node_os_version: str,
                 nodes: Sequence['outputs.GetKarbonClustersClusterWorkerNodePoolNodeResult'],
                 num_instances: int):
        """
        :param Sequence['GetKarbonClustersClusterWorkerNodePoolAhvConfigArgs'] ahv_configs: - .
        :param str name: - Unique name of the node pool.
        :param str node_os_version: - The version of the node OS image.
        :param int num_instances: - Number of nodes in the node pool.
        """
        pulumi.set(__self__, "ahv_configs", ahv_configs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "num_instances", num_instances)

    @property
    @pulumi.getter(name="ahvConfigs")
    def ahv_configs(self) -> Sequence['outputs.GetKarbonClustersClusterWorkerNodePoolAhvConfigResult']:
        """
        - .
        """
        return pulumi.get(self, "ahv_configs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - Unique name of the node pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> str:
        """
        - The version of the node OS image.
        """
        return pulumi.get(self, "node_os_version")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetKarbonClustersClusterWorkerNodePoolNodeResult']:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> int:
        """
        - Number of nodes in the node pool.
        """
        return pulumi.get(self, "num_instances")


@pulumi.output_type
class GetKarbonClustersClusterWorkerNodePoolAhvConfigResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 disk_mib: int,
                 memory_mib: int,
                 network_uuid: str,
                 prism_element_cluster_uuid: str):
        """
        :param int cpu: - The number of VCPUs allocated for each VM on the PE cluster.
        :param int disk_mib: - Size of local storage for each VM on the PE cluster in MiB.
        :param int memory_mib: - Memory allocated for each VM on the PE cluster in MiB.
        :param str network_uuid: - The UUID of the network for the VMs deployed with this resource configuration.
        :param str prism_element_cluster_uuid: - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "disk_mib", disk_mib)
        pulumi.set(__self__, "memory_mib", memory_mib)
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        - The number of VCPUs allocated for each VM on the PE cluster.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> int:
        """
        - Size of local storage for each VM on the PE cluster in MiB.
        """
        return pulumi.get(self, "disk_mib")

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> int:
        """
        - Memory allocated for each VM on the PE cluster in MiB.
        """
        return pulumi.get(self, "memory_mib")

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> str:
        """
        - The UUID of the network for the VMs deployed with this resource configuration.
        """
        return pulumi.get(self, "network_uuid")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> str:
        """
        - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "prism_element_cluster_uuid")


@pulumi.output_type
class GetKarbonClustersClusterWorkerNodePoolNodeResult(dict):
    def __init__(__self__, *,
                 hostname: str,
                 ipv4_address: str):
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> str:
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class GetKarbonPrivateRegistriesPrivateRegistryResult(dict):
    def __init__(__self__, *,
                 endpoint: str,
                 name: str,
                 uuid: str):
        """
        :param str endpoint: - Endpoint of the private in format `url:port`.
        :param str name: - Name of the private registry.
        :param str uuid: - UUID of the private registry.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        - Endpoint of the private in format `url:port`.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - Name of the private registry.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - UUID of the private registry.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNdbCloneDatabaseNodeResult(dict):
    def __init__(__self__, *,
                 access_level: Mapping[str, str],
                 database_id: str,
                 database_status: str,
                 date_created: str,
                 date_modified: str,
                 dbserver: Mapping[str, str],
                 dbserver_id: str,
                 description: str,
                 id: str,
                 infos: Sequence['outputs.GetNdbCloneDatabaseNodeInfoResult'],
                 name: str,
                 primary: bool,
                 properties: Sequence['outputs.GetNdbCloneDatabaseNodePropertyResult'],
                 protection_domain_id: str,
                 protection_domains: Sequence['outputs.GetNdbCloneDatabaseNodeProtectionDomainResult'],
                 software_installation_id: str,
                 status: str,
                 tags: Sequence['outputs.GetNdbCloneDatabaseNodeTagResult']):
        """
        :param str database_status: database status
        :param str date_created: date created for clone
        :param str date_modified: last modified date for clone
        :param str description: cloned description
        :param str id: cloned id
        :param Sequence['GetNdbCloneDatabaseNodeInfoArgs'] infos: cloned info
        :param str name: cloned name
        :param Sequence['GetNdbCloneDatabaseNodePropertyArgs'] properties: properties of clone
        :param str status: status of clone
        :param Sequence['GetNdbCloneDatabaseNodeTagArgs'] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        pulumi.set(__self__, "access_level", access_level)
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "database_status", database_status)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "dbserver", dbserver)
        pulumi.set(__self__, "dbserver_id", dbserver_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "protection_domain_id", protection_domain_id)
        pulumi.set(__self__, "protection_domains", protection_domains)
        pulumi.set(__self__, "software_installation_id", software_installation_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Mapping[str, str]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> str:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> str:
        """
        database status
        """
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def dbserver(self) -> Mapping[str, str]:
        return pulumi.get(self, "dbserver")

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> str:
        return pulumi.get(self, "dbserver_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        cloned id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetNdbCloneDatabaseNodeInfoResult']:
        """
        cloned info
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbCloneDatabaseNodePropertyResult']:
        """
        properties of clone
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="protectionDomainId")
    def protection_domain_id(self) -> str:
        return pulumi.get(self, "protection_domain_id")

    @property
    @pulumi.getter(name="protectionDomains")
    def protection_domains(self) -> Sequence['outputs.GetNdbCloneDatabaseNodeProtectionDomainResult']:
        return pulumi.get(self, "protection_domains")

    @property
    @pulumi.getter(name="softwareInstallationId")
    def software_installation_id(self) -> str:
        return pulumi.get(self, "software_installation_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of clone
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNdbCloneDatabaseNodeTagResult']:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetNdbCloneDatabaseNodeInfoResult(dict):
    def __init__(__self__, *,
                 info: Mapping[str, str],
                 secure_info: Mapping[str, str]):
        """
        :param Mapping[str, str] info: cloned info
        """
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Mapping[str, str]:
        """
        cloned info
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class GetNdbCloneDatabaseNodePropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        """
        :param str description: cloned description
        :param str name: cloned name
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbCloneDatabaseNodeProtectionDomainResult(dict):
    def __init__(__self__, *,
                 assoc_entities: Sequence[str],
                 cloud_id: str,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 era_created: bool,
                 id: str,
                 name: str,
                 owner_id: str,
                 primary_host: str,
                 properties: Sequence['outputs.GetNdbCloneDatabaseNodeProtectionDomainPropertyResult'],
                 status: str,
                 type: str):
        """
        :param str date_created: date created for clone
        :param str date_modified: last modified date for clone
        :param str description: cloned description
        :param str id: cloned id
        :param str name: cloned name
        :param Sequence['GetNdbCloneDatabaseNodeProtectionDomainPropertyArgs'] properties: properties of clone
        :param str status: status of clone
        :param str type: type
        """
        pulumi.set(__self__, "assoc_entities", assoc_entities)
        pulumi.set(__self__, "cloud_id", cloud_id)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "era_created", era_created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "primary_host", primary_host)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assocEntities")
    def assoc_entities(self) -> Sequence[str]:
        return pulumi.get(self, "assoc_entities")

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> str:
        return pulumi.get(self, "cloud_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eraCreated")
    def era_created(self) -> bool:
        return pulumi.get(self, "era_created")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        cloned id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="primaryHost")
    def primary_host(self) -> str:
        return pulumi.get(self, "primary_host")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbCloneDatabaseNodeProtectionDomainPropertyResult']:
        """
        properties of clone
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of clone
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNdbCloneDatabaseNodeProtectionDomainPropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        """
        :param str description: cloned description
        :param str name: cloned name
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbCloneDatabaseNodeTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbCloneFilterResult(dict):
    def __init__(__self__, *,
                 any_status: Optional[str] = None,
                 detailed: Optional[str] = None,
                 load_dbserver_cluster: Optional[str] = None,
                 timezone: Optional[str] = None):
        """
        :param str any_status: Get entity(s) if it satisfies query criteria irrespective of status (retrieve even deleted). Default is false
        :param str detailed: Load entities with complete details. Default is false
        :param str load_dbserver_cluster: Load cluster info. Default is false
        :param str timezone: Default is UTC
        """
        if any_status is not None:
            pulumi.set(__self__, "any_status", any_status)
        if detailed is not None:
            pulumi.set(__self__, "detailed", detailed)
        if load_dbserver_cluster is not None:
            pulumi.set(__self__, "load_dbserver_cluster", load_dbserver_cluster)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="anyStatus")
    def any_status(self) -> Optional[str]:
        """
        Get entity(s) if it satisfies query criteria irrespective of status (retrieve even deleted). Default is false
        """
        return pulumi.get(self, "any_status")

    @property
    @pulumi.getter
    def detailed(self) -> Optional[str]:
        """
        Load entities with complete details. Default is false
        """
        return pulumi.get(self, "detailed")

    @property
    @pulumi.getter(name="loadDbserverCluster")
    def load_dbserver_cluster(self) -> Optional[str]:
        """
        Load cluster info. Default is false
        """
        return pulumi.get(self, "load_dbserver_cluster")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        Default is UTC
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class GetNdbCloneInfoResult(dict):
    def __init__(__self__, *,
                 bpg_configs: Sequence['outputs.GetNdbCloneInfoBpgConfigResult'],
                 secure_info: Mapping[str, str]):
        pulumi.set(__self__, "bpg_configs", bpg_configs)
        pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="bpgConfigs")
    def bpg_configs(self) -> Sequence['outputs.GetNdbCloneInfoBpgConfigResult']:
        return pulumi.get(self, "bpg_configs")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class GetNdbCloneInfoBpgConfigResult(dict):
    def __init__(__self__, *,
                 bpg_db_params: Sequence['outputs.GetNdbCloneInfoBpgConfigBpgDbParamResult'],
                 storages: Sequence['outputs.GetNdbCloneInfoBpgConfigStorageResult'],
                 vm_properties: Sequence['outputs.GetNdbCloneInfoBpgConfigVmPropertyResult']):
        pulumi.set(__self__, "bpg_db_params", bpg_db_params)
        pulumi.set(__self__, "storages", storages)
        pulumi.set(__self__, "vm_properties", vm_properties)

    @property
    @pulumi.getter(name="bpgDbParams")
    def bpg_db_params(self) -> Sequence['outputs.GetNdbCloneInfoBpgConfigBpgDbParamResult']:
        return pulumi.get(self, "bpg_db_params")

    @property
    @pulumi.getter
    def storages(self) -> Sequence['outputs.GetNdbCloneInfoBpgConfigStorageResult']:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="vmProperties")
    def vm_properties(self) -> Sequence['outputs.GetNdbCloneInfoBpgConfigVmPropertyResult']:
        return pulumi.get(self, "vm_properties")


@pulumi.output_type
class GetNdbCloneInfoBpgConfigBpgDbParamResult(dict):
    def __init__(__self__, *,
                 effective_cache_size: str,
                 maintenance_work_mem: str,
                 max_parallel_workers_per_gather: str,
                 max_worker_processes: str,
                 shared_buffers: str,
                 work_mem: str):
        pulumi.set(__self__, "effective_cache_size", effective_cache_size)
        pulumi.set(__self__, "maintenance_work_mem", maintenance_work_mem)
        pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        pulumi.set(__self__, "shared_buffers", shared_buffers)
        pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="effectiveCacheSize")
    def effective_cache_size(self) -> str:
        return pulumi.get(self, "effective_cache_size")

    @property
    @pulumi.getter(name="maintenanceWorkMem")
    def maintenance_work_mem(self) -> str:
        return pulumi.get(self, "maintenance_work_mem")

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> str:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> str:
        return pulumi.get(self, "max_worker_processes")

    @property
    @pulumi.getter(name="sharedBuffers")
    def shared_buffers(self) -> str:
        return pulumi.get(self, "shared_buffers")

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> str:
        return pulumi.get(self, "work_mem")


@pulumi.output_type
class GetNdbCloneInfoBpgConfigStorageResult(dict):
    def __init__(__self__, *,
                 archive_storages: Sequence['outputs.GetNdbCloneInfoBpgConfigStorageArchiveStorageResult'],
                 data_disks: Sequence['outputs.GetNdbCloneInfoBpgConfigStorageDataDiskResult'],
                 log_disks: Sequence['outputs.GetNdbCloneInfoBpgConfigStorageLogDiskResult']):
        pulumi.set(__self__, "archive_storages", archive_storages)
        pulumi.set(__self__, "data_disks", data_disks)
        pulumi.set(__self__, "log_disks", log_disks)

    @property
    @pulumi.getter(name="archiveStorages")
    def archive_storages(self) -> Sequence['outputs.GetNdbCloneInfoBpgConfigStorageArchiveStorageResult']:
        return pulumi.get(self, "archive_storages")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Sequence['outputs.GetNdbCloneInfoBpgConfigStorageDataDiskResult']:
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="logDisks")
    def log_disks(self) -> Sequence['outputs.GetNdbCloneInfoBpgConfigStorageLogDiskResult']:
        return pulumi.get(self, "log_disks")


@pulumi.output_type
class GetNdbCloneInfoBpgConfigStorageArchiveStorageResult(dict):
    def __init__(__self__, *,
                 size: float):
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> float:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetNdbCloneInfoBpgConfigStorageDataDiskResult(dict):
    def __init__(__self__, *,
                 count: float):
        pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> float:
        return pulumi.get(self, "count")


@pulumi.output_type
class GetNdbCloneInfoBpgConfigStorageLogDiskResult(dict):
    def __init__(__self__, *,
                 count: float,
                 size: float):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> float:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def size(self) -> float:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetNdbCloneInfoBpgConfigVmPropertyResult(dict):
    def __init__(__self__, *,
                 dirty_background_ratio: float,
                 dirty_expire_centisecs: float,
                 dirty_ratio: float,
                 dirty_writeback_centisecs: float,
                 nr_hugepages: float,
                 overcommit_memory: float,
                 swappiness: float):
        pulumi.set(__self__, "dirty_background_ratio", dirty_background_ratio)
        pulumi.set(__self__, "dirty_expire_centisecs", dirty_expire_centisecs)
        pulumi.set(__self__, "dirty_ratio", dirty_ratio)
        pulumi.set(__self__, "dirty_writeback_centisecs", dirty_writeback_centisecs)
        pulumi.set(__self__, "nr_hugepages", nr_hugepages)
        pulumi.set(__self__, "overcommit_memory", overcommit_memory)
        pulumi.set(__self__, "swappiness", swappiness)

    @property
    @pulumi.getter(name="dirtyBackgroundRatio")
    def dirty_background_ratio(self) -> float:
        return pulumi.get(self, "dirty_background_ratio")

    @property
    @pulumi.getter(name="dirtyExpireCentisecs")
    def dirty_expire_centisecs(self) -> float:
        return pulumi.get(self, "dirty_expire_centisecs")

    @property
    @pulumi.getter(name="dirtyRatio")
    def dirty_ratio(self) -> float:
        return pulumi.get(self, "dirty_ratio")

    @property
    @pulumi.getter(name="dirtyWritebackCentisecs")
    def dirty_writeback_centisecs(self) -> float:
        return pulumi.get(self, "dirty_writeback_centisecs")

    @property
    @pulumi.getter(name="nrHugepages")
    def nr_hugepages(self) -> float:
        return pulumi.get(self, "nr_hugepages")

    @property
    @pulumi.getter(name="overcommitMemory")
    def overcommit_memory(self) -> float:
        return pulumi.get(self, "overcommit_memory")

    @property
    @pulumi.getter
    def swappiness(self) -> float:
        return pulumi.get(self, "swappiness")


@pulumi.output_type
class GetNdbCloneLcmConfigResult(dict):
    def __init__(__self__, *,
                 expiry_details: Sequence['outputs.GetNdbCloneLcmConfigExpiryDetailResult'],
                 post_delete_commands: Sequence['outputs.GetNdbCloneLcmConfigPostDeleteCommandResult'],
                 pre_delete_commands: Sequence['outputs.GetNdbCloneLcmConfigPreDeleteCommandResult'],
                 refresh_details: Sequence['outputs.GetNdbCloneLcmConfigRefreshDetailResult']):
        pulumi.set(__self__, "expiry_details", expiry_details)
        pulumi.set(__self__, "post_delete_commands", post_delete_commands)
        pulumi.set(__self__, "pre_delete_commands", pre_delete_commands)
        pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Sequence['outputs.GetNdbCloneLcmConfigExpiryDetailResult']:
        return pulumi.get(self, "expiry_details")

    @property
    @pulumi.getter(name="postDeleteCommands")
    def post_delete_commands(self) -> Sequence['outputs.GetNdbCloneLcmConfigPostDeleteCommandResult']:
        return pulumi.get(self, "post_delete_commands")

    @property
    @pulumi.getter(name="preDeleteCommands")
    def pre_delete_commands(self) -> Sequence['outputs.GetNdbCloneLcmConfigPreDeleteCommandResult']:
        return pulumi.get(self, "pre_delete_commands")

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Sequence['outputs.GetNdbCloneLcmConfigRefreshDetailResult']:
        return pulumi.get(self, "refresh_details")


@pulumi.output_type
class GetNdbCloneLcmConfigExpiryDetailResult(dict):
    def __init__(__self__, *,
                 delete_database: bool,
                 delete_time_machine: bool,
                 delete_vm: bool,
                 effective_timestamp: str,
                 expire_in_days: int,
                 expiry_date_timezone: str,
                 expiry_timestamp: str,
                 remind_before_in_days: int,
                 user_created: bool):
        pulumi.set(__self__, "delete_database", delete_database)
        pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        pulumi.set(__self__, "delete_vm", delete_vm)
        pulumi.set(__self__, "effective_timestamp", effective_timestamp)
        pulumi.set(__self__, "expire_in_days", expire_in_days)
        pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        pulumi.set(__self__, "expiry_timestamp", expiry_timestamp)
        pulumi.set(__self__, "remind_before_in_days", remind_before_in_days)
        pulumi.set(__self__, "user_created", user_created)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> bool:
        return pulumi.get(self, "delete_database")

    @property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> bool:
        return pulumi.get(self, "delete_time_machine")

    @property
    @pulumi.getter(name="deleteVm")
    def delete_vm(self) -> bool:
        return pulumi.get(self, "delete_vm")

    @property
    @pulumi.getter(name="effectiveTimestamp")
    def effective_timestamp(self) -> str:
        return pulumi.get(self, "effective_timestamp")

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> int:
        return pulumi.get(self, "expire_in_days")

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> str:
        return pulumi.get(self, "expiry_date_timezone")

    @property
    @pulumi.getter(name="expiryTimestamp")
    def expiry_timestamp(self) -> str:
        return pulumi.get(self, "expiry_timestamp")

    @property
    @pulumi.getter(name="remindBeforeInDays")
    def remind_before_in_days(self) -> int:
        return pulumi.get(self, "remind_before_in_days")

    @property
    @pulumi.getter(name="userCreated")
    def user_created(self) -> bool:
        return pulumi.get(self, "user_created")


@pulumi.output_type
class GetNdbCloneLcmConfigPostDeleteCommandResult(dict):
    def __init__(__self__, *,
                 command: str):
        pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> str:
        return pulumi.get(self, "command")


@pulumi.output_type
class GetNdbCloneLcmConfigPreDeleteCommandResult(dict):
    def __init__(__self__, *,
                 command: str):
        pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> str:
        return pulumi.get(self, "command")


@pulumi.output_type
class GetNdbCloneLcmConfigRefreshDetailResult(dict):
    def __init__(__self__, *,
                 last_refresh_date: str,
                 next_refresh_date: str,
                 refresh_date_timezone: str,
                 refresh_in_days: int,
                 refresh_in_hours: int,
                 refresh_in_months: int,
                 refresh_time: str):
        pulumi.set(__self__, "last_refresh_date", last_refresh_date)
        pulumi.set(__self__, "next_refresh_date", next_refresh_date)
        pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        pulumi.set(__self__, "refresh_in_hours", refresh_in_hours)
        pulumi.set(__self__, "refresh_in_months", refresh_in_months)
        pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="lastRefreshDate")
    def last_refresh_date(self) -> str:
        return pulumi.get(self, "last_refresh_date")

    @property
    @pulumi.getter(name="nextRefreshDate")
    def next_refresh_date(self) -> str:
        return pulumi.get(self, "next_refresh_date")

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> str:
        return pulumi.get(self, "refresh_date_timezone")

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> int:
        return pulumi.get(self, "refresh_in_days")

    @property
    @pulumi.getter(name="refreshInHours")
    def refresh_in_hours(self) -> int:
        return pulumi.get(self, "refresh_in_hours")

    @property
    @pulumi.getter(name="refreshInMonths")
    def refresh_in_months(self) -> int:
        return pulumi.get(self, "refresh_in_months")

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> str:
        return pulumi.get(self, "refresh_time")


@pulumi.output_type
class GetNdbCloneLinkedDatabaseResult(dict):
    def __init__(__self__, *,
                 database_name: str,
                 database_status: str,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 id: str,
                 infos: Sequence['outputs.GetNdbCloneLinkedDatabaseInfoResult'],
                 metric: Mapping[str, str],
                 name: str,
                 parent_database_id: str,
                 parent_linked_database_id: str,
                 snapshot_id: str,
                 status: str,
                 timezone: str):
        """
        :param str database_name: database name
        :param str database_status: database status
        :param str date_created: date created for clone
        :param str date_modified: last modified date for clone
        :param str description: cloned description
        :param str id: cloned id
        :param Sequence['GetNdbCloneLinkedDatabaseInfoArgs'] infos: cloned info
        :param Mapping[str, str] metric: Metric of clone
        :param str name: cloned name
        :param str parent_database_id: parent database id
        :param str status: status of clone
        :param str timezone: Default is UTC
        """
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "database_status", database_status)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent_database_id", parent_database_id)
        pulumi.set(__self__, "parent_linked_database_id", parent_linked_database_id)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        database name
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> str:
        """
        database status
        """
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        cloned id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetNdbCloneLinkedDatabaseInfoResult']:
        """
        cloned info
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def metric(self) -> Mapping[str, str]:
        """
        Metric of clone
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> str:
        """
        parent database id
        """
        return pulumi.get(self, "parent_database_id")

    @property
    @pulumi.getter(name="parentLinkedDatabaseId")
    def parent_linked_database_id(self) -> str:
        return pulumi.get(self, "parent_linked_database_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of clone
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        """
        Default is UTC
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class GetNdbCloneLinkedDatabaseInfoResult(dict):
    def __init__(__self__, *,
                 info: Mapping[str, str],
                 secure_info: Mapping[str, str]):
        """
        :param Mapping[str, str] info: cloned info
        """
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Mapping[str, str]:
        """
        cloned info
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class GetNdbClonePropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        """
        :param str description: cloned description
        :param str name: cloned name
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbCloneTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbCloneTimeMachineResult(dict):
    def __init__(__self__, *,
                 access_level: str,
                 clone: bool,
                 clones: str,
                 clustered: bool,
                 database: str,
                 database_id: str,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 ea_status: str,
                 id: str,
                 metric: str,
                 name: str,
                 properties: Sequence['outputs.GetNdbCloneTimeMachinePropertyResult'],
                 schedule_id: str,
                 schedules: Sequence['outputs.GetNdbCloneTimeMachineScheduleResult'],
                 scope: str,
                 sla_id: str,
                 sla_update_in_progress: bool,
                 sla_update_metadata: str,
                 slas: Sequence['outputs.GetNdbCloneTimeMachineSlaResult'],
                 source_nx_clusters: Sequence[str],
                 status: str,
                 tags: Sequence['outputs.GetNdbCloneTimeMachineTagResult'],
                 type: str):
        """
        :param bool clone: clone or not
        :param bool clustered: clustered or not
        :param str date_created: date created for clone
        :param str date_modified: last modified date for clone
        :param str description: cloned description
        :param str id: cloned id
        :param str metric: Metric of clone
        :param str name: cloned name
        :param Sequence['GetNdbCloneTimeMachinePropertyArgs'] properties: properties of clone
        :param str status: status of clone
        :param Sequence['GetNdbCloneTimeMachineTagArgs'] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        :param str type: type
        """
        pulumi.set(__self__, "access_level", access_level)
        pulumi.set(__self__, "clone", clone)
        pulumi.set(__self__, "clones", clones)
        pulumi.set(__self__, "clustered", clustered)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "ea_status", ea_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "schedule_id", schedule_id)
        pulumi.set(__self__, "schedules", schedules)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "sla_id", sla_id)
        pulumi.set(__self__, "sla_update_in_progress", sla_update_in_progress)
        pulumi.set(__self__, "sla_update_metadata", sla_update_metadata)
        pulumi.set(__self__, "slas", slas)
        pulumi.set(__self__, "source_nx_clusters", source_nx_clusters)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> str:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter
    def clone(self) -> bool:
        """
        clone or not
        """
        return pulumi.get(self, "clone")

    @property
    @pulumi.getter
    def clones(self) -> str:
        return pulumi.get(self, "clones")

    @property
    @pulumi.getter
    def clustered(self) -> bool:
        """
        clustered or not
        """
        return pulumi.get(self, "clustered")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> str:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eaStatus")
    def ea_status(self) -> str:
        return pulumi.get(self, "ea_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        cloned id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metric(self) -> str:
        """
        Metric of clone
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbCloneTimeMachinePropertyResult']:
        """
        properties of clone
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> str:
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetNdbCloneTimeMachineScheduleResult']:
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter
    def scope(self) -> str:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> str:
        return pulumi.get(self, "sla_id")

    @property
    @pulumi.getter(name="slaUpdateInProgress")
    def sla_update_in_progress(self) -> bool:
        return pulumi.get(self, "sla_update_in_progress")

    @property
    @pulumi.getter(name="slaUpdateMetadata")
    def sla_update_metadata(self) -> str:
        return pulumi.get(self, "sla_update_metadata")

    @property
    @pulumi.getter
    def slas(self) -> Sequence['outputs.GetNdbCloneTimeMachineSlaResult']:
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter(name="sourceNxClusters")
    def source_nx_clusters(self) -> Sequence[str]:
        return pulumi.get(self, "source_nx_clusters")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of clone
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNdbCloneTimeMachineTagResult']:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNdbCloneTimeMachinePropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        """
        :param str description: cloned description
        :param str name: cloned name
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbCloneTimeMachineScheduleResult(dict):
    def __init__(__self__, *,
                 continuous_schedules: Sequence['outputs.GetNdbCloneTimeMachineScheduleContinuousScheduleResult'],
                 daily_schedules: Sequence['outputs.GetNdbCloneTimeMachineScheduleDailyScheduleResult'],
                 date_created: str,
                 date_modified: str,
                 description: str,
                 global_policy: bool,
                 id: str,
                 monthly_schedules: Sequence['outputs.GetNdbCloneTimeMachineScheduleMonthlyScheduleResult'],
                 name: str,
                 owner_id: str,
                 quartely_schedules: Sequence['outputs.GetNdbCloneTimeMachineScheduleQuartelyScheduleResult'],
                 reference_count: int,
                 snapshot_time_of_days: Sequence['outputs.GetNdbCloneTimeMachineScheduleSnapshotTimeOfDayResult'],
                 start_time: str,
                 system_policy: bool,
                 time_zone: str,
                 unique_name: str,
                 weekly_schedules: Sequence['outputs.GetNdbCloneTimeMachineScheduleWeeklyScheduleResult'],
                 yearly_schedules: Sequence['outputs.GetNdbCloneTimeMachineScheduleYearlyScheduleResult']):
        """
        :param str date_created: date created for clone
        :param str date_modified: last modified date for clone
        :param str description: cloned description
        :param str id: cloned id
        :param str name: cloned name
        :param str time_zone: time zone
        """
        pulumi.set(__self__, "continuous_schedules", continuous_schedules)
        pulumi.set(__self__, "daily_schedules", daily_schedules)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "global_policy", global_policy)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly_schedules", monthly_schedules)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "quartely_schedules", quartely_schedules)
        pulumi.set(__self__, "reference_count", reference_count)
        pulumi.set(__self__, "snapshot_time_of_days", snapshot_time_of_days)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "system_policy", system_policy)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "unique_name", unique_name)
        pulumi.set(__self__, "weekly_schedules", weekly_schedules)
        pulumi.set(__self__, "yearly_schedules", yearly_schedules)

    @property
    @pulumi.getter(name="continuousSchedules")
    def continuous_schedules(self) -> Sequence['outputs.GetNdbCloneTimeMachineScheduleContinuousScheduleResult']:
        return pulumi.get(self, "continuous_schedules")

    @property
    @pulumi.getter(name="dailySchedules")
    def daily_schedules(self) -> Sequence['outputs.GetNdbCloneTimeMachineScheduleDailyScheduleResult']:
        return pulumi.get(self, "daily_schedules")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="globalPolicy")
    def global_policy(self) -> bool:
        return pulumi.get(self, "global_policy")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        cloned id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlySchedules")
    def monthly_schedules(self) -> Sequence['outputs.GetNdbCloneTimeMachineScheduleMonthlyScheduleResult']:
        return pulumi.get(self, "monthly_schedules")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="quartelySchedules")
    def quartely_schedules(self) -> Sequence['outputs.GetNdbCloneTimeMachineScheduleQuartelyScheduleResult']:
        return pulumi.get(self, "quartely_schedules")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> int:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="snapshotTimeOfDays")
    def snapshot_time_of_days(self) -> Sequence['outputs.GetNdbCloneTimeMachineScheduleSnapshotTimeOfDayResult']:
        return pulumi.get(self, "snapshot_time_of_days")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="systemPolicy")
    def system_policy(self) -> bool:
        return pulumi.get(self, "system_policy")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        """
        time zone
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> str:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklySchedules")
    def weekly_schedules(self) -> Sequence['outputs.GetNdbCloneTimeMachineScheduleWeeklyScheduleResult']:
        return pulumi.get(self, "weekly_schedules")

    @property
    @pulumi.getter(name="yearlySchedules")
    def yearly_schedules(self) -> Sequence['outputs.GetNdbCloneTimeMachineScheduleYearlyScheduleResult']:
        return pulumi.get(self, "yearly_schedules")


@pulumi.output_type
class GetNdbCloneTimeMachineScheduleContinuousScheduleResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 log_backup_interval: int,
                 snapshots_per_day: int):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "log_backup_interval", log_backup_interval)
        pulumi.set(__self__, "snapshots_per_day", snapshots_per_day)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logBackupInterval")
    def log_backup_interval(self) -> int:
        return pulumi.get(self, "log_backup_interval")

    @property
    @pulumi.getter(name="snapshotsPerDay")
    def snapshots_per_day(self) -> int:
        return pulumi.get(self, "snapshots_per_day")


@pulumi.output_type
class GetNdbCloneTimeMachineScheduleDailyScheduleResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetNdbCloneTimeMachineScheduleMonthlyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_month: int,
                 enabled: bool):
        pulumi.set(__self__, "day_of_month", day_of_month)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> int:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetNdbCloneTimeMachineScheduleQuartelyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_month: int,
                 enabled: bool,
                 start_month: str,
                 start_month_value: str):
        pulumi.set(__self__, "day_of_month", day_of_month)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "start_month", start_month)
        pulumi.set(__self__, "start_month_value", start_month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> int:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="startMonth")
    def start_month(self) -> str:
        return pulumi.get(self, "start_month")

    @property
    @pulumi.getter(name="startMonthValue")
    def start_month_value(self) -> str:
        return pulumi.get(self, "start_month_value")


@pulumi.output_type
class GetNdbCloneTimeMachineScheduleSnapshotTimeOfDayResult(dict):
    def __init__(__self__, *,
                 extra: bool,
                 hours: int,
                 minutes: int,
                 seconds: int):
        pulumi.set(__self__, "extra", extra)
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)
        pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def extra(self) -> bool:
        return pulumi.get(self, "extra")

    @property
    @pulumi.getter
    def hours(self) -> int:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def seconds(self) -> int:
        return pulumi.get(self, "seconds")


@pulumi.output_type
class GetNdbCloneTimeMachineScheduleWeeklyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_week: str,
                 day_of_week_value: str,
                 enabled: bool):
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "day_of_week_value", day_of_week_value)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="dayOfWeekValue")
    def day_of_week_value(self) -> str:
        return pulumi.get(self, "day_of_week_value")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetNdbCloneTimeMachineScheduleYearlyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_month: int,
                 enabled: bool,
                 month: str,
                 month_value: str):
        pulumi.set(__self__, "day_of_month", day_of_month)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "month", month)
        pulumi.set(__self__, "month_value", month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> int:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def month(self) -> str:
        return pulumi.get(self, "month")

    @property
    @pulumi.getter(name="monthValue")
    def month_value(self) -> str:
        return pulumi.get(self, "month_value")


@pulumi.output_type
class GetNdbCloneTimeMachineSlaResult(dict):
    def __init__(__self__, *,
                 continuous_retention: int,
                 current_active_frequency: str,
                 daily_retention: int,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 id: str,
                 monthly_retention: int,
                 name: str,
                 owner_id: str,
                 pitr_enabled: bool,
                 quarterly_retention: int,
                 reference_count: int,
                 system_sla: bool,
                 unique_name: str,
                 weekly_retention: int,
                 yearly_retention: int):
        """
        :param str date_created: date created for clone
        :param str date_modified: last modified date for clone
        :param str description: cloned description
        :param str id: cloned id
        :param str name: cloned name
        """
        pulumi.set(__self__, "continuous_retention", continuous_retention)
        pulumi.set(__self__, "current_active_frequency", current_active_frequency)
        pulumi.set(__self__, "daily_retention", daily_retention)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly_retention", monthly_retention)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "pitr_enabled", pitr_enabled)
        pulumi.set(__self__, "quarterly_retention", quarterly_retention)
        pulumi.set(__self__, "reference_count", reference_count)
        pulumi.set(__self__, "system_sla", system_sla)
        pulumi.set(__self__, "unique_name", unique_name)
        pulumi.set(__self__, "weekly_retention", weekly_retention)
        pulumi.set(__self__, "yearly_retention", yearly_retention)

    @property
    @pulumi.getter(name="continuousRetention")
    def continuous_retention(self) -> int:
        return pulumi.get(self, "continuous_retention")

    @property
    @pulumi.getter(name="currentActiveFrequency")
    def current_active_frequency(self) -> str:
        return pulumi.get(self, "current_active_frequency")

    @property
    @pulumi.getter(name="dailyRetention")
    def daily_retention(self) -> int:
        return pulumi.get(self, "daily_retention")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        cloned id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlyRetention")
    def monthly_retention(self) -> int:
        return pulumi.get(self, "monthly_retention")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="pitrEnabled")
    def pitr_enabled(self) -> bool:
        return pulumi.get(self, "pitr_enabled")

    @property
    @pulumi.getter(name="quarterlyRetention")
    def quarterly_retention(self) -> int:
        return pulumi.get(self, "quarterly_retention")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> int:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="systemSla")
    def system_sla(self) -> bool:
        return pulumi.get(self, "system_sla")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> str:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklyRetention")
    def weekly_retention(self) -> int:
        return pulumi.get(self, "weekly_retention")

    @property
    @pulumi.getter(name="yearlyRetention")
    def yearly_retention(self) -> int:
        return pulumi.get(self, "yearly_retention")


@pulumi.output_type
class GetNdbCloneTimeMachineTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbClonesCloneResult(dict):
    def __init__(__self__, *,
                 clone: bool,
                 clustered: bool,
                 database_cluster_type: str,
                 database_name: str,
                 database_nodes: Sequence['outputs.GetNdbClonesCloneDatabaseNodeResult'],
                 database_status: str,
                 databases: Mapping[str, str],
                 date_created: str,
                 date_modified: str,
                 dbserver_logical_cluster: Mapping[str, str],
                 dbserver_logical_cluster_id: str,
                 description: str,
                 id: str,
                 infos: Sequence['outputs.GetNdbClonesCloneInfoResult'],
                 lcm_configs: Sequence['outputs.GetNdbClonesCloneLcmConfigResult'],
                 linked_databases: Sequence['outputs.GetNdbClonesCloneLinkedDatabaseResult'],
                 metric: Mapping[str, str],
                 name: str,
                 parent_database_id: str,
                 parent_source_database_id: str,
                 parent_time_machine_id: str,
                 properties: Sequence['outputs.GetNdbClonesClonePropertyResult'],
                 status: str,
                 tags: Sequence['outputs.GetNdbClonesCloneTagResult'],
                 time_machine_id: str,
                 time_machines: Sequence['outputs.GetNdbClonesCloneTimeMachineResult'],
                 time_zone: str,
                 type: str):
        """
        :param bool clone: clone or not
        :param bool clustered: clustered or not
        :param str database_cluster_type: database cluster type
        :param str database_name: database name
        :param Sequence['GetNdbClonesCloneDatabaseNodeArgs'] database_nodes: database nodes associated with database instance
        :param str database_status: database status
        :param Mapping[str, str] databases: database for a cloned instance
        :param str date_created: date created for clone
        :param str date_modified: last modified date for clone
        :param Mapping[str, str] dbserver_logical_cluster: dbserver logical cluster
        :param str dbserver_logical_cluster_id: dbserver logical cluster id
        :param str description: cloned description
        :param str id: cloned id
        :param Sequence['GetNdbClonesCloneInfoArgs'] infos: cloned info
        :param Sequence['GetNdbClonesCloneLcmConfigArgs'] lcm_configs: LCM Config
        :param Sequence['GetNdbClonesCloneLinkedDatabaseArgs'] linked_databases: linked databases within database instance
        :param Mapping[str, str] metric: Metric of clone
        :param str name: cloned name
        :param str parent_database_id: parent database id
        :param str parent_source_database_id: parent source database id
        :param str parent_time_machine_id: parent time machine id
        :param Sequence['GetNdbClonesClonePropertyArgs'] properties: properties of clone
        :param str status: status of clone
        :param Sequence['GetNdbClonesCloneTagArgs'] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        :param str time_machine_id: time machine id
        :param Sequence['GetNdbClonesCloneTimeMachineArgs'] time_machines: Time machine info
        :param str time_zone: time zone
        :param str type: type
        """
        pulumi.set(__self__, "clone", clone)
        pulumi.set(__self__, "clustered", clustered)
        pulumi.set(__self__, "database_cluster_type", database_cluster_type)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "database_nodes", database_nodes)
        pulumi.set(__self__, "database_status", database_status)
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "dbserver_logical_cluster", dbserver_logical_cluster)
        pulumi.set(__self__, "dbserver_logical_cluster_id", dbserver_logical_cluster_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "lcm_configs", lcm_configs)
        pulumi.set(__self__, "linked_databases", linked_databases)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent_database_id", parent_database_id)
        pulumi.set(__self__, "parent_source_database_id", parent_source_database_id)
        pulumi.set(__self__, "parent_time_machine_id", parent_time_machine_id)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "time_machine_id", time_machine_id)
        pulumi.set(__self__, "time_machines", time_machines)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def clone(self) -> bool:
        """
        clone or not
        """
        return pulumi.get(self, "clone")

    @property
    @pulumi.getter
    def clustered(self) -> bool:
        """
        clustered or not
        """
        return pulumi.get(self, "clustered")

    @property
    @pulumi.getter(name="databaseClusterType")
    def database_cluster_type(self) -> str:
        """
        database cluster type
        """
        return pulumi.get(self, "database_cluster_type")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        database name
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseNodes")
    def database_nodes(self) -> Sequence['outputs.GetNdbClonesCloneDatabaseNodeResult']:
        """
        database nodes associated with database instance
        """
        return pulumi.get(self, "database_nodes")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> str:
        """
        database status
        """
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter
    def databases(self) -> Mapping[str, str]:
        """
        database for a cloned instance
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter(name="dbserverLogicalCluster")
    def dbserver_logical_cluster(self) -> Mapping[str, str]:
        """
        dbserver logical cluster
        """
        return pulumi.get(self, "dbserver_logical_cluster")

    @property
    @pulumi.getter(name="dbserverLogicalClusterId")
    def dbserver_logical_cluster_id(self) -> str:
        """
        dbserver logical cluster id
        """
        return pulumi.get(self, "dbserver_logical_cluster_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        cloned id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetNdbClonesCloneInfoResult']:
        """
        cloned info
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter(name="lcmConfigs")
    def lcm_configs(self) -> Sequence['outputs.GetNdbClonesCloneLcmConfigResult']:
        """
        LCM Config
        """
        return pulumi.get(self, "lcm_configs")

    @property
    @pulumi.getter(name="linkedDatabases")
    def linked_databases(self) -> Sequence['outputs.GetNdbClonesCloneLinkedDatabaseResult']:
        """
        linked databases within database instance
        """
        return pulumi.get(self, "linked_databases")

    @property
    @pulumi.getter
    def metric(self) -> Mapping[str, str]:
        """
        Metric of clone
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> str:
        """
        parent database id
        """
        return pulumi.get(self, "parent_database_id")

    @property
    @pulumi.getter(name="parentSourceDatabaseId")
    def parent_source_database_id(self) -> str:
        """
        parent source database id
        """
        return pulumi.get(self, "parent_source_database_id")

    @property
    @pulumi.getter(name="parentTimeMachineId")
    def parent_time_machine_id(self) -> str:
        """
        parent time machine id
        """
        return pulumi.get(self, "parent_time_machine_id")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbClonesClonePropertyResult']:
        """
        properties of clone
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of clone
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNdbClonesCloneTagResult']:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeMachineId")
    def time_machine_id(self) -> str:
        """
        time machine id
        """
        return pulumi.get(self, "time_machine_id")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> Sequence['outputs.GetNdbClonesCloneTimeMachineResult']:
        """
        Time machine info
        """
        return pulumi.get(self, "time_machines")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        """
        time zone
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNdbClonesCloneDatabaseNodeResult(dict):
    def __init__(__self__, *,
                 access_level: Mapping[str, str],
                 database_id: str,
                 database_status: str,
                 date_created: str,
                 date_modified: str,
                 dbserver: Mapping[str, str],
                 dbserver_id: str,
                 description: str,
                 id: str,
                 infos: Sequence['outputs.GetNdbClonesCloneDatabaseNodeInfoResult'],
                 name: str,
                 primary: bool,
                 properties: Sequence['outputs.GetNdbClonesCloneDatabaseNodePropertyResult'],
                 protection_domain_id: str,
                 protection_domains: Sequence['outputs.GetNdbClonesCloneDatabaseNodeProtectionDomainResult'],
                 software_installation_id: str,
                 status: str,
                 tags: Sequence['outputs.GetNdbClonesCloneDatabaseNodeTagResult']):
        """
        :param str database_status: database status
        :param str date_created: date created for clone
        :param str date_modified: last modified date for clone
        :param str description: cloned description
        :param str id: cloned id
        :param Sequence['GetNdbClonesCloneDatabaseNodeInfoArgs'] infos: cloned info
        :param str name: cloned name
        :param Sequence['GetNdbClonesCloneDatabaseNodePropertyArgs'] properties: properties of clone
        :param str status: status of clone
        :param Sequence['GetNdbClonesCloneDatabaseNodeTagArgs'] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        pulumi.set(__self__, "access_level", access_level)
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "database_status", database_status)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "dbserver", dbserver)
        pulumi.set(__self__, "dbserver_id", dbserver_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "protection_domain_id", protection_domain_id)
        pulumi.set(__self__, "protection_domains", protection_domains)
        pulumi.set(__self__, "software_installation_id", software_installation_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Mapping[str, str]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> str:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> str:
        """
        database status
        """
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def dbserver(self) -> Mapping[str, str]:
        return pulumi.get(self, "dbserver")

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> str:
        return pulumi.get(self, "dbserver_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        cloned id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetNdbClonesCloneDatabaseNodeInfoResult']:
        """
        cloned info
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbClonesCloneDatabaseNodePropertyResult']:
        """
        properties of clone
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="protectionDomainId")
    def protection_domain_id(self) -> str:
        return pulumi.get(self, "protection_domain_id")

    @property
    @pulumi.getter(name="protectionDomains")
    def protection_domains(self) -> Sequence['outputs.GetNdbClonesCloneDatabaseNodeProtectionDomainResult']:
        return pulumi.get(self, "protection_domains")

    @property
    @pulumi.getter(name="softwareInstallationId")
    def software_installation_id(self) -> str:
        return pulumi.get(self, "software_installation_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of clone
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNdbClonesCloneDatabaseNodeTagResult']:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetNdbClonesCloneDatabaseNodeInfoResult(dict):
    def __init__(__self__, *,
                 info: Mapping[str, str],
                 secure_info: Mapping[str, str]):
        """
        :param Mapping[str, str] info: cloned info
        """
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Mapping[str, str]:
        """
        cloned info
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class GetNdbClonesCloneDatabaseNodePropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        """
        :param str description: cloned description
        :param str name: cloned name
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbClonesCloneDatabaseNodeProtectionDomainResult(dict):
    def __init__(__self__, *,
                 assoc_entities: Sequence[str],
                 cloud_id: str,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 era_created: bool,
                 id: str,
                 name: str,
                 owner_id: str,
                 primary_host: str,
                 properties: Sequence['outputs.GetNdbClonesCloneDatabaseNodeProtectionDomainPropertyResult'],
                 status: str,
                 type: str):
        """
        :param str date_created: date created for clone
        :param str date_modified: last modified date for clone
        :param str description: cloned description
        :param str id: cloned id
        :param str name: cloned name
        :param Sequence['GetNdbClonesCloneDatabaseNodeProtectionDomainPropertyArgs'] properties: properties of clone
        :param str status: status of clone
        :param str type: type
        """
        pulumi.set(__self__, "assoc_entities", assoc_entities)
        pulumi.set(__self__, "cloud_id", cloud_id)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "era_created", era_created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "primary_host", primary_host)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assocEntities")
    def assoc_entities(self) -> Sequence[str]:
        return pulumi.get(self, "assoc_entities")

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> str:
        return pulumi.get(self, "cloud_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eraCreated")
    def era_created(self) -> bool:
        return pulumi.get(self, "era_created")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        cloned id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="primaryHost")
    def primary_host(self) -> str:
        return pulumi.get(self, "primary_host")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbClonesCloneDatabaseNodeProtectionDomainPropertyResult']:
        """
        properties of clone
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of clone
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNdbClonesCloneDatabaseNodeProtectionDomainPropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        """
        :param str description: cloned description
        :param str name: cloned name
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbClonesCloneDatabaseNodeTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbClonesCloneInfoResult(dict):
    def __init__(__self__, *,
                 bpg_configs: Sequence['outputs.GetNdbClonesCloneInfoBpgConfigResult'],
                 secure_info: Mapping[str, str]):
        pulumi.set(__self__, "bpg_configs", bpg_configs)
        pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="bpgConfigs")
    def bpg_configs(self) -> Sequence['outputs.GetNdbClonesCloneInfoBpgConfigResult']:
        return pulumi.get(self, "bpg_configs")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class GetNdbClonesCloneInfoBpgConfigResult(dict):
    def __init__(__self__, *,
                 bpg_db_params: Sequence['outputs.GetNdbClonesCloneInfoBpgConfigBpgDbParamResult'],
                 storages: Sequence['outputs.GetNdbClonesCloneInfoBpgConfigStorageResult'],
                 vm_properties: Sequence['outputs.GetNdbClonesCloneInfoBpgConfigVmPropertyResult']):
        pulumi.set(__self__, "bpg_db_params", bpg_db_params)
        pulumi.set(__self__, "storages", storages)
        pulumi.set(__self__, "vm_properties", vm_properties)

    @property
    @pulumi.getter(name="bpgDbParams")
    def bpg_db_params(self) -> Sequence['outputs.GetNdbClonesCloneInfoBpgConfigBpgDbParamResult']:
        return pulumi.get(self, "bpg_db_params")

    @property
    @pulumi.getter
    def storages(self) -> Sequence['outputs.GetNdbClonesCloneInfoBpgConfigStorageResult']:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="vmProperties")
    def vm_properties(self) -> Sequence['outputs.GetNdbClonesCloneInfoBpgConfigVmPropertyResult']:
        return pulumi.get(self, "vm_properties")


@pulumi.output_type
class GetNdbClonesCloneInfoBpgConfigBpgDbParamResult(dict):
    def __init__(__self__, *,
                 effective_cache_size: str,
                 maintenance_work_mem: str,
                 max_parallel_workers_per_gather: str,
                 max_worker_processes: str,
                 shared_buffers: str,
                 work_mem: str):
        pulumi.set(__self__, "effective_cache_size", effective_cache_size)
        pulumi.set(__self__, "maintenance_work_mem", maintenance_work_mem)
        pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        pulumi.set(__self__, "shared_buffers", shared_buffers)
        pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="effectiveCacheSize")
    def effective_cache_size(self) -> str:
        return pulumi.get(self, "effective_cache_size")

    @property
    @pulumi.getter(name="maintenanceWorkMem")
    def maintenance_work_mem(self) -> str:
        return pulumi.get(self, "maintenance_work_mem")

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> str:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> str:
        return pulumi.get(self, "max_worker_processes")

    @property
    @pulumi.getter(name="sharedBuffers")
    def shared_buffers(self) -> str:
        return pulumi.get(self, "shared_buffers")

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> str:
        return pulumi.get(self, "work_mem")


@pulumi.output_type
class GetNdbClonesCloneInfoBpgConfigStorageResult(dict):
    def __init__(__self__, *,
                 archive_storages: Sequence['outputs.GetNdbClonesCloneInfoBpgConfigStorageArchiveStorageResult'],
                 data_disks: Sequence['outputs.GetNdbClonesCloneInfoBpgConfigStorageDataDiskResult'],
                 log_disks: Sequence['outputs.GetNdbClonesCloneInfoBpgConfigStorageLogDiskResult']):
        pulumi.set(__self__, "archive_storages", archive_storages)
        pulumi.set(__self__, "data_disks", data_disks)
        pulumi.set(__self__, "log_disks", log_disks)

    @property
    @pulumi.getter(name="archiveStorages")
    def archive_storages(self) -> Sequence['outputs.GetNdbClonesCloneInfoBpgConfigStorageArchiveStorageResult']:
        return pulumi.get(self, "archive_storages")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Sequence['outputs.GetNdbClonesCloneInfoBpgConfigStorageDataDiskResult']:
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="logDisks")
    def log_disks(self) -> Sequence['outputs.GetNdbClonesCloneInfoBpgConfigStorageLogDiskResult']:
        return pulumi.get(self, "log_disks")


@pulumi.output_type
class GetNdbClonesCloneInfoBpgConfigStorageArchiveStorageResult(dict):
    def __init__(__self__, *,
                 size: float):
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> float:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetNdbClonesCloneInfoBpgConfigStorageDataDiskResult(dict):
    def __init__(__self__, *,
                 count: float):
        pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> float:
        return pulumi.get(self, "count")


@pulumi.output_type
class GetNdbClonesCloneInfoBpgConfigStorageLogDiskResult(dict):
    def __init__(__self__, *,
                 count: float,
                 size: float):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> float:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def size(self) -> float:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetNdbClonesCloneInfoBpgConfigVmPropertyResult(dict):
    def __init__(__self__, *,
                 dirty_background_ratio: float,
                 dirty_expire_centisecs: float,
                 dirty_ratio: float,
                 dirty_writeback_centisecs: float,
                 nr_hugepages: float,
                 overcommit_memory: float,
                 swappiness: float):
        pulumi.set(__self__, "dirty_background_ratio", dirty_background_ratio)
        pulumi.set(__self__, "dirty_expire_centisecs", dirty_expire_centisecs)
        pulumi.set(__self__, "dirty_ratio", dirty_ratio)
        pulumi.set(__self__, "dirty_writeback_centisecs", dirty_writeback_centisecs)
        pulumi.set(__self__, "nr_hugepages", nr_hugepages)
        pulumi.set(__self__, "overcommit_memory", overcommit_memory)
        pulumi.set(__self__, "swappiness", swappiness)

    @property
    @pulumi.getter(name="dirtyBackgroundRatio")
    def dirty_background_ratio(self) -> float:
        return pulumi.get(self, "dirty_background_ratio")

    @property
    @pulumi.getter(name="dirtyExpireCentisecs")
    def dirty_expire_centisecs(self) -> float:
        return pulumi.get(self, "dirty_expire_centisecs")

    @property
    @pulumi.getter(name="dirtyRatio")
    def dirty_ratio(self) -> float:
        return pulumi.get(self, "dirty_ratio")

    @property
    @pulumi.getter(name="dirtyWritebackCentisecs")
    def dirty_writeback_centisecs(self) -> float:
        return pulumi.get(self, "dirty_writeback_centisecs")

    @property
    @pulumi.getter(name="nrHugepages")
    def nr_hugepages(self) -> float:
        return pulumi.get(self, "nr_hugepages")

    @property
    @pulumi.getter(name="overcommitMemory")
    def overcommit_memory(self) -> float:
        return pulumi.get(self, "overcommit_memory")

    @property
    @pulumi.getter
    def swappiness(self) -> float:
        return pulumi.get(self, "swappiness")


@pulumi.output_type
class GetNdbClonesCloneLcmConfigResult(dict):
    def __init__(__self__, *,
                 expiry_details: Sequence['outputs.GetNdbClonesCloneLcmConfigExpiryDetailResult'],
                 post_delete_commands: Sequence['outputs.GetNdbClonesCloneLcmConfigPostDeleteCommandResult'],
                 pre_delete_commands: Sequence['outputs.GetNdbClonesCloneLcmConfigPreDeleteCommandResult'],
                 refresh_details: Sequence['outputs.GetNdbClonesCloneLcmConfigRefreshDetailResult']):
        pulumi.set(__self__, "expiry_details", expiry_details)
        pulumi.set(__self__, "post_delete_commands", post_delete_commands)
        pulumi.set(__self__, "pre_delete_commands", pre_delete_commands)
        pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Sequence['outputs.GetNdbClonesCloneLcmConfigExpiryDetailResult']:
        return pulumi.get(self, "expiry_details")

    @property
    @pulumi.getter(name="postDeleteCommands")
    def post_delete_commands(self) -> Sequence['outputs.GetNdbClonesCloneLcmConfigPostDeleteCommandResult']:
        return pulumi.get(self, "post_delete_commands")

    @property
    @pulumi.getter(name="preDeleteCommands")
    def pre_delete_commands(self) -> Sequence['outputs.GetNdbClonesCloneLcmConfigPreDeleteCommandResult']:
        return pulumi.get(self, "pre_delete_commands")

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Sequence['outputs.GetNdbClonesCloneLcmConfigRefreshDetailResult']:
        return pulumi.get(self, "refresh_details")


@pulumi.output_type
class GetNdbClonesCloneLcmConfigExpiryDetailResult(dict):
    def __init__(__self__, *,
                 delete_database: bool,
                 delete_time_machine: bool,
                 delete_vm: bool,
                 effective_timestamp: str,
                 expire_in_days: int,
                 expiry_date_timezone: str,
                 expiry_timestamp: str,
                 remind_before_in_days: int,
                 user_created: bool):
        pulumi.set(__self__, "delete_database", delete_database)
        pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        pulumi.set(__self__, "delete_vm", delete_vm)
        pulumi.set(__self__, "effective_timestamp", effective_timestamp)
        pulumi.set(__self__, "expire_in_days", expire_in_days)
        pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        pulumi.set(__self__, "expiry_timestamp", expiry_timestamp)
        pulumi.set(__self__, "remind_before_in_days", remind_before_in_days)
        pulumi.set(__self__, "user_created", user_created)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> bool:
        return pulumi.get(self, "delete_database")

    @property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> bool:
        return pulumi.get(self, "delete_time_machine")

    @property
    @pulumi.getter(name="deleteVm")
    def delete_vm(self) -> bool:
        return pulumi.get(self, "delete_vm")

    @property
    @pulumi.getter(name="effectiveTimestamp")
    def effective_timestamp(self) -> str:
        return pulumi.get(self, "effective_timestamp")

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> int:
        return pulumi.get(self, "expire_in_days")

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> str:
        return pulumi.get(self, "expiry_date_timezone")

    @property
    @pulumi.getter(name="expiryTimestamp")
    def expiry_timestamp(self) -> str:
        return pulumi.get(self, "expiry_timestamp")

    @property
    @pulumi.getter(name="remindBeforeInDays")
    def remind_before_in_days(self) -> int:
        return pulumi.get(self, "remind_before_in_days")

    @property
    @pulumi.getter(name="userCreated")
    def user_created(self) -> bool:
        return pulumi.get(self, "user_created")


@pulumi.output_type
class GetNdbClonesCloneLcmConfigPostDeleteCommandResult(dict):
    def __init__(__self__, *,
                 command: str):
        pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> str:
        return pulumi.get(self, "command")


@pulumi.output_type
class GetNdbClonesCloneLcmConfigPreDeleteCommandResult(dict):
    def __init__(__self__, *,
                 command: str):
        pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> str:
        return pulumi.get(self, "command")


@pulumi.output_type
class GetNdbClonesCloneLcmConfigRefreshDetailResult(dict):
    def __init__(__self__, *,
                 last_refresh_date: str,
                 next_refresh_date: str,
                 refresh_date_timezone: str,
                 refresh_in_days: int,
                 refresh_in_hours: int,
                 refresh_in_months: int,
                 refresh_time: str):
        pulumi.set(__self__, "last_refresh_date", last_refresh_date)
        pulumi.set(__self__, "next_refresh_date", next_refresh_date)
        pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        pulumi.set(__self__, "refresh_in_hours", refresh_in_hours)
        pulumi.set(__self__, "refresh_in_months", refresh_in_months)
        pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="lastRefreshDate")
    def last_refresh_date(self) -> str:
        return pulumi.get(self, "last_refresh_date")

    @property
    @pulumi.getter(name="nextRefreshDate")
    def next_refresh_date(self) -> str:
        return pulumi.get(self, "next_refresh_date")

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> str:
        return pulumi.get(self, "refresh_date_timezone")

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> int:
        return pulumi.get(self, "refresh_in_days")

    @property
    @pulumi.getter(name="refreshInHours")
    def refresh_in_hours(self) -> int:
        return pulumi.get(self, "refresh_in_hours")

    @property
    @pulumi.getter(name="refreshInMonths")
    def refresh_in_months(self) -> int:
        return pulumi.get(self, "refresh_in_months")

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> str:
        return pulumi.get(self, "refresh_time")


@pulumi.output_type
class GetNdbClonesCloneLinkedDatabaseResult(dict):
    def __init__(__self__, *,
                 database_name: str,
                 database_status: str,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 id: str,
                 infos: Sequence['outputs.GetNdbClonesCloneLinkedDatabaseInfoResult'],
                 metric: Mapping[str, str],
                 name: str,
                 parent_database_id: str,
                 parent_linked_database_id: str,
                 snapshot_id: str,
                 status: str,
                 timezone: str):
        """
        :param str database_name: database name
        :param str database_status: database status
        :param str date_created: date created for clone
        :param str date_modified: last modified date for clone
        :param str description: cloned description
        :param str id: cloned id
        :param Sequence['GetNdbClonesCloneLinkedDatabaseInfoArgs'] infos: cloned info
        :param Mapping[str, str] metric: Metric of clone
        :param str name: cloned name
        :param str parent_database_id: parent database id
        :param str status: status of clone
        :param str timezone: Default is UTC
        """
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "database_status", database_status)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent_database_id", parent_database_id)
        pulumi.set(__self__, "parent_linked_database_id", parent_linked_database_id)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        database name
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> str:
        """
        database status
        """
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        cloned id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetNdbClonesCloneLinkedDatabaseInfoResult']:
        """
        cloned info
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def metric(self) -> Mapping[str, str]:
        """
        Metric of clone
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> str:
        """
        parent database id
        """
        return pulumi.get(self, "parent_database_id")

    @property
    @pulumi.getter(name="parentLinkedDatabaseId")
    def parent_linked_database_id(self) -> str:
        return pulumi.get(self, "parent_linked_database_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of clone
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        """
        Default is UTC
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class GetNdbClonesCloneLinkedDatabaseInfoResult(dict):
    def __init__(__self__, *,
                 info: Mapping[str, str],
                 secure_info: Mapping[str, str]):
        """
        :param Mapping[str, str] info: cloned info
        """
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Mapping[str, str]:
        """
        cloned info
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class GetNdbClonesClonePropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        """
        :param str description: cloned description
        :param str name: cloned name
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbClonesCloneTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbClonesCloneTimeMachineResult(dict):
    def __init__(__self__, *,
                 access_level: str,
                 clone: bool,
                 clones: str,
                 clustered: bool,
                 database: str,
                 database_id: str,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 ea_status: str,
                 id: str,
                 metric: str,
                 name: str,
                 properties: Sequence['outputs.GetNdbClonesCloneTimeMachinePropertyResult'],
                 schedule_id: str,
                 schedules: Sequence['outputs.GetNdbClonesCloneTimeMachineScheduleResult'],
                 scope: str,
                 sla_id: str,
                 sla_update_in_progress: bool,
                 sla_update_metadata: str,
                 slas: Sequence['outputs.GetNdbClonesCloneTimeMachineSlaResult'],
                 source_nx_clusters: Sequence[str],
                 status: str,
                 tags: Sequence['outputs.GetNdbClonesCloneTimeMachineTagResult'],
                 type: str):
        """
        :param bool clone: clone or not
        :param str clones: List of clones based on filters
        :param bool clustered: clustered or not
        :param str date_created: date created for clone
        :param str date_modified: last modified date for clone
        :param str description: cloned description
        :param str id: cloned id
        :param str metric: Metric of clone
        :param str name: cloned name
        :param Sequence['GetNdbClonesCloneTimeMachinePropertyArgs'] properties: properties of clone
        :param str status: status of clone
        :param Sequence['GetNdbClonesCloneTimeMachineTagArgs'] tags: allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        :param str type: type
        """
        pulumi.set(__self__, "access_level", access_level)
        pulumi.set(__self__, "clone", clone)
        pulumi.set(__self__, "clones", clones)
        pulumi.set(__self__, "clustered", clustered)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "ea_status", ea_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "schedule_id", schedule_id)
        pulumi.set(__self__, "schedules", schedules)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "sla_id", sla_id)
        pulumi.set(__self__, "sla_update_in_progress", sla_update_in_progress)
        pulumi.set(__self__, "sla_update_metadata", sla_update_metadata)
        pulumi.set(__self__, "slas", slas)
        pulumi.set(__self__, "source_nx_clusters", source_nx_clusters)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> str:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter
    def clone(self) -> bool:
        """
        clone or not
        """
        return pulumi.get(self, "clone")

    @property
    @pulumi.getter
    def clones(self) -> str:
        """
        List of clones based on filters
        """
        return pulumi.get(self, "clones")

    @property
    @pulumi.getter
    def clustered(self) -> bool:
        """
        clustered or not
        """
        return pulumi.get(self, "clustered")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> str:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eaStatus")
    def ea_status(self) -> str:
        return pulumi.get(self, "ea_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        cloned id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metric(self) -> str:
        """
        Metric of clone
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbClonesCloneTimeMachinePropertyResult']:
        """
        properties of clone
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> str:
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetNdbClonesCloneTimeMachineScheduleResult']:
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter
    def scope(self) -> str:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> str:
        return pulumi.get(self, "sla_id")

    @property
    @pulumi.getter(name="slaUpdateInProgress")
    def sla_update_in_progress(self) -> bool:
        return pulumi.get(self, "sla_update_in_progress")

    @property
    @pulumi.getter(name="slaUpdateMetadata")
    def sla_update_metadata(self) -> str:
        return pulumi.get(self, "sla_update_metadata")

    @property
    @pulumi.getter
    def slas(self) -> Sequence['outputs.GetNdbClonesCloneTimeMachineSlaResult']:
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter(name="sourceNxClusters")
    def source_nx_clusters(self) -> Sequence[str]:
        return pulumi.get(self, "source_nx_clusters")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of clone
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNdbClonesCloneTimeMachineTagResult']:
        """
        allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNdbClonesCloneTimeMachinePropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        """
        :param str description: cloned description
        :param str name: cloned name
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbClonesCloneTimeMachineScheduleResult(dict):
    def __init__(__self__, *,
                 continuous_schedules: Sequence['outputs.GetNdbClonesCloneTimeMachineScheduleContinuousScheduleResult'],
                 daily_schedules: Sequence['outputs.GetNdbClonesCloneTimeMachineScheduleDailyScheduleResult'],
                 date_created: str,
                 date_modified: str,
                 description: str,
                 global_policy: bool,
                 id: str,
                 monthly_schedules: Sequence['outputs.GetNdbClonesCloneTimeMachineScheduleMonthlyScheduleResult'],
                 name: str,
                 owner_id: str,
                 quartely_schedules: Sequence['outputs.GetNdbClonesCloneTimeMachineScheduleQuartelyScheduleResult'],
                 reference_count: int,
                 snapshot_time_of_days: Sequence['outputs.GetNdbClonesCloneTimeMachineScheduleSnapshotTimeOfDayResult'],
                 start_time: str,
                 system_policy: bool,
                 time_zone: str,
                 unique_name: str,
                 weekly_schedules: Sequence['outputs.GetNdbClonesCloneTimeMachineScheduleWeeklyScheduleResult'],
                 yearly_schedules: Sequence['outputs.GetNdbClonesCloneTimeMachineScheduleYearlyScheduleResult']):
        """
        :param str date_created: date created for clone
        :param str date_modified: last modified date for clone
        :param str description: cloned description
        :param str id: cloned id
        :param str name: cloned name
        :param str time_zone: time zone
        """
        pulumi.set(__self__, "continuous_schedules", continuous_schedules)
        pulumi.set(__self__, "daily_schedules", daily_schedules)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "global_policy", global_policy)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly_schedules", monthly_schedules)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "quartely_schedules", quartely_schedules)
        pulumi.set(__self__, "reference_count", reference_count)
        pulumi.set(__self__, "snapshot_time_of_days", snapshot_time_of_days)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "system_policy", system_policy)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "unique_name", unique_name)
        pulumi.set(__self__, "weekly_schedules", weekly_schedules)
        pulumi.set(__self__, "yearly_schedules", yearly_schedules)

    @property
    @pulumi.getter(name="continuousSchedules")
    def continuous_schedules(self) -> Sequence['outputs.GetNdbClonesCloneTimeMachineScheduleContinuousScheduleResult']:
        return pulumi.get(self, "continuous_schedules")

    @property
    @pulumi.getter(name="dailySchedules")
    def daily_schedules(self) -> Sequence['outputs.GetNdbClonesCloneTimeMachineScheduleDailyScheduleResult']:
        return pulumi.get(self, "daily_schedules")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="globalPolicy")
    def global_policy(self) -> bool:
        return pulumi.get(self, "global_policy")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        cloned id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlySchedules")
    def monthly_schedules(self) -> Sequence['outputs.GetNdbClonesCloneTimeMachineScheduleMonthlyScheduleResult']:
        return pulumi.get(self, "monthly_schedules")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="quartelySchedules")
    def quartely_schedules(self) -> Sequence['outputs.GetNdbClonesCloneTimeMachineScheduleQuartelyScheduleResult']:
        return pulumi.get(self, "quartely_schedules")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> int:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="snapshotTimeOfDays")
    def snapshot_time_of_days(self) -> Sequence['outputs.GetNdbClonesCloneTimeMachineScheduleSnapshotTimeOfDayResult']:
        return pulumi.get(self, "snapshot_time_of_days")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="systemPolicy")
    def system_policy(self) -> bool:
        return pulumi.get(self, "system_policy")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        """
        time zone
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> str:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklySchedules")
    def weekly_schedules(self) -> Sequence['outputs.GetNdbClonesCloneTimeMachineScheduleWeeklyScheduleResult']:
        return pulumi.get(self, "weekly_schedules")

    @property
    @pulumi.getter(name="yearlySchedules")
    def yearly_schedules(self) -> Sequence['outputs.GetNdbClonesCloneTimeMachineScheduleYearlyScheduleResult']:
        return pulumi.get(self, "yearly_schedules")


@pulumi.output_type
class GetNdbClonesCloneTimeMachineScheduleContinuousScheduleResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 log_backup_interval: int,
                 snapshots_per_day: int):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "log_backup_interval", log_backup_interval)
        pulumi.set(__self__, "snapshots_per_day", snapshots_per_day)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logBackupInterval")
    def log_backup_interval(self) -> int:
        return pulumi.get(self, "log_backup_interval")

    @property
    @pulumi.getter(name="snapshotsPerDay")
    def snapshots_per_day(self) -> int:
        return pulumi.get(self, "snapshots_per_day")


@pulumi.output_type
class GetNdbClonesCloneTimeMachineScheduleDailyScheduleResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetNdbClonesCloneTimeMachineScheduleMonthlyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_month: int,
                 enabled: bool):
        pulumi.set(__self__, "day_of_month", day_of_month)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> int:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetNdbClonesCloneTimeMachineScheduleQuartelyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_month: int,
                 enabled: bool,
                 start_month: str,
                 start_month_value: str):
        pulumi.set(__self__, "day_of_month", day_of_month)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "start_month", start_month)
        pulumi.set(__self__, "start_month_value", start_month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> int:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="startMonth")
    def start_month(self) -> str:
        return pulumi.get(self, "start_month")

    @property
    @pulumi.getter(name="startMonthValue")
    def start_month_value(self) -> str:
        return pulumi.get(self, "start_month_value")


@pulumi.output_type
class GetNdbClonesCloneTimeMachineScheduleSnapshotTimeOfDayResult(dict):
    def __init__(__self__, *,
                 extra: bool,
                 hours: int,
                 minutes: int,
                 seconds: int):
        pulumi.set(__self__, "extra", extra)
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)
        pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def extra(self) -> bool:
        return pulumi.get(self, "extra")

    @property
    @pulumi.getter
    def hours(self) -> int:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def seconds(self) -> int:
        return pulumi.get(self, "seconds")


@pulumi.output_type
class GetNdbClonesCloneTimeMachineScheduleWeeklyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_week: str,
                 day_of_week_value: str,
                 enabled: bool):
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "day_of_week_value", day_of_week_value)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="dayOfWeekValue")
    def day_of_week_value(self) -> str:
        return pulumi.get(self, "day_of_week_value")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetNdbClonesCloneTimeMachineScheduleYearlyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_month: int,
                 enabled: bool,
                 month: str,
                 month_value: str):
        pulumi.set(__self__, "day_of_month", day_of_month)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "month", month)
        pulumi.set(__self__, "month_value", month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> int:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def month(self) -> str:
        return pulumi.get(self, "month")

    @property
    @pulumi.getter(name="monthValue")
    def month_value(self) -> str:
        return pulumi.get(self, "month_value")


@pulumi.output_type
class GetNdbClonesCloneTimeMachineSlaResult(dict):
    def __init__(__self__, *,
                 continuous_retention: int,
                 current_active_frequency: str,
                 daily_retention: int,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 id: str,
                 monthly_retention: int,
                 name: str,
                 owner_id: str,
                 pitr_enabled: bool,
                 quarterly_retention: int,
                 reference_count: int,
                 system_sla: bool,
                 unique_name: str,
                 weekly_retention: int,
                 yearly_retention: int):
        """
        :param str date_created: date created for clone
        :param str date_modified: last modified date for clone
        :param str description: cloned description
        :param str id: cloned id
        :param str name: cloned name
        """
        pulumi.set(__self__, "continuous_retention", continuous_retention)
        pulumi.set(__self__, "current_active_frequency", current_active_frequency)
        pulumi.set(__self__, "daily_retention", daily_retention)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly_retention", monthly_retention)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "pitr_enabled", pitr_enabled)
        pulumi.set(__self__, "quarterly_retention", quarterly_retention)
        pulumi.set(__self__, "reference_count", reference_count)
        pulumi.set(__self__, "system_sla", system_sla)
        pulumi.set(__self__, "unique_name", unique_name)
        pulumi.set(__self__, "weekly_retention", weekly_retention)
        pulumi.set(__self__, "yearly_retention", yearly_retention)

    @property
    @pulumi.getter(name="continuousRetention")
    def continuous_retention(self) -> int:
        return pulumi.get(self, "continuous_retention")

    @property
    @pulumi.getter(name="currentActiveFrequency")
    def current_active_frequency(self) -> str:
        return pulumi.get(self, "current_active_frequency")

    @property
    @pulumi.getter(name="dailyRetention")
    def daily_retention(self) -> int:
        return pulumi.get(self, "daily_retention")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        date created for clone
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        last modified date for clone
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        cloned description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        cloned id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlyRetention")
    def monthly_retention(self) -> int:
        return pulumi.get(self, "monthly_retention")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        cloned name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="pitrEnabled")
    def pitr_enabled(self) -> bool:
        return pulumi.get(self, "pitr_enabled")

    @property
    @pulumi.getter(name="quarterlyRetention")
    def quarterly_retention(self) -> int:
        return pulumi.get(self, "quarterly_retention")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> int:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="systemSla")
    def system_sla(self) -> bool:
        return pulumi.get(self, "system_sla")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> str:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklyRetention")
    def weekly_retention(self) -> int:
        return pulumi.get(self, "weekly_retention")

    @property
    @pulumi.getter(name="yearlyRetention")
    def yearly_retention(self) -> int:
        return pulumi.get(self, "yearly_retention")


@pulumi.output_type
class GetNdbClonesCloneTimeMachineTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbClonesFilterResult(dict):
    def __init__(__self__, *,
                 any_status: Optional[str] = None,
                 detailed: Optional[str] = None,
                 load_dbserver_cluster: Optional[str] = None,
                 order_by_dbserver_cluster: Optional[str] = None,
                 order_by_dbserver_logical_cluster: Optional[str] = None,
                 timezone: Optional[str] = None):
        """
        :param str any_status: Get entity(s) if it satisfies query criteria irrespective of status (retrieve even deleted). Default is false
        :param str detailed: Load entities with complete details. Default is false
        :param str load_dbserver_cluster: Load cluster info. Default is false
        :param str order_by_dbserver_cluster: Sorted by dbserver cluster. Default is false
        :param str order_by_dbserver_logical_cluster: Sorted by dbserver logical cluster.  Default is false
        :param str timezone: Default is UTC
        """
        if any_status is not None:
            pulumi.set(__self__, "any_status", any_status)
        if detailed is not None:
            pulumi.set(__self__, "detailed", detailed)
        if load_dbserver_cluster is not None:
            pulumi.set(__self__, "load_dbserver_cluster", load_dbserver_cluster)
        if order_by_dbserver_cluster is not None:
            pulumi.set(__self__, "order_by_dbserver_cluster", order_by_dbserver_cluster)
        if order_by_dbserver_logical_cluster is not None:
            pulumi.set(__self__, "order_by_dbserver_logical_cluster", order_by_dbserver_logical_cluster)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="anyStatus")
    def any_status(self) -> Optional[str]:
        """
        Get entity(s) if it satisfies query criteria irrespective of status (retrieve even deleted). Default is false
        """
        return pulumi.get(self, "any_status")

    @property
    @pulumi.getter
    def detailed(self) -> Optional[str]:
        """
        Load entities with complete details. Default is false
        """
        return pulumi.get(self, "detailed")

    @property
    @pulumi.getter(name="loadDbserverCluster")
    def load_dbserver_cluster(self) -> Optional[str]:
        """
        Load cluster info. Default is false
        """
        return pulumi.get(self, "load_dbserver_cluster")

    @property
    @pulumi.getter(name="orderByDbserverCluster")
    def order_by_dbserver_cluster(self) -> Optional[str]:
        """
        Sorted by dbserver cluster. Default is false
        """
        return pulumi.get(self, "order_by_dbserver_cluster")

    @property
    @pulumi.getter(name="orderByDbserverLogicalCluster")
    def order_by_dbserver_logical_cluster(self) -> Optional[str]:
        """
        Sorted by dbserver logical cluster.  Default is false
        """
        return pulumi.get(self, "order_by_dbserver_logical_cluster")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        Default is UTC
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class GetNdbClusterEntityCountResult(dict):
    def __init__(__self__, *,
                 db_servers: int,
                 engine_counts: Sequence['outputs.GetNdbClusterEntityCountEngineCountResult']):
        pulumi.set(__self__, "db_servers", db_servers)
        pulumi.set(__self__, "engine_counts", engine_counts)

    @property
    @pulumi.getter(name="dbServers")
    def db_servers(self) -> int:
        return pulumi.get(self, "db_servers")

    @property
    @pulumi.getter(name="engineCounts")
    def engine_counts(self) -> Sequence['outputs.GetNdbClusterEntityCountEngineCountResult']:
        return pulumi.get(self, "engine_counts")


@pulumi.output_type
class GetNdbClusterEntityCountEngineCountResult(dict):
    def __init__(__self__, *,
                 mariadb_databases: Sequence['outputs.GetNdbClusterEntityCountEngineCountMariadbDatabaseResult'],
                 mongodb_databases: Sequence['outputs.GetNdbClusterEntityCountEngineCountMongodbDatabaseResult'],
                 mysql_databases: Sequence['outputs.GetNdbClusterEntityCountEngineCountMysqlDatabaseResult'],
                 oracle_databases: Sequence['outputs.GetNdbClusterEntityCountEngineCountOracleDatabaseResult'],
                 postgres_databases: Sequence['outputs.GetNdbClusterEntityCountEngineCountPostgresDatabaseResult'],
                 saphana_databases: Sequence['outputs.GetNdbClusterEntityCountEngineCountSaphanaDatabaseResult'],
                 sqlserver_databases: Sequence['outputs.GetNdbClusterEntityCountEngineCountSqlserverDatabaseResult']):
        pulumi.set(__self__, "mariadb_databases", mariadb_databases)
        pulumi.set(__self__, "mongodb_databases", mongodb_databases)
        pulumi.set(__self__, "mysql_databases", mysql_databases)
        pulumi.set(__self__, "oracle_databases", oracle_databases)
        pulumi.set(__self__, "postgres_databases", postgres_databases)
        pulumi.set(__self__, "saphana_databases", saphana_databases)
        pulumi.set(__self__, "sqlserver_databases", sqlserver_databases)

    @property
    @pulumi.getter(name="mariadbDatabases")
    def mariadb_databases(self) -> Sequence['outputs.GetNdbClusterEntityCountEngineCountMariadbDatabaseResult']:
        return pulumi.get(self, "mariadb_databases")

    @property
    @pulumi.getter(name="mongodbDatabases")
    def mongodb_databases(self) -> Sequence['outputs.GetNdbClusterEntityCountEngineCountMongodbDatabaseResult']:
        return pulumi.get(self, "mongodb_databases")

    @property
    @pulumi.getter(name="mysqlDatabases")
    def mysql_databases(self) -> Sequence['outputs.GetNdbClusterEntityCountEngineCountMysqlDatabaseResult']:
        return pulumi.get(self, "mysql_databases")

    @property
    @pulumi.getter(name="oracleDatabases")
    def oracle_databases(self) -> Sequence['outputs.GetNdbClusterEntityCountEngineCountOracleDatabaseResult']:
        return pulumi.get(self, "oracle_databases")

    @property
    @pulumi.getter(name="postgresDatabases")
    def postgres_databases(self) -> Sequence['outputs.GetNdbClusterEntityCountEngineCountPostgresDatabaseResult']:
        return pulumi.get(self, "postgres_databases")

    @property
    @pulumi.getter(name="saphanaDatabases")
    def saphana_databases(self) -> Sequence['outputs.GetNdbClusterEntityCountEngineCountSaphanaDatabaseResult']:
        return pulumi.get(self, "saphana_databases")

    @property
    @pulumi.getter(name="sqlserverDatabases")
    def sqlserver_databases(self) -> Sequence['outputs.GetNdbClusterEntityCountEngineCountSqlserverDatabaseResult']:
        return pulumi.get(self, "sqlserver_databases")


@pulumi.output_type
class GetNdbClusterEntityCountEngineCountMariadbDatabaseResult(dict):
    def __init__(__self__, *,
                 profiles: Sequence['outputs.GetNdbClusterEntityCountEngineCountMariadbDatabaseProfileResult'],
                 time_machines: int):
        pulumi.set(__self__, "profiles", profiles)
        pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetNdbClusterEntityCountEngineCountMariadbDatabaseProfileResult']:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> int:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class GetNdbClusterEntityCountEngineCountMariadbDatabaseProfileResult(dict):
    def __init__(__self__, *,
                 compute: int,
                 database_parameter: int,
                 network: int,
                 software: int,
                 storage: int,
                 windows_domain: int):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "database_parameter", database_parameter)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "software", software)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> int:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> int:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> int:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> int:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> int:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class GetNdbClusterEntityCountEngineCountMongodbDatabaseResult(dict):
    def __init__(__self__, *,
                 profiles: Sequence['outputs.GetNdbClusterEntityCountEngineCountMongodbDatabaseProfileResult'],
                 time_machines: int):
        pulumi.set(__self__, "profiles", profiles)
        pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetNdbClusterEntityCountEngineCountMongodbDatabaseProfileResult']:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> int:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class GetNdbClusterEntityCountEngineCountMongodbDatabaseProfileResult(dict):
    def __init__(__self__, *,
                 compute: int,
                 database_parameter: int,
                 network: int,
                 software: int,
                 storage: int,
                 windows_domain: int):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "database_parameter", database_parameter)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "software", software)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> int:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> int:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> int:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> int:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> int:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class GetNdbClusterEntityCountEngineCountMysqlDatabaseResult(dict):
    def __init__(__self__, *,
                 profiles: Sequence['outputs.GetNdbClusterEntityCountEngineCountMysqlDatabaseProfileResult'],
                 time_machines: int):
        pulumi.set(__self__, "profiles", profiles)
        pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetNdbClusterEntityCountEngineCountMysqlDatabaseProfileResult']:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> int:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class GetNdbClusterEntityCountEngineCountMysqlDatabaseProfileResult(dict):
    def __init__(__self__, *,
                 compute: int,
                 database_parameter: int,
                 network: int,
                 software: int,
                 storage: int,
                 windows_domain: int):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "database_parameter", database_parameter)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "software", software)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> int:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> int:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> int:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> int:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> int:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class GetNdbClusterEntityCountEngineCountOracleDatabaseResult(dict):
    def __init__(__self__, *,
                 profiles: Sequence['outputs.GetNdbClusterEntityCountEngineCountOracleDatabaseProfileResult'],
                 time_machines: int):
        pulumi.set(__self__, "profiles", profiles)
        pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetNdbClusterEntityCountEngineCountOracleDatabaseProfileResult']:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> int:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class GetNdbClusterEntityCountEngineCountOracleDatabaseProfileResult(dict):
    def __init__(__self__, *,
                 compute: int,
                 database_parameter: int,
                 network: int,
                 software: int,
                 storage: int,
                 windows_domain: int):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "database_parameter", database_parameter)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "software", software)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> int:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> int:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> int:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> int:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> int:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class GetNdbClusterEntityCountEngineCountPostgresDatabaseResult(dict):
    def __init__(__self__, *,
                 profiles: Sequence['outputs.GetNdbClusterEntityCountEngineCountPostgresDatabaseProfileResult'],
                 time_machines: int):
        pulumi.set(__self__, "profiles", profiles)
        pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetNdbClusterEntityCountEngineCountPostgresDatabaseProfileResult']:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> int:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class GetNdbClusterEntityCountEngineCountPostgresDatabaseProfileResult(dict):
    def __init__(__self__, *,
                 compute: int,
                 database_parameter: int,
                 network: int,
                 software: int,
                 storage: int,
                 windows_domain: int):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "database_parameter", database_parameter)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "software", software)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> int:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> int:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> int:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> int:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> int:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class GetNdbClusterEntityCountEngineCountSaphanaDatabaseResult(dict):
    def __init__(__self__, *,
                 profiles: Sequence['outputs.GetNdbClusterEntityCountEngineCountSaphanaDatabaseProfileResult'],
                 time_machines: int):
        pulumi.set(__self__, "profiles", profiles)
        pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetNdbClusterEntityCountEngineCountSaphanaDatabaseProfileResult']:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> int:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class GetNdbClusterEntityCountEngineCountSaphanaDatabaseProfileResult(dict):
    def __init__(__self__, *,
                 compute: int,
                 database_parameter: int,
                 network: int,
                 software: int,
                 storage: int,
                 windows_domain: int):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "database_parameter", database_parameter)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "software", software)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> int:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> int:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> int:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> int:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> int:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class GetNdbClusterEntityCountEngineCountSqlserverDatabaseResult(dict):
    def __init__(__self__, *,
                 profiles: Sequence['outputs.GetNdbClusterEntityCountEngineCountSqlserverDatabaseProfileResult'],
                 time_machines: int):
        pulumi.set(__self__, "profiles", profiles)
        pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetNdbClusterEntityCountEngineCountSqlserverDatabaseProfileResult']:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> int:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class GetNdbClusterEntityCountEngineCountSqlserverDatabaseProfileResult(dict):
    def __init__(__self__, *,
                 compute: int,
                 database_parameter: int,
                 network: int,
                 software: int,
                 storage: int,
                 windows_domain: int):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "database_parameter", database_parameter)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "software", software)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> int:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> int:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> int:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> int:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> int:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class GetNdbClusterPropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        """
        :param str description: - description
        :param str name: - name of cluster
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        - description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - name of cluster
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbClusterResourceConfigResult(dict):
    def __init__(__self__, *,
                 memory_threshold_percentage: float,
                 storage_threshold_percentage: float):
        pulumi.set(__self__, "memory_threshold_percentage", memory_threshold_percentage)
        pulumi.set(__self__, "storage_threshold_percentage", storage_threshold_percentage)

    @property
    @pulumi.getter(name="memoryThresholdPercentage")
    def memory_threshold_percentage(self) -> float:
        return pulumi.get(self, "memory_threshold_percentage")

    @property
    @pulumi.getter(name="storageThresholdPercentage")
    def storage_threshold_percentage(self) -> float:
        return pulumi.get(self, "storage_threshold_percentage")


@pulumi.output_type
class GetNdbClustersClusterResult(dict):
    def __init__(__self__, *,
                 cloud_info: str,
                 cloud_type: str,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 entity_counts: Sequence['outputs.GetNdbClustersClusterEntityCountResult'],
                 fqdns: str,
                 healthy: bool,
                 hypervisor_type: str,
                 hypervisor_version: str,
                 id: str,
                 ip_addresses: Sequence[str],
                 management_server_info: str,
                 name: str,
                 nx_cluster_uuid: str,
                 owner_id: str,
                 password: str,
                 properties: Sequence['outputs.GetNdbClustersClusterPropertyResult'],
                 reference_count: int,
                 resource_configs: Sequence['outputs.GetNdbClustersClusterResourceConfigResult'],
                 status: str,
                 unique_name: str,
                 username: str,
                 version: str):
        pulumi.set(__self__, "cloud_info", cloud_info)
        pulumi.set(__self__, "cloud_type", cloud_type)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "entity_counts", entity_counts)
        pulumi.set(__self__, "fqdns", fqdns)
        pulumi.set(__self__, "healthy", healthy)
        pulumi.set(__self__, "hypervisor_type", hypervisor_type)
        pulumi.set(__self__, "hypervisor_version", hypervisor_version)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "management_server_info", management_server_info)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nx_cluster_uuid", nx_cluster_uuid)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "reference_count", reference_count)
        pulumi.set(__self__, "resource_configs", resource_configs)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "unique_name", unique_name)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="cloudInfo")
    def cloud_info(self) -> str:
        return pulumi.get(self, "cloud_info")

    @property
    @pulumi.getter(name="cloudType")
    def cloud_type(self) -> str:
        return pulumi.get(self, "cloud_type")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="entityCounts")
    def entity_counts(self) -> Sequence['outputs.GetNdbClustersClusterEntityCountResult']:
        return pulumi.get(self, "entity_counts")

    @property
    @pulumi.getter
    def fqdns(self) -> str:
        return pulumi.get(self, "fqdns")

    @property
    @pulumi.getter
    def healthy(self) -> bool:
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter(name="hypervisorType")
    def hypervisor_type(self) -> str:
        return pulumi.get(self, "hypervisor_type")

    @property
    @pulumi.getter(name="hypervisorVersion")
    def hypervisor_version(self) -> str:
        return pulumi.get(self, "hypervisor_version")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="managementServerInfo")
    def management_server_info(self) -> str:
        return pulumi.get(self, "management_server_info")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nxClusterUuid")
    def nx_cluster_uuid(self) -> str:
        return pulumi.get(self, "nx_cluster_uuid")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbClustersClusterPropertyResult']:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> int:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="resourceConfigs")
    def resource_configs(self) -> Sequence['outputs.GetNdbClustersClusterResourceConfigResult']:
        return pulumi.get(self, "resource_configs")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> str:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetNdbClustersClusterEntityCountResult(dict):
    def __init__(__self__, *,
                 db_servers: int,
                 engine_counts: Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountResult']):
        pulumi.set(__self__, "db_servers", db_servers)
        pulumi.set(__self__, "engine_counts", engine_counts)

    @property
    @pulumi.getter(name="dbServers")
    def db_servers(self) -> int:
        return pulumi.get(self, "db_servers")

    @property
    @pulumi.getter(name="engineCounts")
    def engine_counts(self) -> Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountResult']:
        return pulumi.get(self, "engine_counts")


@pulumi.output_type
class GetNdbClustersClusterEntityCountEngineCountResult(dict):
    def __init__(__self__, *,
                 mariadb_databases: Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountMariadbDatabaseResult'],
                 mongodb_databases: Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountMongodbDatabaseResult'],
                 mysql_databases: Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountMysqlDatabaseResult'],
                 oracle_databases: Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountOracleDatabaseResult'],
                 postgres_databases: Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountPostgresDatabaseResult'],
                 saphana_databases: Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountSaphanaDatabaseResult'],
                 sqlserver_databases: Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountSqlserverDatabaseResult']):
        pulumi.set(__self__, "mariadb_databases", mariadb_databases)
        pulumi.set(__self__, "mongodb_databases", mongodb_databases)
        pulumi.set(__self__, "mysql_databases", mysql_databases)
        pulumi.set(__self__, "oracle_databases", oracle_databases)
        pulumi.set(__self__, "postgres_databases", postgres_databases)
        pulumi.set(__self__, "saphana_databases", saphana_databases)
        pulumi.set(__self__, "sqlserver_databases", sqlserver_databases)

    @property
    @pulumi.getter(name="mariadbDatabases")
    def mariadb_databases(self) -> Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountMariadbDatabaseResult']:
        return pulumi.get(self, "mariadb_databases")

    @property
    @pulumi.getter(name="mongodbDatabases")
    def mongodb_databases(self) -> Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountMongodbDatabaseResult']:
        return pulumi.get(self, "mongodb_databases")

    @property
    @pulumi.getter(name="mysqlDatabases")
    def mysql_databases(self) -> Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountMysqlDatabaseResult']:
        return pulumi.get(self, "mysql_databases")

    @property
    @pulumi.getter(name="oracleDatabases")
    def oracle_databases(self) -> Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountOracleDatabaseResult']:
        return pulumi.get(self, "oracle_databases")

    @property
    @pulumi.getter(name="postgresDatabases")
    def postgres_databases(self) -> Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountPostgresDatabaseResult']:
        return pulumi.get(self, "postgres_databases")

    @property
    @pulumi.getter(name="saphanaDatabases")
    def saphana_databases(self) -> Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountSaphanaDatabaseResult']:
        return pulumi.get(self, "saphana_databases")

    @property
    @pulumi.getter(name="sqlserverDatabases")
    def sqlserver_databases(self) -> Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountSqlserverDatabaseResult']:
        return pulumi.get(self, "sqlserver_databases")


@pulumi.output_type
class GetNdbClustersClusterEntityCountEngineCountMariadbDatabaseResult(dict):
    def __init__(__self__, *,
                 profiles: Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountMariadbDatabaseProfileResult'],
                 time_machines: int):
        pulumi.set(__self__, "profiles", profiles)
        pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountMariadbDatabaseProfileResult']:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> int:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class GetNdbClustersClusterEntityCountEngineCountMariadbDatabaseProfileResult(dict):
    def __init__(__self__, *,
                 compute: int,
                 database_parameter: int,
                 network: int,
                 software: int,
                 storage: int,
                 windows_domain: int):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "database_parameter", database_parameter)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "software", software)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> int:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> int:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> int:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> int:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> int:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class GetNdbClustersClusterEntityCountEngineCountMongodbDatabaseResult(dict):
    def __init__(__self__, *,
                 profiles: Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountMongodbDatabaseProfileResult'],
                 time_machines: int):
        pulumi.set(__self__, "profiles", profiles)
        pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountMongodbDatabaseProfileResult']:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> int:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class GetNdbClustersClusterEntityCountEngineCountMongodbDatabaseProfileResult(dict):
    def __init__(__self__, *,
                 compute: int,
                 database_parameter: int,
                 network: int,
                 software: int,
                 storage: int,
                 windows_domain: int):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "database_parameter", database_parameter)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "software", software)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> int:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> int:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> int:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> int:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> int:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class GetNdbClustersClusterEntityCountEngineCountMysqlDatabaseResult(dict):
    def __init__(__self__, *,
                 profiles: Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountMysqlDatabaseProfileResult'],
                 time_machines: int):
        pulumi.set(__self__, "profiles", profiles)
        pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountMysqlDatabaseProfileResult']:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> int:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class GetNdbClustersClusterEntityCountEngineCountMysqlDatabaseProfileResult(dict):
    def __init__(__self__, *,
                 compute: int,
                 database_parameter: int,
                 network: int,
                 software: int,
                 storage: int,
                 windows_domain: int):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "database_parameter", database_parameter)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "software", software)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> int:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> int:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> int:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> int:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> int:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class GetNdbClustersClusterEntityCountEngineCountOracleDatabaseResult(dict):
    def __init__(__self__, *,
                 profiles: Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountOracleDatabaseProfileResult'],
                 time_machines: int):
        pulumi.set(__self__, "profiles", profiles)
        pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountOracleDatabaseProfileResult']:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> int:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class GetNdbClustersClusterEntityCountEngineCountOracleDatabaseProfileResult(dict):
    def __init__(__self__, *,
                 compute: int,
                 database_parameter: int,
                 network: int,
                 software: int,
                 storage: int,
                 windows_domain: int):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "database_parameter", database_parameter)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "software", software)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> int:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> int:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> int:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> int:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> int:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class GetNdbClustersClusterEntityCountEngineCountPostgresDatabaseResult(dict):
    def __init__(__self__, *,
                 profiles: Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountPostgresDatabaseProfileResult'],
                 time_machines: int):
        pulumi.set(__self__, "profiles", profiles)
        pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountPostgresDatabaseProfileResult']:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> int:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class GetNdbClustersClusterEntityCountEngineCountPostgresDatabaseProfileResult(dict):
    def __init__(__self__, *,
                 compute: int,
                 database_parameter: int,
                 network: int,
                 software: int,
                 storage: int,
                 windows_domain: int):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "database_parameter", database_parameter)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "software", software)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> int:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> int:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> int:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> int:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> int:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class GetNdbClustersClusterEntityCountEngineCountSaphanaDatabaseResult(dict):
    def __init__(__self__, *,
                 profiles: Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountSaphanaDatabaseProfileResult'],
                 time_machines: int):
        pulumi.set(__self__, "profiles", profiles)
        pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountSaphanaDatabaseProfileResult']:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> int:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class GetNdbClustersClusterEntityCountEngineCountSaphanaDatabaseProfileResult(dict):
    def __init__(__self__, *,
                 compute: int,
                 database_parameter: int,
                 network: int,
                 software: int,
                 storage: int,
                 windows_domain: int):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "database_parameter", database_parameter)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "software", software)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> int:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> int:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> int:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> int:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> int:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class GetNdbClustersClusterEntityCountEngineCountSqlserverDatabaseResult(dict):
    def __init__(__self__, *,
                 profiles: Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountSqlserverDatabaseProfileResult'],
                 time_machines: int):
        pulumi.set(__self__, "profiles", profiles)
        pulumi.set(__self__, "time_machines", time_machines)

    @property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetNdbClustersClusterEntityCountEngineCountSqlserverDatabaseProfileResult']:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> int:
        return pulumi.get(self, "time_machines")


@pulumi.output_type
class GetNdbClustersClusterEntityCountEngineCountSqlserverDatabaseProfileResult(dict):
    def __init__(__self__, *,
                 compute: int,
                 database_parameter: int,
                 network: int,
                 software: int,
                 storage: int,
                 windows_domain: int):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "database_parameter", database_parameter)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "software", software)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter
    def compute(self) -> int:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="databaseParameter")
    def database_parameter(self) -> int:
        return pulumi.get(self, "database_parameter")

    @property
    @pulumi.getter
    def network(self) -> int:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def software(self) -> int:
        return pulumi.get(self, "software")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> int:
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class GetNdbClustersClusterPropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbClustersClusterResourceConfigResult(dict):
    def __init__(__self__, *,
                 memory_threshold_percentage: float,
                 storage_threshold_percentage: float):
        pulumi.set(__self__, "memory_threshold_percentage", memory_threshold_percentage)
        pulumi.set(__self__, "storage_threshold_percentage", storage_threshold_percentage)

    @property
    @pulumi.getter(name="memoryThresholdPercentage")
    def memory_threshold_percentage(self) -> float:
        return pulumi.get(self, "memory_threshold_percentage")

    @property
    @pulumi.getter(name="storageThresholdPercentage")
    def storage_threshold_percentage(self) -> float:
        return pulumi.get(self, "storage_threshold_percentage")


@pulumi.output_type
class GetNdbDatabaseDatabaseNodeResult(dict):
    def __init__(__self__, *,
                 access_level: Mapping[str, str],
                 database_id: str,
                 database_status: str,
                 date_created: str,
                 date_modified: str,
                 dbserver: Mapping[str, str],
                 dbserver_id: str,
                 description: str,
                 id: str,
                 infos: Sequence['outputs.GetNdbDatabaseDatabaseNodeInfoResult'],
                 name: str,
                 primary: bool,
                 properties: Sequence['outputs.GetNdbDatabaseDatabaseNodePropertyResult'],
                 protection_domain_id: str,
                 protection_domains: Sequence['outputs.GetNdbDatabaseDatabaseNodeProtectionDomainResult'],
                 software_installation_id: str,
                 status: str,
                 tags: Sequence['outputs.GetNdbDatabaseDatabaseNodeTagResult']):
        """
        :param str database_id: ID of database instance
        :param str date_created: - creation date
        :param str date_modified: - date modified
        :param str description: - description
        :param str id: - id of database instance
        :param Sequence['GetNdbDatabaseDatabaseNodeInfoArgs'] infos: - info regarding disks, vm, storage, etc.
        :param str name: - name of database instance
        :param Sequence['GetNdbDatabaseDatabaseNodePropertyArgs'] properties: - properties
        :param str status: - status of database instance
        :param Sequence['GetNdbDatabaseDatabaseNodeTagArgs'] tags: - tags attached
        """
        pulumi.set(__self__, "access_level", access_level)
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "database_status", database_status)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "dbserver", dbserver)
        pulumi.set(__self__, "dbserver_id", dbserver_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "protection_domain_id", protection_domain_id)
        pulumi.set(__self__, "protection_domains", protection_domains)
        pulumi.set(__self__, "software_installation_id", software_installation_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Mapping[str, str]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> str:
        """
        ID of database instance
        """
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> str:
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        - creation date
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        - date modified
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def dbserver(self) -> Mapping[str, str]:
        return pulumi.get(self, "dbserver")

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> str:
        return pulumi.get(self, "dbserver_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        - description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        - id of database instance
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetNdbDatabaseDatabaseNodeInfoResult']:
        """
        - info regarding disks, vm, storage, etc.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbDatabaseDatabaseNodePropertyResult']:
        """
        - properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="protectionDomainId")
    def protection_domain_id(self) -> str:
        return pulumi.get(self, "protection_domain_id")

    @property
    @pulumi.getter(name="protectionDomains")
    def protection_domains(self) -> Sequence['outputs.GetNdbDatabaseDatabaseNodeProtectionDomainResult']:
        return pulumi.get(self, "protection_domains")

    @property
    @pulumi.getter(name="softwareInstallationId")
    def software_installation_id(self) -> str:
        return pulumi.get(self, "software_installation_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        - status of database instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNdbDatabaseDatabaseNodeTagResult']:
        """
        - tags attached
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetNdbDatabaseDatabaseNodeInfoResult(dict):
    def __init__(__self__, *,
                 info: Mapping[str, str],
                 secure_info: Mapping[str, str]):
        """
        :param Mapping[str, str] info: - info regarding disks, vm, storage, etc.
        """
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Mapping[str, str]:
        """
        - info regarding disks, vm, storage, etc.
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class GetNdbDatabaseDatabaseNodePropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        """
        :param str description: - description
        :param str name: - name of database instance
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        - description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbDatabaseDatabaseNodeProtectionDomainResult(dict):
    def __init__(__self__, *,
                 assoc_entities: Sequence[str],
                 cloud_id: str,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 era_created: bool,
                 id: str,
                 name: str,
                 owner_id: str,
                 primary_host: str,
                 properties: Sequence['outputs.GetNdbDatabaseDatabaseNodeProtectionDomainPropertyResult'],
                 status: str,
                 type: str):
        """
        :param str date_created: - creation date
        :param str date_modified: - date modified
        :param str description: - description
        :param str id: - id of database instance
        :param str name: - name of database instance
        :param Sequence['GetNdbDatabaseDatabaseNodeProtectionDomainPropertyArgs'] properties: - properties
        :param str status: - status of database instance
        :param str type: - database engine type
        """
        pulumi.set(__self__, "assoc_entities", assoc_entities)
        pulumi.set(__self__, "cloud_id", cloud_id)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "era_created", era_created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "primary_host", primary_host)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assocEntities")
    def assoc_entities(self) -> Sequence[str]:
        return pulumi.get(self, "assoc_entities")

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> str:
        return pulumi.get(self, "cloud_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        - creation date
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        - date modified
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        - description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eraCreated")
    def era_created(self) -> bool:
        return pulumi.get(self, "era_created")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        - id of database instance
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="primaryHost")
    def primary_host(self) -> str:
        return pulumi.get(self, "primary_host")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbDatabaseDatabaseNodeProtectionDomainPropertyResult']:
        """
        - properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        - status of database instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        - database engine type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNdbDatabaseDatabaseNodeProtectionDomainPropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        """
        :param str description: - description
        :param str name: - name of database instance
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        - description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbDatabaseDatabaseNodeTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbDatabaseInfoResult(dict):
    def __init__(__self__, *,
                 bpg_configs: Sequence['outputs.GetNdbDatabaseInfoBpgConfigResult'],
                 secure_info: Mapping[str, str]):
        pulumi.set(__self__, "bpg_configs", bpg_configs)
        pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="bpgConfigs")
    def bpg_configs(self) -> Sequence['outputs.GetNdbDatabaseInfoBpgConfigResult']:
        return pulumi.get(self, "bpg_configs")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class GetNdbDatabaseInfoBpgConfigResult(dict):
    def __init__(__self__, *,
                 bpg_db_params: Sequence['outputs.GetNdbDatabaseInfoBpgConfigBpgDbParamResult'],
                 storages: Sequence['outputs.GetNdbDatabaseInfoBpgConfigStorageResult'],
                 vm_properties: Sequence['outputs.GetNdbDatabaseInfoBpgConfigVmPropertyResult']):
        pulumi.set(__self__, "bpg_db_params", bpg_db_params)
        pulumi.set(__self__, "storages", storages)
        pulumi.set(__self__, "vm_properties", vm_properties)

    @property
    @pulumi.getter(name="bpgDbParams")
    def bpg_db_params(self) -> Sequence['outputs.GetNdbDatabaseInfoBpgConfigBpgDbParamResult']:
        return pulumi.get(self, "bpg_db_params")

    @property
    @pulumi.getter
    def storages(self) -> Sequence['outputs.GetNdbDatabaseInfoBpgConfigStorageResult']:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="vmProperties")
    def vm_properties(self) -> Sequence['outputs.GetNdbDatabaseInfoBpgConfigVmPropertyResult']:
        return pulumi.get(self, "vm_properties")


@pulumi.output_type
class GetNdbDatabaseInfoBpgConfigBpgDbParamResult(dict):
    def __init__(__self__, *,
                 effective_cache_size: str,
                 maintenance_work_mem: str,
                 max_parallel_workers_per_gather: str,
                 max_worker_processes: str,
                 shared_buffers: str,
                 work_mem: str):
        pulumi.set(__self__, "effective_cache_size", effective_cache_size)
        pulumi.set(__self__, "maintenance_work_mem", maintenance_work_mem)
        pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        pulumi.set(__self__, "shared_buffers", shared_buffers)
        pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="effectiveCacheSize")
    def effective_cache_size(self) -> str:
        return pulumi.get(self, "effective_cache_size")

    @property
    @pulumi.getter(name="maintenanceWorkMem")
    def maintenance_work_mem(self) -> str:
        return pulumi.get(self, "maintenance_work_mem")

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> str:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> str:
        return pulumi.get(self, "max_worker_processes")

    @property
    @pulumi.getter(name="sharedBuffers")
    def shared_buffers(self) -> str:
        return pulumi.get(self, "shared_buffers")

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> str:
        return pulumi.get(self, "work_mem")


@pulumi.output_type
class GetNdbDatabaseInfoBpgConfigStorageResult(dict):
    def __init__(__self__, *,
                 archive_storages: Sequence['outputs.GetNdbDatabaseInfoBpgConfigStorageArchiveStorageResult'],
                 data_disks: Sequence['outputs.GetNdbDatabaseInfoBpgConfigStorageDataDiskResult'],
                 log_disks: Sequence['outputs.GetNdbDatabaseInfoBpgConfigStorageLogDiskResult']):
        pulumi.set(__self__, "archive_storages", archive_storages)
        pulumi.set(__self__, "data_disks", data_disks)
        pulumi.set(__self__, "log_disks", log_disks)

    @property
    @pulumi.getter(name="archiveStorages")
    def archive_storages(self) -> Sequence['outputs.GetNdbDatabaseInfoBpgConfigStorageArchiveStorageResult']:
        return pulumi.get(self, "archive_storages")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Sequence['outputs.GetNdbDatabaseInfoBpgConfigStorageDataDiskResult']:
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="logDisks")
    def log_disks(self) -> Sequence['outputs.GetNdbDatabaseInfoBpgConfigStorageLogDiskResult']:
        return pulumi.get(self, "log_disks")


@pulumi.output_type
class GetNdbDatabaseInfoBpgConfigStorageArchiveStorageResult(dict):
    def __init__(__self__, *,
                 size: float):
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> float:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetNdbDatabaseInfoBpgConfigStorageDataDiskResult(dict):
    def __init__(__self__, *,
                 count: float):
        pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> float:
        return pulumi.get(self, "count")


@pulumi.output_type
class GetNdbDatabaseInfoBpgConfigStorageLogDiskResult(dict):
    def __init__(__self__, *,
                 count: float,
                 size: float):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> float:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def size(self) -> float:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetNdbDatabaseInfoBpgConfigVmPropertyResult(dict):
    def __init__(__self__, *,
                 dirty_background_ratio: float,
                 dirty_expire_centisecs: float,
                 dirty_ratio: float,
                 dirty_writeback_centisecs: float,
                 nr_hugepages: float,
                 overcommit_memory: float,
                 swappiness: float):
        pulumi.set(__self__, "dirty_background_ratio", dirty_background_ratio)
        pulumi.set(__self__, "dirty_expire_centisecs", dirty_expire_centisecs)
        pulumi.set(__self__, "dirty_ratio", dirty_ratio)
        pulumi.set(__self__, "dirty_writeback_centisecs", dirty_writeback_centisecs)
        pulumi.set(__self__, "nr_hugepages", nr_hugepages)
        pulumi.set(__self__, "overcommit_memory", overcommit_memory)
        pulumi.set(__self__, "swappiness", swappiness)

    @property
    @pulumi.getter(name="dirtyBackgroundRatio")
    def dirty_background_ratio(self) -> float:
        return pulumi.get(self, "dirty_background_ratio")

    @property
    @pulumi.getter(name="dirtyExpireCentisecs")
    def dirty_expire_centisecs(self) -> float:
        return pulumi.get(self, "dirty_expire_centisecs")

    @property
    @pulumi.getter(name="dirtyRatio")
    def dirty_ratio(self) -> float:
        return pulumi.get(self, "dirty_ratio")

    @property
    @pulumi.getter(name="dirtyWritebackCentisecs")
    def dirty_writeback_centisecs(self) -> float:
        return pulumi.get(self, "dirty_writeback_centisecs")

    @property
    @pulumi.getter(name="nrHugepages")
    def nr_hugepages(self) -> float:
        return pulumi.get(self, "nr_hugepages")

    @property
    @pulumi.getter(name="overcommitMemory")
    def overcommit_memory(self) -> float:
        return pulumi.get(self, "overcommit_memory")

    @property
    @pulumi.getter
    def swappiness(self) -> float:
        return pulumi.get(self, "swappiness")


@pulumi.output_type
class GetNdbDatabaseLcmConfigResult(dict):
    def __init__(__self__, *,
                 expiry_details: Sequence['outputs.GetNdbDatabaseLcmConfigExpiryDetailResult'],
                 post_delete_commands: Sequence['outputs.GetNdbDatabaseLcmConfigPostDeleteCommandResult'],
                 pre_delete_commands: Sequence['outputs.GetNdbDatabaseLcmConfigPreDeleteCommandResult'],
                 refresh_details: Sequence['outputs.GetNdbDatabaseLcmConfigRefreshDetailResult']):
        pulumi.set(__self__, "expiry_details", expiry_details)
        pulumi.set(__self__, "post_delete_commands", post_delete_commands)
        pulumi.set(__self__, "pre_delete_commands", pre_delete_commands)
        pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Sequence['outputs.GetNdbDatabaseLcmConfigExpiryDetailResult']:
        return pulumi.get(self, "expiry_details")

    @property
    @pulumi.getter(name="postDeleteCommands")
    def post_delete_commands(self) -> Sequence['outputs.GetNdbDatabaseLcmConfigPostDeleteCommandResult']:
        return pulumi.get(self, "post_delete_commands")

    @property
    @pulumi.getter(name="preDeleteCommands")
    def pre_delete_commands(self) -> Sequence['outputs.GetNdbDatabaseLcmConfigPreDeleteCommandResult']:
        return pulumi.get(self, "pre_delete_commands")

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Sequence['outputs.GetNdbDatabaseLcmConfigRefreshDetailResult']:
        return pulumi.get(self, "refresh_details")


@pulumi.output_type
class GetNdbDatabaseLcmConfigExpiryDetailResult(dict):
    def __init__(__self__, *,
                 delete_database: bool,
                 delete_time_machine: bool,
                 delete_vm: bool,
                 effective_timestamp: str,
                 expire_in_days: int,
                 expiry_date_timezone: str,
                 expiry_timestamp: str,
                 remind_before_in_days: int,
                 user_created: bool):
        pulumi.set(__self__, "delete_database", delete_database)
        pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        pulumi.set(__self__, "delete_vm", delete_vm)
        pulumi.set(__self__, "effective_timestamp", effective_timestamp)
        pulumi.set(__self__, "expire_in_days", expire_in_days)
        pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        pulumi.set(__self__, "expiry_timestamp", expiry_timestamp)
        pulumi.set(__self__, "remind_before_in_days", remind_before_in_days)
        pulumi.set(__self__, "user_created", user_created)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> bool:
        return pulumi.get(self, "delete_database")

    @property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> bool:
        return pulumi.get(self, "delete_time_machine")

    @property
    @pulumi.getter(name="deleteVm")
    def delete_vm(self) -> bool:
        return pulumi.get(self, "delete_vm")

    @property
    @pulumi.getter(name="effectiveTimestamp")
    def effective_timestamp(self) -> str:
        return pulumi.get(self, "effective_timestamp")

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> int:
        return pulumi.get(self, "expire_in_days")

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> str:
        return pulumi.get(self, "expiry_date_timezone")

    @property
    @pulumi.getter(name="expiryTimestamp")
    def expiry_timestamp(self) -> str:
        return pulumi.get(self, "expiry_timestamp")

    @property
    @pulumi.getter(name="remindBeforeInDays")
    def remind_before_in_days(self) -> int:
        return pulumi.get(self, "remind_before_in_days")

    @property
    @pulumi.getter(name="userCreated")
    def user_created(self) -> bool:
        return pulumi.get(self, "user_created")


@pulumi.output_type
class GetNdbDatabaseLcmConfigPostDeleteCommandResult(dict):
    def __init__(__self__, *,
                 command: str):
        pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> str:
        return pulumi.get(self, "command")


@pulumi.output_type
class GetNdbDatabaseLcmConfigPreDeleteCommandResult(dict):
    def __init__(__self__, *,
                 command: str):
        pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> str:
        return pulumi.get(self, "command")


@pulumi.output_type
class GetNdbDatabaseLcmConfigRefreshDetailResult(dict):
    def __init__(__self__, *,
                 last_refresh_date: str,
                 next_refresh_date: str,
                 refresh_date_timezone: str,
                 refresh_in_days: int,
                 refresh_in_hours: int,
                 refresh_in_months: int,
                 refresh_time: str):
        pulumi.set(__self__, "last_refresh_date", last_refresh_date)
        pulumi.set(__self__, "next_refresh_date", next_refresh_date)
        pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        pulumi.set(__self__, "refresh_in_hours", refresh_in_hours)
        pulumi.set(__self__, "refresh_in_months", refresh_in_months)
        pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="lastRefreshDate")
    def last_refresh_date(self) -> str:
        return pulumi.get(self, "last_refresh_date")

    @property
    @pulumi.getter(name="nextRefreshDate")
    def next_refresh_date(self) -> str:
        return pulumi.get(self, "next_refresh_date")

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> str:
        return pulumi.get(self, "refresh_date_timezone")

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> int:
        return pulumi.get(self, "refresh_in_days")

    @property
    @pulumi.getter(name="refreshInHours")
    def refresh_in_hours(self) -> int:
        return pulumi.get(self, "refresh_in_hours")

    @property
    @pulumi.getter(name="refreshInMonths")
    def refresh_in_months(self) -> int:
        return pulumi.get(self, "refresh_in_months")

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> str:
        return pulumi.get(self, "refresh_time")


@pulumi.output_type
class GetNdbDatabaseLinkedDatabaseResult(dict):
    def __init__(__self__, *,
                 database_name: str,
                 database_status: str,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 id: str,
                 infos: Sequence['outputs.GetNdbDatabaseLinkedDatabaseInfoResult'],
                 metric: Mapping[str, str],
                 name: str,
                 parent_database_id: str,
                 parent_linked_database_id: str,
                 snapshot_id: str,
                 status: str,
                 timezone: str):
        """
        :param str database_name: - database instance name
        :param str date_created: - creation date
        :param str date_modified: - date modified
        :param str description: - description
        :param str id: - id of database instance
        :param Sequence['GetNdbDatabaseLinkedDatabaseInfoArgs'] infos: - info regarding disks, vm, storage, etc.
        :param Mapping[str, str] metric: - metrics
        :param str name: - name of database instance
        :param str parent_database_id: - parent database ID
        :param str status: - status of database instance
        """
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "database_status", database_status)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent_database_id", parent_database_id)
        pulumi.set(__self__, "parent_linked_database_id", parent_linked_database_id)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        - database instance name
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> str:
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        - creation date
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        - date modified
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        - description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        - id of database instance
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetNdbDatabaseLinkedDatabaseInfoResult']:
        """
        - info regarding disks, vm, storage, etc.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def metric(self) -> Mapping[str, str]:
        """
        - metrics
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> str:
        """
        - parent database ID
        """
        return pulumi.get(self, "parent_database_id")

    @property
    @pulumi.getter(name="parentLinkedDatabaseId")
    def parent_linked_database_id(self) -> str:
        return pulumi.get(self, "parent_linked_database_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        - status of database instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        return pulumi.get(self, "timezone")


@pulumi.output_type
class GetNdbDatabaseLinkedDatabaseInfoResult(dict):
    def __init__(__self__, *,
                 info: Mapping[str, str],
                 secure_info: Mapping[str, str]):
        """
        :param Mapping[str, str] info: - info regarding disks, vm, storage, etc.
        """
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Mapping[str, str]:
        """
        - info regarding disks, vm, storage, etc.
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class GetNdbDatabasePropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        """
        :param str description: - description
        :param str name: - name of database instance
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        - description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbDatabaseTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbDatabaseTimeMachineResult(dict):
    def __init__(__self__, *,
                 access_level: str,
                 clone: bool,
                 clones: str,
                 clustered: bool,
                 database: str,
                 database_id: str,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 ea_status: str,
                 id: str,
                 metric: str,
                 name: str,
                 properties: Sequence['outputs.GetNdbDatabaseTimeMachinePropertyResult'],
                 schedule_id: str,
                 schedules: Sequence['outputs.GetNdbDatabaseTimeMachineScheduleResult'],
                 scope: str,
                 sla_id: str,
                 sla_update_in_progress: bool,
                 sla_update_metadata: str,
                 slas: Sequence['outputs.GetNdbDatabaseTimeMachineSlaResult'],
                 source_nx_clusters: Sequence[str],
                 status: str,
                 tags: Sequence['outputs.GetNdbDatabaseTimeMachineTagResult'],
                 type: str):
        """
        :param bool clone: - if cloned
        :param bool clustered: - if clustered or not
        :param str database_id: ID of database instance
        :param str date_created: - creation date
        :param str date_modified: - date modified
        :param str description: - description
        :param str id: - id of database instance
        :param str metric: - metrics
        :param str name: - name of database instance
        :param Sequence['GetNdbDatabaseTimeMachinePropertyArgs'] properties: - properties
        :param str status: - status of database instance
        :param Sequence['GetNdbDatabaseTimeMachineTagArgs'] tags: - tags attached
        :param str type: - database engine type
        """
        pulumi.set(__self__, "access_level", access_level)
        pulumi.set(__self__, "clone", clone)
        pulumi.set(__self__, "clones", clones)
        pulumi.set(__self__, "clustered", clustered)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "ea_status", ea_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "schedule_id", schedule_id)
        pulumi.set(__self__, "schedules", schedules)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "sla_id", sla_id)
        pulumi.set(__self__, "sla_update_in_progress", sla_update_in_progress)
        pulumi.set(__self__, "sla_update_metadata", sla_update_metadata)
        pulumi.set(__self__, "slas", slas)
        pulumi.set(__self__, "source_nx_clusters", source_nx_clusters)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> str:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter
    def clone(self) -> bool:
        """
        - if cloned
        """
        return pulumi.get(self, "clone")

    @property
    @pulumi.getter
    def clones(self) -> str:
        return pulumi.get(self, "clones")

    @property
    @pulumi.getter
    def clustered(self) -> bool:
        """
        - if clustered or not
        """
        return pulumi.get(self, "clustered")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> str:
        """
        ID of database instance
        """
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        - creation date
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        - date modified
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        - description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eaStatus")
    def ea_status(self) -> str:
        return pulumi.get(self, "ea_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        - id of database instance
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metric(self) -> str:
        """
        - metrics
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbDatabaseTimeMachinePropertyResult']:
        """
        - properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> str:
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetNdbDatabaseTimeMachineScheduleResult']:
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter
    def scope(self) -> str:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> str:
        return pulumi.get(self, "sla_id")

    @property
    @pulumi.getter(name="slaUpdateInProgress")
    def sla_update_in_progress(self) -> bool:
        return pulumi.get(self, "sla_update_in_progress")

    @property
    @pulumi.getter(name="slaUpdateMetadata")
    def sla_update_metadata(self) -> str:
        return pulumi.get(self, "sla_update_metadata")

    @property
    @pulumi.getter
    def slas(self) -> Sequence['outputs.GetNdbDatabaseTimeMachineSlaResult']:
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter(name="sourceNxClusters")
    def source_nx_clusters(self) -> Sequence[str]:
        return pulumi.get(self, "source_nx_clusters")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        - status of database instance
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNdbDatabaseTimeMachineTagResult']:
        """
        - tags attached
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        - database engine type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNdbDatabaseTimeMachinePropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        """
        :param str description: - description
        :param str name: - name of database instance
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        - description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbDatabaseTimeMachineScheduleResult(dict):
    def __init__(__self__, *,
                 continuous_schedules: Sequence['outputs.GetNdbDatabaseTimeMachineScheduleContinuousScheduleResult'],
                 daily_schedules: Sequence['outputs.GetNdbDatabaseTimeMachineScheduleDailyScheduleResult'],
                 date_created: str,
                 date_modified: str,
                 description: str,
                 global_policy: bool,
                 id: str,
                 monthly_schedules: Sequence['outputs.GetNdbDatabaseTimeMachineScheduleMonthlyScheduleResult'],
                 name: str,
                 owner_id: str,
                 quartely_schedules: Sequence['outputs.GetNdbDatabaseTimeMachineScheduleQuartelyScheduleResult'],
                 reference_count: int,
                 snapshot_time_of_days: Sequence['outputs.GetNdbDatabaseTimeMachineScheduleSnapshotTimeOfDayResult'],
                 start_time: str,
                 system_policy: bool,
                 time_zone: str,
                 unique_name: str,
                 weekly_schedules: Sequence['outputs.GetNdbDatabaseTimeMachineScheduleWeeklyScheduleResult'],
                 yearly_schedules: Sequence['outputs.GetNdbDatabaseTimeMachineScheduleYearlyScheduleResult']):
        """
        :param str date_created: - creation date
        :param str date_modified: - date modified
        :param str description: - description
        :param str id: - id of database instance
        :param str name: - name of database instance
        :param str time_zone: - timezone
        """
        pulumi.set(__self__, "continuous_schedules", continuous_schedules)
        pulumi.set(__self__, "daily_schedules", daily_schedules)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "global_policy", global_policy)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly_schedules", monthly_schedules)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "quartely_schedules", quartely_schedules)
        pulumi.set(__self__, "reference_count", reference_count)
        pulumi.set(__self__, "snapshot_time_of_days", snapshot_time_of_days)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "system_policy", system_policy)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "unique_name", unique_name)
        pulumi.set(__self__, "weekly_schedules", weekly_schedules)
        pulumi.set(__self__, "yearly_schedules", yearly_schedules)

    @property
    @pulumi.getter(name="continuousSchedules")
    def continuous_schedules(self) -> Sequence['outputs.GetNdbDatabaseTimeMachineScheduleContinuousScheduleResult']:
        return pulumi.get(self, "continuous_schedules")

    @property
    @pulumi.getter(name="dailySchedules")
    def daily_schedules(self) -> Sequence['outputs.GetNdbDatabaseTimeMachineScheduleDailyScheduleResult']:
        return pulumi.get(self, "daily_schedules")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        - creation date
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        - date modified
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        - description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="globalPolicy")
    def global_policy(self) -> bool:
        return pulumi.get(self, "global_policy")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        - id of database instance
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlySchedules")
    def monthly_schedules(self) -> Sequence['outputs.GetNdbDatabaseTimeMachineScheduleMonthlyScheduleResult']:
        return pulumi.get(self, "monthly_schedules")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="quartelySchedules")
    def quartely_schedules(self) -> Sequence['outputs.GetNdbDatabaseTimeMachineScheduleQuartelyScheduleResult']:
        return pulumi.get(self, "quartely_schedules")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> int:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="snapshotTimeOfDays")
    def snapshot_time_of_days(self) -> Sequence['outputs.GetNdbDatabaseTimeMachineScheduleSnapshotTimeOfDayResult']:
        return pulumi.get(self, "snapshot_time_of_days")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="systemPolicy")
    def system_policy(self) -> bool:
        return pulumi.get(self, "system_policy")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        """
        - timezone
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> str:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklySchedules")
    def weekly_schedules(self) -> Sequence['outputs.GetNdbDatabaseTimeMachineScheduleWeeklyScheduleResult']:
        return pulumi.get(self, "weekly_schedules")

    @property
    @pulumi.getter(name="yearlySchedules")
    def yearly_schedules(self) -> Sequence['outputs.GetNdbDatabaseTimeMachineScheduleYearlyScheduleResult']:
        return pulumi.get(self, "yearly_schedules")


@pulumi.output_type
class GetNdbDatabaseTimeMachineScheduleContinuousScheduleResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 log_backup_interval: int,
                 snapshots_per_day: int):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "log_backup_interval", log_backup_interval)
        pulumi.set(__self__, "snapshots_per_day", snapshots_per_day)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logBackupInterval")
    def log_backup_interval(self) -> int:
        return pulumi.get(self, "log_backup_interval")

    @property
    @pulumi.getter(name="snapshotsPerDay")
    def snapshots_per_day(self) -> int:
        return pulumi.get(self, "snapshots_per_day")


@pulumi.output_type
class GetNdbDatabaseTimeMachineScheduleDailyScheduleResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetNdbDatabaseTimeMachineScheduleMonthlyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_month: int,
                 enabled: bool):
        pulumi.set(__self__, "day_of_month", day_of_month)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> int:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetNdbDatabaseTimeMachineScheduleQuartelyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_month: int,
                 enabled: bool,
                 start_month: str,
                 start_month_value: str):
        pulumi.set(__self__, "day_of_month", day_of_month)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "start_month", start_month)
        pulumi.set(__self__, "start_month_value", start_month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> int:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="startMonth")
    def start_month(self) -> str:
        return pulumi.get(self, "start_month")

    @property
    @pulumi.getter(name="startMonthValue")
    def start_month_value(self) -> str:
        return pulumi.get(self, "start_month_value")


@pulumi.output_type
class GetNdbDatabaseTimeMachineScheduleSnapshotTimeOfDayResult(dict):
    def __init__(__self__, *,
                 extra: bool,
                 hours: int,
                 minutes: int,
                 seconds: int):
        pulumi.set(__self__, "extra", extra)
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)
        pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def extra(self) -> bool:
        return pulumi.get(self, "extra")

    @property
    @pulumi.getter
    def hours(self) -> int:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def seconds(self) -> int:
        return pulumi.get(self, "seconds")


@pulumi.output_type
class GetNdbDatabaseTimeMachineScheduleWeeklyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_week: str,
                 day_of_week_value: str,
                 enabled: bool):
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "day_of_week_value", day_of_week_value)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="dayOfWeekValue")
    def day_of_week_value(self) -> str:
        return pulumi.get(self, "day_of_week_value")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetNdbDatabaseTimeMachineScheduleYearlyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_month: int,
                 enabled: bool,
                 month: str,
                 month_value: str):
        pulumi.set(__self__, "day_of_month", day_of_month)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "month", month)
        pulumi.set(__self__, "month_value", month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> int:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def month(self) -> str:
        return pulumi.get(self, "month")

    @property
    @pulumi.getter(name="monthValue")
    def month_value(self) -> str:
        return pulumi.get(self, "month_value")


@pulumi.output_type
class GetNdbDatabaseTimeMachineSlaResult(dict):
    def __init__(__self__, *,
                 continuous_retention: int,
                 current_active_frequency: str,
                 daily_retention: int,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 id: str,
                 monthly_retention: int,
                 name: str,
                 owner_id: str,
                 pitr_enabled: bool,
                 quarterly_retention: int,
                 reference_count: int,
                 system_sla: bool,
                 unique_name: str,
                 weekly_retention: int,
                 yearly_retention: int):
        """
        :param str date_created: - creation date
        :param str date_modified: - date modified
        :param str description: - description
        :param str id: - id of database instance
        :param str name: - name of database instance
        """
        pulumi.set(__self__, "continuous_retention", continuous_retention)
        pulumi.set(__self__, "current_active_frequency", current_active_frequency)
        pulumi.set(__self__, "daily_retention", daily_retention)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly_retention", monthly_retention)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "pitr_enabled", pitr_enabled)
        pulumi.set(__self__, "quarterly_retention", quarterly_retention)
        pulumi.set(__self__, "reference_count", reference_count)
        pulumi.set(__self__, "system_sla", system_sla)
        pulumi.set(__self__, "unique_name", unique_name)
        pulumi.set(__self__, "weekly_retention", weekly_retention)
        pulumi.set(__self__, "yearly_retention", yearly_retention)

    @property
    @pulumi.getter(name="continuousRetention")
    def continuous_retention(self) -> int:
        return pulumi.get(self, "continuous_retention")

    @property
    @pulumi.getter(name="currentActiveFrequency")
    def current_active_frequency(self) -> str:
        return pulumi.get(self, "current_active_frequency")

    @property
    @pulumi.getter(name="dailyRetention")
    def daily_retention(self) -> int:
        return pulumi.get(self, "daily_retention")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        - creation date
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        - date modified
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        - description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        - id of database instance
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlyRetention")
    def monthly_retention(self) -> int:
        return pulumi.get(self, "monthly_retention")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - name of database instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="pitrEnabled")
    def pitr_enabled(self) -> bool:
        return pulumi.get(self, "pitr_enabled")

    @property
    @pulumi.getter(name="quarterlyRetention")
    def quarterly_retention(self) -> int:
        return pulumi.get(self, "quarterly_retention")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> int:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="systemSla")
    def system_sla(self) -> bool:
        return pulumi.get(self, "system_sla")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> str:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklyRetention")
    def weekly_retention(self) -> int:
        return pulumi.get(self, "weekly_retention")

    @property
    @pulumi.getter(name="yearlyRetention")
    def yearly_retention(self) -> int:
        return pulumi.get(self, "yearly_retention")


@pulumi.output_type
class GetNdbDatabaseTimeMachineTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceResult(dict):
    def __init__(__self__, *,
                 clone: bool,
                 clustered: bool,
                 database_cluster_type: str,
                 database_name: str,
                 database_nodes: Sequence['outputs.GetNdbDatabasesDatabaseInstanceDatabaseNodeResult'],
                 databases: Mapping[str, str],
                 date_created: str,
                 date_modified: str,
                 dbserver_logical_cluster: Mapping[str, str],
                 dbserver_logical_cluster_id: str,
                 description: str,
                 id: str,
                 infos: Sequence['outputs.GetNdbDatabasesDatabaseInstanceInfoResult'],
                 lcm_configs: Sequence['outputs.GetNdbDatabasesDatabaseInstanceLcmConfigResult'],
                 linked_databases: Sequence['outputs.GetNdbDatabasesDatabaseInstanceLinkedDatabaseResult'],
                 metadatas: Sequence['outputs.GetNdbDatabasesDatabaseInstanceMetadataResult'],
                 metric: Mapping[str, str],
                 name: str,
                 parent_database_id: str,
                 properties: Sequence['outputs.GetNdbDatabasesDatabaseInstancePropertyResult'],
                 status: str,
                 tags: Sequence['outputs.GetNdbDatabasesDatabaseInstanceTagResult'],
                 time_machine_id: str,
                 time_machines: Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineResult'],
                 time_zone: str,
                 type: str):
        """
        :param Sequence['GetNdbDatabasesDatabaseInstancePropertyArgs'] properties: List of all the properties
        """
        pulumi.set(__self__, "clone", clone)
        pulumi.set(__self__, "clustered", clustered)
        pulumi.set(__self__, "database_cluster_type", database_cluster_type)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "database_nodes", database_nodes)
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "dbserver_logical_cluster", dbserver_logical_cluster)
        pulumi.set(__self__, "dbserver_logical_cluster_id", dbserver_logical_cluster_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "lcm_configs", lcm_configs)
        pulumi.set(__self__, "linked_databases", linked_databases)
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent_database_id", parent_database_id)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "time_machine_id", time_machine_id)
        pulumi.set(__self__, "time_machines", time_machines)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def clone(self) -> bool:
        return pulumi.get(self, "clone")

    @property
    @pulumi.getter
    def clustered(self) -> bool:
        return pulumi.get(self, "clustered")

    @property
    @pulumi.getter(name="databaseClusterType")
    def database_cluster_type(self) -> str:
        return pulumi.get(self, "database_cluster_type")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseNodes")
    def database_nodes(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceDatabaseNodeResult']:
        return pulumi.get(self, "database_nodes")

    @property
    @pulumi.getter
    def databases(self) -> Mapping[str, str]:
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter(name="dbserverLogicalCluster")
    def dbserver_logical_cluster(self) -> Mapping[str, str]:
        return pulumi.get(self, "dbserver_logical_cluster")

    @property
    @pulumi.getter(name="dbserverLogicalClusterId")
    def dbserver_logical_cluster_id(self) -> str:
        return pulumi.get(self, "dbserver_logical_cluster_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceInfoResult']:
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter(name="lcmConfigs")
    def lcm_configs(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceLcmConfigResult']:
        return pulumi.get(self, "lcm_configs")

    @property
    @pulumi.getter(name="linkedDatabases")
    def linked_databases(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceLinkedDatabaseResult']:
        return pulumi.get(self, "linked_databases")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceMetadataResult']:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def metric(self) -> Mapping[str, str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> str:
        return pulumi.get(self, "parent_database_id")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstancePropertyResult']:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeMachineId")
    def time_machine_id(self) -> str:
        return pulumi.get(self, "time_machine_id")

    @property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineResult']:
        return pulumi.get(self, "time_machines")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceDatabaseNodeResult(dict):
    def __init__(__self__, *,
                 access_level: Mapping[str, str],
                 database_id: str,
                 database_status: str,
                 date_created: str,
                 date_modified: str,
                 dbserver: Mapping[str, str],
                 dbserver_id: str,
                 description: str,
                 id: str,
                 infos: Sequence['outputs.GetNdbDatabasesDatabaseInstanceDatabaseNodeInfoResult'],
                 name: str,
                 primary: bool,
                 properties: Sequence['outputs.GetNdbDatabasesDatabaseInstanceDatabaseNodePropertyResult'],
                 protection_domain_id: str,
                 protection_domains: Sequence['outputs.GetNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomainResult'],
                 software_installation_id: str,
                 status: str,
                 tags: Sequence['outputs.GetNdbDatabasesDatabaseInstanceDatabaseNodeTagResult']):
        """
        :param Sequence['GetNdbDatabasesDatabaseInstanceDatabaseNodePropertyArgs'] properties: List of all the properties
        """
        pulumi.set(__self__, "access_level", access_level)
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "database_status", database_status)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "dbserver", dbserver)
        pulumi.set(__self__, "dbserver_id", dbserver_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "protection_domain_id", protection_domain_id)
        pulumi.set(__self__, "protection_domains", protection_domains)
        pulumi.set(__self__, "software_installation_id", software_installation_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Mapping[str, str]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> str:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> str:
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def dbserver(self) -> Mapping[str, str]:
        return pulumi.get(self, "dbserver")

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> str:
        return pulumi.get(self, "dbserver_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceDatabaseNodeInfoResult']:
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceDatabaseNodePropertyResult']:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="protectionDomainId")
    def protection_domain_id(self) -> str:
        return pulumi.get(self, "protection_domain_id")

    @property
    @pulumi.getter(name="protectionDomains")
    def protection_domains(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomainResult']:
        return pulumi.get(self, "protection_domains")

    @property
    @pulumi.getter(name="softwareInstallationId")
    def software_installation_id(self) -> str:
        return pulumi.get(self, "software_installation_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceDatabaseNodeTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceDatabaseNodeInfoResult(dict):
    def __init__(__self__, *,
                 info: Mapping[str, str],
                 secure_info: Mapping[str, str]):
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Mapping[str, str]:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceDatabaseNodePropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomainResult(dict):
    def __init__(__self__, *,
                 assoc_entities: Sequence[str],
                 cloud_id: str,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 era_created: bool,
                 id: str,
                 name: str,
                 owner_id: str,
                 primary_host: str,
                 properties: Sequence['outputs.GetNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomainPropertyResult'],
                 status: str,
                 type: str):
        """
        :param Sequence['GetNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomainPropertyArgs'] properties: List of all the properties
        """
        pulumi.set(__self__, "assoc_entities", assoc_entities)
        pulumi.set(__self__, "cloud_id", cloud_id)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "era_created", era_created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "primary_host", primary_host)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assocEntities")
    def assoc_entities(self) -> Sequence[str]:
        return pulumi.get(self, "assoc_entities")

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> str:
        return pulumi.get(self, "cloud_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eraCreated")
    def era_created(self) -> bool:
        return pulumi.get(self, "era_created")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="primaryHost")
    def primary_host(self) -> str:
        return pulumi.get(self, "primary_host")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomainPropertyResult']:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomainPropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceDatabaseNodeTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceInfoResult(dict):
    def __init__(__self__, *,
                 bpg_configs: Sequence['outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfigResult'],
                 secure_info: Mapping[str, str]):
        pulumi.set(__self__, "bpg_configs", bpg_configs)
        pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="bpgConfigs")
    def bpg_configs(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfigResult']:
        return pulumi.get(self, "bpg_configs")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceInfoBpgConfigResult(dict):
    def __init__(__self__, *,
                 bpg_db_params: Sequence['outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfigBpgDbParamResult'],
                 storages: Sequence['outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageResult'],
                 vm_properties: Sequence['outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfigVmPropertyResult']):
        pulumi.set(__self__, "bpg_db_params", bpg_db_params)
        pulumi.set(__self__, "storages", storages)
        pulumi.set(__self__, "vm_properties", vm_properties)

    @property
    @pulumi.getter(name="bpgDbParams")
    def bpg_db_params(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfigBpgDbParamResult']:
        return pulumi.get(self, "bpg_db_params")

    @property
    @pulumi.getter
    def storages(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageResult']:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="vmProperties")
    def vm_properties(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfigVmPropertyResult']:
        return pulumi.get(self, "vm_properties")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceInfoBpgConfigBpgDbParamResult(dict):
    def __init__(__self__, *,
                 effective_cache_size: str,
                 maintenance_work_mem: str,
                 max_parallel_workers_per_gather: str,
                 max_worker_processes: str,
                 shared_buffers: str,
                 work_mem: str):
        pulumi.set(__self__, "effective_cache_size", effective_cache_size)
        pulumi.set(__self__, "maintenance_work_mem", maintenance_work_mem)
        pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        pulumi.set(__self__, "shared_buffers", shared_buffers)
        pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="effectiveCacheSize")
    def effective_cache_size(self) -> str:
        return pulumi.get(self, "effective_cache_size")

    @property
    @pulumi.getter(name="maintenanceWorkMem")
    def maintenance_work_mem(self) -> str:
        return pulumi.get(self, "maintenance_work_mem")

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> str:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> str:
        return pulumi.get(self, "max_worker_processes")

    @property
    @pulumi.getter(name="sharedBuffers")
    def shared_buffers(self) -> str:
        return pulumi.get(self, "shared_buffers")

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> str:
        return pulumi.get(self, "work_mem")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageResult(dict):
    def __init__(__self__, *,
                 archive_storages: Sequence['outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageArchiveStorageResult'],
                 data_disks: Sequence['outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageDataDiskResult'],
                 log_disks: Sequence['outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageLogDiskResult']):
        pulumi.set(__self__, "archive_storages", archive_storages)
        pulumi.set(__self__, "data_disks", data_disks)
        pulumi.set(__self__, "log_disks", log_disks)

    @property
    @pulumi.getter(name="archiveStorages")
    def archive_storages(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageArchiveStorageResult']:
        return pulumi.get(self, "archive_storages")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageDataDiskResult']:
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="logDisks")
    def log_disks(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageLogDiskResult']:
        return pulumi.get(self, "log_disks")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageArchiveStorageResult(dict):
    def __init__(__self__, *,
                 size: float):
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> float:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageDataDiskResult(dict):
    def __init__(__self__, *,
                 count: float):
        pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> float:
        return pulumi.get(self, "count")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageLogDiskResult(dict):
    def __init__(__self__, *,
                 count: float,
                 size: float):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> float:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def size(self) -> float:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceInfoBpgConfigVmPropertyResult(dict):
    def __init__(__self__, *,
                 dirty_background_ratio: float,
                 dirty_expire_centisecs: float,
                 dirty_ratio: float,
                 dirty_writeback_centisecs: float,
                 nr_hugepages: float,
                 overcommit_memory: float,
                 swappiness: float):
        pulumi.set(__self__, "dirty_background_ratio", dirty_background_ratio)
        pulumi.set(__self__, "dirty_expire_centisecs", dirty_expire_centisecs)
        pulumi.set(__self__, "dirty_ratio", dirty_ratio)
        pulumi.set(__self__, "dirty_writeback_centisecs", dirty_writeback_centisecs)
        pulumi.set(__self__, "nr_hugepages", nr_hugepages)
        pulumi.set(__self__, "overcommit_memory", overcommit_memory)
        pulumi.set(__self__, "swappiness", swappiness)

    @property
    @pulumi.getter(name="dirtyBackgroundRatio")
    def dirty_background_ratio(self) -> float:
        return pulumi.get(self, "dirty_background_ratio")

    @property
    @pulumi.getter(name="dirtyExpireCentisecs")
    def dirty_expire_centisecs(self) -> float:
        return pulumi.get(self, "dirty_expire_centisecs")

    @property
    @pulumi.getter(name="dirtyRatio")
    def dirty_ratio(self) -> float:
        return pulumi.get(self, "dirty_ratio")

    @property
    @pulumi.getter(name="dirtyWritebackCentisecs")
    def dirty_writeback_centisecs(self) -> float:
        return pulumi.get(self, "dirty_writeback_centisecs")

    @property
    @pulumi.getter(name="nrHugepages")
    def nr_hugepages(self) -> float:
        return pulumi.get(self, "nr_hugepages")

    @property
    @pulumi.getter(name="overcommitMemory")
    def overcommit_memory(self) -> float:
        return pulumi.get(self, "overcommit_memory")

    @property
    @pulumi.getter
    def swappiness(self) -> float:
        return pulumi.get(self, "swappiness")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceLcmConfigResult(dict):
    def __init__(__self__, *,
                 expiry_details: Sequence['outputs.GetNdbDatabasesDatabaseInstanceLcmConfigExpiryDetailResult'],
                 post_delete_commands: Sequence['outputs.GetNdbDatabasesDatabaseInstanceLcmConfigPostDeleteCommandResult'],
                 pre_delete_commands: Sequence['outputs.GetNdbDatabasesDatabaseInstanceLcmConfigPreDeleteCommandResult'],
                 refresh_details: Sequence['outputs.GetNdbDatabasesDatabaseInstanceLcmConfigRefreshDetailResult']):
        pulumi.set(__self__, "expiry_details", expiry_details)
        pulumi.set(__self__, "post_delete_commands", post_delete_commands)
        pulumi.set(__self__, "pre_delete_commands", pre_delete_commands)
        pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceLcmConfigExpiryDetailResult']:
        return pulumi.get(self, "expiry_details")

    @property
    @pulumi.getter(name="postDeleteCommands")
    def post_delete_commands(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceLcmConfigPostDeleteCommandResult']:
        return pulumi.get(self, "post_delete_commands")

    @property
    @pulumi.getter(name="preDeleteCommands")
    def pre_delete_commands(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceLcmConfigPreDeleteCommandResult']:
        return pulumi.get(self, "pre_delete_commands")

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceLcmConfigRefreshDetailResult']:
        return pulumi.get(self, "refresh_details")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceLcmConfigExpiryDetailResult(dict):
    def __init__(__self__, *,
                 delete_database: bool,
                 delete_time_machine: bool,
                 delete_vm: bool,
                 effective_timestamp: str,
                 expire_in_days: int,
                 expiry_date_timezone: str,
                 expiry_timestamp: str,
                 remind_before_in_days: int,
                 user_created: bool):
        pulumi.set(__self__, "delete_database", delete_database)
        pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        pulumi.set(__self__, "delete_vm", delete_vm)
        pulumi.set(__self__, "effective_timestamp", effective_timestamp)
        pulumi.set(__self__, "expire_in_days", expire_in_days)
        pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        pulumi.set(__self__, "expiry_timestamp", expiry_timestamp)
        pulumi.set(__self__, "remind_before_in_days", remind_before_in_days)
        pulumi.set(__self__, "user_created", user_created)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> bool:
        return pulumi.get(self, "delete_database")

    @property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> bool:
        return pulumi.get(self, "delete_time_machine")

    @property
    @pulumi.getter(name="deleteVm")
    def delete_vm(self) -> bool:
        return pulumi.get(self, "delete_vm")

    @property
    @pulumi.getter(name="effectiveTimestamp")
    def effective_timestamp(self) -> str:
        return pulumi.get(self, "effective_timestamp")

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> int:
        return pulumi.get(self, "expire_in_days")

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> str:
        return pulumi.get(self, "expiry_date_timezone")

    @property
    @pulumi.getter(name="expiryTimestamp")
    def expiry_timestamp(self) -> str:
        return pulumi.get(self, "expiry_timestamp")

    @property
    @pulumi.getter(name="remindBeforeInDays")
    def remind_before_in_days(self) -> int:
        return pulumi.get(self, "remind_before_in_days")

    @property
    @pulumi.getter(name="userCreated")
    def user_created(self) -> bool:
        return pulumi.get(self, "user_created")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceLcmConfigPostDeleteCommandResult(dict):
    def __init__(__self__, *,
                 command: str):
        pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> str:
        return pulumi.get(self, "command")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceLcmConfigPreDeleteCommandResult(dict):
    def __init__(__self__, *,
                 command: str):
        pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> str:
        return pulumi.get(self, "command")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceLcmConfigRefreshDetailResult(dict):
    def __init__(__self__, *,
                 last_refresh_date: str,
                 next_refresh_date: str,
                 refresh_date_timezone: str,
                 refresh_in_days: int,
                 refresh_in_hours: int,
                 refresh_in_months: int,
                 refresh_time: str):
        pulumi.set(__self__, "last_refresh_date", last_refresh_date)
        pulumi.set(__self__, "next_refresh_date", next_refresh_date)
        pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        pulumi.set(__self__, "refresh_in_hours", refresh_in_hours)
        pulumi.set(__self__, "refresh_in_months", refresh_in_months)
        pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="lastRefreshDate")
    def last_refresh_date(self) -> str:
        return pulumi.get(self, "last_refresh_date")

    @property
    @pulumi.getter(name="nextRefreshDate")
    def next_refresh_date(self) -> str:
        return pulumi.get(self, "next_refresh_date")

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> str:
        return pulumi.get(self, "refresh_date_timezone")

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> int:
        return pulumi.get(self, "refresh_in_days")

    @property
    @pulumi.getter(name="refreshInHours")
    def refresh_in_hours(self) -> int:
        return pulumi.get(self, "refresh_in_hours")

    @property
    @pulumi.getter(name="refreshInMonths")
    def refresh_in_months(self) -> int:
        return pulumi.get(self, "refresh_in_months")

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> str:
        return pulumi.get(self, "refresh_time")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceLinkedDatabaseResult(dict):
    def __init__(__self__, *,
                 database_name: str,
                 database_status: str,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 id: str,
                 infos: Sequence['outputs.GetNdbDatabasesDatabaseInstanceLinkedDatabaseInfoResult'],
                 metric: Mapping[str, str],
                 name: str,
                 parent_database_id: str,
                 parent_linked_database_id: str,
                 snapshot_id: str,
                 status: str,
                 timezone: str):
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "database_status", database_status)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent_database_id", parent_database_id)
        pulumi.set(__self__, "parent_linked_database_id", parent_linked_database_id)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> str:
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceLinkedDatabaseInfoResult']:
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def metric(self) -> Mapping[str, str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> str:
        return pulumi.get(self, "parent_database_id")

    @property
    @pulumi.getter(name="parentLinkedDatabaseId")
    def parent_linked_database_id(self) -> str:
        return pulumi.get(self, "parent_linked_database_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        return pulumi.get(self, "timezone")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceLinkedDatabaseInfoResult(dict):
    def __init__(__self__, *,
                 info: Mapping[str, str],
                 secure_info: Mapping[str, str]):
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter
    def info(self) -> Mapping[str, str]:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceMetadataResult(dict):
    def __init__(__self__, *,
                 base_size_computed: bool,
                 capability_reset_time: str,
                 created_dbservers: Sequence[str],
                 deregister_infos: Sequence['outputs.GetNdbDatabasesDatabaseInstanceMetadataDeregisterInfoResult'],
                 deregistered_with_delete_time_machine: bool,
                 info: Mapping[str, str],
                 last_log_catchup_for_restore_operation_id: str,
                 last_refresh_timestamp: str,
                 last_requested_refresh_timestamp: str,
                 log_catchup_for_restore_dispatched: bool,
                 original_database_name: str,
                 pitr_based: bool,
                 provision_operation_id: str,
                 refresh_blocker_info: str,
                 registered_dbservers: Sequence[str],
                 secure_info: Mapping[str, str],
                 source_snapshot_id: str,
                 state_before_refresh: str,
                 state_before_restore: str,
                 state_before_scaling: str,
                 tm_activate_operation_id: str):
        pulumi.set(__self__, "base_size_computed", base_size_computed)
        pulumi.set(__self__, "capability_reset_time", capability_reset_time)
        pulumi.set(__self__, "created_dbservers", created_dbservers)
        pulumi.set(__self__, "deregister_infos", deregister_infos)
        pulumi.set(__self__, "deregistered_with_delete_time_machine", deregistered_with_delete_time_machine)
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "last_log_catchup_for_restore_operation_id", last_log_catchup_for_restore_operation_id)
        pulumi.set(__self__, "last_refresh_timestamp", last_refresh_timestamp)
        pulumi.set(__self__, "last_requested_refresh_timestamp", last_requested_refresh_timestamp)
        pulumi.set(__self__, "log_catchup_for_restore_dispatched", log_catchup_for_restore_dispatched)
        pulumi.set(__self__, "original_database_name", original_database_name)
        pulumi.set(__self__, "pitr_based", pitr_based)
        pulumi.set(__self__, "provision_operation_id", provision_operation_id)
        pulumi.set(__self__, "refresh_blocker_info", refresh_blocker_info)
        pulumi.set(__self__, "registered_dbservers", registered_dbservers)
        pulumi.set(__self__, "secure_info", secure_info)
        pulumi.set(__self__, "source_snapshot_id", source_snapshot_id)
        pulumi.set(__self__, "state_before_refresh", state_before_refresh)
        pulumi.set(__self__, "state_before_restore", state_before_restore)
        pulumi.set(__self__, "state_before_scaling", state_before_scaling)
        pulumi.set(__self__, "tm_activate_operation_id", tm_activate_operation_id)

    @property
    @pulumi.getter(name="baseSizeComputed")
    def base_size_computed(self) -> bool:
        return pulumi.get(self, "base_size_computed")

    @property
    @pulumi.getter(name="capabilityResetTime")
    def capability_reset_time(self) -> str:
        return pulumi.get(self, "capability_reset_time")

    @property
    @pulumi.getter(name="createdDbservers")
    def created_dbservers(self) -> Sequence[str]:
        return pulumi.get(self, "created_dbservers")

    @property
    @pulumi.getter(name="deregisterInfos")
    def deregister_infos(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceMetadataDeregisterInfoResult']:
        return pulumi.get(self, "deregister_infos")

    @property
    @pulumi.getter(name="deregisteredWithDeleteTimeMachine")
    def deregistered_with_delete_time_machine(self) -> bool:
        return pulumi.get(self, "deregistered_with_delete_time_machine")

    @property
    @pulumi.getter
    def info(self) -> Mapping[str, str]:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="lastLogCatchupForRestoreOperationId")
    def last_log_catchup_for_restore_operation_id(self) -> str:
        return pulumi.get(self, "last_log_catchup_for_restore_operation_id")

    @property
    @pulumi.getter(name="lastRefreshTimestamp")
    def last_refresh_timestamp(self) -> str:
        return pulumi.get(self, "last_refresh_timestamp")

    @property
    @pulumi.getter(name="lastRequestedRefreshTimestamp")
    def last_requested_refresh_timestamp(self) -> str:
        return pulumi.get(self, "last_requested_refresh_timestamp")

    @property
    @pulumi.getter(name="logCatchupForRestoreDispatched")
    def log_catchup_for_restore_dispatched(self) -> bool:
        return pulumi.get(self, "log_catchup_for_restore_dispatched")

    @property
    @pulumi.getter(name="originalDatabaseName")
    def original_database_name(self) -> str:
        return pulumi.get(self, "original_database_name")

    @property
    @pulumi.getter(name="pitrBased")
    def pitr_based(self) -> bool:
        return pulumi.get(self, "pitr_based")

    @property
    @pulumi.getter(name="provisionOperationId")
    def provision_operation_id(self) -> str:
        return pulumi.get(self, "provision_operation_id")

    @property
    @pulumi.getter(name="refreshBlockerInfo")
    def refresh_blocker_info(self) -> str:
        return pulumi.get(self, "refresh_blocker_info")

    @property
    @pulumi.getter(name="registeredDbservers")
    def registered_dbservers(self) -> Sequence[str]:
        return pulumi.get(self, "registered_dbservers")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")

    @property
    @pulumi.getter(name="sourceSnapshotId")
    def source_snapshot_id(self) -> str:
        return pulumi.get(self, "source_snapshot_id")

    @property
    @pulumi.getter(name="stateBeforeRefresh")
    def state_before_refresh(self) -> str:
        return pulumi.get(self, "state_before_refresh")

    @property
    @pulumi.getter(name="stateBeforeRestore")
    def state_before_restore(self) -> str:
        return pulumi.get(self, "state_before_restore")

    @property
    @pulumi.getter(name="stateBeforeScaling")
    def state_before_scaling(self) -> str:
        return pulumi.get(self, "state_before_scaling")

    @property
    @pulumi.getter(name="tmActivateOperationId")
    def tm_activate_operation_id(self) -> str:
        return pulumi.get(self, "tm_activate_operation_id")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceMetadataDeregisterInfoResult(dict):
    def __init__(__self__, *,
                 message: str,
                 operations: Sequence[str]):
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "operations", operations)

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def operations(self) -> Sequence[str]:
        return pulumi.get(self, "operations")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstancePropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceTimeMachineResult(dict):
    def __init__(__self__, *,
                 access_level: str,
                 clone: bool,
                 clones: str,
                 clustered: bool,
                 database: str,
                 database_id: str,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 ea_status: str,
                 id: str,
                 metric: str,
                 name: str,
                 properties: Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachinePropertyResult'],
                 schedule_id: str,
                 schedules: Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleResult'],
                 scope: str,
                 sla_id: str,
                 sla_update_in_progress: bool,
                 sla_update_metadata: str,
                 slas: Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineSlaResult'],
                 source_nx_clusters: Sequence[str],
                 status: str,
                 tags: Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineTagResult'],
                 type: str):
        """
        :param Sequence['GetNdbDatabasesDatabaseInstanceTimeMachinePropertyArgs'] properties: List of all the properties
        """
        pulumi.set(__self__, "access_level", access_level)
        pulumi.set(__self__, "clone", clone)
        pulumi.set(__self__, "clones", clones)
        pulumi.set(__self__, "clustered", clustered)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "ea_status", ea_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "schedule_id", schedule_id)
        pulumi.set(__self__, "schedules", schedules)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "sla_id", sla_id)
        pulumi.set(__self__, "sla_update_in_progress", sla_update_in_progress)
        pulumi.set(__self__, "sla_update_metadata", sla_update_metadata)
        pulumi.set(__self__, "slas", slas)
        pulumi.set(__self__, "source_nx_clusters", source_nx_clusters)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> str:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter
    def clone(self) -> bool:
        return pulumi.get(self, "clone")

    @property
    @pulumi.getter
    def clones(self) -> str:
        return pulumi.get(self, "clones")

    @property
    @pulumi.getter
    def clustered(self) -> bool:
        return pulumi.get(self, "clustered")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> str:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eaStatus")
    def ea_status(self) -> str:
        return pulumi.get(self, "ea_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachinePropertyResult']:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> str:
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleResult']:
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter
    def scope(self) -> str:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> str:
        return pulumi.get(self, "sla_id")

    @property
    @pulumi.getter(name="slaUpdateInProgress")
    def sla_update_in_progress(self) -> bool:
        return pulumi.get(self, "sla_update_in_progress")

    @property
    @pulumi.getter(name="slaUpdateMetadata")
    def sla_update_metadata(self) -> str:
        return pulumi.get(self, "sla_update_metadata")

    @property
    @pulumi.getter
    def slas(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineSlaResult']:
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter(name="sourceNxClusters")
    def source_nx_clusters(self) -> Sequence[str]:
        return pulumi.get(self, "source_nx_clusters")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceTimeMachinePropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceTimeMachineScheduleResult(dict):
    def __init__(__self__, *,
                 continuous_schedules: Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleContinuousScheduleResult'],
                 daily_schedules: Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleDailyScheduleResult'],
                 date_created: str,
                 date_modified: str,
                 description: str,
                 global_policy: bool,
                 id: str,
                 monthly_schedules: Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleMonthlyScheduleResult'],
                 name: str,
                 owner_id: str,
                 quartely_schedules: Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleQuartelyScheduleResult'],
                 reference_count: int,
                 snapshot_time_of_days: Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleSnapshotTimeOfDayResult'],
                 start_time: str,
                 system_policy: bool,
                 time_zone: str,
                 unique_name: str,
                 weekly_schedules: Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleWeeklyScheduleResult'],
                 yearly_schedules: Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleYearlyScheduleResult']):
        pulumi.set(__self__, "continuous_schedules", continuous_schedules)
        pulumi.set(__self__, "daily_schedules", daily_schedules)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "global_policy", global_policy)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly_schedules", monthly_schedules)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "quartely_schedules", quartely_schedules)
        pulumi.set(__self__, "reference_count", reference_count)
        pulumi.set(__self__, "snapshot_time_of_days", snapshot_time_of_days)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "system_policy", system_policy)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "unique_name", unique_name)
        pulumi.set(__self__, "weekly_schedules", weekly_schedules)
        pulumi.set(__self__, "yearly_schedules", yearly_schedules)

    @property
    @pulumi.getter(name="continuousSchedules")
    def continuous_schedules(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleContinuousScheduleResult']:
        return pulumi.get(self, "continuous_schedules")

    @property
    @pulumi.getter(name="dailySchedules")
    def daily_schedules(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleDailyScheduleResult']:
        return pulumi.get(self, "daily_schedules")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="globalPolicy")
    def global_policy(self) -> bool:
        return pulumi.get(self, "global_policy")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlySchedules")
    def monthly_schedules(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleMonthlyScheduleResult']:
        return pulumi.get(self, "monthly_schedules")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="quartelySchedules")
    def quartely_schedules(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleQuartelyScheduleResult']:
        return pulumi.get(self, "quartely_schedules")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> int:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="snapshotTimeOfDays")
    def snapshot_time_of_days(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleSnapshotTimeOfDayResult']:
        return pulumi.get(self, "snapshot_time_of_days")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="systemPolicy")
    def system_policy(self) -> bool:
        return pulumi.get(self, "system_policy")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> str:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklySchedules")
    def weekly_schedules(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleWeeklyScheduleResult']:
        return pulumi.get(self, "weekly_schedules")

    @property
    @pulumi.getter(name="yearlySchedules")
    def yearly_schedules(self) -> Sequence['outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleYearlyScheduleResult']:
        return pulumi.get(self, "yearly_schedules")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceTimeMachineScheduleContinuousScheduleResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 log_backup_interval: int,
                 snapshots_per_day: int):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "log_backup_interval", log_backup_interval)
        pulumi.set(__self__, "snapshots_per_day", snapshots_per_day)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logBackupInterval")
    def log_backup_interval(self) -> int:
        return pulumi.get(self, "log_backup_interval")

    @property
    @pulumi.getter(name="snapshotsPerDay")
    def snapshots_per_day(self) -> int:
        return pulumi.get(self, "snapshots_per_day")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceTimeMachineScheduleDailyScheduleResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceTimeMachineScheduleMonthlyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_month: int,
                 enabled: bool):
        pulumi.set(__self__, "day_of_month", day_of_month)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> int:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceTimeMachineScheduleQuartelyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_month: int,
                 enabled: bool,
                 start_month: str,
                 start_month_value: str):
        pulumi.set(__self__, "day_of_month", day_of_month)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "start_month", start_month)
        pulumi.set(__self__, "start_month_value", start_month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> int:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="startMonth")
    def start_month(self) -> str:
        return pulumi.get(self, "start_month")

    @property
    @pulumi.getter(name="startMonthValue")
    def start_month_value(self) -> str:
        return pulumi.get(self, "start_month_value")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceTimeMachineScheduleSnapshotTimeOfDayResult(dict):
    def __init__(__self__, *,
                 extra: bool,
                 hours: int,
                 minutes: int,
                 seconds: int):
        pulumi.set(__self__, "extra", extra)
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)
        pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def extra(self) -> bool:
        return pulumi.get(self, "extra")

    @property
    @pulumi.getter
    def hours(self) -> int:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def seconds(self) -> int:
        return pulumi.get(self, "seconds")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceTimeMachineScheduleWeeklyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_week: str,
                 day_of_week_value: str,
                 enabled: bool):
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "day_of_week_value", day_of_week_value)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="dayOfWeekValue")
    def day_of_week_value(self) -> str:
        return pulumi.get(self, "day_of_week_value")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceTimeMachineScheduleYearlyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_month: int,
                 enabled: bool,
                 month: str,
                 month_value: str):
        pulumi.set(__self__, "day_of_month", day_of_month)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "month", month)
        pulumi.set(__self__, "month_value", month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> int:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def month(self) -> str:
        return pulumi.get(self, "month")

    @property
    @pulumi.getter(name="monthValue")
    def month_value(self) -> str:
        return pulumi.get(self, "month_value")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceTimeMachineSlaResult(dict):
    def __init__(__self__, *,
                 continuous_retention: int,
                 current_active_frequency: str,
                 daily_retention: int,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 id: str,
                 monthly_retention: int,
                 name: str,
                 owner_id: str,
                 pitr_enabled: bool,
                 quarterly_retention: int,
                 reference_count: int,
                 system_sla: bool,
                 unique_name: str,
                 weekly_retention: int,
                 yearly_retention: int):
        pulumi.set(__self__, "continuous_retention", continuous_retention)
        pulumi.set(__self__, "current_active_frequency", current_active_frequency)
        pulumi.set(__self__, "daily_retention", daily_retention)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly_retention", monthly_retention)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "pitr_enabled", pitr_enabled)
        pulumi.set(__self__, "quarterly_retention", quarterly_retention)
        pulumi.set(__self__, "reference_count", reference_count)
        pulumi.set(__self__, "system_sla", system_sla)
        pulumi.set(__self__, "unique_name", unique_name)
        pulumi.set(__self__, "weekly_retention", weekly_retention)
        pulumi.set(__self__, "yearly_retention", yearly_retention)

    @property
    @pulumi.getter(name="continuousRetention")
    def continuous_retention(self) -> int:
        return pulumi.get(self, "continuous_retention")

    @property
    @pulumi.getter(name="currentActiveFrequency")
    def current_active_frequency(self) -> str:
        return pulumi.get(self, "current_active_frequency")

    @property
    @pulumi.getter(name="dailyRetention")
    def daily_retention(self) -> int:
        return pulumi.get(self, "daily_retention")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlyRetention")
    def monthly_retention(self) -> int:
        return pulumi.get(self, "monthly_retention")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="pitrEnabled")
    def pitr_enabled(self) -> bool:
        return pulumi.get(self, "pitr_enabled")

    @property
    @pulumi.getter(name="quarterlyRetention")
    def quarterly_retention(self) -> int:
        return pulumi.get(self, "quarterly_retention")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> int:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="systemSla")
    def system_sla(self) -> bool:
        return pulumi.get(self, "system_sla")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> str:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklyRetention")
    def weekly_retention(self) -> int:
        return pulumi.get(self, "weekly_retention")

    @property
    @pulumi.getter(name="yearlyRetention")
    def yearly_retention(self) -> int:
        return pulumi.get(self, "yearly_retention")


@pulumi.output_type
class GetNdbDatabasesDatabaseInstanceTimeMachineTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbDbserverPropertyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: name of database server vm
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of database server vm
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbDbserverTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbDbserverVmInfoResult(dict):
    def __init__(__self__, *,
                 deregister_infos: Sequence['outputs.GetNdbDbserverVmInfoDeregisterInfoResult'],
                 distribution: Mapping[str, str],
                 infos: Sequence['outputs.GetNdbDbserverVmInfoInfoResult'],
                 network_infos: Sequence['outputs.GetNdbDbserverVmInfoNetworkInfoResult'],
                 os_type: str,
                 os_version: str,
                 secure_info: Mapping[str, str]):
        pulumi.set(__self__, "deregister_infos", deregister_infos)
        pulumi.set(__self__, "distribution", distribution)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "network_infos", network_infos)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "os_version", os_version)
        pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="deregisterInfos")
    def deregister_infos(self) -> Sequence['outputs.GetNdbDbserverVmInfoDeregisterInfoResult']:
        return pulumi.get(self, "deregister_infos")

    @property
    @pulumi.getter
    def distribution(self) -> Mapping[str, str]:
        return pulumi.get(self, "distribution")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetNdbDbserverVmInfoInfoResult']:
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter(name="networkInfos")
    def network_infos(self) -> Sequence['outputs.GetNdbDbserverVmInfoNetworkInfoResult']:
        return pulumi.get(self, "network_infos")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> str:
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> str:
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class GetNdbDbserverVmInfoDeregisterInfoResult(dict):
    def __init__(__self__, *,
                 message: str,
                 operations: Sequence[str]):
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "operations", operations)

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def operations(self) -> Sequence[str]:
        return pulumi.get(self, "operations")


@pulumi.output_type
class GetNdbDbserverVmInfoInfoResult(dict):
    def __init__(__self__, *,
                 bpg_configs: Sequence['outputs.GetNdbDbserverVmInfoInfoBpgConfigResult'],
                 secure_info: Mapping[str, str]):
        pulumi.set(__self__, "bpg_configs", bpg_configs)
        pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="bpgConfigs")
    def bpg_configs(self) -> Sequence['outputs.GetNdbDbserverVmInfoInfoBpgConfigResult']:
        return pulumi.get(self, "bpg_configs")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class GetNdbDbserverVmInfoInfoBpgConfigResult(dict):
    def __init__(__self__, *,
                 bpg_db_params: Sequence['outputs.GetNdbDbserverVmInfoInfoBpgConfigBpgDbParamResult'],
                 storages: Sequence['outputs.GetNdbDbserverVmInfoInfoBpgConfigStorageResult'],
                 vm_properties: Sequence['outputs.GetNdbDbserverVmInfoInfoBpgConfigVmPropertyResult']):
        pulumi.set(__self__, "bpg_db_params", bpg_db_params)
        pulumi.set(__self__, "storages", storages)
        pulumi.set(__self__, "vm_properties", vm_properties)

    @property
    @pulumi.getter(name="bpgDbParams")
    def bpg_db_params(self) -> Sequence['outputs.GetNdbDbserverVmInfoInfoBpgConfigBpgDbParamResult']:
        return pulumi.get(self, "bpg_db_params")

    @property
    @pulumi.getter
    def storages(self) -> Sequence['outputs.GetNdbDbserverVmInfoInfoBpgConfigStorageResult']:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="vmProperties")
    def vm_properties(self) -> Sequence['outputs.GetNdbDbserverVmInfoInfoBpgConfigVmPropertyResult']:
        return pulumi.get(self, "vm_properties")


@pulumi.output_type
class GetNdbDbserverVmInfoInfoBpgConfigBpgDbParamResult(dict):
    def __init__(__self__, *,
                 effective_cache_size: str,
                 maintenance_work_mem: str,
                 max_parallel_workers_per_gather: str,
                 max_worker_processes: str,
                 shared_buffers: str,
                 work_mem: str):
        pulumi.set(__self__, "effective_cache_size", effective_cache_size)
        pulumi.set(__self__, "maintenance_work_mem", maintenance_work_mem)
        pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        pulumi.set(__self__, "shared_buffers", shared_buffers)
        pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="effectiveCacheSize")
    def effective_cache_size(self) -> str:
        return pulumi.get(self, "effective_cache_size")

    @property
    @pulumi.getter(name="maintenanceWorkMem")
    def maintenance_work_mem(self) -> str:
        return pulumi.get(self, "maintenance_work_mem")

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> str:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> str:
        return pulumi.get(self, "max_worker_processes")

    @property
    @pulumi.getter(name="sharedBuffers")
    def shared_buffers(self) -> str:
        return pulumi.get(self, "shared_buffers")

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> str:
        return pulumi.get(self, "work_mem")


@pulumi.output_type
class GetNdbDbserverVmInfoInfoBpgConfigStorageResult(dict):
    def __init__(__self__, *,
                 archive_storages: Sequence['outputs.GetNdbDbserverVmInfoInfoBpgConfigStorageArchiveStorageResult'],
                 data_disks: Sequence['outputs.GetNdbDbserverVmInfoInfoBpgConfigStorageDataDiskResult'],
                 log_disks: Sequence['outputs.GetNdbDbserverVmInfoInfoBpgConfigStorageLogDiskResult']):
        pulumi.set(__self__, "archive_storages", archive_storages)
        pulumi.set(__self__, "data_disks", data_disks)
        pulumi.set(__self__, "log_disks", log_disks)

    @property
    @pulumi.getter(name="archiveStorages")
    def archive_storages(self) -> Sequence['outputs.GetNdbDbserverVmInfoInfoBpgConfigStorageArchiveStorageResult']:
        return pulumi.get(self, "archive_storages")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Sequence['outputs.GetNdbDbserverVmInfoInfoBpgConfigStorageDataDiskResult']:
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="logDisks")
    def log_disks(self) -> Sequence['outputs.GetNdbDbserverVmInfoInfoBpgConfigStorageLogDiskResult']:
        return pulumi.get(self, "log_disks")


@pulumi.output_type
class GetNdbDbserverVmInfoInfoBpgConfigStorageArchiveStorageResult(dict):
    def __init__(__self__, *,
                 size: float):
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> float:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetNdbDbserverVmInfoInfoBpgConfigStorageDataDiskResult(dict):
    def __init__(__self__, *,
                 count: float):
        pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> float:
        return pulumi.get(self, "count")


@pulumi.output_type
class GetNdbDbserverVmInfoInfoBpgConfigStorageLogDiskResult(dict):
    def __init__(__self__, *,
                 count: float,
                 size: float):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> float:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def size(self) -> float:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetNdbDbserverVmInfoInfoBpgConfigVmPropertyResult(dict):
    def __init__(__self__, *,
                 dirty_background_ratio: float,
                 dirty_expire_centisecs: float,
                 dirty_ratio: float,
                 dirty_writeback_centisecs: float,
                 nr_hugepages: float,
                 overcommit_memory: float,
                 swappiness: float):
        pulumi.set(__self__, "dirty_background_ratio", dirty_background_ratio)
        pulumi.set(__self__, "dirty_expire_centisecs", dirty_expire_centisecs)
        pulumi.set(__self__, "dirty_ratio", dirty_ratio)
        pulumi.set(__self__, "dirty_writeback_centisecs", dirty_writeback_centisecs)
        pulumi.set(__self__, "nr_hugepages", nr_hugepages)
        pulumi.set(__self__, "overcommit_memory", overcommit_memory)
        pulumi.set(__self__, "swappiness", swappiness)

    @property
    @pulumi.getter(name="dirtyBackgroundRatio")
    def dirty_background_ratio(self) -> float:
        return pulumi.get(self, "dirty_background_ratio")

    @property
    @pulumi.getter(name="dirtyExpireCentisecs")
    def dirty_expire_centisecs(self) -> float:
        return pulumi.get(self, "dirty_expire_centisecs")

    @property
    @pulumi.getter(name="dirtyRatio")
    def dirty_ratio(self) -> float:
        return pulumi.get(self, "dirty_ratio")

    @property
    @pulumi.getter(name="dirtyWritebackCentisecs")
    def dirty_writeback_centisecs(self) -> float:
        return pulumi.get(self, "dirty_writeback_centisecs")

    @property
    @pulumi.getter(name="nrHugepages")
    def nr_hugepages(self) -> float:
        return pulumi.get(self, "nr_hugepages")

    @property
    @pulumi.getter(name="overcommitMemory")
    def overcommit_memory(self) -> float:
        return pulumi.get(self, "overcommit_memory")

    @property
    @pulumi.getter
    def swappiness(self) -> float:
        return pulumi.get(self, "swappiness")


@pulumi.output_type
class GetNdbDbserverVmInfoNetworkInfoResult(dict):
    def __init__(__self__, *,
                 access_infos: Sequence['outputs.GetNdbDbserverVmInfoNetworkInfoAccessInfoResult'],
                 default_gateway_device: bool,
                 device_name: str,
                 era_configured: bool,
                 flags: str,
                 gateway: str,
                 hostname: str,
                 ip_addresses: Sequence[str],
                 mac_address: str,
                 mtu: str,
                 subnet_mask: str,
                 vlan_name: str,
                 vlan_type: str,
                 vlan_uuid: str):
        """
        :param Sequence[str] ip_addresses: IP addresses of the dbserver vm
        """
        pulumi.set(__self__, "access_infos", access_infos)
        pulumi.set(__self__, "default_gateway_device", default_gateway_device)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "era_configured", era_configured)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "mtu", mtu)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "vlan_name", vlan_name)
        pulumi.set(__self__, "vlan_type", vlan_type)
        pulumi.set(__self__, "vlan_uuid", vlan_uuid)

    @property
    @pulumi.getter(name="accessInfos")
    def access_infos(self) -> Sequence['outputs.GetNdbDbserverVmInfoNetworkInfoAccessInfoResult']:
        return pulumi.get(self, "access_infos")

    @property
    @pulumi.getter(name="defaultGatewayDevice")
    def default_gateway_device(self) -> bool:
        return pulumi.get(self, "default_gateway_device")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="eraConfigured")
    def era_configured(self) -> bool:
        return pulumi.get(self, "era_configured")

    @property
    @pulumi.getter
    def flags(self) -> str:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[str]:
        """
        IP addresses of the dbserver vm
        """
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def mtu(self) -> str:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> str:
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> str:
        return pulumi.get(self, "vlan_name")

    @property
    @pulumi.getter(name="vlanType")
    def vlan_type(self) -> str:
        return pulumi.get(self, "vlan_type")

    @property
    @pulumi.getter(name="vlanUuid")
    def vlan_uuid(self) -> str:
        return pulumi.get(self, "vlan_uuid")


@pulumi.output_type
class GetNdbDbserverVmInfoNetworkInfoAccessInfoResult(dict):
    def __init__(__self__, *,
                 access_type: str,
                 destination_subnet: str):
        pulumi.set(__self__, "access_type", access_type)
        pulumi.set(__self__, "destination_subnet", destination_subnet)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> str:
        return pulumi.get(self, "access_type")

    @property
    @pulumi.getter(name="destinationSubnet")
    def destination_subnet(self) -> str:
        return pulumi.get(self, "destination_subnet")


@pulumi.output_type
class GetNdbDbserversDbserverResult(dict):
    def __init__(__self__, *,
                 access_key_id: str,
                 access_level: str,
                 associated_time_machine_ids: Sequence[str],
                 client_id: str,
                 clustered: bool,
                 database_type: str,
                 date_created: str,
                 date_modified: str,
                 dbserver_invalid_ea_state: bool,
                 description: str,
                 era_drive_id: str,
                 era_version: str,
                 fqdns: str,
                 id: str,
                 ip_addresses: Sequence[str],
                 is_server_driven: bool,
                 mac_addresses: Sequence[str],
                 name: str,
                 properties: Sequence['outputs.GetNdbDbserversDbserverPropertyResult'],
                 protection_domain_id: str,
                 query_count: int,
                 status: str,
                 tags: Sequence['outputs.GetNdbDbserversDbserverTagResult'],
                 type: str,
                 valid_diagnostic_bundle_state: bool,
                 vm_cluster_uuid: str,
                 vm_infos: Sequence['outputs.GetNdbDbserversDbserverVmInfoResult'],
                 vm_timezone: str,
                 windows_db_server: bool,
                 working_directory: str):
        """
        :param str access_key_id: access key id of dbserver vm
        :param str access_level: access level
        :param Sequence[str] associated_time_machine_ids: associated time machines ids
        :param str client_id: client id
        :param bool clustered: clustered or not
        :param str database_type: database type
        :param str date_created: date created of db server vm
        :param str date_modified: date modified of db server vm
        :param bool dbserver_invalid_ea_state: dbserver invalid ea state
        :param str description: description of db server vm
        :param str era_drive_id: era drive id
        :param str era_version: era version
        :param Sequence[str] ip_addresses: IP addresses of the dbserver vm
        :param bool is_server_driven: is server down or not
        :param Sequence[str] mac_addresses: Mac addresses of dbserver vm
        :param str name: name of dbserver vm
        :param Sequence['GetNdbDbserversDbserverPropertyArgs'] properties: properties of db server vm
        :param str protection_domain_id: protection domain id
        :param int query_count: query count
        :param str status: Status of Dbserver . Active or not.
        :param Sequence['GetNdbDbserversDbserverTagArgs'] tags: tags for db server vm
        :param str type: Type of entity. i.e. Dbserver
        :param bool valid_diagnostic_bundle_state: valid diagnostic bundle state
        :param str vm_cluster_uuid: clusetr uuid for dbserver vm
        :param Sequence['GetNdbDbserversDbserverVmInfoArgs'] vm_infos: info of dbserver vm
        :param str vm_timezone: timezone of dbserver vm
        :param bool windows_db_server: window db server
        :param str working_directory: working directory of db server vm
        """
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "access_level", access_level)
        pulumi.set(__self__, "associated_time_machine_ids", associated_time_machine_ids)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "clustered", clustered)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "dbserver_invalid_ea_state", dbserver_invalid_ea_state)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "era_drive_id", era_drive_id)
        pulumi.set(__self__, "era_version", era_version)
        pulumi.set(__self__, "fqdns", fqdns)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "is_server_driven", is_server_driven)
        pulumi.set(__self__, "mac_addresses", mac_addresses)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "protection_domain_id", protection_domain_id)
        pulumi.set(__self__, "query_count", query_count)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "valid_diagnostic_bundle_state", valid_diagnostic_bundle_state)
        pulumi.set(__self__, "vm_cluster_uuid", vm_cluster_uuid)
        pulumi.set(__self__, "vm_infos", vm_infos)
        pulumi.set(__self__, "vm_timezone", vm_timezone)
        pulumi.set(__self__, "windows_db_server", windows_db_server)
        pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        """
        access key id of dbserver vm
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> str:
        """
        access level
        """
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="associatedTimeMachineIds")
    def associated_time_machine_ids(self) -> Sequence[str]:
        """
        associated time machines ids
        """
        return pulumi.get(self, "associated_time_machine_ids")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        client id
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter
    def clustered(self) -> bool:
        """
        clustered or not
        """
        return pulumi.get(self, "clustered")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> str:
        """
        database type
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        date created of db server vm
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        date modified of db server vm
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter(name="dbserverInvalidEaState")
    def dbserver_invalid_ea_state(self) -> bool:
        """
        dbserver invalid ea state
        """
        return pulumi.get(self, "dbserver_invalid_ea_state")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        description of db server vm
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eraDriveId")
    def era_drive_id(self) -> str:
        """
        era drive id
        """
        return pulumi.get(self, "era_drive_id")

    @property
    @pulumi.getter(name="eraVersion")
    def era_version(self) -> str:
        """
        era version
        """
        return pulumi.get(self, "era_version")

    @property
    @pulumi.getter
    def fqdns(self) -> str:
        return pulumi.get(self, "fqdns")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[str]:
        """
        IP addresses of the dbserver vm
        """
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="isServerDriven")
    def is_server_driven(self) -> bool:
        """
        is server down or not
        """
        return pulumi.get(self, "is_server_driven")

    @property
    @pulumi.getter(name="macAddresses")
    def mac_addresses(self) -> Sequence[str]:
        """
        Mac addresses of dbserver vm
        """
        return pulumi.get(self, "mac_addresses")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of dbserver vm
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbDbserversDbserverPropertyResult']:
        """
        properties of db server vm
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="protectionDomainId")
    def protection_domain_id(self) -> str:
        """
        protection domain id
        """
        return pulumi.get(self, "protection_domain_id")

    @property
    @pulumi.getter(name="queryCount")
    def query_count(self) -> int:
        """
        query count
        """
        return pulumi.get(self, "query_count")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of Dbserver . Active or not.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNdbDbserversDbserverTagResult']:
        """
        tags for db server vm
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of entity. i.e. Dbserver
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="validDiagnosticBundleState")
    def valid_diagnostic_bundle_state(self) -> bool:
        """
        valid diagnostic bundle state
        """
        return pulumi.get(self, "valid_diagnostic_bundle_state")

    @property
    @pulumi.getter(name="vmClusterUuid")
    def vm_cluster_uuid(self) -> str:
        """
        clusetr uuid for dbserver vm
        """
        return pulumi.get(self, "vm_cluster_uuid")

    @property
    @pulumi.getter(name="vmInfos")
    def vm_infos(self) -> Sequence['outputs.GetNdbDbserversDbserverVmInfoResult']:
        """
        info of dbserver vm
        """
        return pulumi.get(self, "vm_infos")

    @property
    @pulumi.getter(name="vmTimezone")
    def vm_timezone(self) -> str:
        """
        timezone of dbserver vm
        """
        return pulumi.get(self, "vm_timezone")

    @property
    @pulumi.getter(name="windowsDbServer")
    def windows_db_server(self) -> bool:
        """
        window db server
        """
        return pulumi.get(self, "windows_db_server")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> str:
        """
        working directory of db server vm
        """
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetNdbDbserversDbserverPropertyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: name of dbserver vm
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of dbserver vm
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbDbserversDbserverTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbDbserversDbserverVmInfoResult(dict):
    def __init__(__self__, *,
                 deregister_infos: Sequence['outputs.GetNdbDbserversDbserverVmInfoDeregisterInfoResult'],
                 distribution: Mapping[str, str],
                 infos: Sequence['outputs.GetNdbDbserversDbserverVmInfoInfoResult'],
                 network_infos: Sequence['outputs.GetNdbDbserversDbserverVmInfoNetworkInfoResult'],
                 os_type: str,
                 os_version: str,
                 secure_info: Mapping[str, str]):
        pulumi.set(__self__, "deregister_infos", deregister_infos)
        pulumi.set(__self__, "distribution", distribution)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "network_infos", network_infos)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "os_version", os_version)
        pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="deregisterInfos")
    def deregister_infos(self) -> Sequence['outputs.GetNdbDbserversDbserverVmInfoDeregisterInfoResult']:
        return pulumi.get(self, "deregister_infos")

    @property
    @pulumi.getter
    def distribution(self) -> Mapping[str, str]:
        return pulumi.get(self, "distribution")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetNdbDbserversDbserverVmInfoInfoResult']:
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter(name="networkInfos")
    def network_infos(self) -> Sequence['outputs.GetNdbDbserversDbserverVmInfoNetworkInfoResult']:
        return pulumi.get(self, "network_infos")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> str:
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> str:
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class GetNdbDbserversDbserverVmInfoDeregisterInfoResult(dict):
    def __init__(__self__, *,
                 message: str,
                 operations: Sequence[str]):
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "operations", operations)

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def operations(self) -> Sequence[str]:
        return pulumi.get(self, "operations")


@pulumi.output_type
class GetNdbDbserversDbserverVmInfoInfoResult(dict):
    def __init__(__self__, *,
                 bpg_configs: Sequence['outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfigResult'],
                 secure_info: Mapping[str, str]):
        pulumi.set(__self__, "bpg_configs", bpg_configs)
        pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="bpgConfigs")
    def bpg_configs(self) -> Sequence['outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfigResult']:
        return pulumi.get(self, "bpg_configs")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class GetNdbDbserversDbserverVmInfoInfoBpgConfigResult(dict):
    def __init__(__self__, *,
                 bpg_db_params: Sequence['outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfigBpgDbParamResult'],
                 storages: Sequence['outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageResult'],
                 vm_properties: Sequence['outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfigVmPropertyResult']):
        pulumi.set(__self__, "bpg_db_params", bpg_db_params)
        pulumi.set(__self__, "storages", storages)
        pulumi.set(__self__, "vm_properties", vm_properties)

    @property
    @pulumi.getter(name="bpgDbParams")
    def bpg_db_params(self) -> Sequence['outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfigBpgDbParamResult']:
        return pulumi.get(self, "bpg_db_params")

    @property
    @pulumi.getter
    def storages(self) -> Sequence['outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageResult']:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="vmProperties")
    def vm_properties(self) -> Sequence['outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfigVmPropertyResult']:
        return pulumi.get(self, "vm_properties")


@pulumi.output_type
class GetNdbDbserversDbserverVmInfoInfoBpgConfigBpgDbParamResult(dict):
    def __init__(__self__, *,
                 effective_cache_size: str,
                 maintenance_work_mem: str,
                 max_parallel_workers_per_gather: str,
                 max_worker_processes: str,
                 shared_buffers: str,
                 work_mem: str):
        pulumi.set(__self__, "effective_cache_size", effective_cache_size)
        pulumi.set(__self__, "maintenance_work_mem", maintenance_work_mem)
        pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        pulumi.set(__self__, "shared_buffers", shared_buffers)
        pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="effectiveCacheSize")
    def effective_cache_size(self) -> str:
        return pulumi.get(self, "effective_cache_size")

    @property
    @pulumi.getter(name="maintenanceWorkMem")
    def maintenance_work_mem(self) -> str:
        return pulumi.get(self, "maintenance_work_mem")

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> str:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> str:
        return pulumi.get(self, "max_worker_processes")

    @property
    @pulumi.getter(name="sharedBuffers")
    def shared_buffers(self) -> str:
        return pulumi.get(self, "shared_buffers")

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> str:
        return pulumi.get(self, "work_mem")


@pulumi.output_type
class GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageResult(dict):
    def __init__(__self__, *,
                 archive_storages: Sequence['outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageArchiveStorageResult'],
                 data_disks: Sequence['outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageDataDiskResult'],
                 log_disks: Sequence['outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageLogDiskResult']):
        pulumi.set(__self__, "archive_storages", archive_storages)
        pulumi.set(__self__, "data_disks", data_disks)
        pulumi.set(__self__, "log_disks", log_disks)

    @property
    @pulumi.getter(name="archiveStorages")
    def archive_storages(self) -> Sequence['outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageArchiveStorageResult']:
        return pulumi.get(self, "archive_storages")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Sequence['outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageDataDiskResult']:
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="logDisks")
    def log_disks(self) -> Sequence['outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageLogDiskResult']:
        return pulumi.get(self, "log_disks")


@pulumi.output_type
class GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageArchiveStorageResult(dict):
    def __init__(__self__, *,
                 size: float):
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> float:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageDataDiskResult(dict):
    def __init__(__self__, *,
                 count: float):
        pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> float:
        return pulumi.get(self, "count")


@pulumi.output_type
class GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageLogDiskResult(dict):
    def __init__(__self__, *,
                 count: float,
                 size: float):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> float:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def size(self) -> float:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetNdbDbserversDbserverVmInfoInfoBpgConfigVmPropertyResult(dict):
    def __init__(__self__, *,
                 dirty_background_ratio: float,
                 dirty_expire_centisecs: float,
                 dirty_ratio: float,
                 dirty_writeback_centisecs: float,
                 nr_hugepages: float,
                 overcommit_memory: float,
                 swappiness: float):
        pulumi.set(__self__, "dirty_background_ratio", dirty_background_ratio)
        pulumi.set(__self__, "dirty_expire_centisecs", dirty_expire_centisecs)
        pulumi.set(__self__, "dirty_ratio", dirty_ratio)
        pulumi.set(__self__, "dirty_writeback_centisecs", dirty_writeback_centisecs)
        pulumi.set(__self__, "nr_hugepages", nr_hugepages)
        pulumi.set(__self__, "overcommit_memory", overcommit_memory)
        pulumi.set(__self__, "swappiness", swappiness)

    @property
    @pulumi.getter(name="dirtyBackgroundRatio")
    def dirty_background_ratio(self) -> float:
        return pulumi.get(self, "dirty_background_ratio")

    @property
    @pulumi.getter(name="dirtyExpireCentisecs")
    def dirty_expire_centisecs(self) -> float:
        return pulumi.get(self, "dirty_expire_centisecs")

    @property
    @pulumi.getter(name="dirtyRatio")
    def dirty_ratio(self) -> float:
        return pulumi.get(self, "dirty_ratio")

    @property
    @pulumi.getter(name="dirtyWritebackCentisecs")
    def dirty_writeback_centisecs(self) -> float:
        return pulumi.get(self, "dirty_writeback_centisecs")

    @property
    @pulumi.getter(name="nrHugepages")
    def nr_hugepages(self) -> float:
        return pulumi.get(self, "nr_hugepages")

    @property
    @pulumi.getter(name="overcommitMemory")
    def overcommit_memory(self) -> float:
        return pulumi.get(self, "overcommit_memory")

    @property
    @pulumi.getter
    def swappiness(self) -> float:
        return pulumi.get(self, "swappiness")


@pulumi.output_type
class GetNdbDbserversDbserverVmInfoNetworkInfoResult(dict):
    def __init__(__self__, *,
                 access_infos: Sequence['outputs.GetNdbDbserversDbserverVmInfoNetworkInfoAccessInfoResult'],
                 default_gateway_device: bool,
                 device_name: str,
                 era_configured: bool,
                 flags: str,
                 gateway: str,
                 hostname: str,
                 ip_addresses: Sequence[str],
                 mac_address: str,
                 mtu: str,
                 subnet_mask: str,
                 vlan_name: str,
                 vlan_type: str,
                 vlan_uuid: str):
        """
        :param Sequence[str] ip_addresses: IP addresses of the dbserver vm
        """
        pulumi.set(__self__, "access_infos", access_infos)
        pulumi.set(__self__, "default_gateway_device", default_gateway_device)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "era_configured", era_configured)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "mtu", mtu)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "vlan_name", vlan_name)
        pulumi.set(__self__, "vlan_type", vlan_type)
        pulumi.set(__self__, "vlan_uuid", vlan_uuid)

    @property
    @pulumi.getter(name="accessInfos")
    def access_infos(self) -> Sequence['outputs.GetNdbDbserversDbserverVmInfoNetworkInfoAccessInfoResult']:
        return pulumi.get(self, "access_infos")

    @property
    @pulumi.getter(name="defaultGatewayDevice")
    def default_gateway_device(self) -> bool:
        return pulumi.get(self, "default_gateway_device")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="eraConfigured")
    def era_configured(self) -> bool:
        return pulumi.get(self, "era_configured")

    @property
    @pulumi.getter
    def flags(self) -> str:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[str]:
        """
        IP addresses of the dbserver vm
        """
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def mtu(self) -> str:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> str:
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> str:
        return pulumi.get(self, "vlan_name")

    @property
    @pulumi.getter(name="vlanType")
    def vlan_type(self) -> str:
        return pulumi.get(self, "vlan_type")

    @property
    @pulumi.getter(name="vlanUuid")
    def vlan_uuid(self) -> str:
        return pulumi.get(self, "vlan_uuid")


@pulumi.output_type
class GetNdbDbserversDbserverVmInfoNetworkInfoAccessInfoResult(dict):
    def __init__(__self__, *,
                 access_type: str,
                 destination_subnet: str):
        pulumi.set(__self__, "access_type", access_type)
        pulumi.set(__self__, "destination_subnet", destination_subnet)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> str:
        return pulumi.get(self, "access_type")

    @property
    @pulumi.getter(name="destinationSubnet")
    def destination_subnet(self) -> str:
        return pulumi.get(self, "destination_subnet")


@pulumi.output_type
class GetNdbMaintenanceWindowEntityTaskAssocResult(dict):
    def __init__(__self__, *,
                 access_level: str,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 entity: str,
                 entity_id: str,
                 entity_type: str,
                 id: str,
                 maintenance_window_id: str,
                 maintenance_window_owner_id: str,
                 name: str,
                 owner_id: str,
                 payloads: Sequence['outputs.GetNdbMaintenanceWindowEntityTaskAssocPayloadResult'],
                 properties: Sequence['outputs.GetNdbMaintenanceWindowEntityTaskAssocPropertyResult'],
                 status: str,
                 tags: Sequence['outputs.GetNdbMaintenanceWindowEntityTaskAssocTagResult'],
                 task_type: str):
        """
        :param str access_level: access level
        :param str date_created: created date of maintenance window
        :param str date_modified: modified date of maintenance window
        :param str description: description of maintenance window
        :param str id: Maintenance window id.
        :param str name: name of maintenance window
        :param str owner_id: owner id of maintenance window
        :param Sequence['GetNdbMaintenanceWindowEntityTaskAssocPropertyArgs'] properties: properties of maintenance window
        :param str status: status of maintennace window
        :param Sequence['GetNdbMaintenanceWindowEntityTaskAssocTagArgs'] tags: tags of maintenance window
        """
        pulumi.set(__self__, "access_level", access_level)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "entity", entity)
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "maintenance_window_id", maintenance_window_id)
        pulumi.set(__self__, "maintenance_window_owner_id", maintenance_window_owner_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "payloads", payloads)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> str:
        """
        access level
        """
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        created date of maintenance window
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        modified date of maintenance window
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        description of maintenance window
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def entity(self) -> str:
        return pulumi.get(self, "entity")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Maintenance window id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maintenanceWindowId")
    def maintenance_window_id(self) -> str:
        return pulumi.get(self, "maintenance_window_id")

    @property
    @pulumi.getter(name="maintenanceWindowOwnerId")
    def maintenance_window_owner_id(self) -> str:
        return pulumi.get(self, "maintenance_window_owner_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of maintenance window
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        """
        owner id of maintenance window
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter
    def payloads(self) -> Sequence['outputs.GetNdbMaintenanceWindowEntityTaskAssocPayloadResult']:
        return pulumi.get(self, "payloads")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbMaintenanceWindowEntityTaskAssocPropertyResult']:
        """
        properties of maintenance window
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of maintennace window
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNdbMaintenanceWindowEntityTaskAssocTagResult']:
        """
        tags of maintenance window
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        return pulumi.get(self, "task_type")


@pulumi.output_type
class GetNdbMaintenanceWindowEntityTaskAssocPayloadResult(dict):
    def __init__(__self__, *,
                 pre_post_commands: Sequence['outputs.GetNdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommandResult']):
        pulumi.set(__self__, "pre_post_commands", pre_post_commands)

    @property
    @pulumi.getter(name="prePostCommands")
    def pre_post_commands(self) -> Sequence['outputs.GetNdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommandResult']:
        return pulumi.get(self, "pre_post_commands")


@pulumi.output_type
class GetNdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommandResult(dict):
    def __init__(__self__, *,
                 post_command: str,
                 pre_command: str):
        pulumi.set(__self__, "post_command", post_command)
        pulumi.set(__self__, "pre_command", pre_command)

    @property
    @pulumi.getter(name="postCommand")
    def post_command(self) -> str:
        return pulumi.get(self, "post_command")

    @property
    @pulumi.getter(name="preCommand")
    def pre_command(self) -> str:
        return pulumi.get(self, "pre_command")


@pulumi.output_type
class GetNdbMaintenanceWindowEntityTaskAssocPropertyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: name of maintenance window
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of maintenance window
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbMaintenanceWindowEntityTaskAssocTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbMaintenanceWindowPropertyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: name of maintenance window
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of maintenance window
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbMaintenanceWindowScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_week: str,
                 duration: int,
                 hour: int,
                 minute: int,
                 recurrence: str,
                 threshold: str,
                 timezone: str,
                 week_of_month: int,
                 start_time: Optional[str] = None):
        """
        :param str timezone: timezone
        """
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "hour", hour)
        pulumi.set(__self__, "minute", minute)
        pulumi.set(__self__, "recurrence", recurrence)
        pulumi.set(__self__, "threshold", threshold)
        pulumi.set(__self__, "timezone", timezone)
        pulumi.set(__self__, "week_of_month", week_of_month)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter
    def duration(self) -> int:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def hour(self) -> int:
        return pulumi.get(self, "hour")

    @property
    @pulumi.getter
    def minute(self) -> int:
        return pulumi.get(self, "minute")

    @property
    @pulumi.getter
    def recurrence(self) -> str:
        return pulumi.get(self, "recurrence")

    @property
    @pulumi.getter
    def threshold(self) -> str:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        """
        timezone
        """
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="weekOfMonth")
    def week_of_month(self) -> int:
        return pulumi.get(self, "week_of_month")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetNdbMaintenanceWindowTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbMaintenanceWindowsMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 access_level: str,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 entity_task_assocs: Sequence['outputs.GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocResult'],
                 id: str,
                 name: str,
                 next_run_time: str,
                 owner_id: str,
                 properties: Sequence['outputs.GetNdbMaintenanceWindowsMaintenanceWindowPropertyResult'],
                 schedules: Sequence['outputs.GetNdbMaintenanceWindowsMaintenanceWindowScheduleResult'],
                 status: str,
                 tags: Sequence['outputs.GetNdbMaintenanceWindowsMaintenanceWindowTagResult'],
                 timezone: str):
        """
        :param str access_level: access level
        :param str date_created: created date of maintenance window
        :param str date_modified: modified date of maintenance window
        :param str description: description of maintenance window
        :param Sequence['GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocArgs'] entity_task_assocs: entity task association for maintenance window
        :param str name: name of maintenance window
        :param str next_run_time: next run time for maintenance window to trigger
        :param str owner_id: owner id of maintenance window
        :param Sequence['GetNdbMaintenanceWindowsMaintenanceWindowPropertyArgs'] properties: properties of maintenance window
        :param Sequence['GetNdbMaintenanceWindowsMaintenanceWindowScheduleArgs'] schedules: schedule of maintenance window
        :param str status: status of maintennace window
        :param Sequence['GetNdbMaintenanceWindowsMaintenanceWindowTagArgs'] tags: tags of maintenance window
        :param str timezone: timezone
        """
        pulumi.set(__self__, "access_level", access_level)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "entity_task_assocs", entity_task_assocs)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_run_time", next_run_time)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "schedules", schedules)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> str:
        """
        access level
        """
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        created date of maintenance window
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        modified date of maintenance window
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        description of maintenance window
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="entityTaskAssocs")
    def entity_task_assocs(self) -> Sequence['outputs.GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocResult']:
        """
        entity task association for maintenance window
        """
        return pulumi.get(self, "entity_task_assocs")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of maintenance window
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextRunTime")
    def next_run_time(self) -> str:
        """
        next run time for maintenance window to trigger
        """
        return pulumi.get(self, "next_run_time")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        """
        owner id of maintenance window
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbMaintenanceWindowsMaintenanceWindowPropertyResult']:
        """
        properties of maintenance window
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetNdbMaintenanceWindowsMaintenanceWindowScheduleResult']:
        """
        schedule of maintenance window
        """
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of maintennace window
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNdbMaintenanceWindowsMaintenanceWindowTagResult']:
        """
        tags of maintenance window
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        """
        timezone
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocResult(dict):
    def __init__(__self__, *,
                 access_level: str,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 entity: str,
                 entity_id: str,
                 entity_type: str,
                 id: str,
                 maintenance_window_id: str,
                 maintenance_window_owner_id: str,
                 name: str,
                 owner_id: str,
                 payloads: Sequence['outputs.GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPayloadResult'],
                 properties: Sequence['outputs.GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPropertyResult'],
                 status: str,
                 tags: Sequence['outputs.GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocTagResult'],
                 task_type: str):
        """
        :param str access_level: access level
        :param str date_created: created date of maintenance window
        :param str date_modified: modified date of maintenance window
        :param str description: description of maintenance window
        :param str name: name of maintenance window
        :param str owner_id: owner id of maintenance window
        :param Sequence['GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPropertyArgs'] properties: properties of maintenance window
        :param str status: status of maintennace window
        :param Sequence['GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocTagArgs'] tags: tags of maintenance window
        """
        pulumi.set(__self__, "access_level", access_level)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "entity", entity)
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "maintenance_window_id", maintenance_window_id)
        pulumi.set(__self__, "maintenance_window_owner_id", maintenance_window_owner_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "payloads", payloads)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> str:
        """
        access level
        """
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        created date of maintenance window
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        modified date of maintenance window
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        description of maintenance window
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def entity(self) -> str:
        return pulumi.get(self, "entity")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maintenanceWindowId")
    def maintenance_window_id(self) -> str:
        return pulumi.get(self, "maintenance_window_id")

    @property
    @pulumi.getter(name="maintenanceWindowOwnerId")
    def maintenance_window_owner_id(self) -> str:
        return pulumi.get(self, "maintenance_window_owner_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of maintenance window
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        """
        owner id of maintenance window
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter
    def payloads(self) -> Sequence['outputs.GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPayloadResult']:
        return pulumi.get(self, "payloads")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPropertyResult']:
        """
        properties of maintenance window
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of maintennace window
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocTagResult']:
        """
        tags of maintenance window
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        return pulumi.get(self, "task_type")


@pulumi.output_type
class GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPayloadResult(dict):
    def __init__(__self__, *,
                 pre_post_commands: Sequence['outputs.GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPayloadPrePostCommandResult']):
        pulumi.set(__self__, "pre_post_commands", pre_post_commands)

    @property
    @pulumi.getter(name="prePostCommands")
    def pre_post_commands(self) -> Sequence['outputs.GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPayloadPrePostCommandResult']:
        return pulumi.get(self, "pre_post_commands")


@pulumi.output_type
class GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPayloadPrePostCommandResult(dict):
    def __init__(__self__, *,
                 post_command: str,
                 pre_command: str):
        pulumi.set(__self__, "post_command", post_command)
        pulumi.set(__self__, "pre_command", pre_command)

    @property
    @pulumi.getter(name="postCommand")
    def post_command(self) -> str:
        return pulumi.get(self, "post_command")

    @property
    @pulumi.getter(name="preCommand")
    def pre_command(self) -> str:
        return pulumi.get(self, "pre_command")


@pulumi.output_type
class GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPropertyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: name of maintenance window
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of maintenance window
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbMaintenanceWindowsMaintenanceWindowPropertyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: name of maintenance window
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of maintenance window
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbMaintenanceWindowsMaintenanceWindowScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_week: str,
                 duration: int,
                 hour: int,
                 minute: int,
                 recurrence: str,
                 threshold: str,
                 timezone: str,
                 week_of_month: int,
                 start_time: Optional[str] = None):
        """
        :param str timezone: timezone
        """
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "hour", hour)
        pulumi.set(__self__, "minute", minute)
        pulumi.set(__self__, "recurrence", recurrence)
        pulumi.set(__self__, "threshold", threshold)
        pulumi.set(__self__, "timezone", timezone)
        pulumi.set(__self__, "week_of_month", week_of_month)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter
    def duration(self) -> int:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def hour(self) -> int:
        return pulumi.get(self, "hour")

    @property
    @pulumi.getter
    def minute(self) -> int:
        return pulumi.get(self, "minute")

    @property
    @pulumi.getter
    def recurrence(self) -> str:
        return pulumi.get(self, "recurrence")

    @property
    @pulumi.getter
    def threshold(self) -> str:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        """
        timezone
        """
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="weekOfMonth")
    def week_of_month(self) -> int:
        return pulumi.get(self, "week_of_month")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetNdbMaintenanceWindowsMaintenanceWindowTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbNetworkAvailableIpsAvailableIpResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 cluster_name: str,
                 id: str,
                 ip_addresses: Sequence[str],
                 managed: bool,
                 name: str,
                 property_name: str,
                 type: str):
        """
        :param str cluster_id: cluster id
        :param str cluster_name: cluster name
        :param str id: network profile id
        :param Sequence[str] ip_addresses: list of available ips in network
        :param bool managed: managed by ndb or not
        :param str name: Network Name
        :param str property_name: property name of vlan
        :param str type: type of network
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "managed", managed)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "property_name", property_name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        cluster id
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        cluster name
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        network profile id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[str]:
        """
        list of available ips in network
        """
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter
    def managed(self) -> bool:
        """
        managed by ndb or not
        """
        return pulumi.get(self, "managed")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Network Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> str:
        """
        property name of vlan
        """
        return pulumi.get(self, "property_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of network
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNdbNetworkIpAddressResult(dict):
    def __init__(__self__, *,
                 dbserver_id: str,
                 dbserver_name: str,
                 ip: str,
                 status: str):
        """
        :param str dbserver_id: dbserver id
        :param str dbserver_name: dbserver name
        :param str ip: ip of pool
        :param str status: ip status
        """
        pulumi.set(__self__, "dbserver_id", dbserver_id)
        pulumi.set(__self__, "dbserver_name", dbserver_name)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> str:
        """
        dbserver id
        """
        return pulumi.get(self, "dbserver_id")

    @property
    @pulumi.getter(name="dbserverName")
    def dbserver_name(self) -> str:
        """
        dbserver name
        """
        return pulumi.get(self, "dbserver_name")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip of pool
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        ip status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetNdbNetworkIpPoolResult(dict):
    def __init__(__self__, *,
                 addresses: Sequence['outputs.GetNdbNetworkIpPoolAddressResult'],
                 end_ip: str,
                 start_ip: str):
        """
        :param Sequence['GetNdbNetworkIpPoolAddressArgs'] addresses: address of ips ranges
        :param str end_ip: end ip
        :param str start_ip: start ip
        """
        pulumi.set(__self__, "addresses", addresses)
        pulumi.set(__self__, "end_ip", end_ip)
        pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence['outputs.GetNdbNetworkIpPoolAddressResult']:
        """
        address of ips ranges
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> str:
        """
        end ip
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> str:
        """
        start ip
        """
        return pulumi.get(self, "start_ip")


@pulumi.output_type
class GetNdbNetworkIpPoolAddressResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 status: str):
        """
        :param str ip: ip of pool
        :param str status: ip status
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip of pool
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        ip status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetNdbNetworkPropertiesMapResult(dict):
    def __init__(__self__, *,
                 vlan_gateway: str,
                 vlan_primary_dns: str,
                 vlan_secondary_dns: str,
                 vlan_subnet_mask: str):
        """
        :param str vlan_gateway: gateway of vlan
        :param str vlan_primary_dns: primary dns of vlan
        :param str vlan_secondary_dns: secondary dns of vlan
        :param str vlan_subnet_mask: subnet mask of vlan
        """
        pulumi.set(__self__, "vlan_gateway", vlan_gateway)
        pulumi.set(__self__, "vlan_primary_dns", vlan_primary_dns)
        pulumi.set(__self__, "vlan_secondary_dns", vlan_secondary_dns)
        pulumi.set(__self__, "vlan_subnet_mask", vlan_subnet_mask)

    @property
    @pulumi.getter(name="vlanGateway")
    def vlan_gateway(self) -> str:
        """
        gateway of vlan
        """
        return pulumi.get(self, "vlan_gateway")

    @property
    @pulumi.getter(name="vlanPrimaryDns")
    def vlan_primary_dns(self) -> str:
        """
        primary dns of vlan
        """
        return pulumi.get(self, "vlan_primary_dns")

    @property
    @pulumi.getter(name="vlanSecondaryDns")
    def vlan_secondary_dns(self) -> str:
        """
        secondary dns of vlan
        """
        return pulumi.get(self, "vlan_secondary_dns")

    @property
    @pulumi.getter(name="vlanSubnetMask")
    def vlan_subnet_mask(self) -> str:
        """
        subnet mask of vlan
        """
        return pulumi.get(self, "vlan_subnet_mask")


@pulumi.output_type
class GetNdbNetworkPropertyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 secure: bool,
                 value: str):
        """
        :param str name: name of network
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of network
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbNetworksNetworkResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 id: str,
                 ip_addresses: Sequence['outputs.GetNdbNetworksNetworkIpAddressResult'],
                 ip_pools: Sequence['outputs.GetNdbNetworksNetworkIpPoolResult'],
                 managed: bool,
                 name: str,
                 properties: Sequence['outputs.GetNdbNetworksNetworkPropertyResult'],
                 properties_maps: Sequence['outputs.GetNdbNetworksNetworkPropertiesMapResult'],
                 stretched_vlan_id: str,
                 type: str):
        """
        :param str cluster_id: cluster id where network is present
        :param str id: network id
        :param Sequence['GetNdbNetworksNetworkIpAddressArgs'] ip_addresses: IP addresses of network
        :param Sequence['GetNdbNetworksNetworkIpPoolArgs'] ip_pools: IP Pools of network
        :param bool managed: network managed by NDB or not
        :param str name: network name
        :param Sequence['GetNdbNetworksNetworkPropertyArgs'] properties: properties of network
        :param Sequence['GetNdbNetworksNetworkPropertiesMapArgs'] properties_maps: properties map of network
        :param str stretched_vlan_id: stretched vlan id
        :param str type: type of network
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "ip_pools", ip_pools)
        pulumi.set(__self__, "managed", managed)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "properties_maps", properties_maps)
        pulumi.set(__self__, "stretched_vlan_id", stretched_vlan_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        cluster id where network is present
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        network id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence['outputs.GetNdbNetworksNetworkIpAddressResult']:
        """
        IP addresses of network
        """
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="ipPools")
    def ip_pools(self) -> Sequence['outputs.GetNdbNetworksNetworkIpPoolResult']:
        """
        IP Pools of network
        """
        return pulumi.get(self, "ip_pools")

    @property
    @pulumi.getter
    def managed(self) -> bool:
        """
        network managed by NDB or not
        """
        return pulumi.get(self, "managed")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        network name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbNetworksNetworkPropertyResult']:
        """
        properties of network
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="propertiesMaps")
    def properties_maps(self) -> Sequence['outputs.GetNdbNetworksNetworkPropertiesMapResult']:
        """
        properties map of network
        """
        return pulumi.get(self, "properties_maps")

    @property
    @pulumi.getter(name="stretchedVlanId")
    def stretched_vlan_id(self) -> str:
        """
        stretched vlan id
        """
        return pulumi.get(self, "stretched_vlan_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of network
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNdbNetworksNetworkIpAddressResult(dict):
    def __init__(__self__, *,
                 dbserver_id: str,
                 dbserver_name: str,
                 ip: str,
                 status: str):
        """
        :param str dbserver_id: dbserver id
        :param str dbserver_name: dbserver name
        :param str ip: ip of pool
        :param str status: ip status
        """
        pulumi.set(__self__, "dbserver_id", dbserver_id)
        pulumi.set(__self__, "dbserver_name", dbserver_name)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> str:
        """
        dbserver id
        """
        return pulumi.get(self, "dbserver_id")

    @property
    @pulumi.getter(name="dbserverName")
    def dbserver_name(self) -> str:
        """
        dbserver name
        """
        return pulumi.get(self, "dbserver_name")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip of pool
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        ip status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetNdbNetworksNetworkIpPoolResult(dict):
    def __init__(__self__, *,
                 addresses: Sequence['outputs.GetNdbNetworksNetworkIpPoolAddressResult'],
                 end_ip: str,
                 start_ip: str):
        """
        :param Sequence['GetNdbNetworksNetworkIpPoolAddressArgs'] addresses: address of ips ranges
        :param str end_ip: end ip
        :param str start_ip: start ip
        """
        pulumi.set(__self__, "addresses", addresses)
        pulumi.set(__self__, "end_ip", end_ip)
        pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence['outputs.GetNdbNetworksNetworkIpPoolAddressResult']:
        """
        address of ips ranges
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> str:
        """
        end ip
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> str:
        """
        start ip
        """
        return pulumi.get(self, "start_ip")


@pulumi.output_type
class GetNdbNetworksNetworkIpPoolAddressResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 status: str):
        """
        :param str ip: ip of pool
        :param str status: ip status
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip of pool
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        ip status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetNdbNetworksNetworkPropertiesMapResult(dict):
    def __init__(__self__, *,
                 vlan_gateway: str,
                 vlan_primary_dns: str,
                 vlan_secondary_dns: str,
                 vlan_subnet_mask: str):
        """
        :param str vlan_gateway: gateway of vlan
        :param str vlan_primary_dns: primary dns of vlan
        :param str vlan_secondary_dns: secondary dns of vlan
        :param str vlan_subnet_mask: subnet mask of vlan
        """
        pulumi.set(__self__, "vlan_gateway", vlan_gateway)
        pulumi.set(__self__, "vlan_primary_dns", vlan_primary_dns)
        pulumi.set(__self__, "vlan_secondary_dns", vlan_secondary_dns)
        pulumi.set(__self__, "vlan_subnet_mask", vlan_subnet_mask)

    @property
    @pulumi.getter(name="vlanGateway")
    def vlan_gateway(self) -> str:
        """
        gateway of vlan
        """
        return pulumi.get(self, "vlan_gateway")

    @property
    @pulumi.getter(name="vlanPrimaryDns")
    def vlan_primary_dns(self) -> str:
        """
        primary dns of vlan
        """
        return pulumi.get(self, "vlan_primary_dns")

    @property
    @pulumi.getter(name="vlanSecondaryDns")
    def vlan_secondary_dns(self) -> str:
        """
        secondary dns of vlan
        """
        return pulumi.get(self, "vlan_secondary_dns")

    @property
    @pulumi.getter(name="vlanSubnetMask")
    def vlan_subnet_mask(self) -> str:
        """
        subnet mask of vlan
        """
        return pulumi.get(self, "vlan_subnet_mask")


@pulumi.output_type
class GetNdbNetworksNetworkPropertyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 secure: bool,
                 value: str):
        """
        :param str name: network name
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        network name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbProfileClusterAvailabilityResult(dict):
    def __init__(__self__, *,
                 date_created: str,
                 date_modified: str,
                 nx_cluster_id: str,
                 owner_id: str,
                 profile_id: str,
                 status: str):
        """
        :param str nx_cluster_id: - era cluster ID
        :param str profile_id: Profile ID for query
        :param str status: - status of profile
        """
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "profile_id", profile_id)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> str:
        """
        - era cluster ID
        """
        return pulumi.get(self, "nx_cluster_id")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> str:
        """
        Profile ID for query
        """
        return pulumi.get(self, "profile_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        - status of profile
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetNdbProfileVersionResult(dict):
    def __init__(__self__, *,
                 db_version: str,
                 deprecated: bool,
                 description: str,
                 engine_type: str,
                 id: str,
                 name: str,
                 owner: str,
                 profile_id: str,
                 properties: Sequence['outputs.GetNdbProfileVersionPropertyResult'],
                 properties_map: Mapping[str, str],
                 published: bool,
                 status: str,
                 system_profile: bool,
                 topology: str,
                 type: str,
                 version: str,
                 version_cluster_associations: Sequence['outputs.GetNdbProfileVersionVersionClusterAssociationResult']):
        """
        :param str db_version: - database version
        :param str description: - description of profile
        :param str engine_type: - database engine type
        :param str id: - id of profile
        :param str name: - profile name
        :param str owner: - owner name
        :param str profile_id: Profile ID for query
        :param str status: - status of profile
        :param bool system_profile: - if system profile or not
        :param str topology: - topology
        """
        pulumi.set(__self__, "db_version", db_version)
        pulumi.set(__self__, "deprecated", deprecated)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "engine_type", engine_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "profile_id", profile_id)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "properties_map", properties_map)
        pulumi.set(__self__, "published", published)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_profile", system_profile)
        pulumi.set(__self__, "topology", topology)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_cluster_associations", version_cluster_associations)

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> str:
        """
        - database version
        """
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter
    def deprecated(self) -> bool:
        return pulumi.get(self, "deprecated")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        - description of profile
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> str:
        """
        - database engine type
        """
        return pulumi.get(self, "engine_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        - id of profile
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - profile name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        - owner name
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> str:
        """
        Profile ID for query
        """
        return pulumi.get(self, "profile_id")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbProfileVersionPropertyResult']:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="propertiesMap")
    def properties_map(self) -> Mapping[str, str]:
        return pulumi.get(self, "properties_map")

    @property
    @pulumi.getter
    def published(self) -> bool:
        return pulumi.get(self, "published")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        - status of profile
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemProfile")
    def system_profile(self) -> bool:
        """
        - if system profile or not
        """
        return pulumi.get(self, "system_profile")

    @property
    @pulumi.getter
    def topology(self) -> str:
        """
        - topology
        """
        return pulumi.get(self, "topology")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionClusterAssociations")
    def version_cluster_associations(self) -> Sequence['outputs.GetNdbProfileVersionVersionClusterAssociationResult']:
        return pulumi.get(self, "version_cluster_associations")


@pulumi.output_type
class GetNdbProfileVersionPropertyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 secure: bool,
                 value: str):
        """
        :param str name: - profile name
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - profile name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbProfileVersionVersionClusterAssociationResult(dict):
    def __init__(__self__, *,
                 date_created: str,
                 date_modified: str,
                 nx_cluster_id: str,
                 optimized_for_provisioning: bool,
                 owner_id: str,
                 profile_version_id: str,
                 properties: Sequence['outputs.GetNdbProfileVersionVersionClusterAssociationPropertyResult'],
                 status: str):
        """
        :param str nx_cluster_id: - era cluster ID
        :param str status: - status of profile
        """
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        pulumi.set(__self__, "optimized_for_provisioning", optimized_for_provisioning)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "profile_version_id", profile_version_id)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> str:
        """
        - era cluster ID
        """
        return pulumi.get(self, "nx_cluster_id")

    @property
    @pulumi.getter(name="optimizedForProvisioning")
    def optimized_for_provisioning(self) -> bool:
        return pulumi.get(self, "optimized_for_provisioning")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="profileVersionId")
    def profile_version_id(self) -> str:
        return pulumi.get(self, "profile_version_id")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbProfileVersionVersionClusterAssociationPropertyResult']:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        - status of profile
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetNdbProfileVersionVersionClusterAssociationPropertyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 secure: bool,
                 value: str):
        """
        :param str name: - profile name
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - profile name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbProfilesProfileResult(dict):
    def __init__(__self__, *,
                 assoc_databases: Sequence[str],
                 assoc_db_servers: Sequence[str],
                 cluster_availabilities: Sequence['outputs.GetNdbProfilesProfileClusterAvailabilityResult'],
                 db_version: str,
                 description: str,
                 engine_type: str,
                 id: str,
                 latest_version: str,
                 latest_version_id: str,
                 name: str,
                 nx_cluster_id: str,
                 owner: str,
                 status: str,
                 system_profile: bool,
                 topology: str,
                 type: str,
                 versions: Sequence['outputs.GetNdbProfilesProfileVersionResult']):
        pulumi.set(__self__, "assoc_databases", assoc_databases)
        pulumi.set(__self__, "assoc_db_servers", assoc_db_servers)
        pulumi.set(__self__, "cluster_availabilities", cluster_availabilities)
        pulumi.set(__self__, "db_version", db_version)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "engine_type", engine_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "latest_version", latest_version)
        pulumi.set(__self__, "latest_version_id", latest_version_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_profile", system_profile)
        pulumi.set(__self__, "topology", topology)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter(name="assocDatabases")
    def assoc_databases(self) -> Sequence[str]:
        return pulumi.get(self, "assoc_databases")

    @property
    @pulumi.getter(name="assocDbServers")
    def assoc_db_servers(self) -> Sequence[str]:
        return pulumi.get(self, "assoc_db_servers")

    @property
    @pulumi.getter(name="clusterAvailabilities")
    def cluster_availabilities(self) -> Sequence['outputs.GetNdbProfilesProfileClusterAvailabilityResult']:
        return pulumi.get(self, "cluster_availabilities")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> str:
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> str:
        return pulumi.get(self, "engine_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> str:
        return pulumi.get(self, "latest_version")

    @property
    @pulumi.getter(name="latestVersionId")
    def latest_version_id(self) -> str:
        return pulumi.get(self, "latest_version_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> str:
        return pulumi.get(self, "nx_cluster_id")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemProfile")
    def system_profile(self) -> bool:
        return pulumi.get(self, "system_profile")

    @property
    @pulumi.getter
    def topology(self) -> str:
        return pulumi.get(self, "topology")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def versions(self) -> Sequence['outputs.GetNdbProfilesProfileVersionResult']:
        return pulumi.get(self, "versions")


@pulumi.output_type
class GetNdbProfilesProfileClusterAvailabilityResult(dict):
    def __init__(__self__, *,
                 date_created: str,
                 date_modified: str,
                 nx_cluster_id: str,
                 owner_id: str,
                 profile_id: str,
                 status: str):
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "profile_id", profile_id)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> str:
        return pulumi.get(self, "nx_cluster_id")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> str:
        return pulumi.get(self, "profile_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetNdbProfilesProfileVersionResult(dict):
    def __init__(__self__, *,
                 db_version: str,
                 deprecated: bool,
                 description: str,
                 engine_type: str,
                 id: str,
                 name: str,
                 owner: str,
                 profile_id: str,
                 properties: Sequence['outputs.GetNdbProfilesProfileVersionPropertyResult'],
                 properties_map: Mapping[str, str],
                 published: bool,
                 status: str,
                 system_profile: bool,
                 topology: str,
                 type: str,
                 version: str,
                 version_cluster_associations: Sequence['outputs.GetNdbProfilesProfileVersionVersionClusterAssociationResult']):
        pulumi.set(__self__, "db_version", db_version)
        pulumi.set(__self__, "deprecated", deprecated)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "engine_type", engine_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "profile_id", profile_id)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "properties_map", properties_map)
        pulumi.set(__self__, "published", published)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_profile", system_profile)
        pulumi.set(__self__, "topology", topology)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_cluster_associations", version_cluster_associations)

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> str:
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter
    def deprecated(self) -> bool:
        return pulumi.get(self, "deprecated")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> str:
        return pulumi.get(self, "engine_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> str:
        return pulumi.get(self, "profile_id")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbProfilesProfileVersionPropertyResult']:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="propertiesMap")
    def properties_map(self) -> Mapping[str, str]:
        return pulumi.get(self, "properties_map")

    @property
    @pulumi.getter
    def published(self) -> bool:
        return pulumi.get(self, "published")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemProfile")
    def system_profile(self) -> bool:
        return pulumi.get(self, "system_profile")

    @property
    @pulumi.getter
    def topology(self) -> str:
        return pulumi.get(self, "topology")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionClusterAssociations")
    def version_cluster_associations(self) -> Sequence['outputs.GetNdbProfilesProfileVersionVersionClusterAssociationResult']:
        return pulumi.get(self, "version_cluster_associations")


@pulumi.output_type
class GetNdbProfilesProfileVersionPropertyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 secure: bool,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbProfilesProfileVersionVersionClusterAssociationResult(dict):
    def __init__(__self__, *,
                 date_created: str,
                 date_modified: str,
                 nx_cluster_id: str,
                 optimized_for_provisioning: bool,
                 owner_id: str,
                 profile_version_id: str,
                 properties: Sequence['outputs.GetNdbProfilesProfileVersionVersionClusterAssociationPropertyResult'],
                 status: str):
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        pulumi.set(__self__, "optimized_for_provisioning", optimized_for_provisioning)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "profile_version_id", profile_version_id)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> str:
        return pulumi.get(self, "nx_cluster_id")

    @property
    @pulumi.getter(name="optimizedForProvisioning")
    def optimized_for_provisioning(self) -> bool:
        return pulumi.get(self, "optimized_for_provisioning")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="profileVersionId")
    def profile_version_id(self) -> str:
        return pulumi.get(self, "profile_version_id")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbProfilesProfileVersionVersionClusterAssociationPropertyResult']:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetNdbProfilesProfileVersionVersionClusterAssociationPropertyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 secure: bool,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbSlasSlaResult(dict):
    def __init__(__self__, *,
                 continuous_retention: int,
                 current_active_frequency: str,
                 daily_retention: int,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 id: str,
                 monthly_retention: int,
                 name: str,
                 owner_id: str,
                 pitr_enabled: bool,
                 quartely_retention: int,
                 reference_count: int,
                 system_sla: bool,
                 unique_name: str,
                 weekly_retention: int,
                 yearly_retention: int):
        """
        :param int continuous_retention: - continuous retention of logs limit
        :param str current_active_frequency: - Current active frequency
        :param int daily_retention: - Daily snapshots retention limit
        :param str date_created: - creation date
        :param str date_modified: - last modified
        :param str description: - description of sla
        :param str id: - ID of sla
        :param int monthly_retention: - Monthly snapshots retention limit
        :param str name: - sla name
        :param str owner_id: - owner ID
        :param bool pitr_enabled: - If point in time recovery enabled
        :param int quartely_retention: - Daily snapshots retention limit
        :param int reference_count: - Reference count
        :param bool system_sla: - if system sla
        :param str unique_name: - unique name
        :param int weekly_retention: - weeky snapshots retention limit
        :param int yearly_retention: - Yearly snapshots retention limit
        """
        pulumi.set(__self__, "continuous_retention", continuous_retention)
        pulumi.set(__self__, "current_active_frequency", current_active_frequency)
        pulumi.set(__self__, "daily_retention", daily_retention)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly_retention", monthly_retention)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "pitr_enabled", pitr_enabled)
        pulumi.set(__self__, "quartely_retention", quartely_retention)
        pulumi.set(__self__, "reference_count", reference_count)
        pulumi.set(__self__, "system_sla", system_sla)
        pulumi.set(__self__, "unique_name", unique_name)
        pulumi.set(__self__, "weekly_retention", weekly_retention)
        pulumi.set(__self__, "yearly_retention", yearly_retention)

    @property
    @pulumi.getter(name="continuousRetention")
    def continuous_retention(self) -> int:
        """
        - continuous retention of logs limit
        """
        return pulumi.get(self, "continuous_retention")

    @property
    @pulumi.getter(name="currentActiveFrequency")
    def current_active_frequency(self) -> str:
        """
        - Current active frequency
        """
        return pulumi.get(self, "current_active_frequency")

    @property
    @pulumi.getter(name="dailyRetention")
    def daily_retention(self) -> int:
        """
        - Daily snapshots retention limit
        """
        return pulumi.get(self, "daily_retention")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        - creation date
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        - last modified
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        - description of sla
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        - ID of sla
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlyRetention")
    def monthly_retention(self) -> int:
        """
        - Monthly snapshots retention limit
        """
        return pulumi.get(self, "monthly_retention")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - sla name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        """
        - owner ID
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="pitrEnabled")
    def pitr_enabled(self) -> bool:
        """
        - If point in time recovery enabled
        """
        return pulumi.get(self, "pitr_enabled")

    @property
    @pulumi.getter(name="quartelyRetention")
    def quartely_retention(self) -> int:
        """
        - Daily snapshots retention limit
        """
        return pulumi.get(self, "quartely_retention")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> int:
        """
        - Reference count
        """
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="systemSla")
    def system_sla(self) -> bool:
        """
        - if system sla
        """
        return pulumi.get(self, "system_sla")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> str:
        """
        - unique name
        """
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklyRetention")
    def weekly_retention(self) -> int:
        """
        - weeky snapshots retention limit
        """
        return pulumi.get(self, "weekly_retention")

    @property
    @pulumi.getter(name="yearlyRetention")
    def yearly_retention(self) -> int:
        """
        - Yearly snapshots retention limit
        """
        return pulumi.get(self, "yearly_retention")


@pulumi.output_type
class GetNdbSnapshotFilterResult(dict):
    def __init__(__self__, *,
                 load_replicated_child_snapshots: Optional[str] = None,
                 timezone: Optional[str] = None):
        """
        :param str load_replicated_child_snapshots: load child snapshots. Default is false
        :param str timezone: Default is UTC
        """
        if load_replicated_child_snapshots is not None:
            pulumi.set(__self__, "load_replicated_child_snapshots", load_replicated_child_snapshots)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="loadReplicatedChildSnapshots")
    def load_replicated_child_snapshots(self) -> Optional[str]:
        """
        load child snapshots. Default is false
        """
        return pulumi.get(self, "load_replicated_child_snapshots")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        Default is UTC
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class GetNdbSnapshotLcmConfigResult(dict):
    def __init__(__self__, *,
                 expiry_details: Sequence['outputs.GetNdbSnapshotLcmConfigExpiryDetailResult'],
                 post_delete_commands: Sequence['outputs.GetNdbSnapshotLcmConfigPostDeleteCommandResult'],
                 pre_delete_commands: Sequence['outputs.GetNdbSnapshotLcmConfigPreDeleteCommandResult'],
                 refresh_details: Sequence['outputs.GetNdbSnapshotLcmConfigRefreshDetailResult']):
        pulumi.set(__self__, "expiry_details", expiry_details)
        pulumi.set(__self__, "post_delete_commands", post_delete_commands)
        pulumi.set(__self__, "pre_delete_commands", pre_delete_commands)
        pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Sequence['outputs.GetNdbSnapshotLcmConfigExpiryDetailResult']:
        return pulumi.get(self, "expiry_details")

    @property
    @pulumi.getter(name="postDeleteCommands")
    def post_delete_commands(self) -> Sequence['outputs.GetNdbSnapshotLcmConfigPostDeleteCommandResult']:
        return pulumi.get(self, "post_delete_commands")

    @property
    @pulumi.getter(name="preDeleteCommands")
    def pre_delete_commands(self) -> Sequence['outputs.GetNdbSnapshotLcmConfigPreDeleteCommandResult']:
        return pulumi.get(self, "pre_delete_commands")

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Sequence['outputs.GetNdbSnapshotLcmConfigRefreshDetailResult']:
        return pulumi.get(self, "refresh_details")


@pulumi.output_type
class GetNdbSnapshotLcmConfigExpiryDetailResult(dict):
    def __init__(__self__, *,
                 delete_database: bool,
                 delete_time_machine: bool,
                 delete_vm: bool,
                 effective_timestamp: str,
                 expire_in_days: int,
                 expiry_date_timezone: str,
                 expiry_timestamp: str,
                 remind_before_in_days: int,
                 user_created: bool):
        pulumi.set(__self__, "delete_database", delete_database)
        pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        pulumi.set(__self__, "delete_vm", delete_vm)
        pulumi.set(__self__, "effective_timestamp", effective_timestamp)
        pulumi.set(__self__, "expire_in_days", expire_in_days)
        pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        pulumi.set(__self__, "expiry_timestamp", expiry_timestamp)
        pulumi.set(__self__, "remind_before_in_days", remind_before_in_days)
        pulumi.set(__self__, "user_created", user_created)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> bool:
        return pulumi.get(self, "delete_database")

    @property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> bool:
        return pulumi.get(self, "delete_time_machine")

    @property
    @pulumi.getter(name="deleteVm")
    def delete_vm(self) -> bool:
        return pulumi.get(self, "delete_vm")

    @property
    @pulumi.getter(name="effectiveTimestamp")
    def effective_timestamp(self) -> str:
        return pulumi.get(self, "effective_timestamp")

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> int:
        return pulumi.get(self, "expire_in_days")

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> str:
        return pulumi.get(self, "expiry_date_timezone")

    @property
    @pulumi.getter(name="expiryTimestamp")
    def expiry_timestamp(self) -> str:
        return pulumi.get(self, "expiry_timestamp")

    @property
    @pulumi.getter(name="remindBeforeInDays")
    def remind_before_in_days(self) -> int:
        return pulumi.get(self, "remind_before_in_days")

    @property
    @pulumi.getter(name="userCreated")
    def user_created(self) -> bool:
        return pulumi.get(self, "user_created")


@pulumi.output_type
class GetNdbSnapshotLcmConfigPostDeleteCommandResult(dict):
    def __init__(__self__, *,
                 command: str):
        pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> str:
        return pulumi.get(self, "command")


@pulumi.output_type
class GetNdbSnapshotLcmConfigPreDeleteCommandResult(dict):
    def __init__(__self__, *,
                 command: str):
        pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> str:
        return pulumi.get(self, "command")


@pulumi.output_type
class GetNdbSnapshotLcmConfigRefreshDetailResult(dict):
    def __init__(__self__, *,
                 last_refresh_date: str,
                 next_refresh_date: str,
                 refresh_date_timezone: str,
                 refresh_in_days: int,
                 refresh_in_hours: int,
                 refresh_in_months: int,
                 refresh_time: str):
        pulumi.set(__self__, "last_refresh_date", last_refresh_date)
        pulumi.set(__self__, "next_refresh_date", next_refresh_date)
        pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        pulumi.set(__self__, "refresh_in_hours", refresh_in_hours)
        pulumi.set(__self__, "refresh_in_months", refresh_in_months)
        pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="lastRefreshDate")
    def last_refresh_date(self) -> str:
        return pulumi.get(self, "last_refresh_date")

    @property
    @pulumi.getter(name="nextRefreshDate")
    def next_refresh_date(self) -> str:
        return pulumi.get(self, "next_refresh_date")

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> str:
        return pulumi.get(self, "refresh_date_timezone")

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> int:
        return pulumi.get(self, "refresh_in_days")

    @property
    @pulumi.getter(name="refreshInHours")
    def refresh_in_hours(self) -> int:
        return pulumi.get(self, "refresh_in_hours")

    @property
    @pulumi.getter(name="refreshInMonths")
    def refresh_in_months(self) -> int:
        return pulumi.get(self, "refresh_in_months")

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> str:
        return pulumi.get(self, "refresh_time")


@pulumi.output_type
class GetNdbSnapshotPropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        """
        :param str description: description of snapshot
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        description of snapshot
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbSnapshotTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbSnapshotsFilterResult(dict):
    def __init__(__self__, *,
                 time_machine_id: Optional[str] = None):
        """
        :param str time_machine_id: Fetches all the snapshots for a given time machine
        """
        if time_machine_id is not None:
            pulumi.set(__self__, "time_machine_id", time_machine_id)

    @property
    @pulumi.getter(name="timeMachineId")
    def time_machine_id(self) -> Optional[str]:
        """
        Fetches all the snapshots for a given time machine
        """
        return pulumi.get(self, "time_machine_id")


@pulumi.output_type
class GetNdbSnapshotsSnapshotResult(dict):
    def __init__(__self__, *,
                 app_info_version: str,
                 applicable_types: Sequence[str],
                 database_node_id: str,
                 database_snapshot: bool,
                 date_created: str,
                 date_modified: str,
                 dbserver_id: str,
                 dbserver_ip: str,
                 dbserver_name: str,
                 dbserver_storage_metadata_version: int,
                 description: str,
                 from_timestamp: str,
                 id: str,
                 lcm_configs: Sequence['outputs.GetNdbSnapshotsSnapshotLcmConfigResult'],
                 name: str,
                 nx_cluster_id: str,
                 parent_snapshot: bool,
                 parent_snapshot_id: str,
                 processed: bool,
                 properties: Sequence['outputs.GetNdbSnapshotsSnapshotPropertyResult'],
                 protection_domain_id: str,
                 replicated_snapshots: Sequence[str],
                 santized: bool,
                 santized_from_snapshot_id: str,
                 santized_snapshots: str,
                 snapshot_family: str,
                 snapshot_size: float,
                 snapshot_timestamp: str,
                 snapshot_timestamp_date: int,
                 snapshot_uuid: str,
                 software_database_snapshot: bool,
                 software_snapshot: str,
                 software_snapshot_id: str,
                 status: str,
                 tags: Sequence['outputs.GetNdbSnapshotsSnapshotTagResult'],
                 time_machine_id: str,
                 timezone: str,
                 to_timestamp: str,
                 type: str):
        """
        :param Sequence['GetNdbSnapshotsSnapshotPropertyArgs'] properties: List of all the properties
        :param str time_machine_id: Fetches all the snapshots for a given time machine
        """
        pulumi.set(__self__, "app_info_version", app_info_version)
        pulumi.set(__self__, "applicable_types", applicable_types)
        pulumi.set(__self__, "database_node_id", database_node_id)
        pulumi.set(__self__, "database_snapshot", database_snapshot)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "dbserver_id", dbserver_id)
        pulumi.set(__self__, "dbserver_ip", dbserver_ip)
        pulumi.set(__self__, "dbserver_name", dbserver_name)
        pulumi.set(__self__, "dbserver_storage_metadata_version", dbserver_storage_metadata_version)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "from_timestamp", from_timestamp)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lcm_configs", lcm_configs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        pulumi.set(__self__, "parent_snapshot", parent_snapshot)
        pulumi.set(__self__, "parent_snapshot_id", parent_snapshot_id)
        pulumi.set(__self__, "processed", processed)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "protection_domain_id", protection_domain_id)
        pulumi.set(__self__, "replicated_snapshots", replicated_snapshots)
        pulumi.set(__self__, "santized", santized)
        pulumi.set(__self__, "santized_from_snapshot_id", santized_from_snapshot_id)
        pulumi.set(__self__, "santized_snapshots", santized_snapshots)
        pulumi.set(__self__, "snapshot_family", snapshot_family)
        pulumi.set(__self__, "snapshot_size", snapshot_size)
        pulumi.set(__self__, "snapshot_timestamp", snapshot_timestamp)
        pulumi.set(__self__, "snapshot_timestamp_date", snapshot_timestamp_date)
        pulumi.set(__self__, "snapshot_uuid", snapshot_uuid)
        pulumi.set(__self__, "software_database_snapshot", software_database_snapshot)
        pulumi.set(__self__, "software_snapshot", software_snapshot)
        pulumi.set(__self__, "software_snapshot_id", software_snapshot_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "time_machine_id", time_machine_id)
        pulumi.set(__self__, "timezone", timezone)
        pulumi.set(__self__, "to_timestamp", to_timestamp)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="appInfoVersion")
    def app_info_version(self) -> str:
        return pulumi.get(self, "app_info_version")

    @property
    @pulumi.getter(name="applicableTypes")
    def applicable_types(self) -> Sequence[str]:
        return pulumi.get(self, "applicable_types")

    @property
    @pulumi.getter(name="databaseNodeId")
    def database_node_id(self) -> str:
        return pulumi.get(self, "database_node_id")

    @property
    @pulumi.getter(name="databaseSnapshot")
    def database_snapshot(self) -> bool:
        return pulumi.get(self, "database_snapshot")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> str:
        return pulumi.get(self, "dbserver_id")

    @property
    @pulumi.getter(name="dbserverIp")
    def dbserver_ip(self) -> str:
        return pulumi.get(self, "dbserver_ip")

    @property
    @pulumi.getter(name="dbserverName")
    def dbserver_name(self) -> str:
        return pulumi.get(self, "dbserver_name")

    @property
    @pulumi.getter(name="dbserverStorageMetadataVersion")
    def dbserver_storage_metadata_version(self) -> int:
        return pulumi.get(self, "dbserver_storage_metadata_version")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fromTimestamp")
    def from_timestamp(self) -> str:
        return pulumi.get(self, "from_timestamp")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lcmConfigs")
    def lcm_configs(self) -> Sequence['outputs.GetNdbSnapshotsSnapshotLcmConfigResult']:
        return pulumi.get(self, "lcm_configs")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> str:
        return pulumi.get(self, "nx_cluster_id")

    @property
    @pulumi.getter(name="parentSnapshot")
    def parent_snapshot(self) -> bool:
        return pulumi.get(self, "parent_snapshot")

    @property
    @pulumi.getter(name="parentSnapshotId")
    def parent_snapshot_id(self) -> str:
        return pulumi.get(self, "parent_snapshot_id")

    @property
    @pulumi.getter
    def processed(self) -> bool:
        return pulumi.get(self, "processed")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbSnapshotsSnapshotPropertyResult']:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="protectionDomainId")
    def protection_domain_id(self) -> str:
        return pulumi.get(self, "protection_domain_id")

    @property
    @pulumi.getter(name="replicatedSnapshots")
    def replicated_snapshots(self) -> Sequence[str]:
        return pulumi.get(self, "replicated_snapshots")

    @property
    @pulumi.getter
    def santized(self) -> bool:
        return pulumi.get(self, "santized")

    @property
    @pulumi.getter(name="santizedFromSnapshotId")
    def santized_from_snapshot_id(self) -> str:
        return pulumi.get(self, "santized_from_snapshot_id")

    @property
    @pulumi.getter(name="santizedSnapshots")
    def santized_snapshots(self) -> str:
        return pulumi.get(self, "santized_snapshots")

    @property
    @pulumi.getter(name="snapshotFamily")
    def snapshot_family(self) -> str:
        return pulumi.get(self, "snapshot_family")

    @property
    @pulumi.getter(name="snapshotSize")
    def snapshot_size(self) -> float:
        return pulumi.get(self, "snapshot_size")

    @property
    @pulumi.getter(name="snapshotTimestamp")
    def snapshot_timestamp(self) -> str:
        return pulumi.get(self, "snapshot_timestamp")

    @property
    @pulumi.getter(name="snapshotTimestampDate")
    def snapshot_timestamp_date(self) -> int:
        return pulumi.get(self, "snapshot_timestamp_date")

    @property
    @pulumi.getter(name="snapshotUuid")
    def snapshot_uuid(self) -> str:
        return pulumi.get(self, "snapshot_uuid")

    @property
    @pulumi.getter(name="softwareDatabaseSnapshot")
    def software_database_snapshot(self) -> bool:
        return pulumi.get(self, "software_database_snapshot")

    @property
    @pulumi.getter(name="softwareSnapshot")
    def software_snapshot(self) -> str:
        return pulumi.get(self, "software_snapshot")

    @property
    @pulumi.getter(name="softwareSnapshotId")
    def software_snapshot_id(self) -> str:
        return pulumi.get(self, "software_snapshot_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNdbSnapshotsSnapshotTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeMachineId")
    def time_machine_id(self) -> str:
        """
        Fetches all the snapshots for a given time machine
        """
        return pulumi.get(self, "time_machine_id")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="toTimestamp")
    def to_timestamp(self) -> str:
        return pulumi.get(self, "to_timestamp")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNdbSnapshotsSnapshotLcmConfigResult(dict):
    def __init__(__self__, *,
                 expiry_details: Sequence['outputs.GetNdbSnapshotsSnapshotLcmConfigExpiryDetailResult'],
                 post_delete_commands: Sequence['outputs.GetNdbSnapshotsSnapshotLcmConfigPostDeleteCommandResult'],
                 pre_delete_commands: Sequence['outputs.GetNdbSnapshotsSnapshotLcmConfigPreDeleteCommandResult'],
                 refresh_details: Sequence['outputs.GetNdbSnapshotsSnapshotLcmConfigRefreshDetailResult']):
        pulumi.set(__self__, "expiry_details", expiry_details)
        pulumi.set(__self__, "post_delete_commands", post_delete_commands)
        pulumi.set(__self__, "pre_delete_commands", pre_delete_commands)
        pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Sequence['outputs.GetNdbSnapshotsSnapshotLcmConfigExpiryDetailResult']:
        return pulumi.get(self, "expiry_details")

    @property
    @pulumi.getter(name="postDeleteCommands")
    def post_delete_commands(self) -> Sequence['outputs.GetNdbSnapshotsSnapshotLcmConfigPostDeleteCommandResult']:
        return pulumi.get(self, "post_delete_commands")

    @property
    @pulumi.getter(name="preDeleteCommands")
    def pre_delete_commands(self) -> Sequence['outputs.GetNdbSnapshotsSnapshotLcmConfigPreDeleteCommandResult']:
        return pulumi.get(self, "pre_delete_commands")

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Sequence['outputs.GetNdbSnapshotsSnapshotLcmConfigRefreshDetailResult']:
        return pulumi.get(self, "refresh_details")


@pulumi.output_type
class GetNdbSnapshotsSnapshotLcmConfigExpiryDetailResult(dict):
    def __init__(__self__, *,
                 delete_database: bool,
                 delete_time_machine: bool,
                 delete_vm: bool,
                 effective_timestamp: str,
                 expire_in_days: int,
                 expiry_date_timezone: str,
                 expiry_timestamp: str,
                 remind_before_in_days: int,
                 user_created: bool):
        pulumi.set(__self__, "delete_database", delete_database)
        pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        pulumi.set(__self__, "delete_vm", delete_vm)
        pulumi.set(__self__, "effective_timestamp", effective_timestamp)
        pulumi.set(__self__, "expire_in_days", expire_in_days)
        pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        pulumi.set(__self__, "expiry_timestamp", expiry_timestamp)
        pulumi.set(__self__, "remind_before_in_days", remind_before_in_days)
        pulumi.set(__self__, "user_created", user_created)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> bool:
        return pulumi.get(self, "delete_database")

    @property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> bool:
        return pulumi.get(self, "delete_time_machine")

    @property
    @pulumi.getter(name="deleteVm")
    def delete_vm(self) -> bool:
        return pulumi.get(self, "delete_vm")

    @property
    @pulumi.getter(name="effectiveTimestamp")
    def effective_timestamp(self) -> str:
        return pulumi.get(self, "effective_timestamp")

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> int:
        return pulumi.get(self, "expire_in_days")

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> str:
        return pulumi.get(self, "expiry_date_timezone")

    @property
    @pulumi.getter(name="expiryTimestamp")
    def expiry_timestamp(self) -> str:
        return pulumi.get(self, "expiry_timestamp")

    @property
    @pulumi.getter(name="remindBeforeInDays")
    def remind_before_in_days(self) -> int:
        return pulumi.get(self, "remind_before_in_days")

    @property
    @pulumi.getter(name="userCreated")
    def user_created(self) -> bool:
        return pulumi.get(self, "user_created")


@pulumi.output_type
class GetNdbSnapshotsSnapshotLcmConfigPostDeleteCommandResult(dict):
    def __init__(__self__, *,
                 command: str):
        pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> str:
        return pulumi.get(self, "command")


@pulumi.output_type
class GetNdbSnapshotsSnapshotLcmConfigPreDeleteCommandResult(dict):
    def __init__(__self__, *,
                 command: str):
        pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> str:
        return pulumi.get(self, "command")


@pulumi.output_type
class GetNdbSnapshotsSnapshotLcmConfigRefreshDetailResult(dict):
    def __init__(__self__, *,
                 last_refresh_date: str,
                 next_refresh_date: str,
                 refresh_date_timezone: str,
                 refresh_in_days: int,
                 refresh_in_hours: int,
                 refresh_in_months: int,
                 refresh_time: str):
        pulumi.set(__self__, "last_refresh_date", last_refresh_date)
        pulumi.set(__self__, "next_refresh_date", next_refresh_date)
        pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        pulumi.set(__self__, "refresh_in_hours", refresh_in_hours)
        pulumi.set(__self__, "refresh_in_months", refresh_in_months)
        pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="lastRefreshDate")
    def last_refresh_date(self) -> str:
        return pulumi.get(self, "last_refresh_date")

    @property
    @pulumi.getter(name="nextRefreshDate")
    def next_refresh_date(self) -> str:
        return pulumi.get(self, "next_refresh_date")

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> str:
        return pulumi.get(self, "refresh_date_timezone")

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> int:
        return pulumi.get(self, "refresh_in_days")

    @property
    @pulumi.getter(name="refreshInHours")
    def refresh_in_hours(self) -> int:
        return pulumi.get(self, "refresh_in_hours")

    @property
    @pulumi.getter(name="refreshInMonths")
    def refresh_in_months(self) -> int:
        return pulumi.get(self, "refresh_in_months")

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> str:
        return pulumi.get(self, "refresh_time")


@pulumi.output_type
class GetNdbSnapshotsSnapshotPropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbSnapshotsSnapshotTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbTagsTagResult(dict):
    def __init__(__self__, *,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 entity_type: str,
                 id: str,
                 name: str,
                 owner: str,
                 required: bool,
                 status: str,
                 values: int):
        """
        :param str date_created: date created of the tag
        :param str date_modified: modified date of tha tag
        :param str description: description for the tag
        :param str entity_type: entity for the tag to be associated with.
        :param str name: name for the tag
        :param str owner: owner id of the tag
        :param bool required: tag value for entities.
        :param str status: Status of the tag
        :param int values: value for the tag
        """
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        date created of the tag
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        modified date of tha tag
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        description for the tag
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        entity for the tag to be associated with.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name for the tag
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        owner id of the tag
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        tag value for entities.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the tag
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def values(self) -> int:
        """
        value for the tag
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNdbTimeMachinePropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        """
        :param str description: time machine description
        :param str name: time machine name
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        time machine description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        time machine name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbTimeMachineScheduleResult(dict):
    def __init__(__self__, *,
                 continuous_schedules: Sequence['outputs.GetNdbTimeMachineScheduleContinuousScheduleResult'],
                 daily_schedules: Sequence['outputs.GetNdbTimeMachineScheduleDailyScheduleResult'],
                 date_created: str,
                 date_modified: str,
                 description: str,
                 global_policy: bool,
                 id: str,
                 monthly_schedules: Sequence['outputs.GetNdbTimeMachineScheduleMonthlyScheduleResult'],
                 name: str,
                 owner_id: str,
                 quartely_schedules: Sequence['outputs.GetNdbTimeMachineScheduleQuartelyScheduleResult'],
                 reference_count: int,
                 snapshot_time_of_days: Sequence['outputs.GetNdbTimeMachineScheduleSnapshotTimeOfDayResult'],
                 start_time: str,
                 system_policy: bool,
                 time_zone: str,
                 unique_name: str,
                 weekly_schedules: Sequence['outputs.GetNdbTimeMachineScheduleWeeklyScheduleResult'],
                 yearly_schedules: Sequence['outputs.GetNdbTimeMachineScheduleYearlyScheduleResult']):
        """
        :param str date_created: date created
        :param str date_modified: date modified
        :param str description: time machine description
        :param str id: time machine id
        :param str name: time machine name
        """
        pulumi.set(__self__, "continuous_schedules", continuous_schedules)
        pulumi.set(__self__, "daily_schedules", daily_schedules)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "global_policy", global_policy)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly_schedules", monthly_schedules)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "quartely_schedules", quartely_schedules)
        pulumi.set(__self__, "reference_count", reference_count)
        pulumi.set(__self__, "snapshot_time_of_days", snapshot_time_of_days)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "system_policy", system_policy)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "unique_name", unique_name)
        pulumi.set(__self__, "weekly_schedules", weekly_schedules)
        pulumi.set(__self__, "yearly_schedules", yearly_schedules)

    @property
    @pulumi.getter(name="continuousSchedules")
    def continuous_schedules(self) -> Sequence['outputs.GetNdbTimeMachineScheduleContinuousScheduleResult']:
        return pulumi.get(self, "continuous_schedules")

    @property
    @pulumi.getter(name="dailySchedules")
    def daily_schedules(self) -> Sequence['outputs.GetNdbTimeMachineScheduleDailyScheduleResult']:
        return pulumi.get(self, "daily_schedules")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        date created
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        date modified
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        time machine description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="globalPolicy")
    def global_policy(self) -> bool:
        return pulumi.get(self, "global_policy")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        time machine id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlySchedules")
    def monthly_schedules(self) -> Sequence['outputs.GetNdbTimeMachineScheduleMonthlyScheduleResult']:
        return pulumi.get(self, "monthly_schedules")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        time machine name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="quartelySchedules")
    def quartely_schedules(self) -> Sequence['outputs.GetNdbTimeMachineScheduleQuartelyScheduleResult']:
        return pulumi.get(self, "quartely_schedules")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> int:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="snapshotTimeOfDays")
    def snapshot_time_of_days(self) -> Sequence['outputs.GetNdbTimeMachineScheduleSnapshotTimeOfDayResult']:
        return pulumi.get(self, "snapshot_time_of_days")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="systemPolicy")
    def system_policy(self) -> bool:
        return pulumi.get(self, "system_policy")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> str:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklySchedules")
    def weekly_schedules(self) -> Sequence['outputs.GetNdbTimeMachineScheduleWeeklyScheduleResult']:
        return pulumi.get(self, "weekly_schedules")

    @property
    @pulumi.getter(name="yearlySchedules")
    def yearly_schedules(self) -> Sequence['outputs.GetNdbTimeMachineScheduleYearlyScheduleResult']:
        return pulumi.get(self, "yearly_schedules")


@pulumi.output_type
class GetNdbTimeMachineScheduleContinuousScheduleResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 log_backup_interval: int,
                 snapshots_per_day: int):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "log_backup_interval", log_backup_interval)
        pulumi.set(__self__, "snapshots_per_day", snapshots_per_day)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logBackupInterval")
    def log_backup_interval(self) -> int:
        return pulumi.get(self, "log_backup_interval")

    @property
    @pulumi.getter(name="snapshotsPerDay")
    def snapshots_per_day(self) -> int:
        return pulumi.get(self, "snapshots_per_day")


@pulumi.output_type
class GetNdbTimeMachineScheduleDailyScheduleResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetNdbTimeMachineScheduleMonthlyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_month: int,
                 enabled: bool):
        pulumi.set(__self__, "day_of_month", day_of_month)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> int:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetNdbTimeMachineScheduleQuartelyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_month: int,
                 enabled: bool,
                 start_month: str,
                 start_month_value: str):
        pulumi.set(__self__, "day_of_month", day_of_month)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "start_month", start_month)
        pulumi.set(__self__, "start_month_value", start_month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> int:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="startMonth")
    def start_month(self) -> str:
        return pulumi.get(self, "start_month")

    @property
    @pulumi.getter(name="startMonthValue")
    def start_month_value(self) -> str:
        return pulumi.get(self, "start_month_value")


@pulumi.output_type
class GetNdbTimeMachineScheduleSnapshotTimeOfDayResult(dict):
    def __init__(__self__, *,
                 extra: bool,
                 hours: int,
                 minutes: int,
                 seconds: int):
        pulumi.set(__self__, "extra", extra)
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)
        pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def extra(self) -> bool:
        return pulumi.get(self, "extra")

    @property
    @pulumi.getter
    def hours(self) -> int:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def seconds(self) -> int:
        return pulumi.get(self, "seconds")


@pulumi.output_type
class GetNdbTimeMachineScheduleWeeklyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_week: str,
                 day_of_week_value: str,
                 enabled: bool):
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "day_of_week_value", day_of_week_value)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="dayOfWeekValue")
    def day_of_week_value(self) -> str:
        return pulumi.get(self, "day_of_week_value")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetNdbTimeMachineScheduleYearlyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_month: int,
                 enabled: bool,
                 month: str,
                 month_value: str):
        pulumi.set(__self__, "day_of_month", day_of_month)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "month", month)
        pulumi.set(__self__, "month_value", month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> int:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def month(self) -> str:
        return pulumi.get(self, "month")

    @property
    @pulumi.getter(name="monthValue")
    def month_value(self) -> str:
        return pulumi.get(self, "month_value")


@pulumi.output_type
class GetNdbTimeMachineSlaResult(dict):
    def __init__(__self__, *,
                 continuous_retention: int,
                 current_active_frequency: str,
                 daily_retention: int,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 id: str,
                 monthly_retention: int,
                 name: str,
                 owner_id: str,
                 pitr_enabled: bool,
                 quarterly_retention: int,
                 reference_count: int,
                 system_sla: bool,
                 unique_name: str,
                 weekly_retention: int,
                 yearly_retention: int):
        """
        :param str date_created: date created
        :param str date_modified: date modified
        :param str description: time machine description
        :param str id: time machine id
        :param str name: time machine name
        """
        pulumi.set(__self__, "continuous_retention", continuous_retention)
        pulumi.set(__self__, "current_active_frequency", current_active_frequency)
        pulumi.set(__self__, "daily_retention", daily_retention)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly_retention", monthly_retention)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "pitr_enabled", pitr_enabled)
        pulumi.set(__self__, "quarterly_retention", quarterly_retention)
        pulumi.set(__self__, "reference_count", reference_count)
        pulumi.set(__self__, "system_sla", system_sla)
        pulumi.set(__self__, "unique_name", unique_name)
        pulumi.set(__self__, "weekly_retention", weekly_retention)
        pulumi.set(__self__, "yearly_retention", yearly_retention)

    @property
    @pulumi.getter(name="continuousRetention")
    def continuous_retention(self) -> int:
        return pulumi.get(self, "continuous_retention")

    @property
    @pulumi.getter(name="currentActiveFrequency")
    def current_active_frequency(self) -> str:
        return pulumi.get(self, "current_active_frequency")

    @property
    @pulumi.getter(name="dailyRetention")
    def daily_retention(self) -> int:
        return pulumi.get(self, "daily_retention")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        date created
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        date modified
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        time machine description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        time machine id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlyRetention")
    def monthly_retention(self) -> int:
        return pulumi.get(self, "monthly_retention")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        time machine name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="pitrEnabled")
    def pitr_enabled(self) -> bool:
        return pulumi.get(self, "pitr_enabled")

    @property
    @pulumi.getter(name="quarterlyRetention")
    def quarterly_retention(self) -> int:
        return pulumi.get(self, "quarterly_retention")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> int:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="systemSla")
    def system_sla(self) -> bool:
        return pulumi.get(self, "system_sla")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> str:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklyRetention")
    def weekly_retention(self) -> int:
        return pulumi.get(self, "weekly_retention")

    @property
    @pulumi.getter(name="yearlyRetention")
    def yearly_retention(self) -> int:
        return pulumi.get(self, "yearly_retention")


@pulumi.output_type
class GetNdbTimeMachineTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbTimeMachinesTimeMachineResult(dict):
    def __init__(__self__, *,
                 access_level: str,
                 clone: bool,
                 clones: str,
                 clustered: bool,
                 database: str,
                 database_id: str,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 ea_status: str,
                 id: str,
                 metric: str,
                 name: str,
                 properties: Sequence['outputs.GetNdbTimeMachinesTimeMachinePropertyResult'],
                 schedule_id: str,
                 schedules: Sequence['outputs.GetNdbTimeMachinesTimeMachineScheduleResult'],
                 scope: str,
                 sla_id: str,
                 sla_update_in_progress: bool,
                 sla_update_metadata: str,
                 slas: Sequence['outputs.GetNdbTimeMachinesTimeMachineSlaResult'],
                 source_nx_clusters: Sequence[str],
                 status: str,
                 tags: Sequence['outputs.GetNdbTimeMachinesTimeMachineTagResult'],
                 type: str):
        """
        :param str access_level: access level to time machines
        :param bool clone: clone time machine or not
        :param str clones: clone info
        :param bool clustered: clustered or not
        :param str database: database info
        :param str database_id: database id
        :param str date_created: date created
        :param str date_modified: date modified
        :param str description: time machine description
        :param str ea_status: ea status of time machine
        :param str id: time machine id
        :param str metric: Metric info
        :param str name: time machine name
        :param Sequence['GetNdbTimeMachinesTimeMachinePropertyArgs'] properties: List of all the properties
        :param str schedule_id: schedule id
        :param Sequence['GetNdbTimeMachinesTimeMachineScheduleArgs'] schedules: schedule info
               
               
               See detailed information in [NDB Time Machines](https://www.nutanix.dev/api_references/ndb/#/e68ba687086ed-get-list-of-all-time-machines).
        :param str scope: scope
        :param str sla_id: sla id
        :param bool sla_update_in_progress: sla update in progress
        :param str sla_update_metadata: sla update metadata
        :param Sequence['GetNdbTimeMachinesTimeMachineSlaArgs'] slas: sla info
        :param Sequence[str] source_nx_clusters: source clusters
        :param str status: status of time machine
        :param Sequence['GetNdbTimeMachinesTimeMachineTagArgs'] tags: tags
        :param str type: type of time machine
        """
        pulumi.set(__self__, "access_level", access_level)
        pulumi.set(__self__, "clone", clone)
        pulumi.set(__self__, "clones", clones)
        pulumi.set(__self__, "clustered", clustered)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "ea_status", ea_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "schedule_id", schedule_id)
        pulumi.set(__self__, "schedules", schedules)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "sla_id", sla_id)
        pulumi.set(__self__, "sla_update_in_progress", sla_update_in_progress)
        pulumi.set(__self__, "sla_update_metadata", sla_update_metadata)
        pulumi.set(__self__, "slas", slas)
        pulumi.set(__self__, "source_nx_clusters", source_nx_clusters)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> str:
        """
        access level to time machines
        """
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter
    def clone(self) -> bool:
        """
        clone time machine or not
        """
        return pulumi.get(self, "clone")

    @property
    @pulumi.getter
    def clones(self) -> str:
        """
        clone info
        """
        return pulumi.get(self, "clones")

    @property
    @pulumi.getter
    def clustered(self) -> bool:
        """
        clustered or not
        """
        return pulumi.get(self, "clustered")

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        database info
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> str:
        """
        database id
        """
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        date created
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        date modified
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        time machine description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eaStatus")
    def ea_status(self) -> str:
        """
        ea status of time machine
        """
        return pulumi.get(self, "ea_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        time machine id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metric(self) -> str:
        """
        Metric info
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        time machine name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbTimeMachinesTimeMachinePropertyResult']:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> str:
        """
        schedule id
        """
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetNdbTimeMachinesTimeMachineScheduleResult']:
        """
        schedule info


        See detailed information in [NDB Time Machines](https://www.nutanix.dev/api_references/ndb/#/e68ba687086ed-get-list-of-all-time-machines).
        """
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        scope
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> str:
        """
        sla id
        """
        return pulumi.get(self, "sla_id")

    @property
    @pulumi.getter(name="slaUpdateInProgress")
    def sla_update_in_progress(self) -> bool:
        """
        sla update in progress
        """
        return pulumi.get(self, "sla_update_in_progress")

    @property
    @pulumi.getter(name="slaUpdateMetadata")
    def sla_update_metadata(self) -> str:
        """
        sla update metadata
        """
        return pulumi.get(self, "sla_update_metadata")

    @property
    @pulumi.getter
    def slas(self) -> Sequence['outputs.GetNdbTimeMachinesTimeMachineSlaResult']:
        """
        sla info
        """
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter(name="sourceNxClusters")
    def source_nx_clusters(self) -> Sequence[str]:
        """
        source clusters
        """
        return pulumi.get(self, "source_nx_clusters")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of time machine
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNdbTimeMachinesTimeMachineTagResult']:
        """
        tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of time machine
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNdbTimeMachinesTimeMachinePropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        """
        :param str description: time machine description
        :param str name: time machine name
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        time machine description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        time machine name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbTimeMachinesTimeMachineScheduleResult(dict):
    def __init__(__self__, *,
                 continuous_schedules: Sequence['outputs.GetNdbTimeMachinesTimeMachineScheduleContinuousScheduleResult'],
                 daily_schedules: Sequence['outputs.GetNdbTimeMachinesTimeMachineScheduleDailyScheduleResult'],
                 date_created: str,
                 date_modified: str,
                 description: str,
                 global_policy: bool,
                 id: str,
                 monthly_schedules: Sequence['outputs.GetNdbTimeMachinesTimeMachineScheduleMonthlyScheduleResult'],
                 name: str,
                 owner_id: str,
                 quartely_schedules: Sequence['outputs.GetNdbTimeMachinesTimeMachineScheduleQuartelyScheduleResult'],
                 reference_count: int,
                 snapshot_time_of_days: Sequence['outputs.GetNdbTimeMachinesTimeMachineScheduleSnapshotTimeOfDayResult'],
                 start_time: str,
                 system_policy: bool,
                 time_zone: str,
                 unique_name: str,
                 weekly_schedules: Sequence['outputs.GetNdbTimeMachinesTimeMachineScheduleWeeklyScheduleResult'],
                 yearly_schedules: Sequence['outputs.GetNdbTimeMachinesTimeMachineScheduleYearlyScheduleResult']):
        """
        :param str date_created: date created
        :param str date_modified: date modified
        :param str description: time machine description
        :param str id: time machine id
        :param str name: time machine name
        """
        pulumi.set(__self__, "continuous_schedules", continuous_schedules)
        pulumi.set(__self__, "daily_schedules", daily_schedules)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "global_policy", global_policy)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly_schedules", monthly_schedules)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "quartely_schedules", quartely_schedules)
        pulumi.set(__self__, "reference_count", reference_count)
        pulumi.set(__self__, "snapshot_time_of_days", snapshot_time_of_days)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "system_policy", system_policy)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "unique_name", unique_name)
        pulumi.set(__self__, "weekly_schedules", weekly_schedules)
        pulumi.set(__self__, "yearly_schedules", yearly_schedules)

    @property
    @pulumi.getter(name="continuousSchedules")
    def continuous_schedules(self) -> Sequence['outputs.GetNdbTimeMachinesTimeMachineScheduleContinuousScheduleResult']:
        return pulumi.get(self, "continuous_schedules")

    @property
    @pulumi.getter(name="dailySchedules")
    def daily_schedules(self) -> Sequence['outputs.GetNdbTimeMachinesTimeMachineScheduleDailyScheduleResult']:
        return pulumi.get(self, "daily_schedules")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        date created
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        date modified
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        time machine description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="globalPolicy")
    def global_policy(self) -> bool:
        return pulumi.get(self, "global_policy")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        time machine id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlySchedules")
    def monthly_schedules(self) -> Sequence['outputs.GetNdbTimeMachinesTimeMachineScheduleMonthlyScheduleResult']:
        return pulumi.get(self, "monthly_schedules")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        time machine name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="quartelySchedules")
    def quartely_schedules(self) -> Sequence['outputs.GetNdbTimeMachinesTimeMachineScheduleQuartelyScheduleResult']:
        return pulumi.get(self, "quartely_schedules")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> int:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="snapshotTimeOfDays")
    def snapshot_time_of_days(self) -> Sequence['outputs.GetNdbTimeMachinesTimeMachineScheduleSnapshotTimeOfDayResult']:
        return pulumi.get(self, "snapshot_time_of_days")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="systemPolicy")
    def system_policy(self) -> bool:
        return pulumi.get(self, "system_policy")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> str:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklySchedules")
    def weekly_schedules(self) -> Sequence['outputs.GetNdbTimeMachinesTimeMachineScheduleWeeklyScheduleResult']:
        return pulumi.get(self, "weekly_schedules")

    @property
    @pulumi.getter(name="yearlySchedules")
    def yearly_schedules(self) -> Sequence['outputs.GetNdbTimeMachinesTimeMachineScheduleYearlyScheduleResult']:
        return pulumi.get(self, "yearly_schedules")


@pulumi.output_type
class GetNdbTimeMachinesTimeMachineScheduleContinuousScheduleResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 log_backup_interval: int,
                 snapshots_per_day: int):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "log_backup_interval", log_backup_interval)
        pulumi.set(__self__, "snapshots_per_day", snapshots_per_day)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logBackupInterval")
    def log_backup_interval(self) -> int:
        return pulumi.get(self, "log_backup_interval")

    @property
    @pulumi.getter(name="snapshotsPerDay")
    def snapshots_per_day(self) -> int:
        return pulumi.get(self, "snapshots_per_day")


@pulumi.output_type
class GetNdbTimeMachinesTimeMachineScheduleDailyScheduleResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetNdbTimeMachinesTimeMachineScheduleMonthlyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_month: int,
                 enabled: bool):
        pulumi.set(__self__, "day_of_month", day_of_month)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> int:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetNdbTimeMachinesTimeMachineScheduleQuartelyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_month: int,
                 enabled: bool,
                 start_month: str,
                 start_month_value: str):
        pulumi.set(__self__, "day_of_month", day_of_month)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "start_month", start_month)
        pulumi.set(__self__, "start_month_value", start_month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> int:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="startMonth")
    def start_month(self) -> str:
        return pulumi.get(self, "start_month")

    @property
    @pulumi.getter(name="startMonthValue")
    def start_month_value(self) -> str:
        return pulumi.get(self, "start_month_value")


@pulumi.output_type
class GetNdbTimeMachinesTimeMachineScheduleSnapshotTimeOfDayResult(dict):
    def __init__(__self__, *,
                 extra: bool,
                 hours: int,
                 minutes: int,
                 seconds: int):
        pulumi.set(__self__, "extra", extra)
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)
        pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def extra(self) -> bool:
        return pulumi.get(self, "extra")

    @property
    @pulumi.getter
    def hours(self) -> int:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def seconds(self) -> int:
        return pulumi.get(self, "seconds")


@pulumi.output_type
class GetNdbTimeMachinesTimeMachineScheduleWeeklyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_week: str,
                 day_of_week_value: str,
                 enabled: bool):
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "day_of_week_value", day_of_week_value)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="dayOfWeekValue")
    def day_of_week_value(self) -> str:
        return pulumi.get(self, "day_of_week_value")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetNdbTimeMachinesTimeMachineScheduleYearlyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_month: int,
                 enabled: bool,
                 month: str,
                 month_value: str):
        pulumi.set(__self__, "day_of_month", day_of_month)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "month", month)
        pulumi.set(__self__, "month_value", month_value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> int:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def month(self) -> str:
        return pulumi.get(self, "month")

    @property
    @pulumi.getter(name="monthValue")
    def month_value(self) -> str:
        return pulumi.get(self, "month_value")


@pulumi.output_type
class GetNdbTimeMachinesTimeMachineSlaResult(dict):
    def __init__(__self__, *,
                 continuous_retention: int,
                 current_active_frequency: str,
                 daily_retention: int,
                 date_created: str,
                 date_modified: str,
                 description: str,
                 id: str,
                 monthly_retention: int,
                 name: str,
                 owner_id: str,
                 pitr_enabled: bool,
                 quarterly_retention: int,
                 reference_count: int,
                 system_sla: bool,
                 unique_name: str,
                 weekly_retention: int,
                 yearly_retention: int):
        """
        :param str date_created: date created
        :param str date_modified: date modified
        :param str description: time machine description
        :param str id: time machine id
        :param str name: time machine name
        """
        pulumi.set(__self__, "continuous_retention", continuous_retention)
        pulumi.set(__self__, "current_active_frequency", current_active_frequency)
        pulumi.set(__self__, "daily_retention", daily_retention)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly_retention", monthly_retention)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "pitr_enabled", pitr_enabled)
        pulumi.set(__self__, "quarterly_retention", quarterly_retention)
        pulumi.set(__self__, "reference_count", reference_count)
        pulumi.set(__self__, "system_sla", system_sla)
        pulumi.set(__self__, "unique_name", unique_name)
        pulumi.set(__self__, "weekly_retention", weekly_retention)
        pulumi.set(__self__, "yearly_retention", yearly_retention)

    @property
    @pulumi.getter(name="continuousRetention")
    def continuous_retention(self) -> int:
        return pulumi.get(self, "continuous_retention")

    @property
    @pulumi.getter(name="currentActiveFrequency")
    def current_active_frequency(self) -> str:
        return pulumi.get(self, "current_active_frequency")

    @property
    @pulumi.getter(name="dailyRetention")
    def daily_retention(self) -> int:
        return pulumi.get(self, "daily_retention")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        date created
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        """
        date modified
        """
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        time machine description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        time machine id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monthlyRetention")
    def monthly_retention(self) -> int:
        return pulumi.get(self, "monthly_retention")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        time machine name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="pitrEnabled")
    def pitr_enabled(self) -> bool:
        return pulumi.get(self, "pitr_enabled")

    @property
    @pulumi.getter(name="quarterlyRetention")
    def quarterly_retention(self) -> int:
        return pulumi.get(self, "quarterly_retention")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> int:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter(name="systemSla")
    def system_sla(self) -> bool:
        return pulumi.get(self, "system_sla")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> str:
        return pulumi.get(self, "unique_name")

    @property
    @pulumi.getter(name="weeklyRetention")
    def weekly_retention(self) -> int:
        return pulumi.get(self, "weekly_retention")

    @property
    @pulumi.getter(name="yearlyRetention")
    def yearly_retention(self) -> int:
        return pulumi.get(self, "yearly_retention")


@pulumi.output_type
class GetNdbTimeMachinesTimeMachineTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilityResult(dict):
    def __init__(__self__, *,
                 continuous_regions: Sequence['outputs.GetNdbTmsCapabilityCapabilityContinuousRegionResult'],
                 database_ids: Sequence[str],
                 databases_continuous_region: str,
                 from_: str,
                 mode: str,
                 snapshots: Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotResult'],
                 time_unit: str,
                 time_unit_number: str,
                 to: str):
        pulumi.set(__self__, "continuous_regions", continuous_regions)
        pulumi.set(__self__, "database_ids", database_ids)
        pulumi.set(__self__, "databases_continuous_region", databases_continuous_region)
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "snapshots", snapshots)
        pulumi.set(__self__, "time_unit", time_unit)
        pulumi.set(__self__, "time_unit_number", time_unit_number)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="continuousRegions")
    def continuous_regions(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilityContinuousRegionResult']:
        return pulumi.get(self, "continuous_regions")

    @property
    @pulumi.getter(name="databaseIds")
    def database_ids(self) -> Sequence[str]:
        return pulumi.get(self, "database_ids")

    @property
    @pulumi.getter(name="databasesContinuousRegion")
    def databases_continuous_region(self) -> str:
        return pulumi.get(self, "databases_continuous_region")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def snapshots(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotResult']:
        return pulumi.get(self, "snapshots")

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> str:
        return pulumi.get(self, "time_unit")

    @property
    @pulumi.getter(name="timeUnitNumber")
    def time_unit_number(self) -> str:
        return pulumi.get(self, "time_unit_number")

    @property
    @pulumi.getter
    def to(self) -> str:
        return pulumi.get(self, "to")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilityContinuousRegionResult(dict):
    def __init__(__self__, *,
                 db_logs: Sequence['outputs.GetNdbTmsCapabilityCapabilityContinuousRegionDbLogResult'],
                 from_time: str,
                 message: str,
                 partial_ranges: bool,
                 processed_ranges: Sequence['outputs.GetNdbTmsCapabilityCapabilityContinuousRegionProcessedRangeResult'],
                 snapshot_ids: Sequence[str],
                 snapshots: str,
                 sub_range: bool,
                 time_range_and_databases: str,
                 timezone: str,
                 to_time: str,
                 unknown_time_ranges: str,
                 unprocessed_ranges: Sequence['outputs.GetNdbTmsCapabilityCapabilityContinuousRegionUnprocessedRangeResult']):
        pulumi.set(__self__, "db_logs", db_logs)
        pulumi.set(__self__, "from_time", from_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "partial_ranges", partial_ranges)
        pulumi.set(__self__, "processed_ranges", processed_ranges)
        pulumi.set(__self__, "snapshot_ids", snapshot_ids)
        pulumi.set(__self__, "snapshots", snapshots)
        pulumi.set(__self__, "sub_range", sub_range)
        pulumi.set(__self__, "time_range_and_databases", time_range_and_databases)
        pulumi.set(__self__, "timezone", timezone)
        pulumi.set(__self__, "to_time", to_time)
        pulumi.set(__self__, "unknown_time_ranges", unknown_time_ranges)
        pulumi.set(__self__, "unprocessed_ranges", unprocessed_ranges)

    @property
    @pulumi.getter(name="dbLogs")
    def db_logs(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilityContinuousRegionDbLogResult']:
        return pulumi.get(self, "db_logs")

    @property
    @pulumi.getter(name="fromTime")
    def from_time(self) -> str:
        return pulumi.get(self, "from_time")

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="partialRanges")
    def partial_ranges(self) -> bool:
        return pulumi.get(self, "partial_ranges")

    @property
    @pulumi.getter(name="processedRanges")
    def processed_ranges(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilityContinuousRegionProcessedRangeResult']:
        return pulumi.get(self, "processed_ranges")

    @property
    @pulumi.getter(name="snapshotIds")
    def snapshot_ids(self) -> Sequence[str]:
        return pulumi.get(self, "snapshot_ids")

    @property
    @pulumi.getter
    def snapshots(self) -> str:
        return pulumi.get(self, "snapshots")

    @property
    @pulumi.getter(name="subRange")
    def sub_range(self) -> bool:
        return pulumi.get(self, "sub_range")

    @property
    @pulumi.getter(name="timeRangeAndDatabases")
    def time_range_and_databases(self) -> str:
        return pulumi.get(self, "time_range_and_databases")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="toTime")
    def to_time(self) -> str:
        return pulumi.get(self, "to_time")

    @property
    @pulumi.getter(name="unknownTimeRanges")
    def unknown_time_ranges(self) -> str:
        return pulumi.get(self, "unknown_time_ranges")

    @property
    @pulumi.getter(name="unprocessedRanges")
    def unprocessed_ranges(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilityContinuousRegionUnprocessedRangeResult']:
        return pulumi.get(self, "unprocessed_ranges")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilityContinuousRegionDbLogResult(dict):
    def __init__(__self__, *,
                 database_id: str,
                 database_node_id: str,
                 date_created: str,
                 date_modified: str,
                 era_log_drive_id: str,
                 from_time: str,
                 id: str,
                 infos: Sequence['outputs.GetNdbTmsCapabilityCapabilityContinuousRegionDbLogInfoResult'],
                 log_copy_operation_id: str,
                 message: str,
                 metadatas: Sequence['outputs.GetNdbTmsCapabilityCapabilityContinuousRegionDbLogMetadataResult'],
                 name: str,
                 owner_id: str,
                 size: int,
                 status: str,
                 to_time: str,
                 unprocessed: bool):
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "database_node_id", database_node_id)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "era_log_drive_id", era_log_drive_id)
        pulumi.set(__self__, "from_time", from_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "log_copy_operation_id", log_copy_operation_id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "to_time", to_time)
        pulumi.set(__self__, "unprocessed", unprocessed)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> str:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseNodeId")
    def database_node_id(self) -> str:
        return pulumi.get(self, "database_node_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter(name="eraLogDriveId")
    def era_log_drive_id(self) -> str:
        return pulumi.get(self, "era_log_drive_id")

    @property
    @pulumi.getter(name="fromTime")
    def from_time(self) -> str:
        return pulumi.get(self, "from_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilityContinuousRegionDbLogInfoResult']:
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter(name="logCopyOperationId")
    def log_copy_operation_id(self) -> str:
        return pulumi.get(self, "log_copy_operation_id")

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilityContinuousRegionDbLogMetadataResult']:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="toTime")
    def to_time(self) -> str:
        return pulumi.get(self, "to_time")

    @property
    @pulumi.getter
    def unprocessed(self) -> bool:
        return pulumi.get(self, "unprocessed")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilityContinuousRegionDbLogInfoResult(dict):
    def __init__(__self__, *,
                 info: Mapping[str, str],
                 secure_info: Mapping[str, str],
                 unknown_time_range: bool):
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "secure_info", secure_info)
        pulumi.set(__self__, "unknown_time_range", unknown_time_range)

    @property
    @pulumi.getter
    def info(self) -> Mapping[str, str]:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")

    @property
    @pulumi.getter(name="unknownTimeRange")
    def unknown_time_range(self) -> bool:
        return pulumi.get(self, "unknown_time_range")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilityContinuousRegionDbLogMetadataResult(dict):
    def __init__(__self__, *,
                 created_directly: bool,
                 curation_retry_count: int,
                 deregister_infos: Sequence['outputs.GetNdbTmsCapabilityCapabilityContinuousRegionDbLogMetadataDeregisterInfoResult'],
                 info: Mapping[str, str],
                 secure_info: Mapping[str, str],
                 updated_directly: bool):
        pulumi.set(__self__, "created_directly", created_directly)
        pulumi.set(__self__, "curation_retry_count", curation_retry_count)
        pulumi.set(__self__, "deregister_infos", deregister_infos)
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "secure_info", secure_info)
        pulumi.set(__self__, "updated_directly", updated_directly)

    @property
    @pulumi.getter(name="createdDirectly")
    def created_directly(self) -> bool:
        return pulumi.get(self, "created_directly")

    @property
    @pulumi.getter(name="curationRetryCount")
    def curation_retry_count(self) -> int:
        return pulumi.get(self, "curation_retry_count")

    @property
    @pulumi.getter(name="deregisterInfos")
    def deregister_infos(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilityContinuousRegionDbLogMetadataDeregisterInfoResult']:
        return pulumi.get(self, "deregister_infos")

    @property
    @pulumi.getter
    def info(self) -> Mapping[str, str]:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")

    @property
    @pulumi.getter(name="updatedDirectly")
    def updated_directly(self) -> bool:
        return pulumi.get(self, "updated_directly")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilityContinuousRegionDbLogMetadataDeregisterInfoResult(dict):
    def __init__(__self__, *,
                 message: str,
                 operations: Sequence[str]):
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "operations", operations)

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def operations(self) -> Sequence[str]:
        return pulumi.get(self, "operations")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilityContinuousRegionProcessedRangeResult(dict):
    def __init__(__self__, *,
                 first: str,
                 second: str):
        pulumi.set(__self__, "first", first)
        pulumi.set(__self__, "second", second)

    @property
    @pulumi.getter
    def first(self) -> str:
        return pulumi.get(self, "first")

    @property
    @pulumi.getter
    def second(self) -> str:
        return pulumi.get(self, "second")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilityContinuousRegionUnprocessedRangeResult(dict):
    def __init__(__self__, *,
                 first: str,
                 second: str):
        pulumi.set(__self__, "first", first)
        pulumi.set(__self__, "second", second)

    @property
    @pulumi.getter
    def first(self) -> str:
        return pulumi.get(self, "first")

    @property
    @pulumi.getter
    def second(self) -> str:
        return pulumi.get(self, "second")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilitySnapshotResult(dict):
    def __init__(__self__, *,
                 app_info_version: str,
                 applicable_types: Sequence[str],
                 database_node_id: str,
                 database_snapshot: bool,
                 date_created: str,
                 date_modified: str,
                 dbserver_id: str,
                 dbserver_ip: str,
                 dbserver_name: str,
                 dbserver_storage_metadata_version: int,
                 description: str,
                 from_timestamp: str,
                 id: str,
                 lcm_configs: Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotLcmConfigResult'],
                 metadatas: Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataResult'],
                 name: str,
                 nx_cluster_id: str,
                 owner_id: str,
                 parent_snapshot: bool,
                 parent_snapshot_id: str,
                 processed: bool,
                 properties: Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotPropertyResult'],
                 protection_domain_id: str,
                 replicated_snapshots: Sequence[str],
                 santized: bool,
                 santized_from_snapshot_id: str,
                 santized_snapshots: str,
                 snapshot_family: str,
                 snapshot_size: float,
                 snapshot_timestamp: str,
                 snapshot_timestamp_date: int,
                 snapshot_uuid: str,
                 software_database_snapshot: bool,
                 software_snapshot: str,
                 software_snapshot_id: str,
                 status: str,
                 tags: Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotTagResult'],
                 time_machine_id: str,
                 timezone: str,
                 to_timestamp: str,
                 type: str):
        """
        :param Sequence['GetNdbTmsCapabilityCapabilitySnapshotPropertyArgs'] properties: List of all the properties
        """
        pulumi.set(__self__, "app_info_version", app_info_version)
        pulumi.set(__self__, "applicable_types", applicable_types)
        pulumi.set(__self__, "database_node_id", database_node_id)
        pulumi.set(__self__, "database_snapshot", database_snapshot)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "dbserver_id", dbserver_id)
        pulumi.set(__self__, "dbserver_ip", dbserver_ip)
        pulumi.set(__self__, "dbserver_name", dbserver_name)
        pulumi.set(__self__, "dbserver_storage_metadata_version", dbserver_storage_metadata_version)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "from_timestamp", from_timestamp)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lcm_configs", lcm_configs)
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "parent_snapshot", parent_snapshot)
        pulumi.set(__self__, "parent_snapshot_id", parent_snapshot_id)
        pulumi.set(__self__, "processed", processed)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "protection_domain_id", protection_domain_id)
        pulumi.set(__self__, "replicated_snapshots", replicated_snapshots)
        pulumi.set(__self__, "santized", santized)
        pulumi.set(__self__, "santized_from_snapshot_id", santized_from_snapshot_id)
        pulumi.set(__self__, "santized_snapshots", santized_snapshots)
        pulumi.set(__self__, "snapshot_family", snapshot_family)
        pulumi.set(__self__, "snapshot_size", snapshot_size)
        pulumi.set(__self__, "snapshot_timestamp", snapshot_timestamp)
        pulumi.set(__self__, "snapshot_timestamp_date", snapshot_timestamp_date)
        pulumi.set(__self__, "snapshot_uuid", snapshot_uuid)
        pulumi.set(__self__, "software_database_snapshot", software_database_snapshot)
        pulumi.set(__self__, "software_snapshot", software_snapshot)
        pulumi.set(__self__, "software_snapshot_id", software_snapshot_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "time_machine_id", time_machine_id)
        pulumi.set(__self__, "timezone", timezone)
        pulumi.set(__self__, "to_timestamp", to_timestamp)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="appInfoVersion")
    def app_info_version(self) -> str:
        return pulumi.get(self, "app_info_version")

    @property
    @pulumi.getter(name="applicableTypes")
    def applicable_types(self) -> Sequence[str]:
        return pulumi.get(self, "applicable_types")

    @property
    @pulumi.getter(name="databaseNodeId")
    def database_node_id(self) -> str:
        return pulumi.get(self, "database_node_id")

    @property
    @pulumi.getter(name="databaseSnapshot")
    def database_snapshot(self) -> bool:
        return pulumi.get(self, "database_snapshot")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> str:
        return pulumi.get(self, "dbserver_id")

    @property
    @pulumi.getter(name="dbserverIp")
    def dbserver_ip(self) -> str:
        return pulumi.get(self, "dbserver_ip")

    @property
    @pulumi.getter(name="dbserverName")
    def dbserver_name(self) -> str:
        return pulumi.get(self, "dbserver_name")

    @property
    @pulumi.getter(name="dbserverStorageMetadataVersion")
    def dbserver_storage_metadata_version(self) -> int:
        return pulumi.get(self, "dbserver_storage_metadata_version")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fromTimestamp")
    def from_timestamp(self) -> str:
        return pulumi.get(self, "from_timestamp")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lcmConfigs")
    def lcm_configs(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotLcmConfigResult']:
        return pulumi.get(self, "lcm_configs")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataResult']:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> str:
        return pulumi.get(self, "nx_cluster_id")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="parentSnapshot")
    def parent_snapshot(self) -> bool:
        return pulumi.get(self, "parent_snapshot")

    @property
    @pulumi.getter(name="parentSnapshotId")
    def parent_snapshot_id(self) -> str:
        return pulumi.get(self, "parent_snapshot_id")

    @property
    @pulumi.getter
    def processed(self) -> bool:
        return pulumi.get(self, "processed")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotPropertyResult']:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="protectionDomainId")
    def protection_domain_id(self) -> str:
        return pulumi.get(self, "protection_domain_id")

    @property
    @pulumi.getter(name="replicatedSnapshots")
    def replicated_snapshots(self) -> Sequence[str]:
        return pulumi.get(self, "replicated_snapshots")

    @property
    @pulumi.getter
    def santized(self) -> bool:
        return pulumi.get(self, "santized")

    @property
    @pulumi.getter(name="santizedFromSnapshotId")
    def santized_from_snapshot_id(self) -> str:
        return pulumi.get(self, "santized_from_snapshot_id")

    @property
    @pulumi.getter(name="santizedSnapshots")
    def santized_snapshots(self) -> str:
        return pulumi.get(self, "santized_snapshots")

    @property
    @pulumi.getter(name="snapshotFamily")
    def snapshot_family(self) -> str:
        return pulumi.get(self, "snapshot_family")

    @property
    @pulumi.getter(name="snapshotSize")
    def snapshot_size(self) -> float:
        return pulumi.get(self, "snapshot_size")

    @property
    @pulumi.getter(name="snapshotTimestamp")
    def snapshot_timestamp(self) -> str:
        return pulumi.get(self, "snapshot_timestamp")

    @property
    @pulumi.getter(name="snapshotTimestampDate")
    def snapshot_timestamp_date(self) -> int:
        return pulumi.get(self, "snapshot_timestamp_date")

    @property
    @pulumi.getter(name="snapshotUuid")
    def snapshot_uuid(self) -> str:
        return pulumi.get(self, "snapshot_uuid")

    @property
    @pulumi.getter(name="softwareDatabaseSnapshot")
    def software_database_snapshot(self) -> bool:
        return pulumi.get(self, "software_database_snapshot")

    @property
    @pulumi.getter(name="softwareSnapshot")
    def software_snapshot(self) -> str:
        return pulumi.get(self, "software_snapshot")

    @property
    @pulumi.getter(name="softwareSnapshotId")
    def software_snapshot_id(self) -> str:
        return pulumi.get(self, "software_snapshot_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeMachineId")
    def time_machine_id(self) -> str:
        return pulumi.get(self, "time_machine_id")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="toTimestamp")
    def to_timestamp(self) -> str:
        return pulumi.get(self, "to_timestamp")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilitySnapshotLcmConfigResult(dict):
    def __init__(__self__, *,
                 expiry_details: Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotLcmConfigExpiryDetailResult'],
                 post_delete_commands: Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotLcmConfigPostDeleteCommandResult'],
                 pre_delete_commands: Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotLcmConfigPreDeleteCommandResult'],
                 refresh_details: Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotLcmConfigRefreshDetailResult']):
        pulumi.set(__self__, "expiry_details", expiry_details)
        pulumi.set(__self__, "post_delete_commands", post_delete_commands)
        pulumi.set(__self__, "pre_delete_commands", pre_delete_commands)
        pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotLcmConfigExpiryDetailResult']:
        return pulumi.get(self, "expiry_details")

    @property
    @pulumi.getter(name="postDeleteCommands")
    def post_delete_commands(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotLcmConfigPostDeleteCommandResult']:
        return pulumi.get(self, "post_delete_commands")

    @property
    @pulumi.getter(name="preDeleteCommands")
    def pre_delete_commands(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotLcmConfigPreDeleteCommandResult']:
        return pulumi.get(self, "pre_delete_commands")

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotLcmConfigRefreshDetailResult']:
        return pulumi.get(self, "refresh_details")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilitySnapshotLcmConfigExpiryDetailResult(dict):
    def __init__(__self__, *,
                 delete_database: bool,
                 delete_time_machine: bool,
                 delete_vm: bool,
                 effective_timestamp: str,
                 expire_in_days: int,
                 expiry_date_timezone: str,
                 expiry_timestamp: str,
                 remind_before_in_days: int,
                 user_created: bool):
        pulumi.set(__self__, "delete_database", delete_database)
        pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        pulumi.set(__self__, "delete_vm", delete_vm)
        pulumi.set(__self__, "effective_timestamp", effective_timestamp)
        pulumi.set(__self__, "expire_in_days", expire_in_days)
        pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        pulumi.set(__self__, "expiry_timestamp", expiry_timestamp)
        pulumi.set(__self__, "remind_before_in_days", remind_before_in_days)
        pulumi.set(__self__, "user_created", user_created)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> bool:
        return pulumi.get(self, "delete_database")

    @property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> bool:
        return pulumi.get(self, "delete_time_machine")

    @property
    @pulumi.getter(name="deleteVm")
    def delete_vm(self) -> bool:
        return pulumi.get(self, "delete_vm")

    @property
    @pulumi.getter(name="effectiveTimestamp")
    def effective_timestamp(self) -> str:
        return pulumi.get(self, "effective_timestamp")

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> int:
        return pulumi.get(self, "expire_in_days")

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> str:
        return pulumi.get(self, "expiry_date_timezone")

    @property
    @pulumi.getter(name="expiryTimestamp")
    def expiry_timestamp(self) -> str:
        return pulumi.get(self, "expiry_timestamp")

    @property
    @pulumi.getter(name="remindBeforeInDays")
    def remind_before_in_days(self) -> int:
        return pulumi.get(self, "remind_before_in_days")

    @property
    @pulumi.getter(name="userCreated")
    def user_created(self) -> bool:
        return pulumi.get(self, "user_created")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilitySnapshotLcmConfigPostDeleteCommandResult(dict):
    def __init__(__self__, *,
                 command: str):
        pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> str:
        return pulumi.get(self, "command")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilitySnapshotLcmConfigPreDeleteCommandResult(dict):
    def __init__(__self__, *,
                 command: str):
        pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> str:
        return pulumi.get(self, "command")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilitySnapshotLcmConfigRefreshDetailResult(dict):
    def __init__(__self__, *,
                 last_refresh_date: str,
                 next_refresh_date: str,
                 refresh_date_timezone: str,
                 refresh_in_days: int,
                 refresh_in_hours: int,
                 refresh_in_months: int,
                 refresh_time: str):
        pulumi.set(__self__, "last_refresh_date", last_refresh_date)
        pulumi.set(__self__, "next_refresh_date", next_refresh_date)
        pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        pulumi.set(__self__, "refresh_in_hours", refresh_in_hours)
        pulumi.set(__self__, "refresh_in_months", refresh_in_months)
        pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="lastRefreshDate")
    def last_refresh_date(self) -> str:
        return pulumi.get(self, "last_refresh_date")

    @property
    @pulumi.getter(name="nextRefreshDate")
    def next_refresh_date(self) -> str:
        return pulumi.get(self, "next_refresh_date")

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> str:
        return pulumi.get(self, "refresh_date_timezone")

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> int:
        return pulumi.get(self, "refresh_in_days")

    @property
    @pulumi.getter(name="refreshInHours")
    def refresh_in_hours(self) -> int:
        return pulumi.get(self, "refresh_in_hours")

    @property
    @pulumi.getter(name="refreshInMonths")
    def refresh_in_months(self) -> int:
        return pulumi.get(self, "refresh_in_months")

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> str:
        return pulumi.get(self, "refresh_time")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilitySnapshotMetadataResult(dict):
    def __init__(__self__, *,
                 async_: bool,
                 curation_retry_count: int,
                 deregister_info: Mapping[str, str],
                 from_timestamp: str,
                 infos: Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoResult'],
                 last_replication_retyr_source_snapshot_id: str,
                 operations_using_snapshots: Sequence[str],
                 replication_retry_count: int,
                 secure_info: Mapping[str, str],
                 stand_by: bool,
                 to_timestamp: str):
        pulumi.set(__self__, "async_", async_)
        pulumi.set(__self__, "curation_retry_count", curation_retry_count)
        pulumi.set(__self__, "deregister_info", deregister_info)
        pulumi.set(__self__, "from_timestamp", from_timestamp)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "last_replication_retyr_source_snapshot_id", last_replication_retyr_source_snapshot_id)
        pulumi.set(__self__, "operations_using_snapshots", operations_using_snapshots)
        pulumi.set(__self__, "replication_retry_count", replication_retry_count)
        pulumi.set(__self__, "secure_info", secure_info)
        pulumi.set(__self__, "stand_by", stand_by)
        pulumi.set(__self__, "to_timestamp", to_timestamp)

    @property
    @pulumi.getter(name="async")
    def async_(self) -> bool:
        return pulumi.get(self, "async_")

    @property
    @pulumi.getter(name="curationRetryCount")
    def curation_retry_count(self) -> int:
        return pulumi.get(self, "curation_retry_count")

    @property
    @pulumi.getter(name="deregisterInfo")
    def deregister_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "deregister_info")

    @property
    @pulumi.getter(name="fromTimestamp")
    def from_timestamp(self) -> str:
        return pulumi.get(self, "from_timestamp")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoResult']:
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter(name="lastReplicationRetyrSourceSnapshotId")
    def last_replication_retyr_source_snapshot_id(self) -> str:
        return pulumi.get(self, "last_replication_retyr_source_snapshot_id")

    @property
    @pulumi.getter(name="operationsUsingSnapshots")
    def operations_using_snapshots(self) -> Sequence[str]:
        return pulumi.get(self, "operations_using_snapshots")

    @property
    @pulumi.getter(name="replicationRetryCount")
    def replication_retry_count(self) -> int:
        return pulumi.get(self, "replication_retry_count")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")

    @property
    @pulumi.getter(name="standBy")
    def stand_by(self) -> bool:
        return pulumi.get(self, "stand_by")

    @property
    @pulumi.getter(name="toTimestamp")
    def to_timestamp(self) -> str:
        return pulumi.get(self, "to_timestamp")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoResult(dict):
    def __init__(__self__, *,
                 bpg_configs: Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigResult'],
                 secure_info: Mapping[str, str]):
        pulumi.set(__self__, "bpg_configs", bpg_configs)
        pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="bpgConfigs")
    def bpg_configs(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigResult']:
        return pulumi.get(self, "bpg_configs")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigResult(dict):
    def __init__(__self__, *,
                 bpg_db_params: Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigBpgDbParamResult'],
                 storages: Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageResult'],
                 vm_properties: Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigVmPropertyResult']):
        pulumi.set(__self__, "bpg_db_params", bpg_db_params)
        pulumi.set(__self__, "storages", storages)
        pulumi.set(__self__, "vm_properties", vm_properties)

    @property
    @pulumi.getter(name="bpgDbParams")
    def bpg_db_params(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigBpgDbParamResult']:
        return pulumi.get(self, "bpg_db_params")

    @property
    @pulumi.getter
    def storages(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageResult']:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="vmProperties")
    def vm_properties(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigVmPropertyResult']:
        return pulumi.get(self, "vm_properties")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigBpgDbParamResult(dict):
    def __init__(__self__, *,
                 effective_cache_size: str,
                 maintenance_work_mem: str,
                 max_parallel_workers_per_gather: str,
                 max_worker_processes: str,
                 shared_buffers: str,
                 work_mem: str):
        pulumi.set(__self__, "effective_cache_size", effective_cache_size)
        pulumi.set(__self__, "maintenance_work_mem", maintenance_work_mem)
        pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        pulumi.set(__self__, "shared_buffers", shared_buffers)
        pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="effectiveCacheSize")
    def effective_cache_size(self) -> str:
        return pulumi.get(self, "effective_cache_size")

    @property
    @pulumi.getter(name="maintenanceWorkMem")
    def maintenance_work_mem(self) -> str:
        return pulumi.get(self, "maintenance_work_mem")

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> str:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> str:
        return pulumi.get(self, "max_worker_processes")

    @property
    @pulumi.getter(name="sharedBuffers")
    def shared_buffers(self) -> str:
        return pulumi.get(self, "shared_buffers")

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> str:
        return pulumi.get(self, "work_mem")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageResult(dict):
    def __init__(__self__, *,
                 archive_storages: Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageArchiveStorageResult'],
                 data_disks: Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageDataDiskResult'],
                 log_disks: Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageLogDiskResult']):
        pulumi.set(__self__, "archive_storages", archive_storages)
        pulumi.set(__self__, "data_disks", data_disks)
        pulumi.set(__self__, "log_disks", log_disks)

    @property
    @pulumi.getter(name="archiveStorages")
    def archive_storages(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageArchiveStorageResult']:
        return pulumi.get(self, "archive_storages")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageDataDiskResult']:
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="logDisks")
    def log_disks(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageLogDiskResult']:
        return pulumi.get(self, "log_disks")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageArchiveStorageResult(dict):
    def __init__(__self__, *,
                 size: float):
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> float:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageDataDiskResult(dict):
    def __init__(__self__, *,
                 count: float):
        pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> float:
        return pulumi.get(self, "count")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageLogDiskResult(dict):
    def __init__(__self__, *,
                 count: float,
                 size: float):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> float:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def size(self) -> float:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigVmPropertyResult(dict):
    def __init__(__self__, *,
                 dirty_background_ratio: float,
                 dirty_expire_centisecs: float,
                 dirty_ratio: float,
                 dirty_writeback_centisecs: float,
                 nr_hugepages: float,
                 overcommit_memory: float,
                 swappiness: float):
        pulumi.set(__self__, "dirty_background_ratio", dirty_background_ratio)
        pulumi.set(__self__, "dirty_expire_centisecs", dirty_expire_centisecs)
        pulumi.set(__self__, "dirty_ratio", dirty_ratio)
        pulumi.set(__self__, "dirty_writeback_centisecs", dirty_writeback_centisecs)
        pulumi.set(__self__, "nr_hugepages", nr_hugepages)
        pulumi.set(__self__, "overcommit_memory", overcommit_memory)
        pulumi.set(__self__, "swappiness", swappiness)

    @property
    @pulumi.getter(name="dirtyBackgroundRatio")
    def dirty_background_ratio(self) -> float:
        return pulumi.get(self, "dirty_background_ratio")

    @property
    @pulumi.getter(name="dirtyExpireCentisecs")
    def dirty_expire_centisecs(self) -> float:
        return pulumi.get(self, "dirty_expire_centisecs")

    @property
    @pulumi.getter(name="dirtyRatio")
    def dirty_ratio(self) -> float:
        return pulumi.get(self, "dirty_ratio")

    @property
    @pulumi.getter(name="dirtyWritebackCentisecs")
    def dirty_writeback_centisecs(self) -> float:
        return pulumi.get(self, "dirty_writeback_centisecs")

    @property
    @pulumi.getter(name="nrHugepages")
    def nr_hugepages(self) -> float:
        return pulumi.get(self, "nr_hugepages")

    @property
    @pulumi.getter(name="overcommitMemory")
    def overcommit_memory(self) -> float:
        return pulumi.get(self, "overcommit_memory")

    @property
    @pulumi.getter
    def swappiness(self) -> float:
        return pulumi.get(self, "swappiness")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilitySnapshotPropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbTmsCapabilityCapabilitySnapshotTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbTmsCapabilityLastContinuousSnapshotResult(dict):
    def __init__(__self__, *,
                 app_info_version: str,
                 applicable_types: Sequence[str],
                 database_node_id: str,
                 database_snapshot: bool,
                 date_created: str,
                 date_modified: str,
                 dbserver_id: str,
                 dbserver_ip: str,
                 dbserver_name: str,
                 dbserver_storage_metadata_version: int,
                 description: str,
                 from_timestamp: str,
                 id: str,
                 lcm_configs: Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigResult'],
                 metadatas: Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataResult'],
                 name: str,
                 nx_cluster_id: str,
                 owner_id: str,
                 parent_snapshot: bool,
                 parent_snapshot_id: str,
                 processed: bool,
                 properties: Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotPropertyResult'],
                 protection_domain_id: str,
                 replicated_snapshots: Sequence[str],
                 santized: bool,
                 santized_from_snapshot_id: str,
                 santized_snapshots: str,
                 snapshot_family: str,
                 snapshot_size: float,
                 snapshot_timestamp: str,
                 snapshot_timestamp_date: int,
                 snapshot_uuid: str,
                 software_database_snapshot: bool,
                 software_snapshot: str,
                 software_snapshot_id: str,
                 status: str,
                 tags: Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotTagResult'],
                 time_machine_id: str,
                 timezone: str,
                 to_timestamp: str,
                 type: str):
        """
        :param Sequence['GetNdbTmsCapabilityLastContinuousSnapshotPropertyArgs'] properties: List of all the properties
        """
        pulumi.set(__self__, "app_info_version", app_info_version)
        pulumi.set(__self__, "applicable_types", applicable_types)
        pulumi.set(__self__, "database_node_id", database_node_id)
        pulumi.set(__self__, "database_snapshot", database_snapshot)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "dbserver_id", dbserver_id)
        pulumi.set(__self__, "dbserver_ip", dbserver_ip)
        pulumi.set(__self__, "dbserver_name", dbserver_name)
        pulumi.set(__self__, "dbserver_storage_metadata_version", dbserver_storage_metadata_version)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "from_timestamp", from_timestamp)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lcm_configs", lcm_configs)
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "parent_snapshot", parent_snapshot)
        pulumi.set(__self__, "parent_snapshot_id", parent_snapshot_id)
        pulumi.set(__self__, "processed", processed)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "protection_domain_id", protection_domain_id)
        pulumi.set(__self__, "replicated_snapshots", replicated_snapshots)
        pulumi.set(__self__, "santized", santized)
        pulumi.set(__self__, "santized_from_snapshot_id", santized_from_snapshot_id)
        pulumi.set(__self__, "santized_snapshots", santized_snapshots)
        pulumi.set(__self__, "snapshot_family", snapshot_family)
        pulumi.set(__self__, "snapshot_size", snapshot_size)
        pulumi.set(__self__, "snapshot_timestamp", snapshot_timestamp)
        pulumi.set(__self__, "snapshot_timestamp_date", snapshot_timestamp_date)
        pulumi.set(__self__, "snapshot_uuid", snapshot_uuid)
        pulumi.set(__self__, "software_database_snapshot", software_database_snapshot)
        pulumi.set(__self__, "software_snapshot", software_snapshot)
        pulumi.set(__self__, "software_snapshot_id", software_snapshot_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "time_machine_id", time_machine_id)
        pulumi.set(__self__, "timezone", timezone)
        pulumi.set(__self__, "to_timestamp", to_timestamp)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="appInfoVersion")
    def app_info_version(self) -> str:
        return pulumi.get(self, "app_info_version")

    @property
    @pulumi.getter(name="applicableTypes")
    def applicable_types(self) -> Sequence[str]:
        return pulumi.get(self, "applicable_types")

    @property
    @pulumi.getter(name="databaseNodeId")
    def database_node_id(self) -> str:
        return pulumi.get(self, "database_node_id")

    @property
    @pulumi.getter(name="databaseSnapshot")
    def database_snapshot(self) -> bool:
        return pulumi.get(self, "database_snapshot")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter(name="dbserverId")
    def dbserver_id(self) -> str:
        return pulumi.get(self, "dbserver_id")

    @property
    @pulumi.getter(name="dbserverIp")
    def dbserver_ip(self) -> str:
        return pulumi.get(self, "dbserver_ip")

    @property
    @pulumi.getter(name="dbserverName")
    def dbserver_name(self) -> str:
        return pulumi.get(self, "dbserver_name")

    @property
    @pulumi.getter(name="dbserverStorageMetadataVersion")
    def dbserver_storage_metadata_version(self) -> int:
        return pulumi.get(self, "dbserver_storage_metadata_version")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fromTimestamp")
    def from_timestamp(self) -> str:
        return pulumi.get(self, "from_timestamp")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lcmConfigs")
    def lcm_configs(self) -> Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigResult']:
        return pulumi.get(self, "lcm_configs")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataResult']:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> str:
        return pulumi.get(self, "nx_cluster_id")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="parentSnapshot")
    def parent_snapshot(self) -> bool:
        return pulumi.get(self, "parent_snapshot")

    @property
    @pulumi.getter(name="parentSnapshotId")
    def parent_snapshot_id(self) -> str:
        return pulumi.get(self, "parent_snapshot_id")

    @property
    @pulumi.getter
    def processed(self) -> bool:
        return pulumi.get(self, "processed")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotPropertyResult']:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="protectionDomainId")
    def protection_domain_id(self) -> str:
        return pulumi.get(self, "protection_domain_id")

    @property
    @pulumi.getter(name="replicatedSnapshots")
    def replicated_snapshots(self) -> Sequence[str]:
        return pulumi.get(self, "replicated_snapshots")

    @property
    @pulumi.getter
    def santized(self) -> bool:
        return pulumi.get(self, "santized")

    @property
    @pulumi.getter(name="santizedFromSnapshotId")
    def santized_from_snapshot_id(self) -> str:
        return pulumi.get(self, "santized_from_snapshot_id")

    @property
    @pulumi.getter(name="santizedSnapshots")
    def santized_snapshots(self) -> str:
        return pulumi.get(self, "santized_snapshots")

    @property
    @pulumi.getter(name="snapshotFamily")
    def snapshot_family(self) -> str:
        return pulumi.get(self, "snapshot_family")

    @property
    @pulumi.getter(name="snapshotSize")
    def snapshot_size(self) -> float:
        return pulumi.get(self, "snapshot_size")

    @property
    @pulumi.getter(name="snapshotTimestamp")
    def snapshot_timestamp(self) -> str:
        return pulumi.get(self, "snapshot_timestamp")

    @property
    @pulumi.getter(name="snapshotTimestampDate")
    def snapshot_timestamp_date(self) -> int:
        return pulumi.get(self, "snapshot_timestamp_date")

    @property
    @pulumi.getter(name="snapshotUuid")
    def snapshot_uuid(self) -> str:
        return pulumi.get(self, "snapshot_uuid")

    @property
    @pulumi.getter(name="softwareDatabaseSnapshot")
    def software_database_snapshot(self) -> bool:
        return pulumi.get(self, "software_database_snapshot")

    @property
    @pulumi.getter(name="softwareSnapshot")
    def software_snapshot(self) -> str:
        return pulumi.get(self, "software_snapshot")

    @property
    @pulumi.getter(name="softwareSnapshotId")
    def software_snapshot_id(self) -> str:
        return pulumi.get(self, "software_snapshot_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeMachineId")
    def time_machine_id(self) -> str:
        return pulumi.get(self, "time_machine_id")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="toTimestamp")
    def to_timestamp(self) -> str:
        return pulumi.get(self, "to_timestamp")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigResult(dict):
    def __init__(__self__, *,
                 expiry_details: Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigExpiryDetailResult'],
                 post_delete_commands: Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigPostDeleteCommandResult'],
                 pre_delete_commands: Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigPreDeleteCommandResult'],
                 refresh_details: Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigRefreshDetailResult']):
        pulumi.set(__self__, "expiry_details", expiry_details)
        pulumi.set(__self__, "post_delete_commands", post_delete_commands)
        pulumi.set(__self__, "pre_delete_commands", pre_delete_commands)
        pulumi.set(__self__, "refresh_details", refresh_details)

    @property
    @pulumi.getter(name="expiryDetails")
    def expiry_details(self) -> Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigExpiryDetailResult']:
        return pulumi.get(self, "expiry_details")

    @property
    @pulumi.getter(name="postDeleteCommands")
    def post_delete_commands(self) -> Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigPostDeleteCommandResult']:
        return pulumi.get(self, "post_delete_commands")

    @property
    @pulumi.getter(name="preDeleteCommands")
    def pre_delete_commands(self) -> Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigPreDeleteCommandResult']:
        return pulumi.get(self, "pre_delete_commands")

    @property
    @pulumi.getter(name="refreshDetails")
    def refresh_details(self) -> Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigRefreshDetailResult']:
        return pulumi.get(self, "refresh_details")


@pulumi.output_type
class GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigExpiryDetailResult(dict):
    def __init__(__self__, *,
                 delete_database: bool,
                 delete_time_machine: bool,
                 delete_vm: bool,
                 effective_timestamp: str,
                 expire_in_days: int,
                 expiry_date_timezone: str,
                 expiry_timestamp: str,
                 remind_before_in_days: int,
                 user_created: bool):
        pulumi.set(__self__, "delete_database", delete_database)
        pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        pulumi.set(__self__, "delete_vm", delete_vm)
        pulumi.set(__self__, "effective_timestamp", effective_timestamp)
        pulumi.set(__self__, "expire_in_days", expire_in_days)
        pulumi.set(__self__, "expiry_date_timezone", expiry_date_timezone)
        pulumi.set(__self__, "expiry_timestamp", expiry_timestamp)
        pulumi.set(__self__, "remind_before_in_days", remind_before_in_days)
        pulumi.set(__self__, "user_created", user_created)

    @property
    @pulumi.getter(name="deleteDatabase")
    def delete_database(self) -> bool:
        return pulumi.get(self, "delete_database")

    @property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> bool:
        return pulumi.get(self, "delete_time_machine")

    @property
    @pulumi.getter(name="deleteVm")
    def delete_vm(self) -> bool:
        return pulumi.get(self, "delete_vm")

    @property
    @pulumi.getter(name="effectiveTimestamp")
    def effective_timestamp(self) -> str:
        return pulumi.get(self, "effective_timestamp")

    @property
    @pulumi.getter(name="expireInDays")
    def expire_in_days(self) -> int:
        return pulumi.get(self, "expire_in_days")

    @property
    @pulumi.getter(name="expiryDateTimezone")
    def expiry_date_timezone(self) -> str:
        return pulumi.get(self, "expiry_date_timezone")

    @property
    @pulumi.getter(name="expiryTimestamp")
    def expiry_timestamp(self) -> str:
        return pulumi.get(self, "expiry_timestamp")

    @property
    @pulumi.getter(name="remindBeforeInDays")
    def remind_before_in_days(self) -> int:
        return pulumi.get(self, "remind_before_in_days")

    @property
    @pulumi.getter(name="userCreated")
    def user_created(self) -> bool:
        return pulumi.get(self, "user_created")


@pulumi.output_type
class GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigPostDeleteCommandResult(dict):
    def __init__(__self__, *,
                 command: str):
        pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> str:
        return pulumi.get(self, "command")


@pulumi.output_type
class GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigPreDeleteCommandResult(dict):
    def __init__(__self__, *,
                 command: str):
        pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> str:
        return pulumi.get(self, "command")


@pulumi.output_type
class GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigRefreshDetailResult(dict):
    def __init__(__self__, *,
                 last_refresh_date: str,
                 next_refresh_date: str,
                 refresh_date_timezone: str,
                 refresh_in_days: int,
                 refresh_in_hours: int,
                 refresh_in_months: int,
                 refresh_time: str):
        pulumi.set(__self__, "last_refresh_date", last_refresh_date)
        pulumi.set(__self__, "next_refresh_date", next_refresh_date)
        pulumi.set(__self__, "refresh_date_timezone", refresh_date_timezone)
        pulumi.set(__self__, "refresh_in_days", refresh_in_days)
        pulumi.set(__self__, "refresh_in_hours", refresh_in_hours)
        pulumi.set(__self__, "refresh_in_months", refresh_in_months)
        pulumi.set(__self__, "refresh_time", refresh_time)

    @property
    @pulumi.getter(name="lastRefreshDate")
    def last_refresh_date(self) -> str:
        return pulumi.get(self, "last_refresh_date")

    @property
    @pulumi.getter(name="nextRefreshDate")
    def next_refresh_date(self) -> str:
        return pulumi.get(self, "next_refresh_date")

    @property
    @pulumi.getter(name="refreshDateTimezone")
    def refresh_date_timezone(self) -> str:
        return pulumi.get(self, "refresh_date_timezone")

    @property
    @pulumi.getter(name="refreshInDays")
    def refresh_in_days(self) -> int:
        return pulumi.get(self, "refresh_in_days")

    @property
    @pulumi.getter(name="refreshInHours")
    def refresh_in_hours(self) -> int:
        return pulumi.get(self, "refresh_in_hours")

    @property
    @pulumi.getter(name="refreshInMonths")
    def refresh_in_months(self) -> int:
        return pulumi.get(self, "refresh_in_months")

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> str:
        return pulumi.get(self, "refresh_time")


@pulumi.output_type
class GetNdbTmsCapabilityLastContinuousSnapshotMetadataResult(dict):
    def __init__(__self__, *,
                 async_: bool,
                 curation_retry_count: int,
                 deregister_info: Mapping[str, str],
                 from_timestamp: str,
                 infos: Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoResult'],
                 last_replication_retry_source_snapshot_id: str,
                 last_replication_retry_timestamp: str,
                 operations_using_snapshots: Sequence[str],
                 replication_retry_count: int,
                 secure_info: Mapping[str, str],
                 stand_by: bool,
                 to_timestamp: str):
        pulumi.set(__self__, "async_", async_)
        pulumi.set(__self__, "curation_retry_count", curation_retry_count)
        pulumi.set(__self__, "deregister_info", deregister_info)
        pulumi.set(__self__, "from_timestamp", from_timestamp)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "last_replication_retry_source_snapshot_id", last_replication_retry_source_snapshot_id)
        pulumi.set(__self__, "last_replication_retry_timestamp", last_replication_retry_timestamp)
        pulumi.set(__self__, "operations_using_snapshots", operations_using_snapshots)
        pulumi.set(__self__, "replication_retry_count", replication_retry_count)
        pulumi.set(__self__, "secure_info", secure_info)
        pulumi.set(__self__, "stand_by", stand_by)
        pulumi.set(__self__, "to_timestamp", to_timestamp)

    @property
    @pulumi.getter(name="async")
    def async_(self) -> bool:
        return pulumi.get(self, "async_")

    @property
    @pulumi.getter(name="curationRetryCount")
    def curation_retry_count(self) -> int:
        return pulumi.get(self, "curation_retry_count")

    @property
    @pulumi.getter(name="deregisterInfo")
    def deregister_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "deregister_info")

    @property
    @pulumi.getter(name="fromTimestamp")
    def from_timestamp(self) -> str:
        return pulumi.get(self, "from_timestamp")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoResult']:
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter(name="lastReplicationRetrySourceSnapshotId")
    def last_replication_retry_source_snapshot_id(self) -> str:
        return pulumi.get(self, "last_replication_retry_source_snapshot_id")

    @property
    @pulumi.getter(name="lastReplicationRetryTimestamp")
    def last_replication_retry_timestamp(self) -> str:
        return pulumi.get(self, "last_replication_retry_timestamp")

    @property
    @pulumi.getter(name="operationsUsingSnapshots")
    def operations_using_snapshots(self) -> Sequence[str]:
        return pulumi.get(self, "operations_using_snapshots")

    @property
    @pulumi.getter(name="replicationRetryCount")
    def replication_retry_count(self) -> int:
        return pulumi.get(self, "replication_retry_count")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")

    @property
    @pulumi.getter(name="standBy")
    def stand_by(self) -> bool:
        return pulumi.get(self, "stand_by")

    @property
    @pulumi.getter(name="toTimestamp")
    def to_timestamp(self) -> str:
        return pulumi.get(self, "to_timestamp")


@pulumi.output_type
class GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoResult(dict):
    def __init__(__self__, *,
                 bpg_configs: Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigResult'],
                 secure_info: Mapping[str, str]):
        pulumi.set(__self__, "bpg_configs", bpg_configs)
        pulumi.set(__self__, "secure_info", secure_info)

    @property
    @pulumi.getter(name="bpgConfigs")
    def bpg_configs(self) -> Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigResult']:
        return pulumi.get(self, "bpg_configs")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")


@pulumi.output_type
class GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigResult(dict):
    def __init__(__self__, *,
                 bpg_db_params: Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigBpgDbParamResult'],
                 storages: Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageResult'],
                 vm_properties: Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigVmPropertyResult']):
        pulumi.set(__self__, "bpg_db_params", bpg_db_params)
        pulumi.set(__self__, "storages", storages)
        pulumi.set(__self__, "vm_properties", vm_properties)

    @property
    @pulumi.getter(name="bpgDbParams")
    def bpg_db_params(self) -> Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigBpgDbParamResult']:
        return pulumi.get(self, "bpg_db_params")

    @property
    @pulumi.getter
    def storages(self) -> Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageResult']:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="vmProperties")
    def vm_properties(self) -> Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigVmPropertyResult']:
        return pulumi.get(self, "vm_properties")


@pulumi.output_type
class GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigBpgDbParamResult(dict):
    def __init__(__self__, *,
                 effective_cache_size: str,
                 maintenance_work_mem: str,
                 max_parallel_workers_per_gather: str,
                 max_worker_processes: str,
                 shared_buffers: str,
                 work_mem: str):
        pulumi.set(__self__, "effective_cache_size", effective_cache_size)
        pulumi.set(__self__, "maintenance_work_mem", maintenance_work_mem)
        pulumi.set(__self__, "max_parallel_workers_per_gather", max_parallel_workers_per_gather)
        pulumi.set(__self__, "max_worker_processes", max_worker_processes)
        pulumi.set(__self__, "shared_buffers", shared_buffers)
        pulumi.set(__self__, "work_mem", work_mem)

    @property
    @pulumi.getter(name="effectiveCacheSize")
    def effective_cache_size(self) -> str:
        return pulumi.get(self, "effective_cache_size")

    @property
    @pulumi.getter(name="maintenanceWorkMem")
    def maintenance_work_mem(self) -> str:
        return pulumi.get(self, "maintenance_work_mem")

    @property
    @pulumi.getter(name="maxParallelWorkersPerGather")
    def max_parallel_workers_per_gather(self) -> str:
        return pulumi.get(self, "max_parallel_workers_per_gather")

    @property
    @pulumi.getter(name="maxWorkerProcesses")
    def max_worker_processes(self) -> str:
        return pulumi.get(self, "max_worker_processes")

    @property
    @pulumi.getter(name="sharedBuffers")
    def shared_buffers(self) -> str:
        return pulumi.get(self, "shared_buffers")

    @property
    @pulumi.getter(name="workMem")
    def work_mem(self) -> str:
        return pulumi.get(self, "work_mem")


@pulumi.output_type
class GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageResult(dict):
    def __init__(__self__, *,
                 archive_storages: Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageArchiveStorageResult'],
                 data_disks: Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageDataDiskResult'],
                 log_disks: Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageLogDiskResult']):
        pulumi.set(__self__, "archive_storages", archive_storages)
        pulumi.set(__self__, "data_disks", data_disks)
        pulumi.set(__self__, "log_disks", log_disks)

    @property
    @pulumi.getter(name="archiveStorages")
    def archive_storages(self) -> Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageArchiveStorageResult']:
        return pulumi.get(self, "archive_storages")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageDataDiskResult']:
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="logDisks")
    def log_disks(self) -> Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageLogDiskResult']:
        return pulumi.get(self, "log_disks")


@pulumi.output_type
class GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageArchiveStorageResult(dict):
    def __init__(__self__, *,
                 size: float):
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> float:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageDataDiskResult(dict):
    def __init__(__self__, *,
                 count: float):
        pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> float:
        return pulumi.get(self, "count")


@pulumi.output_type
class GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageLogDiskResult(dict):
    def __init__(__self__, *,
                 count: float,
                 size: float):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> float:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def size(self) -> float:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigVmPropertyResult(dict):
    def __init__(__self__, *,
                 dirty_background_ratio: float,
                 dirty_expire_centisecs: float,
                 dirty_ratio: float,
                 dirty_writeback_centisecs: float,
                 nr_hugepages: float,
                 overcommit_memory: float,
                 swappiness: float):
        pulumi.set(__self__, "dirty_background_ratio", dirty_background_ratio)
        pulumi.set(__self__, "dirty_expire_centisecs", dirty_expire_centisecs)
        pulumi.set(__self__, "dirty_ratio", dirty_ratio)
        pulumi.set(__self__, "dirty_writeback_centisecs", dirty_writeback_centisecs)
        pulumi.set(__self__, "nr_hugepages", nr_hugepages)
        pulumi.set(__self__, "overcommit_memory", overcommit_memory)
        pulumi.set(__self__, "swappiness", swappiness)

    @property
    @pulumi.getter(name="dirtyBackgroundRatio")
    def dirty_background_ratio(self) -> float:
        return pulumi.get(self, "dirty_background_ratio")

    @property
    @pulumi.getter(name="dirtyExpireCentisecs")
    def dirty_expire_centisecs(self) -> float:
        return pulumi.get(self, "dirty_expire_centisecs")

    @property
    @pulumi.getter(name="dirtyRatio")
    def dirty_ratio(self) -> float:
        return pulumi.get(self, "dirty_ratio")

    @property
    @pulumi.getter(name="dirtyWritebackCentisecs")
    def dirty_writeback_centisecs(self) -> float:
        return pulumi.get(self, "dirty_writeback_centisecs")

    @property
    @pulumi.getter(name="nrHugepages")
    def nr_hugepages(self) -> float:
        return pulumi.get(self, "nr_hugepages")

    @property
    @pulumi.getter(name="overcommitMemory")
    def overcommit_memory(self) -> float:
        return pulumi.get(self, "overcommit_memory")

    @property
    @pulumi.getter
    def swappiness(self) -> float:
        return pulumi.get(self, "swappiness")


@pulumi.output_type
class GetNdbTmsCapabilityLastContinuousSnapshotPropertyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 ref_id: str,
                 secure: bool,
                 value: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "secure", secure)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbTmsCapabilityLastContinuousSnapshotTagResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 tag_id: str,
                 tag_name: str,
                 value: str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "tag_id", tag_id)
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNdbTmsCapabilityLastDbLogResult(dict):
    def __init__(__self__, *,
                 database_id: str,
                 database_node_id: str,
                 date_created: str,
                 date_modified: str,
                 era_log_drive_id: str,
                 from_time: str,
                 id: str,
                 log_copy_operation_id: str,
                 message: str,
                 metadatas: Sequence['outputs.GetNdbTmsCapabilityLastDbLogMetadataResult'],
                 name: str,
                 owner_id: str,
                 size: int,
                 status: str,
                 to_time: str,
                 unprocessed: bool):
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "database_node_id", database_node_id)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "date_modified", date_modified)
        pulumi.set(__self__, "era_log_drive_id", era_log_drive_id)
        pulumi.set(__self__, "from_time", from_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "log_copy_operation_id", log_copy_operation_id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "to_time", to_time)
        pulumi.set(__self__, "unprocessed", unprocessed)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> str:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseNodeId")
    def database_node_id(self) -> str:
        return pulumi.get(self, "database_node_id")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> str:
        return pulumi.get(self, "date_modified")

    @property
    @pulumi.getter(name="eraLogDriveId")
    def era_log_drive_id(self) -> str:
        return pulumi.get(self, "era_log_drive_id")

    @property
    @pulumi.getter(name="fromTime")
    def from_time(self) -> str:
        return pulumi.get(self, "from_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="logCopyOperationId")
    def log_copy_operation_id(self) -> str:
        return pulumi.get(self, "log_copy_operation_id")

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetNdbTmsCapabilityLastDbLogMetadataResult']:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="toTime")
    def to_time(self) -> str:
        return pulumi.get(self, "to_time")

    @property
    @pulumi.getter
    def unprocessed(self) -> bool:
        return pulumi.get(self, "unprocessed")


@pulumi.output_type
class GetNdbTmsCapabilityLastDbLogMetadataResult(dict):
    def __init__(__self__, *,
                 created_directly: bool,
                 curation_retry_count: int,
                 deregister_infos: Sequence['outputs.GetNdbTmsCapabilityLastDbLogMetadataDeregisterInfoResult'],
                 info: Mapping[str, str],
                 secure_info: Mapping[str, str],
                 updated_directly: bool):
        pulumi.set(__self__, "created_directly", created_directly)
        pulumi.set(__self__, "curation_retry_count", curation_retry_count)
        pulumi.set(__self__, "deregister_infos", deregister_infos)
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "secure_info", secure_info)
        pulumi.set(__self__, "updated_directly", updated_directly)

    @property
    @pulumi.getter(name="createdDirectly")
    def created_directly(self) -> bool:
        return pulumi.get(self, "created_directly")

    @property
    @pulumi.getter(name="curationRetryCount")
    def curation_retry_count(self) -> int:
        return pulumi.get(self, "curation_retry_count")

    @property
    @pulumi.getter(name="deregisterInfos")
    def deregister_infos(self) -> Sequence['outputs.GetNdbTmsCapabilityLastDbLogMetadataDeregisterInfoResult']:
        return pulumi.get(self, "deregister_infos")

    @property
    @pulumi.getter
    def info(self) -> Mapping[str, str]:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="secureInfo")
    def secure_info(self) -> Mapping[str, str]:
        return pulumi.get(self, "secure_info")

    @property
    @pulumi.getter(name="updatedDirectly")
    def updated_directly(self) -> bool:
        return pulumi.get(self, "updated_directly")


@pulumi.output_type
class GetNdbTmsCapabilityLastDbLogMetadataDeregisterInfoResult(dict):
    def __init__(__self__, *,
                 message: str,
                 operations: Sequence[str]):
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "operations", operations)

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def operations(self) -> Sequence[str]:
        return pulumi.get(self, "operations")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleInboundAllowListResult(dict):
    def __init__(__self__, *,
                 address_group_inclusion_lists: Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionListResult'],
                 expiration_time: str,
                 filter_kind_lists: Sequence[str],
                 filter_params: Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListFilterParamResult'],
                 filter_type: str,
                 icmp_type_code_lists: Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeListResult'],
                 ip_subnet: str,
                 ip_subnet_prefix_length: str,
                 network_function_chain_reference: Mapping[str, str],
                 peer_specification_type: str,
                 protocol: str,
                 service_group_lists: Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListServiceGroupListResult'],
                 tcp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeListResult'],
                 udp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeListResult']):
        pulumi.set(__self__, "address_group_inclusion_lists", address_group_inclusion_lists)
        pulumi.set(__self__, "expiration_time", expiration_time)
        pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        pulumi.set(__self__, "filter_params", filter_params)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        pulumi.set(__self__, "ip_subnet", ip_subnet)
        pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "service_group_lists", service_group_lists)
        pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="addressGroupInclusionLists")
    def address_group_inclusion_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionListResult']:
        return pulumi.get(self, "address_group_inclusion_lists")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> str:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Sequence[str]:
        return pulumi.get(self, "filter_kind_lists")

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListFilterParamResult']:
        return pulumi.get(self, "filter_params")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeListResult']:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> str:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> str:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> str:
        return pulumi.get(self, "peer_specification_type")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceGroupLists")
    def service_group_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListServiceGroupListResult']:
        return pulumi.get(self, "service_group_lists")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeListResult']:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeListResult']:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleInboundAllowListFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeListResult(dict):
    def __init__(__self__, *,
                 code: str,
                 type: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleInboundAllowListServiceGroupListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleOutboundAllowListResult(dict):
    def __init__(__self__, *,
                 address_group_inclusion_lists: Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListResult'],
                 expiration_time: str,
                 filter_kind_lists: Sequence[str],
                 filter_params: Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListFilterParamResult'],
                 filter_type: str,
                 icmp_type_code_lists: Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeListResult'],
                 ip_subnet: str,
                 ip_subnet_prefix_length: str,
                 network_function_chain_reference: Mapping[str, str],
                 peer_specification_type: str,
                 protocol: str,
                 service_group_lists: Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListResult'],
                 tcp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeListResult'],
                 udp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeListResult']):
        pulumi.set(__self__, "address_group_inclusion_lists", address_group_inclusion_lists)
        pulumi.set(__self__, "expiration_time", expiration_time)
        pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        pulumi.set(__self__, "filter_params", filter_params)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        pulumi.set(__self__, "ip_subnet", ip_subnet)
        pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "service_group_lists", service_group_lists)
        pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="addressGroupInclusionLists")
    def address_group_inclusion_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListResult']:
        return pulumi.get(self, "address_group_inclusion_lists")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> str:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Sequence[str]:
        return pulumi.get(self, "filter_kind_lists")

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListFilterParamResult']:
        return pulumi.get(self, "filter_params")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeListResult']:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> str:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> str:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> str:
        return pulumi.get(self, "peer_specification_type")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceGroupLists")
    def service_group_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListResult']:
        return pulumi.get(self, "service_group_lists")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeListResult']:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeListResult']:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleOutboundAllowListFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeListResult(dict):
    def __init__(__self__, *,
                 code: str,
                 type: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleTargetGroupFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleInboundAllowListResult(dict):
    def __init__(__self__, *,
                 address_group_inclusion_lists: Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionListResult'],
                 expiration_time: str,
                 filter_kind_lists: Sequence[str],
                 filter_params: Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListFilterParamResult'],
                 filter_type: str,
                 icmp_type_code_lists: Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeListResult'],
                 ip_subnet: str,
                 ip_subnet_prefix_length: str,
                 network_function_chain_reference: Mapping[str, str],
                 peer_specification_type: str,
                 protocol: str,
                 service_group_lists: Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListServiceGroupListResult'],
                 tcp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeListResult'],
                 udp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeListResult']):
        pulumi.set(__self__, "address_group_inclusion_lists", address_group_inclusion_lists)
        pulumi.set(__self__, "expiration_time", expiration_time)
        pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        pulumi.set(__self__, "filter_params", filter_params)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        pulumi.set(__self__, "ip_subnet", ip_subnet)
        pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "service_group_lists", service_group_lists)
        pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="addressGroupInclusionLists")
    def address_group_inclusion_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionListResult']:
        return pulumi.get(self, "address_group_inclusion_lists")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> str:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Sequence[str]:
        return pulumi.get(self, "filter_kind_lists")

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListFilterParamResult']:
        return pulumi.get(self, "filter_params")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeListResult']:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> str:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> str:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> str:
        return pulumi.get(self, "peer_specification_type")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceGroupLists")
    def service_group_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListServiceGroupListResult']:
        return pulumi.get(self, "service_group_lists")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeListResult']:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeListResult']:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleInboundAllowListFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeListResult(dict):
    def __init__(__self__, *,
                 code: str,
                 type: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleInboundAllowListServiceGroupListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleOutboundAllowListResult(dict):
    def __init__(__self__, *,
                 expiration_time: str,
                 filter_kind_lists: Sequence[str],
                 filter_params: Sequence['outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListFilterParamResult'],
                 filter_type: str,
                 icmp_type_code_lists: Sequence['outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeListResult'],
                 ip_subnet: str,
                 ip_subnet_prefix_length: str,
                 network_function_chain_reference: Mapping[str, str],
                 peer_specification_type: str,
                 protocol: str,
                 tcp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeListResult'],
                 udp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeListResult']):
        pulumi.set(__self__, "expiration_time", expiration_time)
        pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        pulumi.set(__self__, "filter_params", filter_params)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        pulumi.set(__self__, "ip_subnet", ip_subnet)
        pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> str:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Sequence[str]:
        return pulumi.get(self, "filter_kind_lists")

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Sequence['outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListFilterParamResult']:
        return pulumi.get(self, "filter_params")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeListResult']:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> str:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> str:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> str:
        return pulumi.get(self, "peer_specification_type")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeListResult']:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeListResult']:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleOutboundAllowListFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeListResult(dict):
    def __init__(__self__, *,
                 code: str,
                 type: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleTargetGroupFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkSecurityRuleCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name.
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetworkSecurityRuleIsolationRuleFirstEntityFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkSecurityRuleIsolationRuleSecondEntityFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleInboundAllowListResult(dict):
    def __init__(__self__, *,
                 expiration_time: str,
                 filter_kind_lists: Sequence[str],
                 filter_params: Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListFilterParamResult'],
                 filter_type: str,
                 icmp_type_code_lists: Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListIcmpTypeCodeListResult'],
                 ip_subnet: str,
                 ip_subnet_prefix_length: str,
                 network_function_chain_reference: Mapping[str, str],
                 peer_specification_type: str,
                 protocol: str,
                 tcp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListTcpPortRangeListResult'],
                 udp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListUdpPortRangeListResult']):
        pulumi.set(__self__, "expiration_time", expiration_time)
        pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        pulumi.set(__self__, "filter_params", filter_params)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        pulumi.set(__self__, "ip_subnet", ip_subnet)
        pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> str:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Sequence[str]:
        return pulumi.get(self, "filter_kind_lists")

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListFilterParamResult']:
        return pulumi.get(self, "filter_params")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListIcmpTypeCodeListResult']:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> str:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> str:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> str:
        return pulumi.get(self, "peer_specification_type")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListTcpPortRangeListResult']:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListUdpPortRangeListResult']:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleInboundAllowListFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleInboundAllowListIcmpTypeCodeListResult(dict):
    def __init__(__self__, *,
                 code: str,
                 type: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleInboundAllowListTcpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleInboundAllowListUdpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleOutboundAllowListResult(dict):
    def __init__(__self__, *,
                 address_group_inclusion_lists: Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListAddressGroupInclusionListResult'],
                 expiration_time: str,
                 filter_kind_lists: Sequence[str],
                 filter_params: Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListFilterParamResult'],
                 filter_type: str,
                 icmp_type_code_lists: Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListIcmpTypeCodeListResult'],
                 ip_subnet: str,
                 ip_subnet_prefix_length: str,
                 network_function_chain_reference: Mapping[str, str],
                 peer_specification_type: str,
                 protocol: str,
                 service_group_lists: Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListServiceGroupListResult'],
                 tcp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListTcpPortRangeListResult'],
                 udp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListUdpPortRangeListResult']):
        pulumi.set(__self__, "address_group_inclusion_lists", address_group_inclusion_lists)
        pulumi.set(__self__, "expiration_time", expiration_time)
        pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        pulumi.set(__self__, "filter_params", filter_params)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        pulumi.set(__self__, "ip_subnet", ip_subnet)
        pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "service_group_lists", service_group_lists)
        pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="addressGroupInclusionLists")
    def address_group_inclusion_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListAddressGroupInclusionListResult']:
        return pulumi.get(self, "address_group_inclusion_lists")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> str:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Sequence[str]:
        return pulumi.get(self, "filter_kind_lists")

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListFilterParamResult']:
        return pulumi.get(self, "filter_params")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListIcmpTypeCodeListResult']:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> str:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> str:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> str:
        return pulumi.get(self, "peer_specification_type")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceGroupLists")
    def service_group_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListServiceGroupListResult']:
        return pulumi.get(self, "service_group_lists")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListTcpPortRangeListResult']:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListUdpPortRangeListResult']:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleOutboundAllowListAddressGroupInclusionListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleOutboundAllowListFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleOutboundAllowListIcmpTypeCodeListResult(dict):
    def __init__(__self__, *,
                 code: str,
                 type: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleOutboundAllowListServiceGroupListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleOutboundAllowListTcpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleOutboundAllowListUdpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleTargetGroupFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPbrSpecResult(dict):
    def __init__(__self__, *,
                 name: str,
                 resources: Sequence['outputs.GetPbrSpecResourceResult']):
        """
        :param str name: - the name.
        :param Sequence['GetPbrSpecResourceArgs'] resources: PBR resources status
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetPbrSpecResourceResult']:
        """
        PBR resources status
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetPbrSpecResourceResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetPbrSpecResourceActionResult'],
                 destinations: Sequence['outputs.GetPbrSpecResourceDestinationResult'],
                 is_bidirectional: bool,
                 priority: int,
                 protocol_parameters: Sequence['outputs.GetPbrSpecResourceProtocolParameterResult'],
                 protocol_type: str,
                 sources: Sequence['outputs.GetPbrSpecResourceSourceResult'],
                 vpc_reference: Mapping[str, str]):
        """
        :param Sequence['GetPbrSpecResourceActionArgs'] actions: Routing policy action
        :param Sequence['GetPbrSpecResourceDestinationArgs'] destinations: destination address of an IP.
        :param bool is_bidirectional: Policy in reverse direction.
        :param int priority: priority of routing policy
        :param Sequence['GetPbrSpecResourceProtocolParameterArgs'] protocol_parameters: Routing policy IP protocol parameters
        :param str protocol_type: Protocol type of routing policy
        :param Sequence['GetPbrSpecResourceSourceArgs'] sources: source address of an IP.
        :param Mapping[str, str] vpc_reference: Reference to VPC
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "is_bidirectional", is_bidirectional)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol_parameters", protocol_parameters)
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetPbrSpecResourceActionResult']:
        """
        Routing policy action
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetPbrSpecResourceDestinationResult']:
        """
        destination address of an IP.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="isBidirectional")
    def is_bidirectional(self) -> bool:
        """
        Policy in reverse direction.
        """
        return pulumi.get(self, "is_bidirectional")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        priority of routing policy
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="protocolParameters")
    def protocol_parameters(self) -> Sequence['outputs.GetPbrSpecResourceProtocolParameterResult']:
        """
        Routing policy IP protocol parameters
        """
        return pulumi.get(self, "protocol_parameters")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> str:
        """
        Protocol type of routing policy
        """
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetPbrSpecResourceSourceResult']:
        """
        source address of an IP.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Mapping[str, str]:
        """
        Reference to VPC
        """
        return pulumi.get(self, "vpc_reference")


@pulumi.output_type
class GetPbrSpecResourceActionResult(dict):
    def __init__(__self__, *,
                 action: str,
                 service_ip_lists: Sequence[str]):
        """
        :param str action: Routing policy action
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "service_ip_lists", service_ip_lists)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Routing policy action
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="serviceIpLists")
    def service_ip_lists(self) -> Sequence[str]:
        return pulumi.get(self, "service_ip_lists")


@pulumi.output_type
class GetPbrSpecResourceDestinationResult(dict):
    def __init__(__self__, *,
                 address_type: str,
                 prefix_length: Optional[int] = None,
                 subnet_ip: Optional[str] = None):
        """
        :param int prefix_length: prefix length of provided subnet.
        :param str subnet_ip: IP subnet provided as an address.
        """
        pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> str:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        """
        prefix length of provided subnet.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[str]:
        """
        IP subnet provided as an address.
        """
        return pulumi.get(self, "subnet_ip")


@pulumi.output_type
class GetPbrSpecResourceProtocolParameterResult(dict):
    def __init__(__self__, *,
                 icmps: Sequence['outputs.GetPbrSpecResourceProtocolParameterIcmpResult'],
                 protocol_number: int,
                 tcps: Sequence['outputs.GetPbrSpecResourceProtocolParameterTcpResult'],
                 udps: Sequence['outputs.GetPbrSpecResourceProtocolParameterUdpResult']):
        """
        :param Sequence['GetPbrSpecResourceProtocolParameterIcmpArgs'] icmps: ICMP parameters in routing policy.
        :param int protocol_number: Protocol number in routing policy
        :param Sequence['GetPbrSpecResourceProtocolParameterTcpArgs'] tcps: TCP parameters in routing policy
        :param Sequence['GetPbrSpecResourceProtocolParameterUdpArgs'] udps: UDP parameters in routing policy
        """
        pulumi.set(__self__, "icmps", icmps)
        pulumi.set(__self__, "protocol_number", protocol_number)
        pulumi.set(__self__, "tcps", tcps)
        pulumi.set(__self__, "udps", udps)

    @property
    @pulumi.getter
    def icmps(self) -> Sequence['outputs.GetPbrSpecResourceProtocolParameterIcmpResult']:
        """
        ICMP parameters in routing policy.
        """
        return pulumi.get(self, "icmps")

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> int:
        """
        Protocol number in routing policy
        """
        return pulumi.get(self, "protocol_number")

    @property
    @pulumi.getter
    def tcps(self) -> Sequence['outputs.GetPbrSpecResourceProtocolParameterTcpResult']:
        """
        TCP parameters in routing policy
        """
        return pulumi.get(self, "tcps")

    @property
    @pulumi.getter
    def udps(self) -> Sequence['outputs.GetPbrSpecResourceProtocolParameterUdpResult']:
        """
        UDP parameters in routing policy
        """
        return pulumi.get(self, "udps")


@pulumi.output_type
class GetPbrSpecResourceProtocolParameterIcmpResult(dict):
    def __init__(__self__, *,
                 icmp_code: int,
                 icmp_type: int):
        pulumi.set(__self__, "icmp_code", icmp_code)
        pulumi.set(__self__, "icmp_type", icmp_type)

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> int:
        return pulumi.get(self, "icmp_code")

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> int:
        return pulumi.get(self, "icmp_type")


@pulumi.output_type
class GetPbrSpecResourceProtocolParameterTcpResult(dict):
    def __init__(__self__, *,
                 destination_port_range_lists: Sequence['outputs.GetPbrSpecResourceProtocolParameterTcpDestinationPortRangeListResult'],
                 source_port_range_lists: Sequence['outputs.GetPbrSpecResourceProtocolParameterTcpSourcePortRangeListResult']):
        pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Sequence['outputs.GetPbrSpecResourceProtocolParameterTcpDestinationPortRangeListResult']:
        return pulumi.get(self, "destination_port_range_lists")

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Sequence['outputs.GetPbrSpecResourceProtocolParameterTcpSourcePortRangeListResult']:
        return pulumi.get(self, "source_port_range_lists")


@pulumi.output_type
class GetPbrSpecResourceProtocolParameterTcpDestinationPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrSpecResourceProtocolParameterTcpSourcePortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrSpecResourceProtocolParameterUdpResult(dict):
    def __init__(__self__, *,
                 destination_port_range_lists: Sequence['outputs.GetPbrSpecResourceProtocolParameterUdpDestinationPortRangeListResult'],
                 source_port_range_lists: Sequence['outputs.GetPbrSpecResourceProtocolParameterUdpSourcePortRangeListResult']):
        pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Sequence['outputs.GetPbrSpecResourceProtocolParameterUdpDestinationPortRangeListResult']:
        return pulumi.get(self, "destination_port_range_lists")

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Sequence['outputs.GetPbrSpecResourceProtocolParameterUdpSourcePortRangeListResult']:
        return pulumi.get(self, "source_port_range_lists")


@pulumi.output_type
class GetPbrSpecResourceProtocolParameterUdpDestinationPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrSpecResourceProtocolParameterUdpSourcePortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrSpecResourceSourceResult(dict):
    def __init__(__self__, *,
                 address_type: str,
                 prefix_length: Optional[int] = None,
                 subnet_ip: Optional[str] = None):
        """
        :param int prefix_length: prefix length of provided subnet.
        :param str subnet_ip: IP subnet provided as an address.
        """
        pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> str:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        """
        prefix length of provided subnet.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[str]:
        """
        IP subnet provided as an address.
        """
        return pulumi.get(self, "subnet_ip")


@pulumi.output_type
class GetPbrStatusResult(dict):
    def __init__(__self__, *,
                 execution_contexts: Sequence['outputs.GetPbrStatusExecutionContextResult'],
                 name: str,
                 resources: Sequence['outputs.GetPbrStatusResourceResult'],
                 state: str):
        """
        :param Sequence['GetPbrStatusExecutionContextArgs'] execution_contexts: Execution Context of PBR.
        :param str name: - the name.
        :param Sequence['GetPbrStatusResourceArgs'] resources: PBR resources status
        :param str state: The state of the PBR
        """
        pulumi.set(__self__, "execution_contexts", execution_contexts)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="executionContexts")
    def execution_contexts(self) -> Sequence['outputs.GetPbrStatusExecutionContextResult']:
        """
        Execution Context of PBR.
        """
        return pulumi.get(self, "execution_contexts")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetPbrStatusResourceResult']:
        """
        PBR resources status
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the PBR
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetPbrStatusExecutionContextResult(dict):
    def __init__(__self__, *,
                 task_uuids: Sequence[str]):
        pulumi.set(__self__, "task_uuids", task_uuids)

    @property
    @pulumi.getter(name="taskUuids")
    def task_uuids(self) -> Sequence[str]:
        return pulumi.get(self, "task_uuids")


@pulumi.output_type
class GetPbrStatusResourceResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetPbrStatusResourceActionResult'],
                 destinations: Sequence['outputs.GetPbrStatusResourceDestinationResult'],
                 is_bidirectional: bool,
                 priority: int,
                 protocol_parameters: Sequence['outputs.GetPbrStatusResourceProtocolParameterResult'],
                 protocol_type: str,
                 routing_policy_counters: Sequence['outputs.GetPbrStatusResourceRoutingPolicyCounterResult'],
                 sources: Sequence['outputs.GetPbrStatusResourceSourceResult'],
                 vpc_reference: Mapping[str, str]):
        """
        :param Sequence['GetPbrStatusResourceActionArgs'] actions: Routing policy action
        :param Sequence['GetPbrStatusResourceDestinationArgs'] destinations: destination address of an IP.
        :param bool is_bidirectional: Policy in reverse direction.
        :param int priority: priority of routing policy
        :param Sequence['GetPbrStatusResourceProtocolParameterArgs'] protocol_parameters: Routing policy IP protocol parameters
        :param str protocol_type: Protocol type of routing policy
        :param Sequence['GetPbrStatusResourceSourceArgs'] sources: source address of an IP.
        :param Mapping[str, str] vpc_reference: Reference to VPC
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "is_bidirectional", is_bidirectional)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol_parameters", protocol_parameters)
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "routing_policy_counters", routing_policy_counters)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetPbrStatusResourceActionResult']:
        """
        Routing policy action
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetPbrStatusResourceDestinationResult']:
        """
        destination address of an IP.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="isBidirectional")
    def is_bidirectional(self) -> bool:
        """
        Policy in reverse direction.
        """
        return pulumi.get(self, "is_bidirectional")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        priority of routing policy
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="protocolParameters")
    def protocol_parameters(self) -> Sequence['outputs.GetPbrStatusResourceProtocolParameterResult']:
        """
        Routing policy IP protocol parameters
        """
        return pulumi.get(self, "protocol_parameters")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> str:
        """
        Protocol type of routing policy
        """
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter(name="routingPolicyCounters")
    def routing_policy_counters(self) -> Sequence['outputs.GetPbrStatusResourceRoutingPolicyCounterResult']:
        return pulumi.get(self, "routing_policy_counters")

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetPbrStatusResourceSourceResult']:
        """
        source address of an IP.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Mapping[str, str]:
        """
        Reference to VPC
        """
        return pulumi.get(self, "vpc_reference")


@pulumi.output_type
class GetPbrStatusResourceActionResult(dict):
    def __init__(__self__, *,
                 action: str,
                 service_ip_lists: Sequence[str]):
        """
        :param str action: Routing policy action
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "service_ip_lists", service_ip_lists)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Routing policy action
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="serviceIpLists")
    def service_ip_lists(self) -> Sequence[str]:
        return pulumi.get(self, "service_ip_lists")


@pulumi.output_type
class GetPbrStatusResourceDestinationResult(dict):
    def __init__(__self__, *,
                 address_type: str,
                 prefix_length: Optional[int] = None,
                 subnet_ip: Optional[str] = None):
        """
        :param int prefix_length: prefix length of provided subnet.
        :param str subnet_ip: IP subnet provided as an address.
        """
        pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> str:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        """
        prefix length of provided subnet.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[str]:
        """
        IP subnet provided as an address.
        """
        return pulumi.get(self, "subnet_ip")


@pulumi.output_type
class GetPbrStatusResourceProtocolParameterResult(dict):
    def __init__(__self__, *,
                 icmps: Sequence['outputs.GetPbrStatusResourceProtocolParameterIcmpResult'],
                 protocol_number: int,
                 tcps: Sequence['outputs.GetPbrStatusResourceProtocolParameterTcpResult'],
                 udps: Sequence['outputs.GetPbrStatusResourceProtocolParameterUdpResult']):
        """
        :param Sequence['GetPbrStatusResourceProtocolParameterIcmpArgs'] icmps: ICMP parameters in routing policy.
        :param int protocol_number: Protocol number in routing policy
        :param Sequence['GetPbrStatusResourceProtocolParameterTcpArgs'] tcps: TCP parameters in routing policy
        :param Sequence['GetPbrStatusResourceProtocolParameterUdpArgs'] udps: UDP parameters in routing policy
        """
        pulumi.set(__self__, "icmps", icmps)
        pulumi.set(__self__, "protocol_number", protocol_number)
        pulumi.set(__self__, "tcps", tcps)
        pulumi.set(__self__, "udps", udps)

    @property
    @pulumi.getter
    def icmps(self) -> Sequence['outputs.GetPbrStatusResourceProtocolParameterIcmpResult']:
        """
        ICMP parameters in routing policy.
        """
        return pulumi.get(self, "icmps")

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> int:
        """
        Protocol number in routing policy
        """
        return pulumi.get(self, "protocol_number")

    @property
    @pulumi.getter
    def tcps(self) -> Sequence['outputs.GetPbrStatusResourceProtocolParameterTcpResult']:
        """
        TCP parameters in routing policy
        """
        return pulumi.get(self, "tcps")

    @property
    @pulumi.getter
    def udps(self) -> Sequence['outputs.GetPbrStatusResourceProtocolParameterUdpResult']:
        """
        UDP parameters in routing policy
        """
        return pulumi.get(self, "udps")


@pulumi.output_type
class GetPbrStatusResourceProtocolParameterIcmpResult(dict):
    def __init__(__self__, *,
                 icmp_code: int,
                 icmp_type: int):
        pulumi.set(__self__, "icmp_code", icmp_code)
        pulumi.set(__self__, "icmp_type", icmp_type)

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> int:
        return pulumi.get(self, "icmp_code")

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> int:
        return pulumi.get(self, "icmp_type")


@pulumi.output_type
class GetPbrStatusResourceProtocolParameterTcpResult(dict):
    def __init__(__self__, *,
                 destination_port_range_lists: Sequence['outputs.GetPbrStatusResourceProtocolParameterTcpDestinationPortRangeListResult'],
                 source_port_range_lists: Sequence['outputs.GetPbrStatusResourceProtocolParameterTcpSourcePortRangeListResult']):
        pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Sequence['outputs.GetPbrStatusResourceProtocolParameterTcpDestinationPortRangeListResult']:
        return pulumi.get(self, "destination_port_range_lists")

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Sequence['outputs.GetPbrStatusResourceProtocolParameterTcpSourcePortRangeListResult']:
        return pulumi.get(self, "source_port_range_lists")


@pulumi.output_type
class GetPbrStatusResourceProtocolParameterTcpDestinationPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrStatusResourceProtocolParameterTcpSourcePortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrStatusResourceProtocolParameterUdpResult(dict):
    def __init__(__self__, *,
                 destination_port_range_lists: Sequence['outputs.GetPbrStatusResourceProtocolParameterUdpDestinationPortRangeListResult'],
                 source_port_range_lists: Sequence['outputs.GetPbrStatusResourceProtocolParameterUdpSourcePortRangeListResult']):
        pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Sequence['outputs.GetPbrStatusResourceProtocolParameterUdpDestinationPortRangeListResult']:
        return pulumi.get(self, "destination_port_range_lists")

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Sequence['outputs.GetPbrStatusResourceProtocolParameterUdpSourcePortRangeListResult']:
        return pulumi.get(self, "source_port_range_lists")


@pulumi.output_type
class GetPbrStatusResourceProtocolParameterUdpDestinationPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrStatusResourceProtocolParameterUdpSourcePortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrStatusResourceRoutingPolicyCounterResult(dict):
    def __init__(__self__, *,
                 byte_count: int,
                 packet_count: int):
        pulumi.set(__self__, "byte_count", byte_count)
        pulumi.set(__self__, "packet_count", packet_count)

    @property
    @pulumi.getter(name="byteCount")
    def byte_count(self) -> int:
        return pulumi.get(self, "byte_count")

    @property
    @pulumi.getter(name="packetCount")
    def packet_count(self) -> int:
        return pulumi.get(self, "packet_count")


@pulumi.output_type
class GetPbrStatusResourceSourceResult(dict):
    def __init__(__self__, *,
                 address_type: str,
                 prefix_length: Optional[int] = None,
                 subnet_ip: Optional[str] = None):
        """
        :param int prefix_length: prefix length of provided subnet.
        :param str subnet_ip: IP subnet provided as an address.
        """
        pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> str:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        """
        prefix length of provided subnet.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[str]:
        """
        IP subnet provided as an address.
        """
        return pulumi.get(self, "subnet_ip")


@pulumi.output_type
class GetPbrsEntityResult(dict):
    def __init__(__self__, *,
                 metadata: Mapping[str, str],
                 specs: Sequence['outputs.GetPbrsEntitySpecResult'],
                 statuses: Sequence['outputs.GetPbrsEntityStatusResult']):
        """
        :param Mapping[str, str] metadata: - The routing policies kind metadata.
        :param Sequence['GetPbrsEntitySpecArgs'] specs: PBR spec
        :param Sequence['GetPbrsEntityStatusArgs'] statuses: PBR output status
        """
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "specs", specs)
        pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        - The routing policies kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def specs(self) -> Sequence['outputs.GetPbrsEntitySpecResult']:
        """
        PBR spec
        """
        return pulumi.get(self, "specs")

    @property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetPbrsEntityStatusResult']:
        """
        PBR output status
        """
        return pulumi.get(self, "statuses")


@pulumi.output_type
class GetPbrsEntitySpecResult(dict):
    def __init__(__self__, *,
                 name: str,
                 resources: Sequence['outputs.GetPbrsEntitySpecResourceResult']):
        """
        :param str name: - the name.
        :param Sequence['GetPbrsEntitySpecResourceArgs'] resources: PBR resources status
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetPbrsEntitySpecResourceResult']:
        """
        PBR resources status
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetPbrsEntitySpecResourceResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetPbrsEntitySpecResourceActionResult'],
                 destinations: Sequence['outputs.GetPbrsEntitySpecResourceDestinationResult'],
                 is_bidirectional: bool,
                 priority: int,
                 protocol_parameters: Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterResult'],
                 protocol_type: str,
                 sources: Sequence['outputs.GetPbrsEntitySpecResourceSourceResult'],
                 vpc_reference: Mapping[str, str]):
        """
        :param Sequence['GetPbrsEntitySpecResourceActionArgs'] actions: Routing policy action
        :param Sequence['GetPbrsEntitySpecResourceDestinationArgs'] destinations: destination address of an IP.
        :param bool is_bidirectional: Policy in reverse direction.
        :param int priority: priority of routing policy
        :param Sequence['GetPbrsEntitySpecResourceProtocolParameterArgs'] protocol_parameters: Routing policy IP protocol parameters
        :param str protocol_type: Protocol type of routing policy
        :param Sequence['GetPbrsEntitySpecResourceSourceArgs'] sources: source address of an IP.
        :param Mapping[str, str] vpc_reference: Reference to VPC
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "is_bidirectional", is_bidirectional)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol_parameters", protocol_parameters)
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetPbrsEntitySpecResourceActionResult']:
        """
        Routing policy action
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetPbrsEntitySpecResourceDestinationResult']:
        """
        destination address of an IP.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="isBidirectional")
    def is_bidirectional(self) -> bool:
        """
        Policy in reverse direction.
        """
        return pulumi.get(self, "is_bidirectional")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        priority of routing policy
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="protocolParameters")
    def protocol_parameters(self) -> Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterResult']:
        """
        Routing policy IP protocol parameters
        """
        return pulumi.get(self, "protocol_parameters")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> str:
        """
        Protocol type of routing policy
        """
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetPbrsEntitySpecResourceSourceResult']:
        """
        source address of an IP.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Mapping[str, str]:
        """
        Reference to VPC
        """
        return pulumi.get(self, "vpc_reference")


@pulumi.output_type
class GetPbrsEntitySpecResourceActionResult(dict):
    def __init__(__self__, *,
                 action: str,
                 service_ip_lists: Sequence[str]):
        """
        :param str action: Routing policy action
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "service_ip_lists", service_ip_lists)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Routing policy action
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="serviceIpLists")
    def service_ip_lists(self) -> Sequence[str]:
        return pulumi.get(self, "service_ip_lists")


@pulumi.output_type
class GetPbrsEntitySpecResourceDestinationResult(dict):
    def __init__(__self__, *,
                 address_type: str,
                 prefix_length: Optional[int] = None,
                 subnet_ip: Optional[str] = None):
        """
        :param int prefix_length: prefix length of provided subnet.
        :param str subnet_ip: IP subnet provided as an address.
        """
        pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> str:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        """
        prefix length of provided subnet.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[str]:
        """
        IP subnet provided as an address.
        """
        return pulumi.get(self, "subnet_ip")


@pulumi.output_type
class GetPbrsEntitySpecResourceProtocolParameterResult(dict):
    def __init__(__self__, *,
                 icmps: Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterIcmpResult'],
                 protocol_number: int,
                 tcps: Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterTcpResult'],
                 udps: Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterUdpResult']):
        """
        :param Sequence['GetPbrsEntitySpecResourceProtocolParameterIcmpArgs'] icmps: ICMP parameters in routing policy.
        :param int protocol_number: Protocol number in routing policy
        :param Sequence['GetPbrsEntitySpecResourceProtocolParameterTcpArgs'] tcps: TCP parameters in routing policy
        :param Sequence['GetPbrsEntitySpecResourceProtocolParameterUdpArgs'] udps: UDP parameters in routing policy
        """
        pulumi.set(__self__, "icmps", icmps)
        pulumi.set(__self__, "protocol_number", protocol_number)
        pulumi.set(__self__, "tcps", tcps)
        pulumi.set(__self__, "udps", udps)

    @property
    @pulumi.getter
    def icmps(self) -> Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterIcmpResult']:
        """
        ICMP parameters in routing policy.
        """
        return pulumi.get(self, "icmps")

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> int:
        """
        Protocol number in routing policy
        """
        return pulumi.get(self, "protocol_number")

    @property
    @pulumi.getter
    def tcps(self) -> Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterTcpResult']:
        """
        TCP parameters in routing policy
        """
        return pulumi.get(self, "tcps")

    @property
    @pulumi.getter
    def udps(self) -> Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterUdpResult']:
        """
        UDP parameters in routing policy
        """
        return pulumi.get(self, "udps")


@pulumi.output_type
class GetPbrsEntitySpecResourceProtocolParameterIcmpResult(dict):
    def __init__(__self__, *,
                 icmp_code: int,
                 icmp_type: int):
        pulumi.set(__self__, "icmp_code", icmp_code)
        pulumi.set(__self__, "icmp_type", icmp_type)

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> int:
        return pulumi.get(self, "icmp_code")

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> int:
        return pulumi.get(self, "icmp_type")


@pulumi.output_type
class GetPbrsEntitySpecResourceProtocolParameterTcpResult(dict):
    def __init__(__self__, *,
                 destination_port_range_lists: Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterTcpDestinationPortRangeListResult'],
                 source_port_range_lists: Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterTcpSourcePortRangeListResult']):
        pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterTcpDestinationPortRangeListResult']:
        return pulumi.get(self, "destination_port_range_lists")

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterTcpSourcePortRangeListResult']:
        return pulumi.get(self, "source_port_range_lists")


@pulumi.output_type
class GetPbrsEntitySpecResourceProtocolParameterTcpDestinationPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrsEntitySpecResourceProtocolParameterTcpSourcePortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrsEntitySpecResourceProtocolParameterUdpResult(dict):
    def __init__(__self__, *,
                 destination_port_range_lists: Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterUdpDestinationPortRangeListResult'],
                 source_port_range_lists: Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterUdpSourcePortRangeListResult']):
        pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterUdpDestinationPortRangeListResult']:
        return pulumi.get(self, "destination_port_range_lists")

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterUdpSourcePortRangeListResult']:
        return pulumi.get(self, "source_port_range_lists")


@pulumi.output_type
class GetPbrsEntitySpecResourceProtocolParameterUdpDestinationPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrsEntitySpecResourceProtocolParameterUdpSourcePortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrsEntitySpecResourceSourceResult(dict):
    def __init__(__self__, *,
                 address_type: str,
                 prefix_length: Optional[int] = None,
                 subnet_ip: Optional[str] = None):
        """
        :param int prefix_length: prefix length of provided subnet.
        :param str subnet_ip: IP subnet provided as an address.
        """
        pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> str:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        """
        prefix length of provided subnet.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[str]:
        """
        IP subnet provided as an address.
        """
        return pulumi.get(self, "subnet_ip")


@pulumi.output_type
class GetPbrsEntityStatusResult(dict):
    def __init__(__self__, *,
                 execution_contexts: Sequence['outputs.GetPbrsEntityStatusExecutionContextResult'],
                 name: str,
                 resources: Sequence['outputs.GetPbrsEntityStatusResourceResult'],
                 state: str):
        """
        :param Sequence['GetPbrsEntityStatusExecutionContextArgs'] execution_contexts: Execution Context of PBR.
        :param str name: - the name.
        :param Sequence['GetPbrsEntityStatusResourceArgs'] resources: PBR resources status
        :param str state: The state of the PBR
        """
        pulumi.set(__self__, "execution_contexts", execution_contexts)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="executionContexts")
    def execution_contexts(self) -> Sequence['outputs.GetPbrsEntityStatusExecutionContextResult']:
        """
        Execution Context of PBR.
        """
        return pulumi.get(self, "execution_contexts")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetPbrsEntityStatusResourceResult']:
        """
        PBR resources status
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the PBR
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetPbrsEntityStatusExecutionContextResult(dict):
    def __init__(__self__, *,
                 task_uuids: Sequence[str]):
        pulumi.set(__self__, "task_uuids", task_uuids)

    @property
    @pulumi.getter(name="taskUuids")
    def task_uuids(self) -> Sequence[str]:
        return pulumi.get(self, "task_uuids")


@pulumi.output_type
class GetPbrsEntityStatusResourceResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetPbrsEntityStatusResourceActionResult'],
                 destinations: Sequence['outputs.GetPbrsEntityStatusResourceDestinationResult'],
                 is_bidirectional: bool,
                 priority: int,
                 protocol_parameters: Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterResult'],
                 protocol_type: str,
                 routing_policy_counters: Sequence['outputs.GetPbrsEntityStatusResourceRoutingPolicyCounterResult'],
                 sources: Sequence['outputs.GetPbrsEntityStatusResourceSourceResult'],
                 vpc_reference: Mapping[str, str]):
        """
        :param Sequence['GetPbrsEntityStatusResourceActionArgs'] actions: Routing policy action
        :param Sequence['GetPbrsEntityStatusResourceDestinationArgs'] destinations: destination address of an IP.
        :param bool is_bidirectional: Policy in reverse direction.
        :param int priority: priority of routing policy
        :param Sequence['GetPbrsEntityStatusResourceProtocolParameterArgs'] protocol_parameters: Routing policy IP protocol parameters
        :param str protocol_type: Protocol type of routing policy
        :param Sequence['GetPbrsEntityStatusResourceSourceArgs'] sources: source address of an IP.
        :param Mapping[str, str] vpc_reference: Reference to VPC
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "is_bidirectional", is_bidirectional)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol_parameters", protocol_parameters)
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "routing_policy_counters", routing_policy_counters)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetPbrsEntityStatusResourceActionResult']:
        """
        Routing policy action
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetPbrsEntityStatusResourceDestinationResult']:
        """
        destination address of an IP.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="isBidirectional")
    def is_bidirectional(self) -> bool:
        """
        Policy in reverse direction.
        """
        return pulumi.get(self, "is_bidirectional")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        priority of routing policy
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="protocolParameters")
    def protocol_parameters(self) -> Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterResult']:
        """
        Routing policy IP protocol parameters
        """
        return pulumi.get(self, "protocol_parameters")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> str:
        """
        Protocol type of routing policy
        """
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter(name="routingPolicyCounters")
    def routing_policy_counters(self) -> Sequence['outputs.GetPbrsEntityStatusResourceRoutingPolicyCounterResult']:
        return pulumi.get(self, "routing_policy_counters")

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetPbrsEntityStatusResourceSourceResult']:
        """
        source address of an IP.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Mapping[str, str]:
        """
        Reference to VPC
        """
        return pulumi.get(self, "vpc_reference")


@pulumi.output_type
class GetPbrsEntityStatusResourceActionResult(dict):
    def __init__(__self__, *,
                 action: str,
                 service_ip_lists: Sequence[str]):
        """
        :param str action: Routing policy action
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "service_ip_lists", service_ip_lists)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Routing policy action
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="serviceIpLists")
    def service_ip_lists(self) -> Sequence[str]:
        return pulumi.get(self, "service_ip_lists")


@pulumi.output_type
class GetPbrsEntityStatusResourceDestinationResult(dict):
    def __init__(__self__, *,
                 address_type: str,
                 prefix_length: Optional[int] = None,
                 subnet_ip: Optional[str] = None):
        """
        :param int prefix_length: prefix length of provided subnet.
        :param str subnet_ip: IP subnet provided as an address.
        """
        pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> str:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        """
        prefix length of provided subnet.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[str]:
        """
        IP subnet provided as an address.
        """
        return pulumi.get(self, "subnet_ip")


@pulumi.output_type
class GetPbrsEntityStatusResourceProtocolParameterResult(dict):
    def __init__(__self__, *,
                 icmps: Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterIcmpResult'],
                 protocol_number: int,
                 tcps: Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterTcpResult'],
                 udps: Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterUdpResult']):
        """
        :param Sequence['GetPbrsEntityStatusResourceProtocolParameterIcmpArgs'] icmps: ICMP parameters in routing policy.
        :param int protocol_number: Protocol number in routing policy
        :param Sequence['GetPbrsEntityStatusResourceProtocolParameterTcpArgs'] tcps: TCP parameters in routing policy
        :param Sequence['GetPbrsEntityStatusResourceProtocolParameterUdpArgs'] udps: UDP parameters in routing policy
        """
        pulumi.set(__self__, "icmps", icmps)
        pulumi.set(__self__, "protocol_number", protocol_number)
        pulumi.set(__self__, "tcps", tcps)
        pulumi.set(__self__, "udps", udps)

    @property
    @pulumi.getter
    def icmps(self) -> Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterIcmpResult']:
        """
        ICMP parameters in routing policy.
        """
        return pulumi.get(self, "icmps")

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> int:
        """
        Protocol number in routing policy
        """
        return pulumi.get(self, "protocol_number")

    @property
    @pulumi.getter
    def tcps(self) -> Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterTcpResult']:
        """
        TCP parameters in routing policy
        """
        return pulumi.get(self, "tcps")

    @property
    @pulumi.getter
    def udps(self) -> Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterUdpResult']:
        """
        UDP parameters in routing policy
        """
        return pulumi.get(self, "udps")


@pulumi.output_type
class GetPbrsEntityStatusResourceProtocolParameterIcmpResult(dict):
    def __init__(__self__, *,
                 icmp_code: int,
                 icmp_type: int):
        pulumi.set(__self__, "icmp_code", icmp_code)
        pulumi.set(__self__, "icmp_type", icmp_type)

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> int:
        return pulumi.get(self, "icmp_code")

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> int:
        return pulumi.get(self, "icmp_type")


@pulumi.output_type
class GetPbrsEntityStatusResourceProtocolParameterTcpResult(dict):
    def __init__(__self__, *,
                 destination_port_range_lists: Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterTcpDestinationPortRangeListResult'],
                 source_port_range_lists: Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterTcpSourcePortRangeListResult']):
        pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterTcpDestinationPortRangeListResult']:
        return pulumi.get(self, "destination_port_range_lists")

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterTcpSourcePortRangeListResult']:
        return pulumi.get(self, "source_port_range_lists")


@pulumi.output_type
class GetPbrsEntityStatusResourceProtocolParameterTcpDestinationPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrsEntityStatusResourceProtocolParameterTcpSourcePortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrsEntityStatusResourceProtocolParameterUdpResult(dict):
    def __init__(__self__, *,
                 destination_port_range_lists: Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterUdpDestinationPortRangeListResult'],
                 source_port_range_lists: Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterUdpSourcePortRangeListResult']):
        pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterUdpDestinationPortRangeListResult']:
        return pulumi.get(self, "destination_port_range_lists")

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterUdpSourcePortRangeListResult']:
        return pulumi.get(self, "source_port_range_lists")


@pulumi.output_type
class GetPbrsEntityStatusResourceProtocolParameterUdpDestinationPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrsEntityStatusResourceProtocolParameterUdpSourcePortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrsEntityStatusResourceRoutingPolicyCounterResult(dict):
    def __init__(__self__, *,
                 byte_count: int,
                 packet_count: int):
        pulumi.set(__self__, "byte_count", byte_count)
        pulumi.set(__self__, "packet_count", packet_count)

    @property
    @pulumi.getter(name="byteCount")
    def byte_count(self) -> int:
        return pulumi.get(self, "byte_count")

    @property
    @pulumi.getter(name="packetCount")
    def packet_count(self) -> int:
        return pulumi.get(self, "packet_count")


@pulumi.output_type
class GetPbrsEntityStatusResourceSourceResult(dict):
    def __init__(__self__, *,
                 address_type: str,
                 prefix_length: Optional[int] = None,
                 subnet_ip: Optional[str] = None):
        """
        :param int prefix_length: prefix length of provided subnet.
        :param str subnet_ip: IP subnet provided as an address.
        """
        pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> str:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        """
        prefix length of provided subnet.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[str]:
        """
        IP subnet provided as an address.
        """
        return pulumi.get(self, "subnet_ip")


@pulumi.output_type
class GetPbrsMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str,
                 total_matches: int):
        """
        :param str kind: - The kind name (Default value: project).
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)
        pulumi.set(__self__, "total_matches", total_matches)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="totalMatches")
    def total_matches(self) -> int:
        return pulumi.get(self, "total_matches")


@pulumi.output_type
class GetPermissionCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPermissionFieldResult(dict):
    def __init__(__self__, *,
                 field_mode: str,
                 field_name_lists: Sequence[str]):
        """
        :param str field_mode: Allow or disallow the fields mentioned.
        :param Sequence[str] field_name_lists: The list of fields.
        """
        pulumi.set(__self__, "field_mode", field_mode)
        pulumi.set(__self__, "field_name_lists", field_name_lists)

    @property
    @pulumi.getter(name="fieldMode")
    def field_mode(self) -> str:
        """
        Allow or disallow the fields mentioned.
        """
        return pulumi.get(self, "field_mode")

    @property
    @pulumi.getter(name="fieldNameLists")
    def field_name_lists(self) -> Sequence[str]:
        """
        The list of fields.
        """
        return pulumi.get(self, "field_name_lists")


@pulumi.output_type
class GetPermissionsEntityResult(dict):
    def __init__(__self__, *,
                 api_version: str,
                 categories: Sequence['outputs.GetPermissionsEntityCategoryResult'],
                 description: str,
                 fields: Sequence['outputs.GetPermissionsEntityFieldResult'],
                 kind: str,
                 metadata: Mapping[str, str],
                 name: str,
                 operation: str,
                 owner_reference: Mapping[str, str],
                 project_reference: Mapping[str, str],
                 state: str):
        """
        :param str api_version: version of the API
        :param Sequence['GetPermissionsEntityCategoryArgs'] categories: The categories for this resource.
        :param str description: A description for the permission.
        :param Sequence['GetPermissionsEntityFieldArgs'] fields: . The fields that can/cannot be accessed during the specified operation. field_name_list will be a list of fields. e.g. if field_mode = disallowed, field_name_list = [“xyz”] then the list of allowed fields is ALL fields minus xyz. Seee Field for more info.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param Mapping[str, str] metadata: The permission kind metadata.
        :param str name: the name.
        :param str operation: The operation that is being performed on a given kind.
        :param Mapping[str, str] owner_reference: The reference to a user.
        :param Mapping[str, str] project_reference: The reference to a project.
        :param str state: The state of the permission.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "fields", fields)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "owner_reference", owner_reference)
        pulumi.set(__self__, "project_reference", project_reference)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        version of the API
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetPermissionsEntityCategoryResult']:
        """
        The categories for this resource.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description for the permission.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def fields(self) -> Sequence['outputs.GetPermissionsEntityFieldResult']:
        """
        . The fields that can/cannot be accessed during the specified operation. field_name_list will be a list of fields. e.g. if field_mode = disallowed, field_name_list = [“xyz”] then the list of allowed fields is ALL fields minus xyz. Seee Field for more info.
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        The permission kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operation(self) -> str:
        """
        The operation that is being performed on a given kind.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        """
        The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Mapping[str, str]:
        """
        The reference to a project.
        """
        return pulumi.get(self, "project_reference")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the permission.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetPermissionsEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPermissionsEntityFieldResult(dict):
    def __init__(__self__, *,
                 field_mode: str,
                 field_name_lists: Sequence[str]):
        """
        :param str field_mode: Allow or disallow the fields mentioned.
        :param Sequence[str] field_name_lists: The list of fields.
        """
        pulumi.set(__self__, "field_mode", field_mode)
        pulumi.set(__self__, "field_name_lists", field_name_lists)

    @property
    @pulumi.getter(name="fieldMode")
    def field_mode(self) -> str:
        """
        Allow or disallow the fields mentioned.
        """
        return pulumi.get(self, "field_mode")

    @property
    @pulumi.getter(name="fieldNameLists")
    def field_name_lists(self) -> Sequence[str]:
        """
        The list of fields.
        """
        return pulumi.get(self, "field_name_lists")


@pulumi.output_type
class GetPermissionsMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")


@pulumi.output_type
class GetProjectAccountReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectAcpResult(dict):
    def __init__(__self__, *,
                 context_filter_lists: Sequence['outputs.GetProjectAcpContextFilterListResult'],
                 description: str,
                 metadata: Mapping[str, str],
                 name: str,
                 role_references: Sequence['outputs.GetProjectAcpRoleReferenceResult'],
                 user_group_reference_lists: Sequence['outputs.GetProjectAcpUserGroupReferenceListResult'],
                 user_reference_lists: Sequence['outputs.GetProjectAcpUserReferenceListResult']):
        """
        :param Sequence['GetProjectAcpContextFilterListArgs'] context_filter_lists: The list of context filters. These are OR filters. The scope-expression-list defines the context, and the filter works in conjunction with the entity-expression-list.
        :param str description: Description of ACP
        :param str name: the name.
        :param Sequence['GetProjectAcpRoleReferenceArgs'] role_references: Reference to role.
        :param Sequence['GetProjectAcpUserGroupReferenceListArgs'] user_group_reference_lists: List of Reference of users groups.
        :param Sequence['GetProjectAcpUserReferenceListArgs'] user_reference_lists: List of Reference of users.
        """
        pulumi.set(__self__, "context_filter_lists", context_filter_lists)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role_references", role_references)
        pulumi.set(__self__, "user_group_reference_lists", user_group_reference_lists)
        pulumi.set(__self__, "user_reference_lists", user_reference_lists)

    @property
    @pulumi.getter(name="contextFilterLists")
    def context_filter_lists(self) -> Sequence['outputs.GetProjectAcpContextFilterListResult']:
        """
        The list of context filters. These are OR filters. The scope-expression-list defines the context, and the filter works in conjunction with the entity-expression-list.
        """
        return pulumi.get(self, "context_filter_lists")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of ACP
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleReferences")
    def role_references(self) -> Sequence['outputs.GetProjectAcpRoleReferenceResult']:
        """
        Reference to role.
        """
        return pulumi.get(self, "role_references")

    @property
    @pulumi.getter(name="userGroupReferenceLists")
    def user_group_reference_lists(self) -> Sequence['outputs.GetProjectAcpUserGroupReferenceListResult']:
        """
        List of Reference of users groups.
        """
        return pulumi.get(self, "user_group_reference_lists")

    @property
    @pulumi.getter(name="userReferenceLists")
    def user_reference_lists(self) -> Sequence['outputs.GetProjectAcpUserReferenceListResult']:
        """
        List of Reference of users.
        """
        return pulumi.get(self, "user_reference_lists")


@pulumi.output_type
class GetProjectAcpContextFilterListResult(dict):
    def __init__(__self__, *,
                 entity_filter_expression_lists: Sequence['outputs.GetProjectAcpContextFilterListEntityFilterExpressionListResult'],
                 scope_filter_expression_lists: Optional[Sequence['outputs.GetProjectAcpContextFilterListScopeFilterExpressionListResult']] = None):
        """
        :param Sequence['GetProjectAcpContextFilterListEntityFilterExpressionListArgs'] entity_filter_expression_lists: (Required) A list of Entity filter expressions.
        :param Sequence['GetProjectAcpContextFilterListScopeFilterExpressionListArgs'] scope_filter_expression_lists: - (Optional) Filter the scope of an Access Control Policy.
        """
        pulumi.set(__self__, "entity_filter_expression_lists", entity_filter_expression_lists)
        if scope_filter_expression_lists is not None:
            pulumi.set(__self__, "scope_filter_expression_lists", scope_filter_expression_lists)

    @property
    @pulumi.getter(name="entityFilterExpressionLists")
    def entity_filter_expression_lists(self) -> Sequence['outputs.GetProjectAcpContextFilterListEntityFilterExpressionListResult']:
        """
        (Required) A list of Entity filter expressions.
        """
        return pulumi.get(self, "entity_filter_expression_lists")

    @property
    @pulumi.getter(name="scopeFilterExpressionLists")
    def scope_filter_expression_lists(self) -> Optional[Sequence['outputs.GetProjectAcpContextFilterListScopeFilterExpressionListResult']]:
        """
        - (Optional) Filter the scope of an Access Control Policy.
        """
        return pulumi.get(self, "scope_filter_expression_lists")


@pulumi.output_type
class GetProjectAcpContextFilterListEntityFilterExpressionListResult(dict):
    def __init__(__self__, *,
                 left_hand_side_entity_type: str,
                 operator: str,
                 right_hand_sides: Sequence['outputs.GetProjectAcpContextFilterListEntityFilterExpressionListRightHandSideResult']):
        """
        :param str left_hand_side_entity_type: - (Optional)  The LHS of the filter expression - the entity type.
        :param str operator: - (Required) The operator in the filter expression.
        :param Sequence['GetProjectAcpContextFilterListEntityFilterExpressionListRightHandSideArgs'] right_hand_sides: - (Required) The right hand side (RHS) of an scope expression.
        """
        pulumi.set(__self__, "left_hand_side_entity_type", left_hand_side_entity_type)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "right_hand_sides", right_hand_sides)

    @property
    @pulumi.getter(name="leftHandSideEntityType")
    def left_hand_side_entity_type(self) -> str:
        """
        - (Optional)  The LHS of the filter expression - the entity type.
        """
        return pulumi.get(self, "left_hand_side_entity_type")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        - (Required) The operator in the filter expression.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="rightHandSides")
    def right_hand_sides(self) -> Sequence['outputs.GetProjectAcpContextFilterListEntityFilterExpressionListRightHandSideResult']:
        """
        - (Required) The right hand side (RHS) of an scope expression.
        """
        return pulumi.get(self, "right_hand_sides")


@pulumi.output_type
class GetProjectAcpContextFilterListEntityFilterExpressionListRightHandSideResult(dict):
    def __init__(__self__, *,
                 categories: Sequence['outputs.GetProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategoryResult'],
                 collection: str,
                 uuid_lists: Sequence[str]):
        """
        :param Sequence['GetProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategoryArgs'] categories: - (Optional) The category values represented as a dictionary of key > list of values.
        :param str collection: - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        :param Sequence[str] uuid_lists: - (Optional) The explicit list of UUIDs for the given kind.
        """
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "collection", collection)
        pulumi.set(__self__, "uuid_lists", uuid_lists)

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategoryResult']:
        """
        - (Optional) The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def collection(self) -> str:
        """
        - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter(name="uuidLists")
    def uuid_lists(self) -> Sequence[str]:
        """
        - (Optional) The explicit list of UUIDs for the given kind.
        """
        return pulumi.get(self, "uuid_lists")


@pulumi.output_type
class GetProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: the name.
        :param Sequence[str] values: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        value of the key.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetProjectAcpContextFilterListScopeFilterExpressionListResult(dict):
    def __init__(__self__, *,
                 left_hand_side: str,
                 operator: str,
                 right_hand_sides: Sequence['outputs.GetProjectAcpContextFilterListScopeFilterExpressionListRightHandSideResult']):
        """
        :param str left_hand_side: - (Optional)  The LHS of the filter expression - the scope type.
        :param str operator: - (Required) The operator in the filter expression.
        :param Sequence['GetProjectAcpContextFilterListScopeFilterExpressionListRightHandSideArgs'] right_hand_sides: - (Required) The right hand side (RHS) of an scope expression.
        """
        pulumi.set(__self__, "left_hand_side", left_hand_side)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "right_hand_sides", right_hand_sides)

    @property
    @pulumi.getter(name="leftHandSide")
    def left_hand_side(self) -> str:
        """
        - (Optional)  The LHS of the filter expression - the scope type.
        """
        return pulumi.get(self, "left_hand_side")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        - (Required) The operator in the filter expression.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="rightHandSides")
    def right_hand_sides(self) -> Sequence['outputs.GetProjectAcpContextFilterListScopeFilterExpressionListRightHandSideResult']:
        """
        - (Required) The right hand side (RHS) of an scope expression.
        """
        return pulumi.get(self, "right_hand_sides")


@pulumi.output_type
class GetProjectAcpContextFilterListScopeFilterExpressionListRightHandSideResult(dict):
    def __init__(__self__, *,
                 categories: Sequence['outputs.GetProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategoryResult'],
                 collection: str,
                 uuid_lists: Sequence[str]):
        """
        :param Sequence['GetProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategoryArgs'] categories: - (Optional) The category values represented as a dictionary of key > list of values.
        :param str collection: - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        :param Sequence[str] uuid_lists: - (Optional) The explicit list of UUIDs for the given kind.
        """
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "collection", collection)
        pulumi.set(__self__, "uuid_lists", uuid_lists)

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategoryResult']:
        """
        - (Optional) The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def collection(self) -> str:
        """
        - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter(name="uuidLists")
    def uuid_lists(self) -> Sequence[str]:
        """
        - (Optional) The explicit list of UUIDs for the given kind.
        """
        return pulumi.get(self, "uuid_lists")


@pulumi.output_type
class GetProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: the name.
        :param Sequence[str] values: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        value of the key.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetProjectAcpRoleReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectAcpUserGroupReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectAcpUserReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProjectClusterReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectDefaultEnvironmentReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Optional) The kind name. Default value is `environment`
        :param str name: (Optional/Computed) The name of a environment.
        :param str uuid: (Required) The UUID of a environment
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Optional) The kind name. Default value is `environment`
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional/Computed) The name of a environment.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) The UUID of a environment
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectEnvironmentReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectExternalNetworkListResult(dict):
    def __init__(__self__, *,
                 name: str,
                 uuid: str):
        """
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectExternalUserGroupReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectResourceDomainResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetProjectResourceDomainResourceResult']):
        """
        :param Sequence['GetProjectResourceDomainResourceArgs'] resources: Array of the utilization/limit for resource types
               * `resource_domain.resources.#.limit` The resource consumption limit (unspecified is unlimited)
               * `resource_domain.resources.#.resource_type` The type of resource (for example storage, CPUs)
               * `resource_domain.resources.#.units` - The units of the resource type
               * `resource_domain.resources.#.value` - The amount of resource consumed
        """
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetProjectResourceDomainResourceResult']:
        """
        Array of the utilization/limit for resource types
        * `resource_domain.resources.#.limit` The resource consumption limit (unspecified is unlimited)
        * `resource_domain.resources.#.resource_type` The type of resource (for example storage, CPUs)
        * `resource_domain.resources.#.units` - The units of the resource type
        * `resource_domain.resources.#.value` - The amount of resource consumed
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetProjectResourceDomainResourceResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 resource_type: str,
                 units: str,
                 value: int):
        """
        :param int value: value of the key.
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "units", units)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def units(self) -> str:
        return pulumi.get(self, "units")

    @property
    @pulumi.getter
    def value(self) -> int:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProjectSubnetReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectTunnelReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectUserReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectVpcReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectsEntityResult(dict):
    def __init__(__self__, *,
                 account_reference_lists: Sequence['outputs.GetProjectsEntityAccountReferenceListResult'],
                 api_version: str,
                 categories: Sequence['outputs.GetProjectsEntityCategoryResult'],
                 default_subnet_reference: Mapping[str, str],
                 description: str,
                 environment_reference_lists: Sequence['outputs.GetProjectsEntityEnvironmentReferenceListResult'],
                 external_network_lists: Sequence['outputs.GetProjectsEntityExternalNetworkListResult'],
                 external_user_group_reference_lists: Sequence['outputs.GetProjectsEntityExternalUserGroupReferenceListResult'],
                 is_default: bool,
                 metadata: Mapping[str, str],
                 name: str,
                 owner_reference: Mapping[str, str],
                 project_reference: Mapping[str, str],
                 resource_domains: Sequence['outputs.GetProjectsEntityResourceDomainResult'],
                 state: str,
                 subnet_reference_lists: Sequence['outputs.GetProjectsEntitySubnetReferenceListResult'],
                 user_reference_lists: Sequence['outputs.GetProjectsEntityUserReferenceListResult']):
        """
        :param Sequence['GetProjectsEntityAccountReferenceListArgs'] account_reference_lists: List of accounts associated with the project.
               * `account_reference_list.#.kind` - The kind name. Default value is `account`
               * `account_reference_list.#.uuid` - The UUID of an account.
               * `account_reference_list.#.name` - The name of an account.
        :param str api_version: version of the API
        :param Mapping[str, str] default_subnet_reference: Reference to a subnet.
        :param str description: A description for project.
        :param Sequence['GetProjectsEntityEnvironmentReferenceListArgs'] environment_reference_lists: List of environments associated with the project.
               * `environment_reference_list.#.kind` - The kind name. Default value is `environment`
               * `environment_reference_list.#.uuid` - The UUID of an environment.
               * `environment_reference_list.#.name` - The name of an environment.
        :param Sequence['GetProjectsEntityExternalNetworkListArgs'] external_network_lists: List of external networks associated with the project.
               * `external_network_list.#.uuid` - The UUID of a network.
               * `external_network_list.#.name` - The name of a network.
        :param Sequence['GetProjectsEntityExternalUserGroupReferenceListArgs'] external_user_group_reference_lists: List of directory service user groups. These groups are not managed by Nutanix.
               * `external_user_group_reference_list.#.kind` - The kind name. Default value is `user_group`
               * `external_user_group_reference_list.#.uuid` - The UUID of a user_group
               * `external_user_group_reference_list.#.name` - The name of a user_group
        :param str name: (Optional) the name.
        :param Sequence['GetProjectsEntityResourceDomainArgs'] resource_domains: The status for a resource domain (limits and values)
        :param Sequence['GetProjectsEntitySubnetReferenceListArgs'] subnet_reference_lists: List of subnets for the project.
               * `subnet_reference_list.#.kind` - The kind name. Default value is `subnet`
               * `subnet_reference_list.#.uuid` - The UUID of a subnet
               * `subnet_reference_list.#.name` - The name of a subnet.
        :param Sequence['GetProjectsEntityUserReferenceListArgs'] user_reference_lists: List of users in the project.
               * `user_reference_list.#.kind` - The kind name. Default value is `user`
               * `user_reference_list.#.uuid` - The UUID of a user
               * `user_reference_list.#.name` - The name of a user.
        """
        pulumi.set(__self__, "account_reference_lists", account_reference_lists)
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "default_subnet_reference", default_subnet_reference)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "environment_reference_lists", environment_reference_lists)
        pulumi.set(__self__, "external_network_lists", external_network_lists)
        pulumi.set(__self__, "external_user_group_reference_lists", external_user_group_reference_lists)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_reference", owner_reference)
        pulumi.set(__self__, "project_reference", project_reference)
        pulumi.set(__self__, "resource_domains", resource_domains)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_reference_lists", subnet_reference_lists)
        pulumi.set(__self__, "user_reference_lists", user_reference_lists)

    @property
    @pulumi.getter(name="accountReferenceLists")
    def account_reference_lists(self) -> Sequence['outputs.GetProjectsEntityAccountReferenceListResult']:
        """
        List of accounts associated with the project.
        * `account_reference_list.#.kind` - The kind name. Default value is `account`
        * `account_reference_list.#.uuid` - The UUID of an account.
        * `account_reference_list.#.name` - The name of an account.
        """
        return pulumi.get(self, "account_reference_lists")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        version of the API
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetProjectsEntityCategoryResult']:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="defaultSubnetReference")
    def default_subnet_reference(self) -> Mapping[str, str]:
        """
        Reference to a subnet.
        """
        return pulumi.get(self, "default_subnet_reference")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description for project.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="environmentReferenceLists")
    def environment_reference_lists(self) -> Sequence['outputs.GetProjectsEntityEnvironmentReferenceListResult']:
        """
        List of environments associated with the project.
        * `environment_reference_list.#.kind` - The kind name. Default value is `environment`
        * `environment_reference_list.#.uuid` - The UUID of an environment.
        * `environment_reference_list.#.name` - The name of an environment.
        """
        return pulumi.get(self, "environment_reference_lists")

    @property
    @pulumi.getter(name="externalNetworkLists")
    def external_network_lists(self) -> Sequence['outputs.GetProjectsEntityExternalNetworkListResult']:
        """
        List of external networks associated with the project.
        * `external_network_list.#.uuid` - The UUID of a network.
        * `external_network_list.#.name` - The name of a network.
        """
        return pulumi.get(self, "external_network_lists")

    @property
    @pulumi.getter(name="externalUserGroupReferenceLists")
    def external_user_group_reference_lists(self) -> Sequence['outputs.GetProjectsEntityExternalUserGroupReferenceListResult']:
        """
        List of directory service user groups. These groups are not managed by Nutanix.
        * `external_user_group_reference_list.#.kind` - The kind name. Default value is `user_group`
        * `external_user_group_reference_list.#.uuid` - The UUID of a user_group
        * `external_user_group_reference_list.#.name` - The name of a user_group
        """
        return pulumi.get(self, "external_user_group_reference_lists")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "project_reference")

    @property
    @pulumi.getter(name="resourceDomains")
    def resource_domains(self) -> Sequence['outputs.GetProjectsEntityResourceDomainResult']:
        """
        The status for a resource domain (limits and values)
        """
        return pulumi.get(self, "resource_domains")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetReferenceLists")
    def subnet_reference_lists(self) -> Sequence['outputs.GetProjectsEntitySubnetReferenceListResult']:
        """
        List of subnets for the project.
        * `subnet_reference_list.#.kind` - The kind name. Default value is `subnet`
        * `subnet_reference_list.#.uuid` - The UUID of a subnet
        * `subnet_reference_list.#.name` - The name of a subnet.
        """
        return pulumi.get(self, "subnet_reference_lists")

    @property
    @pulumi.getter(name="userReferenceLists")
    def user_reference_lists(self) -> Sequence['outputs.GetProjectsEntityUserReferenceListResult']:
        """
        List of users in the project.
        * `user_reference_list.#.kind` - The kind name. Default value is `user`
        * `user_reference_list.#.uuid` - The UUID of a user
        * `user_reference_list.#.name` - The name of a user.
        """
        return pulumi.get(self, "user_reference_lists")


@pulumi.output_type
class GetProjectsEntityAccountReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectsEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: (Optional) the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProjectsEntityEnvironmentReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectsEntityExternalNetworkListResult(dict):
    def __init__(__self__, *,
                 name: str,
                 uuid: str):
        """
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectsEntityExternalUserGroupReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectsEntityResourceDomainResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetProjectsEntityResourceDomainResourceResult']):
        """
        :param Sequence['GetProjectsEntityResourceDomainResourceArgs'] resources: Array of the utilization/limit for resource types
               * `resource_domain.resources.#.limit` The resource consumption limit (unspecified is unlimited)
               * `resource_domain.resources.#.resource_type` The type of resource (for example storage, CPUs)
               * `resource_domain.resources.#.units` - The units of the resource type
               * `resource_domain.resources.#.value` - The amount of resource consumed
        """
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetProjectsEntityResourceDomainResourceResult']:
        """
        Array of the utilization/limit for resource types
        * `resource_domain.resources.#.limit` The resource consumption limit (unspecified is unlimited)
        * `resource_domain.resources.#.resource_type` The type of resource (for example storage, CPUs)
        * `resource_domain.resources.#.units` - The units of the resource type
        * `resource_domain.resources.#.value` - The amount of resource consumed
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetProjectsEntityResourceDomainResourceResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 resource_type: str,
                 units: str,
                 value: int):
        """
        :param int value: value of the key.
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "units", units)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def units(self) -> str:
        return pulumi.get(self, "units")

    @property
    @pulumi.getter
    def value(self) -> int:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProjectsEntitySubnetReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectsEntityUserReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProtectionRuleAvailabilityZoneConnectivityListResult(dict):
    def __init__(__self__, *,
                 destination_availability_zone_index: int,
                 snapshot_schedule_lists: Sequence['outputs.GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListResult'],
                 source_availability_zone_index: int):
        """
        :param int destination_availability_zone_index: (Optional/Computed) Index of the availability zone.
        :param Sequence['GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListArgs'] snapshot_schedule_lists: (Optional/Computed) Snapshot schedules for the pair of the availability zones.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.recovery_point_objective_secs` - (Required) "A recovery point objective (RPO) is the maximum acceptable amount of data loss.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.num_snapshots` - (Optional/Computed) Number of snapshots need to be retained.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_multiple` - (Optional/Computed) Multiplier to 'snapshot_interval_type'.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_snapshot_interval_type` - (Optional/Computed)
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.auto_suspend_timeout_secs` - (Optional/Computed) Auto suspend timeout in case of connection failure between the sites.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.snapshot_type` - (Optional/Computed) Crash consistent or Application Consistent snapshot.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.remote_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.
        :param int source_availability_zone_index: (Optional/Computed) Index of the availability zone.
        """
        pulumi.set(__self__, "destination_availability_zone_index", destination_availability_zone_index)
        pulumi.set(__self__, "snapshot_schedule_lists", snapshot_schedule_lists)
        pulumi.set(__self__, "source_availability_zone_index", source_availability_zone_index)

    @property
    @pulumi.getter(name="destinationAvailabilityZoneIndex")
    def destination_availability_zone_index(self) -> int:
        """
        (Optional/Computed) Index of the availability zone.
        """
        return pulumi.get(self, "destination_availability_zone_index")

    @property
    @pulumi.getter(name="snapshotScheduleLists")
    def snapshot_schedule_lists(self) -> Sequence['outputs.GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListResult']:
        """
        (Optional/Computed) Snapshot schedules for the pair of the availability zones.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.recovery_point_objective_secs` - (Required) "A recovery point objective (RPO) is the maximum acceptable amount of data loss.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.num_snapshots` - (Optional/Computed) Number of snapshots need to be retained.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_multiple` - (Optional/Computed) Multiplier to 'snapshot_interval_type'.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_snapshot_interval_type` - (Optional/Computed)
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.auto_suspend_timeout_secs` - (Optional/Computed) Auto suspend timeout in case of connection failure between the sites.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.snapshot_type` - (Optional/Computed) Crash consistent or Application Consistent snapshot.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.remote_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.
        """
        return pulumi.get(self, "snapshot_schedule_lists")

    @property
    @pulumi.getter(name="sourceAvailabilityZoneIndex")
    def source_availability_zone_index(self) -> int:
        """
        (Optional/Computed) Index of the availability zone.
        """
        return pulumi.get(self, "source_availability_zone_index")


@pulumi.output_type
class GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListResult(dict):
    def __init__(__self__, *,
                 auto_suspend_timeout_secs: int,
                 local_snapshot_retention_policies: Sequence['outputs.GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyResult'],
                 recovery_point_objective_secs: int,
                 remote_snapshot_retention_policies: Sequence['outputs.GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyResult'],
                 snapshot_type: str):
        pulumi.set(__self__, "auto_suspend_timeout_secs", auto_suspend_timeout_secs)
        pulumi.set(__self__, "local_snapshot_retention_policies", local_snapshot_retention_policies)
        pulumi.set(__self__, "recovery_point_objective_secs", recovery_point_objective_secs)
        pulumi.set(__self__, "remote_snapshot_retention_policies", remote_snapshot_retention_policies)
        pulumi.set(__self__, "snapshot_type", snapshot_type)

    @property
    @pulumi.getter(name="autoSuspendTimeoutSecs")
    def auto_suspend_timeout_secs(self) -> int:
        return pulumi.get(self, "auto_suspend_timeout_secs")

    @property
    @pulumi.getter(name="localSnapshotRetentionPolicies")
    def local_snapshot_retention_policies(self) -> Sequence['outputs.GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyResult']:
        return pulumi.get(self, "local_snapshot_retention_policies")

    @property
    @pulumi.getter(name="recoveryPointObjectiveSecs")
    def recovery_point_objective_secs(self) -> int:
        return pulumi.get(self, "recovery_point_objective_secs")

    @property
    @pulumi.getter(name="remoteSnapshotRetentionPolicies")
    def remote_snapshot_retention_policies(self) -> Sequence['outputs.GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyResult']:
        return pulumi.get(self, "remote_snapshot_retention_policies")

    @property
    @pulumi.getter(name="snapshotType")
    def snapshot_type(self) -> str:
        return pulumi.get(self, "snapshot_type")


@pulumi.output_type
class GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyResult(dict):
    def __init__(__self__, *,
                 num_snapshots: int,
                 rollup_retention_policy_multiple: int,
                 rollup_retention_policy_snapshot_interval_type: str):
        pulumi.set(__self__, "num_snapshots", num_snapshots)
        pulumi.set(__self__, "rollup_retention_policy_multiple", rollup_retention_policy_multiple)
        pulumi.set(__self__, "rollup_retention_policy_snapshot_interval_type", rollup_retention_policy_snapshot_interval_type)

    @property
    @pulumi.getter(name="numSnapshots")
    def num_snapshots(self) -> int:
        return pulumi.get(self, "num_snapshots")

    @property
    @pulumi.getter(name="rollupRetentionPolicyMultiple")
    def rollup_retention_policy_multiple(self) -> int:
        return pulumi.get(self, "rollup_retention_policy_multiple")

    @property
    @pulumi.getter(name="rollupRetentionPolicySnapshotIntervalType")
    def rollup_retention_policy_snapshot_interval_type(self) -> str:
        return pulumi.get(self, "rollup_retention_policy_snapshot_interval_type")


@pulumi.output_type
class GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyResult(dict):
    def __init__(__self__, *,
                 num_snapshots: int,
                 rollup_retention_policy_multiple: int,
                 rollup_retention_policy_snapshot_interval_type: str):
        pulumi.set(__self__, "num_snapshots", num_snapshots)
        pulumi.set(__self__, "rollup_retention_policy_multiple", rollup_retention_policy_multiple)
        pulumi.set(__self__, "rollup_retention_policy_snapshot_interval_type", rollup_retention_policy_snapshot_interval_type)

    @property
    @pulumi.getter(name="numSnapshots")
    def num_snapshots(self) -> int:
        return pulumi.get(self, "num_snapshots")

    @property
    @pulumi.getter(name="rollupRetentionPolicyMultiple")
    def rollup_retention_policy_multiple(self) -> int:
        return pulumi.get(self, "rollup_retention_policy_multiple")

    @property
    @pulumi.getter(name="rollupRetentionPolicySnapshotIntervalType")
    def rollup_retention_policy_snapshot_interval_type(self) -> str:
        return pulumi.get(self, "rollup_retention_policy_snapshot_interval_type")


@pulumi.output_type
class GetProtectionRuleCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: (Optional) the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProtectionRuleCategoryFilterResult(dict):
    def __init__(__self__, *,
                 kind_lists: Sequence[str],
                 params: Sequence['outputs.GetProtectionRuleCategoryFilterParamResult'],
                 type: str):
        """
        :param Sequence[str] kind_lists: (Optional/Computed) List of kinds associated with this filter.
        :param Sequence['GetProtectionRuleCategoryFilterParamArgs'] params: (Optional/Computed) A list of category key and list of values.
        :param str type: (Optional/Computed) The type of the filter being used.
        """
        pulumi.set(__self__, "kind_lists", kind_lists)
        pulumi.set(__self__, "params", params)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="kindLists")
    def kind_lists(self) -> Sequence[str]:
        """
        (Optional/Computed) List of kinds associated with this filter.
        """
        return pulumi.get(self, "kind_lists")

    @property
    @pulumi.getter
    def params(self) -> Sequence['outputs.GetProtectionRuleCategoryFilterParamResult']:
        """
        (Optional/Computed) A list of category key and list of values.
        """
        return pulumi.get(self, "params")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Optional/Computed) The type of the filter being used.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetProtectionRuleCategoryFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: (Optional) the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetProtectionRuleOrderedAvailabilityZoneListResult(dict):
    def __init__(__self__, *,
                 availability_zone_url: str,
                 cluster_uuid: str):
        pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        pulumi.set(__self__, "cluster_uuid", cluster_uuid)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> str:
        return pulumi.get(self, "availability_zone_url")

    @property
    @pulumi.getter(name="clusterUuid")
    def cluster_uuid(self) -> str:
        return pulumi.get(self, "cluster_uuid")


@pulumi.output_type
class GetProtectionRuleOwnerReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProtectionRuleProjectReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProtectionRulesEntityResult(dict):
    def __init__(__self__, *,
                 api_version: str,
                 availability_zone_connectivity_lists: Sequence['outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListResult'],
                 categories: Sequence['outputs.GetProtectionRulesEntityCategoryResult'],
                 category_filters: Sequence['outputs.GetProtectionRulesEntityCategoryFilterResult'],
                 description: str,
                 metadata: Mapping[str, str],
                 name: str,
                 ordered_availability_zone_lists: Sequence['outputs.GetProtectionRulesEntityOrderedAvailabilityZoneListResult'],
                 owner_references: Sequence['outputs.GetProtectionRulesEntityOwnerReferenceResult'],
                 project_references: Sequence['outputs.GetProtectionRulesEntityProjectReferenceResult'],
                 start_time: str,
                 state: str):
        """
        :param str api_version: version of the API
        :param Sequence['GetProtectionRulesEntityAvailabilityZoneConnectivityListArgs'] availability_zone_connectivity_lists: (Required) This encodes the datapipes between various availability zones and\\nthe backup policy of the pipes.
        :param Sequence['GetProtectionRulesEntityCategoryFilterArgs'] category_filters: (Optional/Computed)
        :param str description: A description for protection rule.
        :param str name: (Optional) the name.
        :param Sequence['GetProtectionRulesEntityOrderedAvailabilityZoneListArgs'] ordered_availability_zone_lists: (Required) A list of availability zones, each of which, receives a replica\\nof the data for the entities protected by this protection rule.
               * `ordered_availability_zone_list.#.cluster_uuid` - (Optional/Computed) UUID of specific cluster to which we will be replicating.
               * `ordered_availability_zone_list.#.availability_zone_url` - (Optional/Computed) The FQDN or IP address of the availability zone.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "availability_zone_connectivity_lists", availability_zone_connectivity_lists)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "category_filters", category_filters)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ordered_availability_zone_lists", ordered_availability_zone_lists)
        pulumi.set(__self__, "owner_references", owner_references)
        pulumi.set(__self__, "project_references", project_references)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        version of the API
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="availabilityZoneConnectivityLists")
    def availability_zone_connectivity_lists(self) -> Sequence['outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListResult']:
        """
        (Required) This encodes the datapipes between various availability zones and\\nthe backup policy of the pipes.
        """
        return pulumi.get(self, "availability_zone_connectivity_lists")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetProtectionRulesEntityCategoryResult']:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="categoryFilters")
    def category_filters(self) -> Sequence['outputs.GetProtectionRulesEntityCategoryFilterResult']:
        """
        (Optional/Computed)
        """
        return pulumi.get(self, "category_filters")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description for protection rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orderedAvailabilityZoneLists")
    def ordered_availability_zone_lists(self) -> Sequence['outputs.GetProtectionRulesEntityOrderedAvailabilityZoneListResult']:
        """
        (Required) A list of availability zones, each of which, receives a replica\\nof the data for the entities protected by this protection rule.
        * `ordered_availability_zone_list.#.cluster_uuid` - (Optional/Computed) UUID of specific cluster to which we will be replicating.
        * `ordered_availability_zone_list.#.availability_zone_url` - (Optional/Computed) The FQDN or IP address of the availability zone.
        """
        return pulumi.get(self, "ordered_availability_zone_lists")

    @property
    @pulumi.getter(name="ownerReferences")
    def owner_references(self) -> Sequence['outputs.GetProtectionRulesEntityOwnerReferenceResult']:
        return pulumi.get(self, "owner_references")

    @property
    @pulumi.getter(name="projectReferences")
    def project_references(self) -> Sequence['outputs.GetProtectionRulesEntityProjectReferenceResult']:
        return pulumi.get(self, "project_references")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetProtectionRulesEntityAvailabilityZoneConnectivityListResult(dict):
    def __init__(__self__, *,
                 destination_availability_zone_index: int,
                 snapshot_schedule_lists: Sequence['outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListResult'],
                 source_availability_zone_index: int):
        """
        :param int destination_availability_zone_index: (Optional/Computed) Index of the availability zone.
        :param Sequence['GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListArgs'] snapshot_schedule_lists: (Optional/Computed) Snapshot schedules for the pair of the availability zones.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.recovery_point_objective_secs` - (Required) "A recovery point objective (RPO) is the maximum acceptable amount of data loss.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.num_snapshots` - (Optional/Computed) Number of snapshots need to be retained.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_multiple` - (Optional/Computed) Multiplier to 'snapshot_interval_type'.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_snapshot_interval_type` - (Optional/Computed)
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.auto_suspend_timeout_secs` - (Optional/Computed) Auto suspend timeout in case of connection failure between the sites.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.snapshot_type` - (Optional/Computed) Crash consistent or Application Consistent snapshot.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.remote_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.
        :param int source_availability_zone_index: (Optional/Computed) Index of the availability zone.
        """
        pulumi.set(__self__, "destination_availability_zone_index", destination_availability_zone_index)
        pulumi.set(__self__, "snapshot_schedule_lists", snapshot_schedule_lists)
        pulumi.set(__self__, "source_availability_zone_index", source_availability_zone_index)

    @property
    @pulumi.getter(name="destinationAvailabilityZoneIndex")
    def destination_availability_zone_index(self) -> int:
        """
        (Optional/Computed) Index of the availability zone.
        """
        return pulumi.get(self, "destination_availability_zone_index")

    @property
    @pulumi.getter(name="snapshotScheduleLists")
    def snapshot_schedule_lists(self) -> Sequence['outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListResult']:
        """
        (Optional/Computed) Snapshot schedules for the pair of the availability zones.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.recovery_point_objective_secs` - (Required) "A recovery point objective (RPO) is the maximum acceptable amount of data loss.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.num_snapshots` - (Optional/Computed) Number of snapshots need to be retained.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_multiple` - (Optional/Computed) Multiplier to 'snapshot_interval_type'.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_snapshot_interval_type` - (Optional/Computed)
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.auto_suspend_timeout_secs` - (Optional/Computed) Auto suspend timeout in case of connection failure between the sites.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.snapshot_type` - (Optional/Computed) Crash consistent or Application Consistent snapshot.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.remote_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.
        """
        return pulumi.get(self, "snapshot_schedule_lists")

    @property
    @pulumi.getter(name="sourceAvailabilityZoneIndex")
    def source_availability_zone_index(self) -> int:
        """
        (Optional/Computed) Index of the availability zone.
        """
        return pulumi.get(self, "source_availability_zone_index")


@pulumi.output_type
class GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListResult(dict):
    def __init__(__self__, *,
                 auto_suspend_timeout_secs: int,
                 local_snapshot_retention_policies: Sequence['outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyResult'],
                 recovery_point_objective_secs: int,
                 remote_snapshot_retention_policies: Sequence['outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyResult'],
                 snapshot_type: str):
        pulumi.set(__self__, "auto_suspend_timeout_secs", auto_suspend_timeout_secs)
        pulumi.set(__self__, "local_snapshot_retention_policies", local_snapshot_retention_policies)
        pulumi.set(__self__, "recovery_point_objective_secs", recovery_point_objective_secs)
        pulumi.set(__self__, "remote_snapshot_retention_policies", remote_snapshot_retention_policies)
        pulumi.set(__self__, "snapshot_type", snapshot_type)

    @property
    @pulumi.getter(name="autoSuspendTimeoutSecs")
    def auto_suspend_timeout_secs(self) -> int:
        return pulumi.get(self, "auto_suspend_timeout_secs")

    @property
    @pulumi.getter(name="localSnapshotRetentionPolicies")
    def local_snapshot_retention_policies(self) -> Sequence['outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyResult']:
        return pulumi.get(self, "local_snapshot_retention_policies")

    @property
    @pulumi.getter(name="recoveryPointObjectiveSecs")
    def recovery_point_objective_secs(self) -> int:
        return pulumi.get(self, "recovery_point_objective_secs")

    @property
    @pulumi.getter(name="remoteSnapshotRetentionPolicies")
    def remote_snapshot_retention_policies(self) -> Sequence['outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyResult']:
        return pulumi.get(self, "remote_snapshot_retention_policies")

    @property
    @pulumi.getter(name="snapshotType")
    def snapshot_type(self) -> str:
        return pulumi.get(self, "snapshot_type")


@pulumi.output_type
class GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyResult(dict):
    def __init__(__self__, *,
                 num_snapshots: int,
                 rollup_retention_policy_multiple: int,
                 rollup_retention_policy_snapshot_interval_type: str):
        pulumi.set(__self__, "num_snapshots", num_snapshots)
        pulumi.set(__self__, "rollup_retention_policy_multiple", rollup_retention_policy_multiple)
        pulumi.set(__self__, "rollup_retention_policy_snapshot_interval_type", rollup_retention_policy_snapshot_interval_type)

    @property
    @pulumi.getter(name="numSnapshots")
    def num_snapshots(self) -> int:
        return pulumi.get(self, "num_snapshots")

    @property
    @pulumi.getter(name="rollupRetentionPolicyMultiple")
    def rollup_retention_policy_multiple(self) -> int:
        return pulumi.get(self, "rollup_retention_policy_multiple")

    @property
    @pulumi.getter(name="rollupRetentionPolicySnapshotIntervalType")
    def rollup_retention_policy_snapshot_interval_type(self) -> str:
        return pulumi.get(self, "rollup_retention_policy_snapshot_interval_type")


@pulumi.output_type
class GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyResult(dict):
    def __init__(__self__, *,
                 num_snapshots: int,
                 rollup_retention_policy_multiple: int,
                 rollup_retention_policy_snapshot_interval_type: str):
        pulumi.set(__self__, "num_snapshots", num_snapshots)
        pulumi.set(__self__, "rollup_retention_policy_multiple", rollup_retention_policy_multiple)
        pulumi.set(__self__, "rollup_retention_policy_snapshot_interval_type", rollup_retention_policy_snapshot_interval_type)

    @property
    @pulumi.getter(name="numSnapshots")
    def num_snapshots(self) -> int:
        return pulumi.get(self, "num_snapshots")

    @property
    @pulumi.getter(name="rollupRetentionPolicyMultiple")
    def rollup_retention_policy_multiple(self) -> int:
        return pulumi.get(self, "rollup_retention_policy_multiple")

    @property
    @pulumi.getter(name="rollupRetentionPolicySnapshotIntervalType")
    def rollup_retention_policy_snapshot_interval_type(self) -> str:
        return pulumi.get(self, "rollup_retention_policy_snapshot_interval_type")


@pulumi.output_type
class GetProtectionRulesEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: (Optional) the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProtectionRulesEntityCategoryFilterResult(dict):
    def __init__(__self__, *,
                 kind_lists: Sequence[str],
                 params: Sequence['outputs.GetProtectionRulesEntityCategoryFilterParamResult'],
                 type: str):
        """
        :param Sequence[str] kind_lists: (Optional/Computed) List of kinds associated with this filter.
        :param Sequence['GetProtectionRulesEntityCategoryFilterParamArgs'] params: (Optional/Computed) A list of category key and list of values.
        :param str type: (Optional/Computed) The type of the filter being used.
        """
        pulumi.set(__self__, "kind_lists", kind_lists)
        pulumi.set(__self__, "params", params)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="kindLists")
    def kind_lists(self) -> Sequence[str]:
        """
        (Optional/Computed) List of kinds associated with this filter.
        """
        return pulumi.get(self, "kind_lists")

    @property
    @pulumi.getter
    def params(self) -> Sequence['outputs.GetProtectionRulesEntityCategoryFilterParamResult']:
        """
        (Optional/Computed) A list of category key and list of values.
        """
        return pulumi.get(self, "params")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Optional/Computed) The type of the filter being used.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetProtectionRulesEntityCategoryFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: (Optional) the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetProtectionRulesEntityOrderedAvailabilityZoneListResult(dict):
    def __init__(__self__, *,
                 availability_zone_url: str,
                 cluster_uuid: str):
        pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        pulumi.set(__self__, "cluster_uuid", cluster_uuid)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> str:
        return pulumi.get(self, "availability_zone_url")

    @property
    @pulumi.getter(name="clusterUuid")
    def cluster_uuid(self) -> str:
        return pulumi.get(self, "cluster_uuid")


@pulumi.output_type
class GetProtectionRulesEntityOwnerReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProtectionRulesEntityProjectReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: (Optional) the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRecoveryPlanOwnerReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanParameterResult(dict):
    def __init__(__self__, *,
                 floating_ip_assignment_lists: Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListResult'],
                 network_mapping_lists: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListResult']):
        """
        :param Sequence['GetRecoveryPlanParameterFloatingIpAssignmentListArgs'] floating_ip_assignment_lists: (Optional/Computed) Floating IP assignment for VMs upon recovery in an Availability Zone. This is applicable only for the public cloud Availability Zones.
               * `parameters.0.floating_ip_assignment_list.#.availability_zone_url` - (Required) URL of the Availability Zone.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list` - (Required) IP assignment for VMs upon recovery in the specified Availability Zone.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference` - (Required) Reference to a vm.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.kind` - (Required) The kind name.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.uuid` - (Required) The uuid.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.name` - (Optional/Computed) The name.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information` - (Required) Information about vnic to which floating IP has to be assigned.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.ip` - (Optional/Computed) IP address associated with vnic for which floating IP has to be assigned on failover.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.uuid` - (Required) Uuid of the vnic of the VM to which floating IP has to be assigned.
        :param Sequence['GetRecoveryPlanParameterNetworkMappingListArgs'] network_mapping_lists: (Required) Network mappings to be used for the Recovery Plan. This will be represented by array of network mappings across the Availability Zones.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list` - (Required) Mapping of networks across the Availability Zones.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.availability_zone_url` - (Optional/Computed) URL of the Availability Zone.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.name` - (Optional/Computed) The name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.use_vpc_reference` - (Optional/Computed) The reference to a VPC.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference` - (Optional/Computed) The reference to a VPC.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.kind` - (Optional/Computed) The kind name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.uuid` - (Optional/Computed) The uuid.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.name` - (Optional/Computed) The name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.name` - (Required) Name of the network.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.name` - (Optional/Computed) The name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.name` - (Required) Name of the network.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the recovery network for migrate/ failover action on the Recovery Plan.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the test network for test failover action on the Recovery Plan.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list` - (Optional/Computed) The clusters where the recovery and test networks reside. This is required to specify network mapping across clusters for a Recovery Plan created to handle failover within the same Availability Zone.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.kind` - (Optional/Computed) The kind name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.uuid` - (Optional/Computed) The uuid.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.name` - (Optional/Computed) The name.
        """
        pulumi.set(__self__, "floating_ip_assignment_lists", floating_ip_assignment_lists)
        pulumi.set(__self__, "network_mapping_lists", network_mapping_lists)

    @property
    @pulumi.getter(name="floatingIpAssignmentLists")
    def floating_ip_assignment_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListResult']:
        """
        (Optional/Computed) Floating IP assignment for VMs upon recovery in an Availability Zone. This is applicable only for the public cloud Availability Zones.
        * `parameters.0.floating_ip_assignment_list.#.availability_zone_url` - (Required) URL of the Availability Zone.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list` - (Required) IP assignment for VMs upon recovery in the specified Availability Zone.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference` - (Required) Reference to a vm.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.kind` - (Required) The kind name.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.uuid` - (Required) The uuid.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.name` - (Optional/Computed) The name.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information` - (Required) Information about vnic to which floating IP has to be assigned.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.ip` - (Optional/Computed) IP address associated with vnic for which floating IP has to be assigned on failover.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.uuid` - (Required) Uuid of the vnic of the VM to which floating IP has to be assigned.
        """
        return pulumi.get(self, "floating_ip_assignment_lists")

    @property
    @pulumi.getter(name="networkMappingLists")
    def network_mapping_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListResult']:
        """
        (Required) Network mappings to be used for the Recovery Plan. This will be represented by array of network mappings across the Availability Zones.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list` - (Required) Mapping of networks across the Availability Zones.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.availability_zone_url` - (Optional/Computed) URL of the Availability Zone.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.name` - (Optional/Computed) The name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.use_vpc_reference` - (Optional/Computed) The reference to a VPC.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference` - (Optional/Computed) The reference to a VPC.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.kind` - (Optional/Computed) The kind name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.uuid` - (Optional/Computed) The uuid.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.name` - (Optional/Computed) The name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.name` - (Required) Name of the network.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.name` - (Optional/Computed) The name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.name` - (Required) Name of the network.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the recovery network for migrate/ failover action on the Recovery Plan.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the test network for test failover action on the Recovery Plan.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list` - (Optional/Computed) The clusters where the recovery and test networks reside. This is required to specify network mapping across clusters for a Recovery Plan created to handle failover within the same Availability Zone.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.kind` - (Optional/Computed) The kind name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.uuid` - (Optional/Computed) The uuid.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.name` - (Optional/Computed) The name.
        """
        return pulumi.get(self, "network_mapping_lists")


@pulumi.output_type
class GetRecoveryPlanParameterFloatingIpAssignmentListResult(dict):
    def __init__(__self__, *,
                 availability_zone_url: str,
                 vm_ip_assignment_lists: Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListResult']):
        pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        pulumi.set(__self__, "vm_ip_assignment_lists", vm_ip_assignment_lists)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> str:
        return pulumi.get(self, "availability_zone_url")

    @property
    @pulumi.getter(name="vmIpAssignmentLists")
    def vm_ip_assignment_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListResult']:
        return pulumi.get(self, "vm_ip_assignment_lists")


@pulumi.output_type
class GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListResult(dict):
    def __init__(__self__, *,
                 recovery_floating_ip_configs: Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigResult'],
                 test_floating_ip_configs: Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigResult'],
                 vm_nic_informations: Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformationResult'],
                 vm_references: Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmReferenceResult']):
        pulumi.set(__self__, "recovery_floating_ip_configs", recovery_floating_ip_configs)
        pulumi.set(__self__, "test_floating_ip_configs", test_floating_ip_configs)
        pulumi.set(__self__, "vm_nic_informations", vm_nic_informations)
        pulumi.set(__self__, "vm_references", vm_references)

    @property
    @pulumi.getter(name="recoveryFloatingIpConfigs")
    def recovery_floating_ip_configs(self) -> Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigResult']:
        return pulumi.get(self, "recovery_floating_ip_configs")

    @property
    @pulumi.getter(name="testFloatingIpConfigs")
    def test_floating_ip_configs(self) -> Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigResult']:
        return pulumi.get(self, "test_floating_ip_configs")

    @property
    @pulumi.getter(name="vmNicInformations")
    def vm_nic_informations(self) -> Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformationResult']:
        return pulumi.get(self, "vm_nic_informations")

    @property
    @pulumi.getter(name="vmReferences")
    def vm_references(self) -> Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmReferenceResult']:
        return pulumi.get(self, "vm_references")


@pulumi.output_type
class GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 should_allocate_dynamically: bool):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "should_allocate_dynamically", should_allocate_dynamically)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="shouldAllocateDynamically")
    def should_allocate_dynamically(self) -> bool:
        return pulumi.get(self, "should_allocate_dynamically")


@pulumi.output_type
class GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 should_allocate_dynamically: bool):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "should_allocate_dynamically", should_allocate_dynamically)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="shouldAllocateDynamically")
    def should_allocate_dynamically(self) -> bool:
        return pulumi.get(self, "should_allocate_dynamically")


@pulumi.output_type
class GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformationResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 uuid: str):
        """
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListResult(dict):
    def __init__(__self__, *,
                 are_networks_stretched: bool,
                 availability_zone_network_mapping_lists: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListResult']):
        pulumi.set(__self__, "are_networks_stretched", are_networks_stretched)
        pulumi.set(__self__, "availability_zone_network_mapping_lists", availability_zone_network_mapping_lists)

    @property
    @pulumi.getter(name="areNetworksStretched")
    def are_networks_stretched(self) -> bool:
        return pulumi.get(self, "are_networks_stretched")

    @property
    @pulumi.getter(name="availabilityZoneNetworkMappingLists")
    def availability_zone_network_mapping_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListResult']:
        return pulumi.get(self, "availability_zone_network_mapping_lists")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListResult(dict):
    def __init__(__self__, *,
                 availability_zone_url: str,
                 cluster_reference_lists: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListResult'],
                 recovery_ip_assignment_lists: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListResult'],
                 recovery_networks: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkResult'],
                 test_ip_assignment_lists: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListResult'],
                 test_networks: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkResult']):
        pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        pulumi.set(__self__, "cluster_reference_lists", cluster_reference_lists)
        pulumi.set(__self__, "recovery_ip_assignment_lists", recovery_ip_assignment_lists)
        pulumi.set(__self__, "recovery_networks", recovery_networks)
        pulumi.set(__self__, "test_ip_assignment_lists", test_ip_assignment_lists)
        pulumi.set(__self__, "test_networks", test_networks)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> str:
        return pulumi.get(self, "availability_zone_url")

    @property
    @pulumi.getter(name="clusterReferenceLists")
    def cluster_reference_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListResult']:
        return pulumi.get(self, "cluster_reference_lists")

    @property
    @pulumi.getter(name="recoveryIpAssignmentLists")
    def recovery_ip_assignment_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListResult']:
        return pulumi.get(self, "recovery_ip_assignment_lists")

    @property
    @pulumi.getter(name="recoveryNetworks")
    def recovery_networks(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkResult']:
        return pulumi.get(self, "recovery_networks")

    @property
    @pulumi.getter(name="testIpAssignmentLists")
    def test_ip_assignment_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListResult']:
        return pulumi.get(self, "test_ip_assignment_lists")

    @property
    @pulumi.getter(name="testNetworks")
    def test_networks(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkResult']:
        return pulumi.get(self, "test_networks")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListResult(dict):
    def __init__(__self__, *,
                 ip_config_lists: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListResult'],
                 vm_reference: 'outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceResult'):
        pulumi.set(__self__, "ip_config_lists", ip_config_lists)
        pulumi.set(__self__, "vm_reference", vm_reference)

    @property
    @pulumi.getter(name="ipConfigLists")
    def ip_config_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListResult']:
        return pulumi.get(self, "ip_config_lists")

    @property
    @pulumi.getter(name="vmReference")
    def vm_reference(self) -> 'outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceResult':
        return pulumi.get(self, "vm_reference")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListResult(dict):
    def __init__(__self__, *,
                 ip_address: str):
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkResult(dict):
    def __init__(__self__, *,
                 name: str,
                 subnet_lists: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListResult'],
                 use_vpc_reference: bool,
                 virtual_network_references: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceResult'],
                 vpc_references: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceResult']):
        """
        :param str name: (Optional) the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet_lists", subnet_lists)
        pulumi.set(__self__, "use_vpc_reference", use_vpc_reference)
        pulumi.set(__self__, "virtual_network_references", virtual_network_references)
        pulumi.set(__self__, "vpc_references", vpc_references)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetLists")
    def subnet_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListResult']:
        return pulumi.get(self, "subnet_lists")

    @property
    @pulumi.getter(name="useVpcReference")
    def use_vpc_reference(self) -> bool:
        return pulumi.get(self, "use_vpc_reference")

    @property
    @pulumi.getter(name="virtualNetworkReferences")
    def virtual_network_references(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceResult']:
        return pulumi.get(self, "virtual_network_references")

    @property
    @pulumi.getter(name="vpcReferences")
    def vpc_references(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceResult']:
        return pulumi.get(self, "vpc_references")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListResult(dict):
    def __init__(__self__, *,
                 external_connectivity_state: str,
                 gateway_ip: str,
                 prefix_length: int):
        pulumi.set(__self__, "external_connectivity_state", external_connectivity_state)
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter(name="externalConnectivityState")
    def external_connectivity_state(self) -> str:
        return pulumi.get(self, "external_connectivity_state")

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> str:
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListResult(dict):
    def __init__(__self__, *,
                 ip_config_lists: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListResult'],
                 vm_reference: 'outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceResult'):
        pulumi.set(__self__, "ip_config_lists", ip_config_lists)
        pulumi.set(__self__, "vm_reference", vm_reference)

    @property
    @pulumi.getter(name="ipConfigLists")
    def ip_config_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListResult']:
        return pulumi.get(self, "ip_config_lists")

    @property
    @pulumi.getter(name="vmReference")
    def vm_reference(self) -> 'outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceResult':
        return pulumi.get(self, "vm_reference")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListResult(dict):
    def __init__(__self__, *,
                 ip_address: str):
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkResult(dict):
    def __init__(__self__, *,
                 name: str,
                 subnet_lists: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListResult'],
                 use_vpc_reference: bool,
                 virtual_network_references: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceResult'],
                 vpc_references: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceResult']):
        """
        :param str name: (Optional) the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet_lists", subnet_lists)
        pulumi.set(__self__, "use_vpc_reference", use_vpc_reference)
        pulumi.set(__self__, "virtual_network_references", virtual_network_references)
        pulumi.set(__self__, "vpc_references", vpc_references)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetLists")
    def subnet_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListResult']:
        return pulumi.get(self, "subnet_lists")

    @property
    @pulumi.getter(name="useVpcReference")
    def use_vpc_reference(self) -> bool:
        return pulumi.get(self, "use_vpc_reference")

    @property
    @pulumi.getter(name="virtualNetworkReferences")
    def virtual_network_references(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceResult']:
        return pulumi.get(self, "virtual_network_references")

    @property
    @pulumi.getter(name="vpcReferences")
    def vpc_references(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceResult']:
        return pulumi.get(self, "vpc_references")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListResult(dict):
    def __init__(__self__, *,
                 external_connectivity_state: str,
                 gateway_ip: str,
                 prefix_length: int):
        pulumi.set(__self__, "external_connectivity_state", external_connectivity_state)
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter(name="externalConnectivityState")
    def external_connectivity_state(self) -> str:
        return pulumi.get(self, "external_connectivity_state")

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> str:
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanProjectReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanStageListResult(dict):
    def __init__(__self__, *,
                 delay_time_secs: int,
                 stage_uuid: str,
                 stage_works: Sequence['outputs.GetRecoveryPlanStageListStageWorkResult']):
        """
        :param int delay_time_secs: (Optional/Computed) Amount of time in seconds to delay the execution of next stage after execution of current stage.
        :param str stage_uuid: (Optional/Computed) UUID of stage.
        :param Sequence['GetRecoveryPlanStageListStageWorkArgs'] stage_works: (Required) A stage specifies the work to be performed when the Recovery Plan is executed.
        """
        pulumi.set(__self__, "delay_time_secs", delay_time_secs)
        pulumi.set(__self__, "stage_uuid", stage_uuid)
        pulumi.set(__self__, "stage_works", stage_works)

    @property
    @pulumi.getter(name="delayTimeSecs")
    def delay_time_secs(self) -> int:
        """
        (Optional/Computed) Amount of time in seconds to delay the execution of next stage after execution of current stage.
        """
        return pulumi.get(self, "delay_time_secs")

    @property
    @pulumi.getter(name="stageUuid")
    def stage_uuid(self) -> str:
        """
        (Optional/Computed) UUID of stage.
        """
        return pulumi.get(self, "stage_uuid")

    @property
    @pulumi.getter(name="stageWorks")
    def stage_works(self) -> Sequence['outputs.GetRecoveryPlanStageListStageWorkResult']:
        """
        (Required) A stage specifies the work to be performed when the Recovery Plan is executed.
        """
        return pulumi.get(self, "stage_works")


@pulumi.output_type
class GetRecoveryPlanStageListStageWorkResult(dict):
    def __init__(__self__, *,
                 recover_entities: Sequence['outputs.GetRecoveryPlanStageListStageWorkRecoverEntityResult']):
        """
        :param Sequence['GetRecoveryPlanStageListStageWorkRecoverEntityArgs'] recover_entities: (Optional/Computed) Information about entities to be recovered.
        """
        pulumi.set(__self__, "recover_entities", recover_entities)

    @property
    @pulumi.getter(name="recoverEntities")
    def recover_entities(self) -> Sequence['outputs.GetRecoveryPlanStageListStageWorkRecoverEntityResult']:
        """
        (Optional/Computed) Information about entities to be recovered.
        """
        return pulumi.get(self, "recover_entities")


@pulumi.output_type
class GetRecoveryPlanStageListStageWorkRecoverEntityResult(dict):
    def __init__(__self__, *,
                 entity_info_lists: Sequence['outputs.GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListResult']):
        """
        :param Sequence['GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListArgs'] entity_info_lists: (Optional/Computed) Information about entities to be recovered as part of this stage. For VM, entity information will include set of scripts to be executed after recovery of VM. Only one of categories or any_entity_reference has to be provided.
               * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_kind` - (Optional/Computed) Reference to a kind.
               * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_uuid` - (Optional/Computed) Reference to a uuid.
               * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_name` - (Optional/Computed) Reference to a name.
               * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.categories` - (Optional/Computed)  Categories for filtering entities.
        """
        pulumi.set(__self__, "entity_info_lists", entity_info_lists)

    @property
    @pulumi.getter(name="entityInfoLists")
    def entity_info_lists(self) -> Sequence['outputs.GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListResult']:
        """
        (Optional/Computed) Information about entities to be recovered as part of this stage. For VM, entity information will include set of scripts to be executed after recovery of VM. Only one of categories or any_entity_reference has to be provided.
        * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_kind` - (Optional/Computed) Reference to a kind.
        * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_uuid` - (Optional/Computed) Reference to a uuid.
        * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_name` - (Optional/Computed) Reference to a name.
        * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.categories` - (Optional/Computed)  Categories for filtering entities.
        """
        return pulumi.get(self, "entity_info_lists")


@pulumi.output_type
class GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListResult(dict):
    def __init__(__self__, *,
                 any_entity_reference_kind: str,
                 any_entity_reference_name: str,
                 any_entity_reference_uuid: str,
                 categories: Sequence['outputs.GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListCategoryResult'],
                 script_lists: Sequence['outputs.GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListScriptListResult']):
        pulumi.set(__self__, "any_entity_reference_kind", any_entity_reference_kind)
        pulumi.set(__self__, "any_entity_reference_name", any_entity_reference_name)
        pulumi.set(__self__, "any_entity_reference_uuid", any_entity_reference_uuid)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "script_lists", script_lists)

    @property
    @pulumi.getter(name="anyEntityReferenceKind")
    def any_entity_reference_kind(self) -> str:
        return pulumi.get(self, "any_entity_reference_kind")

    @property
    @pulumi.getter(name="anyEntityReferenceName")
    def any_entity_reference_name(self) -> str:
        return pulumi.get(self, "any_entity_reference_name")

    @property
    @pulumi.getter(name="anyEntityReferenceUuid")
    def any_entity_reference_uuid(self) -> str:
        return pulumi.get(self, "any_entity_reference_uuid")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListCategoryResult']:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="scriptLists")
    def script_lists(self) -> Sequence['outputs.GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListScriptListResult']:
        return pulumi.get(self, "script_lists")


@pulumi.output_type
class GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: (Optional) the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListScriptListResult(dict):
    def __init__(__self__, *,
                 enable_script_exec: bool,
                 timeout: str):
        pulumi.set(__self__, "enable_script_exec", enable_script_exec)
        pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="enableScriptExec")
    def enable_script_exec(self) -> bool:
        return pulumi.get(self, "enable_script_exec")

    @property
    @pulumi.getter
    def timeout(self) -> str:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetRecoveryPlansEntityResult(dict):
    def __init__(__self__, *,
                 api_version: str,
                 categories: Sequence['outputs.GetRecoveryPlansEntityCategoryResult'],
                 description: str,
                 metadata: Mapping[str, str],
                 name: str,
                 owner_references: Sequence['outputs.GetRecoveryPlansEntityOwnerReferenceResult'],
                 parameters: Sequence['outputs.GetRecoveryPlansEntityParameterResult'],
                 project_references: Sequence['outputs.GetRecoveryPlansEntityProjectReferenceResult'],
                 stage_lists: Sequence['outputs.GetRecoveryPlansEntityStageListResult'],
                 state: str):
        """
        :param str api_version: version of the API
        :param str description: A description for recovery plan.
        :param str name: (Optional) the name.
        :param Sequence['GetRecoveryPlansEntityParameterArgs'] parameters: (Required) Parameters for the Recovery Plan.
        :param Sequence['GetRecoveryPlansEntityStageListArgs'] stage_lists: (Required) Input for the stages of the Recovery Plan. Each stage will perform a predefined type of task.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_references", owner_references)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "project_references", project_references)
        pulumi.set(__self__, "stage_lists", stage_lists)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        version of the API
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetRecoveryPlansEntityCategoryResult']:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description for recovery plan.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerReferences")
    def owner_references(self) -> Sequence['outputs.GetRecoveryPlansEntityOwnerReferenceResult']:
        return pulumi.get(self, "owner_references")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterResult']:
        """
        (Required) Parameters for the Recovery Plan.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="projectReferences")
    def project_references(self) -> Sequence['outputs.GetRecoveryPlansEntityProjectReferenceResult']:
        return pulumi.get(self, "project_references")

    @property
    @pulumi.getter(name="stageLists")
    def stage_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityStageListResult']:
        """
        (Required) Input for the stages of the Recovery Plan. Each stage will perform a predefined type of task.
        """
        return pulumi.get(self, "stage_lists")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetRecoveryPlansEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: (Optional) the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRecoveryPlansEntityOwnerReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityParameterResult(dict):
    def __init__(__self__, *,
                 floating_ip_assignment_lists: Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListResult'],
                 network_mapping_lists: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListResult']):
        """
        :param Sequence['GetRecoveryPlansEntityParameterFloatingIpAssignmentListArgs'] floating_ip_assignment_lists: (Optional/Computed) Floating IP assignment for VMs upon recovery in an Availability Zone. This is applicable only for the public cloud Availability Zones.
               * `parameters.0.floating_ip_assignment_list.#.availability_zone_url` - (Required) URL of the Availability Zone.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list` - (Required) IP assignment for VMs upon recovery in the specified Availability Zone.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference` - (Required) Reference to a vm.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.kind` - (Required) The kind name.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.uuid` - (Required) The uuid.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.name` - (Optional/Computed) The name.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information` - (Required) Information about vnic to which floating IP has to be assigned.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.ip` - (Optional/Computed) IP address associated with vnic for which floating IP has to be assigned on failover.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.uuid` - (Required) Uuid of the vnic of the VM to which floating IP has to be assigned.
        :param Sequence['GetRecoveryPlansEntityParameterNetworkMappingListArgs'] network_mapping_lists: (Required) Network mappings to be used for the Recovery Plan. This will be represented by array of network mappings across the Availability Zones.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list` - (Required) Mapping of networks across the Availability Zones.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.availability_zone_url` - (Optional/Computed) URL of the Availability Zone.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.name` - (Optional/Computed) The name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.use_vpc_reference` - (Optional/Computed) The reference to a VPC.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference` - (Optional/Computed) The reference to a VPC.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.kind` - (Optional/Computed) The kind name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.uuid` - (Optional/Computed) The uuid.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.name` - (Optional/Computed) The name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.name` - (Required) Name of the network.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.name` - (Optional/Computed) The name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.name` - (Required) Name of the network.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the recovery network for migrate/ failover action on the Recovery Plan.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the test network for test failover action on the Recovery Plan.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list` - (Optional/Computed) The clusters where the recovery and test networks reside. This is required to specify network mapping across clusters for a Recovery Plan created to handle failover within the same Availability Zone.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.kind` - (Optional/Computed) The kind name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.uuid` - (Optional/Computed) The uuid.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.name` - (Optional/Computed) The name.
        """
        pulumi.set(__self__, "floating_ip_assignment_lists", floating_ip_assignment_lists)
        pulumi.set(__self__, "network_mapping_lists", network_mapping_lists)

    @property
    @pulumi.getter(name="floatingIpAssignmentLists")
    def floating_ip_assignment_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListResult']:
        """
        (Optional/Computed) Floating IP assignment for VMs upon recovery in an Availability Zone. This is applicable only for the public cloud Availability Zones.
        * `parameters.0.floating_ip_assignment_list.#.availability_zone_url` - (Required) URL of the Availability Zone.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list` - (Required) IP assignment for VMs upon recovery in the specified Availability Zone.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference` - (Required) Reference to a vm.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.kind` - (Required) The kind name.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.uuid` - (Required) The uuid.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.name` - (Optional/Computed) The name.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information` - (Required) Information about vnic to which floating IP has to be assigned.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.ip` - (Optional/Computed) IP address associated with vnic for which floating IP has to be assigned on failover.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.uuid` - (Required) Uuid of the vnic of the VM to which floating IP has to be assigned.
        """
        return pulumi.get(self, "floating_ip_assignment_lists")

    @property
    @pulumi.getter(name="networkMappingLists")
    def network_mapping_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListResult']:
        """
        (Required) Network mappings to be used for the Recovery Plan. This will be represented by array of network mappings across the Availability Zones.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list` - (Required) Mapping of networks across the Availability Zones.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.availability_zone_url` - (Optional/Computed) URL of the Availability Zone.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.name` - (Optional/Computed) The name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.use_vpc_reference` - (Optional/Computed) The reference to a VPC.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference` - (Optional/Computed) The reference to a VPC.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.kind` - (Optional/Computed) The kind name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.uuid` - (Optional/Computed) The uuid.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.name` - (Optional/Computed) The name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.name` - (Required) Name of the network.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.name` - (Optional/Computed) The name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.name` - (Required) Name of the network.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the recovery network for migrate/ failover action on the Recovery Plan.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the test network for test failover action on the Recovery Plan.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list` - (Optional/Computed) The clusters where the recovery and test networks reside. This is required to specify network mapping across clusters for a Recovery Plan created to handle failover within the same Availability Zone.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.kind` - (Optional/Computed) The kind name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.uuid` - (Optional/Computed) The uuid.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.name` - (Optional/Computed) The name.
        """
        return pulumi.get(self, "network_mapping_lists")


@pulumi.output_type
class GetRecoveryPlansEntityParameterFloatingIpAssignmentListResult(dict):
    def __init__(__self__, *,
                 availability_zone_url: str,
                 vm_ip_assignment_lists: Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListResult']):
        pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        pulumi.set(__self__, "vm_ip_assignment_lists", vm_ip_assignment_lists)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> str:
        return pulumi.get(self, "availability_zone_url")

    @property
    @pulumi.getter(name="vmIpAssignmentLists")
    def vm_ip_assignment_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListResult']:
        return pulumi.get(self, "vm_ip_assignment_lists")


@pulumi.output_type
class GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListResult(dict):
    def __init__(__self__, *,
                 recovery_floating_ip_configs: Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigResult'],
                 test_floating_ip_configs: Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigResult'],
                 vm_nic_informations: Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformationResult'],
                 vm_references: Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmReferenceResult']):
        pulumi.set(__self__, "recovery_floating_ip_configs", recovery_floating_ip_configs)
        pulumi.set(__self__, "test_floating_ip_configs", test_floating_ip_configs)
        pulumi.set(__self__, "vm_nic_informations", vm_nic_informations)
        pulumi.set(__self__, "vm_references", vm_references)

    @property
    @pulumi.getter(name="recoveryFloatingIpConfigs")
    def recovery_floating_ip_configs(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigResult']:
        return pulumi.get(self, "recovery_floating_ip_configs")

    @property
    @pulumi.getter(name="testFloatingIpConfigs")
    def test_floating_ip_configs(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigResult']:
        return pulumi.get(self, "test_floating_ip_configs")

    @property
    @pulumi.getter(name="vmNicInformations")
    def vm_nic_informations(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformationResult']:
        return pulumi.get(self, "vm_nic_informations")

    @property
    @pulumi.getter(name="vmReferences")
    def vm_references(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmReferenceResult']:
        return pulumi.get(self, "vm_references")


@pulumi.output_type
class GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 should_allocate_dynamically: bool):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "should_allocate_dynamically", should_allocate_dynamically)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="shouldAllocateDynamically")
    def should_allocate_dynamically(self) -> bool:
        return pulumi.get(self, "should_allocate_dynamically")


@pulumi.output_type
class GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 should_allocate_dynamically: bool):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "should_allocate_dynamically", should_allocate_dynamically)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="shouldAllocateDynamically")
    def should_allocate_dynamically(self) -> bool:
        return pulumi.get(self, "should_allocate_dynamically")


@pulumi.output_type
class GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformationResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 uuid: str):
        """
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListResult(dict):
    def __init__(__self__, *,
                 are_networks_stretched: bool,
                 availability_zone_network_mapping_lists: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListResult']):
        pulumi.set(__self__, "are_networks_stretched", are_networks_stretched)
        pulumi.set(__self__, "availability_zone_network_mapping_lists", availability_zone_network_mapping_lists)

    @property
    @pulumi.getter(name="areNetworksStretched")
    def are_networks_stretched(self) -> bool:
        return pulumi.get(self, "are_networks_stretched")

    @property
    @pulumi.getter(name="availabilityZoneNetworkMappingLists")
    def availability_zone_network_mapping_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListResult']:
        return pulumi.get(self, "availability_zone_network_mapping_lists")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListResult(dict):
    def __init__(__self__, *,
                 availability_zone_url: str,
                 cluster_reference_lists: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListResult'],
                 recovery_ip_assignment_lists: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListResult'],
                 recovery_networks: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkResult'],
                 test_ip_assignment_lists: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListResult'],
                 test_networks: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkResult']):
        pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        pulumi.set(__self__, "cluster_reference_lists", cluster_reference_lists)
        pulumi.set(__self__, "recovery_ip_assignment_lists", recovery_ip_assignment_lists)
        pulumi.set(__self__, "recovery_networks", recovery_networks)
        pulumi.set(__self__, "test_ip_assignment_lists", test_ip_assignment_lists)
        pulumi.set(__self__, "test_networks", test_networks)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> str:
        return pulumi.get(self, "availability_zone_url")

    @property
    @pulumi.getter(name="clusterReferenceLists")
    def cluster_reference_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListResult']:
        return pulumi.get(self, "cluster_reference_lists")

    @property
    @pulumi.getter(name="recoveryIpAssignmentLists")
    def recovery_ip_assignment_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListResult']:
        return pulumi.get(self, "recovery_ip_assignment_lists")

    @property
    @pulumi.getter(name="recoveryNetworks")
    def recovery_networks(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkResult']:
        return pulumi.get(self, "recovery_networks")

    @property
    @pulumi.getter(name="testIpAssignmentLists")
    def test_ip_assignment_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListResult']:
        return pulumi.get(self, "test_ip_assignment_lists")

    @property
    @pulumi.getter(name="testNetworks")
    def test_networks(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkResult']:
        return pulumi.get(self, "test_networks")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListResult(dict):
    def __init__(__self__, *,
                 ip_config_lists: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListResult'],
                 vm_reference: 'outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceResult'):
        pulumi.set(__self__, "ip_config_lists", ip_config_lists)
        pulumi.set(__self__, "vm_reference", vm_reference)

    @property
    @pulumi.getter(name="ipConfigLists")
    def ip_config_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListResult']:
        return pulumi.get(self, "ip_config_lists")

    @property
    @pulumi.getter(name="vmReference")
    def vm_reference(self) -> 'outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceResult':
        return pulumi.get(self, "vm_reference")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListResult(dict):
    def __init__(__self__, *,
                 ip_address: str):
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkResult(dict):
    def __init__(__self__, *,
                 name: str,
                 subnet_lists: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListResult'],
                 use_vpc_reference: bool,
                 virtual_network_references: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceResult'],
                 vpc_references: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceResult']):
        """
        :param str name: (Optional) the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet_lists", subnet_lists)
        pulumi.set(__self__, "use_vpc_reference", use_vpc_reference)
        pulumi.set(__self__, "virtual_network_references", virtual_network_references)
        pulumi.set(__self__, "vpc_references", vpc_references)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetLists")
    def subnet_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListResult']:
        return pulumi.get(self, "subnet_lists")

    @property
    @pulumi.getter(name="useVpcReference")
    def use_vpc_reference(self) -> bool:
        return pulumi.get(self, "use_vpc_reference")

    @property
    @pulumi.getter(name="virtualNetworkReferences")
    def virtual_network_references(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceResult']:
        return pulumi.get(self, "virtual_network_references")

    @property
    @pulumi.getter(name="vpcReferences")
    def vpc_references(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceResult']:
        return pulumi.get(self, "vpc_references")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListResult(dict):
    def __init__(__self__, *,
                 external_connectivity_state: str,
                 gateway_ip: str,
                 prefix_length: int):
        pulumi.set(__self__, "external_connectivity_state", external_connectivity_state)
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter(name="externalConnectivityState")
    def external_connectivity_state(self) -> str:
        return pulumi.get(self, "external_connectivity_state")

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> str:
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListResult(dict):
    def __init__(__self__, *,
                 ip_config_lists: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListResult'],
                 vm_reference: 'outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceResult'):
        pulumi.set(__self__, "ip_config_lists", ip_config_lists)
        pulumi.set(__self__, "vm_reference", vm_reference)

    @property
    @pulumi.getter(name="ipConfigLists")
    def ip_config_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListResult']:
        return pulumi.get(self, "ip_config_lists")

    @property
    @pulumi.getter(name="vmReference")
    def vm_reference(self) -> 'outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceResult':
        return pulumi.get(self, "vm_reference")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListResult(dict):
    def __init__(__self__, *,
                 ip_address: str):
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkResult(dict):
    def __init__(__self__, *,
                 name: str,
                 subnet_lists: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListResult'],
                 use_vpc_reference: bool,
                 virtual_network_references: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceResult'],
                 vpc_references: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceResult']):
        """
        :param str name: (Optional) the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet_lists", subnet_lists)
        pulumi.set(__self__, "use_vpc_reference", use_vpc_reference)
        pulumi.set(__self__, "virtual_network_references", virtual_network_references)
        pulumi.set(__self__, "vpc_references", vpc_references)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetLists")
    def subnet_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListResult']:
        return pulumi.get(self, "subnet_lists")

    @property
    @pulumi.getter(name="useVpcReference")
    def use_vpc_reference(self) -> bool:
        return pulumi.get(self, "use_vpc_reference")

    @property
    @pulumi.getter(name="virtualNetworkReferences")
    def virtual_network_references(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceResult']:
        return pulumi.get(self, "virtual_network_references")

    @property
    @pulumi.getter(name="vpcReferences")
    def vpc_references(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceResult']:
        return pulumi.get(self, "vpc_references")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListResult(dict):
    def __init__(__self__, *,
                 external_connectivity_state: str,
                 gateway_ip: str,
                 prefix_length: int):
        pulumi.set(__self__, "external_connectivity_state", external_connectivity_state)
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter(name="externalConnectivityState")
    def external_connectivity_state(self) -> str:
        return pulumi.get(self, "external_connectivity_state")

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> str:
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityProjectReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityStageListResult(dict):
    def __init__(__self__, *,
                 delay_time_secs: int,
                 stage_uuid: str,
                 stage_works: Sequence['outputs.GetRecoveryPlansEntityStageListStageWorkResult']):
        """
        :param int delay_time_secs: (Optional/Computed) Amount of time in seconds to delay the execution of next stage after execution of current stage.
        :param str stage_uuid: (Optional/Computed) UUID of stage.
        :param Sequence['GetRecoveryPlansEntityStageListStageWorkArgs'] stage_works: (Required) A stage specifies the work to be performed when the Recovery Plan is executed.
        """
        pulumi.set(__self__, "delay_time_secs", delay_time_secs)
        pulumi.set(__self__, "stage_uuid", stage_uuid)
        pulumi.set(__self__, "stage_works", stage_works)

    @property
    @pulumi.getter(name="delayTimeSecs")
    def delay_time_secs(self) -> int:
        """
        (Optional/Computed) Amount of time in seconds to delay the execution of next stage after execution of current stage.
        """
        return pulumi.get(self, "delay_time_secs")

    @property
    @pulumi.getter(name="stageUuid")
    def stage_uuid(self) -> str:
        """
        (Optional/Computed) UUID of stage.
        """
        return pulumi.get(self, "stage_uuid")

    @property
    @pulumi.getter(name="stageWorks")
    def stage_works(self) -> Sequence['outputs.GetRecoveryPlansEntityStageListStageWorkResult']:
        """
        (Required) A stage specifies the work to be performed when the Recovery Plan is executed.
        """
        return pulumi.get(self, "stage_works")


@pulumi.output_type
class GetRecoveryPlansEntityStageListStageWorkResult(dict):
    def __init__(__self__, *,
                 recover_entities: Sequence['outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityResult']):
        """
        :param Sequence['GetRecoveryPlansEntityStageListStageWorkRecoverEntityArgs'] recover_entities: (Optional/Computed) Information about entities to be recovered.
        """
        pulumi.set(__self__, "recover_entities", recover_entities)

    @property
    @pulumi.getter(name="recoverEntities")
    def recover_entities(self) -> Sequence['outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityResult']:
        """
        (Optional/Computed) Information about entities to be recovered.
        """
        return pulumi.get(self, "recover_entities")


@pulumi.output_type
class GetRecoveryPlansEntityStageListStageWorkRecoverEntityResult(dict):
    def __init__(__self__, *,
                 entity_info_lists: Sequence['outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListResult']):
        """
        :param Sequence['GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListArgs'] entity_info_lists: (Optional/Computed) Information about entities to be recovered as part of this stage. For VM, entity information will include set of scripts to be executed after recovery of VM. Only one of categories or any_entity_reference has to be provided.
               * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_kind` - (Optional/Computed) Reference to a kind.
               * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_uuid` - (Optional/Computed) Reference to a uuid.
               * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_name` - (Optional/Computed) Reference to a name.
               * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.categories` - (Optional/Computed)  Categories for filtering entities.
        """
        pulumi.set(__self__, "entity_info_lists", entity_info_lists)

    @property
    @pulumi.getter(name="entityInfoLists")
    def entity_info_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListResult']:
        """
        (Optional/Computed) Information about entities to be recovered as part of this stage. For VM, entity information will include set of scripts to be executed after recovery of VM. Only one of categories or any_entity_reference has to be provided.
        * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_kind` - (Optional/Computed) Reference to a kind.
        * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_uuid` - (Optional/Computed) Reference to a uuid.
        * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_name` - (Optional/Computed) Reference to a name.
        * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.categories` - (Optional/Computed)  Categories for filtering entities.
        """
        return pulumi.get(self, "entity_info_lists")


@pulumi.output_type
class GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListResult(dict):
    def __init__(__self__, *,
                 any_entity_reference_kind: str,
                 any_entity_reference_name: str,
                 any_entity_reference_uuid: str,
                 categories: Sequence['outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListCategoryResult'],
                 script_lists: Sequence['outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListScriptListResult']):
        pulumi.set(__self__, "any_entity_reference_kind", any_entity_reference_kind)
        pulumi.set(__self__, "any_entity_reference_name", any_entity_reference_name)
        pulumi.set(__self__, "any_entity_reference_uuid", any_entity_reference_uuid)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "script_lists", script_lists)

    @property
    @pulumi.getter(name="anyEntityReferenceKind")
    def any_entity_reference_kind(self) -> str:
        return pulumi.get(self, "any_entity_reference_kind")

    @property
    @pulumi.getter(name="anyEntityReferenceName")
    def any_entity_reference_name(self) -> str:
        return pulumi.get(self, "any_entity_reference_name")

    @property
    @pulumi.getter(name="anyEntityReferenceUuid")
    def any_entity_reference_uuid(self) -> str:
        return pulumi.get(self, "any_entity_reference_uuid")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListCategoryResult']:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="scriptLists")
    def script_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListScriptListResult']:
        return pulumi.get(self, "script_lists")


@pulumi.output_type
class GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: (Optional) the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListScriptListResult(dict):
    def __init__(__self__, *,
                 enable_script_exec: bool,
                 timeout: str):
        pulumi.set(__self__, "enable_script_exec", enable_script_exec)
        pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="enableScriptExec")
    def enable_script_exec(self) -> bool:
        return pulumi.get(self, "enable_script_exec")

    @property
    @pulumi.getter
    def timeout(self) -> str:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetRoleCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name(Optional).
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRolePermissionReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRolesEntityResult(dict):
    def __init__(__self__, *,
                 api_version: str,
                 categories: Sequence['outputs.GetRolesEntityCategoryResult'],
                 description: str,
                 metadata: Mapping[str, str],
                 name: str,
                 owner_reference: Mapping[str, str],
                 permission_reference_lists: Sequence['outputs.GetRolesEntityPermissionReferenceListResult'],
                 project_reference: Mapping[str, str],
                 role_id: str,
                 state: str):
        """
        :param str api_version: The version of the API.
        :param Sequence['GetRolesEntityCategoryArgs'] categories: - Categories for the role.
        :param str description: - The description of the role.
        :param Mapping[str, str] metadata: - The role kind metadata.
        :param str name: - the name(Optional).
        :param Mapping[str, str] owner_reference: - The reference to a user.
        :param Sequence['GetRolesEntityPermissionReferenceListArgs'] permission_reference_lists: - (Required) List of permission references.
        :param Mapping[str, str] project_reference: - The reference to a project.
        :param str state: - The state of the role.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_reference", owner_reference)
        pulumi.set(__self__, "permission_reference_lists", permission_reference_lists)
        pulumi.set(__self__, "project_reference", project_reference)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        The version of the API.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetRolesEntityCategoryResult']:
        """
        - Categories for the role.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        - The description of the role.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        - The role kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        """
        - The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="permissionReferenceLists")
    def permission_reference_lists(self) -> Sequence['outputs.GetRolesEntityPermissionReferenceListResult']:
        """
        - (Required) List of permission references.
        """
        return pulumi.get(self, "permission_reference_lists")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Mapping[str, str]:
        """
        - The reference to a project.
        """
        return pulumi.get(self, "project_reference")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> str:
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        - The state of the role.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetRolesEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name(Optional).
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRolesEntityPermissionReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRolesMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")


@pulumi.output_type
class GetServiceGroupServiceListResult(dict):
    def __init__(__self__, *,
                 icmp_type_code_lists: Sequence['outputs.GetServiceGroupServiceListIcmpTypeCodeListResult'],
                 protocol: str,
                 tcp_port_range_lists: Sequence['outputs.GetServiceGroupServiceListTcpPortRangeListResult'],
                 udp_port_range_lists: Sequence['outputs.GetServiceGroupServiceListUdpPortRangeListResult']):
        pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Sequence['outputs.GetServiceGroupServiceListIcmpTypeCodeListResult']:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Sequence['outputs.GetServiceGroupServiceListTcpPortRangeListResult']:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Sequence['outputs.GetServiceGroupServiceListUdpPortRangeListResult']:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class GetServiceGroupServiceListIcmpTypeCodeListResult(dict):
    def __init__(__self__, *,
                 code: str,
                 type: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServiceGroupServiceListTcpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetServiceGroupServiceListUdpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetServiceGroupsEntityResult(dict):
    def __init__(__self__, *,
                 associated_policies_lists: Sequence['outputs.GetServiceGroupsEntityAssociatedPoliciesListResult'],
                 service_groups: Sequence['outputs.GetServiceGroupsEntityServiceGroupResult'],
                 uuid: str):
        pulumi.set(__self__, "associated_policies_lists", associated_policies_lists)
        pulumi.set(__self__, "service_groups", service_groups)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="associatedPoliciesLists")
    def associated_policies_lists(self) -> Sequence['outputs.GetServiceGroupsEntityAssociatedPoliciesListResult']:
        return pulumi.get(self, "associated_policies_lists")

    @property
    @pulumi.getter(name="serviceGroups")
    def service_groups(self) -> Sequence['outputs.GetServiceGroupsEntityServiceGroupResult']:
        return pulumi.get(self, "service_groups")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceGroupsEntityAssociatedPoliciesListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceGroupsEntityServiceGroupResult(dict):
    def __init__(__self__, *,
                 description: str,
                 is_system_defined: bool,
                 name: str,
                 service_lists: Sequence['outputs.GetServiceGroupsEntityServiceGroupServiceListResult']):
        """
        :param bool is_system_defined: specifying whether it is a system defined service group
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_system_defined", is_system_defined)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service_lists", service_lists)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isSystemDefined")
    def is_system_defined(self) -> bool:
        """
        specifying whether it is a system defined service group
        """
        return pulumi.get(self, "is_system_defined")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceLists")
    def service_lists(self) -> Sequence['outputs.GetServiceGroupsEntityServiceGroupServiceListResult']:
        return pulumi.get(self, "service_lists")


@pulumi.output_type
class GetServiceGroupsEntityServiceGroupServiceListResult(dict):
    def __init__(__self__, *,
                 icmp_type_code_lists: Sequence['outputs.GetServiceGroupsEntityServiceGroupServiceListIcmpTypeCodeListResult'],
                 protocol: str,
                 tcp_port_range_lists: Sequence['outputs.GetServiceGroupsEntityServiceGroupServiceListTcpPortRangeListResult'],
                 udp_port_range_lists: Sequence['outputs.GetServiceGroupsEntityServiceGroupServiceListUdpPortRangeListResult']):
        pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Sequence['outputs.GetServiceGroupsEntityServiceGroupServiceListIcmpTypeCodeListResult']:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Sequence['outputs.GetServiceGroupsEntityServiceGroupServiceListTcpPortRangeListResult']:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Sequence['outputs.GetServiceGroupsEntityServiceGroupServiceListUdpPortRangeListResult']:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class GetServiceGroupsEntityServiceGroupServiceListIcmpTypeCodeListResult(dict):
    def __init__(__self__, *,
                 code: str,
                 type: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServiceGroupsEntityServiceGroupServiceListTcpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetServiceGroupsEntityServiceGroupServiceListUdpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetServiceGroupsMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")


@pulumi.output_type
class GetStaticRoutesSpecResult(dict):
    def __init__(__self__, *,
                 name: str,
                 resources: Sequence['outputs.GetStaticRoutesSpecResourceResult']):
        """
        :param str name: - the name.
        :param Sequence['GetStaticRoutesSpecResourceArgs'] resources: VPC route table resources status
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetStaticRoutesSpecResourceResult']:
        """
        VPC route table resources status
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetStaticRoutesSpecResourceResult(dict):
    def __init__(__self__, *,
                 default_route_nexthops: Sequence['outputs.GetStaticRoutesSpecResourceDefaultRouteNexthopResult'],
                 static_routes_lists: Sequence['outputs.GetStaticRoutesSpecResourceStaticRoutesListResult']):
        """
        :param Sequence['GetStaticRoutesSpecResourceDefaultRouteNexthopArgs'] default_route_nexthops: default routes (present in spec resource)
        :param Sequence['GetStaticRoutesSpecResourceStaticRoutesListArgs'] static_routes_lists: list of static routes
        """
        pulumi.set(__self__, "default_route_nexthops", default_route_nexthops)
        pulumi.set(__self__, "static_routes_lists", static_routes_lists)

    @property
    @pulumi.getter(name="defaultRouteNexthops")
    def default_route_nexthops(self) -> Sequence['outputs.GetStaticRoutesSpecResourceDefaultRouteNexthopResult']:
        """
        default routes (present in spec resource)
        """
        return pulumi.get(self, "default_route_nexthops")

    @property
    @pulumi.getter(name="staticRoutesLists")
    def static_routes_lists(self) -> Sequence['outputs.GetStaticRoutesSpecResourceStaticRoutesListResult']:
        """
        list of static routes
        """
        return pulumi.get(self, "static_routes_lists")


@pulumi.output_type
class GetStaticRoutesSpecResourceDefaultRouteNexthopResult(dict):
    def __init__(__self__, *,
                 direct_connect_virtual_interface_reference: Mapping[str, str],
                 external_subnet_reference: Mapping[str, str],
                 local_subnet_reference: Mapping[str, str],
                 vpn_connection_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] direct_connect_virtual_interface_reference: The reference to a direct_connect_virtual_interface
        :param Mapping[str, str] external_subnet_reference: The reference to a subnet
        :param Mapping[str, str] local_subnet_reference: The reference to a subnet
        :param Mapping[str, str] vpn_connection_reference: The reference to a vpn_connection
        """
        pulumi.set(__self__, "direct_connect_virtual_interface_reference", direct_connect_virtual_interface_reference)
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        pulumi.set(__self__, "local_subnet_reference", local_subnet_reference)
        pulumi.set(__self__, "vpn_connection_reference", vpn_connection_reference)

    @property
    @pulumi.getter(name="directConnectVirtualInterfaceReference")
    def direct_connect_virtual_interface_reference(self) -> Mapping[str, str]:
        """
        The reference to a direct_connect_virtual_interface
        """
        return pulumi.get(self, "direct_connect_virtual_interface_reference")

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="localSubnetReference")
    def local_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "local_subnet_reference")

    @property
    @pulumi.getter(name="vpnConnectionReference")
    def vpn_connection_reference(self) -> Mapping[str, str]:
        """
        The reference to a vpn_connection
        """
        return pulumi.get(self, "vpn_connection_reference")


@pulumi.output_type
class GetStaticRoutesSpecResourceStaticRoutesListResult(dict):
    def __init__(__self__, *,
                 destination: str,
                 nexthops: Sequence['outputs.GetStaticRoutesSpecResourceStaticRoutesListNexthopResult']):
        """
        :param str destination: destination ip address with prefix.
        :param Sequence['GetStaticRoutesSpecResourceStaticRoutesListNexthopArgs'] nexthops: Targeted link to use as the nexthop in a route.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "nexthops", nexthops)

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        destination ip address with prefix.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def nexthops(self) -> Sequence['outputs.GetStaticRoutesSpecResourceStaticRoutesListNexthopResult']:
        """
        Targeted link to use as the nexthop in a route.
        """
        return pulumi.get(self, "nexthops")


@pulumi.output_type
class GetStaticRoutesSpecResourceStaticRoutesListNexthopResult(dict):
    def __init__(__self__, *,
                 direct_connect_virtual_interface_reference: Mapping[str, str],
                 external_subnet_reference: Mapping[str, str],
                 local_subnet_reference: Mapping[str, str],
                 vpn_connection_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] direct_connect_virtual_interface_reference: The reference to a direct_connect_virtual_interface
        :param Mapping[str, str] external_subnet_reference: The reference to a subnet
        :param Mapping[str, str] local_subnet_reference: The reference to a subnet
        :param Mapping[str, str] vpn_connection_reference: The reference to a vpn_connection
        """
        pulumi.set(__self__, "direct_connect_virtual_interface_reference", direct_connect_virtual_interface_reference)
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        pulumi.set(__self__, "local_subnet_reference", local_subnet_reference)
        pulumi.set(__self__, "vpn_connection_reference", vpn_connection_reference)

    @property
    @pulumi.getter(name="directConnectVirtualInterfaceReference")
    def direct_connect_virtual_interface_reference(self) -> Mapping[str, str]:
        """
        The reference to a direct_connect_virtual_interface
        """
        return pulumi.get(self, "direct_connect_virtual_interface_reference")

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="localSubnetReference")
    def local_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "local_subnet_reference")

    @property
    @pulumi.getter(name="vpnConnectionReference")
    def vpn_connection_reference(self) -> Mapping[str, str]:
        """
        The reference to a vpn_connection
        """
        return pulumi.get(self, "vpn_connection_reference")


@pulumi.output_type
class GetStaticRoutesStatusResult(dict):
    def __init__(__self__, *,
                 execution_contexts: Sequence['outputs.GetStaticRoutesStatusExecutionContextResult'],
                 resources: Sequence['outputs.GetStaticRoutesStatusResourceResult'],
                 state: str):
        """
        :param Sequence['GetStaticRoutesStatusExecutionContextArgs'] execution_contexts: Execution Context of VPC.
        :param Sequence['GetStaticRoutesStatusResourceArgs'] resources: VPC route table resources status
        :param str state: The state of the vpc_route_table.
        """
        pulumi.set(__self__, "execution_contexts", execution_contexts)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="executionContexts")
    def execution_contexts(self) -> Sequence['outputs.GetStaticRoutesStatusExecutionContextResult']:
        """
        Execution Context of VPC.
        """
        return pulumi.get(self, "execution_contexts")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetStaticRoutesStatusResourceResult']:
        """
        VPC route table resources status
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the vpc_route_table.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetStaticRoutesStatusExecutionContextResult(dict):
    def __init__(__self__, *,
                 task_uuids: Sequence[str]):
        pulumi.set(__self__, "task_uuids", task_uuids)

    @property
    @pulumi.getter(name="taskUuids")
    def task_uuids(self) -> Sequence[str]:
        return pulumi.get(self, "task_uuids")


@pulumi.output_type
class GetStaticRoutesStatusResourceResult(dict):
    def __init__(__self__, *,
                 default_routes: Sequence['outputs.GetStaticRoutesStatusResourceDefaultRouteResult'],
                 dynamic_routes_lists: Sequence['outputs.GetStaticRoutesStatusResourceDynamicRoutesListResult'],
                 local_routes_lists: Sequence['outputs.GetStaticRoutesStatusResourceLocalRoutesListResult'],
                 static_routes_lists: Sequence['outputs.GetStaticRoutesStatusResourceStaticRoutesListResult']):
        """
        :param Sequence['GetStaticRoutesStatusResourceDefaultRouteArgs'] default_routes: default route. (present in status resource only )
        :param Sequence['GetStaticRoutesStatusResourceDynamicRoutesListArgs'] dynamic_routes_lists: list of dynamic routes (present in status resource only)
        :param Sequence['GetStaticRoutesStatusResourceLocalRoutesListArgs'] local_routes_lists: list of local routes (present in status resource only )
        :param Sequence['GetStaticRoutesStatusResourceStaticRoutesListArgs'] static_routes_lists: list of static routes
        """
        pulumi.set(__self__, "default_routes", default_routes)
        pulumi.set(__self__, "dynamic_routes_lists", dynamic_routes_lists)
        pulumi.set(__self__, "local_routes_lists", local_routes_lists)
        pulumi.set(__self__, "static_routes_lists", static_routes_lists)

    @property
    @pulumi.getter(name="defaultRoutes")
    def default_routes(self) -> Sequence['outputs.GetStaticRoutesStatusResourceDefaultRouteResult']:
        """
        default route. (present in status resource only )
        """
        return pulumi.get(self, "default_routes")

    @property
    @pulumi.getter(name="dynamicRoutesLists")
    def dynamic_routes_lists(self) -> Sequence['outputs.GetStaticRoutesStatusResourceDynamicRoutesListResult']:
        """
        list of dynamic routes (present in status resource only)
        """
        return pulumi.get(self, "dynamic_routes_lists")

    @property
    @pulumi.getter(name="localRoutesLists")
    def local_routes_lists(self) -> Sequence['outputs.GetStaticRoutesStatusResourceLocalRoutesListResult']:
        """
        list of local routes (present in status resource only )
        """
        return pulumi.get(self, "local_routes_lists")

    @property
    @pulumi.getter(name="staticRoutesLists")
    def static_routes_lists(self) -> Sequence['outputs.GetStaticRoutesStatusResourceStaticRoutesListResult']:
        """
        list of static routes
        """
        return pulumi.get(self, "static_routes_lists")


@pulumi.output_type
class GetStaticRoutesStatusResourceDefaultRouteResult(dict):
    def __init__(__self__, *,
                 destination: str,
                 is_active: bool,
                 nexthops: Sequence['outputs.GetStaticRoutesStatusResourceDefaultRouteNexthopResult'],
                 priority: int):
        """
        :param str destination: destination ip address with prefix.
        :param bool is_active: Whether this route is currently active. Present in Status Resources.
        :param Sequence['GetStaticRoutesStatusResourceDefaultRouteNexthopArgs'] nexthops: Targeted link to use as the nexthop in a route.
        :param int priority: The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "nexthops", nexthops)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        destination ip address with prefix.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        """
        Whether this route is currently active. Present in Status Resources.
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def nexthops(self) -> Sequence['outputs.GetStaticRoutesStatusResourceDefaultRouteNexthopResult']:
        """
        Targeted link to use as the nexthop in a route.
        """
        return pulumi.get(self, "nexthops")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetStaticRoutesStatusResourceDefaultRouteNexthopResult(dict):
    def __init__(__self__, *,
                 direct_connect_virtual_interface_reference: Mapping[str, str],
                 external_subnet_reference: Mapping[str, str],
                 local_subnet_reference: Mapping[str, str],
                 nexthop_ip_address: str,
                 vpn_connection_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] direct_connect_virtual_interface_reference: The reference to a direct_connect_virtual_interface
        :param Mapping[str, str] external_subnet_reference: The reference to a subnet
        :param Mapping[str, str] local_subnet_reference: The reference to a subnet
        :param Mapping[str, str] vpn_connection_reference: The reference to a vpn_connection
        """
        pulumi.set(__self__, "direct_connect_virtual_interface_reference", direct_connect_virtual_interface_reference)
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        pulumi.set(__self__, "local_subnet_reference", local_subnet_reference)
        pulumi.set(__self__, "nexthop_ip_address", nexthop_ip_address)
        pulumi.set(__self__, "vpn_connection_reference", vpn_connection_reference)

    @property
    @pulumi.getter(name="directConnectVirtualInterfaceReference")
    def direct_connect_virtual_interface_reference(self) -> Mapping[str, str]:
        """
        The reference to a direct_connect_virtual_interface
        """
        return pulumi.get(self, "direct_connect_virtual_interface_reference")

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="localSubnetReference")
    def local_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "local_subnet_reference")

    @property
    @pulumi.getter(name="nexthopIpAddress")
    def nexthop_ip_address(self) -> str:
        return pulumi.get(self, "nexthop_ip_address")

    @property
    @pulumi.getter(name="vpnConnectionReference")
    def vpn_connection_reference(self) -> Mapping[str, str]:
        """
        The reference to a vpn_connection
        """
        return pulumi.get(self, "vpn_connection_reference")


@pulumi.output_type
class GetStaticRoutesStatusResourceDynamicRoutesListResult(dict):
    def __init__(__self__, *,
                 destination: str,
                 is_active: bool,
                 nexthops: Sequence['outputs.GetStaticRoutesStatusResourceDynamicRoutesListNexthopResult'],
                 priority: int):
        """
        :param str destination: destination ip address with prefix.
        :param bool is_active: Whether this route is currently active. Present in Status Resources.
        :param Sequence['GetStaticRoutesStatusResourceDynamicRoutesListNexthopArgs'] nexthops: Targeted link to use as the nexthop in a route.
        :param int priority: The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "nexthops", nexthops)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        destination ip address with prefix.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        """
        Whether this route is currently active. Present in Status Resources.
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def nexthops(self) -> Sequence['outputs.GetStaticRoutesStatusResourceDynamicRoutesListNexthopResult']:
        """
        Targeted link to use as the nexthop in a route.
        """
        return pulumi.get(self, "nexthops")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetStaticRoutesStatusResourceDynamicRoutesListNexthopResult(dict):
    def __init__(__self__, *,
                 direct_connect_virtual_interface_reference: Mapping[str, str],
                 external_subnet_reference: Mapping[str, str],
                 local_subnet_reference: Mapping[str, str],
                 nexthop_ip_address: str,
                 vpn_connection_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] direct_connect_virtual_interface_reference: The reference to a direct_connect_virtual_interface
        :param Mapping[str, str] external_subnet_reference: The reference to a subnet
        :param Mapping[str, str] local_subnet_reference: The reference to a subnet
        :param Mapping[str, str] vpn_connection_reference: The reference to a vpn_connection
        """
        pulumi.set(__self__, "direct_connect_virtual_interface_reference", direct_connect_virtual_interface_reference)
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        pulumi.set(__self__, "local_subnet_reference", local_subnet_reference)
        pulumi.set(__self__, "nexthop_ip_address", nexthop_ip_address)
        pulumi.set(__self__, "vpn_connection_reference", vpn_connection_reference)

    @property
    @pulumi.getter(name="directConnectVirtualInterfaceReference")
    def direct_connect_virtual_interface_reference(self) -> Mapping[str, str]:
        """
        The reference to a direct_connect_virtual_interface
        """
        return pulumi.get(self, "direct_connect_virtual_interface_reference")

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="localSubnetReference")
    def local_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "local_subnet_reference")

    @property
    @pulumi.getter(name="nexthopIpAddress")
    def nexthop_ip_address(self) -> str:
        return pulumi.get(self, "nexthop_ip_address")

    @property
    @pulumi.getter(name="vpnConnectionReference")
    def vpn_connection_reference(self) -> Mapping[str, str]:
        """
        The reference to a vpn_connection
        """
        return pulumi.get(self, "vpn_connection_reference")


@pulumi.output_type
class GetStaticRoutesStatusResourceLocalRoutesListResult(dict):
    def __init__(__self__, *,
                 destination: str,
                 is_active: bool,
                 nexthops: Sequence['outputs.GetStaticRoutesStatusResourceLocalRoutesListNexthopResult'],
                 priority: int):
        """
        :param str destination: destination ip address with prefix.
        :param bool is_active: Whether this route is currently active. Present in Status Resources.
        :param Sequence['GetStaticRoutesStatusResourceLocalRoutesListNexthopArgs'] nexthops: Targeted link to use as the nexthop in a route.
        :param int priority: The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "nexthops", nexthops)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        destination ip address with prefix.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        """
        Whether this route is currently active. Present in Status Resources.
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def nexthops(self) -> Sequence['outputs.GetStaticRoutesStatusResourceLocalRoutesListNexthopResult']:
        """
        Targeted link to use as the nexthop in a route.
        """
        return pulumi.get(self, "nexthops")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetStaticRoutesStatusResourceLocalRoutesListNexthopResult(dict):
    def __init__(__self__, *,
                 direct_connect_virtual_interface_reference: Mapping[str, str],
                 external_subnet_reference: Mapping[str, str],
                 local_subnet_reference: Mapping[str, str],
                 nexthop_ip_address: str,
                 vpn_connection_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] direct_connect_virtual_interface_reference: The reference to a direct_connect_virtual_interface
        :param Mapping[str, str] external_subnet_reference: The reference to a subnet
        :param Mapping[str, str] local_subnet_reference: The reference to a subnet
        :param Mapping[str, str] vpn_connection_reference: The reference to a vpn_connection
        """
        pulumi.set(__self__, "direct_connect_virtual_interface_reference", direct_connect_virtual_interface_reference)
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        pulumi.set(__self__, "local_subnet_reference", local_subnet_reference)
        pulumi.set(__self__, "nexthop_ip_address", nexthop_ip_address)
        pulumi.set(__self__, "vpn_connection_reference", vpn_connection_reference)

    @property
    @pulumi.getter(name="directConnectVirtualInterfaceReference")
    def direct_connect_virtual_interface_reference(self) -> Mapping[str, str]:
        """
        The reference to a direct_connect_virtual_interface
        """
        return pulumi.get(self, "direct_connect_virtual_interface_reference")

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="localSubnetReference")
    def local_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "local_subnet_reference")

    @property
    @pulumi.getter(name="nexthopIpAddress")
    def nexthop_ip_address(self) -> str:
        return pulumi.get(self, "nexthop_ip_address")

    @property
    @pulumi.getter(name="vpnConnectionReference")
    def vpn_connection_reference(self) -> Mapping[str, str]:
        """
        The reference to a vpn_connection
        """
        return pulumi.get(self, "vpn_connection_reference")


@pulumi.output_type
class GetStaticRoutesStatusResourceStaticRoutesListResult(dict):
    def __init__(__self__, *,
                 destination: str,
                 is_active: bool,
                 nexthops: Sequence['outputs.GetStaticRoutesStatusResourceStaticRoutesListNexthopResult'],
                 priority: int):
        """
        :param str destination: destination ip address with prefix.
        :param bool is_active: Whether this route is currently active. Present in Status Resources.
        :param Sequence['GetStaticRoutesStatusResourceStaticRoutesListNexthopArgs'] nexthops: Targeted link to use as the nexthop in a route.
        :param int priority: The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "nexthops", nexthops)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        destination ip address with prefix.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        """
        Whether this route is currently active. Present in Status Resources.
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def nexthops(self) -> Sequence['outputs.GetStaticRoutesStatusResourceStaticRoutesListNexthopResult']:
        """
        Targeted link to use as the nexthop in a route.
        """
        return pulumi.get(self, "nexthops")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetStaticRoutesStatusResourceStaticRoutesListNexthopResult(dict):
    def __init__(__self__, *,
                 direct_connect_virtual_interface_reference: Mapping[str, str],
                 external_subnet_reference: Mapping[str, str],
                 local_subnet_reference: Mapping[str, str],
                 nexthop_ip_address: str,
                 vpn_connection_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] direct_connect_virtual_interface_reference: The reference to a direct_connect_virtual_interface
        :param Mapping[str, str] external_subnet_reference: The reference to a subnet
        :param Mapping[str, str] local_subnet_reference: The reference to a subnet
        :param Mapping[str, str] vpn_connection_reference: The reference to a vpn_connection
        """
        pulumi.set(__self__, "direct_connect_virtual_interface_reference", direct_connect_virtual_interface_reference)
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        pulumi.set(__self__, "local_subnet_reference", local_subnet_reference)
        pulumi.set(__self__, "nexthop_ip_address", nexthop_ip_address)
        pulumi.set(__self__, "vpn_connection_reference", vpn_connection_reference)

    @property
    @pulumi.getter(name="directConnectVirtualInterfaceReference")
    def direct_connect_virtual_interface_reference(self) -> Mapping[str, str]:
        """
        The reference to a direct_connect_virtual_interface
        """
        return pulumi.get(self, "direct_connect_virtual_interface_reference")

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="localSubnetReference")
    def local_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "local_subnet_reference")

    @property
    @pulumi.getter(name="nexthopIpAddress")
    def nexthop_ip_address(self) -> str:
        return pulumi.get(self, "nexthop_ip_address")

    @property
    @pulumi.getter(name="vpnConnectionReference")
    def vpn_connection_reference(self) -> Mapping[str, str]:
        """
        The reference to a vpn_connection
        """
        return pulumi.get(self, "vpn_connection_reference")


@pulumi.output_type
class GetSubnetAdditionalFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name(Optional).
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSubnetCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name(Optional).
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSubnetMessageListResult(dict):
    def __init__(__self__, *,
                 details: Mapping[str, str],
                 message: str,
                 reason: str):
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def details(self) -> Mapping[str, str]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> str:
        return pulumi.get(self, "reason")


@pulumi.output_type
class GetSubnetsEntityResult(dict):
    def __init__(__self__, *,
                 api_version: str,
                 availability_zone_reference: Mapping[str, str],
                 categories: Sequence['outputs.GetSubnetsEntityCategoryResult'],
                 cluster_name: str,
                 cluster_reference: Mapping[str, str],
                 cluster_uuid: str,
                 default_gateway_ip: str,
                 description: str,
                 dhcp_domain_name_server_lists: Sequence[str],
                 dhcp_domain_search_lists: Sequence[str],
                 dhcp_options: Mapping[str, str],
                 dhcp_server_address: Mapping[str, str],
                 dhcp_server_address_port: int,
                 enable_nat: bool,
                 ip_config_pool_list_ranges: Sequence[str],
                 is_external: bool,
                 message_lists: Sequence['outputs.GetSubnetsEntityMessageListResult'],
                 metadata: Mapping[str, str],
                 name: str,
                 network_function_chain_reference: Mapping[str, str],
                 owner_reference: Mapping[str, str],
                 prefix_length: int,
                 project_reference: Mapping[str, str],
                 state: str,
                 subnet_id: str,
                 subnet_ip: str,
                 subnet_name: str,
                 subnet_type: str,
                 vlan_id: int,
                 vpc_reference: Mapping[str, str],
                 vswitch_name: str):
        """
        :param str api_version: version of the API
        :param Mapping[str, str] availability_zone_reference: The reference to a availability_zone.
        :param Sequence['GetSubnetsEntityCategoryArgs'] categories: The API Version.
        :param str cluster_name: The name of a cluster.
        :param Mapping[str, str] cluster_reference: The reference to a cluster.
        :param str default_gateway_ip: Default gateway IP address.
        :param str description: A description for subnet.
        :param Sequence[str] dhcp_domain_search_lists: DHCP domain search list for a subnet.
        :param Mapping[str, str] dhcp_options: Spec for defining DHCP options.
        :param Mapping[str, str] dhcp_server_address: Host address.
        :param int dhcp_server_address_port: Port Number.
        :param Mapping[str, str] metadata: The subnet kind metadata.
        :param str name: the name.
        :param Mapping[str, str] network_function_chain_reference: The reference to a network_function_chain.
        :param Mapping[str, str] owner_reference: The reference to a user.
        :param int prefix_length: -. IP prefix length of the Subnet.
        :param Mapping[str, str] project_reference: The reference to a project.
        :param str state: The state of the subnet.
        :param str subnet_ip: Subnet IP address.
        :param str subnet_type: The type of the subnet.
        :param int vlan_id: VLAN assigned to the subnet.
        :param str vswitch_name: The name of the vswitch.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "availability_zone_reference", availability_zone_reference)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_reference", cluster_reference)
        pulumi.set(__self__, "cluster_uuid", cluster_uuid)
        pulumi.set(__self__, "default_gateway_ip", default_gateway_ip)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dhcp_domain_name_server_lists", dhcp_domain_name_server_lists)
        pulumi.set(__self__, "dhcp_domain_search_lists", dhcp_domain_search_lists)
        pulumi.set(__self__, "dhcp_options", dhcp_options)
        pulumi.set(__self__, "dhcp_server_address", dhcp_server_address)
        pulumi.set(__self__, "dhcp_server_address_port", dhcp_server_address_port)
        pulumi.set(__self__, "enable_nat", enable_nat)
        pulumi.set(__self__, "ip_config_pool_list_ranges", ip_config_pool_list_ranges)
        pulumi.set(__self__, "is_external", is_external)
        pulumi.set(__self__, "message_lists", message_lists)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        pulumi.set(__self__, "owner_reference", owner_reference)
        pulumi.set(__self__, "prefix_length", prefix_length)
        pulumi.set(__self__, "project_reference", project_reference)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "subnet_ip", subnet_ip)
        pulumi.set(__self__, "subnet_name", subnet_name)
        pulumi.set(__self__, "subnet_type", subnet_type)
        pulumi.set(__self__, "vlan_id", vlan_id)
        pulumi.set(__self__, "vpc_reference", vpc_reference)
        pulumi.set(__self__, "vswitch_name", vswitch_name)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        version of the API
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="availabilityZoneReference")
    def availability_zone_reference(self) -> Mapping[str, str]:
        """
        The reference to a availability_zone.
        """
        return pulumi.get(self, "availability_zone_reference")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetSubnetsEntityCategoryResult']:
        """
        The API Version.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        The name of a cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterReference")
    def cluster_reference(self) -> Mapping[str, str]:
        """
        The reference to a cluster.
        """
        return pulumi.get(self, "cluster_reference")

    @property
    @pulumi.getter(name="clusterUuid")
    def cluster_uuid(self) -> str:
        return pulumi.get(self, "cluster_uuid")

    @property
    @pulumi.getter(name="defaultGatewayIp")
    def default_gateway_ip(self) -> str:
        """
        Default gateway IP address.
        """
        return pulumi.get(self, "default_gateway_ip")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description for subnet.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dhcpDomainNameServerLists")
    def dhcp_domain_name_server_lists(self) -> Sequence[str]:
        return pulumi.get(self, "dhcp_domain_name_server_lists")

    @property
    @pulumi.getter(name="dhcpDomainSearchLists")
    def dhcp_domain_search_lists(self) -> Sequence[str]:
        """
        DHCP domain search list for a subnet.
        """
        return pulumi.get(self, "dhcp_domain_search_lists")

    @property
    @pulumi.getter(name="dhcpOptions")
    def dhcp_options(self) -> Mapping[str, str]:
        """
        Spec for defining DHCP options.
        """
        return pulumi.get(self, "dhcp_options")

    @property
    @pulumi.getter(name="dhcpServerAddress")
    def dhcp_server_address(self) -> Mapping[str, str]:
        """
        Host address.
        """
        return pulumi.get(self, "dhcp_server_address")

    @property
    @pulumi.getter(name="dhcpServerAddressPort")
    def dhcp_server_address_port(self) -> int:
        """
        Port Number.
        """
        return pulumi.get(self, "dhcp_server_address_port")

    @property
    @pulumi.getter(name="enableNat")
    def enable_nat(self) -> bool:
        return pulumi.get(self, "enable_nat")

    @property
    @pulumi.getter(name="ipConfigPoolListRanges")
    def ip_config_pool_list_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_config_pool_list_ranges")

    @property
    @pulumi.getter(name="isExternal")
    def is_external(self) -> bool:
        return pulumi.get(self, "is_external")

    @property
    @pulumi.getter(name="messageLists")
    def message_lists(self) -> Sequence['outputs.GetSubnetsEntityMessageListResult']:
        return pulumi.get(self, "message_lists")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        The subnet kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Mapping[str, str]:
        """
        The reference to a network_function_chain.
        """
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        """
        The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        """
        -. IP prefix length of the Subnet.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Mapping[str, str]:
        """
        The reference to a project.
        """
        return pulumi.get(self, "project_reference")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the subnet.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> str:
        """
        Subnet IP address.
        """
        return pulumi.get(self, "subnet_ip")

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> str:
        return pulumi.get(self, "subnet_name")

    @property
    @pulumi.getter(name="subnetType")
    def subnet_type(self) -> str:
        """
        The type of the subnet.
        """
        return pulumi.get(self, "subnet_type")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> int:
        """
        VLAN assigned to the subnet.
        """
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "vpc_reference")

    @property
    @pulumi.getter(name="vswitchName")
    def vswitch_name(self) -> str:
        """
        The name of the vswitch.
        """
        return pulumi.get(self, "vswitch_name")


@pulumi.output_type
class GetSubnetsEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSubnetsEntityMessageListResult(dict):
    def __init__(__self__, *,
                 details: Mapping[str, str],
                 message: str,
                 reason: str):
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def details(self) -> Mapping[str, str]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> str:
        return pulumi.get(self, "reason")


@pulumi.output_type
class GetSubnetsMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        """
        :param str kind: The kind name (Default value: project.
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        The kind name (Default value: project.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")


@pulumi.output_type
class GetUserAccessControlPolicyReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - (Optional) The name for the user
        :param str uuid: - (Optional) The UUID for the user.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Optional) The name for the user
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - (Optional) The UUID for the user.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUserCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - (Optional) The name for the user
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Optional) The name for the user
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUserDirectoryServiceUserResult(dict):
    def __init__(__self__, *,
                 default_user_principal_name: str,
                 directory_service_references: Sequence['outputs.GetUserDirectoryServiceUserDirectoryServiceReferenceResult'],
                 user_principal_name: str):
        """
        :param Sequence['GetUserDirectoryServiceUserDirectoryServiceReferenceArgs'] directory_service_references: - (Optional) The reference to a directory service. See #reference for to look the supported attributes.
        :param str user_principal_name: - (Optional) The UserPrincipalName of the user from the directory service.
        """
        pulumi.set(__self__, "default_user_principal_name", default_user_principal_name)
        pulumi.set(__self__, "directory_service_references", directory_service_references)
        pulumi.set(__self__, "user_principal_name", user_principal_name)

    @property
    @pulumi.getter(name="defaultUserPrincipalName")
    def default_user_principal_name(self) -> str:
        return pulumi.get(self, "default_user_principal_name")

    @property
    @pulumi.getter(name="directoryServiceReferences")
    def directory_service_references(self) -> Sequence['outputs.GetUserDirectoryServiceUserDirectoryServiceReferenceResult']:
        """
        - (Optional) The reference to a directory service. See #reference for to look the supported attributes.
        """
        return pulumi.get(self, "directory_service_references")

    @property
    @pulumi.getter(name="userPrincipalName")
    def user_principal_name(self) -> str:
        """
        - (Optional) The UserPrincipalName of the user from the directory service.
        """
        return pulumi.get(self, "user_principal_name")


@pulumi.output_type
class GetUserDirectoryServiceUserDirectoryServiceReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - (Optional) The name for the user
        :param str uuid: - (Optional) The UUID for the user.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Optional) The name for the user
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - (Optional) The UUID for the user.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUserGroupAccessControlPolicyReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUserGroupCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name(Optional).
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUserGroupDirectoryServiceUserGroupResult(dict):
    def __init__(__self__, *,
                 default_user_principal_name: str,
                 directory_service_references: Sequence['outputs.GetUserGroupDirectoryServiceUserGroupDirectoryServiceReferenceResult'],
                 distinguished_name: str):
        """
        :param Sequence['GetUserGroupDirectoryServiceUserGroupDirectoryServiceReferenceArgs'] directory_service_references: - The reference to a directory service. See #reference for to look the supported attributes.
        :param str distinguished_name: - The Distinguished name for the user group
        """
        pulumi.set(__self__, "default_user_principal_name", default_user_principal_name)
        pulumi.set(__self__, "directory_service_references", directory_service_references)
        pulumi.set(__self__, "distinguished_name", distinguished_name)

    @property
    @pulumi.getter(name="defaultUserPrincipalName")
    def default_user_principal_name(self) -> str:
        return pulumi.get(self, "default_user_principal_name")

    @property
    @pulumi.getter(name="directoryServiceReferences")
    def directory_service_references(self) -> Sequence['outputs.GetUserGroupDirectoryServiceUserGroupDirectoryServiceReferenceResult']:
        """
        - The reference to a directory service. See #reference for to look the supported attributes.
        """
        return pulumi.get(self, "directory_service_references")

    @property
    @pulumi.getter(name="distinguishedName")
    def distinguished_name(self) -> str:
        """
        - The Distinguished name for the user group
        """
        return pulumi.get(self, "distinguished_name")


@pulumi.output_type
class GetUserGroupDirectoryServiceUserGroupDirectoryServiceReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUserGroupProjectReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUserGroupsEntityResult(dict):
    def __init__(__self__, *,
                 access_control_policy_reference_lists: Sequence['outputs.GetUserGroupsEntityAccessControlPolicyReferenceListResult'],
                 api_version: str,
                 categories: Sequence['outputs.GetUserGroupsEntityCategoryResult'],
                 directory_service_user_groups: Sequence['outputs.GetUserGroupsEntityDirectoryServiceUserGroupResult'],
                 display_name: str,
                 metadata: Mapping[str, str],
                 owner_reference: Mapping[str, str],
                 project_reference_lists: Sequence['outputs.GetUserGroupsEntityProjectReferenceListResult'],
                 state: str,
                 user_group_type: str,
                 project_reference: Optional[Mapping[str, str]] = None):
        """
        :param Sequence['GetUserGroupsEntityAccessControlPolicyReferenceListArgs'] access_control_policy_reference_lists: - List of ACP references. See #reference for more details.
        :param str api_version: The version of the API.
        :param Sequence['GetUserGroupsEntityCategoryArgs'] categories: - The Categories for the user group.
        :param Sequence['GetUserGroupsEntityDirectoryServiceUserGroupArgs'] directory_service_user_groups: - A Directory Service User Group.
        :param str display_name: - The display name of the user group.
        :param Mapping[str, str] metadata: - The user group kind metadata.
        :param Mapping[str, str] owner_reference: - The reference to a user.
        :param Sequence['GetUserGroupsEntityProjectReferenceListArgs'] project_reference_lists: - A list of projects the user is part of. See #reference for more details.
        :param str state: - The state of the entity.
        :param str user_group_type: - The type of the user group.
        :param Mapping[str, str] project_reference: - The reference to a project.
        """
        pulumi.set(__self__, "access_control_policy_reference_lists", access_control_policy_reference_lists)
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "directory_service_user_groups", directory_service_user_groups)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "owner_reference", owner_reference)
        pulumi.set(__self__, "project_reference_lists", project_reference_lists)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "user_group_type", user_group_type)
        if project_reference is not None:
            pulumi.set(__self__, "project_reference", project_reference)

    @property
    @pulumi.getter(name="accessControlPolicyReferenceLists")
    def access_control_policy_reference_lists(self) -> Sequence['outputs.GetUserGroupsEntityAccessControlPolicyReferenceListResult']:
        """
        - List of ACP references. See #reference for more details.
        """
        return pulumi.get(self, "access_control_policy_reference_lists")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        The version of the API.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetUserGroupsEntityCategoryResult']:
        """
        - The Categories for the user group.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="directoryServiceUserGroups")
    def directory_service_user_groups(self) -> Sequence['outputs.GetUserGroupsEntityDirectoryServiceUserGroupResult']:
        """
        - A Directory Service User Group.
        """
        return pulumi.get(self, "directory_service_user_groups")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        - The display name of the user group.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        - The user group kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        """
        - The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="projectReferenceLists")
    def project_reference_lists(self) -> Sequence['outputs.GetUserGroupsEntityProjectReferenceListResult']:
        """
        - A list of projects the user is part of. See #reference for more details.
        """
        return pulumi.get(self, "project_reference_lists")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        - The state of the entity.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="userGroupType")
    def user_group_type(self) -> str:
        """
        - The type of the user group.
        """
        return pulumi.get(self, "user_group_type")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Optional[Mapping[str, str]]:
        """
        - The reference to a project.
        """
        return pulumi.get(self, "project_reference")


@pulumi.output_type
class GetUserGroupsEntityAccessControlPolicyReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUserGroupsEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the key name.
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the key name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUserGroupsEntityDirectoryServiceUserGroupResult(dict):
    def __init__(__self__, *,
                 default_user_principal_name: str,
                 directory_service_references: Sequence['outputs.GetUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReferenceResult'],
                 distinguished_name: str):
        """
        :param Sequence['GetUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReferenceArgs'] directory_service_references: - The reference to a directory service. See #reference for to look the supported attributes.
        :param str distinguished_name: - The Distinguished name for the user group
        """
        pulumi.set(__self__, "default_user_principal_name", default_user_principal_name)
        pulumi.set(__self__, "directory_service_references", directory_service_references)
        pulumi.set(__self__, "distinguished_name", distinguished_name)

    @property
    @pulumi.getter(name="defaultUserPrincipalName")
    def default_user_principal_name(self) -> str:
        return pulumi.get(self, "default_user_principal_name")

    @property
    @pulumi.getter(name="directoryServiceReferences")
    def directory_service_references(self) -> Sequence['outputs.GetUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReferenceResult']:
        """
        - The reference to a directory service. See #reference for to look the supported attributes.
        """
        return pulumi.get(self, "directory_service_references")

    @property
    @pulumi.getter(name="distinguishedName")
    def distinguished_name(self) -> str:
        """
        - The Distinguished name for the user group
        """
        return pulumi.get(self, "distinguished_name")


@pulumi.output_type
class GetUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
               
               For `access_control_policy_reference_list` and `project_reference_list` are the same as reference but used as list.
               
               See detailed information in [Nutanix Users](https://www.nutanix.dev/api_references/prism-central-v3/#/6016c890e9122-get-a-list-of-existing-user-groups).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).

        For `access_control_policy_reference_list` and `project_reference_list` are the same as reference but used as list.

        See detailed information in [Nutanix Users](https://www.nutanix.dev/api_references/prism-central-v3/#/6016c890e9122-get-a-list-of-existing-user-groups).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUserGroupsEntityProjectReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUserGroupsMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")


@pulumi.output_type
class GetUserIdentityProviderUserResult(dict):
    def __init__(__self__, *,
                 identity_provider_references: Sequence['outputs.GetUserIdentityProviderUserIdentityProviderReferenceResult'],
                 username: str):
        """
        :param Sequence['GetUserIdentityProviderUserIdentityProviderReferenceArgs'] identity_provider_references: - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.
        :param str username: - (Optional) The username from identity provider. Name ID for SAML Identity Provider.
        """
        pulumi.set(__self__, "identity_provider_references", identity_provider_references)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="identityProviderReferences")
    def identity_provider_references(self) -> Sequence['outputs.GetUserIdentityProviderUserIdentityProviderReferenceResult']:
        """
        - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.
        """
        return pulumi.get(self, "identity_provider_references")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        - (Optional) The username from identity provider. Name ID for SAML Identity Provider.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetUserIdentityProviderUserIdentityProviderReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - (Optional) The name for the user
        :param str uuid: - (Optional) The UUID for the user.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Optional) The name for the user
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - (Optional) The UUID for the user.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUserProjectReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - (Optional) The name for the user
        :param str uuid: - (Optional) The UUID for the user.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Optional) The name for the user
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - (Optional) The UUID for the user.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUsersEntityResult(dict):
    def __init__(__self__, *,
                 access_control_policy_reference_lists: Sequence['outputs.GetUsersEntityAccessControlPolicyReferenceListResult'],
                 api_version: str,
                 categories: Sequence['outputs.GetUsersEntityCategoryResult'],
                 directory_service_users: Sequence['outputs.GetUsersEntityDirectoryServiceUserResult'],
                 display_name: str,
                 identity_provider_users: Sequence['outputs.GetUsersEntityIdentityProviderUserResult'],
                 metadata: Mapping[str, str],
                 name: str,
                 owner_reference: Mapping[str, str],
                 project_reference_lists: Sequence['outputs.GetUsersEntityProjectReferenceListResult'],
                 state: str,
                 user_type: str,
                 project_reference: Optional[Mapping[str, str]] = None):
        """
        :param Sequence['GetUsersEntityAccessControlPolicyReferenceListArgs'] access_control_policy_reference_lists: - List of ACP references. See #reference for more details.
        :param str api_version: The version of the API.
        :param Sequence['GetUsersEntityCategoryArgs'] categories: - (Optional) Categories for the user.
        :param Sequence['GetUsersEntityDirectoryServiceUserArgs'] directory_service_users: - (Optional) The directory service user configuration. See below for more information.
        :param str display_name: - The display name of the user (common name) provided by the directory service.
        :param Sequence['GetUsersEntityIdentityProviderUserArgs'] identity_provider_users: - (Optional) (Optional) The identity provider user configuration. See below for more information.
        :param Mapping[str, str] metadata: - The user kind metadata.
        :param str name: - the name(Optional).
        :param Mapping[str, str] owner_reference: - (Optional) The reference to a user.
        :param Sequence['GetUsersEntityProjectReferenceListArgs'] project_reference_lists: - A list of projects the user is part of. See #reference for more details.
        :param str state: - The state of the entity.
        :param str user_type: - The name of the user.
        :param Mapping[str, str] project_reference: - (Optional) The reference to a project.
        """
        pulumi.set(__self__, "access_control_policy_reference_lists", access_control_policy_reference_lists)
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "directory_service_users", directory_service_users)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "identity_provider_users", identity_provider_users)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_reference", owner_reference)
        pulumi.set(__self__, "project_reference_lists", project_reference_lists)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "user_type", user_type)
        if project_reference is not None:
            pulumi.set(__self__, "project_reference", project_reference)

    @property
    @pulumi.getter(name="accessControlPolicyReferenceLists")
    def access_control_policy_reference_lists(self) -> Sequence['outputs.GetUsersEntityAccessControlPolicyReferenceListResult']:
        """
        - List of ACP references. See #reference for more details.
        """
        return pulumi.get(self, "access_control_policy_reference_lists")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        The version of the API.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetUsersEntityCategoryResult']:
        """
        - (Optional) Categories for the user.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="directoryServiceUsers")
    def directory_service_users(self) -> Sequence['outputs.GetUsersEntityDirectoryServiceUserResult']:
        """
        - (Optional) The directory service user configuration. See below for more information.
        """
        return pulumi.get(self, "directory_service_users")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        - The display name of the user (common name) provided by the directory service.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="identityProviderUsers")
    def identity_provider_users(self) -> Sequence['outputs.GetUsersEntityIdentityProviderUserResult']:
        """
        - (Optional) (Optional) The identity provider user configuration. See below for more information.
        """
        return pulumi.get(self, "identity_provider_users")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        - The user kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        """
        - (Optional) The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="projectReferenceLists")
    def project_reference_lists(self) -> Sequence['outputs.GetUsersEntityProjectReferenceListResult']:
        """
        - A list of projects the user is part of. See #reference for more details.
        """
        return pulumi.get(self, "project_reference_lists")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        - The state of the entity.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> str:
        """
        - The name of the user.
        """
        return pulumi.get(self, "user_type")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Optional[Mapping[str, str]]:
        """
        - (Optional) The reference to a project.
        """
        return pulumi.get(self, "project_reference")


@pulumi.output_type
class GetUsersEntityAccessControlPolicyReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUsersEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name(Optional).
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersEntityDirectoryServiceUserResult(dict):
    def __init__(__self__, *,
                 default_user_principal_name: str,
                 directory_service_references: Sequence['outputs.GetUsersEntityDirectoryServiceUserDirectoryServiceReferenceResult'],
                 user_principal_name: str):
        """
        :param Sequence['GetUsersEntityDirectoryServiceUserDirectoryServiceReferenceArgs'] directory_service_references: - (Optional) The reference to a directory service. See #reference for to look the supported attributes.
        :param str user_principal_name: - (Optional) The UserPrincipalName of the user from the directory service.
        """
        pulumi.set(__self__, "default_user_principal_name", default_user_principal_name)
        pulumi.set(__self__, "directory_service_references", directory_service_references)
        pulumi.set(__self__, "user_principal_name", user_principal_name)

    @property
    @pulumi.getter(name="defaultUserPrincipalName")
    def default_user_principal_name(self) -> str:
        return pulumi.get(self, "default_user_principal_name")

    @property
    @pulumi.getter(name="directoryServiceReferences")
    def directory_service_references(self) -> Sequence['outputs.GetUsersEntityDirectoryServiceUserDirectoryServiceReferenceResult']:
        """
        - (Optional) The reference to a directory service. See #reference for to look the supported attributes.
        """
        return pulumi.get(self, "directory_service_references")

    @property
    @pulumi.getter(name="userPrincipalName")
    def user_principal_name(self) -> str:
        """
        - (Optional) The UserPrincipalName of the user from the directory service.
        """
        return pulumi.get(self, "user_principal_name")


@pulumi.output_type
class GetUsersEntityDirectoryServiceUserDirectoryServiceReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUsersEntityIdentityProviderUserResult(dict):
    def __init__(__self__, *,
                 identity_provider_references: Sequence['outputs.GetUsersEntityIdentityProviderUserIdentityProviderReferenceResult'],
                 username: str):
        """
        :param Sequence['GetUsersEntityIdentityProviderUserIdentityProviderReferenceArgs'] identity_provider_references: - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.
        :param str username: - (Optional) The username from identity provider. Name ID for SAML Identity Provider.
        """
        pulumi.set(__self__, "identity_provider_references", identity_provider_references)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="identityProviderReferences")
    def identity_provider_references(self) -> Sequence['outputs.GetUsersEntityIdentityProviderUserIdentityProviderReferenceResult']:
        """
        - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.
        """
        return pulumi.get(self, "identity_provider_references")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        - (Optional) The username from identity provider. Name ID for SAML Identity Provider.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetUsersEntityIdentityProviderUserIdentityProviderReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUsersEntityProjectReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUsersMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")


@pulumi.output_type
class GetVirtualMachineCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name.
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVirtualMachineDiskListResult(dict):
    def __init__(__self__, *,
                 data_source_reference: Mapping[str, str],
                 device_properties: Sequence['outputs.GetVirtualMachineDiskListDevicePropertyResult'],
                 disk_size_bytes: int,
                 disk_size_mib: int,
                 storage_configs: Sequence['outputs.GetVirtualMachineDiskListStorageConfigResult'],
                 uuid: str,
                 volume_group_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] data_source_reference: Reference to a data source.
        :param Sequence['GetVirtualMachineDiskListDevicePropertyArgs'] device_properties: Properties to a device.
        :param int disk_size_bytes: Size of the disk in Bytes.
        :param int disk_size_mib: Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.
        :param str uuid: - the UUID.
        :param Mapping[str, str] volume_group_reference: Reference to a volume group.
        """
        pulumi.set(__self__, "data_source_reference", data_source_reference)
        pulumi.set(__self__, "device_properties", device_properties)
        pulumi.set(__self__, "disk_size_bytes", disk_size_bytes)
        pulumi.set(__self__, "disk_size_mib", disk_size_mib)
        pulumi.set(__self__, "storage_configs", storage_configs)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "volume_group_reference", volume_group_reference)

    @property
    @pulumi.getter(name="dataSourceReference")
    def data_source_reference(self) -> Mapping[str, str]:
        """
        Reference to a data source.
        """
        return pulumi.get(self, "data_source_reference")

    @property
    @pulumi.getter(name="deviceProperties")
    def device_properties(self) -> Sequence['outputs.GetVirtualMachineDiskListDevicePropertyResult']:
        """
        Properties to a device.
        """
        return pulumi.get(self, "device_properties")

    @property
    @pulumi.getter(name="diskSizeBytes")
    def disk_size_bytes(self) -> int:
        """
        Size of the disk in Bytes.
        """
        return pulumi.get(self, "disk_size_bytes")

    @property
    @pulumi.getter(name="diskSizeMib")
    def disk_size_mib(self) -> int:
        """
        Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.
        """
        return pulumi.get(self, "disk_size_mib")

    @property
    @pulumi.getter(name="storageConfigs")
    def storage_configs(self) -> Sequence['outputs.GetVirtualMachineDiskListStorageConfigResult']:
        return pulumi.get(self, "storage_configs")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="volumeGroupReference")
    def volume_group_reference(self) -> Mapping[str, str]:
        """
        Reference to a volume group.
        """
        return pulumi.get(self, "volume_group_reference")


@pulumi.output_type
class GetVirtualMachineDiskListDevicePropertyResult(dict):
    def __init__(__self__, *,
                 device_type: str,
                 disk_address: Mapping[str, str]):
        """
        :param str device_type: - A Disk type (default: DISK).
        :param Mapping[str, str] disk_address: - Address of disk to boot from.
        """
        pulumi.set(__self__, "device_type", device_type)
        pulumi.set(__self__, "disk_address", disk_address)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> str:
        """
        - A Disk type (default: DISK).
        """
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="diskAddress")
    def disk_address(self) -> Mapping[str, str]:
        """
        - Address of disk to boot from.
        """
        return pulumi.get(self, "disk_address")


@pulumi.output_type
class GetVirtualMachineDiskListStorageConfigResult(dict):
    def __init__(__self__, *,
                 flash_mode: str,
                 storage_container_references: Sequence['outputs.GetVirtualMachineDiskListStorageConfigStorageContainerReferenceResult']):
        """
        :param str flash_mode: - State of the storage policy to pin virtual disks to the hot tier. When specified as a VM attribute, the storage policy applies to all virtual disks of the VM unless overridden by the same attribute specified for a virtual disk.
        :param Sequence['GetVirtualMachineDiskListStorageConfigStorageContainerReferenceArgs'] storage_container_references: - Reference to a kind. Either one of (kind, uuid) or url needs to be specified.
               * `storage_container_reference.#.url`: - GET query on the URL will provide information on the source.
               * `storage_container_reference.#.kind`: - kind of the container reference
               * `storage_container_reference.#.name`: - name of the container reference
               * `storage_container_reference.#.uuid`: - uiid of the container reference
        """
        pulumi.set(__self__, "flash_mode", flash_mode)
        pulumi.set(__self__, "storage_container_references", storage_container_references)

    @property
    @pulumi.getter(name="flashMode")
    def flash_mode(self) -> str:
        """
        - State of the storage policy to pin virtual disks to the hot tier. When specified as a VM attribute, the storage policy applies to all virtual disks of the VM unless overridden by the same attribute specified for a virtual disk.
        """
        return pulumi.get(self, "flash_mode")

    @property
    @pulumi.getter(name="storageContainerReferences")
    def storage_container_references(self) -> Sequence['outputs.GetVirtualMachineDiskListStorageConfigStorageContainerReferenceResult']:
        """
        - Reference to a kind. Either one of (kind, uuid) or url needs to be specified.
        * `storage_container_reference.#.url`: - GET query on the URL will provide information on the source.
        * `storage_container_reference.#.kind`: - kind of the container reference
        * `storage_container_reference.#.name`: - name of the container reference
        * `storage_container_reference.#.uuid`: - uiid of the container reference
        """
        return pulumi.get(self, "storage_container_references")


@pulumi.output_type
class GetVirtualMachineDiskListStorageConfigStorageContainerReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 url: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetVirtualMachineGpuListResult(dict):
    def __init__(__self__, *,
                 device_id: int,
                 fraction: int,
                 frame_buffer_size_mib: int,
                 guest_driver_version: str,
                 mode: str,
                 name: str,
                 num_virtual_display_heads: int,
                 pci_address: str,
                 uuid: str,
                 vendor: str):
        """
        :param int device_id: - (Computed) The device ID of the GPU.
        :param int fraction: Fraction of the physical GPU assigned.
        :param int frame_buffer_size_mib: - GPU frame buffer size in MiB.
        :param str guest_driver_version: - Last determined guest driver version.
        :param str mode: - The mode of this GPU.
        :param str name: - the name.
        :param int num_virtual_display_heads: - Number of supported virtual display heads.
        :param str pci_address: GPU {segment:bus:device:function} (sbdf) address if assigned.
        :param str uuid: - the UUID.
        :param str vendor: - The vendor of the GPU.
               * `UUID`: - UUID of the GPU.
        """
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "fraction", fraction)
        pulumi.set(__self__, "frame_buffer_size_mib", frame_buffer_size_mib)
        pulumi.set(__self__, "guest_driver_version", guest_driver_version)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "num_virtual_display_heads", num_virtual_display_heads)
        pulumi.set(__self__, "pci_address", pci_address)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> int:
        """
        - (Computed) The device ID of the GPU.
        """
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter
    def fraction(self) -> int:
        """
        Fraction of the physical GPU assigned.
        """
        return pulumi.get(self, "fraction")

    @property
    @pulumi.getter(name="frameBufferSizeMib")
    def frame_buffer_size_mib(self) -> int:
        """
        - GPU frame buffer size in MiB.
        """
        return pulumi.get(self, "frame_buffer_size_mib")

    @property
    @pulumi.getter(name="guestDriverVersion")
    def guest_driver_version(self) -> str:
        """
        - Last determined guest driver version.
        """
        return pulumi.get(self, "guest_driver_version")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        - The mode of this GPU.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numVirtualDisplayHeads")
    def num_virtual_display_heads(self) -> int:
        """
        - Number of supported virtual display heads.
        """
        return pulumi.get(self, "num_virtual_display_heads")

    @property
    @pulumi.getter(name="pciAddress")
    def pci_address(self) -> str:
        """
        GPU {segment:bus:device:function} (sbdf) address if assigned.
        """
        return pulumi.get(self, "pci_address")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vendor(self) -> str:
        """
        - The vendor of the GPU.
        * `UUID`: - UUID of the GPU.
        """
        return pulumi.get(self, "vendor")


@pulumi.output_type
class GetVirtualMachineMessageListResult(dict):
    def __init__(__self__, *,
                 details: Mapping[str, str],
                 message: str,
                 reason: str):
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def details(self) -> Mapping[str, str]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> str:
        return pulumi.get(self, "reason")


@pulumi.output_type
class GetVirtualMachineNicListResult(dict):
    def __init__(__self__, *,
                 floating_ip: str,
                 ip_endpoint_lists: Sequence['outputs.GetVirtualMachineNicListIpEndpointListResult'],
                 is_connected: str,
                 mac_address: str,
                 model: str,
                 network_function_chain_reference: Mapping[str, str],
                 network_function_nic_type: str,
                 nic_type: str,
                 num_queues: int,
                 subnet_name: str,
                 subnet_uuid: str,
                 uuid: str):
        """
        :param str floating_ip: -  The Floating IP associated with the vnic.
        :param Sequence['GetVirtualMachineNicListIpEndpointListArgs'] ip_endpoint_lists: - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
        :param str is_connected: - Indicates whether the serial port connection is connected or not (`true` or `false`).
        :param str mac_address: - The MAC address for the adapter.
        :param str model: - The model of this NIC. (Options : VIRTIO , E1000).
        :param Mapping[str, str] network_function_chain_reference: - The reference to a network_function_chain.
        :param str network_function_nic_type: - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
        :param str nic_type: - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
        :param int num_queues: - The number of tx/rx queue pairs for this NIC.
        :param str subnet_name: - The name of the subnet reference to.
        :param str subnet_uuid: - The reference to a subnet.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "floating_ip", floating_ip)
        pulumi.set(__self__, "ip_endpoint_lists", ip_endpoint_lists)
        pulumi.set(__self__, "is_connected", is_connected)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        pulumi.set(__self__, "network_function_nic_type", network_function_nic_type)
        pulumi.set(__self__, "nic_type", nic_type)
        pulumi.set(__self__, "num_queues", num_queues)
        pulumi.set(__self__, "subnet_name", subnet_name)
        pulumi.set(__self__, "subnet_uuid", subnet_uuid)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> str:
        """
        -  The Floating IP associated with the vnic.
        """
        return pulumi.get(self, "floating_ip")

    @property
    @pulumi.getter(name="ipEndpointLists")
    def ip_endpoint_lists(self) -> Sequence['outputs.GetVirtualMachineNicListIpEndpointListResult']:
        """
        - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
        """
        return pulumi.get(self, "ip_endpoint_lists")

    @property
    @pulumi.getter(name="isConnected")
    def is_connected(self) -> str:
        """
        - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
        return pulumi.get(self, "is_connected")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        """
        - The MAC address for the adapter.
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        - The model of this NIC. (Options : VIRTIO , E1000).
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Mapping[str, str]:
        """
        - The reference to a network_function_chain.
        """
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="networkFunctionNicType")
    def network_function_nic_type(self) -> str:
        """
        - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
        """
        return pulumi.get(self, "network_function_nic_type")

    @property
    @pulumi.getter(name="nicType")
    def nic_type(self) -> str:
        """
        - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
        """
        return pulumi.get(self, "nic_type")

    @property
    @pulumi.getter(name="numQueues")
    def num_queues(self) -> int:
        """
        - The number of tx/rx queue pairs for this NIC.
        """
        return pulumi.get(self, "num_queues")

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> str:
        """
        - The name of the subnet reference to.
        """
        return pulumi.get(self, "subnet_name")

    @property
    @pulumi.getter(name="subnetUuid")
    def subnet_uuid(self) -> str:
        """
        - The reference to a subnet.
        """
        return pulumi.get(self, "subnet_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetVirtualMachineNicListIpEndpointListResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 type: str):
        """
        :param str ip: - Address string.
        :param str type: - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        - Address string.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVirtualMachineSerialPortListResult(dict):
    def __init__(__self__, *,
                 index: int,
                 is_connected: bool):
        """
        :param int index: - Index of the serial port (int).
        :param bool is_connected: - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "is_connected", is_connected)

    @property
    @pulumi.getter
    def index(self) -> int:
        """
        - Index of the serial port (int).
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="isConnected")
    def is_connected(self) -> bool:
        """
        - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
        return pulumi.get(self, "is_connected")


@pulumi.output_type
class GetVpcSpecResult(dict):
    def __init__(__self__, *,
                 name: str,
                 resources: Sequence['outputs.GetVpcSpecResourceResult']):
        """
        :param str name: - the name.
        :param Sequence['GetVpcSpecResourceArgs'] resources: VPC resources status
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetVpcSpecResourceResult']:
        """
        VPC resources status
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetVpcSpecResourceResult(dict):
    def __init__(__self__, *,
                 common_domain_name_server_ip_lists: Sequence['outputs.GetVpcSpecResourceCommonDomainNameServerIpListResult'],
                 external_subnet_lists: Sequence['outputs.GetVpcSpecResourceExternalSubnetListResult'],
                 externally_routable_prefix_lists: Sequence['outputs.GetVpcSpecResourceExternallyRoutablePrefixListResult']):
        """
        :param Sequence['GetVpcSpecResourceCommonDomainNameServerIpListArgs'] common_domain_name_server_ip_lists: List of domain name server IPs.
        :param Sequence['GetVpcSpecResourceExternalSubnetListArgs'] external_subnet_lists: List of external subnets attached to this VPC.
        :param Sequence['GetVpcSpecResourceExternallyRoutablePrefixListArgs'] externally_routable_prefix_lists: List of external routable ip and prefix .
        """
        pulumi.set(__self__, "common_domain_name_server_ip_lists", common_domain_name_server_ip_lists)
        pulumi.set(__self__, "external_subnet_lists", external_subnet_lists)
        pulumi.set(__self__, "externally_routable_prefix_lists", externally_routable_prefix_lists)

    @property
    @pulumi.getter(name="commonDomainNameServerIpLists")
    def common_domain_name_server_ip_lists(self) -> Sequence['outputs.GetVpcSpecResourceCommonDomainNameServerIpListResult']:
        """
        List of domain name server IPs.
        """
        return pulumi.get(self, "common_domain_name_server_ip_lists")

    @property
    @pulumi.getter(name="externalSubnetLists")
    def external_subnet_lists(self) -> Sequence['outputs.GetVpcSpecResourceExternalSubnetListResult']:
        """
        List of external subnets attached to this VPC.
        """
        return pulumi.get(self, "external_subnet_lists")

    @property
    @pulumi.getter(name="externallyRoutablePrefixLists")
    def externally_routable_prefix_lists(self) -> Sequence['outputs.GetVpcSpecResourceExternallyRoutablePrefixListResult']:
        """
        List of external routable ip and prefix .
        """
        return pulumi.get(self, "externally_routable_prefix_lists")


@pulumi.output_type
class GetVpcSpecResourceCommonDomainNameServerIpListResult(dict):
    def __init__(__self__, *,
                 ip: str):
        """
        :param str ip: ip address of domain name server.
        """
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip address of domain name server.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetVpcSpecResourceExternalSubnetListResult(dict):
    def __init__(__self__, *,
                 external_subnet_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] external_subnet_reference: Reference to a subnet.
        """
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        Reference to a subnet.
        """
        return pulumi.get(self, "external_subnet_reference")


@pulumi.output_type
class GetVpcSpecResourceExternallyRoutablePrefixListResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 prefix_length: int):
        """
        :param str ip: ip address of domain name server.
        :param int prefix_length: prefix length of routable ip .
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip address of domain name server.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        """
        prefix length of routable ip .
        """
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetVpcStatusResult(dict):
    def __init__(__self__, *,
                 execution_contexts: Sequence['outputs.GetVpcStatusExecutionContextResult'],
                 name: str,
                 resources: Sequence['outputs.GetVpcStatusResourceResult'],
                 state: str):
        """
        :param Sequence['GetVpcStatusExecutionContextArgs'] execution_contexts: Execution Context of VPC.
        :param str name: - the name.
        :param Sequence['GetVpcStatusResourceArgs'] resources: VPC resources status
        :param str state: The state of the VPC
        """
        pulumi.set(__self__, "execution_contexts", execution_contexts)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="executionContexts")
    def execution_contexts(self) -> Sequence['outputs.GetVpcStatusExecutionContextResult']:
        """
        Execution Context of VPC.
        """
        return pulumi.get(self, "execution_contexts")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetVpcStatusResourceResult']:
        """
        VPC resources status
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the VPC
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetVpcStatusExecutionContextResult(dict):
    def __init__(__self__, *,
                 task_uuids: Sequence[str]):
        pulumi.set(__self__, "task_uuids", task_uuids)

    @property
    @pulumi.getter(name="taskUuids")
    def task_uuids(self) -> Sequence[str]:
        return pulumi.get(self, "task_uuids")


@pulumi.output_type
class GetVpcStatusResourceResult(dict):
    def __init__(__self__, *,
                 common_domain_name_server_ip_lists: Sequence['outputs.GetVpcStatusResourceCommonDomainNameServerIpListResult'],
                 external_subnet_lists: Sequence['outputs.GetVpcStatusResourceExternalSubnetListResult'],
                 externally_routable_prefix_lists: Sequence['outputs.GetVpcStatusResourceExternallyRoutablePrefixListResult']):
        """
        :param Sequence['GetVpcStatusResourceCommonDomainNameServerIpListArgs'] common_domain_name_server_ip_lists: List of domain name server IPs.
        :param Sequence['GetVpcStatusResourceExternalSubnetListArgs'] external_subnet_lists: List of external subnets attached to this VPC.
        :param Sequence['GetVpcStatusResourceExternallyRoutablePrefixListArgs'] externally_routable_prefix_lists: List of external routable ip and prefix .
        """
        pulumi.set(__self__, "common_domain_name_server_ip_lists", common_domain_name_server_ip_lists)
        pulumi.set(__self__, "external_subnet_lists", external_subnet_lists)
        pulumi.set(__self__, "externally_routable_prefix_lists", externally_routable_prefix_lists)

    @property
    @pulumi.getter(name="commonDomainNameServerIpLists")
    def common_domain_name_server_ip_lists(self) -> Sequence['outputs.GetVpcStatusResourceCommonDomainNameServerIpListResult']:
        """
        List of domain name server IPs.
        """
        return pulumi.get(self, "common_domain_name_server_ip_lists")

    @property
    @pulumi.getter(name="externalSubnetLists")
    def external_subnet_lists(self) -> Sequence['outputs.GetVpcStatusResourceExternalSubnetListResult']:
        """
        List of external subnets attached to this VPC.
        """
        return pulumi.get(self, "external_subnet_lists")

    @property
    @pulumi.getter(name="externallyRoutablePrefixLists")
    def externally_routable_prefix_lists(self) -> Sequence['outputs.GetVpcStatusResourceExternallyRoutablePrefixListResult']:
        """
        List of external routable ip and prefix .
        """
        return pulumi.get(self, "externally_routable_prefix_lists")


@pulumi.output_type
class GetVpcStatusResourceCommonDomainNameServerIpListResult(dict):
    def __init__(__self__, *,
                 ip: str):
        """
        :param str ip: ip address of domain name server.
        """
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip address of domain name server.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetVpcStatusResourceExternalSubnetListResult(dict):
    def __init__(__self__, *,
                 active_gateway_nodes: Sequence['outputs.GetVpcStatusResourceExternalSubnetListActiveGatewayNodeResult'],
                 external_ip_lists: Sequence[str],
                 external_subnet_reference: Mapping[str, str]):
        """
        :param Sequence['GetVpcStatusResourceExternalSubnetListActiveGatewayNodeArgs'] active_gateway_nodes: Active Gateway Node. Only present in VPC Status Resources.
        :param Sequence[str] external_ip_lists: List of external subnets attached to this VPC. Only present in VPC Status Resources .
        :param Mapping[str, str] external_subnet_reference: Reference to a subnet.
        """
        pulumi.set(__self__, "active_gateway_nodes", active_gateway_nodes)
        pulumi.set(__self__, "external_ip_lists", external_ip_lists)
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)

    @property
    @pulumi.getter(name="activeGatewayNodes")
    def active_gateway_nodes(self) -> Sequence['outputs.GetVpcStatusResourceExternalSubnetListActiveGatewayNodeResult']:
        """
        Active Gateway Node. Only present in VPC Status Resources.
        """
        return pulumi.get(self, "active_gateway_nodes")

    @property
    @pulumi.getter(name="externalIpLists")
    def external_ip_lists(self) -> Sequence[str]:
        """
        List of external subnets attached to this VPC. Only present in VPC Status Resources .
        """
        return pulumi.get(self, "external_ip_lists")

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        Reference to a subnet.
        """
        return pulumi.get(self, "external_subnet_reference")


@pulumi.output_type
class GetVpcStatusResourceExternalSubnetListActiveGatewayNodeResult(dict):
    def __init__(__self__, *,
                 host_reference: Mapping[str, str],
                 ip_address: str):
        """
        :param Mapping[str, str] host_reference: Reference to host.
        :param str ip_address: ip address.
        """
        pulumi.set(__self__, "host_reference", host_reference)
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="hostReference")
    def host_reference(self) -> Mapping[str, str]:
        """
        Reference to host.
        """
        return pulumi.get(self, "host_reference")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        ip address.
        """
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetVpcStatusResourceExternallyRoutablePrefixListResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 prefix_length: int):
        """
        :param str ip: ip address of domain name server.
        :param int prefix_length: prefix length of routable ip .
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip address of domain name server.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        """
        prefix length of routable ip .
        """
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetVpcsEntityResult(dict):
    def __init__(__self__, *,
                 metadata: Mapping[str, str],
                 specs: Sequence['outputs.GetVpcsEntitySpecResult'],
                 statuses: Sequence['outputs.GetVpcsEntityStatusResult']):
        """
        :param Mapping[str, str] metadata: - The vpc kind metadata.
        :param Sequence['GetVpcsEntitySpecArgs'] specs: VPC input spec
        :param Sequence['GetVpcsEntityStatusArgs'] statuses: VPC output status
        """
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "specs", specs)
        pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        - The vpc kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def specs(self) -> Sequence['outputs.GetVpcsEntitySpecResult']:
        """
        VPC input spec
        """
        return pulumi.get(self, "specs")

    @property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetVpcsEntityStatusResult']:
        """
        VPC output status
        """
        return pulumi.get(self, "statuses")


@pulumi.output_type
class GetVpcsEntitySpecResult(dict):
    def __init__(__self__, *,
                 name: str,
                 resources: Sequence['outputs.GetVpcsEntitySpecResourceResult']):
        """
        :param str name: - the name.
        :param Sequence['GetVpcsEntitySpecResourceArgs'] resources: VPC resources status
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetVpcsEntitySpecResourceResult']:
        """
        VPC resources status
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetVpcsEntitySpecResourceResult(dict):
    def __init__(__self__, *,
                 common_domain_name_server_ip_lists: Sequence['outputs.GetVpcsEntitySpecResourceCommonDomainNameServerIpListResult'],
                 external_subnet_lists: Sequence['outputs.GetVpcsEntitySpecResourceExternalSubnetListResult'],
                 externally_routable_prefix_lists: Sequence['outputs.GetVpcsEntitySpecResourceExternallyRoutablePrefixListResult']):
        """
        :param Sequence['GetVpcsEntitySpecResourceCommonDomainNameServerIpListArgs'] common_domain_name_server_ip_lists: List of domain name server IPs.
        :param Sequence['GetVpcsEntitySpecResourceExternalSubnetListArgs'] external_subnet_lists: List of external subnets attached to this VPC.
        :param Sequence['GetVpcsEntitySpecResourceExternallyRoutablePrefixListArgs'] externally_routable_prefix_lists: List of external routable ip and prefix .
        """
        pulumi.set(__self__, "common_domain_name_server_ip_lists", common_domain_name_server_ip_lists)
        pulumi.set(__self__, "external_subnet_lists", external_subnet_lists)
        pulumi.set(__self__, "externally_routable_prefix_lists", externally_routable_prefix_lists)

    @property
    @pulumi.getter(name="commonDomainNameServerIpLists")
    def common_domain_name_server_ip_lists(self) -> Sequence['outputs.GetVpcsEntitySpecResourceCommonDomainNameServerIpListResult']:
        """
        List of domain name server IPs.
        """
        return pulumi.get(self, "common_domain_name_server_ip_lists")

    @property
    @pulumi.getter(name="externalSubnetLists")
    def external_subnet_lists(self) -> Sequence['outputs.GetVpcsEntitySpecResourceExternalSubnetListResult']:
        """
        List of external subnets attached to this VPC.
        """
        return pulumi.get(self, "external_subnet_lists")

    @property
    @pulumi.getter(name="externallyRoutablePrefixLists")
    def externally_routable_prefix_lists(self) -> Sequence['outputs.GetVpcsEntitySpecResourceExternallyRoutablePrefixListResult']:
        """
        List of external routable ip and prefix .
        """
        return pulumi.get(self, "externally_routable_prefix_lists")


@pulumi.output_type
class GetVpcsEntitySpecResourceCommonDomainNameServerIpListResult(dict):
    def __init__(__self__, *,
                 ip: str):
        """
        :param str ip: ip address of domain name server.
        """
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip address of domain name server.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetVpcsEntitySpecResourceExternalSubnetListResult(dict):
    def __init__(__self__, *,
                 external_subnet_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] external_subnet_reference: Reference to a subnet.
        """
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        Reference to a subnet.
        """
        return pulumi.get(self, "external_subnet_reference")


@pulumi.output_type
class GetVpcsEntitySpecResourceExternallyRoutablePrefixListResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 prefix_length: int):
        """
        :param str ip: ip address of domain name server.
        :param int prefix_length: prefix length of routable ip .
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip address of domain name server.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        """
        prefix length of routable ip .
        """
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetVpcsEntityStatusResult(dict):
    def __init__(__self__, *,
                 execution_contexts: Sequence['outputs.GetVpcsEntityStatusExecutionContextResult'],
                 name: str,
                 resources: Sequence['outputs.GetVpcsEntityStatusResourceResult'],
                 state: str):
        """
        :param Sequence['GetVpcsEntityStatusExecutionContextArgs'] execution_contexts: Execution Context of VPC.
        :param str name: - the name.
        :param Sequence['GetVpcsEntityStatusResourceArgs'] resources: VPC resources status
        :param str state: The state of the VPC
        """
        pulumi.set(__self__, "execution_contexts", execution_contexts)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="executionContexts")
    def execution_contexts(self) -> Sequence['outputs.GetVpcsEntityStatusExecutionContextResult']:
        """
        Execution Context of VPC.
        """
        return pulumi.get(self, "execution_contexts")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetVpcsEntityStatusResourceResult']:
        """
        VPC resources status
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the VPC
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetVpcsEntityStatusExecutionContextResult(dict):
    def __init__(__self__, *,
                 task_uuids: Sequence[str]):
        pulumi.set(__self__, "task_uuids", task_uuids)

    @property
    @pulumi.getter(name="taskUuids")
    def task_uuids(self) -> Sequence[str]:
        return pulumi.get(self, "task_uuids")


@pulumi.output_type
class GetVpcsEntityStatusResourceResult(dict):
    def __init__(__self__, *,
                 common_domain_name_server_ip_lists: Sequence['outputs.GetVpcsEntityStatusResourceCommonDomainNameServerIpListResult'],
                 external_subnet_lists: Sequence['outputs.GetVpcsEntityStatusResourceExternalSubnetListResult'],
                 externally_routable_prefix_lists: Sequence['outputs.GetVpcsEntityStatusResourceExternallyRoutablePrefixListResult']):
        """
        :param Sequence['GetVpcsEntityStatusResourceCommonDomainNameServerIpListArgs'] common_domain_name_server_ip_lists: List of domain name server IPs.
        :param Sequence['GetVpcsEntityStatusResourceExternalSubnetListArgs'] external_subnet_lists: List of external subnets attached to this VPC.
        :param Sequence['GetVpcsEntityStatusResourceExternallyRoutablePrefixListArgs'] externally_routable_prefix_lists: List of external routable ip and prefix .
        """
        pulumi.set(__self__, "common_domain_name_server_ip_lists", common_domain_name_server_ip_lists)
        pulumi.set(__self__, "external_subnet_lists", external_subnet_lists)
        pulumi.set(__self__, "externally_routable_prefix_lists", externally_routable_prefix_lists)

    @property
    @pulumi.getter(name="commonDomainNameServerIpLists")
    def common_domain_name_server_ip_lists(self) -> Sequence['outputs.GetVpcsEntityStatusResourceCommonDomainNameServerIpListResult']:
        """
        List of domain name server IPs.
        """
        return pulumi.get(self, "common_domain_name_server_ip_lists")

    @property
    @pulumi.getter(name="externalSubnetLists")
    def external_subnet_lists(self) -> Sequence['outputs.GetVpcsEntityStatusResourceExternalSubnetListResult']:
        """
        List of external subnets attached to this VPC.
        """
        return pulumi.get(self, "external_subnet_lists")

    @property
    @pulumi.getter(name="externallyRoutablePrefixLists")
    def externally_routable_prefix_lists(self) -> Sequence['outputs.GetVpcsEntityStatusResourceExternallyRoutablePrefixListResult']:
        """
        List of external routable ip and prefix .
        """
        return pulumi.get(self, "externally_routable_prefix_lists")


@pulumi.output_type
class GetVpcsEntityStatusResourceCommonDomainNameServerIpListResult(dict):
    def __init__(__self__, *,
                 ip: str):
        """
        :param str ip: ip address of domain name server.
        """
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip address of domain name server.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetVpcsEntityStatusResourceExternalSubnetListResult(dict):
    def __init__(__self__, *,
                 active_gateway_nodes: Sequence['outputs.GetVpcsEntityStatusResourceExternalSubnetListActiveGatewayNodeResult'],
                 external_ip_lists: Sequence[str],
                 external_subnet_reference: Mapping[str, str]):
        """
        :param Sequence['GetVpcsEntityStatusResourceExternalSubnetListActiveGatewayNodeArgs'] active_gateway_nodes: Active Gateway Node. Only present in VPC Status Resources.
        :param Sequence[str] external_ip_lists: List of external subnets attached to this VPC. Only present in VPC Status Resources .
        :param Mapping[str, str] external_subnet_reference: Reference to a subnet.
        """
        pulumi.set(__self__, "active_gateway_nodes", active_gateway_nodes)
        pulumi.set(__self__, "external_ip_lists", external_ip_lists)
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)

    @property
    @pulumi.getter(name="activeGatewayNodes")
    def active_gateway_nodes(self) -> Sequence['outputs.GetVpcsEntityStatusResourceExternalSubnetListActiveGatewayNodeResult']:
        """
        Active Gateway Node. Only present in VPC Status Resources.
        """
        return pulumi.get(self, "active_gateway_nodes")

    @property
    @pulumi.getter(name="externalIpLists")
    def external_ip_lists(self) -> Sequence[str]:
        """
        List of external subnets attached to this VPC. Only present in VPC Status Resources .
        """
        return pulumi.get(self, "external_ip_lists")

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        Reference to a subnet.
        """
        return pulumi.get(self, "external_subnet_reference")


@pulumi.output_type
class GetVpcsEntityStatusResourceExternalSubnetListActiveGatewayNodeResult(dict):
    def __init__(__self__, *,
                 host_reference: Mapping[str, str],
                 ip_address: str):
        """
        :param Mapping[str, str] host_reference: Reference to host.
        :param str ip_address: ip address.
        """
        pulumi.set(__self__, "host_reference", host_reference)
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="hostReference")
    def host_reference(self) -> Mapping[str, str]:
        """
        Reference to host.
        """
        return pulumi.get(self, "host_reference")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        ip address.
        """
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetVpcsEntityStatusResourceExternallyRoutablePrefixListResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 prefix_length: int):
        """
        :param str ip: ip address of domain name server.
        :param int prefix_length: prefix length of routable ip .
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip address of domain name server.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        """
        prefix length of routable ip .
        """
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetVpcsMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str,
                 total_matches: int):
        """
        :param str kind: - The kind name (Default value: project).
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)
        pulumi.set(__self__, "total_matches", total_matches)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="totalMatches")
    def total_matches(self) -> int:
        return pulumi.get(self, "total_matches")


