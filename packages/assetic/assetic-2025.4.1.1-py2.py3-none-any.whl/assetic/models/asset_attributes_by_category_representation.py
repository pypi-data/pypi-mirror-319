# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501


class AssetAttributesByCategoryRepresentation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'name': 'str',
        'type': 'str',
        'data_length': 'int',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'key': 'Key',
        'name': 'Name',
        'type': 'Type',
        'data_length': 'DataLength',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, key=None, name=None, type=None, data_length=None, links=None, embedded=None):  # noqa: E501
        """AssetAttributesByCategoryRepresentation - a model defined in Swagger"""  # noqa: E501

        self._key = None
        self._name = None
        self._type = None
        self._data_length = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if data_length is not None:
            self.data_length = data_length
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def key(self):
        """Gets the key of this AssetAttributesByCategoryRepresentation.  # noqa: E501

        Name of the Attribute  # noqa: E501

        :return: The key of this AssetAttributesByCategoryRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this AssetAttributesByCategoryRepresentation.

        Name of the Attribute  # noqa: E501

        :param key: The key of this AssetAttributesByCategoryRepresentation.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this AssetAttributesByCategoryRepresentation.  # noqa: E501

        Label of the Attribute  # noqa: E501

        :return: The name of this AssetAttributesByCategoryRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetAttributesByCategoryRepresentation.

        Label of the Attribute  # noqa: E501

        :param name: The name of this AssetAttributesByCategoryRepresentation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this AssetAttributesByCategoryRepresentation.  # noqa: E501

        DataType of the Attribute  # noqa: E501

        :return: The type of this AssetAttributesByCategoryRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AssetAttributesByCategoryRepresentation.

        DataType of the Attribute  # noqa: E501

        :param type: The type of this AssetAttributesByCategoryRepresentation.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def data_length(self):
        """Gets the data_length of this AssetAttributesByCategoryRepresentation.  # noqa: E501

        Data Length of the Attribute  # noqa: E501

        :return: The data_length of this AssetAttributesByCategoryRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._data_length

    @data_length.setter
    def data_length(self, data_length):
        """Sets the data_length of this AssetAttributesByCategoryRepresentation.

        Data Length of the Attribute  # noqa: E501

        :param data_length: The data_length of this AssetAttributesByCategoryRepresentation.  # noqa: E501
        :type: int
        """

        self._data_length = data_length

    @property
    def links(self):
        """Gets the links of this AssetAttributesByCategoryRepresentation.  # noqa: E501


        :return: The links of this AssetAttributesByCategoryRepresentation.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AssetAttributesByCategoryRepresentation.


        :param links: The links of this AssetAttributesByCategoryRepresentation.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this AssetAttributesByCategoryRepresentation.  # noqa: E501


        :return: The embedded of this AssetAttributesByCategoryRepresentation.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this AssetAttributesByCategoryRepresentation.


        :param embedded: The embedded of this AssetAttributesByCategoryRepresentation.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetAttributesByCategoryRepresentation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetAttributesByCategoryRepresentation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
