# coding: utf-8

"""
    Orbital State Management API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from spacetower_orbital_state_management.models.power_system import PowerSystem
from spacetower_orbital_state_management.models.reflection_absorption_coefficients import ReflectionAbsorptionCoefficients
from spacetower_orbital_state_management.models.solar_array_geometry import SolarArrayGeometry
from spacetower_orbital_state_management.models.space_object import SpaceObject
from spacetower_orbital_state_management.models.space_object_type import SpaceObjectType
from spacetower_orbital_state_management.models.thruster import Thruster
from typing import Optional, Set
from typing_extensions import Self

class BoxObject(SpaceObject):
    """
    Box-shaped object 
    """ # noqa: E501
    drag_coefficient: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Dimensionless drag coefficient. Units [-]", alias="dragCoefficient")
    x_dimension: Union[Annotated[float, Field(strict=True, gt=0)], Annotated[int, Field(strict=True, gt=0)]] = Field(description="Box dimension along X axis. Units [m]", alias="xDimension")
    y_dimension: Union[Annotated[float, Field(strict=True, gt=0)], Annotated[int, Field(strict=True, gt=0)]] = Field(description="Box dimension along Y axis. Units [m]", alias="yDimension")
    z_dimension: Union[Annotated[float, Field(strict=True, gt=0)], Annotated[int, Field(strict=True, gt=0)]] = Field(description="Box dimension along Z axis. Units [m]", alias="zDimension")
    solar_array_geometry: Optional[SolarArrayGeometry] = Field(default=None, alias="solarArrayGeometry")
    radiation_coefficients: Optional[ReflectionAbsorptionCoefficients] = Field(default=None, alias="radiationCoefficients")
    radiation_correction_factor: Optional[Union[Annotated[float, Field(strict=True, gt=0)], Annotated[int, Field(strict=True, gt=0)]]] = Field(default=1, description="Correction factor for the radiation pressure acceleration. Units [-]", alias="radiationCorrectionFactor")
    __properties: ClassVar[List[str]] = ["mass", "dragCoefficient", "thruster", "powerSystem", "clockOffset", "spaceObjectType", "xDimension", "yDimension", "zDimension", "solarArrayGeometry", "radiationCoefficients", "radiationCorrectionFactor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BoxObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of thruster
        if self.thruster:
            _dict['thruster'] = self.thruster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of power_system
        if self.power_system:
            _dict['powerSystem'] = self.power_system.to_dict()
        # override the default output from pydantic by calling `to_dict()` of solar_array_geometry
        if self.solar_array_geometry:
            _dict['solarArrayGeometry'] = self.solar_array_geometry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of radiation_coefficients
        if self.radiation_coefficients:
            _dict['radiationCoefficients'] = self.radiation_coefficients.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BoxObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mass": obj.get("mass"),
            "dragCoefficient": obj.get("dragCoefficient"),
            "thruster": Thruster.from_dict(obj["thruster"]) if obj.get("thruster") is not None else None,
            "powerSystem": PowerSystem.from_dict(obj["powerSystem"]) if obj.get("powerSystem") is not None else None,
            "clockOffset": obj.get("clockOffset") if obj.get("clockOffset") is not None else 0,
            "spaceObjectType": obj.get("spaceObjectType"),
            "xDimension": obj.get("xDimension"),
            "yDimension": obj.get("yDimension"),
            "zDimension": obj.get("zDimension"),
            "solarArrayGeometry": SolarArrayGeometry.from_dict(obj["solarArrayGeometry"]) if obj.get("solarArrayGeometry") is not None else None,
            "radiationCoefficients": ReflectionAbsorptionCoefficients.from_dict(obj["radiationCoefficients"]) if obj.get("radiationCoefficients") is not None else None,
            "radiationCorrectionFactor": obj.get("radiationCorrectionFactor") if obj.get("radiationCorrectionFactor") is not None else 1
        })
        return _obj


