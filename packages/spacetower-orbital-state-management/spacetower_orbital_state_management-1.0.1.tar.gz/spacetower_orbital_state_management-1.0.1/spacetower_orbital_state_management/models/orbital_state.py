# coding: utf-8

"""
    Orbital State Management API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from spacetower_orbital_state_management.models.attitude_law import AttitudeLaw
from spacetower_orbital_state_management.models.orbital_state_context import OrbitalStateContext
from spacetower_orbital_state_management.models.orbital_state_orbit_data import OrbitalStateOrbitData
from spacetower_orbital_state_management.models.space_object import SpaceObject
from typing import Optional, Set
from typing_extensions import Self

class OrbitalState(BaseModel):
    """
    The orbital state of a space object at a given date
    """ # noqa: E501
    external_id: StrictStr = Field(description="The object identifier chosen at user's discretion, e.g. the NORAD ID", alias="externalId")
    var_date: str = Field(description="The orbital state epoch (UTC)", alias="date")
    space_object: SpaceObject = Field(alias="spaceObject")
    orbit_data: OrbitalStateOrbitData = Field(alias="orbitData")
    attitude_law: Optional[AttitudeLaw] = Field(default=None, alias="attitudeLaw")
    context: OrbitalStateContext
    __properties: ClassVar[List[str]] = ["externalId", "date", "spaceObject", "orbitData", "attitudeLaw", "context"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrbitalState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of space_object
        if self.space_object:
            _dict['spaceObject'] = self.space_object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of orbit_data
        if self.orbit_data:
            _dict['orbitData'] = self.orbit_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attitude_law
        if self.attitude_law:
            _dict['attitudeLaw'] = self.attitude_law.to_dict()
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrbitalState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "externalId": obj.get("externalId"),
            "date": obj.get("date"),
            "spaceObject": SpaceObject.from_dict(obj["spaceObject"]) if obj.get("spaceObject") is not None else None,
            "orbitData": OrbitalStateOrbitData.from_dict(obj["orbitData"]) if obj.get("orbitData") is not None else None,
            "attitudeLaw": AttitudeLaw.from_dict(obj["attitudeLaw"]) if obj.get("attitudeLaw") is not None else None,
            "context": OrbitalStateContext.from_dict(obj["context"]) if obj.get("context") is not None else None
        })
        return _obj


