# coding: utf-8

"""
    Orbital State Management API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_orbital_state_management.models.space_object import SpaceObject

class TestSpaceObject(unittest.TestCase):
    """SpaceObject unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SpaceObject:
        """Test SpaceObject
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SpaceObject`
        """
        model = SpaceObject()
        if include_optional:
            return SpaceObject(
                mass = 0,
                drag_coefficient = 0,
                thruster = spacetower_orbital_state_management.models.thruster.Thruster(
                    thrust = 0, 
                    specific_impulse = 0, 
                    axis_in_space_object_frame = spacetower_orbital_state_management.models.vector3_d.Vector3D(
                        x = 1.337, 
                        y = 1.337, 
                        z = 1.337, ), ),
                power_system = spacetower_orbital_state_management.models.power_system.PowerSystem(
                    solar_array_maximum_power = 1.337, 
                    battery_model = spacetower_orbital_state_management.models.battery_model.BatteryModel(
                        nominal_capacity = 1.337, 
                        depth_of_discharge = 1.337, 
                        initial_charge = 1.337, 
                        minimum_charge_when_firing = 1.337, ), 
                    propulsion_power_model = spacetower_orbital_state_management.models.propulsion_power_model.PropulsionPowerModel(
                        active_propulsion_power_consumption = 1.337, 
                        warmup_propulsion_power_consumption = 1.337, 
                        warmup_duration = 1.337, ), ),
                clock_offset = 1.337,
                space_object_type = 'BOX'
            )
        else:
            return SpaceObject(
                mass = 0,
                space_object_type = 'BOX',
        )
        """

    def testSpaceObject(self):
        """Test SpaceObject"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
