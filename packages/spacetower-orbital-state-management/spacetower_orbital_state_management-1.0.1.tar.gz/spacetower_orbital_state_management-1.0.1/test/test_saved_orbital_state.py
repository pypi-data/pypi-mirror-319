# coding: utf-8

"""
    Orbital State Management API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_orbital_state_management.models.saved_orbital_state import SavedOrbitalState

class TestSavedOrbitalState(unittest.TestCase):
    """SavedOrbitalState unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SavedOrbitalState:
        """Test SavedOrbitalState
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SavedOrbitalState`
        """
        model = SavedOrbitalState()
        if include_optional:
            return SavedOrbitalState(
                id = '',
                creation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                status = 'REFERENCE',
                external_id = '',
                var_date = '2024-01-01T00:00Z',
                space_object = spacetower_orbital_state_management.models.space_object.SpaceObject(
                    mass = 0, 
                    drag_coefficient = 0, 
                    thruster = spacetower_orbital_state_management.models.thruster.Thruster(
                        thrust = 0, 
                        specific_impulse = 0, 
                        axis_in_space_object_frame = spacetower_orbital_state_management.models.vector3_d.Vector3D(
                            x = 1.337, 
                            y = 1.337, 
                            z = 1.337, ), ), 
                    power_system = spacetower_orbital_state_management.models.power_system.PowerSystem(
                        solar_array_maximum_power = 1.337, 
                        battery_model = spacetower_orbital_state_management.models.battery_model.BatteryModel(
                            nominal_capacity = 1.337, 
                            depth_of_discharge = 1.337, 
                            initial_charge = 1.337, 
                            minimum_charge_when_firing = 1.337, ), 
                        propulsion_power_model = spacetower_orbital_state_management.models.propulsion_power_model.PropulsionPowerModel(
                            active_propulsion_power_consumption = 1.337, 
                            warmup_propulsion_power_consumption = 1.337, 
                            warmup_duration = 1.337, ), ), 
                    clock_offset = 1.337, 
                    space_object_type = 'BOX', ),
                orbit_data = spacetower_orbital_state_management.models.orbital_state_orbit_data.OrbitalState_orbitData(
                    orbit = spacetower_orbital_state_management.models.orbit.Orbit(
                        orbit_type = 'KEPLERIAN', ), 
                    covariance_matrix = spacetower_orbital_state_management.models.orbital_covariance_matrix.OrbitalCovarianceMatrix(
                        covariance_orbit_type = 'CARTESIAN', ), ),
                attitude_law = spacetower_orbital_state_management.models.attitude_law.AttitudeLaw(
                    attitude_law_type = 'LOF_ATTITUDE', ),
                context = spacetower_orbital_state_management.models.orbital_state_context.OrbitalState_context(
                    computation_id = '', 
                    simulation_configuration = spacetower_orbital_state_management.models.simulation_configuration.SimulationConfiguration(
                        perturbations = [
                            spacetower_orbital_state_management.models.perturbation.Perturbation(
                                perturbation_type = 'EARTH_POTENTIAL', )
                            ], 
                        integrator_configuration = spacetower_orbital_state_management.models.integrator_configuration.IntegratorConfiguration(
                            integrator_type = 'VARIABLE_STEP', ), ), 
                    data = {
                        'key' : ''
                        }, )
            )
        else:
            return SavedOrbitalState(
                id = '',
                creation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                status = 'REFERENCE',
                external_id = '',
                var_date = '2024-01-01T00:00Z',
                space_object = spacetower_orbital_state_management.models.space_object.SpaceObject(
                    mass = 0, 
                    drag_coefficient = 0, 
                    thruster = spacetower_orbital_state_management.models.thruster.Thruster(
                        thrust = 0, 
                        specific_impulse = 0, 
                        axis_in_space_object_frame = spacetower_orbital_state_management.models.vector3_d.Vector3D(
                            x = 1.337, 
                            y = 1.337, 
                            z = 1.337, ), ), 
                    power_system = spacetower_orbital_state_management.models.power_system.PowerSystem(
                        solar_array_maximum_power = 1.337, 
                        battery_model = spacetower_orbital_state_management.models.battery_model.BatteryModel(
                            nominal_capacity = 1.337, 
                            depth_of_discharge = 1.337, 
                            initial_charge = 1.337, 
                            minimum_charge_when_firing = 1.337, ), 
                        propulsion_power_model = spacetower_orbital_state_management.models.propulsion_power_model.PropulsionPowerModel(
                            active_propulsion_power_consumption = 1.337, 
                            warmup_propulsion_power_consumption = 1.337, 
                            warmup_duration = 1.337, ), ), 
                    clock_offset = 1.337, 
                    space_object_type = 'BOX', ),
                orbit_data = spacetower_orbital_state_management.models.orbital_state_orbit_data.OrbitalState_orbitData(
                    orbit = spacetower_orbital_state_management.models.orbit.Orbit(
                        orbit_type = 'KEPLERIAN', ), 
                    covariance_matrix = spacetower_orbital_state_management.models.orbital_covariance_matrix.OrbitalCovarianceMatrix(
                        covariance_orbit_type = 'CARTESIAN', ), ),
                context = spacetower_orbital_state_management.models.orbital_state_context.OrbitalState_context(
                    computation_id = '', 
                    simulation_configuration = spacetower_orbital_state_management.models.simulation_configuration.SimulationConfiguration(
                        perturbations = [
                            spacetower_orbital_state_management.models.perturbation.Perturbation(
                                perturbation_type = 'EARTH_POTENTIAL', )
                            ], 
                        integrator_configuration = spacetower_orbital_state_management.models.integrator_configuration.IntegratorConfiguration(
                            integrator_type = 'VARIABLE_STEP', ), ), 
                    data = {
                        'key' : ''
                        }, ),
        )
        """

    def testSavedOrbitalState(self):
        """Test SavedOrbitalState"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
