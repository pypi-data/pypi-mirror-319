# coding: utf-8

"""
    DataQuality API

    DataQuality API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataQualityApiControllersValidationModelsResultsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_entity': 'str',
        'id_asset': 'str',
        'validation_error_count': 'int',
        '_date': 'datetime',
        'id_status': 'DataQualityValidationAssetStatusEnum',
        'result_path': 'str'
    }

    attribute_map = {
        'id_entity': 'idEntity',
        'id_asset': 'idAsset',
        'validation_error_count': 'validationErrorCount',
        '_date': 'date',
        'id_status': 'idStatus',
        'result_path': 'resultPath'
    }

    def __init__(self, id_entity=None, id_asset=None, validation_error_count=None, _date=None, id_status=None, result_path=None):  # noqa: E501
        """DataQualityApiControllersValidationModelsResultsDto - a model defined in Swagger"""  # noqa: E501
        self._id_entity = None
        self._id_asset = None
        self._validation_error_count = None
        self.__date = None
        self._id_status = None
        self._result_path = None
        self.discriminator = None
        self.id_entity = id_entity
        self.id_asset = id_asset
        if validation_error_count is not None:
            self.validation_error_count = validation_error_count
        self._date = _date
        self.id_status = id_status
        if result_path is not None:
            self.result_path = result_path

    @property
    def id_entity(self):
        """Gets the id_entity of this DataQualityApiControllersValidationModelsResultsDto.  # noqa: E501


        :return: The id_entity of this DataQualityApiControllersValidationModelsResultsDto.  # noqa: E501
        :rtype: str
        """
        return self._id_entity

    @id_entity.setter
    def id_entity(self, id_entity):
        """Sets the id_entity of this DataQualityApiControllersValidationModelsResultsDto.


        :param id_entity: The id_entity of this DataQualityApiControllersValidationModelsResultsDto.  # noqa: E501
        :type: str
        """
        if id_entity is None:
            raise ValueError("Invalid value for `id_entity`, must not be `None`")  # noqa: E501

        self._id_entity = id_entity

    @property
    def id_asset(self):
        """Gets the id_asset of this DataQualityApiControllersValidationModelsResultsDto.  # noqa: E501


        :return: The id_asset of this DataQualityApiControllersValidationModelsResultsDto.  # noqa: E501
        :rtype: str
        """
        return self._id_asset

    @id_asset.setter
    def id_asset(self, id_asset):
        """Sets the id_asset of this DataQualityApiControllersValidationModelsResultsDto.


        :param id_asset: The id_asset of this DataQualityApiControllersValidationModelsResultsDto.  # noqa: E501
        :type: str
        """
        if id_asset is None:
            raise ValueError("Invalid value for `id_asset`, must not be `None`")  # noqa: E501

        self._id_asset = id_asset

    @property
    def validation_error_count(self):
        """Gets the validation_error_count of this DataQualityApiControllersValidationModelsResultsDto.  # noqa: E501


        :return: The validation_error_count of this DataQualityApiControllersValidationModelsResultsDto.  # noqa: E501
        :rtype: int
        """
        return self._validation_error_count

    @validation_error_count.setter
    def validation_error_count(self, validation_error_count):
        """Sets the validation_error_count of this DataQualityApiControllersValidationModelsResultsDto.


        :param validation_error_count: The validation_error_count of this DataQualityApiControllersValidationModelsResultsDto.  # noqa: E501
        :type: int
        """

        self._validation_error_count = validation_error_count

    @property
    def _date(self):
        """Gets the _date of this DataQualityApiControllersValidationModelsResultsDto.  # noqa: E501


        :return: The _date of this DataQualityApiControllersValidationModelsResultsDto.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DataQualityApiControllersValidationModelsResultsDto.


        :param _date: The _date of this DataQualityApiControllersValidationModelsResultsDto.  # noqa: E501
        :type: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def id_status(self):
        """Gets the id_status of this DataQualityApiControllersValidationModelsResultsDto.  # noqa: E501


        :return: The id_status of this DataQualityApiControllersValidationModelsResultsDto.  # noqa: E501
        :rtype: DataQualityValidationAssetStatusEnum
        """
        return self._id_status

    @id_status.setter
    def id_status(self, id_status):
        """Sets the id_status of this DataQualityApiControllersValidationModelsResultsDto.


        :param id_status: The id_status of this DataQualityApiControllersValidationModelsResultsDto.  # noqa: E501
        :type: DataQualityValidationAssetStatusEnum
        """
        if id_status is None:
            raise ValueError("Invalid value for `id_status`, must not be `None`")  # noqa: E501

        self._id_status = id_status

    @property
    def result_path(self):
        """Gets the result_path of this DataQualityApiControllersValidationModelsResultsDto.  # noqa: E501


        :return: The result_path of this DataQualityApiControllersValidationModelsResultsDto.  # noqa: E501
        :rtype: str
        """
        return self._result_path

    @result_path.setter
    def result_path(self, result_path):
        """Sets the result_path of this DataQualityApiControllersValidationModelsResultsDto.


        :param result_path: The result_path of this DataQualityApiControllersValidationModelsResultsDto.  # noqa: E501
        :type: str
        """

        self._result_path = result_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataQualityApiControllersValidationModelsResultsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataQualityApiControllersValidationModelsResultsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
