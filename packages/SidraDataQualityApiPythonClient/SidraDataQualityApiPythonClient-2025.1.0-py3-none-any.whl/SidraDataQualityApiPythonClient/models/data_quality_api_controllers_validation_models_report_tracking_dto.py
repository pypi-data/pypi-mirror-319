# coding: utf-8

"""
    DataQuality API

    DataQuality API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataQualityApiControllersValidationModelsReportTrackingDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_triggered_by': 'DataQualityValidationTriggeredByEnum',
        'id_dip': 'str',
        'dip_run_id': 'str',
        'id_entity': 'str',
        '_date': 'datetime',
        'report_path': 'str'
    }

    attribute_map = {
        'id_triggered_by': 'idTriggeredBy',
        'id_dip': 'idDip',
        'dip_run_id': 'dipRunId',
        'id_entity': 'idEntity',
        '_date': 'date',
        'report_path': 'reportPath'
    }

    def __init__(self, id_triggered_by=None, id_dip=None, dip_run_id=None, id_entity=None, _date=None, report_path=None):  # noqa: E501
        """DataQualityApiControllersValidationModelsReportTrackingDto - a model defined in Swagger"""  # noqa: E501
        self._id_triggered_by = None
        self._id_dip = None
        self._dip_run_id = None
        self._id_entity = None
        self.__date = None
        self._report_path = None
        self.discriminator = None
        self.id_triggered_by = id_triggered_by
        if id_dip is not None:
            self.id_dip = id_dip
        if dip_run_id is not None:
            self.dip_run_id = dip_run_id
        self.id_entity = id_entity
        self._date = _date
        self.report_path = report_path

    @property
    def id_triggered_by(self):
        """Gets the id_triggered_by of this DataQualityApiControllersValidationModelsReportTrackingDto.  # noqa: E501


        :return: The id_triggered_by of this DataQualityApiControllersValidationModelsReportTrackingDto.  # noqa: E501
        :rtype: DataQualityValidationTriggeredByEnum
        """
        return self._id_triggered_by

    @id_triggered_by.setter
    def id_triggered_by(self, id_triggered_by):
        """Sets the id_triggered_by of this DataQualityApiControllersValidationModelsReportTrackingDto.


        :param id_triggered_by: The id_triggered_by of this DataQualityApiControllersValidationModelsReportTrackingDto.  # noqa: E501
        :type: DataQualityValidationTriggeredByEnum
        """
        if id_triggered_by is None:
            raise ValueError("Invalid value for `id_triggered_by`, must not be `None`")  # noqa: E501

        self._id_triggered_by = id_triggered_by

    @property
    def id_dip(self):
        """Gets the id_dip of this DataQualityApiControllersValidationModelsReportTrackingDto.  # noqa: E501


        :return: The id_dip of this DataQualityApiControllersValidationModelsReportTrackingDto.  # noqa: E501
        :rtype: str
        """
        return self._id_dip

    @id_dip.setter
    def id_dip(self, id_dip):
        """Sets the id_dip of this DataQualityApiControllersValidationModelsReportTrackingDto.


        :param id_dip: The id_dip of this DataQualityApiControllersValidationModelsReportTrackingDto.  # noqa: E501
        :type: str
        """

        self._id_dip = id_dip

    @property
    def dip_run_id(self):
        """Gets the dip_run_id of this DataQualityApiControllersValidationModelsReportTrackingDto.  # noqa: E501


        :return: The dip_run_id of this DataQualityApiControllersValidationModelsReportTrackingDto.  # noqa: E501
        :rtype: str
        """
        return self._dip_run_id

    @dip_run_id.setter
    def dip_run_id(self, dip_run_id):
        """Sets the dip_run_id of this DataQualityApiControllersValidationModelsReportTrackingDto.


        :param dip_run_id: The dip_run_id of this DataQualityApiControllersValidationModelsReportTrackingDto.  # noqa: E501
        :type: str
        """

        self._dip_run_id = dip_run_id

    @property
    def id_entity(self):
        """Gets the id_entity of this DataQualityApiControllersValidationModelsReportTrackingDto.  # noqa: E501


        :return: The id_entity of this DataQualityApiControllersValidationModelsReportTrackingDto.  # noqa: E501
        :rtype: str
        """
        return self._id_entity

    @id_entity.setter
    def id_entity(self, id_entity):
        """Sets the id_entity of this DataQualityApiControllersValidationModelsReportTrackingDto.


        :param id_entity: The id_entity of this DataQualityApiControllersValidationModelsReportTrackingDto.  # noqa: E501
        :type: str
        """
        if id_entity is None:
            raise ValueError("Invalid value for `id_entity`, must not be `None`")  # noqa: E501

        self._id_entity = id_entity

    @property
    def _date(self):
        """Gets the _date of this DataQualityApiControllersValidationModelsReportTrackingDto.  # noqa: E501


        :return: The _date of this DataQualityApiControllersValidationModelsReportTrackingDto.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DataQualityApiControllersValidationModelsReportTrackingDto.


        :param _date: The _date of this DataQualityApiControllersValidationModelsReportTrackingDto.  # noqa: E501
        :type: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def report_path(self):
        """Gets the report_path of this DataQualityApiControllersValidationModelsReportTrackingDto.  # noqa: E501


        :return: The report_path of this DataQualityApiControllersValidationModelsReportTrackingDto.  # noqa: E501
        :rtype: str
        """
        return self._report_path

    @report_path.setter
    def report_path(self, report_path):
        """Sets the report_path of this DataQualityApiControllersValidationModelsReportTrackingDto.


        :param report_path: The report_path of this DataQualityApiControllersValidationModelsReportTrackingDto.  # noqa: E501
        :type: str
        """
        if report_path is None:
            raise ValueError("Invalid value for `report_path`, must not be `None`")  # noqa: E501

        self._report_path = report_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataQualityApiControllersValidationModelsReportTrackingDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataQualityApiControllersValidationModelsReportTrackingDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
