# coding: utf-8

"""
    DataQuality API

    DataQuality API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataQualityApiControllersReportModelsReportDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_item_id': 'str',
        'report_id': 'str',
        '_date': 'datetime'
    }

    attribute_map = {
        'entity_item_id': 'entityItemId',
        'report_id': 'reportId',
        '_date': 'date'
    }

    def __init__(self, entity_item_id=None, report_id=None, _date=None):  # noqa: E501
        """DataQualityApiControllersReportModelsReportDto - a model defined in Swagger"""  # noqa: E501
        self._entity_item_id = None
        self._report_id = None
        self.__date = None
        self.discriminator = None
        if entity_item_id is not None:
            self.entity_item_id = entity_item_id
        if report_id is not None:
            self.report_id = report_id
        if _date is not None:
            self._date = _date

    @property
    def entity_item_id(self):
        """Gets the entity_item_id of this DataQualityApiControllersReportModelsReportDto.  # noqa: E501


        :return: The entity_item_id of this DataQualityApiControllersReportModelsReportDto.  # noqa: E501
        :rtype: str
        """
        return self._entity_item_id

    @entity_item_id.setter
    def entity_item_id(self, entity_item_id):
        """Sets the entity_item_id of this DataQualityApiControllersReportModelsReportDto.


        :param entity_item_id: The entity_item_id of this DataQualityApiControllersReportModelsReportDto.  # noqa: E501
        :type: str
        """

        self._entity_item_id = entity_item_id

    @property
    def report_id(self):
        """Gets the report_id of this DataQualityApiControllersReportModelsReportDto.  # noqa: E501


        :return: The report_id of this DataQualityApiControllersReportModelsReportDto.  # noqa: E501
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this DataQualityApiControllersReportModelsReportDto.


        :param report_id: The report_id of this DataQualityApiControllersReportModelsReportDto.  # noqa: E501
        :type: str
        """

        self._report_id = report_id

    @property
    def _date(self):
        """Gets the _date of this DataQualityApiControllersReportModelsReportDto.  # noqa: E501


        :return: The _date of this DataQualityApiControllersReportModelsReportDto.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DataQualityApiControllersReportModelsReportDto.


        :param _date: The _date of this DataQualityApiControllersReportModelsReportDto.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataQualityApiControllersReportModelsReportDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataQualityApiControllersReportModelsReportDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
