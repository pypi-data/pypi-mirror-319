# coding: utf-8

"""
    Cudo Compute service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from src.cudo_compute.configuration import Configuration


class V1billingaccountsbillingAccountIdBillingAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billing_threshold': 'Decimal',
        'create_by': 'str',
        'create_time': 'datetime',
        'demand_enabled': 'bool',
        'display_name': 'str',
        'invoice_time': 'datetime',
        'monthly_spend': 'str',
        'stripe_ref': 'str',
        'supply_enabled': 'bool',
        'tax_ids': 'list[TaxId]'
    }

    attribute_map = {
        'billing_threshold': 'billingThreshold',
        'create_by': 'createBy',
        'create_time': 'createTime',
        'demand_enabled': 'demandEnabled',
        'display_name': 'displayName',
        'invoice_time': 'invoiceTime',
        'monthly_spend': 'monthlySpend',
        'stripe_ref': 'stripeRef',
        'supply_enabled': 'supplyEnabled',
        'tax_ids': 'taxIds'
    }

    def __init__(self, billing_threshold=None, create_by=None, create_time=None, demand_enabled=None, display_name=None, invoice_time=None, monthly_spend=None, stripe_ref=None, supply_enabled=None, tax_ids=None, _configuration=None):  # noqa: E501
        """V1billingaccountsbillingAccountIdBillingAccount - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._billing_threshold = None
        self._create_by = None
        self._create_time = None
        self._demand_enabled = None
        self._display_name = None
        self._invoice_time = None
        self._monthly_spend = None
        self._stripe_ref = None
        self._supply_enabled = None
        self._tax_ids = None
        self.discriminator = None

        if billing_threshold is not None:
            self.billing_threshold = billing_threshold
        if create_by is not None:
            self.create_by = create_by
        if create_time is not None:
            self.create_time = create_time
        if demand_enabled is not None:
            self.demand_enabled = demand_enabled
        if display_name is not None:
            self.display_name = display_name
        if invoice_time is not None:
            self.invoice_time = invoice_time
        if monthly_spend is not None:
            self.monthly_spend = monthly_spend
        if stripe_ref is not None:
            self.stripe_ref = stripe_ref
        if supply_enabled is not None:
            self.supply_enabled = supply_enabled
        if tax_ids is not None:
            self.tax_ids = tax_ids

    @property
    def billing_threshold(self):
        """Gets the billing_threshold of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501


        :return: The billing_threshold of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501
        :rtype: Decimal
        """
        return self._billing_threshold

    @billing_threshold.setter
    def billing_threshold(self, billing_threshold):
        """Sets the billing_threshold of this V1billingaccountsbillingAccountIdBillingAccount.


        :param billing_threshold: The billing_threshold of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501
        :type: Decimal
        """

        self._billing_threshold = billing_threshold

    @property
    def create_by(self):
        """Gets the create_by of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501


        :return: The create_by of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501
        :rtype: str
        """
        return self._create_by

    @create_by.setter
    def create_by(self, create_by):
        """Sets the create_by of this V1billingaccountsbillingAccountIdBillingAccount.


        :param create_by: The create_by of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501
        :type: str
        """

        self._create_by = create_by

    @property
    def create_time(self):
        """Gets the create_time of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501


        :return: The create_time of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this V1billingaccountsbillingAccountIdBillingAccount.


        :param create_time: The create_time of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def demand_enabled(self):
        """Gets the demand_enabled of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501


        :return: The demand_enabled of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501
        :rtype: bool
        """
        return self._demand_enabled

    @demand_enabled.setter
    def demand_enabled(self, demand_enabled):
        """Sets the demand_enabled of this V1billingaccountsbillingAccountIdBillingAccount.


        :param demand_enabled: The demand_enabled of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501
        :type: bool
        """

        self._demand_enabled = demand_enabled

    @property
    def display_name(self):
        """Gets the display_name of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501


        :return: The display_name of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this V1billingaccountsbillingAccountIdBillingAccount.


        :param display_name: The display_name of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def invoice_time(self):
        """Gets the invoice_time of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501


        :return: The invoice_time of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._invoice_time

    @invoice_time.setter
    def invoice_time(self, invoice_time):
        """Sets the invoice_time of this V1billingaccountsbillingAccountIdBillingAccount.


        :param invoice_time: The invoice_time of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501
        :type: datetime
        """

        self._invoice_time = invoice_time

    @property
    def monthly_spend(self):
        """Gets the monthly_spend of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501


        :return: The monthly_spend of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501
        :rtype: str
        """
        return self._monthly_spend

    @monthly_spend.setter
    def monthly_spend(self, monthly_spend):
        """Sets the monthly_spend of this V1billingaccountsbillingAccountIdBillingAccount.


        :param monthly_spend: The monthly_spend of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501
        :type: str
        """

        self._monthly_spend = monthly_spend

    @property
    def stripe_ref(self):
        """Gets the stripe_ref of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501


        :return: The stripe_ref of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501
        :rtype: str
        """
        return self._stripe_ref

    @stripe_ref.setter
    def stripe_ref(self, stripe_ref):
        """Sets the stripe_ref of this V1billingaccountsbillingAccountIdBillingAccount.


        :param stripe_ref: The stripe_ref of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501
        :type: str
        """

        self._stripe_ref = stripe_ref

    @property
    def supply_enabled(self):
        """Gets the supply_enabled of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501


        :return: The supply_enabled of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501
        :rtype: bool
        """
        return self._supply_enabled

    @supply_enabled.setter
    def supply_enabled(self, supply_enabled):
        """Sets the supply_enabled of this V1billingaccountsbillingAccountIdBillingAccount.


        :param supply_enabled: The supply_enabled of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501
        :type: bool
        """

        self._supply_enabled = supply_enabled

    @property
    def tax_ids(self):
        """Gets the tax_ids of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501


        :return: The tax_ids of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501
        :rtype: list[TaxId]
        """
        return self._tax_ids

    @tax_ids.setter
    def tax_ids(self, tax_ids):
        """Sets the tax_ids of this V1billingaccountsbillingAccountIdBillingAccount.


        :param tax_ids: The tax_ids of this V1billingaccountsbillingAccountIdBillingAccount.  # noqa: E501
        :type: list[TaxId]
        """

        self._tax_ids = tax_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1billingaccountsbillingAccountIdBillingAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1billingaccountsbillingAccountIdBillingAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1billingaccountsbillingAccountIdBillingAccount):
            return True

        return self.to_dict() != other.to_dict()
