# coding: utf-8

"""
    Cudo Compute service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cudo_compute.configuration import Configuration


class ListVMMachineTypesResponseVMMachineType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_center_id': 'str',
        'machine_type': 'str',
        'cpu_model': 'str',
        'gpu_model': 'str',
        'gpu_model_id': 'str',
        'min_vcpu_per_memory_gib': 'float',
        'max_vcpu_per_memory_gib': 'float',
        'min_vcpu_per_gpu': 'float',
        'max_vcpu_per_gpu': 'float',
        'vcpu_price_hr': 'Decimal',
        'memory_gib_price_hr': 'Decimal',
        'gpu_price_hr': 'Decimal',
        'min_storage_gib_price_hr': 'Decimal',
        'ipv4_price_hr': 'Decimal',
        'renewable_energy': 'bool',
        'max_vcpu_free': 'int',
        'total_vcpu_free': 'int',
        'max_memory_gib_free': 'int',
        'total_memory_gib_free': 'int',
        'max_gpu_free': 'int',
        'total_gpu_free': 'int',
        'max_storage_gib_free': 'int',
        'total_storage_gib_free': 'int',
        'min_vcpu': 'float',
        'min_memory_gib': 'float',
        'prices': 'list[VMMachineTypeMachineTypePrice]'
    }

    attribute_map = {
        'data_center_id': 'dataCenterId',
        'machine_type': 'machineType',
        'cpu_model': 'cpuModel',
        'gpu_model': 'gpuModel',
        'gpu_model_id': 'gpuModelId',
        'min_vcpu_per_memory_gib': 'minVcpuPerMemoryGib',
        'max_vcpu_per_memory_gib': 'maxVcpuPerMemoryGib',
        'min_vcpu_per_gpu': 'minVcpuPerGpu',
        'max_vcpu_per_gpu': 'maxVcpuPerGpu',
        'vcpu_price_hr': 'vcpuPriceHr',
        'memory_gib_price_hr': 'memoryGibPriceHr',
        'gpu_price_hr': 'gpuPriceHr',
        'min_storage_gib_price_hr': 'minStorageGibPriceHr',
        'ipv4_price_hr': 'ipv4PriceHr',
        'renewable_energy': 'renewableEnergy',
        'max_vcpu_free': 'maxVcpuFree',
        'total_vcpu_free': 'totalVcpuFree',
        'max_memory_gib_free': 'maxMemoryGibFree',
        'total_memory_gib_free': 'totalMemoryGibFree',
        'max_gpu_free': 'maxGpuFree',
        'total_gpu_free': 'totalGpuFree',
        'max_storage_gib_free': 'maxStorageGibFree',
        'total_storage_gib_free': 'totalStorageGibFree',
        'min_vcpu': 'minVcpu',
        'min_memory_gib': 'minMemoryGib',
        'prices': 'prices'
    }

    def __init__(self, data_center_id=None, machine_type=None, cpu_model=None, gpu_model=None, gpu_model_id=None, min_vcpu_per_memory_gib=None, max_vcpu_per_memory_gib=None, min_vcpu_per_gpu=None, max_vcpu_per_gpu=None, vcpu_price_hr=None, memory_gib_price_hr=None, gpu_price_hr=None, min_storage_gib_price_hr=None, ipv4_price_hr=None, renewable_energy=None, max_vcpu_free=None, total_vcpu_free=None, max_memory_gib_free=None, total_memory_gib_free=None, max_gpu_free=None, total_gpu_free=None, max_storage_gib_free=None, total_storage_gib_free=None, min_vcpu=None, min_memory_gib=None, prices=None, _configuration=None):  # noqa: E501
        """ListVMMachineTypesResponseVMMachineType - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._data_center_id = None
        self._machine_type = None
        self._cpu_model = None
        self._gpu_model = None
        self._gpu_model_id = None
        self._min_vcpu_per_memory_gib = None
        self._max_vcpu_per_memory_gib = None
        self._min_vcpu_per_gpu = None
        self._max_vcpu_per_gpu = None
        self._vcpu_price_hr = None
        self._memory_gib_price_hr = None
        self._gpu_price_hr = None
        self._min_storage_gib_price_hr = None
        self._ipv4_price_hr = None
        self._renewable_energy = None
        self._max_vcpu_free = None
        self._total_vcpu_free = None
        self._max_memory_gib_free = None
        self._total_memory_gib_free = None
        self._max_gpu_free = None
        self._total_gpu_free = None
        self._max_storage_gib_free = None
        self._total_storage_gib_free = None
        self._min_vcpu = None
        self._min_memory_gib = None
        self._prices = None
        self.discriminator = None

        self.data_center_id = data_center_id
        self.machine_type = machine_type
        self.cpu_model = cpu_model
        self.gpu_model = gpu_model
        self.gpu_model_id = gpu_model_id
        self.min_vcpu_per_memory_gib = min_vcpu_per_memory_gib
        self.max_vcpu_per_memory_gib = max_vcpu_per_memory_gib
        self.min_vcpu_per_gpu = min_vcpu_per_gpu
        self.max_vcpu_per_gpu = max_vcpu_per_gpu
        self.vcpu_price_hr = vcpu_price_hr
        self.memory_gib_price_hr = memory_gib_price_hr
        self.gpu_price_hr = gpu_price_hr
        self.min_storage_gib_price_hr = min_storage_gib_price_hr
        self.ipv4_price_hr = ipv4_price_hr
        self.renewable_energy = renewable_energy
        self.max_vcpu_free = max_vcpu_free
        self.total_vcpu_free = total_vcpu_free
        self.max_memory_gib_free = max_memory_gib_free
        self.total_memory_gib_free = total_memory_gib_free
        self.max_gpu_free = max_gpu_free
        self.total_gpu_free = total_gpu_free
        self.max_storage_gib_free = max_storage_gib_free
        self.total_storage_gib_free = total_storage_gib_free
        self.min_vcpu = min_vcpu
        self.min_memory_gib = min_memory_gib
        self.prices = prices

    @property
    def data_center_id(self):
        """Gets the data_center_id of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The data_center_id of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: str
        """
        return self._data_center_id

    @data_center_id.setter
    def data_center_id(self, data_center_id):
        """Sets the data_center_id of this ListVMMachineTypesResponseVMMachineType.


        :param data_center_id: The data_center_id of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and data_center_id is None:
            raise ValueError("Invalid value for `data_center_id`, must not be `None`")  # noqa: E501

        self._data_center_id = data_center_id

    @property
    def machine_type(self):
        """Gets the machine_type of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The machine_type of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this ListVMMachineTypesResponseVMMachineType.


        :param machine_type: The machine_type of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and machine_type is None:
            raise ValueError("Invalid value for `machine_type`, must not be `None`")  # noqa: E501

        self._machine_type = machine_type

    @property
    def cpu_model(self):
        """Gets the cpu_model of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The cpu_model of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: str
        """
        return self._cpu_model

    @cpu_model.setter
    def cpu_model(self, cpu_model):
        """Sets the cpu_model of this ListVMMachineTypesResponseVMMachineType.


        :param cpu_model: The cpu_model of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and cpu_model is None:
            raise ValueError("Invalid value for `cpu_model`, must not be `None`")  # noqa: E501

        self._cpu_model = cpu_model

    @property
    def gpu_model(self):
        """Gets the gpu_model of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The gpu_model of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: str
        """
        return self._gpu_model

    @gpu_model.setter
    def gpu_model(self, gpu_model):
        """Sets the gpu_model of this ListVMMachineTypesResponseVMMachineType.


        :param gpu_model: The gpu_model of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and gpu_model is None:
            raise ValueError("Invalid value for `gpu_model`, must not be `None`")  # noqa: E501

        self._gpu_model = gpu_model

    @property
    def gpu_model_id(self):
        """Gets the gpu_model_id of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The gpu_model_id of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: str
        """
        return self._gpu_model_id

    @gpu_model_id.setter
    def gpu_model_id(self, gpu_model_id):
        """Sets the gpu_model_id of this ListVMMachineTypesResponseVMMachineType.


        :param gpu_model_id: The gpu_model_id of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and gpu_model_id is None:
            raise ValueError("Invalid value for `gpu_model_id`, must not be `None`")  # noqa: E501

        self._gpu_model_id = gpu_model_id

    @property
    def min_vcpu_per_memory_gib(self):
        """Gets the min_vcpu_per_memory_gib of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The min_vcpu_per_memory_gib of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: float
        """
        return self._min_vcpu_per_memory_gib

    @min_vcpu_per_memory_gib.setter
    def min_vcpu_per_memory_gib(self, min_vcpu_per_memory_gib):
        """Sets the min_vcpu_per_memory_gib of this ListVMMachineTypesResponseVMMachineType.


        :param min_vcpu_per_memory_gib: The min_vcpu_per_memory_gib of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and min_vcpu_per_memory_gib is None:
            raise ValueError("Invalid value for `min_vcpu_per_memory_gib`, must not be `None`")  # noqa: E501

        self._min_vcpu_per_memory_gib = min_vcpu_per_memory_gib

    @property
    def max_vcpu_per_memory_gib(self):
        """Gets the max_vcpu_per_memory_gib of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The max_vcpu_per_memory_gib of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: float
        """
        return self._max_vcpu_per_memory_gib

    @max_vcpu_per_memory_gib.setter
    def max_vcpu_per_memory_gib(self, max_vcpu_per_memory_gib):
        """Sets the max_vcpu_per_memory_gib of this ListVMMachineTypesResponseVMMachineType.


        :param max_vcpu_per_memory_gib: The max_vcpu_per_memory_gib of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and max_vcpu_per_memory_gib is None:
            raise ValueError("Invalid value for `max_vcpu_per_memory_gib`, must not be `None`")  # noqa: E501

        self._max_vcpu_per_memory_gib = max_vcpu_per_memory_gib

    @property
    def min_vcpu_per_gpu(self):
        """Gets the min_vcpu_per_gpu of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The min_vcpu_per_gpu of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: float
        """
        return self._min_vcpu_per_gpu

    @min_vcpu_per_gpu.setter
    def min_vcpu_per_gpu(self, min_vcpu_per_gpu):
        """Sets the min_vcpu_per_gpu of this ListVMMachineTypesResponseVMMachineType.


        :param min_vcpu_per_gpu: The min_vcpu_per_gpu of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and min_vcpu_per_gpu is None:
            raise ValueError("Invalid value for `min_vcpu_per_gpu`, must not be `None`")  # noqa: E501

        self._min_vcpu_per_gpu = min_vcpu_per_gpu

    @property
    def max_vcpu_per_gpu(self):
        """Gets the max_vcpu_per_gpu of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The max_vcpu_per_gpu of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: float
        """
        return self._max_vcpu_per_gpu

    @max_vcpu_per_gpu.setter
    def max_vcpu_per_gpu(self, max_vcpu_per_gpu):
        """Sets the max_vcpu_per_gpu of this ListVMMachineTypesResponseVMMachineType.


        :param max_vcpu_per_gpu: The max_vcpu_per_gpu of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and max_vcpu_per_gpu is None:
            raise ValueError("Invalid value for `max_vcpu_per_gpu`, must not be `None`")  # noqa: E501

        self._max_vcpu_per_gpu = max_vcpu_per_gpu

    @property
    def vcpu_price_hr(self):
        """Gets the vcpu_price_hr of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The vcpu_price_hr of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: Decimal
        """
        return self._vcpu_price_hr

    @vcpu_price_hr.setter
    def vcpu_price_hr(self, vcpu_price_hr):
        """Sets the vcpu_price_hr of this ListVMMachineTypesResponseVMMachineType.


        :param vcpu_price_hr: The vcpu_price_hr of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: Decimal
        """
        if self._configuration.client_side_validation and vcpu_price_hr is None:
            raise ValueError("Invalid value for `vcpu_price_hr`, must not be `None`")  # noqa: E501

        self._vcpu_price_hr = vcpu_price_hr

    @property
    def memory_gib_price_hr(self):
        """Gets the memory_gib_price_hr of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The memory_gib_price_hr of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: Decimal
        """
        return self._memory_gib_price_hr

    @memory_gib_price_hr.setter
    def memory_gib_price_hr(self, memory_gib_price_hr):
        """Sets the memory_gib_price_hr of this ListVMMachineTypesResponseVMMachineType.


        :param memory_gib_price_hr: The memory_gib_price_hr of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: Decimal
        """
        if self._configuration.client_side_validation and memory_gib_price_hr is None:
            raise ValueError("Invalid value for `memory_gib_price_hr`, must not be `None`")  # noqa: E501

        self._memory_gib_price_hr = memory_gib_price_hr

    @property
    def gpu_price_hr(self):
        """Gets the gpu_price_hr of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The gpu_price_hr of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: Decimal
        """
        return self._gpu_price_hr

    @gpu_price_hr.setter
    def gpu_price_hr(self, gpu_price_hr):
        """Sets the gpu_price_hr of this ListVMMachineTypesResponseVMMachineType.


        :param gpu_price_hr: The gpu_price_hr of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: Decimal
        """
        if self._configuration.client_side_validation and gpu_price_hr is None:
            raise ValueError("Invalid value for `gpu_price_hr`, must not be `None`")  # noqa: E501

        self._gpu_price_hr = gpu_price_hr

    @property
    def min_storage_gib_price_hr(self):
        """Gets the min_storage_gib_price_hr of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The min_storage_gib_price_hr of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: Decimal
        """
        return self._min_storage_gib_price_hr

    @min_storage_gib_price_hr.setter
    def min_storage_gib_price_hr(self, min_storage_gib_price_hr):
        """Sets the min_storage_gib_price_hr of this ListVMMachineTypesResponseVMMachineType.


        :param min_storage_gib_price_hr: The min_storage_gib_price_hr of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: Decimal
        """
        if self._configuration.client_side_validation and min_storage_gib_price_hr is None:
            raise ValueError("Invalid value for `min_storage_gib_price_hr`, must not be `None`")  # noqa: E501

        self._min_storage_gib_price_hr = min_storage_gib_price_hr

    @property
    def ipv4_price_hr(self):
        """Gets the ipv4_price_hr of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The ipv4_price_hr of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: Decimal
        """
        return self._ipv4_price_hr

    @ipv4_price_hr.setter
    def ipv4_price_hr(self, ipv4_price_hr):
        """Sets the ipv4_price_hr of this ListVMMachineTypesResponseVMMachineType.


        :param ipv4_price_hr: The ipv4_price_hr of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: Decimal
        """
        if self._configuration.client_side_validation and ipv4_price_hr is None:
            raise ValueError("Invalid value for `ipv4_price_hr`, must not be `None`")  # noqa: E501

        self._ipv4_price_hr = ipv4_price_hr

    @property
    def renewable_energy(self):
        """Gets the renewable_energy of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The renewable_energy of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: bool
        """
        return self._renewable_energy

    @renewable_energy.setter
    def renewable_energy(self, renewable_energy):
        """Sets the renewable_energy of this ListVMMachineTypesResponseVMMachineType.


        :param renewable_energy: The renewable_energy of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and renewable_energy is None:
            raise ValueError("Invalid value for `renewable_energy`, must not be `None`")  # noqa: E501

        self._renewable_energy = renewable_energy

    @property
    def max_vcpu_free(self):
        """Gets the max_vcpu_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The max_vcpu_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: int
        """
        return self._max_vcpu_free

    @max_vcpu_free.setter
    def max_vcpu_free(self, max_vcpu_free):
        """Sets the max_vcpu_free of this ListVMMachineTypesResponseVMMachineType.


        :param max_vcpu_free: The max_vcpu_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and max_vcpu_free is None:
            raise ValueError("Invalid value for `max_vcpu_free`, must not be `None`")  # noqa: E501

        self._max_vcpu_free = max_vcpu_free

    @property
    def total_vcpu_free(self):
        """Gets the total_vcpu_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The total_vcpu_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: int
        """
        return self._total_vcpu_free

    @total_vcpu_free.setter
    def total_vcpu_free(self, total_vcpu_free):
        """Sets the total_vcpu_free of this ListVMMachineTypesResponseVMMachineType.


        :param total_vcpu_free: The total_vcpu_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and total_vcpu_free is None:
            raise ValueError("Invalid value for `total_vcpu_free`, must not be `None`")  # noqa: E501

        self._total_vcpu_free = total_vcpu_free

    @property
    def max_memory_gib_free(self):
        """Gets the max_memory_gib_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The max_memory_gib_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: int
        """
        return self._max_memory_gib_free

    @max_memory_gib_free.setter
    def max_memory_gib_free(self, max_memory_gib_free):
        """Sets the max_memory_gib_free of this ListVMMachineTypesResponseVMMachineType.


        :param max_memory_gib_free: The max_memory_gib_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and max_memory_gib_free is None:
            raise ValueError("Invalid value for `max_memory_gib_free`, must not be `None`")  # noqa: E501

        self._max_memory_gib_free = max_memory_gib_free

    @property
    def total_memory_gib_free(self):
        """Gets the total_memory_gib_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The total_memory_gib_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: int
        """
        return self._total_memory_gib_free

    @total_memory_gib_free.setter
    def total_memory_gib_free(self, total_memory_gib_free):
        """Sets the total_memory_gib_free of this ListVMMachineTypesResponseVMMachineType.


        :param total_memory_gib_free: The total_memory_gib_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and total_memory_gib_free is None:
            raise ValueError("Invalid value for `total_memory_gib_free`, must not be `None`")  # noqa: E501

        self._total_memory_gib_free = total_memory_gib_free

    @property
    def max_gpu_free(self):
        """Gets the max_gpu_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The max_gpu_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: int
        """
        return self._max_gpu_free

    @max_gpu_free.setter
    def max_gpu_free(self, max_gpu_free):
        """Sets the max_gpu_free of this ListVMMachineTypesResponseVMMachineType.


        :param max_gpu_free: The max_gpu_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and max_gpu_free is None:
            raise ValueError("Invalid value for `max_gpu_free`, must not be `None`")  # noqa: E501

        self._max_gpu_free = max_gpu_free

    @property
    def total_gpu_free(self):
        """Gets the total_gpu_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The total_gpu_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: int
        """
        return self._total_gpu_free

    @total_gpu_free.setter
    def total_gpu_free(self, total_gpu_free):
        """Sets the total_gpu_free of this ListVMMachineTypesResponseVMMachineType.


        :param total_gpu_free: The total_gpu_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and total_gpu_free is None:
            raise ValueError("Invalid value for `total_gpu_free`, must not be `None`")  # noqa: E501

        self._total_gpu_free = total_gpu_free

    @property
    def max_storage_gib_free(self):
        """Gets the max_storage_gib_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The max_storage_gib_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: int
        """
        return self._max_storage_gib_free

    @max_storage_gib_free.setter
    def max_storage_gib_free(self, max_storage_gib_free):
        """Sets the max_storage_gib_free of this ListVMMachineTypesResponseVMMachineType.


        :param max_storage_gib_free: The max_storage_gib_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and max_storage_gib_free is None:
            raise ValueError("Invalid value for `max_storage_gib_free`, must not be `None`")  # noqa: E501

        self._max_storage_gib_free = max_storage_gib_free

    @property
    def total_storage_gib_free(self):
        """Gets the total_storage_gib_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The total_storage_gib_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: int
        """
        return self._total_storage_gib_free

    @total_storage_gib_free.setter
    def total_storage_gib_free(self, total_storage_gib_free):
        """Sets the total_storage_gib_free of this ListVMMachineTypesResponseVMMachineType.


        :param total_storage_gib_free: The total_storage_gib_free of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and total_storage_gib_free is None:
            raise ValueError("Invalid value for `total_storage_gib_free`, must not be `None`")  # noqa: E501

        self._total_storage_gib_free = total_storage_gib_free

    @property
    def min_vcpu(self):
        """Gets the min_vcpu of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The min_vcpu of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: float
        """
        return self._min_vcpu

    @min_vcpu.setter
    def min_vcpu(self, min_vcpu):
        """Sets the min_vcpu of this ListVMMachineTypesResponseVMMachineType.


        :param min_vcpu: The min_vcpu of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and min_vcpu is None:
            raise ValueError("Invalid value for `min_vcpu`, must not be `None`")  # noqa: E501

        self._min_vcpu = min_vcpu

    @property
    def min_memory_gib(self):
        """Gets the min_memory_gib of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The min_memory_gib of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: float
        """
        return self._min_memory_gib

    @min_memory_gib.setter
    def min_memory_gib(self, min_memory_gib):
        """Sets the min_memory_gib of this ListVMMachineTypesResponseVMMachineType.


        :param min_memory_gib: The min_memory_gib of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and min_memory_gib is None:
            raise ValueError("Invalid value for `min_memory_gib`, must not be `None`")  # noqa: E501

        self._min_memory_gib = min_memory_gib

    @property
    def prices(self):
        """Gets the prices of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501


        :return: The prices of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :rtype: list[VMMachineTypeMachineTypePrice]
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this ListVMMachineTypesResponseVMMachineType.


        :param prices: The prices of this ListVMMachineTypesResponseVMMachineType.  # noqa: E501
        :type: list[VMMachineTypeMachineTypePrice]
        """
        if self._configuration.client_side_validation and prices is None:
            raise ValueError("Invalid value for `prices`, must not be `None`")  # noqa: E501

        self._prices = prices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListVMMachineTypesResponseVMMachineType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListVMMachineTypesResponseVMMachineType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListVMMachineTypesResponseVMMachineType):
            return True

        return self.to_dict() != other.to_dict()
