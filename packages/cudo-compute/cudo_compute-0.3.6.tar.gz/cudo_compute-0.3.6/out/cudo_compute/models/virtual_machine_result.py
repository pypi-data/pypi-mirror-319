# coding: utf-8

"""
    Cudo Compute service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cudo_compute.configuration import Configuration


class VirtualMachineResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'str',
        'id': 'str',
        'data_center_id': 'str',
        'gpu_model_id': 'str',
        'gpus': 'int',
        'vcpus': 'int',
        'memory_gib': 'int',
        'boot_disk_size_gib': 'int',
        'boot_disk_public_image_id': 'str',
        'boot_disk_private_image_id': 'str',
        'state': 'VmState',
        'create_time': 'datetime'
    }

    attribute_map = {
        'project_id': 'projectId',
        'id': 'id',
        'data_center_id': 'dataCenterId',
        'gpu_model_id': 'gpuModelId',
        'gpus': 'gpus',
        'vcpus': 'vcpus',
        'memory_gib': 'memoryGib',
        'boot_disk_size_gib': 'bootDiskSizeGib',
        'boot_disk_public_image_id': 'bootDiskPublicImageId',
        'boot_disk_private_image_id': 'bootDiskPrivateImageId',
        'state': 'state',
        'create_time': 'createTime'
    }

    def __init__(self, project_id=None, id=None, data_center_id=None, gpu_model_id=None, gpus=None, vcpus=None, memory_gib=None, boot_disk_size_gib=None, boot_disk_public_image_id=None, boot_disk_private_image_id=None, state=None, create_time=None, _configuration=None):  # noqa: E501
        """VirtualMachineResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._project_id = None
        self._id = None
        self._data_center_id = None
        self._gpu_model_id = None
        self._gpus = None
        self._vcpus = None
        self._memory_gib = None
        self._boot_disk_size_gib = None
        self._boot_disk_public_image_id = None
        self._boot_disk_private_image_id = None
        self._state = None
        self._create_time = None
        self.discriminator = None

        if project_id is not None:
            self.project_id = project_id
        if id is not None:
            self.id = id
        if data_center_id is not None:
            self.data_center_id = data_center_id
        if gpu_model_id is not None:
            self.gpu_model_id = gpu_model_id
        if gpus is not None:
            self.gpus = gpus
        if vcpus is not None:
            self.vcpus = vcpus
        if memory_gib is not None:
            self.memory_gib = memory_gib
        if boot_disk_size_gib is not None:
            self.boot_disk_size_gib = boot_disk_size_gib
        if boot_disk_public_image_id is not None:
            self.boot_disk_public_image_id = boot_disk_public_image_id
        if boot_disk_private_image_id is not None:
            self.boot_disk_private_image_id = boot_disk_private_image_id
        if state is not None:
            self.state = state
        if create_time is not None:
            self.create_time = create_time

    @property
    def project_id(self):
        """Gets the project_id of this VirtualMachineResult.  # noqa: E501


        :return: The project_id of this VirtualMachineResult.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this VirtualMachineResult.


        :param project_id: The project_id of this VirtualMachineResult.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def id(self):
        """Gets the id of this VirtualMachineResult.  # noqa: E501


        :return: The id of this VirtualMachineResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualMachineResult.


        :param id: The id of this VirtualMachineResult.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def data_center_id(self):
        """Gets the data_center_id of this VirtualMachineResult.  # noqa: E501


        :return: The data_center_id of this VirtualMachineResult.  # noqa: E501
        :rtype: str
        """
        return self._data_center_id

    @data_center_id.setter
    def data_center_id(self, data_center_id):
        """Sets the data_center_id of this VirtualMachineResult.


        :param data_center_id: The data_center_id of this VirtualMachineResult.  # noqa: E501
        :type: str
        """

        self._data_center_id = data_center_id

    @property
    def gpu_model_id(self):
        """Gets the gpu_model_id of this VirtualMachineResult.  # noqa: E501


        :return: The gpu_model_id of this VirtualMachineResult.  # noqa: E501
        :rtype: str
        """
        return self._gpu_model_id

    @gpu_model_id.setter
    def gpu_model_id(self, gpu_model_id):
        """Sets the gpu_model_id of this VirtualMachineResult.


        :param gpu_model_id: The gpu_model_id of this VirtualMachineResult.  # noqa: E501
        :type: str
        """

        self._gpu_model_id = gpu_model_id

    @property
    def gpus(self):
        """Gets the gpus of this VirtualMachineResult.  # noqa: E501


        :return: The gpus of this VirtualMachineResult.  # noqa: E501
        :rtype: int
        """
        return self._gpus

    @gpus.setter
    def gpus(self, gpus):
        """Sets the gpus of this VirtualMachineResult.


        :param gpus: The gpus of this VirtualMachineResult.  # noqa: E501
        :type: int
        """

        self._gpus = gpus

    @property
    def vcpus(self):
        """Gets the vcpus of this VirtualMachineResult.  # noqa: E501


        :return: The vcpus of this VirtualMachineResult.  # noqa: E501
        :rtype: int
        """
        return self._vcpus

    @vcpus.setter
    def vcpus(self, vcpus):
        """Sets the vcpus of this VirtualMachineResult.


        :param vcpus: The vcpus of this VirtualMachineResult.  # noqa: E501
        :type: int
        """

        self._vcpus = vcpus

    @property
    def memory_gib(self):
        """Gets the memory_gib of this VirtualMachineResult.  # noqa: E501


        :return: The memory_gib of this VirtualMachineResult.  # noqa: E501
        :rtype: int
        """
        return self._memory_gib

    @memory_gib.setter
    def memory_gib(self, memory_gib):
        """Sets the memory_gib of this VirtualMachineResult.


        :param memory_gib: The memory_gib of this VirtualMachineResult.  # noqa: E501
        :type: int
        """

        self._memory_gib = memory_gib

    @property
    def boot_disk_size_gib(self):
        """Gets the boot_disk_size_gib of this VirtualMachineResult.  # noqa: E501


        :return: The boot_disk_size_gib of this VirtualMachineResult.  # noqa: E501
        :rtype: int
        """
        return self._boot_disk_size_gib

    @boot_disk_size_gib.setter
    def boot_disk_size_gib(self, boot_disk_size_gib):
        """Sets the boot_disk_size_gib of this VirtualMachineResult.


        :param boot_disk_size_gib: The boot_disk_size_gib of this VirtualMachineResult.  # noqa: E501
        :type: int
        """

        self._boot_disk_size_gib = boot_disk_size_gib

    @property
    def boot_disk_public_image_id(self):
        """Gets the boot_disk_public_image_id of this VirtualMachineResult.  # noqa: E501


        :return: The boot_disk_public_image_id of this VirtualMachineResult.  # noqa: E501
        :rtype: str
        """
        return self._boot_disk_public_image_id

    @boot_disk_public_image_id.setter
    def boot_disk_public_image_id(self, boot_disk_public_image_id):
        """Sets the boot_disk_public_image_id of this VirtualMachineResult.


        :param boot_disk_public_image_id: The boot_disk_public_image_id of this VirtualMachineResult.  # noqa: E501
        :type: str
        """

        self._boot_disk_public_image_id = boot_disk_public_image_id

    @property
    def boot_disk_private_image_id(self):
        """Gets the boot_disk_private_image_id of this VirtualMachineResult.  # noqa: E501


        :return: The boot_disk_private_image_id of this VirtualMachineResult.  # noqa: E501
        :rtype: str
        """
        return self._boot_disk_private_image_id

    @boot_disk_private_image_id.setter
    def boot_disk_private_image_id(self, boot_disk_private_image_id):
        """Sets the boot_disk_private_image_id of this VirtualMachineResult.


        :param boot_disk_private_image_id: The boot_disk_private_image_id of this VirtualMachineResult.  # noqa: E501
        :type: str
        """

        self._boot_disk_private_image_id = boot_disk_private_image_id

    @property
    def state(self):
        """Gets the state of this VirtualMachineResult.  # noqa: E501


        :return: The state of this VirtualMachineResult.  # noqa: E501
        :rtype: VmState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VirtualMachineResult.


        :param state: The state of this VirtualMachineResult.  # noqa: E501
        :type: VmState
        """

        self._state = state

    @property
    def create_time(self):
        """Gets the create_time of this VirtualMachineResult.  # noqa: E501


        :return: The create_time of this VirtualMachineResult.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this VirtualMachineResult.


        :param create_time: The create_time of this VirtualMachineResult.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VirtualMachineResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualMachineResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VirtualMachineResult):
            return True

        return self.to_dict() != other.to_dict()
