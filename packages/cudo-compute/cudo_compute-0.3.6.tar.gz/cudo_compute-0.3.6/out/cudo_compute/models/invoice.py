# coding: utf-8

"""
    Cudo Compute service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cudo_compute.configuration import Configuration


class Invoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'amount_due': 'str',
        'amount_paid': 'str',
        'amount_remaining': 'str',
        'created': 'str',
        'description': 'str',
        'currency': 'str',
        'hosted_invoice_url': 'str',
        'status': 'str',
        'due_date': 'str',
        'paid_date': 'str',
        'billing_reason': 'str',
        'auto_advance': 'bool',
        'period_start': 'str',
        'period_end': 'str',
        'number': 'str',
        'subtotal_excluding_tax': 'str',
        'subtotal': 'str',
        'total_excluding_tax': 'str',
        'tax': 'str',
        'total': 'str'
    }

    attribute_map = {
        'id': 'id',
        'amount_due': 'amountDue',
        'amount_paid': 'amountPaid',
        'amount_remaining': 'amountRemaining',
        'created': 'created',
        'description': 'description',
        'currency': 'currency',
        'hosted_invoice_url': 'hostedInvoiceUrl',
        'status': 'status',
        'due_date': 'dueDate',
        'paid_date': 'paidDate',
        'billing_reason': 'billingReason',
        'auto_advance': 'autoAdvance',
        'period_start': 'periodStart',
        'period_end': 'periodEnd',
        'number': 'number',
        'subtotal_excluding_tax': 'subtotalExcludingTax',
        'subtotal': 'subtotal',
        'total_excluding_tax': 'totalExcludingTax',
        'tax': 'tax',
        'total': 'total'
    }

    def __init__(self, id=None, amount_due=None, amount_paid=None, amount_remaining=None, created=None, description=None, currency=None, hosted_invoice_url=None, status=None, due_date=None, paid_date=None, billing_reason=None, auto_advance=None, period_start=None, period_end=None, number=None, subtotal_excluding_tax=None, subtotal=None, total_excluding_tax=None, tax=None, total=None, _configuration=None):  # noqa: E501
        """Invoice - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._amount_due = None
        self._amount_paid = None
        self._amount_remaining = None
        self._created = None
        self._description = None
        self._currency = None
        self._hosted_invoice_url = None
        self._status = None
        self._due_date = None
        self._paid_date = None
        self._billing_reason = None
        self._auto_advance = None
        self._period_start = None
        self._period_end = None
        self._number = None
        self._subtotal_excluding_tax = None
        self._subtotal = None
        self._total_excluding_tax = None
        self._tax = None
        self._total = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if amount_due is not None:
            self.amount_due = amount_due
        if amount_paid is not None:
            self.amount_paid = amount_paid
        if amount_remaining is not None:
            self.amount_remaining = amount_remaining
        if created is not None:
            self.created = created
        if description is not None:
            self.description = description
        if currency is not None:
            self.currency = currency
        if hosted_invoice_url is not None:
            self.hosted_invoice_url = hosted_invoice_url
        if status is not None:
            self.status = status
        if due_date is not None:
            self.due_date = due_date
        if paid_date is not None:
            self.paid_date = paid_date
        if billing_reason is not None:
            self.billing_reason = billing_reason
        if auto_advance is not None:
            self.auto_advance = auto_advance
        if period_start is not None:
            self.period_start = period_start
        if period_end is not None:
            self.period_end = period_end
        if number is not None:
            self.number = number
        if subtotal_excluding_tax is not None:
            self.subtotal_excluding_tax = subtotal_excluding_tax
        if subtotal is not None:
            self.subtotal = subtotal
        if total_excluding_tax is not None:
            self.total_excluding_tax = total_excluding_tax
        if tax is not None:
            self.tax = tax
        if total is not None:
            self.total = total

    @property
    def id(self):
        """Gets the id of this Invoice.  # noqa: E501


        :return: The id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Invoice.


        :param id: The id of this Invoice.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def amount_due(self):
        """Gets the amount_due of this Invoice.  # noqa: E501


        :return: The amount_due of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._amount_due

    @amount_due.setter
    def amount_due(self, amount_due):
        """Sets the amount_due of this Invoice.


        :param amount_due: The amount_due of this Invoice.  # noqa: E501
        :type: str
        """

        self._amount_due = amount_due

    @property
    def amount_paid(self):
        """Gets the amount_paid of this Invoice.  # noqa: E501


        :return: The amount_paid of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._amount_paid

    @amount_paid.setter
    def amount_paid(self, amount_paid):
        """Sets the amount_paid of this Invoice.


        :param amount_paid: The amount_paid of this Invoice.  # noqa: E501
        :type: str
        """

        self._amount_paid = amount_paid

    @property
    def amount_remaining(self):
        """Gets the amount_remaining of this Invoice.  # noqa: E501


        :return: The amount_remaining of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._amount_remaining

    @amount_remaining.setter
    def amount_remaining(self, amount_remaining):
        """Sets the amount_remaining of this Invoice.


        :param amount_remaining: The amount_remaining of this Invoice.  # noqa: E501
        :type: str
        """

        self._amount_remaining = amount_remaining

    @property
    def created(self):
        """Gets the created of this Invoice.  # noqa: E501


        :return: The created of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Invoice.


        :param created: The created of this Invoice.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this Invoice.  # noqa: E501


        :return: The description of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Invoice.


        :param description: The description of this Invoice.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def currency(self):
        """Gets the currency of this Invoice.  # noqa: E501


        :return: The currency of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Invoice.


        :param currency: The currency of this Invoice.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def hosted_invoice_url(self):
        """Gets the hosted_invoice_url of this Invoice.  # noqa: E501


        :return: The hosted_invoice_url of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._hosted_invoice_url

    @hosted_invoice_url.setter
    def hosted_invoice_url(self, hosted_invoice_url):
        """Sets the hosted_invoice_url of this Invoice.


        :param hosted_invoice_url: The hosted_invoice_url of this Invoice.  # noqa: E501
        :type: str
        """

        self._hosted_invoice_url = hosted_invoice_url

    @property
    def status(self):
        """Gets the status of this Invoice.  # noqa: E501


        :return: The status of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Invoice.


        :param status: The status of this Invoice.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def due_date(self):
        """Gets the due_date of this Invoice.  # noqa: E501


        :return: The due_date of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Invoice.


        :param due_date: The due_date of this Invoice.  # noqa: E501
        :type: str
        """

        self._due_date = due_date

    @property
    def paid_date(self):
        """Gets the paid_date of this Invoice.  # noqa: E501


        :return: The paid_date of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._paid_date

    @paid_date.setter
    def paid_date(self, paid_date):
        """Sets the paid_date of this Invoice.


        :param paid_date: The paid_date of this Invoice.  # noqa: E501
        :type: str
        """

        self._paid_date = paid_date

    @property
    def billing_reason(self):
        """Gets the billing_reason of this Invoice.  # noqa: E501


        :return: The billing_reason of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._billing_reason

    @billing_reason.setter
    def billing_reason(self, billing_reason):
        """Sets the billing_reason of this Invoice.


        :param billing_reason: The billing_reason of this Invoice.  # noqa: E501
        :type: str
        """

        self._billing_reason = billing_reason

    @property
    def auto_advance(self):
        """Gets the auto_advance of this Invoice.  # noqa: E501


        :return: The auto_advance of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._auto_advance

    @auto_advance.setter
    def auto_advance(self, auto_advance):
        """Sets the auto_advance of this Invoice.


        :param auto_advance: The auto_advance of this Invoice.  # noqa: E501
        :type: bool
        """

        self._auto_advance = auto_advance

    @property
    def period_start(self):
        """Gets the period_start of this Invoice.  # noqa: E501


        :return: The period_start of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this Invoice.


        :param period_start: The period_start of this Invoice.  # noqa: E501
        :type: str
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """Gets the period_end of this Invoice.  # noqa: E501


        :return: The period_end of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this Invoice.


        :param period_end: The period_end of this Invoice.  # noqa: E501
        :type: str
        """

        self._period_end = period_end

    @property
    def number(self):
        """Gets the number of this Invoice.  # noqa: E501


        :return: The number of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Invoice.


        :param number: The number of this Invoice.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def subtotal_excluding_tax(self):
        """Gets the subtotal_excluding_tax of this Invoice.  # noqa: E501


        :return: The subtotal_excluding_tax of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._subtotal_excluding_tax

    @subtotal_excluding_tax.setter
    def subtotal_excluding_tax(self, subtotal_excluding_tax):
        """Sets the subtotal_excluding_tax of this Invoice.


        :param subtotal_excluding_tax: The subtotal_excluding_tax of this Invoice.  # noqa: E501
        :type: str
        """

        self._subtotal_excluding_tax = subtotal_excluding_tax

    @property
    def subtotal(self):
        """Gets the subtotal of this Invoice.  # noqa: E501


        :return: The subtotal of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this Invoice.


        :param subtotal: The subtotal of this Invoice.  # noqa: E501
        :type: str
        """

        self._subtotal = subtotal

    @property
    def total_excluding_tax(self):
        """Gets the total_excluding_tax of this Invoice.  # noqa: E501


        :return: The total_excluding_tax of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._total_excluding_tax

    @total_excluding_tax.setter
    def total_excluding_tax(self, total_excluding_tax):
        """Sets the total_excluding_tax of this Invoice.


        :param total_excluding_tax: The total_excluding_tax of this Invoice.  # noqa: E501
        :type: str
        """

        self._total_excluding_tax = total_excluding_tax

    @property
    def tax(self):
        """Gets the tax of this Invoice.  # noqa: E501


        :return: The tax of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this Invoice.


        :param tax: The tax of this Invoice.  # noqa: E501
        :type: str
        """

        self._tax = tax

    @property
    def total(self):
        """Gets the total of this Invoice.  # noqa: E501


        :return: The total of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Invoice.


        :param total: The total of this Invoice.  # noqa: E501
        :type: str
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Invoice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invoice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Invoice):
            return True

        return self.to_dict() != other.to_dict()
