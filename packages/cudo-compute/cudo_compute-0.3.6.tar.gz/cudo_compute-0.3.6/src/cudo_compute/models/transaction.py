# coding: utf-8

"""
    Cudo Compute service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cudo_compute.configuration import Configuration


class Transaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'amount': 'Decimal',
        'description': 'str',
        'create_time': 'datetime',
        'status': 'str',
        'succeeded': 'bool',
        'latest_charge': 'Charge',
        'last_payment_error': 'LastPaymentError'
    }

    attribute_map = {
        'id': 'id',
        'amount': 'amount',
        'description': 'description',
        'create_time': 'createTime',
        'status': 'status',
        'succeeded': 'succeeded',
        'latest_charge': 'latestCharge',
        'last_payment_error': 'lastPaymentError'
    }

    def __init__(self, id=None, amount=None, description=None, create_time=None, status=None, succeeded=None, latest_charge=None, last_payment_error=None, _configuration=None):  # noqa: E501
        """Transaction - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._amount = None
        self._description = None
        self._create_time = None
        self._status = None
        self._succeeded = None
        self._latest_charge = None
        self._last_payment_error = None
        self.discriminator = None

        self.id = id
        self.amount = amount
        self.description = description
        self.create_time = create_time
        self.status = status
        self.succeeded = succeeded
        self.latest_charge = latest_charge
        self.last_payment_error = last_payment_error

    @property
    def id(self):
        """Gets the id of this Transaction.  # noqa: E501


        :return: The id of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction.


        :param id: The id of this Transaction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def amount(self):
        """Gets the amount of this Transaction.  # noqa: E501


        :return: The amount of this Transaction.  # noqa: E501
        :rtype: Decimal
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transaction.


        :param amount: The amount of this Transaction.  # noqa: E501
        :type: Decimal
        """
        if self._configuration.client_side_validation and amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def description(self):
        """Gets the description of this Transaction.  # noqa: E501


        :return: The description of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Transaction.


        :param description: The description of this Transaction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def create_time(self):
        """Gets the create_time of this Transaction.  # noqa: E501


        :return: The create_time of this Transaction.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Transaction.


        :param create_time: The create_time of this Transaction.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    @property
    def status(self):
        """Gets the status of this Transaction.  # noqa: E501


        :return: The status of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Transaction.


        :param status: The status of this Transaction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def succeeded(self):
        """Gets the succeeded of this Transaction.  # noqa: E501


        :return: The succeeded of this Transaction.  # noqa: E501
        :rtype: bool
        """
        return self._succeeded

    @succeeded.setter
    def succeeded(self, succeeded):
        """Sets the succeeded of this Transaction.


        :param succeeded: The succeeded of this Transaction.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and succeeded is None:
            raise ValueError("Invalid value for `succeeded`, must not be `None`")  # noqa: E501

        self._succeeded = succeeded

    @property
    def latest_charge(self):
        """Gets the latest_charge of this Transaction.  # noqa: E501


        :return: The latest_charge of this Transaction.  # noqa: E501
        :rtype: Charge
        """
        return self._latest_charge

    @latest_charge.setter
    def latest_charge(self, latest_charge):
        """Sets the latest_charge of this Transaction.


        :param latest_charge: The latest_charge of this Transaction.  # noqa: E501
        :type: Charge
        """
        if self._configuration.client_side_validation and latest_charge is None:
            raise ValueError("Invalid value for `latest_charge`, must not be `None`")  # noqa: E501

        self._latest_charge = latest_charge

    @property
    def last_payment_error(self):
        """Gets the last_payment_error of this Transaction.  # noqa: E501


        :return: The last_payment_error of this Transaction.  # noqa: E501
        :rtype: LastPaymentError
        """
        return self._last_payment_error

    @last_payment_error.setter
    def last_payment_error(self, last_payment_error):
        """Sets the last_payment_error of this Transaction.


        :param last_payment_error: The last_payment_error of this Transaction.  # noqa: E501
        :type: LastPaymentError
        """
        if self._configuration.client_side_validation and last_payment_error is None:
            raise ValueError("Invalid value for `last_payment_error`, must not be `None`")  # noqa: E501

        self._last_payment_error = last_payment_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Transaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transaction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Transaction):
            return True

        return self.to_dict() != other.to_dict()
