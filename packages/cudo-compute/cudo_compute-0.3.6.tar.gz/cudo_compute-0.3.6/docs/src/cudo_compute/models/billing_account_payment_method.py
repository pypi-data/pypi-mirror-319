# coding: utf-8

"""
    Cudo Compute service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from src.cudo_compute.configuration import Configuration


class BillingAccountPaymentMethod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card': 'PaymentMethodCard',
        'id': 'str',
        'is_default': 'bool',
        'paypal': 'PaymentMethodPaypal',
        'type': 'str'
    }

    attribute_map = {
        'card': 'card',
        'id': 'id',
        'is_default': 'isDefault',
        'paypal': 'paypal',
        'type': 'type'
    }

    def __init__(self, card=None, id=None, is_default=None, paypal=None, type=None, _configuration=None):  # noqa: E501
        """BillingAccountPaymentMethod - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._card = None
        self._id = None
        self._is_default = None
        self._paypal = None
        self._type = None
        self.discriminator = None

        if card is not None:
            self.card = card
        if id is not None:
            self.id = id
        if is_default is not None:
            self.is_default = is_default
        if paypal is not None:
            self.paypal = paypal
        if type is not None:
            self.type = type

    @property
    def card(self):
        """Gets the card of this BillingAccountPaymentMethod.  # noqa: E501


        :return: The card of this BillingAccountPaymentMethod.  # noqa: E501
        :rtype: PaymentMethodCard
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this BillingAccountPaymentMethod.


        :param card: The card of this BillingAccountPaymentMethod.  # noqa: E501
        :type: PaymentMethodCard
        """

        self._card = card

    @property
    def id(self):
        """Gets the id of this BillingAccountPaymentMethod.  # noqa: E501


        :return: The id of this BillingAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BillingAccountPaymentMethod.


        :param id: The id of this BillingAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this BillingAccountPaymentMethod.  # noqa: E501


        :return: The is_default of this BillingAccountPaymentMethod.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this BillingAccountPaymentMethod.


        :param is_default: The is_default of this BillingAccountPaymentMethod.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def paypal(self):
        """Gets the paypal of this BillingAccountPaymentMethod.  # noqa: E501


        :return: The paypal of this BillingAccountPaymentMethod.  # noqa: E501
        :rtype: PaymentMethodPaypal
        """
        return self._paypal

    @paypal.setter
    def paypal(self, paypal):
        """Sets the paypal of this BillingAccountPaymentMethod.


        :param paypal: The paypal of this BillingAccountPaymentMethod.  # noqa: E501
        :type: PaymentMethodPaypal
        """

        self._paypal = paypal

    @property
    def type(self):
        """Gets the type of this BillingAccountPaymentMethod.  # noqa: E501


        :return: The type of this BillingAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BillingAccountPaymentMethod.


        :param type: The type of this BillingAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BillingAccountPaymentMethod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingAccountPaymentMethod):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BillingAccountPaymentMethod):
            return True

        return self.to_dict() != other.to_dict()
