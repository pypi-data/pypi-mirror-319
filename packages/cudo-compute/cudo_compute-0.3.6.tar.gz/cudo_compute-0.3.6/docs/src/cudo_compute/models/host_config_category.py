# coding: utf-8

"""
    Cudo Compute service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from src.cudo_compute.configuration import Configuration


class HostConfigCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count_vm_available': 'int',
        'cpu_model': 'str',
        'data_center_id': 'str',
        'gpu_model': 'str',
        'gpu_price_hr': 'Decimal',
        'id': 'str',
        'ipv4_price_hr': 'Decimal',
        'machine_type': 'str',
        'memory_gib_price_hr': 'Decimal',
        'renewable_energy': 'bool',
        'storage_gib_price_hr': 'Decimal',
        'total_gpu_price_hr': 'Decimal',
        'total_memory_price_hr': 'Decimal',
        'total_price_hr': 'Decimal',
        'total_storage_price_hr': 'Decimal',
        'total_vcpu_price_hr': 'Decimal',
        'vcpu_price_hr': 'Decimal'
    }

    attribute_map = {
        'count_vm_available': 'countVmAvailable',
        'cpu_model': 'cpuModel',
        'data_center_id': 'dataCenterId',
        'gpu_model': 'gpuModel',
        'gpu_price_hr': 'gpuPriceHr',
        'id': 'id',
        'ipv4_price_hr': 'ipv4PriceHr',
        'machine_type': 'machineType',
        'memory_gib_price_hr': 'memoryGibPriceHr',
        'renewable_energy': 'renewableEnergy',
        'storage_gib_price_hr': 'storageGibPriceHr',
        'total_gpu_price_hr': 'totalGpuPriceHr',
        'total_memory_price_hr': 'totalMemoryPriceHr',
        'total_price_hr': 'totalPriceHr',
        'total_storage_price_hr': 'totalStoragePriceHr',
        'total_vcpu_price_hr': 'totalVcpuPriceHr',
        'vcpu_price_hr': 'vcpuPriceHr'
    }

    def __init__(self, count_vm_available=None, cpu_model=None, data_center_id=None, gpu_model=None, gpu_price_hr=None, id=None, ipv4_price_hr=None, machine_type=None, memory_gib_price_hr=None, renewable_energy=None, storage_gib_price_hr=None, total_gpu_price_hr=None, total_memory_price_hr=None, total_price_hr=None, total_storage_price_hr=None, total_vcpu_price_hr=None, vcpu_price_hr=None, _configuration=None):  # noqa: E501
        """HostConfigCategory - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._count_vm_available = None
        self._cpu_model = None
        self._data_center_id = None
        self._gpu_model = None
        self._gpu_price_hr = None
        self._id = None
        self._ipv4_price_hr = None
        self._machine_type = None
        self._memory_gib_price_hr = None
        self._renewable_energy = None
        self._storage_gib_price_hr = None
        self._total_gpu_price_hr = None
        self._total_memory_price_hr = None
        self._total_price_hr = None
        self._total_storage_price_hr = None
        self._total_vcpu_price_hr = None
        self._vcpu_price_hr = None
        self.discriminator = None

        self.count_vm_available = count_vm_available
        self.cpu_model = cpu_model
        self.data_center_id = data_center_id
        self.gpu_model = gpu_model
        self.gpu_price_hr = gpu_price_hr
        self.id = id
        self.ipv4_price_hr = ipv4_price_hr
        self.machine_type = machine_type
        self.memory_gib_price_hr = memory_gib_price_hr
        self.renewable_energy = renewable_energy
        self.storage_gib_price_hr = storage_gib_price_hr
        self.total_gpu_price_hr = total_gpu_price_hr
        self.total_memory_price_hr = total_memory_price_hr
        self.total_price_hr = total_price_hr
        self.total_storage_price_hr = total_storage_price_hr
        self.total_vcpu_price_hr = total_vcpu_price_hr
        self.vcpu_price_hr = vcpu_price_hr

    @property
    def count_vm_available(self):
        """Gets the count_vm_available of this HostConfigCategory.  # noqa: E501


        :return: The count_vm_available of this HostConfigCategory.  # noqa: E501
        :rtype: int
        """
        return self._count_vm_available

    @count_vm_available.setter
    def count_vm_available(self, count_vm_available):
        """Sets the count_vm_available of this HostConfigCategory.


        :param count_vm_available: The count_vm_available of this HostConfigCategory.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and count_vm_available is None:
            raise ValueError("Invalid value for `count_vm_available`, must not be `None`")  # noqa: E501

        self._count_vm_available = count_vm_available

    @property
    def cpu_model(self):
        """Gets the cpu_model of this HostConfigCategory.  # noqa: E501


        :return: The cpu_model of this HostConfigCategory.  # noqa: E501
        :rtype: str
        """
        return self._cpu_model

    @cpu_model.setter
    def cpu_model(self, cpu_model):
        """Sets the cpu_model of this HostConfigCategory.


        :param cpu_model: The cpu_model of this HostConfigCategory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and cpu_model is None:
            raise ValueError("Invalid value for `cpu_model`, must not be `None`")  # noqa: E501

        self._cpu_model = cpu_model

    @property
    def data_center_id(self):
        """Gets the data_center_id of this HostConfigCategory.  # noqa: E501


        :return: The data_center_id of this HostConfigCategory.  # noqa: E501
        :rtype: str
        """
        return self._data_center_id

    @data_center_id.setter
    def data_center_id(self, data_center_id):
        """Sets the data_center_id of this HostConfigCategory.


        :param data_center_id: The data_center_id of this HostConfigCategory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and data_center_id is None:
            raise ValueError("Invalid value for `data_center_id`, must not be `None`")  # noqa: E501

        self._data_center_id = data_center_id

    @property
    def gpu_model(self):
        """Gets the gpu_model of this HostConfigCategory.  # noqa: E501


        :return: The gpu_model of this HostConfigCategory.  # noqa: E501
        :rtype: str
        """
        return self._gpu_model

    @gpu_model.setter
    def gpu_model(self, gpu_model):
        """Sets the gpu_model of this HostConfigCategory.


        :param gpu_model: The gpu_model of this HostConfigCategory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and gpu_model is None:
            raise ValueError("Invalid value for `gpu_model`, must not be `None`")  # noqa: E501

        self._gpu_model = gpu_model

    @property
    def gpu_price_hr(self):
        """Gets the gpu_price_hr of this HostConfigCategory.  # noqa: E501


        :return: The gpu_price_hr of this HostConfigCategory.  # noqa: E501
        :rtype: Decimal
        """
        return self._gpu_price_hr

    @gpu_price_hr.setter
    def gpu_price_hr(self, gpu_price_hr):
        """Sets the gpu_price_hr of this HostConfigCategory.


        :param gpu_price_hr: The gpu_price_hr of this HostConfigCategory.  # noqa: E501
        :type: Decimal
        """
        if self._configuration.client_side_validation and gpu_price_hr is None:
            raise ValueError("Invalid value for `gpu_price_hr`, must not be `None`")  # noqa: E501

        self._gpu_price_hr = gpu_price_hr

    @property
    def id(self):
        """Gets the id of this HostConfigCategory.  # noqa: E501


        :return: The id of this HostConfigCategory.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HostConfigCategory.


        :param id: The id of this HostConfigCategory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def ipv4_price_hr(self):
        """Gets the ipv4_price_hr of this HostConfigCategory.  # noqa: E501


        :return: The ipv4_price_hr of this HostConfigCategory.  # noqa: E501
        :rtype: Decimal
        """
        return self._ipv4_price_hr

    @ipv4_price_hr.setter
    def ipv4_price_hr(self, ipv4_price_hr):
        """Sets the ipv4_price_hr of this HostConfigCategory.


        :param ipv4_price_hr: The ipv4_price_hr of this HostConfigCategory.  # noqa: E501
        :type: Decimal
        """
        if self._configuration.client_side_validation and ipv4_price_hr is None:
            raise ValueError("Invalid value for `ipv4_price_hr`, must not be `None`")  # noqa: E501

        self._ipv4_price_hr = ipv4_price_hr

    @property
    def machine_type(self):
        """Gets the machine_type of this HostConfigCategory.  # noqa: E501


        :return: The machine_type of this HostConfigCategory.  # noqa: E501
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this HostConfigCategory.


        :param machine_type: The machine_type of this HostConfigCategory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and machine_type is None:
            raise ValueError("Invalid value for `machine_type`, must not be `None`")  # noqa: E501

        self._machine_type = machine_type

    @property
    def memory_gib_price_hr(self):
        """Gets the memory_gib_price_hr of this HostConfigCategory.  # noqa: E501


        :return: The memory_gib_price_hr of this HostConfigCategory.  # noqa: E501
        :rtype: Decimal
        """
        return self._memory_gib_price_hr

    @memory_gib_price_hr.setter
    def memory_gib_price_hr(self, memory_gib_price_hr):
        """Sets the memory_gib_price_hr of this HostConfigCategory.


        :param memory_gib_price_hr: The memory_gib_price_hr of this HostConfigCategory.  # noqa: E501
        :type: Decimal
        """
        if self._configuration.client_side_validation and memory_gib_price_hr is None:
            raise ValueError("Invalid value for `memory_gib_price_hr`, must not be `None`")  # noqa: E501

        self._memory_gib_price_hr = memory_gib_price_hr

    @property
    def renewable_energy(self):
        """Gets the renewable_energy of this HostConfigCategory.  # noqa: E501


        :return: The renewable_energy of this HostConfigCategory.  # noqa: E501
        :rtype: bool
        """
        return self._renewable_energy

    @renewable_energy.setter
    def renewable_energy(self, renewable_energy):
        """Sets the renewable_energy of this HostConfigCategory.


        :param renewable_energy: The renewable_energy of this HostConfigCategory.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and renewable_energy is None:
            raise ValueError("Invalid value for `renewable_energy`, must not be `None`")  # noqa: E501

        self._renewable_energy = renewable_energy

    @property
    def storage_gib_price_hr(self):
        """Gets the storage_gib_price_hr of this HostConfigCategory.  # noqa: E501


        :return: The storage_gib_price_hr of this HostConfigCategory.  # noqa: E501
        :rtype: Decimal
        """
        return self._storage_gib_price_hr

    @storage_gib_price_hr.setter
    def storage_gib_price_hr(self, storage_gib_price_hr):
        """Sets the storage_gib_price_hr of this HostConfigCategory.


        :param storage_gib_price_hr: The storage_gib_price_hr of this HostConfigCategory.  # noqa: E501
        :type: Decimal
        """
        if self._configuration.client_side_validation and storage_gib_price_hr is None:
            raise ValueError("Invalid value for `storage_gib_price_hr`, must not be `None`")  # noqa: E501

        self._storage_gib_price_hr = storage_gib_price_hr

    @property
    def total_gpu_price_hr(self):
        """Gets the total_gpu_price_hr of this HostConfigCategory.  # noqa: E501


        :return: The total_gpu_price_hr of this HostConfigCategory.  # noqa: E501
        :rtype: Decimal
        """
        return self._total_gpu_price_hr

    @total_gpu_price_hr.setter
    def total_gpu_price_hr(self, total_gpu_price_hr):
        """Sets the total_gpu_price_hr of this HostConfigCategory.


        :param total_gpu_price_hr: The total_gpu_price_hr of this HostConfigCategory.  # noqa: E501
        :type: Decimal
        """
        if self._configuration.client_side_validation and total_gpu_price_hr is None:
            raise ValueError("Invalid value for `total_gpu_price_hr`, must not be `None`")  # noqa: E501

        self._total_gpu_price_hr = total_gpu_price_hr

    @property
    def total_memory_price_hr(self):
        """Gets the total_memory_price_hr of this HostConfigCategory.  # noqa: E501


        :return: The total_memory_price_hr of this HostConfigCategory.  # noqa: E501
        :rtype: Decimal
        """
        return self._total_memory_price_hr

    @total_memory_price_hr.setter
    def total_memory_price_hr(self, total_memory_price_hr):
        """Sets the total_memory_price_hr of this HostConfigCategory.


        :param total_memory_price_hr: The total_memory_price_hr of this HostConfigCategory.  # noqa: E501
        :type: Decimal
        """
        if self._configuration.client_side_validation and total_memory_price_hr is None:
            raise ValueError("Invalid value for `total_memory_price_hr`, must not be `None`")  # noqa: E501

        self._total_memory_price_hr = total_memory_price_hr

    @property
    def total_price_hr(self):
        """Gets the total_price_hr of this HostConfigCategory.  # noqa: E501


        :return: The total_price_hr of this HostConfigCategory.  # noqa: E501
        :rtype: Decimal
        """
        return self._total_price_hr

    @total_price_hr.setter
    def total_price_hr(self, total_price_hr):
        """Sets the total_price_hr of this HostConfigCategory.


        :param total_price_hr: The total_price_hr of this HostConfigCategory.  # noqa: E501
        :type: Decimal
        """
        if self._configuration.client_side_validation and total_price_hr is None:
            raise ValueError("Invalid value for `total_price_hr`, must not be `None`")  # noqa: E501

        self._total_price_hr = total_price_hr

    @property
    def total_storage_price_hr(self):
        """Gets the total_storage_price_hr of this HostConfigCategory.  # noqa: E501


        :return: The total_storage_price_hr of this HostConfigCategory.  # noqa: E501
        :rtype: Decimal
        """
        return self._total_storage_price_hr

    @total_storage_price_hr.setter
    def total_storage_price_hr(self, total_storage_price_hr):
        """Sets the total_storage_price_hr of this HostConfigCategory.


        :param total_storage_price_hr: The total_storage_price_hr of this HostConfigCategory.  # noqa: E501
        :type: Decimal
        """
        if self._configuration.client_side_validation and total_storage_price_hr is None:
            raise ValueError("Invalid value for `total_storage_price_hr`, must not be `None`")  # noqa: E501

        self._total_storage_price_hr = total_storage_price_hr

    @property
    def total_vcpu_price_hr(self):
        """Gets the total_vcpu_price_hr of this HostConfigCategory.  # noqa: E501


        :return: The total_vcpu_price_hr of this HostConfigCategory.  # noqa: E501
        :rtype: Decimal
        """
        return self._total_vcpu_price_hr

    @total_vcpu_price_hr.setter
    def total_vcpu_price_hr(self, total_vcpu_price_hr):
        """Sets the total_vcpu_price_hr of this HostConfigCategory.


        :param total_vcpu_price_hr: The total_vcpu_price_hr of this HostConfigCategory.  # noqa: E501
        :type: Decimal
        """
        if self._configuration.client_side_validation and total_vcpu_price_hr is None:
            raise ValueError("Invalid value for `total_vcpu_price_hr`, must not be `None`")  # noqa: E501

        self._total_vcpu_price_hr = total_vcpu_price_hr

    @property
    def vcpu_price_hr(self):
        """Gets the vcpu_price_hr of this HostConfigCategory.  # noqa: E501


        :return: The vcpu_price_hr of this HostConfigCategory.  # noqa: E501
        :rtype: Decimal
        """
        return self._vcpu_price_hr

    @vcpu_price_hr.setter
    def vcpu_price_hr(self, vcpu_price_hr):
        """Sets the vcpu_price_hr of this HostConfigCategory.


        :param vcpu_price_hr: The vcpu_price_hr of this HostConfigCategory.  # noqa: E501
        :type: Decimal
        """
        if self._configuration.client_side_validation and vcpu_price_hr is None:
            raise ValueError("Invalid value for `vcpu_price_hr`, must not be `None`")  # noqa: E501

        self._vcpu_price_hr = vcpu_price_hr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostConfigCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostConfigCategory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HostConfigCategory):
            return True

        return self.to_dict() != other.to_dict()
