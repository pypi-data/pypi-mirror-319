# coding: utf-8

"""
    Cudo Compute service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from src.cudo_compute.configuration import Configuration


class Host(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_model': 'str',
        'create_time': 'datetime',
        'gpu_free': 'int',
        'gpu_model': 'str',
        'gpu_used': 'int',
        'machine_type': 'str',
        'memory_gib_free': 'int',
        'memory_gib_used': 'int',
        'name': 'str',
        'online': 'bool',
        'update_time': 'datetime',
        'vcpu_free': 'int',
        'vcpu_per_cpu_thread': 'int',
        'vcpu_used': 'int',
        'vm_count': 'int'
    }

    attribute_map = {
        'cpu_model': 'cpuModel',
        'create_time': 'createTime',
        'gpu_free': 'gpuFree',
        'gpu_model': 'gpuModel',
        'gpu_used': 'gpuUsed',
        'machine_type': 'machineType',
        'memory_gib_free': 'memoryGibFree',
        'memory_gib_used': 'memoryGibUsed',
        'name': 'name',
        'online': 'online',
        'update_time': 'updateTime',
        'vcpu_free': 'vcpuFree',
        'vcpu_per_cpu_thread': 'vcpuPerCpuThread',
        'vcpu_used': 'vcpuUsed',
        'vm_count': 'vmCount'
    }

    def __init__(self, cpu_model=None, create_time=None, gpu_free=None, gpu_model=None, gpu_used=None, machine_type=None, memory_gib_free=None, memory_gib_used=None, name=None, online=None, update_time=None, vcpu_free=None, vcpu_per_cpu_thread=None, vcpu_used=None, vm_count=None, _configuration=None):  # noqa: E501
        """Host - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cpu_model = None
        self._create_time = None
        self._gpu_free = None
        self._gpu_model = None
        self._gpu_used = None
        self._machine_type = None
        self._memory_gib_free = None
        self._memory_gib_used = None
        self._name = None
        self._online = None
        self._update_time = None
        self._vcpu_free = None
        self._vcpu_per_cpu_thread = None
        self._vcpu_used = None
        self._vm_count = None
        self.discriminator = None

        self.cpu_model = cpu_model
        self.create_time = create_time
        self.gpu_free = gpu_free
        self.gpu_model = gpu_model
        self.gpu_used = gpu_used
        self.machine_type = machine_type
        self.memory_gib_free = memory_gib_free
        self.memory_gib_used = memory_gib_used
        self.name = name
        self.online = online
        self.update_time = update_time
        self.vcpu_free = vcpu_free
        self.vcpu_per_cpu_thread = vcpu_per_cpu_thread
        self.vcpu_used = vcpu_used
        self.vm_count = vm_count

    @property
    def cpu_model(self):
        """Gets the cpu_model of this Host.  # noqa: E501


        :return: The cpu_model of this Host.  # noqa: E501
        :rtype: str
        """
        return self._cpu_model

    @cpu_model.setter
    def cpu_model(self, cpu_model):
        """Sets the cpu_model of this Host.


        :param cpu_model: The cpu_model of this Host.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and cpu_model is None:
            raise ValueError("Invalid value for `cpu_model`, must not be `None`")  # noqa: E501

        self._cpu_model = cpu_model

    @property
    def create_time(self):
        """Gets the create_time of this Host.  # noqa: E501


        :return: The create_time of this Host.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Host.


        :param create_time: The create_time of this Host.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    @property
    def gpu_free(self):
        """Gets the gpu_free of this Host.  # noqa: E501


        :return: The gpu_free of this Host.  # noqa: E501
        :rtype: int
        """
        return self._gpu_free

    @gpu_free.setter
    def gpu_free(self, gpu_free):
        """Sets the gpu_free of this Host.


        :param gpu_free: The gpu_free of this Host.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and gpu_free is None:
            raise ValueError("Invalid value for `gpu_free`, must not be `None`")  # noqa: E501

        self._gpu_free = gpu_free

    @property
    def gpu_model(self):
        """Gets the gpu_model of this Host.  # noqa: E501


        :return: The gpu_model of this Host.  # noqa: E501
        :rtype: str
        """
        return self._gpu_model

    @gpu_model.setter
    def gpu_model(self, gpu_model):
        """Sets the gpu_model of this Host.


        :param gpu_model: The gpu_model of this Host.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and gpu_model is None:
            raise ValueError("Invalid value for `gpu_model`, must not be `None`")  # noqa: E501

        self._gpu_model = gpu_model

    @property
    def gpu_used(self):
        """Gets the gpu_used of this Host.  # noqa: E501


        :return: The gpu_used of this Host.  # noqa: E501
        :rtype: int
        """
        return self._gpu_used

    @gpu_used.setter
    def gpu_used(self, gpu_used):
        """Sets the gpu_used of this Host.


        :param gpu_used: The gpu_used of this Host.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and gpu_used is None:
            raise ValueError("Invalid value for `gpu_used`, must not be `None`")  # noqa: E501

        self._gpu_used = gpu_used

    @property
    def machine_type(self):
        """Gets the machine_type of this Host.  # noqa: E501


        :return: The machine_type of this Host.  # noqa: E501
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this Host.


        :param machine_type: The machine_type of this Host.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and machine_type is None:
            raise ValueError("Invalid value for `machine_type`, must not be `None`")  # noqa: E501

        self._machine_type = machine_type

    @property
    def memory_gib_free(self):
        """Gets the memory_gib_free of this Host.  # noqa: E501


        :return: The memory_gib_free of this Host.  # noqa: E501
        :rtype: int
        """
        return self._memory_gib_free

    @memory_gib_free.setter
    def memory_gib_free(self, memory_gib_free):
        """Sets the memory_gib_free of this Host.


        :param memory_gib_free: The memory_gib_free of this Host.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and memory_gib_free is None:
            raise ValueError("Invalid value for `memory_gib_free`, must not be `None`")  # noqa: E501

        self._memory_gib_free = memory_gib_free

    @property
    def memory_gib_used(self):
        """Gets the memory_gib_used of this Host.  # noqa: E501


        :return: The memory_gib_used of this Host.  # noqa: E501
        :rtype: int
        """
        return self._memory_gib_used

    @memory_gib_used.setter
    def memory_gib_used(self, memory_gib_used):
        """Sets the memory_gib_used of this Host.


        :param memory_gib_used: The memory_gib_used of this Host.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and memory_gib_used is None:
            raise ValueError("Invalid value for `memory_gib_used`, must not be `None`")  # noqa: E501

        self._memory_gib_used = memory_gib_used

    @property
    def name(self):
        """Gets the name of this Host.  # noqa: E501


        :return: The name of this Host.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Host.


        :param name: The name of this Host.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def online(self):
        """Gets the online of this Host.  # noqa: E501


        :return: The online of this Host.  # noqa: E501
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this Host.


        :param online: The online of this Host.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and online is None:
            raise ValueError("Invalid value for `online`, must not be `None`")  # noqa: E501

        self._online = online

    @property
    def update_time(self):
        """Gets the update_time of this Host.  # noqa: E501


        :return: The update_time of this Host.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Host.


        :param update_time: The update_time of this Host.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")  # noqa: E501

        self._update_time = update_time

    @property
    def vcpu_free(self):
        """Gets the vcpu_free of this Host.  # noqa: E501


        :return: The vcpu_free of this Host.  # noqa: E501
        :rtype: int
        """
        return self._vcpu_free

    @vcpu_free.setter
    def vcpu_free(self, vcpu_free):
        """Sets the vcpu_free of this Host.


        :param vcpu_free: The vcpu_free of this Host.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and vcpu_free is None:
            raise ValueError("Invalid value for `vcpu_free`, must not be `None`")  # noqa: E501

        self._vcpu_free = vcpu_free

    @property
    def vcpu_per_cpu_thread(self):
        """Gets the vcpu_per_cpu_thread of this Host.  # noqa: E501


        :return: The vcpu_per_cpu_thread of this Host.  # noqa: E501
        :rtype: int
        """
        return self._vcpu_per_cpu_thread

    @vcpu_per_cpu_thread.setter
    def vcpu_per_cpu_thread(self, vcpu_per_cpu_thread):
        """Sets the vcpu_per_cpu_thread of this Host.


        :param vcpu_per_cpu_thread: The vcpu_per_cpu_thread of this Host.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and vcpu_per_cpu_thread is None:
            raise ValueError("Invalid value for `vcpu_per_cpu_thread`, must not be `None`")  # noqa: E501

        self._vcpu_per_cpu_thread = vcpu_per_cpu_thread

    @property
    def vcpu_used(self):
        """Gets the vcpu_used of this Host.  # noqa: E501


        :return: The vcpu_used of this Host.  # noqa: E501
        :rtype: int
        """
        return self._vcpu_used

    @vcpu_used.setter
    def vcpu_used(self, vcpu_used):
        """Sets the vcpu_used of this Host.


        :param vcpu_used: The vcpu_used of this Host.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and vcpu_used is None:
            raise ValueError("Invalid value for `vcpu_used`, must not be `None`")  # noqa: E501

        self._vcpu_used = vcpu_used

    @property
    def vm_count(self):
        """Gets the vm_count of this Host.  # noqa: E501


        :return: The vm_count of this Host.  # noqa: E501
        :rtype: int
        """
        return self._vm_count

    @vm_count.setter
    def vm_count(self, vm_count):
        """Sets the vm_count of this Host.


        :param vm_count: The vm_count of this Host.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and vm_count is None:
            raise ValueError("Invalid value for `vm_count`, must not be `None`")  # noqa: E501

        self._vm_count = vm_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Host, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Host):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Host):
            return True

        return self.to_dict() != other.to_dict()
