# coding: utf-8

"""
    Cudo Compute service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cudo_compute.configuration import Configuration


class CreateBillingAccountRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'invoice_name': 'str',
        'email': 'str',
        'tax_id': 'TaxId',
        'referral': 'str',
        'billing_address': 'BillingAddress'
    }

    attribute_map = {
        'display_name': 'displayName',
        'invoice_name': 'invoiceName',
        'email': 'email',
        'tax_id': 'taxId',
        'referral': 'referral',
        'billing_address': 'billingAddress'
    }

    def __init__(self, display_name=None, invoice_name=None, email=None, tax_id=None, referral=None, billing_address=None, _configuration=None):  # noqa: E501
        """CreateBillingAccountRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._display_name = None
        self._invoice_name = None
        self._email = None
        self._tax_id = None
        self._referral = None
        self._billing_address = None
        self.discriminator = None

        self.display_name = display_name
        if invoice_name is not None:
            self.invoice_name = invoice_name
        self.email = email
        if tax_id is not None:
            self.tax_id = tax_id
        if referral is not None:
            self.referral = referral
        if billing_address is not None:
            self.billing_address = billing_address

    @property
    def display_name(self):
        """Gets the display_name of this CreateBillingAccountRequest.  # noqa: E501


        :return: The display_name of this CreateBillingAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CreateBillingAccountRequest.


        :param display_name: The display_name of this CreateBillingAccountRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def invoice_name(self):
        """Gets the invoice_name of this CreateBillingAccountRequest.  # noqa: E501


        :return: The invoice_name of this CreateBillingAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._invoice_name

    @invoice_name.setter
    def invoice_name(self, invoice_name):
        """Sets the invoice_name of this CreateBillingAccountRequest.


        :param invoice_name: The invoice_name of this CreateBillingAccountRequest.  # noqa: E501
        :type: str
        """

        self._invoice_name = invoice_name

    @property
    def email(self):
        """Gets the email of this CreateBillingAccountRequest.  # noqa: E501


        :return: The email of this CreateBillingAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateBillingAccountRequest.


        :param email: The email of this CreateBillingAccountRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def tax_id(self):
        """Gets the tax_id of this CreateBillingAccountRequest.  # noqa: E501


        :return: The tax_id of this CreateBillingAccountRequest.  # noqa: E501
        :rtype: TaxId
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this CreateBillingAccountRequest.


        :param tax_id: The tax_id of this CreateBillingAccountRequest.  # noqa: E501
        :type: TaxId
        """

        self._tax_id = tax_id

    @property
    def referral(self):
        """Gets the referral of this CreateBillingAccountRequest.  # noqa: E501


        :return: The referral of this CreateBillingAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._referral

    @referral.setter
    def referral(self, referral):
        """Sets the referral of this CreateBillingAccountRequest.


        :param referral: The referral of this CreateBillingAccountRequest.  # noqa: E501
        :type: str
        """

        self._referral = referral

    @property
    def billing_address(self):
        """Gets the billing_address of this CreateBillingAccountRequest.  # noqa: E501


        :return: The billing_address of this CreateBillingAccountRequest.  # noqa: E501
        :rtype: BillingAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this CreateBillingAccountRequest.


        :param billing_address: The billing_address of this CreateBillingAccountRequest.  # noqa: E501
        :type: BillingAddress
        """

        self._billing_address = billing_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateBillingAccountRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateBillingAccountRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateBillingAccountRequest):
            return True

        return self.to_dict() != other.to_dict()
