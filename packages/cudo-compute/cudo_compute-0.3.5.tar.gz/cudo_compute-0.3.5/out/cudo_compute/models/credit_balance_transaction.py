# coding: utf-8

"""
    Cudo Compute service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cudo_compute.configuration import Configuration


class CreditBalanceTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'amount': 'Decimal',
        'description': 'str',
        'create_time': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'amount': 'amount',
        'description': 'description',
        'create_time': 'createTime'
    }

    def __init__(self, id=None, amount=None, description=None, create_time=None, _configuration=None):  # noqa: E501
        """CreditBalanceTransaction - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._amount = None
        self._description = None
        self._create_time = None
        self.discriminator = None

        self.id = id
        self.amount = amount
        self.description = description
        self.create_time = create_time

    @property
    def id(self):
        """Gets the id of this CreditBalanceTransaction.  # noqa: E501


        :return: The id of this CreditBalanceTransaction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreditBalanceTransaction.


        :param id: The id of this CreditBalanceTransaction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def amount(self):
        """Gets the amount of this CreditBalanceTransaction.  # noqa: E501


        :return: The amount of this CreditBalanceTransaction.  # noqa: E501
        :rtype: Decimal
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreditBalanceTransaction.


        :param amount: The amount of this CreditBalanceTransaction.  # noqa: E501
        :type: Decimal
        """
        if self._configuration.client_side_validation and amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def description(self):
        """Gets the description of this CreditBalanceTransaction.  # noqa: E501


        :return: The description of this CreditBalanceTransaction.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreditBalanceTransaction.


        :param description: The description of this CreditBalanceTransaction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def create_time(self):
        """Gets the create_time of this CreditBalanceTransaction.  # noqa: E501


        :return: The create_time of this CreditBalanceTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this CreditBalanceTransaction.


        :param create_time: The create_time of this CreditBalanceTransaction.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditBalanceTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditBalanceTransaction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreditBalanceTransaction):
            return True

        return self.to_dict() != other.to_dict()
