# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ....core.pydantic_utilities import UniversalBaseModel
import typing
import datetime as dt
from ....core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from ....types.tool_call_message_tool_call import ToolCallMessageToolCall
from ....types.tool_return_message_status import ToolReturnMessageStatus


class MessagesListResponseItem_SystemMessage(UniversalBaseModel):
    message_type: typing.Literal["system_message"] = "system_message"
    id: str
    date: dt.datetime
    message: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class MessagesListResponseItem_UserMessage(UniversalBaseModel):
    message_type: typing.Literal["user_message"] = "user_message"
    id: str
    date: dt.datetime
    message: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class MessagesListResponseItem_ReasoningMessage(UniversalBaseModel):
    message_type: typing.Literal["reasoning_message"] = "reasoning_message"
    id: str
    date: dt.datetime
    reasoning: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class MessagesListResponseItem_ToolCallMessage(UniversalBaseModel):
    message_type: typing.Literal["tool_call_message"] = "tool_call_message"
    id: str
    date: dt.datetime
    tool_call: ToolCallMessageToolCall

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class MessagesListResponseItem_ToolReturnMessage(UniversalBaseModel):
    message_type: typing.Literal["tool_return_message"] = "tool_return_message"
    id: str
    date: dt.datetime
    tool_return: str
    status: ToolReturnMessageStatus
    tool_call_id: str
    stdout: typing.Optional[typing.List[str]] = None
    stderr: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class MessagesListResponseItem_AssistantMessage(UniversalBaseModel):
    message_type: typing.Literal["assistant_message"] = "assistant_message"
    id: str
    date: dt.datetime
    assistant_message: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


MessagesListResponseItem = typing.Union[
    MessagesListResponseItem_SystemMessage,
    MessagesListResponseItem_UserMessage,
    MessagesListResponseItem_ReasoningMessage,
    MessagesListResponseItem_ToolCallMessage,
    MessagesListResponseItem_ToolReturnMessage,
    MessagesListResponseItem_AssistantMessage,
]
