# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'InstallationTemplateCustomization',
    'InstallationTemplateInput',
    'GetInstallationTemplateCustomizationResult',
    'GetInstallationTemplateInputResult',
    'GetInstallationTemplatePartitionSchemeResult',
    'GetInstallationTemplatePartitionSchemeHardwareRaidResult',
    'GetInstallationTemplatePartitionSchemePartitionResult',
    'GetMeCurrencyResult',
]

@pulumi.output_type
class InstallationTemplateCustomization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customHostname":
            suggest = "custom_hostname"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstallationTemplateCustomization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstallationTemplateCustomization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstallationTemplateCustomization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_hostname: Optional[str] = None):
        """
        :param str custom_hostname: Set up the server using the provided hostname instead of the default hostname.
        """
        if custom_hostname is not None:
            pulumi.set(__self__, "custom_hostname", custom_hostname)

    @property
    @pulumi.getter(name="customHostname")
    def custom_hostname(self) -> Optional[str]:
        """
        Set up the server using the provided hostname instead of the default hostname.
        """
        return pulumi.get(self, "custom_hostname")


@pulumi.output_type
class InstallationTemplateInput(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 enums: Optional[Sequence[str]] = None,
                 mandatory: Optional[bool] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str description: information about this template.
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if mandatory is not None:
            pulumi.set(__self__, "mandatory", mandatory)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        information about this template.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "enums")

    @property
    @pulumi.getter
    def mandatory(self) -> Optional[bool]:
        return pulumi.get(self, "mandatory")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstallationTemplateCustomizationResult(dict):
    def __init__(__self__, *,
                 custom_hostname: str):
        """
        :param str custom_hostname: Set up the server using the provided hostname instead of the default hostname.
        """
        pulumi.set(__self__, "custom_hostname", custom_hostname)

    @property
    @pulumi.getter(name="customHostname")
    def custom_hostname(self) -> str:
        """
        Set up the server using the provided hostname instead of the default hostname.
        """
        return pulumi.get(self, "custom_hostname")


@pulumi.output_type
class GetInstallationTemplateInputResult(dict):
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 enums: Sequence[str],
                 mandatory: bool,
                 name: str,
                 type: str):
        """
        :param str description: Information about this template.
        :param str name: Hardware RAID name.
        :param str type: Partition type.
        """
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enums", enums)
        pulumi.set(__self__, "mandatory", mandatory)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Information about this template.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enums(self) -> Sequence[str]:
        return pulumi.get(self, "enums")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Hardware RAID name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Partition type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstallationTemplatePartitionSchemeResult(dict):
    def __init__(__self__, *,
                 hardware_raids: Sequence['outputs.GetInstallationTemplatePartitionSchemeHardwareRaidResult'],
                 name: str,
                 partitions: Sequence['outputs.GetInstallationTemplatePartitionSchemePartitionResult'],
                 priority: int):
        """
        :param str name: Hardware RAID name.
        :param int priority: On a reinstall, if a partitioning scheme is not specified, the one with the higher priority will be used by default, among all the compatible partitioning schemes (given the underlying hardware specifications).
        """
        pulumi.set(__self__, "hardware_raids", hardware_raids)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "partitions", partitions)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="hardwareRaids")
    def hardware_raids(self) -> Sequence['outputs.GetInstallationTemplatePartitionSchemeHardwareRaidResult']:
        return pulumi.get(self, "hardware_raids")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Hardware RAID name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def partitions(self) -> Sequence['outputs.GetInstallationTemplatePartitionSchemePartitionResult']:
        return pulumi.get(self, "partitions")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        On a reinstall, if a partitioning scheme is not specified, the one with the higher priority will be used by default, among all the compatible partitioning schemes (given the underlying hardware specifications).
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetInstallationTemplatePartitionSchemeHardwareRaidResult(dict):
    def __init__(__self__, *,
                 disks: Sequence[str],
                 mode: str,
                 name: str,
                 step: int):
        """
        :param Sequence[str] disks: Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id.
        :param str mode: RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60).
        :param str name: Hardware RAID name.
        :param int step: Specifies the creation order of the hardware RAID.
        """
        pulumi.set(__self__, "disks", disks)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "step", step)

    @property
    @pulumi.getter
    def disks(self) -> Sequence[str]:
        """
        Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id.
        """
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60).
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Hardware RAID name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def step(self) -> int:
        """
        Specifies the creation order of the hardware RAID.
        """
        return pulumi.get(self, "step")


@pulumi.output_type
class GetInstallationTemplatePartitionSchemePartitionResult(dict):
    def __init__(__self__, *,
                 filesystem: str,
                 mountpoint: str,
                 order: int,
                 raid: str,
                 size: int,
                 type: str,
                 volume_name: str):
        """
        :param str filesystem: Partition filesystem.
        :param str mountpoint: Partition mount point.
        :param int order: Step or order. Specifies the creation order of the partition on the disk.
        :param str raid: Raid partition type.
        :param int size: Size of partition in MB, 0 => rest of the space.
        :param str type: Partition type.
        :param str volume_name: Volume name needed for proxmox distribution.
        """
        pulumi.set(__self__, "filesystem", filesystem)
        pulumi.set(__self__, "mountpoint", mountpoint)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "raid", raid)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter
    def filesystem(self) -> str:
        """
        Partition filesystem.
        """
        return pulumi.get(self, "filesystem")

    @property
    @pulumi.getter
    def mountpoint(self) -> str:
        """
        Partition mount point.
        """
        return pulumi.get(self, "mountpoint")

    @property
    @pulumi.getter
    def order(self) -> int:
        """
        Step or order. Specifies the creation order of the partition on the disk.
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def raid(self) -> str:
        """
        Raid partition type.
        """
        return pulumi.get(self, "raid")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Size of partition in MB, 0 => rest of the space.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Partition type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> str:
        """
        Volume name needed for proxmox distribution.
        """
        return pulumi.get(self, "volume_name")


@pulumi.output_type
class GetMeCurrencyResult(dict):
    def __init__(__self__, *,
                 code: str,
                 symbol: str):
        """
        :param str code: Currency code used by this account (e.g EUR, USD, ...)
        :param str symbol: Currency symbol used by this account (e.g €, $, ...)
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "symbol", symbol)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Currency code used by this account (e.g EUR, USD, ...)
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def symbol(self) -> str:
        """
        Currency symbol used by this account (e.g €, $, ...)
        """
        return pulumi.get(self, "symbol")


