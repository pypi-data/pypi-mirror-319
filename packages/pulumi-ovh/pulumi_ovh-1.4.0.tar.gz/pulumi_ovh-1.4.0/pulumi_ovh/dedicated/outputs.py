# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ServerDetails',
    'ServerIam',
    'ServerInstallTaskDetails',
    'ServerInstallTaskUserMetadata',
    'ServerNetworkingInterface',
    'ServerOrder',
    'ServerOrderDetail',
    'ServerPlan',
    'ServerPlanConfiguration',
    'ServerPlanOption',
    'ServerPlanOptionConfiguration',
    'ServerUserMetadata',
    'GetServerSpecificationsHardwareDefaultHardwareRaidSizeResult',
    'GetServerSpecificationsHardwareDiskGroupResult',
    'GetServerSpecificationsHardwareDiskGroupDefaultHardwareRaidSizeResult',
    'GetServerSpecificationsHardwareDiskGroupDiskSizeResult',
    'GetServerSpecificationsHardwareExpansionCardResult',
    'GetServerSpecificationsHardwareMemorySizeResult',
    'GetServerSpecificationsHardwareUsbKeyResult',
    'GetServerSpecificationsNetworkBandwidthResult',
    'GetServerSpecificationsNetworkBandwidthInternetToOvhResult',
    'GetServerSpecificationsNetworkBandwidthOvhToInternetResult',
    'GetServerSpecificationsNetworkBandwidthOvhToOvhResult',
    'GetServerSpecificationsNetworkConnectionValResult',
    'GetServerSpecificationsNetworkOlaResult',
    'GetServerSpecificationsNetworkOlaAvailableModeResult',
    'GetServerSpecificationsNetworkOlaAvailableModeInterfaceResult',
    'GetServerSpecificationsNetworkRoutingResult',
    'GetServerSpecificationsNetworkRoutingIpv4Result',
    'GetServerSpecificationsNetworkRoutingIpv6Result',
    'GetServerSpecificationsNetworkSwitchingResult',
    'GetServerSpecificationsNetworkTrafficResult',
    'GetServerSpecificationsNetworkTrafficInputQuotaSizeResult',
    'GetServerSpecificationsNetworkTrafficInputQuotaUsedResult',
    'GetServerSpecificationsNetworkTrafficOutputQuotaSizeResult',
    'GetServerSpecificationsNetworkTrafficOutputQuotaUsedResult',
    'GetServerSpecificationsNetworkVmacResult',
    'GetServerSpecificationsNetworkVrackResult',
    'GetServerSpecificationsNetworkVrackBandwidthResult',
]

@pulumi.output_type
class ServerDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customHostname":
            suggest = "custom_hostname"
        elif key == "diskGroupId":
            suggest = "disk_group_id"
        elif key == "noRaid":
            suggest = "no_raid"
        elif key == "softRaidDevices":
            suggest = "soft_raid_devices"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_hostname: Optional[str] = None,
                 disk_group_id: Optional[float] = None,
                 no_raid: Optional[bool] = None,
                 soft_raid_devices: Optional[float] = None):
        """
        :param str custom_hostname: Personnal hostname to use in server reinstallation
        :param float disk_group_id: Disk group id to process install on (only available for some templates)
        :param bool no_raid: true if you want to install only on the first disk
        :param float soft_raid_devices: Number of devices to use for system's software RAID
        """
        if custom_hostname is not None:
            pulumi.set(__self__, "custom_hostname", custom_hostname)
        if disk_group_id is not None:
            pulumi.set(__self__, "disk_group_id", disk_group_id)
        if no_raid is not None:
            pulumi.set(__self__, "no_raid", no_raid)
        if soft_raid_devices is not None:
            pulumi.set(__self__, "soft_raid_devices", soft_raid_devices)

    @property
    @pulumi.getter(name="customHostname")
    def custom_hostname(self) -> Optional[str]:
        """
        Personnal hostname to use in server reinstallation
        """
        return pulumi.get(self, "custom_hostname")

    @property
    @pulumi.getter(name="diskGroupId")
    def disk_group_id(self) -> Optional[float]:
        """
        Disk group id to process install on (only available for some templates)
        """
        return pulumi.get(self, "disk_group_id")

    @property
    @pulumi.getter(name="noRaid")
    def no_raid(self) -> Optional[bool]:
        """
        true if you want to install only on the first disk
        """
        return pulumi.get(self, "no_raid")

    @property
    @pulumi.getter(name="softRaidDevices")
    def soft_raid_devices(self) -> Optional[float]:
        """
        Number of devices to use for system's software RAID
        """
        return pulumi.get(self, "soft_raid_devices")


@pulumi.output_type
class ServerIam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerIam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerIam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerIam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 tags: Optional[Mapping[str, str]] = None,
                 urn: Optional[str] = None):
        """
        :param str display_name: Resource display name
        :param str id: Unique identifier of the resource in the IAM
        :param Mapping[str, str] tags: Resource tags. Tags that were internally computed are prefixed with `ovh:`
        :param str urn: URN of the private database, used when writing IAM policies
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if urn is not None:
            pulumi.set(__self__, "urn", urn)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Resource display name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Unique identifier of the resource in the IAM
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags. Tags that were internally computed are prefixed with `ovh:`
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def urn(self) -> Optional[str]:
        """
        URN of the private database, used when writing IAM policies
        """
        return pulumi.get(self, "urn")


@pulumi.output_type
class ServerInstallTaskDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customHostname":
            suggest = "custom_hostname"
        elif key == "diskGroupId":
            suggest = "disk_group_id"
        elif key == "noRaid":
            suggest = "no_raid"
        elif key == "softRaidDevices":
            suggest = "soft_raid_devices"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerInstallTaskDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerInstallTaskDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerInstallTaskDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_hostname: Optional[str] = None,
                 disk_group_id: Optional[int] = None,
                 no_raid: Optional[bool] = None,
                 soft_raid_devices: Optional[int] = None):
        """
        :param str custom_hostname: Set up the server using the provided hostname instead of the default hostname.
        :param int disk_group_id: Disk group id.
        :param bool no_raid: Set to true to disable RAID.
        :param int soft_raid_devices: soft raid devices.
        """
        if custom_hostname is not None:
            pulumi.set(__self__, "custom_hostname", custom_hostname)
        if disk_group_id is not None:
            pulumi.set(__self__, "disk_group_id", disk_group_id)
        if no_raid is not None:
            pulumi.set(__self__, "no_raid", no_raid)
        if soft_raid_devices is not None:
            pulumi.set(__self__, "soft_raid_devices", soft_raid_devices)

    @property
    @pulumi.getter(name="customHostname")
    def custom_hostname(self) -> Optional[str]:
        """
        Set up the server using the provided hostname instead of the default hostname.
        """
        return pulumi.get(self, "custom_hostname")

    @property
    @pulumi.getter(name="diskGroupId")
    def disk_group_id(self) -> Optional[int]:
        """
        Disk group id.
        """
        return pulumi.get(self, "disk_group_id")

    @property
    @pulumi.getter(name="noRaid")
    def no_raid(self) -> Optional[bool]:
        """
        Set to true to disable RAID.
        """
        return pulumi.get(self, "no_raid")

    @property
    @pulumi.getter(name="softRaidDevices")
    def soft_raid_devices(self) -> Optional[int]:
        """
        soft raid devices.
        """
        return pulumi.get(self, "soft_raid_devices")


@pulumi.output_type
class ServerInstallTaskUserMetadata(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key for the user_metadata
        :param str value: The value for the user_metadata
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key for the user_metadata
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the user_metadata
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ServerNetworkingInterface(dict):
    def __init__(__self__, *,
                 macs: Sequence[str],
                 type: str):
        """
        :param Sequence[str] macs: Interface Mac address
        :param str type: Interface type
        """
        pulumi.set(__self__, "macs", macs)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def macs(self) -> Sequence[str]:
        """
        Interface Mac address
        """
        return pulumi.get(self, "macs")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Interface type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServerOrder(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expirationDate":
            suggest = "expiration_date"
        elif key == "orderId":
            suggest = "order_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerOrder. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerOrder.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerOrder.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date: Optional[str] = None,
                 details: Optional[Sequence['outputs.ServerOrderDetail']] = None,
                 expiration_date: Optional[str] = None,
                 order_id: Optional[float] = None):
        """
        :param Sequence['ServerOrderDetailArgs'] details: Details object when reinstalling server (see https://eu.api.ovh.com/console/?section=%2Fdedicated%2Fserver&branch=v1#post-/dedicated/server/-serviceName-/install/start)
        """
        if date is not None:
            pulumi.set(__self__, "date", date)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if order_id is not None:
            pulumi.set(__self__, "order_id", order_id)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.ServerOrderDetail']]:
        """
        Details object when reinstalling server (see https://eu.api.ovh.com/console/?section=%2Fdedicated%2Fserver&branch=v1#post-/dedicated/server/-serviceName-/install/start)
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[float]:
        return pulumi.get(self, "order_id")


@pulumi.output_type
class ServerOrderDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "detailType":
            suggest = "detail_type"
        elif key == "orderDetailId":
            suggest = "order_detail_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerOrderDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerOrderDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerOrderDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 detail_type: Optional[str] = None,
                 domain: Optional[str] = None,
                 order_detail_id: Optional[float] = None,
                 quantity: Optional[str] = None):
        """
        :param str detail_type: Product type of item in order
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detail_type is not None:
            pulumi.set(__self__, "detail_type", detail_type)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if order_detail_id is not None:
            pulumi.set(__self__, "order_detail_id", order_detail_id)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="detailType")
    def detail_type(self) -> Optional[str]:
        """
        Product type of item in order
        """
        return pulumi.get(self, "detail_type")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="orderDetailId")
    def order_detail_id(self) -> Optional[float]:
        return pulumi.get(self, "order_detail_id")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[str]:
        return pulumi.get(self, "quantity")


@pulumi.output_type
class ServerPlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "planCode":
            suggest = "plan_code"
        elif key == "pricingMode":
            suggest = "pricing_mode"
        elif key == "itemId":
            suggest = "item_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerPlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerPlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerPlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: str,
                 plan_code: str,
                 pricing_mode: str,
                 configurations: Optional[Sequence['outputs.ServerPlanConfiguration']] = None,
                 item_id: Optional[float] = None,
                 quantity: Optional[float] = None):
        """
        :param str duration: Duration selected for the purchase of the product
        :param str plan_code: Identifier of the option offer
        :param str pricing_mode: Pricing mode selected for the purchase of the product
        :param float item_id: Cart item to be linked
        :param float quantity: Quantity of product desired
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "plan_code", plan_code)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if item_id is not None:
            pulumi.set(__self__, "item_id", item_id)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)

    @property
    @pulumi.getter
    def duration(self) -> str:
        """
        Duration selected for the purchase of the product
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> str:
        """
        Identifier of the option offer
        """
        return pulumi.get(self, "plan_code")

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> str:
        """
        Pricing mode selected for the purchase of the product
        """
        return pulumi.get(self, "pricing_mode")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.ServerPlanConfiguration']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="itemId")
    def item_id(self) -> Optional[float]:
        """
        Cart item to be linked
        """
        return pulumi.get(self, "item_id")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[float]:
        """
        Quantity of product desired
        """
        return pulumi.get(self, "quantity")


@pulumi.output_type
class ServerPlanConfiguration(dict):
    def __init__(__self__, *,
                 label: str,
                 value: str):
        """
        :param str label: Label for your configuration item
        :param str value: Value or resource URL on API.OVH.COM of your configuration item
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Label for your configuration item
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value or resource URL on API.OVH.COM of your configuration item
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ServerPlanOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "planCode":
            suggest = "plan_code"
        elif key == "pricingMode":
            suggest = "pricing_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerPlanOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerPlanOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerPlanOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: str,
                 plan_code: str,
                 pricing_mode: str,
                 quantity: float,
                 configurations: Optional[Sequence['outputs.ServerPlanOptionConfiguration']] = None):
        """
        :param str duration: Duration selected for the purchase of the product
        :param str plan_code: Identifier of the option offer
        :param str pricing_mode: Pricing mode selected for the purchase of the product
        :param float quantity: Quantity of product desired
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "plan_code", plan_code)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        pulumi.set(__self__, "quantity", quantity)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)

    @property
    @pulumi.getter
    def duration(self) -> str:
        """
        Duration selected for the purchase of the product
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> str:
        """
        Identifier of the option offer
        """
        return pulumi.get(self, "plan_code")

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> str:
        """
        Pricing mode selected for the purchase of the product
        """
        return pulumi.get(self, "pricing_mode")

    @property
    @pulumi.getter
    def quantity(self) -> float:
        """
        Quantity of product desired
        """
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.ServerPlanOptionConfiguration']]:
        return pulumi.get(self, "configurations")


@pulumi.output_type
class ServerPlanOptionConfiguration(dict):
    def __init__(__self__, *,
                 label: str,
                 value: str):
        """
        :param str label: Label for your configuration item
        :param str value: Value or resource URL on API.OVH.COM of your configuration item
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Label for your configuration item
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value or resource URL on API.OVH.COM of your configuration item
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ServerUserMetadata(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServerSpecificationsHardwareDefaultHardwareRaidSizeResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: float):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServerSpecificationsHardwareDiskGroupResult(dict):
    def __init__(__self__, *,
                 default_hardware_raid_size: 'outputs.GetServerSpecificationsHardwareDiskGroupDefaultHardwareRaidSizeResult',
                 default_hardware_raid_type: str,
                 description: str,
                 disk_group_id: float,
                 disk_size: 'outputs.GetServerSpecificationsHardwareDiskGroupDiskSizeResult',
                 disk_type: str,
                 number_of_disks: float,
                 raid_controller: str):
        """
        :param 'GetServerSpecificationsHardwareDiskGroupDefaultHardwareRaidSizeArgs' default_hardware_raid_size: Default hardware raid size for this disk group
        :param str default_hardware_raid_type: Default hardware raid type for this disk group
        :param str description: Expansion card description
        :param float disk_group_id: Identifier of this disk group
        :param 'GetServerSpecificationsHardwareDiskGroupDiskSizeArgs' disk_size: Disk capacity
        :param str disk_type: Type of the disk (SSD, SATA, SAS, ...)
        :param float number_of_disks: Number of disks in this group
        :param str raid_controller: Raid controller, if any, managing this group of disks
        """
        pulumi.set(__self__, "default_hardware_raid_size", default_hardware_raid_size)
        pulumi.set(__self__, "default_hardware_raid_type", default_hardware_raid_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "disk_group_id", disk_group_id)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "number_of_disks", number_of_disks)
        pulumi.set(__self__, "raid_controller", raid_controller)

    @property
    @pulumi.getter(name="defaultHardwareRaidSize")
    def default_hardware_raid_size(self) -> 'outputs.GetServerSpecificationsHardwareDiskGroupDefaultHardwareRaidSizeResult':
        """
        Default hardware raid size for this disk group
        """
        return pulumi.get(self, "default_hardware_raid_size")

    @property
    @pulumi.getter(name="defaultHardwareRaidType")
    def default_hardware_raid_type(self) -> str:
        """
        Default hardware raid type for this disk group
        """
        return pulumi.get(self, "default_hardware_raid_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Expansion card description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="diskGroupId")
    def disk_group_id(self) -> float:
        """
        Identifier of this disk group
        """
        return pulumi.get(self, "disk_group_id")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> 'outputs.GetServerSpecificationsHardwareDiskGroupDiskSizeResult':
        """
        Disk capacity
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        Type of the disk (SSD, SATA, SAS, ...)
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="numberOfDisks")
    def number_of_disks(self) -> float:
        """
        Number of disks in this group
        """
        return pulumi.get(self, "number_of_disks")

    @property
    @pulumi.getter(name="raidController")
    def raid_controller(self) -> str:
        """
        Raid controller, if any, managing this group of disks
        """
        return pulumi.get(self, "raid_controller")


@pulumi.output_type
class GetServerSpecificationsHardwareDiskGroupDefaultHardwareRaidSizeResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: float):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServerSpecificationsHardwareDiskGroupDiskSizeResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: float):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServerSpecificationsHardwareExpansionCardResult(dict):
    def __init__(__self__, *,
                 description: str,
                 type: str):
        """
        :param str description: Expansion card description
        :param str type: Expansion card type enum
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Expansion card description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Expansion card type enum
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServerSpecificationsHardwareMemorySizeResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: float):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServerSpecificationsHardwareUsbKeyResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: float):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServerSpecificationsNetworkBandwidthResult(dict):
    def __init__(__self__, *,
                 internet_to_ovh: 'outputs.GetServerSpecificationsNetworkBandwidthInternetToOvhResult',
                 ovh_to_internet: 'outputs.GetServerSpecificationsNetworkBandwidthOvhToInternetResult',
                 ovh_to_ovh: 'outputs.GetServerSpecificationsNetworkBandwidthOvhToOvhResult',
                 type: str):
        """
        :param 'GetServerSpecificationsNetworkBandwidthInternetToOvhArgs' internet_to_ovh: Bandwidth limitation Internet to OVH
        :param 'GetServerSpecificationsNetworkBandwidthOvhToInternetArgs' ovh_to_internet: Bandwidth limitation OVH to Internet
        :param 'GetServerSpecificationsNetworkBandwidthOvhToOvhArgs' ovh_to_ovh: Bandwidth limitation OVH to OVH
        :param str type: Bandwidth offer type (included┃standard)
        """
        pulumi.set(__self__, "internet_to_ovh", internet_to_ovh)
        pulumi.set(__self__, "ovh_to_internet", ovh_to_internet)
        pulumi.set(__self__, "ovh_to_ovh", ovh_to_ovh)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="internetToOvh")
    def internet_to_ovh(self) -> 'outputs.GetServerSpecificationsNetworkBandwidthInternetToOvhResult':
        """
        Bandwidth limitation Internet to OVH
        """
        return pulumi.get(self, "internet_to_ovh")

    @property
    @pulumi.getter(name="ovhToInternet")
    def ovh_to_internet(self) -> 'outputs.GetServerSpecificationsNetworkBandwidthOvhToInternetResult':
        """
        Bandwidth limitation OVH to Internet
        """
        return pulumi.get(self, "ovh_to_internet")

    @property
    @pulumi.getter(name="ovhToOvh")
    def ovh_to_ovh(self) -> 'outputs.GetServerSpecificationsNetworkBandwidthOvhToOvhResult':
        """
        Bandwidth limitation OVH to OVH
        """
        return pulumi.get(self, "ovh_to_ovh")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Bandwidth offer type (included┃standard)
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServerSpecificationsNetworkBandwidthInternetToOvhResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: float):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServerSpecificationsNetworkBandwidthOvhToInternetResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: float):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServerSpecificationsNetworkBandwidthOvhToOvhResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: float):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServerSpecificationsNetworkConnectionValResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: float):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServerSpecificationsNetworkOlaResult(dict):
    def __init__(__self__, *,
                 available: bool,
                 available_modes: Sequence['outputs.GetServerSpecificationsNetworkOlaAvailableModeResult'],
                 supported_modes: Sequence[str]):
        """
        :param bool available: Is the OLA feature available
        :param Sequence['GetServerSpecificationsNetworkOlaAvailableModeArgs'] available_modes: Supported modes
        :param Sequence[str] supported_modes: Supported modes (DEPRECATED)
        """
        pulumi.set(__self__, "available", available)
        pulumi.set(__self__, "available_modes", available_modes)
        pulumi.set(__self__, "supported_modes", supported_modes)

    @property
    @pulumi.getter
    def available(self) -> bool:
        """
        Is the OLA feature available
        """
        return pulumi.get(self, "available")

    @property
    @pulumi.getter(name="availableModes")
    def available_modes(self) -> Sequence['outputs.GetServerSpecificationsNetworkOlaAvailableModeResult']:
        """
        Supported modes
        """
        return pulumi.get(self, "available_modes")

    @property
    @pulumi.getter(name="supportedModes")
    def supported_modes(self) -> Sequence[str]:
        """
        Supported modes (DEPRECATED)
        """
        return pulumi.get(self, "supported_modes")


@pulumi.output_type
class GetServerSpecificationsNetworkOlaAvailableModeResult(dict):
    def __init__(__self__, *,
                 default: bool,
                 interfaces: Sequence['outputs.GetServerSpecificationsNetworkOlaAvailableModeInterfaceResult'],
                 name: str):
        """
        :param bool default: Whether it is the default configuration of the server
        :param Sequence['GetServerSpecificationsNetworkOlaAvailableModeInterfaceArgs'] interfaces: Interface layout
        :param str name: Switch name
        """
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "interfaces", interfaces)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def default(self) -> bool:
        """
        Whether it is the default configuration of the server
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetServerSpecificationsNetworkOlaAvailableModeInterfaceResult']:
        """
        Interface layout
        """
        return pulumi.get(self, "interfaces")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Switch name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetServerSpecificationsNetworkOlaAvailableModeInterfaceResult(dict):
    def __init__(__self__, *,
                 aggregation: bool,
                 count: float,
                 type: str):
        """
        :param bool aggregation: Interface aggregation status
        :param float count: Interface count
        :param str type: Bandwidth offer type (included┃standard)
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def aggregation(self) -> bool:
        """
        Interface aggregation status
        """
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def count(self) -> float:
        """
        Interface count
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Bandwidth offer type (included┃standard)
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServerSpecificationsNetworkRoutingResult(dict):
    def __init__(__self__, *,
                 ipv4: 'outputs.GetServerSpecificationsNetworkRoutingIpv4Result',
                 ipv6: 'outputs.GetServerSpecificationsNetworkRoutingIpv6Result'):
        """
        :param 'GetServerSpecificationsNetworkRoutingIpv4Args' ipv4: Ipv4 routing details
        :param 'GetServerSpecificationsNetworkRoutingIpv6Args' ipv6: Ipv6 routing details
        """
        pulumi.set(__self__, "ipv4", ipv4)
        pulumi.set(__self__, "ipv6", ipv6)

    @property
    @pulumi.getter
    def ipv4(self) -> 'outputs.GetServerSpecificationsNetworkRoutingIpv4Result':
        """
        Ipv4 routing details
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> 'outputs.GetServerSpecificationsNetworkRoutingIpv6Result':
        """
        Ipv6 routing details
        """
        return pulumi.get(self, "ipv6")


@pulumi.output_type
class GetServerSpecificationsNetworkRoutingIpv4Result(dict):
    def __init__(__self__, *,
                 gateway: str,
                 ip: str,
                 network: str):
        """
        :param str gateway: Server gateway
        :param str ip: Server main IP
        :param str network: Server network
        """
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        Server gateway
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Server main IP
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def network(self) -> str:
        """
        Server network
        """
        return pulumi.get(self, "network")


@pulumi.output_type
class GetServerSpecificationsNetworkRoutingIpv6Result(dict):
    def __init__(__self__, *,
                 gateway: str,
                 ip: str,
                 network: str):
        """
        :param str gateway: Server gateway
        :param str ip: Server main IP
        :param str network: Server network
        """
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        Server gateway
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Server main IP
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def network(self) -> str:
        """
        Server network
        """
        return pulumi.get(self, "network")


@pulumi.output_type
class GetServerSpecificationsNetworkSwitchingResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Switch name
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Switch name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetServerSpecificationsNetworkTrafficResult(dict):
    def __init__(__self__, *,
                 input_quota_size: 'outputs.GetServerSpecificationsNetworkTrafficInputQuotaSizeResult',
                 input_quota_used: 'outputs.GetServerSpecificationsNetworkTrafficInputQuotaUsedResult',
                 is_throttled: bool,
                 output_quota_size: 'outputs.GetServerSpecificationsNetworkTrafficOutputQuotaSizeResult',
                 output_quota_used: 'outputs.GetServerSpecificationsNetworkTrafficOutputQuotaUsedResult',
                 reset_quota_date: str):
        """
        :param 'GetServerSpecificationsNetworkTrafficInputQuotaSizeArgs' input_quota_size: Monthly input traffic quota allowed
        :param 'GetServerSpecificationsNetworkTrafficInputQuotaUsedArgs' input_quota_used: Monthly input traffic consumed this month
        :param bool is_throttled: Whether bandwidth is throttleted for being over quota
        :param 'GetServerSpecificationsNetworkTrafficOutputQuotaSizeArgs' output_quota_size: Monthly output traffic quota allowed
        :param 'GetServerSpecificationsNetworkTrafficOutputQuotaUsedArgs' output_quota_used: Monthly output traffic consumed this month
        :param str reset_quota_date: Next reset quota date for traffic counter
        """
        pulumi.set(__self__, "input_quota_size", input_quota_size)
        pulumi.set(__self__, "input_quota_used", input_quota_used)
        pulumi.set(__self__, "is_throttled", is_throttled)
        pulumi.set(__self__, "output_quota_size", output_quota_size)
        pulumi.set(__self__, "output_quota_used", output_quota_used)
        pulumi.set(__self__, "reset_quota_date", reset_quota_date)

    @property
    @pulumi.getter(name="inputQuotaSize")
    def input_quota_size(self) -> 'outputs.GetServerSpecificationsNetworkTrafficInputQuotaSizeResult':
        """
        Monthly input traffic quota allowed
        """
        return pulumi.get(self, "input_quota_size")

    @property
    @pulumi.getter(name="inputQuotaUsed")
    def input_quota_used(self) -> 'outputs.GetServerSpecificationsNetworkTrafficInputQuotaUsedResult':
        """
        Monthly input traffic consumed this month
        """
        return pulumi.get(self, "input_quota_used")

    @property
    @pulumi.getter(name="isThrottled")
    def is_throttled(self) -> bool:
        """
        Whether bandwidth is throttleted for being over quota
        """
        return pulumi.get(self, "is_throttled")

    @property
    @pulumi.getter(name="outputQuotaSize")
    def output_quota_size(self) -> 'outputs.GetServerSpecificationsNetworkTrafficOutputQuotaSizeResult':
        """
        Monthly output traffic quota allowed
        """
        return pulumi.get(self, "output_quota_size")

    @property
    @pulumi.getter(name="outputQuotaUsed")
    def output_quota_used(self) -> 'outputs.GetServerSpecificationsNetworkTrafficOutputQuotaUsedResult':
        """
        Monthly output traffic consumed this month
        """
        return pulumi.get(self, "output_quota_used")

    @property
    @pulumi.getter(name="resetQuotaDate")
    def reset_quota_date(self) -> str:
        """
        Next reset quota date for traffic counter
        """
        return pulumi.get(self, "reset_quota_date")


@pulumi.output_type
class GetServerSpecificationsNetworkTrafficInputQuotaSizeResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: float):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServerSpecificationsNetworkTrafficInputQuotaUsedResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: float):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServerSpecificationsNetworkTrafficOutputQuotaSizeResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: float):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServerSpecificationsNetworkTrafficOutputQuotaUsedResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: float):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServerSpecificationsNetworkVmacResult(dict):
    def __init__(__self__, *,
                 supported: bool):
        """
        :param bool supported: Whether server is compatible vmac
        """
        pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter
    def supported(self) -> bool:
        """
        Whether server is compatible vmac
        """
        return pulumi.get(self, "supported")


@pulumi.output_type
class GetServerSpecificationsNetworkVrackResult(dict):
    def __init__(__self__, *,
                 bandwidth: 'outputs.GetServerSpecificationsNetworkVrackBandwidthResult',
                 type: str):
        """
        :param 'GetServerSpecificationsNetworkVrackBandwidthArgs' bandwidth: vrack bandwidth limitation
        :param str type: Bandwidth offer type (included┃standard)
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def bandwidth(self) -> 'outputs.GetServerSpecificationsNetworkVrackBandwidthResult':
        """
        vrack bandwidth limitation
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Bandwidth offer type (included┃standard)
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServerSpecificationsNetworkVrackBandwidthResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: float):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


