<?xml version="1.0" encoding="UTF-8"?>
<sch:schema xmlns:sch="http://purl.oclc.org/dsdl/schematron">
  <sch:ns prefix="srv" uri="http://standards.iso.org/iso/19115/-3/srv/2.0"/>
  <!--
    ISO 19115-3 base requirements for metadata instance documents

    See ISO19115-1:2014(E) page 23, Figure 18 Service metadata information classes
  -->

  <!--
    Rule: SV_ServiceIdentification
    Ref: {count(containsChain + containsOperations) > 0}
    -->

  <sch:pattern id="rule.srv.chainoroperations">
    <sch:title>Service identification MUST contains chain or operations</sch:title>
    <sch:rule context="//srv:SV_ServiceIdentification">
      <!-- Consider only containsChain or operationsName
      having a name. -->
      <sch:let name="chains" value="srv:containsChain[
        normalize-space(srv:SV_OperationChainMetadata/srv:name) != '']"/>
      <sch:let name="operations" value="srv:containsOperations[
        normalize-space(srv:SV_OperationMetadata/srv:operationName) != '']"/>
      <sch:let name="hasChainOrOperation"
        value="count($operations) + count($chains) > 0"/>

      <sch:assert test="$hasChainOrOperation">
	The service identification does not contain chain or operation.
      </sch:assert>
    </sch:rule>
  </sch:pattern>


  <!--
    Rule: SV_ServiceIdentification
    Ref:  {If coupledResource exists then count(coupledResource) > 0}
    Comment: Can't be validated using schematron AFA the existence
    of the related object can't be defined. TODO-QUESTION
    -->


  <!--
    Rule: SV_ServiceIdentification
    Ref: {If coupledResource exists then count(couplingType) > 0}
    -->
  <sch:pattern id="rule.srv.coupledresource">
    <sch:title>Service identification MUST specify coupling type
      when coupled resource exist</sch:title>
    <sch:rule context="//srv:SV_ServiceIdentification[srv:coupledResource]">

      <sch:let name="couplingType"
               value="srv:couplingType/
                        srv:SV_CouplingType/@codeListValue[. != '']"/>
      <sch:let name="coupledResource" value="srv:coupledResource"/>
      <sch:let name="hasCouplingType"
        value="count($couplingType) > 0"/>

      <sch:assert test="$hasCouplingType">
	The service identification MUST specify coupling type when coupled resource exist
      </sch:assert>
    </sch:rule>
  </sch:pattern>



  <!--
    Rule: SV_ServiceIdentification
    Ref: {If operatedDataset used then count (operatesOn) = 0}
    -->
  <sch:pattern id="rule.srv.operateddataset">
    <sch:title>Service identification MUST not use
      both operatedDataset and operatesOn</sch:title>

    <sch:rule context="//srv:SV_ServiceIdentification[srv:operatedDataset]">

      <sch:let name="operatesOn" value="srv:operatesOn"/>
      <sch:let name="hasOperatesOn"
        value="count($operatesOn) > 0"/>

      <sch:assert test="not($hasOperatesOn)">
	The service identification define operatedDataset. No operatesOn can be specified.
      </sch:assert>
    </sch:rule>
  </sch:pattern>

  <!--
    Rule: SV_ServiceIdentification
    Ref: {If operatesOn used count(operatedDataset) = 0}
    -->
  <sch:pattern id="rule.srv.operatesononly">
    <sch:title>Service identification MUST not use
      both operatesOn and operatedDataset</sch:title>
    <sch:rule context="//srv:SV_ServiceIdentification[srv:operatesOn]">

      <sch:let name="operatedDataset" value="srv:operatedDataset"/>

      <sch:let name="hasOperatedDataset"
        value="count($operatedDataset) > 0"/>

      <sch:assert test="not($hasOperatedDataset)">
	The service identification define operatesOn. No operatedDataset can be specified.
      </sch:assert>
    </sch:rule>
  </sch:pattern>



  <!--
    Rule: SV_CoupledResource
    Ref: {count(resourceReference + resource) > 0}
  -->

  <sch:pattern id="rule.srv.harresourcereforresource">
    <sch:title>Coupled resource MUST contains
      a resource or a resource reference</sch:title>
    <sch:rule context="//srv:SV_CoupledResource">
      <sch:let name="resourceReference" value="srv:resourceReference"/>
      <sch:let name="resource" value="srv:resource"/>

      <sch:let name="hasResourceReferenceOrResource"
        value="count($resourceReference) + count($resource) > 0"/>

      <sch:assert test="$hasResourceReferenceOrResource">
	The coupled resource does not contains a resource nor a resource reference.
      </sch:assert>
    </sch:rule>
  </sch:pattern>






  <!--
    Rule: SV_CoupledResource
    Ref: {If resource used then count(resourceReference) = 0}
  -->
  <sch:pattern id="rule.srv.coupledresourceonlyresource">
    <sch:title>Coupled resource MUST not use
      both resource and resource reference</sch:title>
    <sch:rule context="//srv:SV_CoupledResource[srv:resource]">

      <sch:let name="resourceReference" value="srv:resourceReference"/>
      <sch:let name="hasResourceReference"
        value="count($resourceReference) > 0"/>

      <sch:assert test="not($hasResourceReference)">
	The coupled resource contains both a resource and a resource reference.
      </sch:assert>
    </sch:rule>
  </sch:pattern>


  <!--
    Rule: SV_CoupledResource
    Ref: {If resourceReference used then count(resource) = 0}
  -->

  <sch:pattern id="rule.srv.coupledresourceonlyresourceref">
    <sch:title>Coupled resource MUST not use
      both resource and resource reference</sch:title>
    <sch:rule context="//srv:SV_CoupledResource[srv:resourceReference]">

      <sch:let name="resource" value="srv:resource"/>
      <sch:let name="hasResource"
        value="count($resource) > 0"/>

      <sch:assert test="not($hasResource)">
	The coupled resource contains both a resource and a resource reference.
      </sch:assert>
    </sch:rule>
  </sch:pattern>
</sch:schema>
