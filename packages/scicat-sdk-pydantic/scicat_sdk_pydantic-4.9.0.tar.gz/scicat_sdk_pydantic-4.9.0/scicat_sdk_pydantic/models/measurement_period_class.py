# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictStr

class MeasurementPeriodClass(BaseModel):
    """
    MeasurementPeriodClass
    """
    created_by: StrictStr = Field(default=..., alias="createdBy", description="Indicate the user who created this record. This property is added and maintained by the system.")
    updated_by: StrictStr = Field(default=..., alias="updatedBy", description="Indicate the user who updated this record last. This property is added and maintained by the system.")
    created_at: datetime = Field(default=..., alias="createdAt", description="Date and time when this record was created. This field is managed by mongoose with through the timestamp settings. The field should be a string containing a date in ISO 8601 format (2024-02-27T12:26:57.313Z)")
    updated_at: datetime = Field(default=..., alias="updatedAt", description="Date and time when this record was updated last. This field is managed by mongoose with through the timestamp settings. The field should be a string containing a date in ISO 8601 format (2024-02-27T12:26:57.313Z)")
    instrument: StrictStr = Field(default=..., description="Instrument or beamline identifier where measurement was pursued, e.g. /PSI/SLS/TOMCAT")
    start: datetime = Field(default=..., description="Time when measurement period started, format according to chapter 5.6 internet date/time format in RFC 3339. Local times without timezone/offset info are automatically transformed to UTC using the timezone of the API server.")
    end: datetime = Field(default=..., description="Time when measurement period ended, format according to chapter 5.6 internet date/time format in RFC 3339. Local times without timezone/offset info are automatically transformed to UTC using the timezone of the API server.")
    comment: StrictStr = Field(default=..., description="Additional information relevant for this measurement period, e.g. if different accounts were used for data taking.")
    __properties = ["createdBy", "updatedBy", "createdAt", "updatedAt", "instrument", "start", "end", "comment"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MeasurementPeriodClass:
        """Create an instance of MeasurementPeriodClass from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MeasurementPeriodClass:
        """Create an instance of MeasurementPeriodClass from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MeasurementPeriodClass.parse_obj(obj)

        _obj = MeasurementPeriodClass.parse_obj({
            "created_by": obj.get("createdBy"),
            "updated_by": obj.get("updatedBy"),
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt"),
            "instrument": obj.get("instrument"),
            "start": obj.get("start"),
            "end": obj.get("end"),
            "comment": obj.get("comment")
        })
        return _obj


