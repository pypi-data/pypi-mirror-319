# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from scicat_sdk_pydantic.models.data_file import DataFile

class CreateOrigDatablockDto(BaseModel):
    """
    CreateOrigDatablockDto
    """
    owner_group: Optional[StrictStr] = Field(default=None, alias="ownerGroup", description="Name of the group owning this item. If it is not specified, the datasets owner group is used.")
    access_groups: Optional[conlist(StrictStr)] = Field(default=None, alias="accessGroups", description="List of groups which have access to this item.")
    instrument_group: Optional[StrictStr] = Field(default=None, alias="instrumentGroup", description="Group of the instrument which this item was acquired on.")
    size: Union[StrictFloat, StrictInt] = Field(default=..., description="Total size of the files in this orig datablock")
    chk_alg: Optional[StrictStr] = Field(default=None, alias="chkAlg", description="Name of the hashing algorithm used to compute the hash for each file.")
    data_file_list: conlist(DataFile) = Field(default=..., alias="dataFileList", description="List of the files contained in this orig datablock.")
    dataset_id: StrictStr = Field(default=..., alias="datasetId", description="Persistent identifier of the dataset this orig datablock belongs to.")
    __properties = ["ownerGroup", "accessGroups", "instrumentGroup", "size", "chkAlg", "dataFileList", "datasetId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateOrigDatablockDto:
        """Create an instance of CreateOrigDatablockDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in data_file_list (list)
        _items = []
        if self.data_file_list:
            for _item in self.data_file_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dataFileList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateOrigDatablockDto:
        """Create an instance of CreateOrigDatablockDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateOrigDatablockDto.parse_obj(obj)

        _obj = CreateOrigDatablockDto.parse_obj({
            "owner_group": obj.get("ownerGroup"),
            "access_groups": obj.get("accessGroups"),
            "instrument_group": obj.get("instrumentGroup"),
            "size": obj.get("size"),
            "chk_alg": obj.get("chkAlg"),
            "data_file_list": [DataFile.from_dict(_item) for _item in obj.get("dataFileList")] if obj.get("dataFileList") is not None else None,
            "dataset_id": obj.get("datasetId")
        })
        return _obj


