# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from scicat_sdk_pydantic.models.measurement_period_class import MeasurementPeriodClass

class ProposalClass(BaseModel):
    """
    ProposalClass
    """
    created_by: StrictStr = Field(default=..., alias="createdBy", description="Indicate the user who created this record. This property is added and maintained by the system.")
    updated_by: StrictStr = Field(default=..., alias="updatedBy", description="Indicate the user who updated this record last. This property is added and maintained by the system.")
    created_at: datetime = Field(default=..., alias="createdAt", description="Date and time when this record was created. This field is managed by mongoose with through the timestamp settings. The field should be a string containing a date in ISO 8601 format (2024-02-27T12:26:57.313Z)")
    updated_at: datetime = Field(default=..., alias="updatedAt", description="Date and time when this record was updated last. This field is managed by mongoose with through the timestamp settings. The field should be a string containing a date in ISO 8601 format (2024-02-27T12:26:57.313Z)")
    owner_group: StrictStr = Field(default=..., alias="ownerGroup", description="Defines the group which owns the data, and therefore has unrestricted access to this data. Usually a pgroup like p12151")
    access_groups: conlist(StrictStr) = Field(default=..., alias="accessGroups", description="Optional additional groups which have read access to the data. Users which are members in one of the groups listed here are allowed to access this data. The special group 'public' makes data available to all users.")
    instrument_group: Optional[StrictStr] = Field(default=None, alias="instrumentGroup", description="Optional additional groups which have read and write access to the data. Users which are members in one of the groups listed here are allowed to access this data.")
    is_published: StrictBool = Field(default=..., alias="isPublished", description="Flag is true when data are made publicly available.")
    proposal_id: StrictStr = Field(default=..., alias="proposalId", description="Globally unique identifier of a proposal, eg. PID-prefix/internal-proposal-number. PID prefix is auto prepended.")
    pi_email: Optional[StrictStr] = Field(default=None, description="Email of principal investigator.")
    pi_firstname: Optional[StrictStr] = Field(default=None, description="First name of principal investigator.")
    pi_lastname: Optional[StrictStr] = Field(default=None, description="Last name of principal investigator.")
    email: StrictStr = Field(default=..., description="Email of main proposer.")
    firstname: Optional[StrictStr] = Field(default=None, description="First name of main proposer.")
    lastname: Optional[StrictStr] = Field(default=None, description="Last name of main proposer.")
    title: StrictStr = Field(default=..., description="The title of the proposal.")
    abstract: Optional[StrictStr] = Field(default=None, description="The proposal abstract.")
    start_time: Optional[datetime] = Field(default=None, alias="startTime", description="The date when the data collection starts.")
    end_time: Optional[datetime] = Field(default=None, alias="endTime", description="The date when data collection finishes.")
    measurement_period_list: Optional[conlist(MeasurementPeriodClass)] = Field(default=None, alias="MeasurementPeriodList", description="Embedded information used inside proposals to define which type of experiment has to be pursued, where (at which instrument) and when.")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="JSON object containing the proposal metadata.")
    parent_proposal_id: Optional[StrictStr] = Field(default=None, alias="parentProposalId", description="Parent proposal id")
    type: StrictStr = Field(default=..., description="Characterize type of proposal, use some of the configured values")
    __properties = ["createdBy", "updatedBy", "createdAt", "updatedAt", "ownerGroup", "accessGroups", "instrumentGroup", "isPublished", "proposalId", "pi_email", "pi_firstname", "pi_lastname", "email", "firstname", "lastname", "title", "abstract", "startTime", "endTime", "MeasurementPeriodList", "metadata", "parentProposalId", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProposalClass:
        """Create an instance of ProposalClass from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in measurement_period_list (list)
        _items = []
        if self.measurement_period_list:
            for _item in self.measurement_period_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['MeasurementPeriodList'] = _items
        # set to None if parent_proposal_id (nullable) is None
        # and __fields_set__ contains the field
        if self.parent_proposal_id is None and "parent_proposal_id" in self.__fields_set__:
            _dict['parentProposalId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProposalClass:
        """Create an instance of ProposalClass from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProposalClass.parse_obj(obj)

        _obj = ProposalClass.parse_obj({
            "created_by": obj.get("createdBy"),
            "updated_by": obj.get("updatedBy"),
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt"),
            "owner_group": obj.get("ownerGroup"),
            "access_groups": obj.get("accessGroups"),
            "instrument_group": obj.get("instrumentGroup"),
            "is_published": obj.get("isPublished") if obj.get("isPublished") is not None else False,
            "proposal_id": obj.get("proposalId"),
            "pi_email": obj.get("pi_email"),
            "pi_firstname": obj.get("pi_firstname"),
            "pi_lastname": obj.get("pi_lastname"),
            "email": obj.get("email"),
            "firstname": obj.get("firstname"),
            "lastname": obj.get("lastname"),
            "title": obj.get("title"),
            "abstract": obj.get("abstract"),
            "start_time": obj.get("startTime"),
            "end_time": obj.get("endTime"),
            "measurement_period_list": [MeasurementPeriodClass.from_dict(_item) for _item in obj.get("MeasurementPeriodList")] if obj.get("MeasurementPeriodList") is not None else None,
            "metadata": obj.get("metadata"),
            "parent_proposal_id": obj.get("parentProposalId"),
            "type": obj.get("type") if obj.get("type") is not None else 'Default Proposal'
        })
        return _obj


