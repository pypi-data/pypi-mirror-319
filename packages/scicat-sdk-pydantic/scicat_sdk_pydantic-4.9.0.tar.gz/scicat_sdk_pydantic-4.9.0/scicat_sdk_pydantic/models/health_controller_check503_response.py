# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, StrictStr
from scicat_sdk_pydantic.models.health_controller_check200_response_info_value import HealthControllerCheck200ResponseInfoValue

class HealthControllerCheck503Response(BaseModel):
    """
    HealthControllerCheck503Response
    """
    status: Optional[StrictStr] = None
    info: Optional[Dict[str, HealthControllerCheck200ResponseInfoValue]] = None
    error: Optional[Dict[str, HealthControllerCheck200ResponseInfoValue]] = None
    details: Optional[Dict[str, HealthControllerCheck200ResponseInfoValue]] = None
    __properties = ["status", "info", "error", "details"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HealthControllerCheck503Response:
        """Create an instance of HealthControllerCheck503Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in info (dict)
        _field_dict = {}
        if self.info:
            for _key in self.info:
                if self.info[_key]:
                    _field_dict[_key] = self.info[_key].to_dict()
            _dict['info'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in error (dict)
        _field_dict = {}
        if self.error:
            for _key in self.error:
                if self.error[_key]:
                    _field_dict[_key] = self.error[_key].to_dict()
            _dict['error'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in details (dict)
        _field_dict = {}
        if self.details:
            for _key in self.details:
                if self.details[_key]:
                    _field_dict[_key] = self.details[_key].to_dict()
            _dict['details'] = _field_dict
        # set to None if info (nullable) is None
        # and __fields_set__ contains the field
        if self.info is None and "info" in self.__fields_set__:
            _dict['info'] = None

        # set to None if error (nullable) is None
        # and __fields_set__ contains the field
        if self.error is None and "error" in self.__fields_set__:
            _dict['error'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HealthControllerCheck503Response:
        """Create an instance of HealthControllerCheck503Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HealthControllerCheck503Response.parse_obj(obj)

        _obj = HealthControllerCheck503Response.parse_obj({
            "status": obj.get("status"),
            "info": dict(
                (_k, HealthControllerCheck200ResponseInfoValue.from_dict(_v))
                for _k, _v in obj.get("info").items()
            )
            if obj.get("info") is not None
            else None,
            "error": dict(
                (_k, HealthControllerCheck200ResponseInfoValue.from_dict(_v))
                for _k, _v in obj.get("error").items()
            )
            if obj.get("error") is not None
            else None,
            "details": dict(
                (_k, HealthControllerCheck200ResponseInfoValue.from_dict(_v))
                for _k, _v in obj.get("details").items()
            )
            if obj.get("details") is not None
            else None
        })
        return _obj


