# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class CreateAttachmentDto(BaseModel):
    """
    CreateAttachmentDto
    """
    owner_group: StrictStr = Field(default=..., alias="ownerGroup", description="Name of the group owning this item.")
    access_groups: Optional[conlist(StrictStr)] = Field(default=None, alias="accessGroups", description="List of groups which have access to this item.")
    instrument_group: Optional[StrictStr] = Field(default=None, alias="instrumentGroup", description="Group of the instrument which this item was acquired on.")
    id: Optional[StrictStr] = None
    dataset_id: Optional[StrictStr] = Field(default=None, alias="datasetId")
    proposal_id: Optional[StrictStr] = Field(default=None, alias="proposalId")
    sample_id: Optional[StrictStr] = Field(default=None, alias="sampleId")
    thumbnail: Optional[StrictStr] = None
    caption: StrictStr = Field(...)
    __properties = ["ownerGroup", "accessGroups", "instrumentGroup", "id", "datasetId", "proposalId", "sampleId", "thumbnail", "caption"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateAttachmentDto:
        """Create an instance of CreateAttachmentDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateAttachmentDto:
        """Create an instance of CreateAttachmentDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateAttachmentDto.parse_obj(obj)

        _obj = CreateAttachmentDto.parse_obj({
            "owner_group": obj.get("ownerGroup"),
            "access_groups": obj.get("accessGroups"),
            "instrument_group": obj.get("instrumentGroup"),
            "id": obj.get("id"),
            "dataset_id": obj.get("datasetId"),
            "proposal_id": obj.get("proposalId"),
            "sample_id": obj.get("sampleId"),
            "thumbnail": obj.get("thumbnail"),
            "caption": obj.get("caption")
        })
        return _obj


