# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist

class PartialUpdatePublishedDataDto(BaseModel):
    """
    PartialUpdatePublishedDataDto
    """
    doi: Optional[StrictStr] = None
    affiliation: Optional[StrictStr] = None
    creator: Optional[conlist(StrictStr)] = None
    publisher: Optional[StrictStr] = None
    publication_year: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="publicationYear")
    title: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    abstract: Optional[StrictStr] = None
    data_description: Optional[StrictStr] = Field(default=None, alias="dataDescription")
    resource_type: Optional[StrictStr] = Field(default=None, alias="resourceType")
    number_of_files: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="numberOfFiles")
    size_of_archive: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="sizeOfArchive")
    pid_array: Optional[conlist(StrictStr)] = Field(default=None, alias="pidArray")
    authors: Optional[conlist(StrictStr)] = None
    registered_time: Optional[datetime] = Field(default=None, alias="registeredTime")
    status: Optional[StrictStr] = None
    scicat_user: Optional[StrictStr] = Field(default=None, alias="scicatUser")
    thumbnail: Optional[StrictStr] = None
    related_publications: Optional[conlist(StrictStr)] = Field(default=None, alias="relatedPublications")
    download_link: Optional[StrictStr] = Field(default=None, alias="downloadLink")
    __properties = ["doi", "affiliation", "creator", "publisher", "publicationYear", "title", "url", "abstract", "dataDescription", "resourceType", "numberOfFiles", "sizeOfArchive", "pidArray", "authors", "registeredTime", "status", "scicatUser", "thumbnail", "relatedPublications", "downloadLink"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PartialUpdatePublishedDataDto:
        """Create an instance of PartialUpdatePublishedDataDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PartialUpdatePublishedDataDto:
        """Create an instance of PartialUpdatePublishedDataDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PartialUpdatePublishedDataDto.parse_obj(obj)

        _obj = PartialUpdatePublishedDataDto.parse_obj({
            "doi": obj.get("doi"),
            "affiliation": obj.get("affiliation"),
            "creator": obj.get("creator"),
            "publisher": obj.get("publisher"),
            "publication_year": obj.get("publicationYear"),
            "title": obj.get("title"),
            "url": obj.get("url"),
            "abstract": obj.get("abstract"),
            "data_description": obj.get("dataDescription"),
            "resource_type": obj.get("resourceType"),
            "number_of_files": obj.get("numberOfFiles"),
            "size_of_archive": obj.get("sizeOfArchive"),
            "pid_array": obj.get("pidArray"),
            "authors": obj.get("authors"),
            "registered_time": obj.get("registeredTime"),
            "status": obj.get("status"),
            "scicat_user": obj.get("scicatUser"),
            "thumbnail": obj.get("thumbnail"),
            "related_publications": obj.get("relatedPublications"),
            "download_link": obj.get("downloadLink")
        })
        return _obj


