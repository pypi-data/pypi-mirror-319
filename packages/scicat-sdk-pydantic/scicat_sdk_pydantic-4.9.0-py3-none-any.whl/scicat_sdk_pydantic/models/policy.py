# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist

class Policy(BaseModel):
    """
    Policy
    """
    created_by: StrictStr = Field(default=..., alias="createdBy", description="Indicate the user who created this record. This property is added and maintained by the system.")
    updated_by: StrictStr = Field(default=..., alias="updatedBy", description="Indicate the user who updated this record last. This property is added and maintained by the system.")
    created_at: datetime = Field(default=..., alias="createdAt", description="Date and time when this record was created. This field is managed by mongoose with through the timestamp settings. The field should be a string containing a date in ISO 8601 format (2024-02-27T12:26:57.313Z)")
    updated_at: datetime = Field(default=..., alias="updatedAt", description="Date and time when this record was updated last. This field is managed by mongoose with through the timestamp settings. The field should be a string containing a date in ISO 8601 format (2024-02-27T12:26:57.313Z)")
    owner_group: StrictStr = Field(default=..., alias="ownerGroup", description="Defines the group which owns the data, and therefore has unrestricted access to this data. Usually a pgroup like p12151")
    access_groups: conlist(StrictStr) = Field(default=..., alias="accessGroups", description="Optional additional groups which have read access to the data. Users which are members in one of the groups listed here are allowed to access this data. The special group 'public' makes data available to all users.")
    instrument_group: Optional[StrictStr] = Field(default=None, alias="instrumentGroup", description="Optional additional groups which have read and write access to the data. Users which are members in one of the groups listed here are allowed to access this data.")
    is_published: StrictBool = Field(default=..., alias="isPublished", description="Flag is true when data are made publicly available.")
    id: StrictStr = Field(default=..., alias="_id")
    manager: conlist(StrictStr) = Field(default=..., description="Defines the emails of users that can modify the policy parameters")
    tape_redundancy: StrictStr = Field(default=..., alias="tapeRedundancy", description="Defines the level of redundancy in storage to minimize loss of data. Allowed values are low, medium, high. Low could e.g. mean one tape copy only, medium could mean two tape copies and high two geo-redundant tape copies")
    auto_archive: StrictBool = Field(default=..., alias="autoArchive", description="Flag to indicate that a dataset should be automatically archived after ingest. If false then archive delay is ignored")
    auto_archive_delay: Union[StrictFloat, StrictInt] = Field(default=..., alias="autoArchiveDelay", description="Number of days after dataset creation that (remaining) datasets are archived automatically")
    archive_email_notification: StrictBool = Field(default=..., alias="archiveEmailNotification", description="Flag is true when an email notification should be sent to archiveEmailsToBeNotified upon an archive job creation")
    archive_emails_to_be_notified: conlist(StrictStr) = Field(default=..., alias="archiveEmailsToBeNotified", description="Array of additional email addresses that should be notified up an archive job creation")
    retrieve_email_notification: StrictBool = Field(default=..., alias="retrieveEmailNotification", description="Flag is true when an email notification should be sent to retrieveEmailsToBeNotified upon a retrieval job creation")
    retrieve_emails_to_be_notified: conlist(StrictStr) = Field(default=..., alias="retrieveEmailsToBeNotified", description="Array of additional email addresses that should be notified up a retrieval job creation")
    embargo_period: Union[StrictFloat, StrictInt] = Field(default=..., alias="embargoPeriod", description="Number of years after dataset creation before the dataset becomes public")
    __properties = ["createdBy", "updatedBy", "createdAt", "updatedAt", "ownerGroup", "accessGroups", "instrumentGroup", "isPublished", "_id", "manager", "tapeRedundancy", "autoArchive", "autoArchiveDelay", "archiveEmailNotification", "archiveEmailsToBeNotified", "retrieveEmailNotification", "retrieveEmailsToBeNotified", "embargoPeriod"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Policy:
        """Create an instance of Policy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Policy:
        """Create an instance of Policy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Policy.parse_obj(obj)

        _obj = Policy.parse_obj({
            "created_by": obj.get("createdBy"),
            "updated_by": obj.get("updatedBy"),
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt"),
            "owner_group": obj.get("ownerGroup"),
            "access_groups": obj.get("accessGroups"),
            "instrument_group": obj.get("instrumentGroup"),
            "is_published": obj.get("isPublished") if obj.get("isPublished") is not None else False,
            "id": obj.get("_id"),
            "manager": obj.get("manager"),
            "tape_redundancy": obj.get("tapeRedundancy"),
            "auto_archive": obj.get("autoArchive"),
            "auto_archive_delay": obj.get("autoArchiveDelay"),
            "archive_email_notification": obj.get("archiveEmailNotification"),
            "archive_emails_to_be_notified": obj.get("archiveEmailsToBeNotified"),
            "retrieve_email_notification": obj.get("retrieveEmailNotification"),
            "retrieve_emails_to_be_notified": obj.get("retrieveEmailsToBeNotified"),
            "embargo_period": obj.get("embargoPeriod")
        })
        return _obj


