# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist

class PublishedData(BaseModel):
    """
    PublishedData
    """
    doi: StrictStr = Field(default=..., description="Digital Object Identifier; e.g., \"10.xxx/9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d\".")
    affiliation: Optional[StrictStr] = Field(default=None, description="Creator Affiliation.  This field has the semantics of [DataCite Creator/affiliation](https://datacite-metadata-schema.readthedocs.io/en/4.5/properties/creator/#affiliation).")
    creator: conlist(StrictStr) = Field(default=..., description="Creator of dataset/dataset collection.  This field has the semantics of Dublin Core [dcmi:creator](https://www.dublincore.org/specifications/dublin-core/dcmi-terms/terms/creator/) and [DataCite Creator/creatorName](https://datacite-metadata-schema.readthedocs.io/en/4.5/properties/creator/#creatorname).")
    publisher: StrictStr = Field(default=..., description="Dataset publisher.  This field has the semantics of Dublin Core [dcmi:publisher](https://www.dublincore.org/specifications/dublin-core/dcmi-terms/terms/publisher/) and [DataCite publisher](https://datacite-metadata-schema.readthedocs.io/en/4.5/properties/publisher).")
    publication_year: Union[StrictFloat, StrictInt] = Field(default=..., alias="publicationYear", description="Year of publication.  This field has the semantics of Dublin Core [dcmi:date](https://www.dublincore.org/specifications/dublin-core/dcmi-terms/terms/date/) and [DataCite publicationYear](https://datacite-metadata-schema.readthedocs.io/en/4.5/properties/publicationyear/).")
    title: StrictStr = Field(default=..., description="The title of the data.  This field has the semantics of Dublin Core [dcmi:title](https://www.dublincore.org/specifications/dublin-core/dcmi-terms/terms/title/) and [DataCite title](https://datacite-metadata-schema.readthedocs.io/en/4.5/properties/title/).")
    url: Optional[StrictStr] = Field(default=None, description="Full URL to the landing page for this DOI")
    abstract: StrictStr = Field(default=..., description="Abstract text for published datasets.  This field has the semantics of [DataCite description](https://datacite-metadata-schema.readthedocs.io/en/4.5/properties/description/) with [Abstract descriptionType](https://datacite-metadata-schema.readthedocs.io/en/4.5/appendices/appendix-1/descriptionType/#abstract).")
    data_description: StrictStr = Field(default=..., alias="dataDescription", description="Link to description of how to re-use data.  This field has the semantics of Dublic Core [dcmi:description](https://www.dublincore.org/specifications/dublin-core/dcmi-terms/terms/description/) and [DataCite description](https://datacite-metadata-schema.readthedocs.io/en/4.5/properties/description/) with [Abstract descriptionType](https://datacite-metadata-schema.readthedocs.io/en/4.5/appendices/appendix-1/descriptionType/#abstract).")
    resource_type: StrictStr = Field(default=..., alias="resourceType", description="e.g. raw/ derived")
    number_of_files: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="numberOfFiles", description="Number of files")
    size_of_archive: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="sizeOfArchive", description="Size of archive")
    pid_array: conlist(StrictStr) = Field(default=..., alias="pidArray", description="Array of one or more Dataset persistent identifier (pid) values that make up the published data.")
    authors: Optional[conlist(StrictStr)] = Field(default=None, description="List of Names of authors of the to be published data")
    registered_time: datetime = Field(default=..., alias="registeredTime", description="Time when doi is successfully registered")
    status: StrictStr = Field(default=..., description="Indication of position in publication workflow e.g. doiRegistered")
    scicat_user: Optional[StrictStr] = Field(default=None, alias="scicatUser", description="The username of the user that clicks the publish button in the client")
    thumbnail: Optional[StrictStr] = Field(default=None, description="Small, less than 16 MB base 64 image preview of dataset")
    related_publications: Optional[conlist(StrictStr)] = Field(default=None, alias="relatedPublications", description="List of URLs pointing to related publications like DOI URLS of journal articles")
    download_link: Optional[StrictStr] = Field(default=None, alias="downloadLink", description="URL pointing to page from which data can be downloaded")
    created_at: datetime = Field(default=..., alias="createdAt", description="Date when the published data was created. This property is added and maintained by the system")
    updated_at: datetime = Field(default=..., alias="updatedAt", description="Date when the published data was last updated. This property is added and maintained by the system")
    __properties = ["doi", "affiliation", "creator", "publisher", "publicationYear", "title", "url", "abstract", "dataDescription", "resourceType", "numberOfFiles", "sizeOfArchive", "pidArray", "authors", "registeredTime", "status", "scicatUser", "thumbnail", "relatedPublications", "downloadLink", "createdAt", "updatedAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PublishedData:
        """Create an instance of PublishedData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PublishedData:
        """Create an instance of PublishedData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PublishedData.parse_obj(obj)

        _obj = PublishedData.parse_obj({
            "doi": obj.get("doi"),
            "affiliation": obj.get("affiliation"),
            "creator": obj.get("creator"),
            "publisher": obj.get("publisher"),
            "publication_year": obj.get("publicationYear"),
            "title": obj.get("title"),
            "url": obj.get("url"),
            "abstract": obj.get("abstract"),
            "data_description": obj.get("dataDescription"),
            "resource_type": obj.get("resourceType"),
            "number_of_files": obj.get("numberOfFiles"),
            "size_of_archive": obj.get("sizeOfArchive"),
            "pid_array": obj.get("pidArray"),
            "authors": obj.get("authors"),
            "registered_time": obj.get("registeredTime"),
            "status": obj.get("status"),
            "scicat_user": obj.get("scicatUser"),
            "thumbnail": obj.get("thumbnail"),
            "related_publications": obj.get("relatedPublications"),
            "download_link": obj.get("downloadLink"),
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj


