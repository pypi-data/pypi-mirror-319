# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class SearchDto(BaseModel):
    """
    SearchDto
    """
    text: Optional[StrictStr] = Field(default='', description="text query")
    owner_group: Optional[conlist(StrictStr)] = Field(default=None, alias="ownerGroup", description="ownerGroup")
    creation_location: Optional[conlist(StrictStr)] = Field(default=None, alias="creationLocation", description="creationLocation")
    type: Optional[conlist(StrictStr)] = Field(default=None, description="type")
    keywords: Optional[conlist(StrictStr)] = Field(default=None, description="keywords")
    is_published: Optional[StrictBool] = Field(default=False, alias="isPublished", description="isPublished")
    scientific: Optional[conlist(StrictStr)] = Field(default=None, description="scientificMetadata condition")
    __properties = ["text", "ownerGroup", "creationLocation", "type", "keywords", "isPublished", "scientific"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SearchDto:
        """Create an instance of SearchDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SearchDto:
        """Create an instance of SearchDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SearchDto.parse_obj(obj)

        _obj = SearchDto.parse_obj({
            "text": obj.get("text") if obj.get("text") is not None else '',
            "owner_group": obj.get("ownerGroup"),
            "creation_location": obj.get("creationLocation"),
            "type": obj.get("type"),
            "keywords": obj.get("keywords"),
            "is_published": obj.get("isPublished") if obj.get("isPublished") is not None else False,
            "scientific": obj.get("scientific")
        })
        return _obj


