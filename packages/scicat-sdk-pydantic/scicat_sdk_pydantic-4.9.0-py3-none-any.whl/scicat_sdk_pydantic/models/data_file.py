# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class DataFile(BaseModel):
    """
    DataFile
    """
    path: StrictStr = Field(default=..., description="Relative path of the file within the dataset folder.")
    size: Union[StrictFloat, StrictInt] = Field(default=..., description="Uncompressed file size in bytes.")
    time: datetime = Field(default=..., description="Time of file creation on disk, format according to chapter 5.6 internet date/time format in RFC 3339. Local times without timezone/offset info are automatically transformed to UTC using the timezone of the API server.")
    chk: Optional[StrictStr] = Field(default=None, description="Checksum for the file, e.g. its sha-2 hashstring. The hash algorithm should be encoded in the (Orig)Datablock.")
    uid: Optional[StrictStr] = Field(default=None, description="User ID name as seen on filesystem.")
    gid: Optional[StrictStr] = Field(default=None, description="Group ID name as seen on filesystem.")
    perm: Optional[StrictStr] = Field(default=None, description="Posix permission bits.")
    __properties = ["path", "size", "time", "chk", "uid", "gid", "perm"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DataFile:
        """Create an instance of DataFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DataFile:
        """Create an instance of DataFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DataFile.parse_obj(obj)

        _obj = DataFile.parse_obj({
            "path": obj.get("path"),
            "size": obj.get("size"),
            "time": obj.get("time"),
            "chk": obj.get("chk"),
            "uid": obj.get("uid"),
            "gid": obj.get("gid"),
            "perm": obj.get("perm")
        })
        return _obj


