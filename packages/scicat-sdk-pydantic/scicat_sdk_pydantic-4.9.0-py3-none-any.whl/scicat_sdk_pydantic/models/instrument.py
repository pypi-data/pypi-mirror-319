# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class Instrument(BaseModel):
    """
    Instrument
    """
    pid: StrictStr = Field(default=..., description="PID of the instrument.")
    unique_name: StrictStr = Field(default=..., alias="uniqueName", description="The unique name of the instrument. This name has to be unique within the scicat instance.")
    name: StrictStr = Field(default=..., description="The common name of the instrument. This name can be non unique as it is the name that users use to commonly refer to this instrument.")
    custom_metadata: Optional[Dict[str, Any]] = Field(default=None, alias="customMetadata", description="JSON object containing custom metadata.")
    __properties = ["pid", "uniqueName", "name", "customMetadata"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Instrument:
        """Create an instance of Instrument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Instrument:
        """Create an instance of Instrument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Instrument.parse_obj(obj)

        _obj = Instrument.parse_obj({
            "pid": obj.get("pid"),
            "unique_name": obj.get("uniqueName"),
            "name": obj.get("name"),
            "custom_metadata": obj.get("customMetadata")
        })
        return _obj


