# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from scicat_sdk_pydantic.models.create_measurement_period_dto import CreateMeasurementPeriodDto

class PartialUpdateProposalDto(BaseModel):
    """
    PartialUpdateProposalDto
    """
    owner_group: Optional[StrictStr] = Field(default=None, alias="ownerGroup", description="Name of the group owning this item.")
    access_groups: Optional[conlist(StrictStr)] = Field(default=None, alias="accessGroups", description="List of groups which have access to this item.")
    instrument_group: Optional[StrictStr] = Field(default=None, alias="instrumentGroup", description="Group of the instrument which this item was acquired on.")
    pi_email: Optional[StrictStr] = Field(default=None, description="Email of principal investigator.")
    pi_firstname: Optional[StrictStr] = Field(default=None, description="First name of principal investigator.")
    pi_lastname: Optional[StrictStr] = Field(default=None, description="Last name of principal investigator.")
    email: Optional[StrictStr] = Field(default=None, description="Email of main proposer.")
    firstname: Optional[StrictStr] = Field(default=None, description="First name of main proposer.")
    lastname: Optional[StrictStr] = Field(default=None, description="Last name of main proposer.")
    title: Optional[StrictStr] = Field(default=None, description="The title of the proposal.")
    abstract: Optional[StrictStr] = Field(default=None, description="The proposal abstract.")
    start_time: Optional[datetime] = Field(default=None, alias="startTime", description="The date when the data collection starts.")
    end_time: Optional[datetime] = Field(default=None, alias="endTime", description="The date when data collection finishes.")
    measurement_period_list: Optional[conlist(CreateMeasurementPeriodDto)] = Field(default=None, alias="MeasurementPeriodList", description="Embedded information used inside proposals to define which type of experiment has to be pursued, where (at which instrument) and when.")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="JSON object containing the proposal metadata.")
    parent_proposal_id: Optional[StrictStr] = Field(default=None, alias="parentProposalId", description="Parent proposal id.")
    type: Optional[StrictStr] = Field(default=None, description="Characterize type of proposal, use some of the configured values")
    __properties = ["ownerGroup", "accessGroups", "instrumentGroup", "pi_email", "pi_firstname", "pi_lastname", "email", "firstname", "lastname", "title", "abstract", "startTime", "endTime", "MeasurementPeriodList", "metadata", "parentProposalId", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PartialUpdateProposalDto:
        """Create an instance of PartialUpdateProposalDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in measurement_period_list (list)
        _items = []
        if self.measurement_period_list:
            for _item in self.measurement_period_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['MeasurementPeriodList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PartialUpdateProposalDto:
        """Create an instance of PartialUpdateProposalDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PartialUpdateProposalDto.parse_obj(obj)

        _obj = PartialUpdateProposalDto.parse_obj({
            "owner_group": obj.get("ownerGroup"),
            "access_groups": obj.get("accessGroups"),
            "instrument_group": obj.get("instrumentGroup"),
            "pi_email": obj.get("pi_email"),
            "pi_firstname": obj.get("pi_firstname"),
            "pi_lastname": obj.get("pi_lastname"),
            "email": obj.get("email"),
            "firstname": obj.get("firstname"),
            "lastname": obj.get("lastname"),
            "title": obj.get("title"),
            "abstract": obj.get("abstract"),
            "start_time": obj.get("startTime"),
            "end_time": obj.get("endTime"),
            "measurement_period_list": [CreateMeasurementPeriodDto.from_dict(_item) for _item in obj.get("MeasurementPeriodList")] if obj.get("MeasurementPeriodList") is not None else None,
            "metadata": obj.get("metadata"),
            "parent_proposal_id": obj.get("parentProposalId"),
            "type": obj.get("type")
        })
        return _obj


