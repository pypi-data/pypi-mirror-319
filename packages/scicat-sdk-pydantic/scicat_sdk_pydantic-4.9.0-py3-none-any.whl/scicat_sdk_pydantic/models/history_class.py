# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictStr

class HistoryClass(BaseModel):
    """
    HistoryClass
    """
    id: StrictStr = Field(default=..., description="Persistent Identifier for datasets derived from UUIDv4 and prepended automatically by site specific PID prefix like 20.500.12345/")
    updated_at: datetime = Field(default=..., alias="updatedAt", description="Time when the update was performed. This field is managed by mongoose with through the timestamp settings. The field should be a string containing a date in ISO 8601 format (2024-02-27T12:26:57.313Z)")
    updated_by: StrictStr = Field(default=..., alias="updatedBy", description="Username of the user that performed the update.")
    __properties = ["id", "updatedAt", "updatedBy"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HistoryClass:
        """Create an instance of HistoryClass from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HistoryClass:
        """Create an instance of HistoryClass from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HistoryClass.parse_obj(obj)

        _obj = HistoryClass.parse_obj({
            "id": obj.get("id") if obj.get("id") is not None else 'f2f13d3b-95dd-4e94-9b06-3223ded623e1',
            "updated_at": obj.get("updatedAt"),
            "updated_by": obj.get("updatedBy")
        })
        return _obj


