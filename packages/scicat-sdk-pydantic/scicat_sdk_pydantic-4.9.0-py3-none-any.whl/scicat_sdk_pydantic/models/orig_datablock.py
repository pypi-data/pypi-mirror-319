# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from scicat_sdk_pydantic.models.data_file import DataFile

class OrigDatablock(BaseModel):
    """
    OrigDatablock
    """
    created_by: StrictStr = Field(default=..., alias="createdBy", description="Indicate the user who created this record. This property is added and maintained by the system.")
    updated_by: StrictStr = Field(default=..., alias="updatedBy", description="Indicate the user who updated this record last. This property is added and maintained by the system.")
    created_at: datetime = Field(default=..., alias="createdAt", description="Date and time when this record was created. This field is managed by mongoose with through the timestamp settings. The field should be a string containing a date in ISO 8601 format (2024-02-27T12:26:57.313Z)")
    updated_at: datetime = Field(default=..., alias="updatedAt", description="Date and time when this record was updated last. This field is managed by mongoose with through the timestamp settings. The field should be a string containing a date in ISO 8601 format (2024-02-27T12:26:57.313Z)")
    owner_group: StrictStr = Field(default=..., alias="ownerGroup", description="Defines the group which owns the data, and therefore has unrestricted access to this data. Usually a pgroup like p12151")
    access_groups: conlist(StrictStr) = Field(default=..., alias="accessGroups", description="Optional additional groups which have read access to the data. Users which are members in one of the groups listed here are allowed to access this data. The special group 'public' makes data available to all users.")
    instrument_group: Optional[StrictStr] = Field(default=None, alias="instrumentGroup", description="Optional additional groups which have read and write access to the data. Users which are members in one of the groups listed here are allowed to access this data.")
    is_published: StrictBool = Field(default=..., alias="isPublished", description="Flag is true when data are made publicly available.")
    id: StrictStr = Field(default=..., alias="_id")
    dataset_id: StrictStr = Field(default=..., alias="datasetId", description="PID of the dataset to which the orig datablock belongs.")
    size: Union[StrictFloat, StrictInt] = Field(default=..., description="Total size in bytes of all files contained in the dataFileList.")
    chk_alg: Optional[StrictStr] = Field(default=None, alias="chkAlg", description="Algorithm used for calculation of file checksums. Should be lowercase, e.g., sha2 or blake2b.")
    data_file_list: conlist(DataFile) = Field(default=..., alias="dataFileList", description="Embedded schema definitions for each file.")
    __properties = ["createdBy", "updatedBy", "createdAt", "updatedAt", "ownerGroup", "accessGroups", "instrumentGroup", "isPublished", "_id", "datasetId", "size", "chkAlg", "dataFileList"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrigDatablock:
        """Create an instance of OrigDatablock from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in data_file_list (list)
        _items = []
        if self.data_file_list:
            for _item in self.data_file_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dataFileList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrigDatablock:
        """Create an instance of OrigDatablock from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrigDatablock.parse_obj(obj)

        _obj = OrigDatablock.parse_obj({
            "created_by": obj.get("createdBy"),
            "updated_by": obj.get("updatedBy"),
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt"),
            "owner_group": obj.get("ownerGroup"),
            "access_groups": obj.get("accessGroups"),
            "instrument_group": obj.get("instrumentGroup"),
            "is_published": obj.get("isPublished") if obj.get("isPublished") is not None else False,
            "id": obj.get("_id"),
            "dataset_id": obj.get("datasetId"),
            "size": obj.get("size"),
            "chk_alg": obj.get("chkAlg"),
            "data_file_list": [DataFile.from_dict(_item) for _item in obj.get("dataFileList")] if obj.get("dataFileList") is not None else None
        })
        return _obj


