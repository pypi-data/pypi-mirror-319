# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict
from pydantic import BaseModel, Field, StrictStr
from scicat_sdk_pydantic.models.user_profile import UserProfile

class UserIdentity(BaseModel):
    """
    UserIdentity
    """
    auth_strategy: StrictStr = Field(default=..., alias="authStrategy")
    created: datetime = Field(...)
    credentials: Dict[str, Any] = Field(...)
    external_id: StrictStr = Field(default=..., alias="externalId")
    modified: datetime = Field(...)
    profile: UserProfile = Field(...)
    provider: StrictStr = Field(...)
    user_id: StrictStr = Field(default=..., alias="userId")
    __properties = ["authStrategy", "created", "credentials", "externalId", "modified", "profile", "provider", "userId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserIdentity:
        """Create an instance of UserIdentity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['profile'] = self.profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserIdentity:
        """Create an instance of UserIdentity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserIdentity.parse_obj(obj)

        _obj = UserIdentity.parse_obj({
            "auth_strategy": obj.get("authStrategy"),
            "created": obj.get("created"),
            "credentials": obj.get("credentials"),
            "external_id": obj.get("externalId"),
            "modified": obj.get("modified"),
            "profile": UserProfile.from_dict(obj.get("profile")) if obj.get("profile") is not None else None,
            "provider": obj.get("provider"),
            "user_id": obj.get("userId")
        })
        return _obj


