# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from scicat_sdk_pydantic.models.i_dataset_list import IDatasetList

class JobClass(BaseModel):
    """
    JobClass
    """
    id: StrictStr = Field(default=..., alias="_id", description="Globally unique identifier of a job.")
    id: StrictStr = Field(default=..., description="Globally unique identifier of a job.")
    email_job_initiator: StrictStr = Field(default=..., alias="emailJobInitiator", description="The email of the person initiating the job request.")
    type: StrictStr = Field(default=..., description="Type of job, e.g. archive, retrieve etc")
    creation_time: datetime = Field(default=..., alias="creationTime", description="Time when job is created. Format according to chapter 5.6 internet date/time format in RFC 3339. This is handled automatically by mongoose with timestamps flag.")
    execution_time: datetime = Field(default=..., alias="executionTime", description="Time when job should be executed. If not specified then the Job will be executed asap. Format according to chapter 5.6 internet date/time format in RFC 3339.")
    job_params: Dict[str, Any] = Field(default=..., alias="jobParams", description="Object of key-value pairs defining job input parameters, e.g. 'destinationPath' for retrieve jobs or 'tapeCopies' for archive jobs.")
    job_status_message: StrictStr = Field(default=..., alias="jobStatusMessage", description="Defines current status of job lifecycle.")
    dataset_list: Optional[conlist(IDatasetList)] = Field(default=None, alias="datasetList", description="Array of objects with keys: pid, files. The value for the pid key defines the dataset ID, the value for the files key is an array of file names. This array is either an empty array, implying that all files within the dataset are selected or an explicit list of dataset-relative file paths, which should be selected.")
    job_result_object: Dict[str, Any] = Field(default=..., alias="jobResultObject", description="Detailed return value after job is finished.")
    owner_group: StrictStr = Field(default=..., alias="ownerGroup", description="Defines the group which owns the data, and therefore has unrestricted access to this data. Usually a pgroup like p12151")
    __properties = ["_id", "id", "emailJobInitiator", "type", "creationTime", "executionTime", "jobParams", "jobStatusMessage", "datasetList", "jobResultObject", "ownerGroup"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobClass:
        """Create an instance of JobClass from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "id",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in dataset_list (list)
        _items = []
        if self.dataset_list:
            for _item in self.dataset_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['datasetList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobClass:
        """Create an instance of JobClass from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobClass.parse_obj(obj)

        _obj = JobClass.parse_obj({
            "id": obj.get("_id"),
            "id": obj.get("id"),
            "email_job_initiator": obj.get("emailJobInitiator"),
            "type": obj.get("type"),
            "creation_time": obj.get("creationTime"),
            "execution_time": obj.get("executionTime"),
            "job_params": obj.get("jobParams"),
            "job_status_message": obj.get("jobStatusMessage"),
            "dataset_list": [IDatasetList.from_dict(_item) for _item in obj.get("datasetList")] if obj.get("datasetList") is not None else None,
            "job_result_object": obj.get("jobResultObject"),
            "owner_group": obj.get("ownerGroup")
        })
        return _obj


