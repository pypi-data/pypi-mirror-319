# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from scicat_sdk_pydantic.models.i_dataset_list import IDatasetList

class CreateJobDto(BaseModel):
    """
    CreateJobDto
    """
    email_job_initiator: StrictStr = Field(default=..., alias="emailJobInitiator")
    type: StrictStr = Field(...)
    job_params: Optional[Dict[str, Any]] = Field(default=None, alias="jobParams")
    dataset_list: conlist(IDatasetList) = Field(default=..., alias="datasetList")
    execution_time: Optional[datetime] = Field(default=None, alias="executionTime")
    job_status_message: Optional[StrictStr] = Field(default=None, alias="jobStatusMessage")
    job_result_object: Optional[Dict[str, Any]] = Field(default=None, alias="jobResultObject")
    __properties = ["emailJobInitiator", "type", "jobParams", "datasetList", "executionTime", "jobStatusMessage", "jobResultObject"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateJobDto:
        """Create an instance of CreateJobDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in dataset_list (list)
        _items = []
        if self.dataset_list:
            for _item in self.dataset_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['datasetList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateJobDto:
        """Create an instance of CreateJobDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateJobDto.parse_obj(obj)

        _obj = CreateJobDto.parse_obj({
            "email_job_initiator": obj.get("emailJobInitiator"),
            "type": obj.get("type"),
            "job_params": obj.get("jobParams"),
            "dataset_list": [IDatasetList.from_dict(_item) for _item in obj.get("datasetList")] if obj.get("datasetList") is not None else None,
            "execution_time": obj.get("executionTime"),
            "job_status_message": obj.get("jobStatusMessage"),
            "job_result_object": obj.get("jobResultObject")
        })
        return _obj


