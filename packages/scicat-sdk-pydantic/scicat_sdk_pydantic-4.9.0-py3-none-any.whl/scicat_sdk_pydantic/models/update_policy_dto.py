# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist

class UpdatePolicyDto(BaseModel):
    """
    UpdatePolicyDto
    """
    owner_group: StrictStr = Field(default=..., alias="ownerGroup", description="Name of the group owning this item.")
    access_groups: Optional[conlist(StrictStr)] = Field(default=None, alias="accessGroups", description="List of groups which have access to this item.")
    instrument_group: Optional[StrictStr] = Field(default=None, alias="instrumentGroup", description="Group of the instrument which this item was acquired on.")
    manager: conlist(StrictStr) = Field(...)
    tape_redundancy: StrictStr = Field(default=..., alias="tapeRedundancy")
    auto_archive: StrictBool = Field(default=..., alias="autoArchive")
    auto_archive_delay: Union[StrictFloat, StrictInt] = Field(default=..., alias="autoArchiveDelay")
    archive_email_notification: StrictBool = Field(default=..., alias="archiveEmailNotification")
    archive_emails_to_be_notified: conlist(StrictStr) = Field(default=..., alias="archiveEmailsToBeNotified")
    retrieve_email_notification: StrictBool = Field(default=..., alias="retrieveEmailNotification")
    retrieve_emails_to_be_notified: conlist(StrictStr) = Field(default=..., alias="retrieveEmailsToBeNotified")
    embargo_period: Union[StrictFloat, StrictInt] = Field(default=..., alias="embargoPeriod")
    __properties = ["ownerGroup", "accessGroups", "instrumentGroup", "manager", "tapeRedundancy", "autoArchive", "autoArchiveDelay", "archiveEmailNotification", "archiveEmailsToBeNotified", "retrieveEmailNotification", "retrieveEmailsToBeNotified", "embargoPeriod"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdatePolicyDto:
        """Create an instance of UpdatePolicyDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdatePolicyDto:
        """Create an instance of UpdatePolicyDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdatePolicyDto.parse_obj(obj)

        _obj = UpdatePolicyDto.parse_obj({
            "owner_group": obj.get("ownerGroup"),
            "access_groups": obj.get("accessGroups"),
            "instrument_group": obj.get("instrumentGroup"),
            "manager": obj.get("manager"),
            "tape_redundancy": obj.get("tapeRedundancy"),
            "auto_archive": obj.get("autoArchive"),
            "auto_archive_delay": obj.get("autoArchiveDelay"),
            "archive_email_notification": obj.get("archiveEmailNotification"),
            "archive_emails_to_be_notified": obj.get("archiveEmailsToBeNotified"),
            "retrieve_email_notification": obj.get("retrieveEmailNotification"),
            "retrieve_emails_to_be_notified": obj.get("retrieveEmailsToBeNotified"),
            "embargo_period": obj.get("embargoPeriod")
        })
        return _obj


