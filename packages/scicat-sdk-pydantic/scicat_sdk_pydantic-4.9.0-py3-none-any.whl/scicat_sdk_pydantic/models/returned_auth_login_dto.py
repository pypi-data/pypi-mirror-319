# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from scicat_sdk_pydantic.models.returned_user_dto import ReturnedUserDto

class ReturnedAuthLoginDto(BaseModel):
    """
    ReturnedAuthLoginDto
    """
    access_token: StrictStr = Field(default=..., description="JWT token used for authentication and authorization in subsequents calls")
    id: StrictStr = Field(default=..., description="Unique id of this request which matches the JWT token in the field above")
    expires_in: Union[StrictFloat, StrictInt] = Field(default=..., description="Expiration time of the JWT in seconds from creation time")
    ttl: Union[StrictFloat, StrictInt] = Field(default=..., description="Time to live of the JWT in seconds from creation time")
    created: StrictStr = Field(default=..., description="Date time in ISO 8601 format when the JWT was created")
    user_id: StrictStr = Field(default=..., alias="userId", description="Unique user id of the user logged in")
    user: ReturnedUserDto = Field(default=..., description="User information as they are stored in the system")
    __properties = ["access_token", "id", "expires_in", "ttl", "created", "userId", "user"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReturnedAuthLoginDto:
        """Create an instance of ReturnedAuthLoginDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReturnedAuthLoginDto:
        """Create an instance of ReturnedAuthLoginDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReturnedAuthLoginDto.parse_obj(obj)

        _obj = ReturnedAuthLoginDto.parse_obj({
            "access_token": obj.get("access_token"),
            "id": obj.get("id"),
            "expires_in": obj.get("expires_in"),
            "ttl": obj.get("ttl"),
            "created": obj.get("created"),
            "user_id": obj.get("userId"),
            "user": ReturnedUserDto.from_dict(obj.get("user")) if obj.get("user") is not None else None
        })
        return _obj


