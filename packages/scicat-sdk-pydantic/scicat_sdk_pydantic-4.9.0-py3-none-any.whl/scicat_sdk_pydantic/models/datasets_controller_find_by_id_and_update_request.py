# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from scicat_sdk_pydantic.models.partial_update_dataset_dto import PartialUpdateDatasetDto
from scicat_sdk_pydantic.models.partial_update_derived_dataset_obsolete_dto import PartialUpdateDerivedDatasetObsoleteDto
from scicat_sdk_pydantic.models.partial_update_raw_dataset_obsolete_dto import PartialUpdateRawDatasetObsoleteDto
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

DATASETSCONTROLLERFINDBYIDANDUPDATEREQUEST_ANY_OF_SCHEMAS = ["PartialUpdateDatasetDto", "PartialUpdateDerivedDatasetObsoleteDto", "PartialUpdateRawDatasetObsoleteDto"]

class DatasetsControllerFindByIdAndUpdateRequest(BaseModel):
    """
    DatasetsControllerFindByIdAndUpdateRequest
    """

    # data type: PartialUpdateRawDatasetObsoleteDto
    anyof_schema_1_validator: Optional[PartialUpdateRawDatasetObsoleteDto] = None
    # data type: PartialUpdateDerivedDatasetObsoleteDto
    anyof_schema_2_validator: Optional[PartialUpdateDerivedDatasetObsoleteDto] = None
    # data type: PartialUpdateDatasetDto
    anyof_schema_3_validator: Optional[PartialUpdateDatasetDto] = None
    if TYPE_CHECKING:
        actual_instance: Union[PartialUpdateDatasetDto, PartialUpdateDerivedDatasetObsoleteDto, PartialUpdateRawDatasetObsoleteDto]
    else:
        actual_instance: Any
    any_of_schemas: List[str] = Field(DATASETSCONTROLLERFINDBYIDANDUPDATEREQUEST_ANY_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = DatasetsControllerFindByIdAndUpdateRequest.construct()
        error_messages = []
        # validate data type: PartialUpdateRawDatasetObsoleteDto
        if not isinstance(v, PartialUpdateRawDatasetObsoleteDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PartialUpdateRawDatasetObsoleteDto`")
        else:
            return v

        # validate data type: PartialUpdateDerivedDatasetObsoleteDto
        if not isinstance(v, PartialUpdateDerivedDatasetObsoleteDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PartialUpdateDerivedDatasetObsoleteDto`")
        else:
            return v

        # validate data type: PartialUpdateDatasetDto
        if not isinstance(v, PartialUpdateDatasetDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PartialUpdateDatasetDto`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in DatasetsControllerFindByIdAndUpdateRequest with anyOf schemas: PartialUpdateDatasetDto, PartialUpdateDerivedDatasetObsoleteDto, PartialUpdateRawDatasetObsoleteDto. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> DatasetsControllerFindByIdAndUpdateRequest:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> DatasetsControllerFindByIdAndUpdateRequest:
        """Returns the object represented by the json string"""
        instance = DatasetsControllerFindByIdAndUpdateRequest.construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[PartialUpdateRawDatasetObsoleteDto] = None
        try:
            instance.actual_instance = PartialUpdateRawDatasetObsoleteDto.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[PartialUpdateDerivedDatasetObsoleteDto] = None
        try:
            instance.actual_instance = PartialUpdateDerivedDatasetObsoleteDto.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[PartialUpdateDatasetDto] = None
        try:
            instance.actual_instance = PartialUpdateDatasetDto.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into DatasetsControllerFindByIdAndUpdateRequest with anyOf schemas: PartialUpdateDatasetDto, PartialUpdateDerivedDatasetObsoleteDto, PartialUpdateRawDatasetObsoleteDto. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())


