# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from scicat_sdk_pydantic.models.lifecycle_class import LifecycleClass
from scicat_sdk_pydantic.models.relationship_class import RelationshipClass
from scicat_sdk_pydantic.models.technique_class import TechniqueClass

class PartialUpdateDerivedDatasetObsoleteDto(BaseModel):
    """
    PartialUpdateDerivedDatasetObsoleteDto
    """
    owner_group: Optional[StrictStr] = Field(default=None, alias="ownerGroup", description="Name of the group owning this item.")
    access_groups: Optional[conlist(StrictStr)] = Field(default=None, alias="accessGroups", description="List of groups which have access to this item.")
    instrument_group: Optional[StrictStr] = Field(default=None, alias="instrumentGroup", description="Group of the instrument which this item was acquired on.")
    owner: Optional[StrictStr] = Field(default=None, description="Owner or custodian of the dataset, usually first name + last name. The string may contain a list of persons, which should then be separated by semicolons.")
    owner_email: Optional[StrictStr] = Field(default=None, alias="ownerEmail", description="Email of the owner or custodian of the dataset. The string may contain a list of emails, which should then be separated by semicolons.")
    orcid_of_owner: Optional[StrictStr] = Field(default=None, alias="orcidOfOwner", description="ORCID of the owner or custodian. The string may contain a list of ORCIDs, which should then be separated by semicolons.")
    contact_email: Optional[StrictStr] = Field(default=None, alias="contactEmail", description="Email of the contact person for this dataset. The string may contain a list of emails, which should then be separated by semicolons.")
    source_folder: Optional[StrictStr] = Field(default=None, alias="sourceFolder", description="Absolute file path on file server containing the files of this dataset, e.g. /some/path/to/sourcefolder. In case of a single file dataset, e.g. HDF5 data, it contains the path up to, but excluding the filename. Trailing slashes are removed.")
    source_folder_host: Optional[StrictStr] = Field(default=None, alias="sourceFolderHost", description="DNS host name of file server hosting sourceFolder, optionally including a protocol e.g. [protocol://]fileserver1.example.com")
    size: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, description="Total size of all source files contained in source folder on disk when unpacked.")
    packed_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, alias="packedSize", description="Total size of all datablock package files created for this dataset.")
    number_of_files: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, alias="numberOfFiles", description="Total number of files in all OrigDatablocks for this dataset.")
    number_of_files_archived: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, alias="numberOfFilesArchived", description="Total number of files in all Datablocks for this dataset.")
    creation_time: Optional[datetime] = Field(default=None, alias="creationTime", description="Time when dataset became fully available on disk, i.e. all containing files have been written,  or the dataset was created in SciCat.<br>It is expected to be in ISO8601 format according to specifications for internet date/time format in RFC 3339, chapter 5.6 (https://www.rfc-editor.org/rfc/rfc3339#section-5).<br>Local times without timezone/offset info are automatically transformed to UTC using the timezone of the API server.")
    validation_status: Optional[StrictStr] = Field(default=None, alias="validationStatus", description="Defines a level of trust, e.g. a measure of how much data was verified or used by other persons.")
    keywords: Optional[conlist(StrictStr)] = Field(default=None, description="Array of tags associated with the meaning or contents of this dataset. Values should ideally come from defined vocabularies, taxonomies, ontologies or knowledge graphs.")
    description: Optional[StrictStr] = Field(default=None, description="Free text explanation of contents of dataset.")
    dataset_name: Optional[StrictStr] = Field(default=None, alias="datasetName", description="A name for the dataset, given by the creator to carry some semantic meaning. Useful for display purposes e.g. instead of displaying the pid. Will be autofilled if missing using info from sourceFolder.")
    classification: Optional[StrictStr] = Field(default=None, description="ACIA information about AUthenticity,COnfidentiality,INtegrity and AVailability requirements of dataset. E.g. AV(ailabilty)=medium could trigger the creation of a two tape copies. Format 'AV=medium,CO=low'")
    license: Optional[StrictStr] = Field(default=None, description="Name of the license under which the data can be used.")
    is_published: Optional[StrictBool] = Field(default=False, alias="isPublished", description="Flag is true when data are made publicly available.")
    techniques: Optional[conlist(TechniqueClass)] = Field(default=None, description="Stores the metadata information for techniques.")
    shared_with: Optional[conlist(StrictStr)] = Field(default=None, alias="sharedWith", description="List of users that the dataset has been shared with.")
    relationships: Optional[conlist(RelationshipClass)] = Field(default=None, description="Stores the relationships with other datasets.")
    datasetlifecycle: Optional[LifecycleClass] = Field(default=None, description="Describes the current status of the dataset during its lifetime with respect to the storage handling systems.")
    scientific_metadata: Optional[Dict[str, Any]] = Field(default=None, alias="scientificMetadata", description="JSON object containing the scientific metadata.")
    comment: Optional[StrictStr] = Field(default=None, description="Comment the user has about a given dataset.")
    data_quality_metrics: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="dataQualityMetrics", description="Data Quality Metrics is a number given by the user to rate the dataset.")
    proposal_id: Optional[StrictStr] = Field(default=None, alias="proposalId", description="The ID of the proposal to which the dataset belongs.")
    run_number: Optional[StrictStr] = Field(default=None, alias="runNumber", description="Run number assigned by the system to the data acquisition for the current dataset.")
    investigator: Optional[StrictStr] = Field(default=None, description="First name and last name of the person or people pursuing the data analysis. The string may contain a list of names, which should then be separated by semicolons.")
    input_datasets: Optional[conlist(StrictStr)] = Field(default=None, alias="inputDatasets", description="Array of input dataset identifiers used in producing the derived dataset. Ideally these are the global identifier to existing datasets inside this or federated data catalogs.")
    used_software: Optional[conlist(StrictStr)] = Field(default=None, alias="usedSoftware", description="A list of links to software repositories which uniquely identifies the pieces of software, including versions, used for yielding the derived data.")
    job_parameters: Optional[Dict[str, Any]] = Field(default=None, alias="jobParameters", description="The creation process of the derived data will usually depend on input job parameters. The full structure of these input parameters are stored here.")
    job_log_data: Optional[StrictStr] = Field(default=None, alias="jobLogData", description="The output job logfile. Keep the size of this log data well below 15 MB.")
    __properties = ["ownerGroup", "accessGroups", "instrumentGroup", "owner", "ownerEmail", "orcidOfOwner", "contactEmail", "sourceFolder", "sourceFolderHost", "size", "packedSize", "numberOfFiles", "numberOfFilesArchived", "creationTime", "validationStatus", "keywords", "description", "datasetName", "classification", "license", "isPublished", "techniques", "sharedWith", "relationships", "datasetlifecycle", "scientificMetadata", "comment", "dataQualityMetrics", "proposalId", "runNumber", "investigator", "inputDatasets", "usedSoftware", "jobParameters", "jobLogData"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PartialUpdateDerivedDatasetObsoleteDto:
        """Create an instance of PartialUpdateDerivedDatasetObsoleteDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in techniques (list)
        _items = []
        if self.techniques:
            for _item in self.techniques:
                if _item:
                    _items.append(_item.to_dict())
            _dict['techniques'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in relationships (list)
        _items = []
        if self.relationships:
            for _item in self.relationships:
                if _item:
                    _items.append(_item.to_dict())
            _dict['relationships'] = _items
        # override the default output from pydantic by calling `to_dict()` of datasetlifecycle
        if self.datasetlifecycle:
            _dict['datasetlifecycle'] = self.datasetlifecycle.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PartialUpdateDerivedDatasetObsoleteDto:
        """Create an instance of PartialUpdateDerivedDatasetObsoleteDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PartialUpdateDerivedDatasetObsoleteDto.parse_obj(obj)

        _obj = PartialUpdateDerivedDatasetObsoleteDto.parse_obj({
            "owner_group": obj.get("ownerGroup"),
            "access_groups": obj.get("accessGroups"),
            "instrument_group": obj.get("instrumentGroup"),
            "owner": obj.get("owner"),
            "owner_email": obj.get("ownerEmail"),
            "orcid_of_owner": obj.get("orcidOfOwner"),
            "contact_email": obj.get("contactEmail"),
            "source_folder": obj.get("sourceFolder"),
            "source_folder_host": obj.get("sourceFolderHost"),
            "size": obj.get("size") if obj.get("size") is not None else 0,
            "packed_size": obj.get("packedSize") if obj.get("packedSize") is not None else 0,
            "number_of_files": obj.get("numberOfFiles") if obj.get("numberOfFiles") is not None else 0,
            "number_of_files_archived": obj.get("numberOfFilesArchived") if obj.get("numberOfFilesArchived") is not None else 0,
            "creation_time": obj.get("creationTime"),
            "validation_status": obj.get("validationStatus"),
            "keywords": obj.get("keywords"),
            "description": obj.get("description"),
            "dataset_name": obj.get("datasetName"),
            "classification": obj.get("classification"),
            "license": obj.get("license"),
            "is_published": obj.get("isPublished") if obj.get("isPublished") is not None else False,
            "techniques": [TechniqueClass.from_dict(_item) for _item in obj.get("techniques")] if obj.get("techniques") is not None else None,
            "shared_with": obj.get("sharedWith"),
            "relationships": [RelationshipClass.from_dict(_item) for _item in obj.get("relationships")] if obj.get("relationships") is not None else None,
            "datasetlifecycle": LifecycleClass.from_dict(obj.get("datasetlifecycle")) if obj.get("datasetlifecycle") is not None else None,
            "scientific_metadata": obj.get("scientificMetadata"),
            "comment": obj.get("comment"),
            "data_quality_metrics": obj.get("dataQualityMetrics"),
            "proposal_id": obj.get("proposalId"),
            "run_number": obj.get("runNumber"),
            "investigator": obj.get("investigator"),
            "input_datasets": obj.get("inputDatasets"),
            "used_software": obj.get("usedSoftware"),
            "job_parameters": obj.get("jobParameters"),
            "job_log_data": obj.get("jobLogData")
        })
        return _obj


