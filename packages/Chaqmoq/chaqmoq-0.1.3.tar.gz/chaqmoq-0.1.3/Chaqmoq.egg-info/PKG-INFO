Metadata-Version: 2.1
Name: Chaqmoq
Version: 0.1.3
Summary: Chaqmoq Python Web Framework built for learning purposes.
Author: Komilov Murodjon
Author-email: murodjon.work@gmail.com
License: MIT
Classifier: Programming Language :: Python :: 3.6
Requires-Python: >=3.6.0
Description-Content-Type: text/markdown
Requires-Dist: Jinja2<3.0,>=2.10.3
Requires-Dist: parse>=1.12.1
Requires-Dist: requests<3.0,>=2.31.0
Requires-Dist: requests-wsgi-adapter>=0.4.1
Requires-Dist: WebOb<2.0,>=1.8.5
Requires-Dist: whitenoise<6.0,>=4.1.4


# Chaqmoq: Python Web Framework built for learning purposes

![purpose](https://img.shields.io/badge/purpose-learning-green.svg)
![PyPI](https://img.shields.io/pypi/v/chaqmoq.svg)

Chaqmoq is a Python web framework built for learning purposes.

It's a WSGI framework and can be used with any WSGI application server such as Gunicorn.

## Installation

```shell
pip install Chaqmoq
```

## How to use it

### Basic usage:

```python
from chaqmoq.core import Chaqmoq

app = Chaqmoq()


@app.route("/home", allowed_methods=["get"])
def home(request, response):
    response.text = "Hello from the HOME page"


@app.route("/hello/{name}", allowed_methods=["get", "post"])
def greeting(request, response, name):
    response.text = f"Hello, {name}"


@app.route("/book")
class BooksResource:
    def get(self, req, resp):
        resp.text = "Books Page"

    def post(self, req, resp):
        resp.text = "Endpoint to create a book"


@app.route("/template")
def template_handler(req, resp):
    resp.body = app.template(
        "index.html", context={"name": "Chaqmoq", "title": "Best Framework"}).encode()
```

### ORM:

```python
from chaqmoq.db import Database, Table, Column, ForeignKey


# models
class Author(Table):
    name = Column(str)
    age = Column(int)


class Book(Table):
    title = Column(str)
    published = Column(bool)
    author = ForeignKey(Author)


db = Database("./test.db")

db.create(Author)
db.create(Book)

greg = Author(name="George", age=13)
db.save(greg)

authors = db.all(Author)

author = db.get(Author, 47)

book = Book(title="Building an ORM", published=True, author=greg)
db.save(book)

book.title = "How to build an ORM"
db.update(book)

db.delete(Book, id=book.id)

```

### Unit Tests

The recommended way of writing unit tests is with [pytest](https://docs.pytest.org/en/latest/). There are two built in fixtures
that you may want to use when writing unit tests with Chaqmoq. The first one is `app` which is an instance of the main `Chaqmoq` class:

```python
def test_route_overlap_throws_exception(app):
    @app.route("/")
    def home(req, resp):
        resp.text = "Welcome Home."

    with pytest.raises(AssertionError):
        @app.route("/")
        def home2(req, resp):
            resp.text = "Welcome Home2."
```

The other one is `client` that you can use to send HTTP requests to your handlers. It is based on the famous [requests](https://requests.readthedocs.io/) and it should feel very familiar:

```python
def test_parameterized_route(app, client):
    @app.route("/{name}")
    def hello(req, resp, name):
        resp.text = f"hey {name}"

    assert client.get("http://testserver/matthew").text == "hey matthew"
```

## Templates

The default folder for templates is `templates`. You can change it when initializing the main `Chaqmoq()` class:

```python
app = Chaqmoq(templates_dir="templates_dir_name")
```

Then you can use HTML files in that folder like so in a handler:

```python
@app.route("/show/template")
def handler_with_template(req, resp):
    resp.html = app.template(
        "example.html", context={"title": "Awesome Framework", "body": "welcome to the future!"})
```

## Static Files

Just like templates, the default folder for static files is `static` and you can override it:

```python
app = Chaqmoq(static_dir="static_dir_name")
```

Then you can use the files inside this folder in HTML files:

```html
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title>{{title}}</title>

  <link href="/static/main.css" rel="stylesheet" type="text/css">
</head>

<body>
    <h1>{{body}}</h1>
    <p>This is a paragraph</p>
</body>
</html>
```

### Middleware

You can create custom middleware classes by inheriting from the `chaqmoq.middleware.Middleware` class and overriding its two methods
that are called before and after each request:

```python
from chaqmoq.core import Chaqmoq
from chaqmoq.middleware import Middleware


app = Chaqmoq()


class SimpleCustomMiddleware(Middleware):
    def process_request(self, req):
        print("Before dispatch", req.url)

    def process_response(self, req, res):
        print("After dispatch", req.url)


app.add_middleware(SimpleCustomMiddleware)
```
