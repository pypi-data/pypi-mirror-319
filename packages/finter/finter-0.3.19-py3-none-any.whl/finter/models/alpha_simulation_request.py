# coding: utf-8

"""
    FINTER API

    ## Finter API Document 1. Domain   - production      - https://api.finter.quantit.io/   - staging      - https://staging.api.finter.quantit.io/  2. Authorization <br><br/>(1) 토큰 발급<br/>curl -X POST https://api.finter.quantit.io/login -d {'username': '{finter_user_id}', 'password': '{finter_user_password}'<br> (2) username, password 로그인 (swagger ui 이용 시)<br/>  # noqa: E501

    OpenAPI spec version: 0.298
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlphaSimulationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identity_name': 'str',
        'volcap': 'int',
        'decay': 'int',
        'cost': 'dict(str, str)',
        'booksize': 'int',
        'slippage': 'int',
        'reinvest': 'bool',
        'adj_only': 'bool'
    }

    attribute_map = {
        'identity_name': 'identity_name',
        'volcap': 'volcap',
        'decay': 'decay',
        'cost': 'cost',
        'booksize': 'booksize',
        'slippage': 'slippage',
        'reinvest': 'reinvest',
        'adj_only': 'adj_only'
    }

    def __init__(self, identity_name=None, volcap=None, decay=None, cost=None, booksize=None, slippage=None, reinvest=None, adj_only=None):  # noqa: E501
        """AlphaSimulationRequest - a model defined in Swagger"""  # noqa: E501
        self._identity_name = None
        self._volcap = None
        self._decay = None
        self._cost = None
        self._booksize = None
        self._slippage = None
        self._reinvest = None
        self._adj_only = None
        self.discriminator = None
        self.identity_name = identity_name
        if volcap is not None:
            self.volcap = volcap
        if decay is not None:
            self.decay = decay
        if cost is not None:
            self.cost = cost
        if booksize is not None:
            self.booksize = booksize
        if slippage is not None:
            self.slippage = slippage
        if reinvest is not None:
            self.reinvest = reinvest
        if adj_only is not None:
            self.adj_only = adj_only

    @property
    def identity_name(self):
        """Gets the identity_name of this AlphaSimulationRequest.  # noqa: E501


        :return: The identity_name of this AlphaSimulationRequest.  # noqa: E501
        :rtype: str
        """
        return self._identity_name

    @identity_name.setter
    def identity_name(self, identity_name):
        """Sets the identity_name of this AlphaSimulationRequest.


        :param identity_name: The identity_name of this AlphaSimulationRequest.  # noqa: E501
        :type: str
        """
        if identity_name is None:
            raise ValueError("Invalid value for `identity_name`, must not be `None`")  # noqa: E501

        self._identity_name = identity_name

    @property
    def volcap(self):
        """Gets the volcap of this AlphaSimulationRequest.  # noqa: E501


        :return: The volcap of this AlphaSimulationRequest.  # noqa: E501
        :rtype: int
        """
        return self._volcap

    @volcap.setter
    def volcap(self, volcap):
        """Sets the volcap of this AlphaSimulationRequest.


        :param volcap: The volcap of this AlphaSimulationRequest.  # noqa: E501
        :type: int
        """

        self._volcap = volcap

    @property
    def decay(self):
        """Gets the decay of this AlphaSimulationRequest.  # noqa: E501


        :return: The decay of this AlphaSimulationRequest.  # noqa: E501
        :rtype: int
        """
        return self._decay

    @decay.setter
    def decay(self, decay):
        """Sets the decay of this AlphaSimulationRequest.


        :param decay: The decay of this AlphaSimulationRequest.  # noqa: E501
        :type: int
        """

        self._decay = decay

    @property
    def cost(self):
        """Gets the cost of this AlphaSimulationRequest.  # noqa: E501


        :return: The cost of this AlphaSimulationRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this AlphaSimulationRequest.


        :param cost: The cost of this AlphaSimulationRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._cost = cost

    @property
    def booksize(self):
        """Gets the booksize of this AlphaSimulationRequest.  # noqa: E501


        :return: The booksize of this AlphaSimulationRequest.  # noqa: E501
        :rtype: int
        """
        return self._booksize

    @booksize.setter
    def booksize(self, booksize):
        """Sets the booksize of this AlphaSimulationRequest.


        :param booksize: The booksize of this AlphaSimulationRequest.  # noqa: E501
        :type: int
        """

        self._booksize = booksize

    @property
    def slippage(self):
        """Gets the slippage of this AlphaSimulationRequest.  # noqa: E501


        :return: The slippage of this AlphaSimulationRequest.  # noqa: E501
        :rtype: int
        """
        return self._slippage

    @slippage.setter
    def slippage(self, slippage):
        """Sets the slippage of this AlphaSimulationRequest.


        :param slippage: The slippage of this AlphaSimulationRequest.  # noqa: E501
        :type: int
        """

        self._slippage = slippage

    @property
    def reinvest(self):
        """Gets the reinvest of this AlphaSimulationRequest.  # noqa: E501


        :return: The reinvest of this AlphaSimulationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._reinvest

    @reinvest.setter
    def reinvest(self, reinvest):
        """Sets the reinvest of this AlphaSimulationRequest.


        :param reinvest: The reinvest of this AlphaSimulationRequest.  # noqa: E501
        :type: bool
        """

        self._reinvest = reinvest

    @property
    def adj_only(self):
        """Gets the adj_only of this AlphaSimulationRequest.  # noqa: E501


        :return: The adj_only of this AlphaSimulationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._adj_only

    @adj_only.setter
    def adj_only(self, adj_only):
        """Sets the adj_only of this AlphaSimulationRequest.


        :param adj_only: The adj_only of this AlphaSimulationRequest.  # noqa: E501
        :type: bool
        """

        self._adj_only = adj_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlphaSimulationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlphaSimulationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
