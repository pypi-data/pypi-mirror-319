
JDCODE = 1
JCBOARD = 2
UGLYBOT = 3
JDMISSION = 4
JDCODE_CMD = 5
ROBODOG = 6

FRONT = 0
BACK = 1
RIGHT = 2
LEFT = 3

LEFT_FRONT = 0
LEFT_BACK = 1
RIGHT_BACK = 2
RIGHT_FRONT = 3
ALL_LEG = [LEFT_FRONT, RIGHT_FRONT, LEFT_BACK, RIGHT_BACK]
FRONT_LEG = [LEFT_FRONT, RIGHT_FRONT]
BACK_LEG = [LEFT_BACK, RIGHT_BACK]
LEFT_LEG = [LEFT_FRONT, LEFT_BACK]
RIGHT_LEG = [RIGHT_FRONT, RIGHT_BACK]

SITDOWN = 1
STANDUP = 2
HEADSTAND = 3
STRETCH = 4
LYING = 5

준비 = 0
앉기자세 = 1
물구나무자세 = 2
기지개켜기 = 3
인사하기 = 4

초롱초롱 = 0
ILOVEU = 1
눈감기 = 2
감사 = 3
고마워요 = 4
뱁새 = 5
좌우굴리기 = 6
찢눈 = 7
찢눈깜박임 = 8
곤충 = 9
깜박 = 10
뱀눈 = 11
바람개비 = 12
왕눈이 = 13

개소리 = 0
명령어 = 1
효과음 = 2
피아노 = 3

멍멍 = 1
으르렁 = 2
화난 = 3
신음 = 4
거친숨 = 5

안녕 = 1
기다려 = 2
비켜 = 3
출발 = 4

레이저 = 1
모터회전 = 2
띠리리 = 3
외계신호 = 4
동작 = 5
충돌 = 6

도 = 1
레 = 2
미 = 3
파 = 4
솔 = 5
라 = 6
시 = 7
H도 = 8

크게 = 3
중간 = 2
작게 = 1


ROBODOG_TOF = 7
ROBODOG_ROLL = 8
ROBODOG_PITCH = 9
ROBODOG_ROT_L = 10
ROBODOG_ROT_H = 11
class DefLib:
    dotFont = (
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), #
        (0x18, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x00), # !
        (0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), # "
        (0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00), # #
        (0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00), # $
        (0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00), # %
        (0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00), # &
        (0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00), # '
        (0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00), # (
        (0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00), # )
        (0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00), # *
        (0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00), # +
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60), # ,
        (0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00), # -
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00), # .
        (0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00), # /
        (0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00), # 0
        (0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00), # 1
        (0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00), # 2
        (0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00), # 3
        (0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00), # 4
        (0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00), # 5
        (0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00), # 6
        (0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00), # 7
        (0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00), # 8
        (0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00), # 9
        (0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00), # :
        (0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60), # ;
        (0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00), # <
        (0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00), # =
        (0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00), # >
        (0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00), # ?
        (0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00), # @
        (0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00), # A
        (0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00), # B
        (0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00), # C
        (0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00), # D
        (0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00), # E
        (0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00), # F
        (0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00), # G
        (0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00), # H
        (0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00), # I
        (0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00), # J
        (0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00), # K
        (0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00), # L
        (0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00), # M
        (0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00), # N
        (0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00), # O
        (0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00), # P
        (0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00), # Q
        (0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00), # R
        (0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00), # S
        (0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00), # T
        (0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00), # U
        (0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00), # V
        (0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00), # W
        (0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00), # X
        (0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00), # Y
        (0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00), # Z
        (0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00), # [
        (0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00), # \
        (0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00), # ]
        (0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00), # ^
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff), # _
        (0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00), # `
        (0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00), # a
        (0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00), # b
        (0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00), # c
        (0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00), # d
        (0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00), # e
        (0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00), # f
        (0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8), # g
        (0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00), # h
        (0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00), # i
        (0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78), # j
        (0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00), # k
        (0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00), # l
        (0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00), # m
        (0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00), # n
        (0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00), # o
        (0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0), # p
        (0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e), # q
        (0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00), # r
        (0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00), # s
        (0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00), # t
        (0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00), # u
        (0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00), # v
        (0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00), # w
        (0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00), # x
        (0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8), # y
        (0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00), # z
        (0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00), # {
        (0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00), # |
        (0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00), # }
        (0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), # ~
        (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)  #
    )

    @classmethod
    def checksum(self, packet):
        len = packet[4]
        sum = 0
        for n in range(6, len):
            sum += packet[n]
        return sum & 0xFF


    @classmethod
    def _print(self, data):
        for n in range(0, len(data)):
            h = hex(data[n])
            print(h, end=" ")
        print("")


    @classmethod
    def constrain(self, val , min, max):
        if min > max:
            tmp = min
            min = max
            max = tmp
        if val > max:
            val = max
        if val < min:
            val = min
        return val


    @classmethod
    def comp(self, data):
        data = data&0xFF
        if data < 0:
            return 256 + data
        else:
            return data

    @classmethod
    def toSigned8(self, n):
        n = n & 0xff
        return (n ^ 0x80) - 0x80

    @classmethod
    def toSigned16(self, n):
        if(type(n) == bytearray):
            val = (n[1]<<8) | n[0];
        else:
            val = n

        val = val & 0xffff
        return (val ^ 0x8000) - 0x8000

