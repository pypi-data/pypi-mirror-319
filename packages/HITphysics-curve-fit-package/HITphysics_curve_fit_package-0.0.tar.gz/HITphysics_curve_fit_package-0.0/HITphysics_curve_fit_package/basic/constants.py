import numpy as np
import sympy as sp
import torch
import matplotlib.pyplot as plt

g_const = 0.25
pi = np.pi
kappa = 0.1
w_c = 0.58
w_e = 0.58
J_t = 1e-8  # 1e-6 ~ 1e-8 越小越好

n_mod = 10

# 下三角向量中对角线元素的索引
diagonal_idx = torch.cumsum(torch.arange(n_mod), dim=0).tolist()


# 定义J_sm使其与sp相容
def J_sm_sp(w):
    J = (sp.Piecewise((1, w >= 0), (0, w < 0))  # 阶跃函数
         * (2 * g_const ** 2 / pi) * (kappa * w_c * w)
         / ((w_c ** 2 - w ** 2) ** 2 + kappa ** 2 * w ** 2))
    return J


# 计算 omega_0
w_0_sp = sp.symbols('w_0')
equation = J_sm_sp(w_0_sp) - 3 * J_t

w_0 = np.float32(
    sp.solve(equation, w_0_sp)[0]
)  # 解方程 J_sm = 3 * J_t, 取靠近0的第一个实数解

# 计算随 J_t 变化的 omega_c
J_prime = np.float64(
    sp.diff(J_sm_sp(w_0_sp), w_0_sp).subs(w_0_sp, w_0)
)  # J_sm'

w_cc = np.float64(
    w_0 + 20 * (J_sm_sp(w_0) - J_t) / J_prime
)  # omega_c

# 计算 k
k = np.float64(
    J_prime / 20 * (w_cc - w_0) ** 21
)

initial_params = np.array([1.11812239e-01, 6.66328954e-03, 1.05312650e-01, 2.70741710e-01,
                           2.16104555e-02, 1.74214816e-01, 3.03538800e-01, 1.54336897e-01,
                           4.09066726e-01, 1.99130338e+00, 2.65563760e+00, 3.39347548e-02,
                           1.91428465e+00, -6.84428162e-01, -2.73006044e+00, 1.88078370e+00,
                           2.90073422e-01, 1.13542323e-01, 3.06846166e-01, 3.17453727e-01,
                           2.29730111e-01, 2.12159028e+00, 1.22229593e-02, 7.54853359e-01,
                           4.34769694e+00, 9.79509442e-03, -1.70408504e-01, 5.28780539e-02,
                           7.08256632e-02, 1.44931816e+00, 7.07717584e-01, 2.99394863e+00,
                           -2.74006951e+00, 1.34629454e+00, 2.35782756e-04, -6.55347008e-02,
                           1.02565136e+00, 2.75086451e+00, 1.37859405e+00, 5.12931207e-01,
                           1.23832331e+00, 6.41717898e-01, 6.55396676e-01, -4.19217660e-03,
                           -3.40636165e-01, 1.58781305e+00, -6.49058562e-01, -6.96292311e-01,
                           6.09152476e-01, 7.58826767e-01, 1.90003142e+00, 2.10664612e+00,
                           5.00298047e-01, 6.41305973e-01, 2.53088982e+00, 7.44690724e-01,
                           6.23621171e-01, 2.16088104e-01, 2.35001758e-01, 9.48864027e-01,
                           1.03803495e+00, 1.60717270e+00, 6.69192148e-01, 6.25599149e-01,
                           4.99692374e+00, 1.95658443e+00, 2.12929511e-07, 3.23382500e-07,
                           1.67692716e-11, 5.86814154e-09, 2.11711824e-08, 4.67549529e-06,
                           3.21281265e-09, 1.71207664e-08, 6.61599100e-10])

print(f"utilizing parameters:\n"
      f"    g:{g_const}\n"
      f"    kappa:{kappa}\n"
      f"    w_c:{w_c}\n"
      f"    w_e:{w_e}\n"
      f"    J_t:{J_t}\n"
      f"    n_mod:{n_mod}\n")
