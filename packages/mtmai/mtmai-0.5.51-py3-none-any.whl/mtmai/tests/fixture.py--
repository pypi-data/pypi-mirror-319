import pytest
from fastapi.testclient import TestClient
from sqlmodel import Session, SQLModel, create_engine
from sqlmodel.pool import StaticPool

from mtmai.__main__ import app
from mtmai.core import config
from mtmai.core.db import get_session
from mtmai.core.seed import seed_db
from mtmai.models import User
from mtmai.routers.auth import get_current_active_user

settings = config.get_settings()


@pytest.fixture(name="session")
def session_fixture():
    engine = create_engine(
        "sqlite://", connect_args={"check_same_thread": False}, poolclass=StaticPool
    )
    SQLModel.metadata.create_all(engine)
    with Session(engine) as session:
        seed_db(session)
        yield session


@pytest.fixture(name="client")
def client_fixture(session: Session):
    def get_session_override():
        return session

    app.dependency_overrides[get_session] = get_session_override
    client = TestClient(app)
    yield client
    app.dependency_overrides.clear()


@pytest.fixture(name="client_with_user")
def client_with_user_fixture(session: Session):
    """测试客户端, 带测试用户上下文"""

    def get_session_override():
        return session

    app.dependency_overrides[get_session] = get_session_override

    async def _override_get_current_active_user():
        return User(username="testuser", email="testuser@example.com", disabled=False)

    app.dependency_overrides[get_current_active_user] = (
        _override_get_current_active_user
    )

    client = TestClient(app)
    yield client
    app.dependency_overrides.clear()


def post_with_user_password(client: TestClient, username: str, password: str):
    register_data = {"username": username, "password": password}
    response = client.post(f"{settings.api_prefix}/auth/register", json=register_data)
    assert response.status_code == 200

    login_data = {"username": username, "password": password}
    response = client.post(f"{settings.api_prefix}/token", data=login_data)
    assert response.status_code == 200

    token_data = response.json()
    access_token = token_data["access_token"]
    headers = {"Authorization": f"Bearer {access_token}"}

    return headers
