# coding: utf-8

"""
    AIMMS PRO REST API

    OpenAPI Specification of the AIMMS PRO REST API

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from aimms_openapi_client.models.environment_info import EnvironmentInfo
from typing import Optional, Set
from typing_extensions import Self


class EntityInfo(BaseModel):
    """
    Represents a PRO Entity (User or Group)
    """  # noqa: E501

    bucket_path: Optional[List[StrictStr]] = Field(default=None, alias="bucketPath")
    curr_users: Optional[StrictInt] = Field(
        default=None,
        description="Current number users who are member of that entity - only applicable if entity is group",
    )
    description: Optional[StrictStr] = Field(
        default=None, description="Description of the entity"
    )
    email: Optional[StrictStr] = Field(
        default=None, description="Email for that entity"
    )
    entity: StrictInt = Field(description="Unique ID of the entity")
    environment: EnvironmentInfo
    groups: Optional[List[StrictInt]] = None
    is_group: Optional[StrictBool] = Field(
        default=None,
        description="Indicates whether the entity is a group or user",
        alias="isGroup",
    )
    max_users: Optional[StrictInt] = Field(
        default=None,
        description="Max number users who can be member of that entity - only applicable if entity is group",
    )
    name: StrictStr = Field(description="Name of the entity")
    __properties: ClassVar[List[str]] = [
        "bucketPath",
        "curr_users",
        "description",
        "email",
        "entity",
        "environment",
        "groups",
        "isGroup",
        "max_users",
        "name",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EntityInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of environment
        if self.environment:
            _dict["environment"] = self.environment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EntityInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "bucketPath": obj.get("bucketPath"),
                "curr_users": obj.get("curr_users"),
                "description": obj.get("description"),
                "email": obj.get("email"),
                "entity": obj.get("entity"),
                "environment": (
                    EnvironmentInfo.from_dict(obj["environment"])
                    if obj.get("environment") is not None
                    else None
                ),
                "groups": obj.get("groups"),
                "isGroup": obj.get("isGroup"),
                "max_users": obj.get("max_users"),
                "name": obj.get("name"),
            }
        )
        return _obj
