# coding: utf-8

"""
    AIMMS PRO REST API

    OpenAPI Specification of the AIMMS PRO REST API

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from aimms_openapi_client.models.entity_authorization import EntityAuthorization
from typing import Optional, Set
from typing_extensions import Self


class PROEnvironment(BaseModel):
    """
    Represents a PRO environment to be created/updated
    """  # noqa: E501

    authorizations: Optional[List[EntityAuthorization]] = Field(
        default=None, description="List of environment permissions"
    )
    description: Optional[StrictStr] = Field(
        default=None, description="Description of the environment"
    )
    domain: Optional[StrictStr] = Field(
        default=None, description="Domain in which the environment exists"
    )
    is_default: Optional[StrictBool] = Field(
        default=False,
        description="Indicates the default environment",
        alias="isDefault",
    )
    name: StrictStr = Field(description="Name of the environment")
    saml_metadata_url: Optional[StrictStr] = Field(
        default=None,
        description="SAML IDP Settings of the environment",
        alias="samlMetadataUrl",
    )
    __properties: ClassVar[List[str]] = [
        "authorizations",
        "description",
        "domain",
        "isDefault",
        "name",
        "samlMetadataUrl",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PROEnvironment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in authorizations (list)
        _items = []
        if self.authorizations:
            for _item_authorizations in self.authorizations:
                if _item_authorizations:
                    _items.append(_item_authorizations.to_dict())
            _dict["authorizations"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PROEnvironment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "authorizations": (
                    [
                        EntityAuthorization.from_dict(_item)
                        for _item in obj["authorizations"]
                    ]
                    if obj.get("authorizations") is not None
                    else None
                ),
                "description": obj.get("description"),
                "domain": obj.get("domain"),
                "isDefault": (
                    obj.get("isDefault") if obj.get("isDefault") is not None else False
                ),
                "name": obj.get("name"),
                "samlMetadataUrl": obj.get("samlMetadataUrl"),
            }
        )
        return _obj
