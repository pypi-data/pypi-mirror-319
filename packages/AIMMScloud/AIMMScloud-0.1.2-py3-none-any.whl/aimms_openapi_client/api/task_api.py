# coding: utf-8

"""
    AIMMS PRO REST API

    OpenAPI Specification of the AIMMS PRO REST API

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictBytes, StrictInt, StrictStr
from typing import Any, Dict, Optional, Tuple, Union
from typing_extensions import Annotated
from aimms_openapi_client.models.task import Task
from aimms_openapi_client.models.tasks import Tasks

from aimms_openapi_client.api_client import ApiClient, RequestSerialized
from aimms_openapi_client.api_response import ApiResponse
from aimms_openapi_client.rest import RESTResponseType


class TaskApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def create_task(
        self,
        app_name: Annotated[StrictStr, Field(description="Application name")],
        app_version: Annotated[StrictStr, Field(description="Application version")],
        service_name: Annotated[StrictStr, Field(description="Task name")],
        schedule_for: Annotated[
            Optional[date],
            Field(
                description="Schedule the task to be run at the specified time point"
            ),
        ] = None,
        schedule_in: Annotated[
            Optional[StrictStr],
            Field(
                description="Schedule the task to be run after the specified interval. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks. "
            ),
        ] = None,
        schedule_interval: Annotated[
            Optional[StrictStr],
            Field(
                description="Schedule the task to be run repeatedly in specified intervals. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks. "
            ),
        ] = None,
        task_state_hook: Annotated[
            Optional[StrictStr],
            Field(description="Hook for task state change notifications."),
        ] = None,
        body: Optional[Dict[str, Any]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Task:
        """Runs a task inside an application


        :param app_name: Application name (required)
        :type app_name: str
        :param app_version: Application version (required)
        :type app_version: str
        :param service_name: Task name (required)
        :type service_name: str
        :param schedule_for: Schedule the task to be run at the specified time point
        :type schedule_for: date
        :param schedule_in: Schedule the task to be run after the specified interval. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks.
        :type schedule_in: str
        :param schedule_interval: Schedule the task to be run repeatedly in specified intervals. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks.
        :type schedule_interval: str
        :param task_state_hook: Hook for task state change notifications.
        :type task_state_hook: str
        :param body:
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_task_serialize(
            app_name=app_name,
            app_version=app_version,
            service_name=service_name,
            schedule_for=schedule_for,
            schedule_in=schedule_in,
            schedule_interval=schedule_interval,
            task_state_hook=task_state_hook,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Task",
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def create_task_with_http_info(
        self,
        app_name: Annotated[StrictStr, Field(description="Application name")],
        app_version: Annotated[StrictStr, Field(description="Application version")],
        service_name: Annotated[StrictStr, Field(description="Task name")],
        schedule_for: Annotated[
            Optional[date],
            Field(
                description="Schedule the task to be run at the specified time point"
            ),
        ] = None,
        schedule_in: Annotated[
            Optional[StrictStr],
            Field(
                description="Schedule the task to be run after the specified interval. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks. "
            ),
        ] = None,
        schedule_interval: Annotated[
            Optional[StrictStr],
            Field(
                description="Schedule the task to be run repeatedly in specified intervals. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks. "
            ),
        ] = None,
        task_state_hook: Annotated[
            Optional[StrictStr],
            Field(description="Hook for task state change notifications."),
        ] = None,
        body: Optional[Dict[str, Any]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Task]:
        """Runs a task inside an application


        :param app_name: Application name (required)
        :type app_name: str
        :param app_version: Application version (required)
        :type app_version: str
        :param service_name: Task name (required)
        :type service_name: str
        :param schedule_for: Schedule the task to be run at the specified time point
        :type schedule_for: date
        :param schedule_in: Schedule the task to be run after the specified interval. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks.
        :type schedule_in: str
        :param schedule_interval: Schedule the task to be run repeatedly in specified intervals. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks.
        :type schedule_interval: str
        :param task_state_hook: Hook for task state change notifications.
        :type task_state_hook: str
        :param body:
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_task_serialize(
            app_name=app_name,
            app_version=app_version,
            service_name=service_name,
            schedule_for=schedule_for,
            schedule_in=schedule_in,
            schedule_interval=schedule_interval,
            task_state_hook=task_state_hook,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Task",
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def create_task_without_preload_content(
        self,
        app_name: Annotated[StrictStr, Field(description="Application name")],
        app_version: Annotated[StrictStr, Field(description="Application version")],
        service_name: Annotated[StrictStr, Field(description="Task name")],
        schedule_for: Annotated[
            Optional[date],
            Field(
                description="Schedule the task to be run at the specified time point"
            ),
        ] = None,
        schedule_in: Annotated[
            Optional[StrictStr],
            Field(
                description="Schedule the task to be run after the specified interval. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks. "
            ),
        ] = None,
        schedule_interval: Annotated[
            Optional[StrictStr],
            Field(
                description="Schedule the task to be run repeatedly in specified intervals. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks. "
            ),
        ] = None,
        task_state_hook: Annotated[
            Optional[StrictStr],
            Field(description="Hook for task state change notifications."),
        ] = None,
        body: Optional[Dict[str, Any]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Runs a task inside an application


        :param app_name: Application name (required)
        :type app_name: str
        :param app_version: Application version (required)
        :type app_version: str
        :param service_name: Task name (required)
        :type service_name: str
        :param schedule_for: Schedule the task to be run at the specified time point
        :type schedule_for: date
        :param schedule_in: Schedule the task to be run after the specified interval. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks.
        :type schedule_in: str
        :param schedule_interval: Schedule the task to be run repeatedly in specified intervals. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks.
        :type schedule_interval: str
        :param task_state_hook: Hook for task state change notifications.
        :type task_state_hook: str
        :param body:
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_task_serialize(
            app_name=app_name,
            app_version=app_version,
            service_name=service_name,
            schedule_for=schedule_for,
            schedule_in=schedule_in,
            schedule_interval=schedule_interval,
            task_state_hook=task_state_hook,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Task",
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _create_task_serialize(
        self,
        app_name,
        app_version,
        service_name,
        schedule_for,
        schedule_in,
        schedule_interval,
        task_state_hook,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_name is not None:
            _path_params["appName"] = app_name
        if app_version is not None:
            _path_params["appVersion"] = app_version
        if service_name is not None:
            _path_params["serviceName"] = service_name
        # process the query parameters
        if schedule_for is not None:
            if isinstance(schedule_for, date):
                _query_params.append(
                    (
                        "scheduleFor",
                        schedule_for.strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(("scheduleFor", schedule_for))

        if schedule_in is not None:

            _query_params.append(("scheduleIn", schedule_in))

        if schedule_interval is not None:

            _query_params.append(("scheduleInterval", schedule_interval))

        # process the header parameters
        if task_state_hook is not None:
            _header_params["taskStateHook"] = task_state_hook
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["ApiKeySecurityScheme"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/tasks/{appName}/{appVersion}/{serviceName}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def create_task_latest_version(
        self,
        app_name: Annotated[StrictStr, Field(description="Application name")],
        service_name: Annotated[StrictStr, Field(description="Task name")],
        schedule_for: Annotated[
            Optional[date],
            Field(
                description="Schedule the task to be run at the specified time point"
            ),
        ] = None,
        schedule_in: Annotated[
            Optional[StrictStr],
            Field(
                description="Schedule the task to be run after the specified interval. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks. "
            ),
        ] = None,
        schedule_interval: Annotated[
            Optional[StrictStr],
            Field(
                description="Schedule the task to be run repeatedly in specified intervals. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks. "
            ),
        ] = None,
        task_state_hook: Annotated[
            Optional[StrictStr],
            Field(description="Hook for task state change notifications."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Task:
        """Runs a task inside the latest version of the application


        :param app_name: Application name (required)
        :type app_name: str
        :param service_name: Task name (required)
        :type service_name: str
        :param schedule_for: Schedule the task to be run at the specified time point
        :type schedule_for: date
        :param schedule_in: Schedule the task to be run after the specified interval. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks.
        :type schedule_in: str
        :param schedule_interval: Schedule the task to be run repeatedly in specified intervals. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks.
        :type schedule_interval: str
        :param task_state_hook: Hook for task state change notifications.
        :type task_state_hook: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_task_latest_version_serialize(
            app_name=app_name,
            service_name=service_name,
            schedule_for=schedule_for,
            schedule_in=schedule_in,
            schedule_interval=schedule_interval,
            task_state_hook=task_state_hook,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Task",
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def create_task_latest_version_with_http_info(
        self,
        app_name: Annotated[StrictStr, Field(description="Application name")],
        service_name: Annotated[StrictStr, Field(description="Task name")],
        schedule_for: Annotated[
            Optional[date],
            Field(
                description="Schedule the task to be run at the specified time point"
            ),
        ] = None,
        schedule_in: Annotated[
            Optional[StrictStr],
            Field(
                description="Schedule the task to be run after the specified interval. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks. "
            ),
        ] = None,
        schedule_interval: Annotated[
            Optional[StrictStr],
            Field(
                description="Schedule the task to be run repeatedly in specified intervals. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks. "
            ),
        ] = None,
        task_state_hook: Annotated[
            Optional[StrictStr],
            Field(description="Hook for task state change notifications."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Task]:
        """Runs a task inside the latest version of the application


        :param app_name: Application name (required)
        :type app_name: str
        :param service_name: Task name (required)
        :type service_name: str
        :param schedule_for: Schedule the task to be run at the specified time point
        :type schedule_for: date
        :param schedule_in: Schedule the task to be run after the specified interval. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks.
        :type schedule_in: str
        :param schedule_interval: Schedule the task to be run repeatedly in specified intervals. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks.
        :type schedule_interval: str
        :param task_state_hook: Hook for task state change notifications.
        :type task_state_hook: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_task_latest_version_serialize(
            app_name=app_name,
            service_name=service_name,
            schedule_for=schedule_for,
            schedule_in=schedule_in,
            schedule_interval=schedule_interval,
            task_state_hook=task_state_hook,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Task",
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def create_task_latest_version_without_preload_content(
        self,
        app_name: Annotated[StrictStr, Field(description="Application name")],
        service_name: Annotated[StrictStr, Field(description="Task name")],
        schedule_for: Annotated[
            Optional[date],
            Field(
                description="Schedule the task to be run at the specified time point"
            ),
        ] = None,
        schedule_in: Annotated[
            Optional[StrictStr],
            Field(
                description="Schedule the task to be run after the specified interval. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks. "
            ),
        ] = None,
        schedule_interval: Annotated[
            Optional[StrictStr],
            Field(
                description="Schedule the task to be run repeatedly in specified intervals. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks. "
            ),
        ] = None,
        task_state_hook: Annotated[
            Optional[StrictStr],
            Field(description="Hook for task state change notifications."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Runs a task inside the latest version of the application


        :param app_name: Application name (required)
        :type app_name: str
        :param service_name: Task name (required)
        :type service_name: str
        :param schedule_for: Schedule the task to be run at the specified time point
        :type schedule_for: date
        :param schedule_in: Schedule the task to be run after the specified interval. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks.
        :type schedule_in: str
        :param schedule_interval: Schedule the task to be run repeatedly in specified intervals. The interval must be in either ISO8601 format like P1DT2H3M4S or human-readable format for example 1 day or 2 weeks.
        :type schedule_interval: str
        :param task_state_hook: Hook for task state change notifications.
        :type task_state_hook: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_task_latest_version_serialize(
            app_name=app_name,
            service_name=service_name,
            schedule_for=schedule_for,
            schedule_in=schedule_in,
            schedule_interval=schedule_interval,
            task_state_hook=task_state_hook,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Task",
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _create_task_latest_version_serialize(
        self,
        app_name,
        service_name,
        schedule_for,
        schedule_in,
        schedule_interval,
        task_state_hook,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_name is not None:
            _path_params["appName"] = app_name
        if service_name is not None:
            _path_params["serviceName"] = service_name
        # process the query parameters
        if schedule_for is not None:
            if isinstance(schedule_for, date):
                _query_params.append(
                    (
                        "scheduleFor",
                        schedule_for.strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(("scheduleFor", schedule_for))

        if schedule_in is not None:

            _query_params.append(("scheduleIn", schedule_in))

        if schedule_interval is not None:

            _query_params.append(("scheduleInterval", schedule_interval))

        # process the header parameters
        if task_state_hook is not None:
            _header_params["taskStateHook"] = task_state_hook
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["ApiKeySecurityScheme"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/tasks/{appName}/{serviceName}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_task(
        self,
        id: Annotated[StrictStr, Field(description="Task ID")],
        group_index: Annotated[
            Optional[StrictInt],
            Field(
                description="The index of the job within the group. If unset, the last index will be used. "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Deletes a task


        :param id: Task ID (required)
        :type id: str
        :param group_index: The index of the job within the group. If unset, the last index will be used.
        :type group_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_task_serialize(
            id=id,
            group_index=group_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_task_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Task ID")],
        group_index: Annotated[
            Optional[StrictInt],
            Field(
                description="The index of the job within the group. If unset, the last index will be used. "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Deletes a task


        :param id: Task ID (required)
        :type id: str
        :param group_index: The index of the job within the group. If unset, the last index will be used.
        :type group_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_task_serialize(
            id=id,
            group_index=group_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_task_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Task ID")],
        group_index: Annotated[
            Optional[StrictInt],
            Field(
                description="The index of the job within the group. If unset, the last index will be used. "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Deletes a task


        :param id: Task ID (required)
        :type id: str
        :param group_index: The index of the job within the group. If unset, the last index will be used.
        :type group_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_task_serialize(
            id=id,
            group_index=group_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_task_serialize(
        self,
        id,
        group_index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if group_index is not None:

            _query_params.append(("groupIndex", group_index))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["ApiKeySecurityScheme"]

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/tasks/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_task(
        self,
        id: Annotated[StrictStr, Field(description="Task ID")],
        group_index: Annotated[
            Optional[StrictInt],
            Field(
                description="The index of the job within the group. If unset, the last index will be used. "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Task:
        """Gets a single task


        :param id: Task ID (required)
        :type id: str
        :param group_index: The index of the job within the group. If unset, the last index will be used.
        :type group_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_task_serialize(
            id=id,
            group_index=group_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Task",
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_task_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Task ID")],
        group_index: Annotated[
            Optional[StrictInt],
            Field(
                description="The index of the job within the group. If unset, the last index will be used. "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Task]:
        """Gets a single task


        :param id: Task ID (required)
        :type id: str
        :param group_index: The index of the job within the group. If unset, the last index will be used.
        :type group_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_task_serialize(
            id=id,
            group_index=group_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Task",
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_task_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Task ID")],
        group_index: Annotated[
            Optional[StrictInt],
            Field(
                description="The index of the job within the group. If unset, the last index will be used. "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets a single task


        :param id: Task ID (required)
        :type id: str
        :param group_index: The index of the job within the group. If unset, the last index will be used.
        :type group_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_task_serialize(
            id=id,
            group_index=group_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Task",
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_task_serialize(
        self,
        id,
        group_index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if group_index is not None:

            _query_params.append(("groupIndex", group_index))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["ApiKeySecurityScheme"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/tasks/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_task_response(
        self,
        id: Annotated[StrictStr, Field(description="Task ID")],
        group_index: Annotated[
            Optional[StrictInt],
            Field(
                description="The index of the job within the group. If unset, the last index will be used. "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """Gets task response


        :param id: Task ID (required)
        :type id: str
        :param group_index: The index of the job within the group. If unset, the last index will be used.
        :type group_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_task_response_serialize(
            id=id,
            group_index=group_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_task_response_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Task ID")],
        group_index: Annotated[
            Optional[StrictInt],
            Field(
                description="The index of the job within the group. If unset, the last index will be used. "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """Gets task response


        :param id: Task ID (required)
        :type id: str
        :param group_index: The index of the job within the group. If unset, the last index will be used.
        :type group_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_task_response_serialize(
            id=id,
            group_index=group_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_task_response_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Task ID")],
        group_index: Annotated[
            Optional[StrictInt],
            Field(
                description="The index of the job within the group. If unset, the last index will be used. "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets task response


        :param id: Task ID (required)
        :type id: str
        :param group_index: The index of the job within the group. If unset, the last index will be used.
        :type group_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_task_response_serialize(
            id=id,
            group_index=group_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_task_response_serialize(
        self,
        id,
        group_index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if group_index is not None:

            _query_params.append(("groupIndex", group_index))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/octet-stream", "application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["ApiKeySecurityScheme"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/tasks/{id}/response",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_tasks(
        self,
        app_name: Annotated[StrictStr, Field(description="Application name")],
        app_version: Annotated[
            Optional[StrictStr], Field(description="Application version")
        ] = None,
        before: Annotated[
            Optional[date], Field(description="Tasks created before this date")
        ] = None,
        after: Annotated[
            Optional[date], Field(description="Tasks created on and after this date")
        ] = None,
        offset: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(description="Index of first task"),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=1)]],
            Field(description="Maximum number of tasks"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tasks:
        """Gets tasks of an application


        :param app_name: Application name (required)
        :type app_name: str
        :param app_version: Application version
        :type app_version: str
        :param before: Tasks created before this date
        :type before: date
        :param after: Tasks created on and after this date
        :type after: date
        :param offset: Index of first task
        :type offset: int
        :param limit: Maximum number of tasks
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_tasks_serialize(
            app_name=app_name,
            app_version=app_version,
            before=before,
            after=after,
            offset=offset,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Tasks",
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_tasks_with_http_info(
        self,
        app_name: Annotated[StrictStr, Field(description="Application name")],
        app_version: Annotated[
            Optional[StrictStr], Field(description="Application version")
        ] = None,
        before: Annotated[
            Optional[date], Field(description="Tasks created before this date")
        ] = None,
        after: Annotated[
            Optional[date], Field(description="Tasks created on and after this date")
        ] = None,
        offset: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(description="Index of first task"),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=1)]],
            Field(description="Maximum number of tasks"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tasks]:
        """Gets tasks of an application


        :param app_name: Application name (required)
        :type app_name: str
        :param app_version: Application version
        :type app_version: str
        :param before: Tasks created before this date
        :type before: date
        :param after: Tasks created on and after this date
        :type after: date
        :param offset: Index of first task
        :type offset: int
        :param limit: Maximum number of tasks
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_tasks_serialize(
            app_name=app_name,
            app_version=app_version,
            before=before,
            after=after,
            offset=offset,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Tasks",
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_tasks_without_preload_content(
        self,
        app_name: Annotated[StrictStr, Field(description="Application name")],
        app_version: Annotated[
            Optional[StrictStr], Field(description="Application version")
        ] = None,
        before: Annotated[
            Optional[date], Field(description="Tasks created before this date")
        ] = None,
        after: Annotated[
            Optional[date], Field(description="Tasks created on and after this date")
        ] = None,
        offset: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(description="Index of first task"),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=1)]],
            Field(description="Maximum number of tasks"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets tasks of an application


        :param app_name: Application name (required)
        :type app_name: str
        :param app_version: Application version
        :type app_version: str
        :param before: Tasks created before this date
        :type before: date
        :param after: Tasks created on and after this date
        :type after: date
        :param offset: Index of first task
        :type offset: int
        :param limit: Maximum number of tasks
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_tasks_serialize(
            app_name=app_name,
            app_version=app_version,
            before=before,
            after=after,
            offset=offset,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Tasks",
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_tasks_serialize(
        self,
        app_name,
        app_version,
        before,
        after,
        offset,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if app_name is not None:

            _query_params.append(("appName", app_name))

        if app_version is not None:

            _query_params.append(("appVersion", app_version))

        if before is not None:
            if isinstance(before, date):
                _query_params.append(
                    (
                        "before",
                        before.strftime(self.api_client.configuration.date_format),
                    )
                )
            else:
                _query_params.append(("before", before))

        if after is not None:
            if isinstance(after, date):
                _query_params.append(
                    ("after", after.strftime(self.api_client.configuration.date_format))
                )
            else:
                _query_params.append(("after", after))

        if offset is not None:

            _query_params.append(("offset", offset))

        if limit is not None:

            _query_params.append(("limit", limit))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["ApiKeySecurityScheme"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/tasks",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def interrupt_task(
        self,
        id: Annotated[StrictStr, Field(description="Task ID")],
        group_index: Annotated[
            Optional[StrictInt],
            Field(
                description="The index of the job within the group. If unset, the last index will be used. "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Interrupts a task

        Terminates a task while keeping its intermediate result. This operation is useful if running a task takes a long time, yet the intermediate result is satisfying.

        :param id: Task ID (required)
        :type id: str
        :param group_index: The index of the job within the group. If unset, the last index will be used.
        :type group_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._interrupt_task_serialize(
            id=id,
            group_index=group_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def interrupt_task_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Task ID")],
        group_index: Annotated[
            Optional[StrictInt],
            Field(
                description="The index of the job within the group. If unset, the last index will be used. "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Interrupts a task

        Terminates a task while keeping its intermediate result. This operation is useful if running a task takes a long time, yet the intermediate result is satisfying.

        :param id: Task ID (required)
        :type id: str
        :param group_index: The index of the job within the group. If unset, the last index will be used.
        :type group_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._interrupt_task_serialize(
            id=id,
            group_index=group_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def interrupt_task_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Task ID")],
        group_index: Annotated[
            Optional[StrictInt],
            Field(
                description="The index of the job within the group. If unset, the last index will be used. "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Interrupts a task

        Terminates a task while keeping its intermediate result. This operation is useful if running a task takes a long time, yet the intermediate result is satisfying.

        :param id: Task ID (required)
        :type id: str
        :param group_index: The index of the job within the group. If unset, the last index will be used.
        :type group_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._interrupt_task_serialize(
            id=id,
            group_index=group_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
            "4XX": "Error",
            "5XX": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _interrupt_task_serialize(
        self,
        id,
        group_index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if group_index is not None:

            _query_params.append(("groupIndex", group_index))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["ApiKeySecurityScheme"]

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/tasks/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
