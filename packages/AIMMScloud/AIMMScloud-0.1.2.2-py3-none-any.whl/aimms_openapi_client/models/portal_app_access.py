# coding: utf-8

"""
    AIMMS PRO REST API

    OpenAPI Specification of the AIMMS PRO REST API

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PortalAppAccess(BaseModel):
    """
    PortalAppAccess
    """ # noqa: E501
    app_id: Optional[StrictInt] = Field(default=None, description="Unique identifier of the app")
    app_name: Optional[StrictStr] = Field(default=None, description="Name of the app")
    app_version: Optional[StrictStr] = Field(default=None, description="Version of the app")
    applied: Optional[StrictBool] = Field(default=None, description="Whether access has been applied to the application")
    deletable: Optional[StrictBool] = Field(default=None, description="Whether the group can be deleted from having access to the application")
    entity_enc: Optional[StrictInt] = Field(default=None, description="Unique identifier of entity")
    entity_id: Optional[StrictInt] = Field(default=None, description="Unique identifier of entity within the environment")
    entity_name: Optional[StrictStr] = Field(default=None, description="Name of the entity")
    env_id: Optional[StrictInt] = Field(default=None, description="Unique identifier of environment")
    env_name: Optional[StrictStr] = Field(default=None, description="Name of the environment the entity belongs to")
    __properties: ClassVar[List[str]] = ["app_id", "app_name", "app_version", "applied", "deletable", "entity_enc", "entity_id", "entity_name", "env_id", "env_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PortalAppAccess from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PortalAppAccess from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_id": obj.get("app_id"),
            "app_name": obj.get("app_name"),
            "app_version": obj.get("app_version"),
            "applied": obj.get("applied"),
            "deletable": obj.get("deletable"),
            "entity_enc": obj.get("entity_enc"),
            "entity_id": obj.get("entity_id"),
            "entity_name": obj.get("entity_name"),
            "env_id": obj.get("env_id"),
            "env_name": obj.get("env_name")
        })
        return _obj


