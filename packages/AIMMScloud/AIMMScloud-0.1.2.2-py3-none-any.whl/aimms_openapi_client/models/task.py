# coding: utf-8

"""
    AIMMS PRO REST API

    OpenAPI Specification of the AIMMS PRO REST API

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Task(BaseModel):
    """
    Task
    """ # noqa: E501
    id: Optional[StrictStr] = None
    group_index: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="groupIndex")
    app_name: Optional[StrictStr] = Field(default=None, alias="appName")
    app_version: Optional[StrictStr] = Field(default=None, alias="appVersion")
    service_name: Optional[StrictStr] = Field(default=None, alias="serviceName")
    state: Optional[StrictStr] = None
    schedule_for: Optional[StrictStr] = Field(default=None, alias="scheduleFor")
    schedule_interval: Optional[StrictStr] = Field(default=None, alias="scheduleInterval")
    created_at: Optional[StrictStr] = Field(default=None, alias="createdAt")
    assigned_at: Optional[StrictStr] = Field(default=None, alias="assignedAt")
    running_at: Optional[StrictStr] = Field(default=None, alias="runningAt")
    ended_at: Optional[StrictStr] = Field(default=None, alias="endedAt")
    queue_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="queueTime")
    run_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="runTime")
    return_code: Optional[StrictInt] = Field(default=None, alias="returnCode")
    error_message: Optional[StrictStr] = Field(default=None, alias="errorMessage")
    __properties: ClassVar[List[str]] = ["id", "groupIndex", "appName", "appVersion", "serviceName", "state", "scheduleFor", "scheduleInterval", "createdAt", "assignedAt", "runningAt", "endedAt", "queueTime", "runTime", "returnCode", "errorMessage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Task from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Task from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "groupIndex": obj.get("groupIndex"),
            "appName": obj.get("appName"),
            "appVersion": obj.get("appVersion"),
            "serviceName": obj.get("serviceName"),
            "state": obj.get("state"),
            "scheduleFor": obj.get("scheduleFor"),
            "scheduleInterval": obj.get("scheduleInterval"),
            "createdAt": obj.get("createdAt"),
            "assignedAt": obj.get("assignedAt"),
            "runningAt": obj.get("runningAt"),
            "endedAt": obj.get("endedAt"),
            "queueTime": obj.get("queueTime"),
            "runTime": obj.get("runTime"),
            "returnCode": obj.get("returnCode"),
            "errorMessage": obj.get("errorMessage")
        })
        return _obj


