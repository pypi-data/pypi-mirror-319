# coding: utf-8

"""
    AIMMS PRO REST API

    OpenAPI Specification of the AIMMS PRO REST API

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from aimms_openapi_client.models.pro_aimms import PROAimms
from typing import Optional, Set
from typing_extensions import Self


class PROAimmsEntry(BaseModel):
    """
    PROAimmsEntry
    """  # noqa: E501

    aimms: Optional[PROAimms] = None
    architecture: Optional[StrictStr] = None
    client_stored_id: Optional[StrictStr] = Field(default=None, alias="clientStoredId")
    description: Optional[StrictStr] = None
    published_date: Optional[StrictStr] = Field(default=None, alias="publishedDate")
    stored_id: Optional[StrictStr] = Field(default=None, alias="storedId")
    __properties: ClassVar[List[str]] = [
        "aimms",
        "architecture",
        "clientStoredId",
        "description",
        "publishedDate",
        "storedId",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PROAimmsEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aimms
        if self.aimms:
            _dict["aimms"] = self.aimms.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PROAimmsEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "aimms": (
                    PROAimms.from_dict(obj["aimms"])
                    if obj.get("aimms") is not None
                    else None
                ),
                "architecture": obj.get("architecture"),
                "clientStoredId": obj.get("clientStoredId"),
                "description": obj.get("description"),
                "publishedDate": obj.get("publishedDate"),
                "storedId": obj.get("storedId"),
            }
        )
        return _obj
