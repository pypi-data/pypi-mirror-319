# coding: utf-8

"""
    Orbit Extrapolation API

    Orbit Extrapolation API

    The version of the OpenAPI document: 2.4.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_orbit_extrapolation_python_client.models.event_logs_without_attitude import EventLogsWithoutAttitude

class TestEventLogsWithoutAttitude(unittest.TestCase):
    """EventLogsWithoutAttitude unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EventLogsWithoutAttitude:
        """Test EventLogsWithoutAttitude
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EventLogsWithoutAttitude`
        """
        model = EventLogsWithoutAttitude()
        if include_optional:
            return EventLogsWithoutAttitude(
                orbital_event_logs = [
                    spacetower_orbit_extrapolation_python_client.models.orbital_event_log.OrbitalEventLog(
                        utc_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        event_type = 'ASCENDING_NODE', )
                    ],
                station_event_logs = [
                    spacetower_orbit_extrapolation_python_client.models.station_visibility_event_log.StationVisibilityEventLog(
                        utc_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        event_type = 'STATION_ENTER', 
                        ground_station_name = '', 
                        azimuth = 1.337, )
                    ],
                closest_approach_event_logs = [
                    spacetower_orbit_extrapolation_python_client.models.closest_approach_event_log.ClosestApproachEventLog(
                        utc_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        event_type = 'CLOSEST_APPROACH', 
                        secondary_name = '', 
                        miss_distance = 1.337, 
                        relative_position_vector_in_qsw = spacetower_orbit_extrapolation_python_client.models.vector3_d.Vector3D(
                            x = 1.337, 
                            y = 1.337, 
                            z = 1.337, ), 
                        relative_velocity_vector_in_qsw = spacetower_orbit_extrapolation_python_client.models.vector3_d.Vector3D(
                            x = 1.337, 
                            y = 1.337, 
                            z = 1.337, ), )
                    ],
                secondary_object_event_logs = [
                    spacetower_orbit_extrapolation_python_client.models.secondary_object_event_log.SecondaryObjectEventLog(
                        utc_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        event_type = 'CLOSEST_APPROACH', 
                        secondary_name = '', 
                        relative_distance = 1.337, 
                        relative_position_vector = spacetower_orbit_extrapolation_python_client.models.vector3_d.Vector3D(
                            x = 1.337, 
                            y = 1.337, 
                            z = 1.337, ), 
                        relative_velocity_vector = spacetower_orbit_extrapolation_python_client.models.vector3_d.Vector3D(
                            x = 1.337, 
                            y = 1.337, 
                            z = 1.337, ), 
                        local_frame_id = 'LVLH_ROTATING', )
                    ]
            )
        else:
            return EventLogsWithoutAttitude(
        )
        """

    def testEventLogsWithoutAttitude(self):
        """Test EventLogsWithoutAttitude"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
