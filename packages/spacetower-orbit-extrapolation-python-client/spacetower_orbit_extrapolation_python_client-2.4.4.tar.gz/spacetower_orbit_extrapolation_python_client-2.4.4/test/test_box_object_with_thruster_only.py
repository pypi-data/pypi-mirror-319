# coding: utf-8

"""
    Orbit Extrapolation API

    Orbit Extrapolation API

    The version of the OpenAPI document: 2.4.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_orbit_extrapolation_python_client.models.box_object_with_thruster_only import BoxObjectWithThrusterOnly

class TestBoxObjectWithThrusterOnly(unittest.TestCase):
    """BoxObjectWithThrusterOnly unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BoxObjectWithThrusterOnly:
        """Test BoxObjectWithThrusterOnly
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BoxObjectWithThrusterOnly`
        """
        model = BoxObjectWithThrusterOnly()
        if include_optional:
            return BoxObjectWithThrusterOnly(
                x_dimension = 0,
                y_dimension = 0,
                z_dimension = 0,
                radiation_coefficients = spacetower_orbit_extrapolation_python_client.models.reflection_absorption_coefficients.ReflectionAbsorptionCoefficients(),
                solar_array_geometry = spacetower_orbit_extrapolation_python_client.models.solar_array_geometry.SolarArrayGeometry(
                    radiation_coefficients = spacetower_orbit_extrapolation_python_client.models.reflection_absorption_coefficients.ReflectionAbsorptionCoefficients(), 
                    drag_coefficient = 0, 
                    surface_area = 0, 
                    normal_axis_in_space_object_frame = spacetower_orbit_extrapolation_python_client.models.vector3_d.Vector3D(
                        x = 1.337, 
                        y = 1.337, 
                        z = 1.337, ), ),
                radiation_correction_factor = 0,
                mass = 0,
                drag_coefficient = 0,
                space_object_type = 'BOX',
                thruster = spacetower_orbit_extrapolation_python_client.models.thruster.Thruster(
                    thrust = 0, 
                    specific_impulse = 0, 
                    axis_in_space_object_frame = spacetower_orbit_extrapolation_python_client.models.vector3_d.Vector3D(
                        x = 1.337, 
                        y = 1.337, 
                        z = 1.337, ), )
            )
        else:
            return BoxObjectWithThrusterOnly(
                solar_array_geometry = spacetower_orbit_extrapolation_python_client.models.solar_array_geometry.SolarArrayGeometry(
                    radiation_coefficients = spacetower_orbit_extrapolation_python_client.models.reflection_absorption_coefficients.ReflectionAbsorptionCoefficients(), 
                    drag_coefficient = 0, 
                    surface_area = 0, 
                    normal_axis_in_space_object_frame = spacetower_orbit_extrapolation_python_client.models.vector3_d.Vector3D(
                        x = 1.337, 
                        y = 1.337, 
                        z = 1.337, ), ),
                mass = 0,
        )
        """

    def testBoxObjectWithThrusterOnly(self):
        """Test BoxObjectWithThrusterOnly"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
