# coding: utf-8

"""
    Orbit Extrapolation API

    Orbit Extrapolation API

    The version of the OpenAPI document: 2.4.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Union
from spacetower_orbit_extrapolation_python_client.models.attitude_law import AttitudeLaw
from spacetower_orbit_extrapolation_python_client.models.attitude_sequence_type import AttitudeSequenceType
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from spacetower_orbit_extrapolation_python_client.models.date_triggered_attitude_sequence import DateTriggeredAttitudeSequence

class AttitudeSequence(BaseModel):
    """
    Sequence of attitude laws. The initial attitude law (at simulation start time) be defined. Following attitude laws, if present, can be defined in different ways depending on the attitude sequence type. 
    """ # noqa: E501
    attitude_sequence_type: AttitudeSequenceType = Field(alias="attitudeSequenceType")
    initial_attitude_law: AttitudeLaw = Field(alias="initialAttitudeLaw")
    __properties: ClassVar[List[str]] = ["attitudeSequenceType", "initialAttitudeLaw"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'attitudeSequenceType'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'DATE_TRIGGERED_ATTITUDE_SWITCH': 'DateTriggeredAttitudeSequence'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[DateTriggeredAttitudeSequence]]:
        """Create an instance of AttitudeSequence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of initial_attitude_law
        if self.initial_attitude_law:
            _dict['initialAttitudeLaw'] = self.initial_attitude_law.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[DateTriggeredAttitudeSequence]]:
        """Create an instance of AttitudeSequence from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'DateTriggeredAttitudeSequence':
            return import_module("spacetower_orbit_extrapolation_python_client.models.date_triggered_attitude_sequence").DateTriggeredAttitudeSequence.from_dict(obj)

        raise ValueError("AttitudeSequence failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


