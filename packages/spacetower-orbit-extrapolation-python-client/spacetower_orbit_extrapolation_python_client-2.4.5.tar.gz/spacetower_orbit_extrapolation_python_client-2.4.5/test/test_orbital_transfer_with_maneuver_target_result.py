# coding: utf-8

"""
    Orbit Extrapolation API

    Orbit Extrapolation API

    The version of the OpenAPI document: 2.4.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_orbit_extrapolation_python_client.models.orbital_transfer_with_maneuver_target_result import OrbitalTransferWithManeuverTargetResult

class TestOrbitalTransferWithManeuverTargetResult(unittest.TestCase):
    """OrbitalTransferWithManeuverTargetResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrbitalTransferWithManeuverTargetResult:
        """Test OrbitalTransferWithManeuverTargetResult
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrbitalTransferWithManeuverTargetResult`
        """
        model = OrbitalTransferWithManeuverTargetResult()
        if include_optional:
            return OrbitalTransferWithManeuverTargetResult(
                cartesian_ephemeris = None,
                geodetic_ephemeris = None,
                mean_orbit_ephemeris = None,
                osculating_orbit_ephemeris = spacetower_orbit_extrapolation_python_client.models.osculating_orbit_ephemeris.OsculatingOrbitEphemeris(),
                tle_ephemeris = None,
                celestial_relative_ephemeris = None,
                secondary_relative_ephemeris = None,
                terrestrial_relative_ephemeris = None,
                cartesian_covariance_ephemeris = None,
                mass_ephemeris = None,
                orbital_covariance_ephemeris = None,
                thrust_vector_ephemeris = None,
                battery_power_ephemeris = None,
                attitude_ephemeris = None,
                orbital_event_logs = [
                    spacetower_orbit_extrapolation_python_client.models.orbital_event_log.OrbitalEventLog(
                        utc_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        event_type = 'ASCENDING_NODE', )
                    ],
                station_event_logs = [
                    spacetower_orbit_extrapolation_python_client.models.station_visibility_event_log.StationVisibilityEventLog(
                        utc_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        event_type = 'STATION_ENTER', 
                        ground_station_name = '', 
                        azimuth = 1.337, )
                    ],
                closest_approach_event_logs = [
                    spacetower_orbit_extrapolation_python_client.models.closest_approach_event_log.ClosestApproachEventLog(
                        utc_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        event_type = 'CLOSEST_APPROACH', 
                        secondary_name = '', 
                        miss_distance = 1.337, 
                        relative_position_vector_in_qsw = spacetower_orbit_extrapolation_python_client.models.vector3_d.Vector3D(
                            x = 1.337, 
                            y = 1.337, 
                            z = 1.337, ), 
                        relative_velocity_vector_in_qsw = spacetower_orbit_extrapolation_python_client.models.vector3_d.Vector3D(
                            x = 1.337, 
                            y = 1.337, 
                            z = 1.337, ), )
                    ],
                secondary_object_event_logs = [
                    spacetower_orbit_extrapolation_python_client.models.secondary_object_event_log.SecondaryObjectEventLog(
                        utc_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        event_type = 'CLOSEST_APPROACH', 
                        secondary_name = '', 
                        relative_distance = 1.337, 
                        relative_position_vector = spacetower_orbit_extrapolation_python_client.models.vector3_d.Vector3D(
                            x = 1.337, 
                            y = 1.337, 
                            z = 1.337, ), 
                        relative_velocity_vector = spacetower_orbit_extrapolation_python_client.models.vector3_d.Vector3D(
                            x = 1.337, 
                            y = 1.337, 
                            z = 1.337, ), 
                        local_frame_id = 'LVLH_ROTATING', )
                    ],
                field_of_view_event_logs = [
                    spacetower_orbit_extrapolation_python_client.models.field_of_view_event_log.FieldOfViewEventLog(
                        utc_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        event_type = 'FOV_ENTER', 
                        body_name = '', 
                        earth_occultation_type = 'NO_OCCULTATION', )
                    ],
                maneuver_schedule = spacetower_orbit_extrapolation_python_client.models.attitude_based_finite_thrust_schedule.AttitudeBasedFiniteThrustSchedule(),
                attitude_sequence = spacetower_orbit_extrapolation_python_client.models.attitude_sequence.AttitudeSequence(
                    attitude_sequence_type = 'DATE_TRIGGERED_ATTITUDE_SWITCH', 
                    initial_attitude_law = spacetower_orbit_extrapolation_python_client.models.attitude_law.AttitudeLaw(), ),
                maneuver_execution_report = spacetower_orbit_extrapolation_python_client.models.maneuver_execution_report.ManeuverExecutionReport(
                    simulation_duration = 1.337, 
                    total_burns_duration = 1.337, 
                    average_thrust_duration = 1.337, 
                    number_of_revolutions = 1.337, 
                    total_number_of_burns = 1.337, 
                    total_consumption = 1.337, 
                    total_delta_v = 1.337, 
                    total_impulse = 1.337, 
                    thruster_duty_cycle = 0, 
                    final_duty_cycle = 1.337, ),
                data = {
                    'key' : ''
                    },
                final_state = spacetower_orbit_extrapolation_python_client.models.orbital_transfer_with_maneuver_target_final_state.OrbitalTransferWithManeuverTargetFinalState()
            )
        else:
            return OrbitalTransferWithManeuverTargetResult(
        )
        """

    def testOrbitalTransferWithManeuverTargetResult(self):
        """Test OrbitalTransferWithManeuverTargetResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
