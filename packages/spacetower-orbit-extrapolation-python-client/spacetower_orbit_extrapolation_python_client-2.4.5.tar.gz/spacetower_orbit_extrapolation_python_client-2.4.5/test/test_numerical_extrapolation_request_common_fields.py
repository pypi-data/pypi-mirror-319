# coding: utf-8

"""
    Orbit Extrapolation API

    Orbit Extrapolation API

    The version of the OpenAPI document: 2.4.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_orbit_extrapolation_python_client.models.numerical_extrapolation_request_common_fields import NumericalExtrapolationRequestCommonFields

class TestNumericalExtrapolationRequestCommonFields(unittest.TestCase):
    """NumericalExtrapolationRequestCommonFields unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NumericalExtrapolationRequestCommonFields:
        """Test NumericalExtrapolationRequestCommonFields
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NumericalExtrapolationRequestCommonFields`
        """
        model = NumericalExtrapolationRequestCommonFields()
        if include_optional:
            return NumericalExtrapolationRequestCommonFields(
                target_date = '2024-01-01T00:00Z',
                output_configuration = spacetower_orbit_extrapolation_python_client.models.output_configuration.OutputConfiguration(
                    include_tidal_effects_in_eop_interpolation = True, 
                    inertial_frame_id = 'GCRF', 
                    earth_fixed_frame_id = 'ITRF2020', 
                    local_frame_id = 'LVLH_ROTATING', 
                    ellipsoid_id = 'WGS84', 
                    shadow_model_type = 'CONICAL', 
                    final_orbit_configuration = spacetower_orbit_extrapolation_python_client.models.final_orbit_configuration.FinalOrbitConfiguration(
                        orbit_type = 'CARTESIAN', ), 
                    final_covariance_configuration = spacetower_orbit_extrapolation_python_client.models.final_covariance_configuration.FinalCovarianceConfiguration(
                        final_covariance_type = 'ORBITAL_ELEMENTS', ), ),
                initial_orbit = spacetower_orbit_extrapolation_python_client.models.orbit.Orbit(
                    orbit_type = 'CARTESIAN', ),
                initial_covariance_matrix = spacetower_orbit_extrapolation_python_client.models.orbital_covariance_matrix.OrbitalCovarianceMatrix(
                    covariance_orbit_type = 'CARTESIAN', ),
                simulation_configuration = spacetower_orbit_extrapolation_python_client.models.simulation_configuration.SimulationConfiguration(
                    earth_fixed_frame_id = null, 
                    ellipsoid_id = 'WGS84', 
                    include_tidal_effects_in_eop_interpolation = True, 
                    shadow_model_type = 'CONICAL', 
                    perturbations = [
                        spacetower_orbit_extrapolation_python_client.models.perturbation.Perturbation(
                            perturbation_type = 'ATMOSPHERIC_DRAG', )
                        ], 
                    integrator_configuration = spacetower_orbit_extrapolation_python_client.models.integrator_configuration.IntegratorConfiguration(
                        integrator_type = 'FIXED_STEP', ), ),
                data = {
                    'key' : ''
                    }
            )
        else:
            return NumericalExtrapolationRequestCommonFields(
                target_date = '2024-01-01T00:00Z',
                initial_orbit = spacetower_orbit_extrapolation_python_client.models.orbit.Orbit(
                    orbit_type = 'CARTESIAN', ),
                simulation_configuration = spacetower_orbit_extrapolation_python_client.models.simulation_configuration.SimulationConfiguration(
                    earth_fixed_frame_id = null, 
                    ellipsoid_id = 'WGS84', 
                    include_tidal_effects_in_eop_interpolation = True, 
                    shadow_model_type = 'CONICAL', 
                    perturbations = [
                        spacetower_orbit_extrapolation_python_client.models.perturbation.Perturbation(
                            perturbation_type = 'ATMOSPHERIC_DRAG', )
                        ], 
                    integrator_configuration = spacetower_orbit_extrapolation_python_client.models.integrator_configuration.IntegratorConfiguration(
                        integrator_type = 'FIXED_STEP', ), ),
        )
        """

    def testNumericalExtrapolationRequestCommonFields(self):
        """Test NumericalExtrapolationRequestCommonFields"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
