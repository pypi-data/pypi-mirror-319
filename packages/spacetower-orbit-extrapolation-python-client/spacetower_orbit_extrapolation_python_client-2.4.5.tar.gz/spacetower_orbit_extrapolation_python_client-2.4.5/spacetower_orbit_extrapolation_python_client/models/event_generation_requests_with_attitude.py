# coding: utf-8

"""
    Orbit Extrapolation API

    Orbit Extrapolation API

    The version of the OpenAPI document: 2.4.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from spacetower_orbit_extrapolation_python_client.models.conjunction_event_request import ConjunctionEventRequest
from spacetower_orbit_extrapolation_python_client.models.field_of_view_event_request import FieldOfViewEventRequest
from spacetower_orbit_extrapolation_python_client.models.orbital_event_request import OrbitalEventRequest
from spacetower_orbit_extrapolation_python_client.models.secondary_object_event_request import SecondaryObjectEventRequest
from spacetower_orbit_extrapolation_python_client.models.station_event_request import StationEventRequest
from typing import Optional, Set
from typing_extensions import Self

class EventGenerationRequestsWithAttitude(BaseModel):
    """
    Options for events to be detected and logged after the simulation. If a event request is not provided, it will not be computed 
    """ # noqa: E501
    orbital_event_request: Optional[OrbitalEventRequest] = Field(default=None, alias="orbitalEventRequest")
    station_event_request: Optional[StationEventRequest] = Field(default=None, alias="stationEventRequest")
    conjunction_event_request: Optional[ConjunctionEventRequest] = Field(default=None, alias="conjunctionEventRequest")
    secondary_object_event_request: Optional[SecondaryObjectEventRequest] = Field(default=None, alias="secondaryObjectEventRequest")
    field_of_view_event_request: Optional[FieldOfViewEventRequest] = Field(default=None, alias="fieldOfViewEventRequest")
    __properties: ClassVar[List[str]] = ["orbitalEventRequest", "stationEventRequest", "conjunctionEventRequest", "secondaryObjectEventRequest", "fieldOfViewEventRequest"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventGenerationRequestsWithAttitude from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of orbital_event_request
        if self.orbital_event_request:
            _dict['orbitalEventRequest'] = self.orbital_event_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of station_event_request
        if self.station_event_request:
            _dict['stationEventRequest'] = self.station_event_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conjunction_event_request
        if self.conjunction_event_request:
            _dict['conjunctionEventRequest'] = self.conjunction_event_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secondary_object_event_request
        if self.secondary_object_event_request:
            _dict['secondaryObjectEventRequest'] = self.secondary_object_event_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of field_of_view_event_request
        if self.field_of_view_event_request:
            _dict['fieldOfViewEventRequest'] = self.field_of_view_event_request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventGenerationRequestsWithAttitude from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orbitalEventRequest": OrbitalEventRequest.from_dict(obj["orbitalEventRequest"]) if obj.get("orbitalEventRequest") is not None else None,
            "stationEventRequest": StationEventRequest.from_dict(obj["stationEventRequest"]) if obj.get("stationEventRequest") is not None else None,
            "conjunctionEventRequest": ConjunctionEventRequest.from_dict(obj["conjunctionEventRequest"]) if obj.get("conjunctionEventRequest") is not None else None,
            "secondaryObjectEventRequest": SecondaryObjectEventRequest.from_dict(obj["secondaryObjectEventRequest"]) if obj.get("secondaryObjectEventRequest") is not None else None,
            "fieldOfViewEventRequest": FieldOfViewEventRequest.from_dict(obj["fieldOfViewEventRequest"]) if obj.get("fieldOfViewEventRequest") is not None else None
        })
        return _obj


