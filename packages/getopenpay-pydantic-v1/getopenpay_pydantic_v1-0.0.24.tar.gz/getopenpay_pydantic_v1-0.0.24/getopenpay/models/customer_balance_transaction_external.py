# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional

from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.customer_balance_transaction_type import CustomerBalanceTransactionType
from getopenpay.models.object_name import ObjectName
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr


class CustomerBalanceTransactionExternal(BaseModel):
  """
    CustomerBalanceTransactionExternal
    """
  id: StrictStr = Field(...)
  object: Optional[ObjectName] = None
  created_at: datetime = Field(
    ..., description="DateTime at which the object was created, in 'ISO 8601' format."
  )
  updated_at: datetime = Field(
    ..., description="DateTime at which the object was updated, in 'ISO 8601' format."
  )
  is_deleted: Optional[StrictBool] = Field(
    False, description='If true, indicates that this object has been deleted'
  )
  amount_atom: StrictInt = Field(...)
  currency: CurrencyEnum = Field(...)
  ending_balance_amount_atom: StrictInt = Field(...)
  type: CustomerBalanceTransactionType = Field(...)
  invoice_id: Optional[StrictStr] = Field(...)
  credit_note_id: Optional[StrictStr] = Field(...)
  description: Optional[StrictStr] = Field(...)
  __properties = [
    'id', 'object', 'created_at', 'updated_at', 'is_deleted', 'amount_atom', 'currency',
    'ending_balance_amount_atom', 'type', 'invoice_id', 'credit_note_id', 'description'
  ]

  class Config:
    """Pydantic configuration"""
    allow_population_by_field_name = True
    validate_assignment = True

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.dict(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> CustomerBalanceTransactionExternal:
    """Create an instance of CustomerBalanceTransactionExternal from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self):
    """Returns the dictionary representation of the model using alias"""
    _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
    # set to None if invoice_id (nullable) is None
    # and __fields_set__ contains the field
    if self.invoice_id is None and 'invoice_id' in self.__fields_set__:
      _dict['invoice_id'] = None

    # set to None if credit_note_id (nullable) is None
    # and __fields_set__ contains the field
    if self.credit_note_id is None and 'credit_note_id' in self.__fields_set__:
      _dict['credit_note_id'] = None

    # set to None if description (nullable) is None
    # and __fields_set__ contains the field
    if self.description is None and 'description' in self.__fields_set__:
      _dict['description'] = None

    return _dict

  @classmethod
  def from_dict(cls, obj: dict) -> CustomerBalanceTransactionExternal:
    """Create an instance of CustomerBalanceTransactionExternal from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return CustomerBalanceTransactionExternal.parse_obj(obj)

    _obj = CustomerBalanceTransactionExternal.parse_obj(
      {
        'id': obj.get('id'),
        'object': obj.get('object'),
        'created_at': obj.get('created_at'),
        'updated_at': obj.get('updated_at'),
        'is_deleted': obj.get('is_deleted') if obj.get('is_deleted') is not None else False,
        'amount_atom': obj.get('amount_atom'),
        'currency': obj.get('currency'),
        'ending_balance_amount_atom': obj.get('ending_balance_amount_atom'),
        'type': obj.get('type'),
        'invoice_id': obj.get('invoice_id'),
        'credit_note_id': obj.get('credit_note_id'),
        'description': obj.get('description')
      }
    )
    return _obj
