# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional

from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.object_name import ObjectName
from getopenpay.models.price_external import PriceExternal
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr


class SubscriptionItemExternal(BaseModel):
  """
    SubscriptionItemExternal
    """
  id: StrictStr = Field(..., description='Unique Identifier of the subscription_item.')
  object: Optional[ObjectName] = None
  created_at: datetime = Field(
    ..., description="DateTime at which the object was created, in 'ISO 8601' format."
  )
  updated_at: datetime = Field(
    ..., description="DateTime at which the object was updated, in 'ISO 8601' format."
  )
  is_deleted: Optional[StrictBool] = Field(
    False, description='If true, indicates that this object has been deleted'
  )
  subscription_id: Optional[StrictStr] = None
  pending_attachment_to_subscription_id: Optional[StrictStr] = None
  price_id: StrictStr = Field(..., description='Unique Identifier of the price.')
  price: PriceExternal = Field(...)
  product_id: StrictStr = Field(..., description='Unique Identifier of the product.')
  currency: CurrencyEnum = Field(...)
  quantity: StrictInt = Field(
    ..., description='Quantity of the product selected for the subscription_item.'
  )
  deleted_at: Optional[datetime] = Field(...)
  drop_at_end: StrictBool = Field(
    ...,
    description='Whether or not this item will be dropped from subscription before next renewal'
  )
  add_at_period_end: StrictBool = Field(
    ..., description='Whether or not this item will be added before next renewal'
  )
  __properties = [
    'id', 'object', 'created_at', 'updated_at', 'is_deleted', 'subscription_id',
    'pending_attachment_to_subscription_id', 'price_id', 'price', 'product_id', 'currency',
    'quantity', 'deleted_at', 'drop_at_end', 'add_at_period_end'
  ]

  class Config:
    """Pydantic configuration"""
    allow_population_by_field_name = True
    validate_assignment = True

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.dict(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> SubscriptionItemExternal:
    """Create an instance of SubscriptionItemExternal from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self):
    """Returns the dictionary representation of the model using alias"""
    _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
    # override the default output from pydantic by calling `to_dict()` of price
    if self.price:
      _dict['price'] = self.price.to_dict()
    # set to None if subscription_id (nullable) is None
    # and __fields_set__ contains the field
    if self.subscription_id is None and 'subscription_id' in self.__fields_set__:
      _dict['subscription_id'] = None

    # set to None if pending_attachment_to_subscription_id (nullable) is None
    # and __fields_set__ contains the field
    if self.pending_attachment_to_subscription_id is None and 'pending_attachment_to_subscription_id' in self.__fields_set__:
      _dict['pending_attachment_to_subscription_id'] = None

    # set to None if deleted_at (nullable) is None
    # and __fields_set__ contains the field
    if self.deleted_at is None and 'deleted_at' in self.__fields_set__:
      _dict['deleted_at'] = None

    return _dict

  @classmethod
  def from_dict(cls, obj: dict) -> SubscriptionItemExternal:
    """Create an instance of SubscriptionItemExternal from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return SubscriptionItemExternal.parse_obj(obj)

    _obj = SubscriptionItemExternal.parse_obj(
      {
        'id': obj.get('id'),
        'object': obj.get('object'),
        'created_at': obj.get('created_at'),
        'updated_at': obj.get('updated_at'),
        'is_deleted': obj.get('is_deleted') if obj.get('is_deleted') is not None else False,
        'subscription_id': obj.get('subscription_id'),
        'pending_attachment_to_subscription_id': obj.get('pending_attachment_to_subscription_id'),
        'price_id': obj.get('price_id'),
        'price': PriceExternal.from_dict(obj.get('price'))
                 if obj.get('price') is not None else None,
        'product_id': obj.get('product_id'),
        'currency': obj.get('currency'),
        'quantity': obj.get('quantity'),
        'deleted_at': obj.get('deleted_at'),
        'drop_at_end': obj.get('drop_at_end'),
        'add_at_period_end': obj.get('add_at_period_end')
      }
    )
    return _obj
