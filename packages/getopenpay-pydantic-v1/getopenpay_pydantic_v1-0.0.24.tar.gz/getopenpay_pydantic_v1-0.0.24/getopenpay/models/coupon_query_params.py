# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import List, Optional

from getopenpay.models.coupon_duration import CouponDuration
from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.date_time_filter import DateTimeFilter
from getopenpay.models.int_range_filter import IntRangeFilter
from getopenpay.models.search_filter import SearchFilter
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, conlist


class CouponQueryParams(BaseModel):
  """
    CouponQueryParams
    """
  page_number: Optional[conint(strict=True, ge=1)] = Field(1, description='Page number')
  page_size: Optional[conint(strict=True, le=100, ge=1)] = Field(100, description='Page size')
  sort_key: Optional[StrictStr] = Field(
    'created_at', description='Key name based on which data is sorted.'
  )
  sort_descending: Optional[StrictBool] = Field(False, description='Sort direction.')
  created_at: Optional[DateTimeFilter] = None
  updated_at: Optional[DateTimeFilter] = None
  expand: Optional[conlist(StrictStr)] = None
  is_active: Optional[StrictBool] = None
  search: Optional[SearchFilter] = None
  currency: Optional[CurrencyEnum] = None
  duration: Optional[CouponDuration] = None
  max_redemptions: Optional[IntRangeFilter] = None
  redeem_by: Optional[DateTimeFilter] = None
  __properties = [
    'page_number', 'page_size', 'sort_key', 'sort_descending', 'created_at', 'updated_at', 'expand',
    'is_active', 'search', 'currency', 'duration', 'max_redemptions', 'redeem_by'
  ]

  class Config:
    """Pydantic configuration"""
    allow_population_by_field_name = True
    validate_assignment = True

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.dict(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> CouponQueryParams:
    """Create an instance of CouponQueryParams from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self):
    """Returns the dictionary representation of the model using alias"""
    _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
    # override the default output from pydantic by calling `to_dict()` of created_at
    if self.created_at:
      _dict['created_at'] = self.created_at.to_dict()
    # override the default output from pydantic by calling `to_dict()` of updated_at
    if self.updated_at:
      _dict['updated_at'] = self.updated_at.to_dict()
    # override the default output from pydantic by calling `to_dict()` of search
    if self.search:
      _dict['search'] = self.search.to_dict()
    # override the default output from pydantic by calling `to_dict()` of max_redemptions
    if self.max_redemptions:
      _dict['max_redemptions'] = self.max_redemptions.to_dict()
    # override the default output from pydantic by calling `to_dict()` of redeem_by
    if self.redeem_by:
      _dict['redeem_by'] = self.redeem_by.to_dict()
    # set to None if created_at (nullable) is None
    # and __fields_set__ contains the field
    if self.created_at is None and 'created_at' in self.__fields_set__:
      _dict['created_at'] = None

    # set to None if updated_at (nullable) is None
    # and __fields_set__ contains the field
    if self.updated_at is None and 'updated_at' in self.__fields_set__:
      _dict['updated_at'] = None

    # set to None if is_active (nullable) is None
    # and __fields_set__ contains the field
    if self.is_active is None and 'is_active' in self.__fields_set__:
      _dict['is_active'] = None

    # set to None if search (nullable) is None
    # and __fields_set__ contains the field
    if self.search is None and 'search' in self.__fields_set__:
      _dict['search'] = None

    # set to None if currency (nullable) is None
    # and __fields_set__ contains the field
    if self.currency is None and 'currency' in self.__fields_set__:
      _dict['currency'] = None

    # set to None if duration (nullable) is None
    # and __fields_set__ contains the field
    if self.duration is None and 'duration' in self.__fields_set__:
      _dict['duration'] = None

    # set to None if max_redemptions (nullable) is None
    # and __fields_set__ contains the field
    if self.max_redemptions is None and 'max_redemptions' in self.__fields_set__:
      _dict['max_redemptions'] = None

    # set to None if redeem_by (nullable) is None
    # and __fields_set__ contains the field
    if self.redeem_by is None and 'redeem_by' in self.__fields_set__:
      _dict['redeem_by'] = None

    return _dict

  @classmethod
  def from_dict(cls, obj: dict) -> CouponQueryParams:
    """Create an instance of CouponQueryParams from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return CouponQueryParams.parse_obj(obj)

    _obj = CouponQueryParams.parse_obj(
      {
        'page_number': obj.get('page_number') if obj.get('page_number') is not None else 1,
        'page_size': obj.get('page_size') if obj.get('page_size') is not None else 100,
        'sort_key': obj.get('sort_key') if obj.get('sort_key') is not None else 'created_at',
        'sort_descending':
          obj.get('sort_descending') if obj.get('sort_descending') is not None else False,
        'created_at':
          DateTimeFilter.from_dict(obj.get('created_at'))
          if obj.get('created_at') is not None else None,
        'updated_at':
          DateTimeFilter.from_dict(obj.get('updated_at'))
          if obj.get('updated_at') is not None else None,
        'expand': obj.get('expand'),
        'is_active': obj.get('is_active'),
        'search':
          SearchFilter.from_dict(obj.get('search')) if obj.get('search') is not None else None,
        'currency': obj.get('currency'),
        'duration': obj.get('duration'),
        'max_redemptions':
          IntRangeFilter.from_dict(obj.get('max_redemptions'))
          if obj.get('max_redemptions') is not None else None,
        'redeem_by':
          DateTimeFilter.from_dict(obj.get('redeem_by'))
          if obj.get('redeem_by') is not None else None
      }
    )
    return _obj
