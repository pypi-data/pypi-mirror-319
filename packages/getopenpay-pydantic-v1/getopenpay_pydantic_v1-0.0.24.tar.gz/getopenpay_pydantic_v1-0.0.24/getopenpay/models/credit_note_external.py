# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import List, Optional

from getopenpay.models.credit_note_item_external import CreditNoteItemExternal
from getopenpay.models.credit_note_reason import CreditNoteReason
from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.object_name import ObjectName
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist


class CreditNoteExternal(BaseModel):
  """
    CreditNoteExternal
    """
  id: StrictStr = Field(..., description='Unique Identifier of the credit_note.')
  object: Optional[ObjectName] = None
  created_at: datetime = Field(
    ..., description="DateTime at which the object was created, in 'ISO 8601' format."
  )
  updated_at: datetime = Field(
    ..., description="DateTime at which the object was updated, in 'ISO 8601' format."
  )
  is_deleted: Optional[StrictBool] = Field(
    False, description='If true, indicates that this object has been deleted'
  )
  total_amount_atom: StrictInt = Field(
    ...,
    description=
    'The integer amount representing the total amount of the credit note. It is in atomic units (in USD this is cents).'
  )
  currency: CurrencyEnum = Field(...)
  reason: Optional[CreditNoteReason] = Field(...)
  invoice_id: StrictStr = Field(..., description='Unique ID of the invoice.')
  items: conlist(CreditNoteItemExternal) = Field(...)
  credit_amount_atom: StrictInt = Field(
    ...,
    description=
    'The integer amount representing the amount to credit the customerâ€™s balance, which will be automatically applied to their next invoice. It is in atomic units (in USD this is cents).'
  )
  refund_amount_atom: StrictInt = Field(
    ...,
    description=
    'The integer amount representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. It is in atomic units (in USD this is cents).'
  )
  __properties = [
    'id', 'object', 'created_at', 'updated_at', 'is_deleted', 'total_amount_atom', 'currency',
    'reason', 'invoice_id', 'items', 'credit_amount_atom', 'refund_amount_atom'
  ]

  class Config:
    """Pydantic configuration"""
    allow_population_by_field_name = True
    validate_assignment = True

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.dict(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> CreditNoteExternal:
    """Create an instance of CreditNoteExternal from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self):
    """Returns the dictionary representation of the model using alias"""
    _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
    # override the default output from pydantic by calling `to_dict()` of each item in items (list)
    _items = []
    if self.items:
      for _item in self.items:
        if _item:
          _items.append(_item.to_dict())
      _dict['items'] = _items
    # set to None if reason (nullable) is None
    # and __fields_set__ contains the field
    if self.reason is None and 'reason' in self.__fields_set__:
      _dict['reason'] = None

    return _dict

  @classmethod
  def from_dict(cls, obj: dict) -> CreditNoteExternal:
    """Create an instance of CreditNoteExternal from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return CreditNoteExternal.parse_obj(obj)

    _obj = CreditNoteExternal.parse_obj(
      {
        'id': obj.get('id'),
        'object': obj.get('object'),
        'created_at': obj.get('created_at'),
        'updated_at': obj.get('updated_at'),
        'is_deleted': obj.get('is_deleted') if obj.get('is_deleted') is not None else False,
        'total_amount_atom': obj.get('total_amount_atom'),
        'currency': obj.get('currency'),
        'reason': obj.get('reason'),
        'invoice_id': obj.get('invoice_id'),
        'items':
          [CreditNoteItemExternal.from_dict(_item) for _item in obj.get('items')]
          if obj.get('items') is not None else None,
        'credit_amount_atom': obj.get('credit_amount_atom'),
        'refund_amount_atom': obj.get('refund_amount_atom')
      }
    )
    return _obj
