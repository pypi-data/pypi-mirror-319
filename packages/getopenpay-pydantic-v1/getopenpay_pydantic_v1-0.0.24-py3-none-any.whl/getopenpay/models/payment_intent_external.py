# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, Dict, List, Optional

from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.object_name import ObjectName
from getopenpay.models.payment_intent_status import PaymentIntentStatus
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist


class PaymentIntentExternal(BaseModel):
  """
    PaymentIntentExternal
    """
  id: StrictStr = Field(...)
  object: Optional[ObjectName] = None
  created_at: datetime = Field(
    ..., description="DateTime at which the object was created, in 'ISO 8601' format."
  )
  updated_at: datetime = Field(
    ..., description="DateTime at which the object was updated, in 'ISO 8601' format."
  )
  is_deleted: Optional[StrictBool] = Field(
    False, description='If true, indicates that this object has been deleted'
  )
  amount_atom: StrictInt = Field(...)
  amount_atom_capturable: Optional[StrictInt] = Field(...)
  amount_atom_received: Optional[StrictInt] = Field(...)
  currency: CurrencyEnum = Field(...)
  customer_id: StrictStr = Field(...)
  payment_method_id: Optional[StrictStr] = Field(...)
  status: PaymentIntentStatus = Field(...)
  invoice_id: Optional[StrictStr] = Field(...)
  charge_ids: conlist(StrictStr) = Field(...)
  refund_ids: conlist(StrictStr) = Field(...)
  invoice: Optional[InvoiceExternal] = Field(...)
  last_refund_date: Optional[datetime] = Field(...)
  decline_reason: Optional[StrictStr] = Field(...)
  payment_processor_name: Optional[StrictStr] = Field(...)
  custom_fields: Optional[Dict[str, Any]] = None
  __properties = [
    'id', 'object', 'created_at', 'updated_at', 'is_deleted', 'amount_atom',
    'amount_atom_capturable', 'amount_atom_received', 'currency', 'customer_id',
    'payment_method_id', 'status', 'invoice_id', 'charge_ids', 'refund_ids', 'invoice',
    'last_refund_date', 'decline_reason', 'payment_processor_name', 'custom_fields'
  ]

  class Config:
    """Pydantic configuration"""
    allow_population_by_field_name = True
    validate_assignment = True

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.dict(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> PaymentIntentExternal:
    """Create an instance of PaymentIntentExternal from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self):
    """Returns the dictionary representation of the model using alias"""
    _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
    # override the default output from pydantic by calling `to_dict()` of invoice
    if self.invoice:
      _dict['invoice'] = self.invoice.to_dict()
    # set to None if amount_atom_capturable (nullable) is None
    # and __fields_set__ contains the field
    if self.amount_atom_capturable is None and 'amount_atom_capturable' in self.__fields_set__:
      _dict['amount_atom_capturable'] = None

    # set to None if amount_atom_received (nullable) is None
    # and __fields_set__ contains the field
    if self.amount_atom_received is None and 'amount_atom_received' in self.__fields_set__:
      _dict['amount_atom_received'] = None

    # set to None if payment_method_id (nullable) is None
    # and __fields_set__ contains the field
    if self.payment_method_id is None and 'payment_method_id' in self.__fields_set__:
      _dict['payment_method_id'] = None

    # set to None if invoice_id (nullable) is None
    # and __fields_set__ contains the field
    if self.invoice_id is None and 'invoice_id' in self.__fields_set__:
      _dict['invoice_id'] = None

    # set to None if invoice (nullable) is None
    # and __fields_set__ contains the field
    if self.invoice is None and 'invoice' in self.__fields_set__:
      _dict['invoice'] = None

    # set to None if last_refund_date (nullable) is None
    # and __fields_set__ contains the field
    if self.last_refund_date is None and 'last_refund_date' in self.__fields_set__:
      _dict['last_refund_date'] = None

    # set to None if decline_reason (nullable) is None
    # and __fields_set__ contains the field
    if self.decline_reason is None and 'decline_reason' in self.__fields_set__:
      _dict['decline_reason'] = None

    # set to None if payment_processor_name (nullable) is None
    # and __fields_set__ contains the field
    if self.payment_processor_name is None and 'payment_processor_name' in self.__fields_set__:
      _dict['payment_processor_name'] = None

    # set to None if custom_fields (nullable) is None
    # and __fields_set__ contains the field
    if self.custom_fields is None and 'custom_fields' in self.__fields_set__:
      _dict['custom_fields'] = None

    return _dict

  @classmethod
  def from_dict(cls, obj: dict) -> PaymentIntentExternal:
    """Create an instance of PaymentIntentExternal from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return PaymentIntentExternal.parse_obj(obj)

    _obj = PaymentIntentExternal.parse_obj(
      {
        'id': obj.get('id'),
        'object': obj.get('object'),
        'created_at': obj.get('created_at'),
        'updated_at': obj.get('updated_at'),
        'is_deleted': obj.get('is_deleted') if obj.get('is_deleted') is not None else False,
        'amount_atom': obj.get('amount_atom'),
        'amount_atom_capturable': obj.get('amount_atom_capturable'),
        'amount_atom_received': obj.get('amount_atom_received'),
        'currency': obj.get('currency'),
        'customer_id': obj.get('customer_id'),
        'payment_method_id': obj.get('payment_method_id'),
        'status': obj.get('status'),
        'invoice_id': obj.get('invoice_id'),
        'charge_ids': obj.get('charge_ids'),
        'refund_ids': obj.get('refund_ids'),
        'invoice':
          InvoiceExternal.from_dict(obj.get('invoice')) if obj.get('invoice') is not None else None,
        'last_refund_date': obj.get('last_refund_date'),
        'decline_reason': obj.get('decline_reason'),
        'payment_processor_name': obj.get('payment_processor_name'),
        'custom_fields': obj.get('custom_fields')
      }
    )
    return _obj


from getopenpay.models.invoice_external import InvoiceExternal

PaymentIntentExternal.update_forward_refs()
