# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import List, Optional

from getopenpay.models.checkout_mode import CheckoutMode
from getopenpay.models.object_name import ObjectName
from getopenpay.models.payment_link_line_item_external import PaymentLinkLineItemExternal
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist


class PaymentLinkExternal(BaseModel):
  """
    PaymentLinkExternal
    """
  id: StrictStr = Field(..., description='Unique Identifier of the checkout session.')
  object: Optional[ObjectName] = None
  created_at: datetime = Field(
    ..., description="DateTime at which the object was created, in 'ISO 8601' format."
  )
  updated_at: datetime = Field(
    ..., description="DateTime at which the object was updated, in 'ISO 8601' format."
  )
  is_deleted: Optional[StrictBool] = Field(
    False, description='If true, indicates that this object has been deleted'
  )
  account_id: StrictStr = Field(..., description='Unique Identifier of the account.')
  account_name: StrictStr = Field(..., description='Name of the account.')
  active: StrictBool = Field(..., description='Whether a payment link is active or not.')
  coupon_id: Optional[StrictStr] = None
  currency: Optional[StrictStr] = Field(...)
  customer_id: Optional[StrictStr] = Field(...)
  customer_email: Optional[StrictStr] = Field(...)
  line_items: conlist(PaymentLinkLineItemExternal) = Field(...)
  mode: CheckoutMode = Field(...)
  secure_token: StrictStr = Field(
    ..., description='The random secure token associated with the payment link.'
  )
  success_url: Optional[StrictStr] = Field(...)
  trial_end: Optional[datetime] = Field(...)
  trial_period_days: Optional[StrictInt] = Field(...)
  trial_from_price: Optional[StrictBool] = Field(...)
  url: StrictStr = Field(..., description='The main URL for this payment link.')
  __properties = [
    'id', 'object', 'created_at', 'updated_at', 'is_deleted', 'account_id', 'account_name',
    'active', 'coupon_id', 'currency', 'customer_id', 'customer_email', 'line_items', 'mode',
    'secure_token', 'success_url', 'trial_end', 'trial_period_days', 'trial_from_price', 'url'
  ]

  class Config:
    """Pydantic configuration"""
    allow_population_by_field_name = True
    validate_assignment = True

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.dict(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> PaymentLinkExternal:
    """Create an instance of PaymentLinkExternal from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self):
    """Returns the dictionary representation of the model using alias"""
    _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
    # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
    _items = []
    if self.line_items:
      for _item in self.line_items:
        if _item:
          _items.append(_item.to_dict())
      _dict['line_items'] = _items
    # set to None if coupon_id (nullable) is None
    # and __fields_set__ contains the field
    if self.coupon_id is None and 'coupon_id' in self.__fields_set__:
      _dict['coupon_id'] = None

    # set to None if currency (nullable) is None
    # and __fields_set__ contains the field
    if self.currency is None and 'currency' in self.__fields_set__:
      _dict['currency'] = None

    # set to None if customer_id (nullable) is None
    # and __fields_set__ contains the field
    if self.customer_id is None and 'customer_id' in self.__fields_set__:
      _dict['customer_id'] = None

    # set to None if customer_email (nullable) is None
    # and __fields_set__ contains the field
    if self.customer_email is None and 'customer_email' in self.__fields_set__:
      _dict['customer_email'] = None

    # set to None if success_url (nullable) is None
    # and __fields_set__ contains the field
    if self.success_url is None and 'success_url' in self.__fields_set__:
      _dict['success_url'] = None

    # set to None if trial_end (nullable) is None
    # and __fields_set__ contains the field
    if self.trial_end is None and 'trial_end' in self.__fields_set__:
      _dict['trial_end'] = None

    # set to None if trial_period_days (nullable) is None
    # and __fields_set__ contains the field
    if self.trial_period_days is None and 'trial_period_days' in self.__fields_set__:
      _dict['trial_period_days'] = None

    # set to None if trial_from_price (nullable) is None
    # and __fields_set__ contains the field
    if self.trial_from_price is None and 'trial_from_price' in self.__fields_set__:
      _dict['trial_from_price'] = None

    return _dict

  @classmethod
  def from_dict(cls, obj: dict) -> PaymentLinkExternal:
    """Create an instance of PaymentLinkExternal from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return PaymentLinkExternal.parse_obj(obj)

    _obj = PaymentLinkExternal.parse_obj(
      {
        'id': obj.get('id'),
        'object': obj.get('object'),
        'created_at': obj.get('created_at'),
        'updated_at': obj.get('updated_at'),
        'is_deleted': obj.get('is_deleted') if obj.get('is_deleted') is not None else False,
        'account_id': obj.get('account_id'),
        'account_name': obj.get('account_name'),
        'active': obj.get('active'),
        'coupon_id': obj.get('coupon_id'),
        'currency': obj.get('currency'),
        'customer_id': obj.get('customer_id'),
        'customer_email': obj.get('customer_email'),
        'line_items':
          [PaymentLinkLineItemExternal.from_dict(_item) for _item in obj.get('line_items')]
          if obj.get('line_items') is not None else None,
        'mode': obj.get('mode'),
        'secure_token': obj.get('secure_token'),
        'success_url': obj.get('success_url'),
        'trial_end': obj.get('trial_end'),
        'trial_period_days': obj.get('trial_period_days'),
        'trial_from_price': obj.get('trial_from_price'),
        'url': obj.get('url')
      }
    )
    return _obj
