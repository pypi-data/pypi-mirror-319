# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional

from getopenpay.models.object_name import ObjectName
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr


class PriceTierExternal(BaseModel):
  """
    PriceTierExternal
    """
  id: StrictStr = Field(..., description='Unique identifier for the object.')
  object: Optional[ObjectName] = None
  created_at: datetime = Field(
    ..., description="DateTime at which the object was created, in 'ISO 8601' format."
  )
  updated_at: datetime = Field(
    ..., description="DateTime at which the object was updated, in 'ISO 8601' format."
  )
  is_deleted: Optional[StrictBool] = Field(
    False, description='If true, indicates that this object has been deleted'
  )
  units_upto: Optional[StrictInt] = None
  unit_amount_atom: StrictInt = Field(...)
  flat_amount_atom: StrictInt = Field(...)
  __properties = [
    'id', 'object', 'created_at', 'updated_at', 'is_deleted', 'units_upto', 'unit_amount_atom',
    'flat_amount_atom'
  ]

  class Config:
    """Pydantic configuration"""
    allow_population_by_field_name = True
    validate_assignment = True

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.dict(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> PriceTierExternal:
    """Create an instance of PriceTierExternal from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self):
    """Returns the dictionary representation of the model using alias"""
    _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
    # set to None if units_upto (nullable) is None
    # and __fields_set__ contains the field
    if self.units_upto is None and 'units_upto' in self.__fields_set__:
      _dict['units_upto'] = None

    return _dict

  @classmethod
  def from_dict(cls, obj: dict) -> PriceTierExternal:
    """Create an instance of PriceTierExternal from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return PriceTierExternal.parse_obj(obj)

    _obj = PriceTierExternal.parse_obj(
      {
        'id': obj.get('id'),
        'object': obj.get('object'),
        'created_at': obj.get('created_at'),
        'updated_at': obj.get('updated_at'),
        'is_deleted': obj.get('is_deleted') if obj.get('is_deleted') is not None else False,
        'units_upto': obj.get('units_upto'),
        'unit_amount_atom': obj.get('unit_amount_atom'),
        'flat_amount_atom': obj.get('flat_amount_atom')
      }
    )
    return _obj
