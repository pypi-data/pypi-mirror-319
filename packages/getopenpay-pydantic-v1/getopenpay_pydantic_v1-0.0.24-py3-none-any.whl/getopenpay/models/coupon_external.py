# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, Dict, List, Optional

from getopenpay.models.coupon_duration import CouponDuration
from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.object_name import ObjectName
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist


class CouponExternal(BaseModel):
  """
    CouponExternal
    """
  id: StrictStr = Field(...)
  object: Optional[ObjectName] = None
  created_at: datetime = Field(
    ..., description="DateTime at which the object was created, in 'ISO 8601' format."
  )
  updated_at: datetime = Field(
    ..., description="DateTime at which the object was updated, in 'ISO 8601' format."
  )
  is_deleted: Optional[StrictBool] = Field(
    False, description='If true, indicates that this object has been deleted'
  )
  name: StrictStr = Field(...)
  is_active: StrictBool = Field(...)
  amount_atom_off: Optional[StrictInt] = Field(...)
  percent_off: Optional[StrictInt] = Field(...)
  trial_days_off: Optional[StrictInt] = None
  currency: Optional[CurrencyEnum] = None
  duration: CouponDuration = Field(...)
  duration_in_months: Optional[StrictInt] = Field(...)
  max_redemptions: Optional[StrictInt] = Field(...)
  times_redeemed: Optional[StrictInt] = Field(...)
  redeem_by: Optional[datetime] = Field(...)
  products: Optional[conlist(StrictStr)] = None
  product_families: Optional[conlist(StrictStr)] = None
  promotion_codes: Optional[conlist(StrictStr)] = None
  metadata: Optional[Dict[str, Any]] = None
  __properties = [
    'id', 'object', 'created_at', 'updated_at', 'is_deleted', 'name', 'is_active',
    'amount_atom_off', 'percent_off', 'trial_days_off', 'currency', 'duration',
    'duration_in_months', 'max_redemptions', 'times_redeemed', 'redeem_by', 'products',
    'product_families', 'promotion_codes', 'metadata'
  ]

  class Config:
    """Pydantic configuration"""
    allow_population_by_field_name = True
    validate_assignment = True

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.dict(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> CouponExternal:
    """Create an instance of CouponExternal from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self):
    """Returns the dictionary representation of the model using alias"""
    _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
    # set to None if amount_atom_off (nullable) is None
    # and __fields_set__ contains the field
    if self.amount_atom_off is None and 'amount_atom_off' in self.__fields_set__:
      _dict['amount_atom_off'] = None

    # set to None if percent_off (nullable) is None
    # and __fields_set__ contains the field
    if self.percent_off is None and 'percent_off' in self.__fields_set__:
      _dict['percent_off'] = None

    # set to None if trial_days_off (nullable) is None
    # and __fields_set__ contains the field
    if self.trial_days_off is None and 'trial_days_off' in self.__fields_set__:
      _dict['trial_days_off'] = None

    # set to None if currency (nullable) is None
    # and __fields_set__ contains the field
    if self.currency is None and 'currency' in self.__fields_set__:
      _dict['currency'] = None

    # set to None if duration_in_months (nullable) is None
    # and __fields_set__ contains the field
    if self.duration_in_months is None and 'duration_in_months' in self.__fields_set__:
      _dict['duration_in_months'] = None

    # set to None if max_redemptions (nullable) is None
    # and __fields_set__ contains the field
    if self.max_redemptions is None and 'max_redemptions' in self.__fields_set__:
      _dict['max_redemptions'] = None

    # set to None if times_redeemed (nullable) is None
    # and __fields_set__ contains the field
    if self.times_redeemed is None and 'times_redeemed' in self.__fields_set__:
      _dict['times_redeemed'] = None

    # set to None if redeem_by (nullable) is None
    # and __fields_set__ contains the field
    if self.redeem_by is None and 'redeem_by' in self.__fields_set__:
      _dict['redeem_by'] = None

    # set to None if metadata (nullable) is None
    # and __fields_set__ contains the field
    if self.metadata is None and 'metadata' in self.__fields_set__:
      _dict['metadata'] = None

    return _dict

  @classmethod
  def from_dict(cls, obj: dict) -> CouponExternal:
    """Create an instance of CouponExternal from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return CouponExternal.parse_obj(obj)

    _obj = CouponExternal.parse_obj(
      {
        'id': obj.get('id'),
        'object': obj.get('object'),
        'created_at': obj.get('created_at'),
        'updated_at': obj.get('updated_at'),
        'is_deleted': obj.get('is_deleted') if obj.get('is_deleted') is not None else False,
        'name': obj.get('name'),
        'is_active': obj.get('is_active'),
        'amount_atom_off': obj.get('amount_atom_off'),
        'percent_off': obj.get('percent_off'),
        'trial_days_off': obj.get('trial_days_off'),
        'currency': obj.get('currency'),
        'duration': obj.get('duration'),
        'duration_in_months': obj.get('duration_in_months'),
        'max_redemptions': obj.get('max_redemptions'),
        'times_redeemed': obj.get('times_redeemed'),
        'redeem_by': obj.get('redeem_by'),
        'products': obj.get('products'),
        'product_families': obj.get('product_families'),
        'promotion_codes': obj.get('promotion_codes'),
        'metadata': obj.get('metadata')
      }
    )
    return _obj
