[tool.poetry]
name = "annoworkcli"
version = "3.8.4"  # `poetry-dynamic-versioning`を使ってGitHubのバージョンタグを取得している。変更不要
description = "AnnoworkのCLI(Command Line Interface)"
authors = ["Kurusugawa Computer Inc."]
license = "MIT"
keywords=["annowork", "cli"]
readme="README.md"
repository="https://github.com/kurusugawa-computer/annowork-cli"
classifiers = [
        "Development Status :: 4 - Beta",
        "Intended Audience :: Developers",
        "Environment :: Console",
        "Topic :: Utilities",
        "Operating System :: OS Independent",
]


[tool.poetry.dependencies]
python = "^3.9"
pyyaml = "*"
annoworkapi = "^3.2.1"
annofabapi = "^1"
more-itertools = "*"
pandas = "*"
isodate = "*"
annofabcli = "^1.90"

[tool.poetry.scripts]
annoworkcli = "annoworkcli.__main__:main"


[tool.poetry.group.test.dependencies]
pytest = "^8"
pytest-xdist = "*"
pytest-cov = "*"


# pythonバージョンを指定している理由：linterやdocumentationツールは開発環境と同じPythonバージョンで実行するため。また古いPythonバージョンにサポートしていないライブラリのバージョンがあるため
[tool.poetry.group.linter.dependencies]
mypy = {version="^1", python = ">=3.12"}
pylint = {version="^3", python = ">=3.12"}
ruff = {version="^0.8", python=">=3.12"}

# typeshed
types-requests = "*"
types-python-dateutil = "*"
types-PyYAML = "*"

[tool.poetry.group.documentation.dependencies]
sphinx = {version="^8", python=">=3.12"}
pydata-sphinx-theme = {version=">=0.13", python=">=3.12"}
sphinx-last-updated-by-git = {version="*", python=">=3.12"}
sphinx-argparse = {version="*", python=">=3.12"}

[tool.poetry.group.dev]
# 開発するときのみ必要なライブラリ。インストールしなくても開発はできるので、オプショナルにする
optional = true

[tool.poetry.group.dev.dependencies]
ipython = "*"


[tool.mypy]
ignore_missing_imports = true
check_untyped_defs = true


[tool.ruff]
target-version = "py39"
line-length = 150


[tool.ruff.lint]
ignore = [
    "G004", # `logging-f-string` : loggingでf-stringを使いたいので無視する
    "PD901", #すでに`df`という変数をいろんなところで使っているため
    "PD002", #すでにpandasで`inplace=True`はいろんなところで使っているため
    "RUF001", # 全角記号など`ambiguous unicode character`も使いたいため
    "RUF002",# 全角記号など`ambiguous unicode character`も使いたいため
    "RUF003",# 全角記号など`ambiguous unicode character`も使いたいため
    "PLC1901", # compare-to-empty-string : `if a == "`のように空文字列で直接比較したいときがあるため
    "PLR2004", # magic-value-comparison: listのサイズで判定するときがよくあるため
    "ERA", # : 役立つこともあるが、コメントアウトしていないコードも警告されるので無視する
    "PERF203", # try-except-in-loop: ループ内でtry-exceptを使うこともあるため無視する。
    "FIX", # TODOやFIXMEを使うため無視する
    "TD", # TODOコメントの書き方に気にしていないので無視する

    # いずれ無視しないようにする
    "FA100", # future-rewritable-type-annotation

    # 以下のルールはコードに合っていないので無効化した
    "RSE", # flake8-raise
    "D", # pydocstyle, Docstringを中途半端にしか書いていないので、除外する
    "C90", # mccabe
    "SLF", #  flake8-self
    "BLE", # flake8-blind-except
    "TRY", # tryceratops
    "COM", # flake8-commas
    "S", # flake8-bandit
    "EM",#flake8-errmsg
    "EXE", # flake8-executable
    "ICN", # flake8-import-conventions
    "RET",#flake8-return
    "SIM",#flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", #pathlibを使わないコードが多いので、除外する
    "ISC", #flake8-implicit-str-concat
    "PT", # flake8-pytest-style
]

select = [
    "ALL"
]

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.ruff.lint.pylint]
max-args = 10


[tool.ruff.lint.per-file-ignores]
# テストコードはチェックを緩和する
"tests/**.py" = [
    "PGH",  # pygrep-hooks
    "DTZ",  # flake8-datetimez
    "ANN",  # flake8-annotations
    "E501",  # line-too-long
    "RUF100",  # unused-noqa
    "N", # pep8-naming
    "PLC2401", # non-ascii-name
]


[tool.poetry-dynamic-versioning]
enable = false


[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"


