# coding: utf-8

"""
    everai/apps/v1/worker.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from generated.apps.models.update_app_request import UpdateAppRequest  # noqa: E501

class TestUpdateAppRequest(unittest.TestCase):
    """UpdateAppRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateAppRequest:
        """Test UpdateAppRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateAppRequest`
        """
        model = UpdateAppRequest()  # noqa: E501
        if include_optional:
            return UpdateAppRequest(
                app = generated.apps.models.v1_app.v1App(
                    app_v1alpha1 = generated.apps.models.v1_app_v1_alpha1.v1AppV1Alpha1(
                        image = '', 
                        image_pull_secrets = generated.apps.models.v1_image_pull_secrets.v1ImagePullSecrets(
                            username = generated.apps.models.commonv1_value.commonv1Value(
                                value = '', 
                                value_from = generated.apps.models.v1_value_from.v1ValueFrom(
                                    secret_key_ref = generated.apps.models.v1_key_reference.v1KeyReference(
                                        name = '', 
                                        key = '', ), 
                                    config_map_key_ref = generated.apps.models.v1_key_reference.v1KeyReference(
                                        name = '', 
                                        key = '', ), ), ), 
                            password = generated.apps.models.commonv1_value.commonv1Value(
                                value = '', ), ), 
                        volume_mounts = [
                            generated.apps.models.v1_volume_mount.v1VolumeMount(
                                name = '', 
                                mount_path = '', 
                                read_only = True, )
                            ], 
                        env = [
                            generated.apps.models.v1_environment.v1Environment(
                                name = '', 
                                env_value = , )
                            ], 
                        command = [
                            ''
                            ], 
                        port = 56, 
                        readiness_probe = generated.apps.models.v1_probe.v1Probe(
                            http_get = generated.apps.models.probe_http_get.ProbeHttpGet(
                                path = '', ), ), 
                        volumes = [
                            generated.apps.models.v1_volume.v1Volume(
                                name = '', 
                                volume = generated.apps.models.volume_volume_item.VolumeVolumeItem(), 
                                secret = generated.apps.models.volume_secret_item.VolumeSecretItem(
                                    secret_name = '', 
                                    items = [
                                        generated.apps.models.volume_item.VolumeItem(
                                            key = '', 
                                            path = '', )
                                        ], ), 
                                config_map = generated.apps.models.volume_config_map_item.VolumeConfigMapItem(
                                    name = '', ), )
                            ], 
                        resources = generated.apps.models.v1_resource.v1Resource(
                            cpu = 56, 
                            memory = '', 
                            gpu = 56, 
                            filters = generated.apps.models.v1_resource_filter.v1ResourceFilter(
                                gpu = [
                                    ''
                                    ], 
                                cpu = [
                                    ''
                                    ], 
                                regions = [
                                    ''
                                    ], 
                                cuda = '', 
                                nvidia = '', ), ), 
                        route_auth_type = 'ROUTE_AUTH_TYPE_UNSPECIFIED', 
                        route_public_key = '', 
                        metadata = generated.apps.models.v1_metadata.v1Metadata(
                            name = '', 
                            namespace = '', 
                            resource_version = '', 
                            create_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            update_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            labels = {
                                'key' : ''
                                }, ), 
                        status = generated.apps.models.v1_app_status.v1AppStatus(
                            desired_worker = 56, 
                            ready_worker = 56, 
                            events = generated.apps.models.v1_event.v1Event(
                                type = '', 
                                message = '', 
                                from = '', 
                                create_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), ), ), ),
                update_mask = ''
            )
        else:
            return UpdateAppRequest(
        )
        """

    def testUpdateAppRequest(self):
        """Test UpdateAppRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
