# coding: utf-8

"""
    everai/apps/v1/worker.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from generated.apps.models.v1_app_internal import V1AppInternal  # noqa: E501

class TestV1AppInternal(unittest.TestCase):
    """V1AppInternal unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1AppInternal:
        """Test V1AppInternal
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1AppInternal`
        """
        model = V1AppInternal()  # noqa: E501
        if include_optional:
            return V1AppInternal(
                app = generated.apps.models.v1_app.v1App(
                    app_v1alpha1 = generated.apps.models.v1_app_v1_alpha1.v1AppV1Alpha1(
                        metadata = generated.apps.models.v1_metadata.v1Metadata(
                            name = '', 
                            namespace = '', 
                            resource_version = '', 
                            uid = '', 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            labels = {
                                'key' : ''
                                }, ), 
                        spec = generated.apps.models.v1_app_spec_v1_alpha1.v1AppSpecV1Alpha1(
                            image = '', 
                            image_pull_secrets = generated.apps.models.v1_image_pull_secrets.v1ImagePullSecrets(
                                username = generated.apps.models.commonv1_value.commonv1Value(
                                    value = '', 
                                    value_from = generated.apps.models.v1_value_from.v1ValueFrom(
                                        secret_key_ref = generated.apps.models.v1_key_reference.v1KeyReference(
                                            name = '', 
                                            key = '', ), 
                                        config_map_key_ref = generated.apps.models.v1_key_reference.v1KeyReference(
                                            name = '', 
                                            key = '', ), ), ), 
                                password = generated.apps.models.commonv1_value.commonv1Value(
                                    value = '', ), ), 
                            volume_mounts = [
                                generated.apps.models.v1_volume_mount.v1VolumeMount(
                                    name = '', 
                                    mount_path = '', 
                                    read_only = True, )
                                ], 
                            env = [
                                generated.apps.models.v1_environment.v1Environment(
                                    name = '', 
                                    env_value = , )
                                ], 
                            command = [
                                ''
                                ], 
                            port = 56, 
                            readiness_probe = generated.apps.models.v1_probe.v1Probe(
                                http_get = generated.apps.models.v1_http_get.v1HttpGet(
                                    path = '', ), ), 
                            volumes = [
                                generated.apps.models.v1_volume.v1Volume(
                                    name = '', 
                                    volume = generated.apps.models.volume_volume_item.VolumeVolumeItem(), 
                                    secret = generated.apps.models.volume_secret_item.VolumeSecretItem(
                                        secret_name = '', 
                                        items = [
                                            generated.apps.models.volume_item.VolumeItem(
                                                key = '', 
                                                path = '', )
                                            ], ), 
                                    config_map = generated.apps.models.volume_config_map_item.VolumeConfigMapItem(
                                        name = '', ), )
                                ], 
                            resource = generated.apps.models.v1_resource.v1Resource(
                                cpu = 56, 
                                memory = '', 
                                gpu = 56, 
                                filters = generated.apps.models.v1_resource_filter.v1ResourceFilter(
                                    gpu = [
                                        ''
                                        ], 
                                    cpu = [
                                        ''
                                        ], 
                                    regions = [
                                        ''
                                        ], 
                                    cuda = '', 
                                    nvidia = '', ), ), 
                            route_auth_type = 'ROUTE_AUTH_TYPE_UNSPECIFIED', 
                            route_public_key = '', 
                            autoscaler = generated.apps.models.v1_autoscaler.v1Autoscaler(
                                scheduler = '', 
                                builtin = generated.apps.models.autoscaler_builtin_scaler.AutoscalerBuiltinScaler(
                                    name = '', 
                                    arguments = {
                                        'key' : 
                                        }, ), 
                                third_party = generated.apps.models.autoscaler_third_party_scaler.AutoscalerThirdPartyScaler(
                                    library = '', ), 
                                container = generated.apps.models.autoscaler_container_scaler.AutoscalerContainerScaler(
                                    image = '', 
                                    port = 56, 
                                    entry_path = generated.apps.models.v1_entry_path.v1EntryPath(
                                        http_post = generated.apps.models.v1_http_post.v1HttpPost(
                                            path = '', ), ), ), ), ), 
                        status = generated.apps.models.v1_app_status_v1_alpha1.v1AppStatusV1Alpha1(
                            desired_worker = 56, 
                            ready_worker = 56, 
                            events = generated.apps.models.v1_event.v1Event(
                                type = '', 
                                message = '', 
                                from = '', 
                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), ), ), ),
                user_id = '',
                username = ''
            )
        else:
            return V1AppInternal(
        )
        """

    def testV1AppInternal(self):
        """Test V1AppInternal"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
