# coding: utf-8

"""
    everai/apps/v1/worker.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from generated.apps.models.v1_autoscaler import V1Autoscaler  # noqa: E501

class TestV1Autoscaler(unittest.TestCase):
    """V1Autoscaler unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1Autoscaler:
        """Test V1Autoscaler
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1Autoscaler`
        """
        model = V1Autoscaler()  # noqa: E501
        if include_optional:
            return V1Autoscaler(
                scheduler = '',
                builtin = generated.apps.models.autoscaler_builtin_scaler.AutoscalerBuiltinScaler(
                    name = '', 
                    arguments = {
                        'key' : generated.apps.models.commonv1_value.commonv1Value(
                            value = '', 
                            value_from = generated.apps.models.v1_value_from.v1ValueFrom(
                                secret_key_ref = generated.apps.models.v1_key_reference.v1KeyReference(
                                    name = '', 
                                    key = '', ), 
                                config_map_key_ref = generated.apps.models.v1_key_reference.v1KeyReference(
                                    name = '', 
                                    key = '', ), ), )
                        }, ),
                third_party = generated.apps.models.autoscaler_third_party_scaler.AutoscalerThirdPartyScaler(
                    library = '', 
                    arguments = {
                        'key' : generated.apps.models.commonv1_value.commonv1Value(
                            value = '', 
                            value_from = generated.apps.models.v1_value_from.v1ValueFrom(
                                secret_key_ref = generated.apps.models.v1_key_reference.v1KeyReference(
                                    name = '', 
                                    key = '', ), 
                                config_map_key_ref = generated.apps.models.v1_key_reference.v1KeyReference(
                                    name = '', 
                                    key = '', ), ), )
                        }, ),
                container = generated.apps.models.autoscaler_container_scaler.AutoscalerContainerScaler(
                    image = '', 
                    image_pull_secrets = generated.apps.models.v1_image_pull_secrets.v1ImagePullSecrets(
                        username = generated.apps.models.commonv1_value.commonv1Value(
                            value = '', 
                            value_from = generated.apps.models.v1_value_from.v1ValueFrom(
                                secret_key_ref = generated.apps.models.v1_key_reference.v1KeyReference(
                                    name = '', 
                                    key = '', ), 
                                config_map_key_ref = generated.apps.models.v1_key_reference.v1KeyReference(
                                    name = '', 
                                    key = '', ), ), ), 
                        password = generated.apps.models.commonv1_value.commonv1Value(
                            value = '', ), ), 
                    command = [
                        ''
                        ], 
                    port = 56, 
                    entry_path = generated.apps.models.v1_entry_path.v1EntryPath(
                        http_post = generated.apps.models.v1_http_post.v1HttpPost(
                            path = '', ), ), 
                    volumes = [
                        generated.apps.models.v1_volume.v1Volume(
                            name = '', 
                            volume = generated.apps.models.volume_volume_item.VolumeVolumeItem(), 
                            secret = generated.apps.models.volume_secret_item.VolumeSecretItem(
                                secret_name = '', 
                                items = [
                                    generated.apps.models.volume_item.VolumeItem(
                                        key = '', 
                                        path = '', )
                                    ], ), 
                            config_map = generated.apps.models.volume_config_map_item.VolumeConfigMapItem(
                                name = '', ), )
                        ], )
            )
        else:
            return V1Autoscaler(
        )
        """

    def testV1Autoscaler(self):
        """Test V1Autoscaler"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
