# coding: utf-8

"""
    everai/apps/v1/worker.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from generated.apps.models.scale_record_autoscaling_action import ScaleRecordAutoscalingAction
from typing import Optional, Set
from typing_extensions import Self

class V1ScaleRecord(BaseModel):
    """
    V1ScaleRecord
    """ # noqa: E501
    request_id: Optional[StrictStr] = Field(default=None, alias="requestId")
    app_id: Optional[StrictStr] = Field(default=None, alias="appId")
    action: Optional[ScaleRecordAutoscalingAction] = None
    message: Optional[StrictStr] = None
    request_queue: Optional[StrictStr] = Field(default=None, alias="requestQueue")
    request_workers: Optional[StrictStr] = Field(default=None, alias="requestWorkers")
    factors: Optional[StrictStr] = None
    arguments: Optional[StrictStr] = None
    decorated_histories: Optional[StrictStr] = Field(default=None, alias="decoratedHistories")
    replicas: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["requestId", "appId", "action", "message", "requestQueue", "requestWorkers", "factors", "arguments", "decoratedHistories", "replicas"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1ScaleRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1ScaleRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "requestId": obj.get("requestId"),
            "appId": obj.get("appId"),
            "action": obj.get("action"),
            "message": obj.get("message"),
            "requestQueue": obj.get("requestQueue"),
            "requestWorkers": obj.get("requestWorkers"),
            "factors": obj.get("factors"),
            "arguments": obj.get("arguments"),
            "decoratedHistories": obj.get("decoratedHistories"),
            "replicas": obj.get("replicas")
        })
        return _obj


