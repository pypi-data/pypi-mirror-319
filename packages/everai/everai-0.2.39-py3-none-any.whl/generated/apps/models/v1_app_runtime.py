# coding: utf-8

"""
    everai/apps/v1/worker.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from generated.apps.models.app_runtimev1_request_queue import AppRuntimev1RequestQueue
from generated.apps.models.v1_app import V1App
from generated.apps.models.v1_worker_runtime import V1WorkerRuntime
from typing import Optional, Set
from typing_extensions import Self

class V1AppRuntime(BaseModel):
    """
    V1AppRuntime
    """ # noqa: E501
    app: Optional[V1App] = None
    workers: Optional[List[V1WorkerRuntime]] = None
    prefer_revision: Optional[StrictStr] = Field(default=None, alias="preferRevision")
    max_workers: Optional[StrictInt] = Field(default=None, alias="MaxWorkers")
    graceful_remove_workers: Optional[StrictBool] = Field(default=None, alias="gracefulRemoveWorkers")
    rollout_plan: Optional[Dict[str, StrictStr]] = Field(default=None, alias="rolloutPlan")
    queue: Optional[AppRuntimev1RequestQueue] = None
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    username: Optional[StrictStr] = None
    request_quota: Optional[StrictInt] = Field(default=None, alias="requestQuota")
    __properties: ClassVar[List[str]] = ["app", "workers", "preferRevision", "MaxWorkers", "gracefulRemoveWorkers", "rolloutPlan", "queue", "userId", "username", "requestQuota"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1AppRuntime from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app
        if self.app:
            _dict['app'] = self.app.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in workers (list)
        _items = []
        if self.workers:
            for _item in self.workers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['workers'] = _items
        # override the default output from pydantic by calling `to_dict()` of queue
        if self.queue:
            _dict['queue'] = self.queue.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1AppRuntime from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app": V1App.from_dict(obj["app"]) if obj.get("app") is not None else None,
            "workers": [V1WorkerRuntime.from_dict(_item) for _item in obj["workers"]] if obj.get("workers") is not None else None,
            "preferRevision": obj.get("preferRevision"),
            "MaxWorkers": obj.get("MaxWorkers"),
            "gracefulRemoveWorkers": obj.get("gracefulRemoveWorkers"),
            "rolloutPlan": obj.get("rolloutPlan"),
            "queue": AppRuntimev1RequestQueue.from_dict(obj["queue"]) if obj.get("queue") is not None else None,
            "userId": obj.get("userId"),
            "username": obj.get("username"),
            "requestQuota": obj.get("requestQuota")
        })
        return _obj


