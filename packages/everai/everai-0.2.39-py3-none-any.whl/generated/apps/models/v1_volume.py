# coding: utf-8

"""
    everai/apps/v1/worker.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from generated.apps.models.volume_combined_volume_item import VolumeCombinedVolumeItem
from generated.apps.models.volume_config_map_item import VolumeConfigMapItem
from generated.apps.models.volume_secret_item import VolumeSecretItem
from generated.apps.models.volume_shared_volume_item import VolumeSharedVolumeItem
from generated.apps.models.volume_volume_item import VolumeVolumeItem
from typing import Optional, Set
from typing_extensions import Self

class V1Volume(BaseModel):
    """
    V1Volume
    """ # noqa: E501
    name: StrictStr
    volume: Optional[VolumeVolumeItem] = None
    secret: Optional[VolumeSecretItem] = None
    config_map: Optional[VolumeConfigMapItem] = Field(default=None, alias="configMap")
    combined_volume: Optional[VolumeCombinedVolumeItem] = Field(default=None, alias="combinedVolume")
    shared_volume: Optional[VolumeSharedVolumeItem] = Field(default=None, alias="sharedVolume")
    __properties: ClassVar[List[str]] = ["name", "volume", "secret", "configMap", "combinedVolume", "sharedVolume"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1Volume from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of volume
        if self.volume:
            _dict['volume'] = self.volume.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secret
        if self.secret:
            _dict['secret'] = self.secret.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config_map
        if self.config_map:
            _dict['configMap'] = self.config_map.to_dict()
        # override the default output from pydantic by calling `to_dict()` of combined_volume
        if self.combined_volume:
            _dict['combinedVolume'] = self.combined_volume.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shared_volume
        if self.shared_volume:
            _dict['sharedVolume'] = self.shared_volume.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1Volume from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "volume": VolumeVolumeItem.from_dict(obj["volume"]) if obj.get("volume") is not None else None,
            "secret": VolumeSecretItem.from_dict(obj["secret"]) if obj.get("secret") is not None else None,
            "configMap": VolumeConfigMapItem.from_dict(obj["configMap"]) if obj.get("configMap") is not None else None,
            "combinedVolume": VolumeCombinedVolumeItem.from_dict(obj["combinedVolume"]) if obj.get("combinedVolume") is not None else None,
            "sharedVolume": VolumeSharedVolumeItem.from_dict(obj["sharedVolume"]) if obj.get("sharedVolume") is not None else None
        })
        return _obj


