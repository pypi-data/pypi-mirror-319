# coding: utf-8

"""
    everai/apps/v1/worker.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from generated.apps.models.app_spec_v1_alpha1_route_auth_type import AppSpecV1Alpha1RouteAuthType
from generated.apps.models.app_spec_v1_alpha1_service import AppSpecV1Alpha1Service
from generated.apps.models.v1_autoscaler import V1Autoscaler
from generated.apps.models.v1_environment import V1Environment
from generated.apps.models.v1_image_pull_secrets import V1ImagePullSecrets
from generated.apps.models.v1_life_cycle import V1LifeCycle
from generated.apps.models.v1_probe import V1Probe
from generated.apps.models.v1_resource import V1Resource
from generated.apps.models.v1_volume import V1Volume
from generated.apps.models.v1_volume_mount import V1VolumeMount
from typing import Optional, Set
from typing_extensions import Self

class V1AppSpecV1Alpha1(BaseModel):
    """
    V1AppSpecV1Alpha1
    """ # noqa: E501
    image: Optional[StrictStr] = None
    image_pull_secrets: Optional[V1ImagePullSecrets] = Field(default=None, alias="imagePullSecrets")
    volume_mounts: Optional[List[V1VolumeMount]] = Field(default=None, alias="volumeMounts")
    env: Optional[List[V1Environment]] = None
    command: Optional[List[StrictStr]] = None
    port: Optional[StrictInt] = None
    readiness_probe: Optional[V1Probe] = Field(default=None, alias="readinessProbe")
    volumes: Optional[List[V1Volume]] = None
    resource: V1Resource
    route_auth_type: Optional[AppSpecV1Alpha1RouteAuthType] = Field(default=None, alias="routeAuthType")
    route_public_key: Optional[StrictStr] = Field(default=None, alias="routePublicKey")
    request_quota: Optional[StrictInt] = Field(default=None, alias="requestQuota")
    autoscaler: Optional[V1Autoscaler] = None
    services: Optional[List[AppSpecV1Alpha1Service]] = None
    life_cycle: Optional[V1LifeCycle] = Field(default=None, alias="lifeCycle")
    auxiliary_users: Optional[List[StrictStr]] = Field(default=None, alias="auxiliaryUsers")
    __properties: ClassVar[List[str]] = ["image", "imagePullSecrets", "volumeMounts", "env", "command", "port", "readinessProbe", "volumes", "resource", "routeAuthType", "routePublicKey", "requestQuota", "autoscaler", "services", "lifeCycle", "auxiliaryUsers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1AppSpecV1Alpha1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image_pull_secrets
        if self.image_pull_secrets:
            _dict['imagePullSecrets'] = self.image_pull_secrets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in volume_mounts (list)
        _items = []
        if self.volume_mounts:
            for _item in self.volume_mounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['volumeMounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in env (list)
        _items = []
        if self.env:
            for _item in self.env:
                if _item:
                    _items.append(_item.to_dict())
            _dict['env'] = _items
        # override the default output from pydantic by calling `to_dict()` of readiness_probe
        if self.readiness_probe:
            _dict['readinessProbe'] = self.readiness_probe.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in volumes (list)
        _items = []
        if self.volumes:
            for _item in self.volumes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['volumes'] = _items
        # override the default output from pydantic by calling `to_dict()` of resource
        if self.resource:
            _dict['resource'] = self.resource.to_dict()
        # override the default output from pydantic by calling `to_dict()` of autoscaler
        if self.autoscaler:
            _dict['autoscaler'] = self.autoscaler.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item in self.services:
                if _item:
                    _items.append(_item.to_dict())
            _dict['services'] = _items
        # override the default output from pydantic by calling `to_dict()` of life_cycle
        if self.life_cycle:
            _dict['lifeCycle'] = self.life_cycle.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1AppSpecV1Alpha1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "image": obj.get("image"),
            "imagePullSecrets": V1ImagePullSecrets.from_dict(obj["imagePullSecrets"]) if obj.get("imagePullSecrets") is not None else None,
            "volumeMounts": [V1VolumeMount.from_dict(_item) for _item in obj["volumeMounts"]] if obj.get("volumeMounts") is not None else None,
            "env": [V1Environment.from_dict(_item) for _item in obj["env"]] if obj.get("env") is not None else None,
            "command": obj.get("command"),
            "port": obj.get("port"),
            "readinessProbe": V1Probe.from_dict(obj["readinessProbe"]) if obj.get("readinessProbe") is not None else None,
            "volumes": [V1Volume.from_dict(_item) for _item in obj["volumes"]] if obj.get("volumes") is not None else None,
            "resource": V1Resource.from_dict(obj["resource"]) if obj.get("resource") is not None else None,
            "routeAuthType": obj.get("routeAuthType"),
            "routePublicKey": obj.get("routePublicKey"),
            "requestQuota": obj.get("requestQuota"),
            "autoscaler": V1Autoscaler.from_dict(obj["autoscaler"]) if obj.get("autoscaler") is not None else None,
            "services": [AppSpecV1Alpha1Service.from_dict(_item) for _item in obj["services"]] if obj.get("services") is not None else None,
            "lifeCycle": V1LifeCycle.from_dict(obj["lifeCycle"]) if obj.get("lifeCycle") is not None else None,
            "auxiliaryUsers": obj.get("auxiliaryUsers")
        })
        return _obj


