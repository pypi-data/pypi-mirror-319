class Test_Likelihood_ZeroNoise_With_Uncertainty(unittest.TestCase):
    """
    Test likelihoods on a zero noise injection.
    """
    
    def setUp(self):
        self.waveform = IMRPhenomPv2_FakeUncertainty()
        self.psd_model = AdvancedLIGO()

        self.injections = make_injection_zero_noise(waveform=IMRPhenomPv2,
                                         injection_parameters={"distance": 1000*u.megaparsec,
                                                               "mass_ratio": 0.6,
                                                               "gpstime": 0,
                                                               "total_mass": 60 * u.solMass},
                                         detectors={"AdvancedLIGOHanford": "AdvancedLIGO",
                                                    "AdvancedLIGOLivingston": "AdvancedLIGO"}
                                         )

    def test_likelihood_no_norm(self):
        data = self.injections['H1']

        # from gwpy.plot import Plot

        likelihood = TimeDomainLikelihoodModelUncertainty(data, psd=self.psd_model)
        
        test_waveform = self.waveform.time_domain(parameters={"distance": 1000*u.megaparsec,
                                                               "mass_ratio": 0.6,
                                                              "gpstime": 0,
                                                               "total_mass": 60 * u.solMass}, times=likelihood.times)
        projected_waveform = test_waveform.project(AdvancedLIGOHanford(),
                                                   ra=0, dec=0,
                                                   gpstime=0,
                                                   phi_0=0, psi=0,
                                                   iota=0)

        # f = Plot(data, projected_waveform)
        # f.savefig("projected_waveform.png")

        log_like = likelihood.log_likelihood(projected_waveform, norm=False)

        self.assertTrue(log_like <= 1e-5)


    def test_likelihood_maximum_at_true_value_mass_ratio(self):
        
        data = self.injections['H1']

        likelihood = TimeDomainLikelihoodModelUncertainty(data, psd=self.psd_model)
        mass_ratios = np.linspace(0.1, 1.0, 100)

        log_likes = []
        for mass_ratio in mass_ratios:
        
            test_waveform = self.waveform.time_domain(parameters={"distance": 1000*u.megaparsec,
                                                                   "mass_ratio": mass_ratio,
                                                                  "gpstime": 0,
                                                                   "total_mass": 60 * u.solMass}, times=likelihood.times)
            projected_waveform = test_waveform.project(AdvancedLIGOHanford(),
                                                       ra=0, dec=0,
                                                       gpstime=0,
                                                       phi_0=0, psi=0,
                                                       iota=0)

            log_likes.append(likelihood.log_likelihood(projected_waveform, norm=False))

        print(mass_ratios[np.argmax(log_likes)])
        print(log_likes)
        self.assertTrue(mass_ratios[np.argmax(log_likes)] == 0.6)
