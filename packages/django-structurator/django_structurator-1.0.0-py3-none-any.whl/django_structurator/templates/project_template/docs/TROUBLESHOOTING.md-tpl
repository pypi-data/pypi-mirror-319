# Troubleshooting Guide

This guide addresses common issues you might encounter while using `{{ project_name }}`. For further assistance, consult the documentation or report an issue on GitHub.

---

## 1. Missing or Incorrect `.env` File

### Problem
Environment variables are not loaded correctly, or the `.env` file is missing.

### Cause
The `.env` file is either missing or improperly configured.

### Solution
1. Check that the `.env` file exists in the `src/config` directory.
2. Ensure the syntax is correct. Example:
   ```env
   DEBUG=True
   SECRET_KEY=your_secret_key
   DATABASE_URL=sqlite:///db.sqlite3
   ```
3. For django-environ, make sure the file is loaded in `base.py`:
    ```python
    import environ
    env = environ.Env()
    environ.Env.read_env()
    ```
4. If using python-dotenv, load the .env file in `base.py`:
    ```python
    from dotenv import load_dotenv
    load_dotenv()
    ```

## 2. Database Issues

### Problem
Database Connection Failure

### Cause
The database settings in settings/base.py or the .env file are incorrect.

### Solution
1. Check the database URL in the `.env` file. Example for PostgreSQL
    ```env
    DATABASE_URL=postgres://user:password@localhost:5432/mydatabase
    ```
2. Ensure the database server is running and accessible:

    - For PostgreSQL: Use psql to test connectivity.
    - For SQLite: Ensure the file local_db/db.sqlite3 exists or can be created.
3. Verify that the corresponding database driver is installed:

    - PostgreSQL: pip install psycopg2
    - MySQL: pip install mysqlclient
4. For SQLite, no additional drivers are needed, and the default settings should work.

