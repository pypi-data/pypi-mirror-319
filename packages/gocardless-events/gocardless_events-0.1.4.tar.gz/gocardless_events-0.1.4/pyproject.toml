[project]
name = "gocardless-events"
dynamic = ["version"]
description = "Type-safe Python models for for all GoCardless events using Pydantic"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "pydantic>=2.10.4",
]
license = { file = "LICENSE" }
keywords = ["gocardless", "pydantic"]
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
    "Typing :: Typed",
]

[project.urls]
Repository = "https://github.com/karoo-ca/gocardless-events.git"
Issues = "https://github.com/karoo-ca/gocardless-events/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/gocardless_events/__init__.py"

[tool.hatch.build.targets.sdist]
include = ["src"]

[dependency-groups]
dev = [
    "jinja2>=3.1.5",
    "beautifulsoup4>=4.12.3",
    "mypy>=1.14.0",
    "pytest>=8.3.4",
    "ruff>=0.8.4",
    "types-beautifulsoup4>=4.12.0.20241020",
]

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "UP",    # pyupgrade
    "B",     # bugbear
    "TD",    # todos
    "PERF",  # performance
    "RUF",   # ruff
    "ASYNC", # flake8-async
    "S",     # bandit
    "BLE",   # blind except
    "FBT",   # boolean trap
    "A",     # shadowing builtins
    "DTZ",   # datetime timezone
    "EM",    # error message
    "FA",    # future annotations
    "G",     # logging format
]
ignore = [
    "E501",  # line too long (handled by ruff format)
    "W505",  # line too long (handled by ruff format)
    "TD002", # todo author
    "TD003", # todo link
    "S101",  # use of assert
]

[tool.ruff.format]
docstring-code-format = true

[tool.mypy]
strict = true
