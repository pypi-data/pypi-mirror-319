# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class fc00_ConfigUpdate(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = fc00_ConfigUpdate()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsfc00_ConfigUpdate(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def fc00_ConfigUpdateBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x66\x63\x30\x30", size_prefixed=size_prefixed)

    # fc00_ConfigUpdate
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # fc00_ConfigUpdate
    def ConfigChange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # fc00_ConfigUpdate
    def Streams(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Stream import Stream
            obj = Stream()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # fc00_ConfigUpdate
    def StreamsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # fc00_ConfigUpdate
    def StreamsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def fc00_ConfigUpdateStart(builder): builder.StartObject(2)
def Start(builder):
    return fc00_ConfigUpdateStart(builder)
def fc00_ConfigUpdateAddConfigChange(builder, configChange): builder.PrependUint16Slot(0, configChange, 0)
def AddConfigChange(builder, configChange):
    return fc00_ConfigUpdateAddConfigChange(builder, configChange)
def fc00_ConfigUpdateAddStreams(builder, streams): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(streams), 0)
def AddStreams(builder, streams):
    return fc00_ConfigUpdateAddStreams(builder, streams)
def fc00_ConfigUpdateStartStreamsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartStreamsVector(builder, numElems):
    return fc00_ConfigUpdateStartStreamsVector(builder, numElems)
def fc00_ConfigUpdateEnd(builder): return builder.EndObject()
def End(builder):
    return fc00_ConfigUpdateEnd(builder)