# automatically generated by the FlatBuffers compiler, do not modify

# namespace:

import flatbuffers


class Alarm(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAsAlarm(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Alarm()
        x.Init(buf, n + offset)
        return x

    # Alarm
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Alarm
    def SourceName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Alarm
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Alarm
    def Severity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Alarm
    def Message(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None


def AlarmStart(builder):
    builder.StartObject(4)


def AlarmAddSourceName(builder, sourceName):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(sourceName), 0
    )


def AlarmAddTimestamp(builder, timestamp):
    builder.PrependInt64Slot(1, timestamp, 0)


def AlarmAddSeverity(builder, severity):
    builder.PrependInt16Slot(2, severity, 0)


def AlarmAddMessage(builder, message):
    builder.PrependUOffsetTRelativeSlot(
        3, flatbuffers.number_types.UOffsetTFlags.py_type(message), 0
    )


def AlarmEnd(builder):
    return builder.EndObject()
