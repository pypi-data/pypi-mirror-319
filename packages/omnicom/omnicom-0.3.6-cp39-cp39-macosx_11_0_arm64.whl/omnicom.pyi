from __future__ import annotations
import numpy
import typing
__all__ = ['Controller', 'NES']
class Controller:
    def __init__(self) -> None:
        ...
    def updateInputs(self, arg0: list) -> None:
        ...
class NES:
    def OAM(self) -> numpy.ndarray[numpy.uint8]:
        ...
    @typing.overload
    def __init__(self, rom_name: str, CLOCK_SPEED: int = 1789773) -> None:
        ...
    @typing.overload
    def __init__(self, CLOCK_SPEED: int = 1789773) -> None:
        ...
    def colorLookup(self) -> numpy.ndarray[numpy.uint8]:
        ...
    def cpuMem(self) -> numpy.ndarray[numpy.uint8]:
        ...
    def cycleCount(self) -> int:
        ...
    def frameCount(self) -> int:
        ...
    def getAudio(self) -> bytes:
        ...
    def getImg(self) -> numpy.ndarray[numpy.uint8]:
        ...
    def getSaveDir(self) -> str:
        ...
    def loadState(self, arg0: int) -> bool:
        ...
    def perFrame(self, arg0: typing.Callable[[], None]) -> None:
        ...
    def ppuMem(self) -> numpy.ndarray[numpy.uint8]:
        ...
    def runFrame(self) -> None:
        ...
    def saveState(self, arg0: int) -> None:
        ...
    def setController(self, arg0: Controller, arg1: int) -> None:
        ...
    def setPaused(self, arg0: bool) -> None:
        ...
    def setSaveDir(self, arg0: str) -> bool:
        ...
    def start(self) -> None:
        ...
    def stop(self) -> None:
        ...
